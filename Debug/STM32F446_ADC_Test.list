
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b78  08011e20  08011e20  00021e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016998  08016998  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08016998  08016998  00026998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080169a0  080169a0  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080169a0  080169a0  000269a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080169a4  080169a4  000269a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  080169a8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000095a8  20000220  08016bc8  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200097c8  08016bc8  000397c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   000199c2  00000000  00000000  00030293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cc4  00000000  00000000  00049c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b0  00000000  00000000  0004d920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001265  00000000  00000000  0004f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000276c7  00000000  00000000  00050335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020023  00000000  00000000  000779fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5c67  00000000  00000000  00097a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b04  00000000  00000000  0017d688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0018518c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011e08 	.word	0x08011e08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	08011e08 	.word	0x08011e08

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9bb 	b.w	8001020 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b970 	b.w	8001020 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0xe2>
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	b143      	cbz	r3, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d82:	4317      	orrs	r7, r2
 8000d84:	409c      	lsls	r4, r3
 8000d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8a:	fa1f f58c 	uxth.w	r5, ip
 8000d8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d92:	0c22      	lsrs	r2, r4, #16
 8000d94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d9c:	fb01 f005 	mul.w	r0, r1, r5
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dac:	f080 811c 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000db0:	4290      	cmp	r0, r2
 8000db2:	f240 8119 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4462      	add	r2, ip
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	b2a4      	uxth	r4, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dca:	fb00 f505 	mul.w	r5, r0, r5
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x90>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x294>
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x294>
 8000de4:	4464      	add	r4, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11e      	cbz	r6, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40dc      	lsrs	r4, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0xbc>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80ed 	beq.w	8000fe2 <__udivmoddi4+0x28a>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	fab3 f183 	clz	r1, r3
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d149      	bne.n	8000eb0 <__udivmoddi4+0x158>
 8000e1c:	42ab      	cmp	r3, r5
 8000e1e:	d302      	bcc.n	8000e26 <__udivmoddi4+0xce>
 8000e20:	4282      	cmp	r2, r0
 8000e22:	f200 80f8 	bhi.w	8001016 <__udivmoddi4+0x2be>
 8000e26:	1a84      	subs	r4, r0, r2
 8000e28:	eb65 0203 	sbc.w	r2, r5, r3
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d0e2      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	e9c6 4700 	strd	r4, r7, [r6]
 8000e38:	e7df      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xe6>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	2101      	movs	r1, #1
 8000e54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e58:	fb07 2015 	mls	r0, r7, r5, r2
 8000e5c:	0c22      	lsrs	r2, r4, #16
 8000e5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e62:	fb0e f005 	mul.w	r0, lr, r5
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f200 80cb 	bhi.w	8001010 <__udivmoddi4+0x2b8>
 8000e7a:	4645      	mov	r5, r8
 8000e7c:	1a12      	subs	r2, r2, r0
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e84:	fb07 2210 	mls	r2, r7, r0, r2
 8000e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x14e>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e9c:	d202      	bcs.n	8000ea4 <__udivmoddi4+0x14c>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f200 80bb 	bhi.w	800101a <__udivmoddi4+0x2c2>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eae:	e79f      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb0:	f1c1 0720 	rsb	r7, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ebe:	fa05 f401 	lsl.w	r4, r5, r1
 8000ec2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec6:	40fd      	lsrs	r5, r7
 8000ec8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ee0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eea:	fa00 f001 	lsl.w	r0, r0, r1
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef8:	f080 8088 	bcs.w	800100c <__udivmoddi4+0x2b4>
 8000efc:	42a5      	cmp	r5, r4
 8000efe:	f240 8085 	bls.w	800100c <__udivmoddi4+0x2b4>
 8000f02:	f1a8 0802 	sub.w	r8, r8, #2
 8000f06:	4464      	add	r4, ip
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	b29d      	uxth	r5, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f28:	d26c      	bcs.n	8001004 <__udivmoddi4+0x2ac>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	d96a      	bls.n	8001004 <__udivmoddi4+0x2ac>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	fba3 9502 	umull	r9, r5, r3, r2
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	46c8      	mov	r8, r9
 8000f42:	46ae      	mov	lr, r5
 8000f44:	d356      	bcc.n	8000ff4 <__udivmoddi4+0x29c>
 8000f46:	d053      	beq.n	8000ff0 <__udivmoddi4+0x298>
 8000f48:	b156      	cbz	r6, 8000f60 <__udivmoddi4+0x208>
 8000f4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f52:	fa04 f707 	lsl.w	r7, r4, r7
 8000f56:	40ca      	lsrs	r2, r1
 8000f58:	40cc      	lsrs	r4, r1
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	f1c3 0120 	rsb	r1, r3, #32
 8000f6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f70:	fa20 f201 	lsr.w	r2, r0, r1
 8000f74:	fa25 f101 	lsr.w	r1, r5, r1
 8000f78:	409d      	lsls	r5, r3
 8000f7a:	432a      	orrs	r2, r5
 8000f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f80:	fa1f fe8c 	uxth.w	lr, ip
 8000f84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f88:	fb07 1510 	mls	r5, r7, r0, r1
 8000f8c:	0c11      	lsrs	r1, r2, #16
 8000f8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f92:	fb00 f50e 	mul.w	r5, r0, lr
 8000f96:	428d      	cmp	r5, r1
 8000f98:	fa04 f403 	lsl.w	r4, r4, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x258>
 8000f9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa6:	d22f      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fa8:	428d      	cmp	r5, r1
 8000faa:	d92d      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x282>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fd0:	d216      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d914      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000fd6:	3d02      	subs	r5, #2
 8000fd8:	4462      	add	r2, ip
 8000fda:	1a52      	subs	r2, r2, r1
 8000fdc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fe0:	e738      	b.n	8000e54 <__udivmoddi4+0xfc>
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e708      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	e6e6      	b.n	8000dba <__udivmoddi4+0x62>
 8000fec:	4610      	mov	r0, r2
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x90>
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	d2a9      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	e7a3      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8001000:	4645      	mov	r5, r8
 8001002:	e7ea      	b.n	8000fda <__udivmoddi4+0x282>
 8001004:	462b      	mov	r3, r5
 8001006:	e794      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001008:	4640      	mov	r0, r8
 800100a:	e7d1      	b.n	8000fb0 <__udivmoddi4+0x258>
 800100c:	46d0      	mov	r8, sl
 800100e:	e77b      	b.n	8000f08 <__udivmoddi4+0x1b0>
 8001010:	3d02      	subs	r5, #2
 8001012:	4462      	add	r2, ip
 8001014:	e732      	b.n	8000e7c <__udivmoddi4+0x124>
 8001016:	4608      	mov	r0, r1
 8001018:	e70a      	b.n	8000e30 <__udivmoddi4+0xd8>
 800101a:	4464      	add	r4, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e742      	b.n	8000ea6 <__udivmoddi4+0x14e>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <calc_process_dma_buffer+0x24>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d002      	beq.n	8001048 <calc_process_dma_buffer+0x24>
		return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	e0d0      	b.n	80011ea <calc_process_dma_buffer+0x1c6>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8001050:	7c7b      	ldrb	r3, [r7, #17]
 8001052:	3301      	adds	r3, #1
 8001054:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 800105c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8001060:	82bb      	strh	r3, [r7, #20]
 8001062:	e001      	b.n	8001068 <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 8001064:	2300      	movs	r3, #0
 8001066:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8001068:	8abb      	ldrh	r3, [r7, #20]
 800106a:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 800106e:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 8001070:	7c7a      	ldrb	r2, [r7, #17]
 8001072:	4960      	ldr	r1, [pc, #384]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001082:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 8001084:	7c7a      	ldrb	r2, [r7, #17]
 8001086:	495b      	ldr	r1, [pc, #364]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	3302      	adds	r3, #2
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 8001098:	7c3a      	ldrb	r2, [r7, #16]
 800109a:	4956      	ldr	r1, [pc, #344]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010aa:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 80010ac:	7c3a      	ldrb	r2, [r7, #16]
 80010ae:	4951      	ldr	r1, [pc, #324]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3302      	adds	r3, #2
 80010bc:	2200      	movs	r2, #0
 80010be:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 80010c0:	7c7a      	ldrb	r2, [r7, #17]
 80010c2:	494c      	ldr	r1, [pc, #304]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	3304      	adds	r3, #4
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d4:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 80010d6:	7c7a      	ldrb	r2, [r7, #17]
 80010d8:	4946      	ldr	r1, [pc, #280]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ea:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 80010ec:	7c3a      	ldrb	r2, [r7, #16]
 80010ee:	4941      	ldr	r1, [pc, #260]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3304      	adds	r3, #4
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001100:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8001102:	7c3a      	ldrb	r2, [r7, #16]
 8001104:	493b      	ldr	r1, [pc, #236]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3308      	adds	r3, #8
 8001112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001116:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].measurements_valid = 0;
 8001118:	7c7a      	ldrb	r2, [r7, #17]
 800111a:	4936      	ldr	r1, [pc, #216]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	330c      	adds	r3, #12
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].measurements_valid = 0;
 800112c:	7c3a      	ldrb	r2, [r7, #16]
 800112e:	4931      	ldr	r1, [pc, #196]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	330c      	adds	r3, #12
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].value_is_zero = 0;
 8001140:	7c7a      	ldrb	r2, [r7, #17]
 8001142:	492c      	ldr	r1, [pc, #176]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	330d      	adds	r3, #13
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].value_is_zero = 0;
 8001154:	7c3a      	ldrb	r2, [r7, #16]
 8001156:	4927      	ldr	r1, [pc, #156]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	330d      	adds	r3, #13
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001168:	8abb      	ldrh	r3, [r7, #20]
 800116a:	82fb      	strh	r3, [r7, #22]
 800116c:	e030      	b.n	80011d0 <calc_process_dma_buffer+0x1ac>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 800116e:	8af9      	ldrh	r1, [r7, #22]
 8001170:	7c7a      	ldrb	r2, [r7, #17]
 8001172:	8a7b      	ldrh	r3, [r7, #18]
 8001174:	4c20      	ldr	r4, [pc, #128]	; (80011f8 <calc_process_dma_buffer+0x1d4>)
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 800117c:	fb05 f000 	mul.w	r0, r5, r0
 8001180:	4401      	add	r1, r0
 8001182:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 8001186:	491d      	ldr	r1, [pc, #116]	; (80011fc <calc_process_dma_buffer+0x1d8>)
 8001188:	f44f 7052 	mov.w	r0, #840	; 0x348
 800118c:	fb00 f202 	mul.w	r2, r0, r2
 8001190:	4413      	add	r3, r2
 8001192:	4622      	mov	r2, r4
 8001194:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 8001198:	8afb      	ldrh	r3, [r7, #22]
 800119a:	1c59      	adds	r1, r3, #1
 800119c:	7c3a      	ldrb	r2, [r7, #16]
 800119e:	8a7b      	ldrh	r3, [r7, #18]
 80011a0:	1c58      	adds	r0, r3, #1
 80011a2:	8278      	strh	r0, [r7, #18]
 80011a4:	461d      	mov	r5, r3
 80011a6:	4814      	ldr	r0, [pc, #80]	; (80011f8 <calc_process_dma_buffer+0x1d4>)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 80011ae:	fb04 f303 	mul.w	r3, r4, r3
 80011b2:	440b      	add	r3, r1
 80011b4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80011b8:	4910      	ldr	r1, [pc, #64]	; (80011fc <calc_process_dma_buffer+0x1d8>)
 80011ba:	f44f 7352 	mov.w	r3, #840	; 0x348
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	442b      	add	r3, r5
 80011c4:	4602      	mov	r2, r0
 80011c6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 80011ca:	8afb      	ldrh	r3, [r7, #22]
 80011cc:	3302      	adds	r3, #2
 80011ce:	82fb      	strh	r3, [r7, #22]
 80011d0:	8afa      	ldrh	r2, [r7, #22]
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d9ca      	bls.n	800116e <calc_process_dma_buffer+0x14a>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 80011d8:	7c7b      	ldrb	r3, [r7, #17]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f93c 	bl	8001458 <calc_downsample>
	calc_downsample(raw_buf_second);
 80011e0:	7c3b      	ldrb	r3, [r7, #16]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f938 	bl	8001458 <calc_downsample>
	return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000023c 	.word	0x2000023c
 80011f8:	20002658 	.word	0x20002658
 80011fc:	20005ad8 	.word	0x20005ad8

08001200 <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	2b03      	cmp	r3, #3
 8001212:	f200 8117 	bhi.w	8001444 <calc_zero_detector+0x244>
	uint8_t detected = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	0fda      	lsrs	r2, r3, #31
 8001222:	4413      	add	r3, r2
 8001224:	105b      	asrs	r3, r3, #1
 8001226:	461a      	mov	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4413      	add	r3, r2
 800122c:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0fda      	lsrs	r2, r3, #31
 8001232:	4413      	add	r3, r2
 8001234:	105b      	asrs	r3, r3, #1
 8001236:	425b      	negs	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	4413      	add	r3, r2
 800123e:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
 8001244:	e0df      	b.n	8001406 <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4981      	ldr	r1, [pc, #516]	; (8001450 <calc_zero_detector+0x250>)
 800124a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800124e:	fb03 f202 	mul.w	r2, r3, r2
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4413      	add	r3, r2
 8001256:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800125a:	461a      	mov	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4293      	cmp	r3, r2
 8001260:	f300 80ce 	bgt.w	8001400 <calc_zero_detector+0x200>
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	497a      	ldr	r1, [pc, #488]	; (8001450 <calc_zero_detector+0x250>)
 8001268:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800126c:	fb03 f202 	mul.w	r2, r3, r2
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	4413      	add	r3, r2
 8001274:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001278:	461a      	mov	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	4293      	cmp	r3, r2
 800127e:	f2c0 80bf 	blt.w	8001400 <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	4972      	ldr	r1, [pc, #456]	; (8001450 <calc_zero_detector+0x250>)
 8001286:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800128a:	fb03 f202 	mul.w	r2, r3, r2
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4413      	add	r3, r2
 8001292:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001296:	461a      	mov	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4293      	cmp	r3, r2
 800129c:	da3d      	bge.n	800131a <calc_zero_detector+0x11a>
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	496a      	ldr	r1, [pc, #424]	; (8001450 <calc_zero_detector+0x250>)
 80012a6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012aa:	fb00 f202 	mul.w	r2, r0, r2
 80012ae:	4413      	add	r3, r2
 80012b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012b4:	461a      	mov	r2, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	4293      	cmp	r3, r2
 80012ba:	db2e      	blt.n	800131a <calc_zero_detector+0x11a>
				detected++;
 80012bc:	7ffb      	ldrb	r3, [r7, #31]
 80012be:	3301      	adds	r3, #1
 80012c0:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	dd11      	ble.n	80012ec <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	3b02      	subs	r3, #2
 80012ce:	4960      	ldr	r1, [pc, #384]	; (8001450 <calc_zero_detector+0x250>)
 80012d0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012d4:	fb00 f202 	mul.w	r2, r0, r2
 80012d8:	4413      	add	r3, r2
 80012da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012de:	461a      	mov	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4293      	cmp	r3, r2
 80012e4:	dd02      	ble.n	80012ec <calc_zero_detector+0xec>
						detected++;
 80012e6:	7ffb      	ldrb	r3, [r7, #31]
 80012e8:	3301      	adds	r3, #1
 80012ea:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	3302      	adds	r3, #2
 80012f0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80012f4:	d211      	bcs.n	800131a <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	3302      	adds	r3, #2
 80012fc:	4954      	ldr	r1, [pc, #336]	; (8001450 <calc_zero_detector+0x250>)
 80012fe:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001302:	fb00 f202 	mul.w	r2, r0, r2
 8001306:	4413      	add	r3, r2
 8001308:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800130c:	461a      	mov	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	4293      	cmp	r3, r2
 8001312:	da02      	bge.n	800131a <calc_zero_detector+0x11a>
						detected++;
 8001314:	7ffb      	ldrb	r3, [r7, #31]
 8001316:	3301      	adds	r3, #1
 8001318:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d90f      	bls.n	8001340 <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	494c      	ldr	r1, [pc, #304]	; (8001454 <calc_zero_detector+0x254>)
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	3304      	adds	r3, #4
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	601a      	str	r2, [r3, #0]
				detected = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 8001338:	7fbb      	ldrb	r3, [r7, #30]
 800133a:	3301      	adds	r3, #1
 800133c:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 800133e:	e05f      	b.n	8001400 <calc_zero_detector+0x200>
			}
			detected = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	4942      	ldr	r1, [pc, #264]	; (8001450 <calc_zero_detector+0x250>)
 8001348:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800134c:	fb03 f202 	mul.w	r2, r3, r2
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4413      	add	r3, r2
 8001354:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001358:	461a      	mov	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	4293      	cmp	r3, r2
 800135e:	dd4f      	ble.n	8001400 <calc_zero_detector+0x200>
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	3b01      	subs	r3, #1
 8001366:	493a      	ldr	r1, [pc, #232]	; (8001450 <calc_zero_detector+0x250>)
 8001368:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800136c:	fb00 f202 	mul.w	r2, r0, r2
 8001370:	4413      	add	r3, r2
 8001372:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001376:	461a      	mov	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4293      	cmp	r3, r2
 800137c:	dc40      	bgt.n	8001400 <calc_zero_detector+0x200>
				detected++;
 800137e:	7ffb      	ldrb	r3, [r7, #31]
 8001380:	3301      	adds	r3, #1
 8001382:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b01      	cmp	r3, #1
 8001388:	dd11      	ble.n	80013ae <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	3b02      	subs	r3, #2
 8001390:	492f      	ldr	r1, [pc, #188]	; (8001450 <calc_zero_detector+0x250>)
 8001392:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001396:	fb00 f202 	mul.w	r2, r0, r2
 800139a:	4413      	add	r3, r2
 800139c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013a0:	461a      	mov	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	4293      	cmp	r3, r2
 80013a6:	dc02      	bgt.n	80013ae <calc_zero_detector+0x1ae>
						detected++;
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
 80013aa:	3301      	adds	r3, #1
 80013ac:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	3302      	adds	r3, #2
 80013b2:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80013b6:	d211      	bcs.n	80013dc <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	3302      	adds	r3, #2
 80013be:	4924      	ldr	r1, [pc, #144]	; (8001450 <calc_zero_detector+0x250>)
 80013c0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80013c4:	fb00 f202 	mul.w	r2, r0, r2
 80013c8:	4413      	add	r3, r2
 80013ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	dd02      	ble.n	80013dc <calc_zero_detector+0x1dc>
						detected++;
 80013d6:	7ffb      	ldrb	r3, [r7, #31]
 80013d8:	3301      	adds	r3, #1
 80013da:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d90c      	bls.n	80013fc <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	491b      	ldr	r1, [pc, #108]	; (8001454 <calc_zero_detector+0x254>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	3308      	adds	r3, #8
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	601a      	str	r2, [r3, #0]
					detect_count++;
 80013f6:	7fbb      	ldrb	r3, [r7, #30]
 80013f8:	3301      	adds	r3, #1
 80013fa:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	3301      	adds	r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800140c:	f4ff af1b 	bcc.w	8001246 <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected, we could have up to 3
	if (detect_count > 3) {
 8001410:	7fbb      	ldrb	r3, [r7, #30]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d917      	bls.n	8001446 <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	490e      	ldr	r1, [pc, #56]	; (8001454 <calc_zero_detector+0x254>)
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3308      	adds	r3, #8
 8001426:	f06f 0208 	mvn.w	r2, #8
 800142a:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	4909      	ldr	r1, [pc, #36]	; (8001454 <calc_zero_detector+0x254>)
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3304      	adds	r3, #4
 800143c:	f06f 0208 	mvn.w	r2, #8
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e000      	b.n	8001446 <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001444:	bf00      	nop
	}
}
 8001446:	3724      	adds	r7, #36	; 0x24
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	20007518 	.word	0x20007518
 8001454:	2000023c 	.word	0x2000023c

08001458 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing, etc)
 */
void calc_downsample(uint8_t bufnum) {
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 8001462:	2300      	movs	r3, #0
 8001464:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b03      	cmp	r3, #3
 800146a:	f200 8115 	bhi.w	8001698 <calc_downsample+0x240>
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	e083      	b.n	800157c <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	498a      	ldr	r1, [pc, #552]	; (80016a0 <calc_downsample+0x248>)
 8001478:	f44f 7252 	mov.w	r2, #840	; 0x348
 800147c:	fb03 f202 	mul.w	r2, r3, r2
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	4413      	add	r3, r2
 8001484:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001488:	461c      	mov	r4, r3
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	3b01      	subs	r3, #1
 8001490:	4983      	ldr	r1, [pc, #524]	; (80016a0 <calc_downsample+0x248>)
 8001492:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001496:	fb00 f202 	mul.w	r2, r0, r2
 800149a:	4413      	add	r3, r2
 800149c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014a0:	4423      	add	r3, r4
 80014a2:	79f9      	ldrb	r1, [r7, #7]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	3201      	adds	r2, #1
 80014a8:	487d      	ldr	r0, [pc, #500]	; (80016a0 <calc_downsample+0x248>)
 80014aa:	f44f 7452 	mov.w	r4, #840	; 0x348
 80014ae:	fb04 f101 	mul.w	r1, r4, r1
 80014b2:	440a      	add	r2, r1
 80014b4:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a7a      	ldr	r2, [pc, #488]	; (80016a4 <calc_downsample+0x24c>)
 80014bc:	fb82 1203 	smull	r1, r2, r2, r3
 80014c0:	17db      	asrs	r3, r3, #31
 80014c2:	1ad1      	subs	r1, r2, r3
 80014c4:	79fa      	ldrb	r2, [r7, #7]
 80014c6:	8bfb      	ldrh	r3, [r7, #30]
 80014c8:	b28c      	uxth	r4, r1
 80014ca:	4977      	ldr	r1, [pc, #476]	; (80016a8 <calc_downsample+0x250>)
 80014cc:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014d0:	fb00 f202 	mul.w	r2, r0, r2
 80014d4:	4413      	add	r3, r2
 80014d6:	4622      	mov	r2, r4
 80014d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 80014dc:	79fa      	ldrb	r2, [r7, #7]
 80014de:	4973      	ldr	r1, [pc, #460]	; (80016ac <calc_downsample+0x254>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	82bb      	strh	r3, [r7, #20]
 80014ee:	79fa      	ldrb	r2, [r7, #7]
 80014f0:	8bfb      	ldrh	r3, [r7, #30]
 80014f2:	496d      	ldr	r1, [pc, #436]	; (80016a8 <calc_downsample+0x250>)
 80014f4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014f8:	fb00 f202 	mul.w	r2, r0, r2
 80014fc:	4413      	add	r3, r2
 80014fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001502:	827b      	strh	r3, [r7, #18]
 8001504:	8a7a      	ldrh	r2, [r7, #18]
 8001506:	8abb      	ldrh	r3, [r7, #20]
 8001508:	4293      	cmp	r3, r2
 800150a:	bf28      	it	cs
 800150c:	4613      	movcs	r3, r2
 800150e:	b29b      	uxth	r3, r3
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	b298      	uxth	r0, r3
 8001514:	4965      	ldr	r1, [pc, #404]	; (80016ac <calc_downsample+0x254>)
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	4602      	mov	r2, r0
 8001522:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 8001524:	79fa      	ldrb	r2, [r7, #7]
 8001526:	4961      	ldr	r1, [pc, #388]	; (80016ac <calc_downsample+0x254>)
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	3302      	adds	r3, #2
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	823b      	strh	r3, [r7, #16]
 8001538:	79fa      	ldrb	r2, [r7, #7]
 800153a:	8bfb      	ldrh	r3, [r7, #30]
 800153c:	495a      	ldr	r1, [pc, #360]	; (80016a8 <calc_downsample+0x250>)
 800153e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001542:	fb00 f202 	mul.w	r2, r0, r2
 8001546:	4413      	add	r3, r2
 8001548:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800154c:	81fb      	strh	r3, [r7, #14]
 800154e:	89fa      	ldrh	r2, [r7, #14]
 8001550:	8a3b      	ldrh	r3, [r7, #16]
 8001552:	4293      	cmp	r3, r2
 8001554:	bf38      	it	cc
 8001556:	4613      	movcc	r3, r2
 8001558:	b29b      	uxth	r3, r3
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	b298      	uxth	r0, r3
 800155e:	4953      	ldr	r1, [pc, #332]	; (80016ac <calc_downsample+0x254>)
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3302      	adds	r3, #2
 800156c:	4602      	mov	r2, r0
 800156e:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 8001570:	8bfb      	ldrh	r3, [r7, #30]
 8001572:	3301      	adds	r3, #1
 8001574:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	3302      	adds	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f240 3245 	movw	r2, #837	; 0x345
 8001582:	4293      	cmp	r3, r2
 8001584:	f67f af76 	bls.w	8001474 <calc_downsample+0x1c>
	}
	// Last sample in the buffer (we only have 2 raw readings available for averaging)
	sample_buf[bufnum][dest_idx++] = (adc_raw_buf[bufnum][ADC_NUM_DATA-1] + adc_raw_buf[bufnum][ADC_NUM_DATA-2]) / 2;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <calc_downsample+0x248>)
 800158c:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	4413      	add	r3, r2
 8001596:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <calc_downsample+0x248>)
 80015a2:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	4403      	add	r3, r0
 80015b4:	0fda      	lsrs	r2, r3, #31
 80015b6:	4413      	add	r3, r2
 80015b8:	105b      	asrs	r3, r3, #1
 80015ba:	4618      	mov	r0, r3
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	8bfb      	ldrh	r3, [r7, #30]
 80015c0:	1c59      	adds	r1, r3, #1
 80015c2:	83f9      	strh	r1, [r7, #30]
 80015c4:	461c      	mov	r4, r3
 80015c6:	b280      	uxth	r0, r0
 80015c8:	4937      	ldr	r1, [pc, #220]	; (80016a8 <calc_downsample+0x250>)
 80015ca:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	4423      	add	r3, r4
 80015d4:	4602      	mov	r2, r0
 80015d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// test if the last value is not assigned
	if (dest_idx < SAMPLE_BUF_SIZE) {
 80015da:	8bfb      	ldrh	r3, [r7, #30]
 80015dc:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80015e0:	d20a      	bcs.n	80015f8 <calc_downsample+0x1a0>
		sample_buf[bufnum][dest_idx] = 0;
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	8bfb      	ldrh	r3, [r7, #30]
 80015e6:	4930      	ldr	r1, [pc, #192]	; (80016a8 <calc_downsample+0x250>)
 80015e8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80015ec:	fb00 f202 	mul.w	r2, r0, r2
 80015f0:	4413      	add	r3, r2
 80015f2:	2200      	movs	r2, #0
 80015f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80015f8:	79fa      	ldrb	r2, [r7, #7]
 80015fa:	492c      	ldr	r1, [pc, #176]	; (80016ac <calc_downsample+0x254>)
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3302      	adds	r3, #2
 8001608:	8819      	ldrh	r1, [r3, #0]
 800160a:	79fa      	ldrb	r2, [r7, #7]
 800160c:	4827      	ldr	r0, [pc, #156]	; (80016ac <calc_downsample+0x254>)
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4403      	add	r3, r0
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	1acb      	subs	r3, r1, r3
 800161c:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	if (range > ADC_NOISE_RAW) {
 800161e:	8afb      	ldrh	r3, [r7, #22]
 8001620:	2b1e      	cmp	r3, #30
 8001622:	d918      	bls.n	8001656 <calc_downsample+0x1fe>
		calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	b29b      	uxth	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	79fa      	ldrb	r2, [r7, #7]
 800162e:	491f      	ldr	r1, [pc, #124]	; (80016ac <calc_downsample+0x254>)
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	18c1      	adds	r1, r0, r3
 800163e:	8afb      	ldrh	r3, [r7, #22]
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <calc_downsample+0x258>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	b29b      	uxth	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fdd6 	bl	8001200 <calc_zero_detector>
 8001654:	e021      	b.n	800169a <calc_downsample+0x242>
	} else {
		// mark zero crossings as invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	4914      	ldr	r1, [pc, #80]	; (80016ac <calc_downsample+0x254>)
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3308      	adds	r3, #8
 8001666:	f06f 0208 	mvn.w	r2, #8
 800166a:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 800166c:	79fa      	ldrb	r2, [r7, #7]
 800166e:	490f      	ldr	r1, [pc, #60]	; (80016ac <calc_downsample+0x254>)
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3304      	adds	r3, #4
 800167c:	f06f 0208 	mvn.w	r2, #8
 8001680:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].value_is_zero = 1;		// value is zero
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	4909      	ldr	r1, [pc, #36]	; (80016ac <calc_downsample+0x254>)
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	330d      	adds	r3, #13
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	e000      	b.n	800169a <calc_downsample+0x242>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001698:	bf00      	nop
	}
}
 800169a:	3724      	adds	r7, #36	; 0x24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	20005ad8 	.word	0x20005ad8
 80016a4:	55555556 	.word	0x55555556
 80016a8:	20007518 	.word	0x20007518
 80016ac:	2000023c 	.word	0x2000023c
 80016b0:	cccccccd 	.word	0xcccccccd

080016b4 <calc_filter_add_v>:

/*
 * @brief  Add new value to voltage filter
 * @para newValue: The new value to add to the filter
 */
void calc_filter_add_v(float newValue) {
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	ed87 0a01 	vstr	s0, [r7, #4]
	float v_total = 0;
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	e019      	b.n	80016fe <calc_filter_add_v+0x4a>
		v_filter[i] = v_filter[i+1];
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a1a      	ldr	r2, [pc, #104]	; (8001738 <calc_filter_add_v+0x84>)
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4918      	ldr	r1, [pc, #96]	; (8001738 <calc_filter_add_v+0x84>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	601a      	str	r2, [r3, #0]
		v_total += v_filter[i];			// accumulate total
 80016e0:	4a15      	ldr	r2, [pc, #84]	; (8001738 <calc_filter_add_v+0x84>)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80016f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f4:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i=0; i<FILTER_NUM-1; i++) {
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b08      	cmp	r3, #8
 8001702:	dde2      	ble.n	80016ca <calc_filter_add_v+0x16>
	}
	// add new measurements
	v_filter[FILTER_NUM-1] = newValue;
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <calc_filter_add_v+0x84>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6253      	str	r3, [r2, #36]	; 0x24
	v_total += newValue;
 800170a:	ed97 7a03 	vldr	s14, [r7, #12]
 800170e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001716:	edc7 7a03 	vstr	s15, [r7, #12]
	v_filtered = v_total / FILTER_NUM;
 800171a:	ed97 7a03 	vldr	s14, [r7, #12]
 800171e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <calc_filter_add_v+0x88>)
 8001728:	edc3 7a00 	vstr	s15, [r3]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	20000290 	.word	0x20000290
 800173c:	20000498 	.word	0x20000498

08001740 <calc_filter_add_i>:
 * @para new_i_value:  The new current value to add to the filter
 * @para new_va_value: The new va value to add to the filter
 * @para new_w_value:  The new w value to add to the filter
 * @para new_pf_value: The new PF value to add to the filter
 */
void calc_filter_add_i(uint8_t channel, float new_i_value, float new_va_value, float new_w_value, float new_pf_value) {
 8001740:	b490      	push	{r4, r7}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	ed87 0a04 	vstr	s0, [r7, #16]
 800174c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001750:	ed87 1a02 	vstr	s2, [r7, #8]
 8001754:	edc7 1a01 	vstr	s3, [r7, #4]
 8001758:	75fb      	strb	r3, [r7, #23]
	float i_total=0, va_total=0, w_total=0, pf_total=0;
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	e0a6      	b.n	80018c6 <calc_filter_add_i+0x186>
		i_filter[channel][i] = i_filter[channel][i+1];
 8001778:	7df9      	ldrb	r1, [r7, #23]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	1c58      	adds	r0, r3, #1
 800177e:	7dfa      	ldrb	r2, [r7, #23]
 8001780:	4c91      	ldr	r4, [pc, #580]	; (80019c8 <calc_filter_add_i+0x288>)
 8001782:	460b      	mov	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4403      	add	r3, r0
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4423      	add	r3, r4
 8001790:	6819      	ldr	r1, [r3, #0]
 8001792:	488d      	ldr	r0, [pc, #564]	; (80019c8 <calc_filter_add_i+0x288>)
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4403      	add	r3, r0
 80017a4:	6019      	str	r1, [r3, #0]
		i_total += i_filter[channel][i];
 80017a6:	7dfa      	ldrb	r2, [r7, #23]
 80017a8:	4987      	ldr	r1, [pc, #540]	; (80019c8 <calc_filter_add_i+0x288>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		va_filter[channel][i] = va_filter[channel][i+1];
 80017ca:	7df9      	ldrb	r1, [r7, #23]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	1c58      	adds	r0, r3, #1
 80017d0:	7dfa      	ldrb	r2, [r7, #23]
 80017d2:	4c7e      	ldr	r4, [pc, #504]	; (80019cc <calc_filter_add_i+0x28c>)
 80017d4:	460b      	mov	r3, r1
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4403      	add	r3, r0
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4423      	add	r3, r4
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	4879      	ldr	r0, [pc, #484]	; (80019cc <calc_filter_add_i+0x28c>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4403      	add	r3, r0
 80017f6:	6019      	str	r1, [r3, #0]
		va_total += va_filter[channel][i];
 80017f8:	7dfa      	ldrb	r2, [r7, #23]
 80017fa:	4974      	ldr	r1, [pc, #464]	; (80019cc <calc_filter_add_i+0x28c>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		w_filter[channel][i] = w_filter[channel][i+1];
 800181c:	7df9      	ldrb	r1, [r7, #23]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	1c58      	adds	r0, r3, #1
 8001822:	7dfa      	ldrb	r2, [r7, #23]
 8001824:	4c6a      	ldr	r4, [pc, #424]	; (80019d0 <calc_filter_add_i+0x290>)
 8001826:	460b      	mov	r3, r1
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4403      	add	r3, r0
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4423      	add	r3, r4
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	4866      	ldr	r0, [pc, #408]	; (80019d0 <calc_filter_add_i+0x290>)
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4403      	add	r3, r0
 8001848:	6019      	str	r1, [r3, #0]
		w_total += w_filter[channel][i];
 800184a:	7dfa      	ldrb	r2, [r7, #23]
 800184c:	4960      	ldr	r1, [pc, #384]	; (80019d0 <calc_filter_add_i+0x290>)
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		pf_filter[channel][i] = pf_filter[channel][i+1];
 800186e:	7df9      	ldrb	r1, [r7, #23]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	1c58      	adds	r0, r3, #1
 8001874:	7dfa      	ldrb	r2, [r7, #23]
 8001876:	4c57      	ldr	r4, [pc, #348]	; (80019d4 <calc_filter_add_i+0x294>)
 8001878:	460b      	mov	r3, r1
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4403      	add	r3, r0
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4423      	add	r3, r4
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	4852      	ldr	r0, [pc, #328]	; (80019d4 <calc_filter_add_i+0x294>)
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4403      	add	r3, r0
 800189a:	6019      	str	r1, [r3, #0]
		pf_total += pf_filter[channel][i];
 800189c:	7dfa      	ldrb	r2, [r7, #23]
 800189e:	494d      	ldr	r1, [pc, #308]	; (80019d4 <calc_filter_add_i+0x294>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80018b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018bc:	edc7 7a08 	vstr	s15, [r7, #32]
	for (int i=0; i<FILTER_NUM-1; i++) {
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	3301      	adds	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	f77f af55 	ble.w	8001778 <calc_filter_add_i+0x38>
	}
	// add new measurements
	i_filter[channel][FILTER_NUM-1] = new_i_value;
 80018ce:	7dfa      	ldrb	r2, [r7, #23]
 80018d0:	493d      	ldr	r1, [pc, #244]	; (80019c8 <calc_filter_add_i+0x288>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	440b      	add	r3, r1
 80018dc:	3324      	adds	r3, #36	; 0x24
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	601a      	str	r2, [r3, #0]
	i_total += new_i_value;
 80018e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80018e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	va_filter[channel][FILTER_NUM-1] = new_va_value;
 80018f2:	7dfa      	ldrb	r2, [r7, #23]
 80018f4:	4935      	ldr	r1, [pc, #212]	; (80019cc <calc_filter_add_i+0x28c>)
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	3324      	adds	r3, #36	; 0x24
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	601a      	str	r2, [r3, #0]
	va_total += new_va_value;
 8001906:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800190a:	edd7 7a03 	vldr	s15, [r7, #12]
 800190e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001912:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	w_filter[channel][FILTER_NUM-1] = new_w_value;
 8001916:	7dfa      	ldrb	r2, [r7, #23]
 8001918:	492d      	ldr	r1, [pc, #180]	; (80019d0 <calc_filter_add_i+0x290>)
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	3324      	adds	r3, #36	; 0x24
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	601a      	str	r2, [r3, #0]
	w_total += new_w_value;
 800192a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800192e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001936:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pf_filter[channel][FILTER_NUM-1] = new_pf_value;
 800193a:	7dfa      	ldrb	r2, [r7, #23]
 800193c:	4925      	ldr	r1, [pc, #148]	; (80019d4 <calc_filter_add_i+0x294>)
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	440b      	add	r3, r1
 8001948:	3324      	adds	r3, #36	; 0x24
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	601a      	str	r2, [r3, #0]
	pf_total += new_pf_value;
 800194e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001952:	edd7 7a01 	vldr	s15, [r7, #4]
 8001956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195a:	edc7 7a08 	vstr	s15, [r7, #32]

	i_filtered[channel] = i_total / FILTER_NUM;
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001964:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196c:	4a1a      	ldr	r2, [pc, #104]	; (80019d8 <calc_filter_add_i+0x298>)
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	edc3 7a00 	vstr	s15, [r3]
	va_filtered[channel] = va_total / FILTER_NUM;
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800197c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001984:	4a15      	ldr	r2, [pc, #84]	; (80019dc <calc_filter_add_i+0x29c>)
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	edc3 7a00 	vstr	s15, [r3]
	w_filtered[channel] = w_total / FILTER_NUM;
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001994:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199c:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <calc_filter_add_i+0x2a0>)
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	edc3 7a00 	vstr	s15, [r3]
	pf_filtered[channel] = pf_total / FILTER_NUM;
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80019ac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b4:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <calc_filter_add_i+0x2a4>)
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	edc3 7a00 	vstr	s15, [r3]
}
 80019be:	bf00      	nop
 80019c0:	3730      	adds	r7, #48	; 0x30
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc90      	pop	{r4, r7}
 80019c6:	4770      	bx	lr
 80019c8:	200002b8 	.word	0x200002b8
 80019cc:	20000330 	.word	0x20000330
 80019d0:	200003a8 	.word	0x200003a8
 80019d4:	20000420 	.word	0x20000420
 80019d8:	2000049c 	.word	0x2000049c
 80019dc:	200004a8 	.word	0x200004a8
 80019e0:	200004b4 	.word	0x200004b4
 80019e4:	200004c0 	.word	0x200004c0

080019e8 <calc_measurements>:

/*
 * Calculate all measurements
 * returns 0 if measurements are OK, -1 if zero crossing is not detected
 */
int calc_measurements(void) {
 80019e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ec:	ed2d 8b02 	vpush	{d8}
 80019f0:	b0d4      	sub	sp, #336	; 0x150
 80019f2:	af00      	add	r7, sp, #0
	int i;
	int64_t v_sq_acc = 0;		// accumulating the squared voltage values
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	int64_t i1_sq_acc=0, i2_sq_acc=0, i3_sq_acc=0;		// accumulator for squared I values
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	double i1_va_acc=0, i2_va_acc=0, i3_va_acc=0;		// accumulator for squared VA values
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	double i1_w_acc=0, i2_w_acc=0, i3_w_acc=0;			// accumulating I values where I > 0 (for W calculation)
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
	uint16_t num_readings = 0;		// number of squared readings for v, i and va
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	double va_instant;			// instant VA value
	uint16_t v_zero;
	uint16_t v_pp;				// Voltage channel Peak-Peak
	uint16_t i1_zero, i2_zero, i3_zero;
	uint16_t i1_pp, i2_pp, i3_pp;			// Current channel P-P
	float w=0, va=0;
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

	// no zero crossing?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8001a82:	4bb2      	ldr	r3, [pc, #712]	; (8001d4c <calc_measurements+0x364>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da06      	bge.n	8001a98 <calc_measurements+0xb0>
		meter_readings_invalid = 1;
 8001a8a:	4bb1      	ldr	r3, [pc, #708]	; (8001d50 <calc_measurements+0x368>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - missing zero crossings in V\r\n", __FUNCTION__);
		return -1;
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a94:	f000 bfad 	b.w	80029f2 <calc_measurements+0x100a>
	}

	// low voltage?
	if ((sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) < ADC_FS_RAW/4) {
 8001a98:	4bac      	ldr	r3, [pc, #688]	; (8001d4c <calc_measurements+0x364>)
 8001a9a:	885b      	ldrh	r3, [r3, #2]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4bab      	ldr	r3, [pc, #684]	; (8001d4c <calc_measurements+0x364>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	1ad2      	subs	r2, r2, r3
 8001aa4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dc06      	bgt.n	8001aba <calc_measurements+0xd2>
		meter_readings_invalid = 1;
 8001aac:	4ba8      	ldr	r3, [pc, #672]	; (8001d50 <calc_measurements+0x368>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - Voltage readings too low V (%d)\r\n", __FUNCTION__, (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min));
		return -1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ab6:	f000 bf9c 	b.w	80029f2 <calc_measurements+0x100a>
	}

	meter_readings_invalid = 0;		// readings are valid
 8001aba:	4aa5      	ldr	r2, [pc, #660]	; (8001d50 <calc_measurements+0x368>)
 8001abc:	2300      	movs	r3, #0
 8001abe:	7013      	strb	r3, [r2, #0]

	v_pp = sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min;
 8001ac0:	4ba2      	ldr	r3, [pc, #648]	; (8001d4c <calc_measurements+0x364>)
 8001ac2:	885a      	ldrh	r2, [r3, #2]
 8001ac4:	4ba1      	ldr	r3, [pc, #644]	; (8001d4c <calc_measurements+0x364>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
	v_zero = v_pp / 2 + sample_buf_meta[ADC_CH_V].min;
 8001ace:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b9d      	ldr	r3, [pc, #628]	; (8001d4c <calc_measurements+0x364>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
	i1_pp = sample_buf_meta[ADC_CH_I1].max - sample_buf_meta[ADC_CH_I1].min;
 8001ae0:	4b9a      	ldr	r3, [pc, #616]	; (8001d4c <calc_measurements+0x364>)
 8001ae2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001ae4:	4b99      	ldr	r3, [pc, #612]	; (8001d4c <calc_measurements+0x364>)
 8001ae6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	i2_pp = sample_buf_meta[ADC_CH_I2].max - sample_buf_meta[ADC_CH_I2].min;
 8001aee:	4b97      	ldr	r3, [pc, #604]	; (8001d4c <calc_measurements+0x364>)
 8001af0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8001af2:	4b96      	ldr	r3, [pc, #600]	; (8001d4c <calc_measurements+0x364>)
 8001af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	i3_pp = sample_buf_meta[ADC_CH_I3].max - sample_buf_meta[ADC_CH_I3].min;
 8001afc:	4b93      	ldr	r3, [pc, #588]	; (8001d4c <calc_measurements+0x364>)
 8001afe:	8ada      	ldrh	r2, [r3, #22]
 8001b00:	4b92      	ldr	r3, [pc, #584]	; (8001d4c <calc_measurements+0x364>)
 8001b02:	8a9b      	ldrh	r3, [r3, #20]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	i1_zero = i1_pp / 2 + sample_buf_meta[ADC_CH_I1].min;
 8001b0a:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001b0e:	085b      	lsrs	r3, r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b8e      	ldr	r3, [pc, #568]	; (8001d4c <calc_measurements+0x364>)
 8001b14:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001b16:	4413      	add	r3, r2
 8001b18:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
	i2_zero = i2_pp / 2 + sample_buf_meta[ADC_CH_I2].min;
 8001b1c:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <calc_measurements+0x364>)
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	4413      	add	r3, r2
 8001b2a:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	i3_zero = i3_pp / 2 + sample_buf_meta[ADC_CH_I3].min;
 8001b2e:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8001b32:	085b      	lsrs	r3, r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b85      	ldr	r3, [pc, #532]	; (8001d4c <calc_measurements+0x364>)
 8001b38:	8a9b      	ldrh	r3, [r3, #20]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc

	// Calculate values using the positive half of the sine wave

	// Add up squared measurements
	// does the positive x-ing come before the negative?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < sample_buf_meta[ADC_CH_V].zero_cross_neg) {
 8001b40:	4b82      	ldr	r3, [pc, #520]	; (8001d4c <calc_measurements+0x364>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <calc_measurements+0x364>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f280 8163 	bge.w	8001e14 <calc_measurements+0x42c>
		// iterate from positive to negative crossing (positive half wave)
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <calc_measurements+0x364>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b56:	e155      	b.n	8001e04 <calc_measurements+0x41c>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001b58:	4a7e      	ldr	r2, [pc, #504]	; (8001d54 <calc_measurements+0x36c>)
 8001b5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001b5e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b62:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
			v_sq_acc += v_reading * v_reading;
 8001b6e:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	; 0xda
 8001b72:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	17da      	asrs	r2, r3, #31
 8001b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001b84:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001b88:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	1851      	adds	r1, r2, r1
 8001b90:	65b9      	str	r1, [r7, #88]	; 0x58
 8001b92:	4629      	mov	r1, r5
 8001b94:	414b      	adcs	r3, r1
 8001b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b98:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001b9c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			i1_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001ba0:	4a6c      	ldr	r2, [pc, #432]	; (8001d54 <calc_measurements+0x36c>)
 8001ba2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001ba6:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8001baa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bae:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			i1_sq_acc += i1_reading * i1_reading;
 8001bba:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8001bbe:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	17da      	asrs	r2, r3, #31
 8001bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001bcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001bd0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001bd4:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001bd8:	4621      	mov	r1, r4
 8001bda:	1851      	adds	r1, r2, r1
 8001bdc:	6539      	str	r1, [r7, #80]	; 0x50
 8001bde:	4629      	mov	r1, r5
 8001be0:	414b      	adcs	r3, r1
 8001be2:	657b      	str	r3, [r7, #84]	; 0x54
 8001be4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001be8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			i2_reading = sample_buf[ADC_CH_I2][i] - i2_zero;
 8001bec:	4a59      	ldr	r2, [pc, #356]	; (8001d54 <calc_measurements+0x36c>)
 8001bee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001bf2:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8001bf6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bfa:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			i2_sq_acc += i2_reading * i2_reading;
 8001c06:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8001c0a:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	17da      	asrs	r2, r3, #31
 8001c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c18:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001c1c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001c20:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001c24:	4621      	mov	r1, r4
 8001c26:	1851      	adds	r1, r2, r1
 8001c28:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	414b      	adcs	r3, r1
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c30:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001c34:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			i3_reading = sample_buf[ADC_CH_I3][i] - i3_zero;
 8001c38:	4a46      	ldr	r2, [pc, #280]	; (8001d54 <calc_measurements+0x36c>)
 8001c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c3e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001c42:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c46:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			i3_sq_acc += i3_reading * i3_reading;
 8001c52:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8001c56:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	17da      	asrs	r2, r3, #31
 8001c60:	4698      	mov	r8, r3
 8001c62:	4691      	mov	r9, r2
 8001c64:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001c68:	eb12 0108 	adds.w	r1, r2, r8
 8001c6c:	6439      	str	r1, [r7, #64]	; 0x40
 8001c6e:	eb43 0309 	adc.w	r3, r3, r9
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
 8001c74:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001c78:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			num_readings++;
 8001c7c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001c80:	3301      	adds	r3, #1
 8001c82:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i1_reading);
 8001c86:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 ff02 	bl	8002a94 <calc_adc_raw_to_V>
 8001c90:	eeb0 8a40 	vmov.f32	s16, s0
 8001c94:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 ff19 	bl	8002ad0 <calc_adc_raw_to_A>
 8001c9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ca2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001ca6:	ee17 0a90 	vmov	r0, s15
 8001caa:	f7fe fc6d 	bl	8000588 <__aeabi_f2d>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i1_reading >= 0) { i1_va_acc += va_instant; }
 8001cb6:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0a      	blt.n	8001cd4 <calc_measurements+0x2ec>
 8001cbe:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001cc2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001cc6:	f7fe fb01 	bl	80002cc <__adddf3>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8001cd2:	e014      	b.n	8001cfe <calc_measurements+0x316>
			else { i1_w_acc += abs(va_instant); }
 8001cd4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001cd8:	f7fe ff5e 	bl	8000b98 <__aeabi_d2iz>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bfb8      	it	lt
 8001ce2:	425b      	neglt	r3, r3
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fc3d 	bl	8000564 <__aeabi_i2d>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001cf2:	f7fe faeb 	bl	80002cc <__adddf3>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i2_reading);
 8001cfe:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 fec6 	bl	8002a94 <calc_adc_raw_to_V>
 8001d08:	eeb0 8a40 	vmov.f32	s16, s0
 8001d0c:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fedd 	bl	8002ad0 <calc_adc_raw_to_A>
 8001d16:	eef0 7a40 	vmov.f32	s15, s0
 8001d1a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d1e:	ee17 0a90 	vmov	r0, s15
 8001d22:	f7fe fc31 	bl	8000588 <__aeabi_f2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i2_reading >= 0) { i2_va_acc += va_instant;}
 8001d2e:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db10      	blt.n	8001d58 <calc_measurements+0x370>
 8001d36:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001d3a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001d3e:	f7fe fac5 	bl	80002cc <__adddf3>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 8001d4a:	e01a      	b.n	8001d82 <calc_measurements+0x39a>
 8001d4c:	2000023c 	.word	0x2000023c
 8001d50:	2000028c 	.word	0x2000028c
 8001d54:	20007518 	.word	0x20007518
			else { i2_w_acc += abs(va_instant); }
 8001d58:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d5c:	f7fe ff1c 	bl	8000b98 <__aeabi_d2iz>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bfb8      	it	lt
 8001d66:	425b      	neglt	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbfb 	bl	8000564 <__aeabi_i2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001d76:	f7fe faa9 	bl	80002cc <__adddf3>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i3_reading);
 8001d82:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 fe84 	bl	8002a94 <calc_adc_raw_to_V>
 8001d8c:	eeb0 8a40 	vmov.f32	s16, s0
 8001d90:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fe9b 	bl	8002ad0 <calc_adc_raw_to_A>
 8001d9a:	eef0 7a40 	vmov.f32	s15, s0
 8001d9e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001da2:	ee17 0a90 	vmov	r0, s15
 8001da6:	f7fe fbef 	bl	8000588 <__aeabi_f2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i3_reading >= 0) { i3_va_acc += va_instant;}
 8001db2:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db0a      	blt.n	8001dd0 <calc_measurements+0x3e8>
 8001dba:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001dbe:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001dc2:	f7fe fa83 	bl	80002cc <__adddf3>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 8001dce:	e014      	b.n	8001dfa <calc_measurements+0x412>
			else { i3_w_acc += abs(va_instant); }
 8001dd0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001dd4:	f7fe fee0 	bl	8000b98 <__aeabi_d2iz>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	bfb8      	it	lt
 8001dde:	425b      	neglt	r3, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fbbf 	bl	8000564 <__aeabi_i2d>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001dee:	f7fe fa6d 	bl	80002cc <__adddf3>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001dfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e04:	4bb0      	ldr	r3, [pc, #704]	; (80020c8 <calc_measurements+0x6e0>)
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	f6ff aea3 	blt.w	8001b58 <calc_measurements+0x170>
 8001e12:	e2ba      	b.n	800238a <calc_measurements+0x9a2>
		}
	} else {	// negative crossing is first
		// iterate from positive x-ing to the end of the buffer ....
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001e14:	4bac      	ldr	r3, [pc, #688]	; (80020c8 <calc_measurements+0x6e0>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e1c:	e149      	b.n	80020b2 <calc_measurements+0x6ca>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001e1e:	4aab      	ldr	r2, [pc, #684]	; (80020cc <calc_measurements+0x6e4>)
 8001e20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e24:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e28:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
			v_sq_acc += v_reading * v_reading;
 8001e34:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	; 0xda
 8001e38:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	17da      	asrs	r2, r3, #31
 8001e42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e46:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e4a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001e4e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001e52:	4641      	mov	r1, r8
 8001e54:	1851      	adds	r1, r2, r1
 8001e56:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e58:	4649      	mov	r1, r9
 8001e5a:	414b      	adcs	r3, r1
 8001e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e5e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e62:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			i1_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001e66:	4a99      	ldr	r2, [pc, #612]	; (80020cc <calc_measurements+0x6e4>)
 8001e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e6c:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8001e70:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e74:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			i1_sq_acc += i1_reading * i1_reading;
 8001e80:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8001e84:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	17da      	asrs	r2, r3, #31
 8001e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e96:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001e9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e9e:	4641      	mov	r1, r8
 8001ea0:	1851      	adds	r1, r2, r1
 8001ea2:	6339      	str	r1, [r7, #48]	; 0x30
 8001ea4:	4649      	mov	r1, r9
 8001ea6:	414b      	adcs	r3, r1
 8001ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8001eaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001eae:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
			i2_reading = sample_buf[ADC_CH_I2][i] - i2_zero;
 8001eb2:	4a86      	ldr	r2, [pc, #536]	; (80020cc <calc_measurements+0x6e4>)
 8001eb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001eb8:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8001ebc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ec0:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			i2_sq_acc += i2_reading * i2_reading;
 8001ecc:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8001ed0:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	17da      	asrs	r2, r3, #31
 8001eda:	469a      	mov	sl, r3
 8001edc:	4693      	mov	fp, r2
 8001ede:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001ee2:	eb12 010a 	adds.w	r1, r2, sl
 8001ee6:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ee8:	eb43 030b 	adc.w	r3, r3, fp
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ef2:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			i3_reading = sample_buf[ADC_CH_I3][i] - i3_zero;
 8001ef6:	4a75      	ldr	r2, [pc, #468]	; (80020cc <calc_measurements+0x6e4>)
 8001ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001efc:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001f00:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f04:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			i3_sq_acc += i3_reading * i3_reading;
 8001f10:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8001f14:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	17da      	asrs	r2, r3, #31
 8001f1e:	461c      	mov	r4, r3
 8001f20:	4615      	mov	r5, r2
 8001f22:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001f26:	1911      	adds	r1, r2, r4
 8001f28:	6239      	str	r1, [r7, #32]
 8001f2a:	416b      	adcs	r3, r5
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f32:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
			num_readings++;
 8001f36:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i1_reading);
 8001f40:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fda5 	bl	8002a94 <calc_adc_raw_to_V>
 8001f4a:	eeb0 8a40 	vmov.f32	s16, s0
 8001f4e:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fdbc 	bl	8002ad0 <calc_adc_raw_to_A>
 8001f58:	eef0 7a40 	vmov.f32	s15, s0
 8001f5c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001f60:	ee17 0a90 	vmov	r0, s15
 8001f64:	f7fe fb10 	bl	8000588 <__aeabi_f2d>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i1_reading >= 0) { i1_va_acc += va_instant; }
 8001f70:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	db0a      	blt.n	8001f8e <calc_measurements+0x5a6>
 8001f78:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001f7c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001f80:	f7fe f9a4 	bl	80002cc <__adddf3>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8001f8c:	e014      	b.n	8001fb8 <calc_measurements+0x5d0>
			else { i1_w_acc += abs(va_instant); }
 8001f8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001f92:	f7fe fe01 	bl	8000b98 <__aeabi_d2iz>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bfb8      	it	lt
 8001f9c:	425b      	neglt	r3, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fae0 	bl	8000564 <__aeabi_i2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001fac:	f7fe f98e 	bl	80002cc <__adddf3>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i2_reading);
 8001fb8:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fd69 	bl	8002a94 <calc_adc_raw_to_V>
 8001fc2:	eeb0 8a40 	vmov.f32	s16, s0
 8001fc6:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fd80 	bl	8002ad0 <calc_adc_raw_to_A>
 8001fd0:	eef0 7a40 	vmov.f32	s15, s0
 8001fd4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001fd8:	ee17 0a90 	vmov	r0, s15
 8001fdc:	f7fe fad4 	bl	8000588 <__aeabi_f2d>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i2_reading >= 0) { i2_va_acc += va_instant;}
 8001fe8:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <calc_measurements+0x61e>
 8001ff0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001ff4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001ff8:	f7fe f968 	bl	80002cc <__adddf3>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 8002004:	e014      	b.n	8002030 <calc_measurements+0x648>
			else { i2_w_acc += abs(va_instant); }
 8002006:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800200a:	f7fe fdc5 	bl	8000b98 <__aeabi_d2iz>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	bfb8      	it	lt
 8002014:	425b      	neglt	r3, r3
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe faa4 	bl	8000564 <__aeabi_i2d>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8002024:	f7fe f952 	bl	80002cc <__adddf3>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i3_reading);
 8002030:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fd2d 	bl	8002a94 <calc_adc_raw_to_V>
 800203a:	eeb0 8a40 	vmov.f32	s16, s0
 800203e:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fd44 	bl	8002ad0 <calc_adc_raw_to_A>
 8002048:	eef0 7a40 	vmov.f32	s15, s0
 800204c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002050:	ee17 0a90 	vmov	r0, s15
 8002054:	f7fe fa98 	bl	8000588 <__aeabi_f2d>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i3_reading >= 0) { i3_va_acc += va_instant;}
 8002060:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8002064:	2b00      	cmp	r3, #0
 8002066:	db0a      	blt.n	800207e <calc_measurements+0x696>
 8002068:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800206c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002070:	f7fe f92c 	bl	80002cc <__adddf3>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 800207c:	e014      	b.n	80020a8 <calc_measurements+0x6c0>
			else { i3_w_acc += abs(va_instant); }
 800207e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002082:	f7fe fd89 	bl	8000b98 <__aeabi_d2iz>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	bfb8      	it	lt
 800208c:	425b      	neglt	r3, r3
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fa68 	bl	8000564 <__aeabi_i2d>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800209c:	f7fe f916 	bl	80002cc <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 80020a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020ac:	3301      	adds	r3, #1
 80020ae:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020b6:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80020ba:	f4ff aeb0 	bcc.w	8001e1e <calc_measurements+0x436>
		}
		// ..... the continue iterating from the start of the buffer to the negative crossing
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 80020be:	2314      	movs	r3, #20
 80020c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020c4:	e15a      	b.n	800237c <calc_measurements+0x994>
 80020c6:	bf00      	nop
 80020c8:	2000023c 	.word	0x2000023c
 80020cc:	20007518 	.word	0x20007518
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 80020d0:	4a9c      	ldr	r2, [pc, #624]	; (8002344 <calc_measurements+0x95c>)
 80020d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020d6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020da:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
			v_sq_acc += v_reading * v_reading;
 80020e6:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	; 0xda
 80020ea:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	17da      	asrs	r2, r3, #31
 80020f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020f8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80020fc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002100:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002104:	4621      	mov	r1, r4
 8002106:	1851      	adds	r1, r2, r1
 8002108:	61b9      	str	r1, [r7, #24]
 800210a:	4629      	mov	r1, r5
 800210c:	414b      	adcs	r3, r1
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002114:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			i1_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8002118:	4a8a      	ldr	r2, [pc, #552]	; (8002344 <calc_measurements+0x95c>)
 800211a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800211e:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8002122:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002126:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	b29b      	uxth	r3, r3
 800212e:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			i1_sq_acc += i1_reading * i1_reading;
 8002132:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8002136:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	17da      	asrs	r2, r3, #31
 8002140:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002144:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002148:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800214c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002150:	4621      	mov	r1, r4
 8002152:	1851      	adds	r1, r2, r1
 8002154:	6139      	str	r1, [r7, #16]
 8002156:	4629      	mov	r1, r5
 8002158:	414b      	adcs	r3, r1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002160:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			i2_reading = sample_buf[ADC_CH_I2][i] - i2_zero;
 8002164:	4a77      	ldr	r2, [pc, #476]	; (8002344 <calc_measurements+0x95c>)
 8002166:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800216a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800216e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002172:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	b29b      	uxth	r3, r3
 800217a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			i2_sq_acc += i2_reading * i2_reading;
 800217e:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8002182:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	17da      	asrs	r2, r3, #31
 800218c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002190:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002194:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002198:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800219c:	4621      	mov	r1, r4
 800219e:	1851      	adds	r1, r2, r1
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	4629      	mov	r1, r5
 80021a4:	414b      	adcs	r3, r1
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80021ac:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			i3_reading = sample_buf[ADC_CH_I3][i] - i3_zero;
 80021b0:	4a64      	ldr	r2, [pc, #400]	; (8002344 <calc_measurements+0x95c>)
 80021b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021b6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80021ba:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80021be:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			i3_sq_acc += i3_reading * i3_reading;
 80021ca:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 80021ce:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	17da      	asrs	r2, r3, #31
 80021d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021dc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021e0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80021e4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80021e8:	4621      	mov	r1, r4
 80021ea:	1851      	adds	r1, r2, r1
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	4629      	mov	r1, r5
 80021f0:	414b      	adcs	r3, r1
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80021f8:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			num_readings++;
 80021fc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002200:	3301      	adds	r3, #1
 8002202:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i1_reading);
 8002206:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fc42 	bl	8002a94 <calc_adc_raw_to_V>
 8002210:	eeb0 8a40 	vmov.f32	s16, s0
 8002214:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fc59 	bl	8002ad0 <calc_adc_raw_to_A>
 800221e:	eef0 7a40 	vmov.f32	s15, s0
 8002222:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002226:	ee17 0a90 	vmov	r0, s15
 800222a:	f7fe f9ad 	bl	8000588 <__aeabi_f2d>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i1_reading >= 0) { i1_va_acc += va_instant; }
 8002236:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 800223a:	2b00      	cmp	r3, #0
 800223c:	db0a      	blt.n	8002254 <calc_measurements+0x86c>
 800223e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002242:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8002246:	f7fe f841 	bl	80002cc <__adddf3>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8002252:	e014      	b.n	800227e <calc_measurements+0x896>
			else { i1_w_acc += abs(va_instant); }
 8002254:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002258:	f7fe fc9e 	bl	8000b98 <__aeabi_d2iz>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	bfb8      	it	lt
 8002262:	425b      	neglt	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f97d 	bl	8000564 <__aeabi_i2d>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8002272:	f7fe f82b 	bl	80002cc <__adddf3>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i2_reading);
 800227e:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fc06 	bl	8002a94 <calc_adc_raw_to_V>
 8002288:	eeb0 8a40 	vmov.f32	s16, s0
 800228c:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fc1d 	bl	8002ad0 <calc_adc_raw_to_A>
 8002296:	eef0 7a40 	vmov.f32	s15, s0
 800229a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800229e:	ee17 0a90 	vmov	r0, s15
 80022a2:	f7fe f971 	bl	8000588 <__aeabi_f2d>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i2_reading >= 0) { i2_va_acc += va_instant;}
 80022ae:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0a      	blt.n	80022cc <calc_measurements+0x8e4>
 80022b6:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80022ba:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80022be:	f7fe f805 	bl	80002cc <__adddf3>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 80022ca:	e014      	b.n	80022f6 <calc_measurements+0x90e>
			else { i2_w_acc += abs(va_instant); }
 80022cc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022d0:	f7fe fc62 	bl	8000b98 <__aeabi_d2iz>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	bfb8      	it	lt
 80022da:	425b      	neglt	r3, r3
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f941 	bl	8000564 <__aeabi_i2d>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80022ea:	f7fd ffef 	bl	80002cc <__adddf3>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i3_reading);
 80022f6:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fbca 	bl	8002a94 <calc_adc_raw_to_V>
 8002300:	eeb0 8a40 	vmov.f32	s16, s0
 8002304:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fbe1 	bl	8002ad0 <calc_adc_raw_to_A>
 800230e:	eef0 7a40 	vmov.f32	s15, s0
 8002312:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002316:	ee17 0a90 	vmov	r0, s15
 800231a:	f7fe f935 	bl	8000588 <__aeabi_f2d>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i3_reading >= 0) { i3_va_acc += va_instant;}
 8002326:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 800232a:	2b00      	cmp	r3, #0
 800232c:	db0c      	blt.n	8002348 <calc_measurements+0x960>
 800232e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002332:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002336:	f7fd ffc9 	bl	80002cc <__adddf3>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 8002342:	e016      	b.n	8002372 <calc_measurements+0x98a>
 8002344:	20007518 	.word	0x20007518
			else { i3_w_acc += abs(va_instant); }
 8002348:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800234c:	f7fe fc24 	bl	8000b98 <__aeabi_d2iz>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	bfb8      	it	lt
 8002356:	425b      	neglt	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe f903 	bl	8000564 <__aeabi_i2d>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8002366:	f7fd ffb1 	bl	80002cc <__adddf3>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8002372:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002376:	3301      	adds	r3, #1
 8002378:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800237c:	4b96      	ldr	r3, [pc, #600]	; (80025d8 <calc_measurements+0xbf0>)
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002384:	4293      	cmp	r3, r2
 8002386:	f6ff aea3 	blt.w	80020d0 <calc_measurements+0x6e8>
		}
	}

	// Calculate measured RMS voltage
	v_measured = calc_adc_raw_to_V (sqrt((v_sq_acc / num_readings)));		// RMS voltage
 800238a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800238e:	2200      	movs	r2, #0
 8002390:	67bb      	str	r3, [r7, #120]	; 0x78
 8002392:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002394:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002398:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800239c:	f7fe fc74 	bl	8000c88 <__aeabi_ldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	f7fe f918 	bl	80005dc <__aeabi_l2d>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	ec43 2b10 	vmov	d0, r2, r3
 80023b4:	f00f fb8c 	bl	8011ad0 <sqrt>
 80023b8:	ec53 2b10 	vmov	r2, r3, d0
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f7fe fbea 	bl	8000b98 <__aeabi_d2iz>
 80023c4:	4603      	mov	r3, r0
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fb63 	bl	8002a94 <calc_adc_raw_to_V>
 80023ce:	eef0 7a40 	vmov.f32	s15, s0
 80023d2:	4b82      	ldr	r3, [pc, #520]	; (80025dc <calc_measurements+0xbf4>)
 80023d4:	edc3 7a00 	vstr	s15, [r3]
	//v_measured = calc_adc_raw_to_V(v_pp) / 2 * 0.707;		// only works for a perfect sine wave (no distortion)
	sample_buf_meta[ADC_CH_V].measurements_valid = 1;
 80023d8:	4b7f      	ldr	r3, [pc, #508]	; (80025d8 <calc_measurements+0xbf0>)
 80023da:	2201      	movs	r2, #1
 80023dc:	731a      	strb	r2, [r3, #12]
	pf_measured[I1] = pf_measured[I2] = pf_measured[I3] = 1.0;		// assumed PF
 80023de:	4b80      	ldr	r3, [pc, #512]	; (80025e0 <calc_measurements+0xbf8>)
 80023e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	4b7e      	ldr	r3, [pc, #504]	; (80025e0 <calc_measurements+0xbf8>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4a7d      	ldr	r2, [pc, #500]	; (80025e0 <calc_measurements+0xbf8>)
 80023ec:	6053      	str	r3, [r2, #4]
 80023ee:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <calc_measurements+0xbf8>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4a7b      	ldr	r2, [pc, #492]	; (80025e0 <calc_measurements+0xbf8>)
 80023f4:	6013      	str	r3, [r2, #0]

	// Process I1 values
	// do we have zero (below ADC noise) current reading?
	if (sample_buf_meta[ADC_CH_I1].value_is_zero) {	// set all measured values to zero
 80023f6:	4b78      	ldr	r3, [pc, #480]	; (80025d8 <calc_measurements+0xbf0>)
 80023f8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00c      	beq.n	800241a <calc_measurements+0xa32>
		i_measured[I1] = 0.0; va_measured[I1] = 0.0;w_measured[I1] = 0.0;
 8002400:	4b78      	ldr	r3, [pc, #480]	; (80025e4 <calc_measurements+0xbfc>)
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	4b77      	ldr	r3, [pc, #476]	; (80025e8 <calc_measurements+0xc00>)
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	4b76      	ldr	r3, [pc, #472]	; (80025ec <calc_measurements+0xc04>)
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e0c7      	b.n	80025aa <calc_measurements+0xbc2>
	} else {
		//term_print("%s() - I1 = %f (%d-%d)\r\n", __FUNCTION__, i_measured[I1], sample_buf_meta[ADC_CH_I1].min, sample_buf_meta[ADC_CH_I1].max);
		i_measured[I1] = calc_adc_raw_to_A (sqrt((i1_sq_acc / num_readings)));	// RMS current
 800241a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800241e:	2200      	movs	r2, #0
 8002420:	673b      	str	r3, [r7, #112]	; 0x70
 8002422:	677a      	str	r2, [r7, #116]	; 0x74
 8002424:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002428:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800242c:	f7fe fc2c 	bl	8000c88 <__aeabi_ldivmod>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	f7fe f8d0 	bl	80005dc <__aeabi_l2d>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	ec43 2b10 	vmov	d0, r2, r3
 8002444:	f00f fb44 	bl	8011ad0 <sqrt>
 8002448:	ec53 2b10 	vmov	r2, r3, d0
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	f7fe fba2 	bl	8000b98 <__aeabi_d2iz>
 8002454:	4603      	mov	r3, r0
 8002456:	b21b      	sxth	r3, r3
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fb39 	bl	8002ad0 <calc_adc_raw_to_A>
 800245e:	eef0 7a40 	vmov.f32	s15, s0
 8002462:	4b60      	ldr	r3, [pc, #384]	; (80025e4 <calc_measurements+0xbfc>)
 8002464:	edc3 7a00 	vstr	s15, [r3]
		if (i_measured[I1] >= I1_MIN) {		// Reading above min current?
 8002468:	4b5e      	ldr	r3, [pc, #376]	; (80025e4 <calc_measurements+0xbfc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f88b 	bl	8000588 <__aeabi_f2d>
 8002472:	a357      	add	r3, pc, #348	; (adr r3, 80025d0 <calc_measurements+0xbe8>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fe fb64 	bl	8000b44 <__aeabi_dcmpge>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8087 	beq.w	8002592 <calc_measurements+0xbaa>
			if (i1_va_acc > 0) { va = i1_va_acc / num_readings; }
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8002490:	f7fe fb62 	bl	8000b58 <__aeabi_dcmpgt>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d013      	beq.n	80024c2 <calc_measurements+0xada>
 800249a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe f860 	bl	8000564 <__aeabi_i2d>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80024ac:	f7fe f9ee 	bl	800088c <__aeabi_ddiv>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	f7fe fb96 	bl	8000be8 <__aeabi_d2f>
 80024bc:	4603      	mov	r3, r0
 80024be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			if (i1_w_acc > 0) { w = i1_w_acc / num_readings; }
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 80024ce:	f7fe fb43 	bl	8000b58 <__aeabi_dcmpgt>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <calc_measurements+0xb18>
 80024d8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f841 	bl	8000564 <__aeabi_i2d>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 80024ea:	f7fe f9cf 	bl	800088c <__aeabi_ddiv>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	f7fe fb77 	bl	8000be8 <__aeabi_d2f>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			va_measured[I1] = v_measured * i_measured[I1];
 8002500:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <calc_measurements+0xbfc>)
 8002502:	ed93 7a00 	vldr	s14, [r3]
 8002506:	4b35      	ldr	r3, [pc, #212]	; (80025dc <calc_measurements+0xbf4>)
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002510:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <calc_measurements+0xc00>)
 8002512:	edc3 7a00 	vstr	s15, [r3]
			if (w > 0) { w_measured[I1] = va - w;}
 8002516:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 800251a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	dd09      	ble.n	8002538 <calc_measurements+0xb50>
 8002524:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8002528:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 800252c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002530:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <calc_measurements+0xc04>)
 8002532:	edc3 7a00 	vstr	s15, [r3]
 8002536:	e003      	b.n	8002540 <calc_measurements+0xb58>
			else { w_measured[I1] = va_measured[I1];}
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <calc_measurements+0xc00>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <calc_measurements+0xc04>)
 800253e:	6013      	str	r3, [r2, #0]
			if (w_measured[I1] > va_measured[I1]) w_measured[I1] = va_measured[I1];		// W must be =< than VA
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <calc_measurements+0xc04>)
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <calc_measurements+0xc00>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002554:	dd03      	ble.n	800255e <calc_measurements+0xb76>
 8002556:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <calc_measurements+0xc00>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a24      	ldr	r2, [pc, #144]	; (80025ec <calc_measurements+0xc04>)
 800255c:	6013      	str	r3, [r2, #0]
			if (i_measured[I1] >= I1_MIN_PF) { pf_measured[I1] = w_measured[I1] / va_measured[I1]; }		// Calculate PF if we have sufficient current
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <calc_measurements+0xbfc>)
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800256c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002570:	db0a      	blt.n	8002588 <calc_measurements+0xba0>
 8002572:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <calc_measurements+0xc04>)
 8002574:	edd3 6a00 	vldr	s13, [r3]
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <calc_measurements+0xc00>)
 800257a:	ed93 7a00 	vldr	s14, [r3]
 800257e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <calc_measurements+0xbf8>)
 8002584:	edc3 7a00 	vstr	s15, [r3]
			sample_buf_meta[ADC_CH_I1].measurements_valid = 1;
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <calc_measurements+0xbf0>)
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002590:	e00b      	b.n	80025aa <calc_measurements+0xbc2>
		} else {
			//term_print("%s() - I1 = %fA below minimum\r\n", __FUNCTION__, i_measured[I1]);
			i_measured[I1] = 0.0; va_measured[I1] = 0.0;w_measured[I1] = 0.0;
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <calc_measurements+0xbfc>)
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <calc_measurements+0xc00>)
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <calc_measurements+0xc04>)
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
		}
	}

	// Process I2 values
	if (sample_buf_meta[ADC_CH_I2].value_is_zero) {	// set all measured values to zero
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <calc_measurements+0xbf0>)
 80025ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01d      	beq.n	80025f0 <calc_measurements+0xc08>
		i_measured[I2] = 0.0;va_measured[I2] = 0.0; w_measured[I2] = 0.0;
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <calc_measurements+0xbfc>)
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <calc_measurements+0xc00>)
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <calc_measurements+0xc04>)
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	e0d8      	b.n	8002780 <calc_measurements+0xd98>
 80025ce:	bf00      	nop
 80025d0:	33333333 	.word	0x33333333
 80025d4:	3fd33333 	.word	0x3fd33333
 80025d8:	2000023c 	.word	0x2000023c
 80025dc:	200004cc 	.word	0x200004cc
 80025e0:	200004f4 	.word	0x200004f4
 80025e4:	200004d0 	.word	0x200004d0
 80025e8:	200004dc 	.word	0x200004dc
 80025ec:	200004e8 	.word	0x200004e8
	} else {
		//term_print("%s() - I2 = %f (%d-%d)\r\n", __FUNCTION__, i_measured[I2], sample_buf_meta[ADC_CH_I2].min, sample_buf_meta[ADC_CH_I2].max);
		i_measured[I2] = calc_adc_raw_to_A (sqrt((i2_sq_acc / num_readings)));	// RMS current
 80025f0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80025f4:	2200      	movs	r2, #0
 80025f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80025f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025fa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80025fe:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8002602:	f7fe fb41 	bl	8000c88 <__aeabi_ldivmod>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fd ffe5 	bl	80005dc <__aeabi_l2d>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	ec43 2b10 	vmov	d0, r2, r3
 800261a:	f00f fa59 	bl	8011ad0 <sqrt>
 800261e:	ec53 2b10 	vmov	r2, r3, d0
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	f7fe fab7 	bl	8000b98 <__aeabi_d2iz>
 800262a:	4603      	mov	r3, r0
 800262c:	b21b      	sxth	r3, r3
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fa4e 	bl	8002ad0 <calc_adc_raw_to_A>
 8002634:	eef0 7a40 	vmov.f32	s15, s0
 8002638:	4bbb      	ldr	r3, [pc, #748]	; (8002928 <calc_measurements+0xf40>)
 800263a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (i_measured[I2] >= I2_MIN) {		// Reading above min current?
 800263e:	4bba      	ldr	r3, [pc, #744]	; (8002928 <calc_measurements+0xf40>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ffa0 	bl	8000588 <__aeabi_f2d>
 8002648:	a3b5      	add	r3, pc, #724	; (adr r3, 8002920 <calc_measurements+0xf38>)
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	f7fe fa79 	bl	8000b44 <__aeabi_dcmpge>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 8087 	beq.w	8002768 <calc_measurements+0xd80>
			if (i2_va_acc > 0) { va = i2_va_acc / num_readings; }
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002666:	f7fe fa77 	bl	8000b58 <__aeabi_dcmpgt>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <calc_measurements+0xcb0>
 8002670:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd ff75 	bl	8000564 <__aeabi_i2d>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002682:	f7fe f903 	bl	800088c <__aeabi_ddiv>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f7fe faab 	bl	8000be8 <__aeabi_d2f>
 8002692:	4603      	mov	r3, r0
 8002694:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			if (i2_w_acc > 0) { w = i2_w_acc / num_readings; }
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80026a4:	f7fe fa58 	bl	8000b58 <__aeabi_dcmpgt>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d013      	beq.n	80026d6 <calc_measurements+0xcee>
 80026ae:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd ff56 	bl	8000564 <__aeabi_i2d>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80026c0:	f7fe f8e4 	bl	800088c <__aeabi_ddiv>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	f7fe fa8c 	bl	8000be8 <__aeabi_d2f>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			va_measured[I2] = v_measured * i_measured[I2];
 80026d6:	4b94      	ldr	r3, [pc, #592]	; (8002928 <calc_measurements+0xf40>)
 80026d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80026dc:	4b93      	ldr	r3, [pc, #588]	; (800292c <calc_measurements+0xf44>)
 80026de:	edd3 7a00 	vldr	s15, [r3]
 80026e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e6:	4b92      	ldr	r3, [pc, #584]	; (8002930 <calc_measurements+0xf48>)
 80026e8:	edc3 7a01 	vstr	s15, [r3, #4]
			if (w > 0) { w_measured[I2] = va - w;}
 80026ec:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 80026f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	dd09      	ble.n	800270e <calc_measurements+0xd26>
 80026fa:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 80026fe:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8002702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002706:	4b8b      	ldr	r3, [pc, #556]	; (8002934 <calc_measurements+0xf4c>)
 8002708:	edc3 7a01 	vstr	s15, [r3, #4]
 800270c:	e003      	b.n	8002716 <calc_measurements+0xd2e>
			else { w_measured[I2] = va_measured[I2];}
 800270e:	4b88      	ldr	r3, [pc, #544]	; (8002930 <calc_measurements+0xf48>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4a88      	ldr	r2, [pc, #544]	; (8002934 <calc_measurements+0xf4c>)
 8002714:	6053      	str	r3, [r2, #4]
			if (w_measured[I2] > va_measured[I2]) w_measured[I2] = va_measured[I2];		// W must be =< than VA
 8002716:	4b87      	ldr	r3, [pc, #540]	; (8002934 <calc_measurements+0xf4c>)
 8002718:	ed93 7a01 	vldr	s14, [r3, #4]
 800271c:	4b84      	ldr	r3, [pc, #528]	; (8002930 <calc_measurements+0xf48>)
 800271e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272a:	dd03      	ble.n	8002734 <calc_measurements+0xd4c>
 800272c:	4b80      	ldr	r3, [pc, #512]	; (8002930 <calc_measurements+0xf48>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a80      	ldr	r2, [pc, #512]	; (8002934 <calc_measurements+0xf4c>)
 8002732:	6053      	str	r3, [r2, #4]
			if (i_measured[I2] >= I2_MIN_PF) {pf_measured[I2] = w_measured[I2] / va_measured[I2];}	// Calculate PF if we have sufficient current
 8002734:	4b7c      	ldr	r3, [pc, #496]	; (8002928 <calc_measurements+0xf40>)
 8002736:	edd3 7a01 	vldr	s15, [r3, #4]
 800273a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800273e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002746:	db0a      	blt.n	800275e <calc_measurements+0xd76>
 8002748:	4b7a      	ldr	r3, [pc, #488]	; (8002934 <calc_measurements+0xf4c>)
 800274a:	edd3 6a01 	vldr	s13, [r3, #4]
 800274e:	4b78      	ldr	r3, [pc, #480]	; (8002930 <calc_measurements+0xf48>)
 8002750:	ed93 7a01 	vldr	s14, [r3, #4]
 8002754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002758:	4b77      	ldr	r3, [pc, #476]	; (8002938 <calc_measurements+0xf50>)
 800275a:	edc3 7a01 	vstr	s15, [r3, #4]
			sample_buf_meta[ADC_CH_I2].measurements_valid = 1;
 800275e:	4b77      	ldr	r3, [pc, #476]	; (800293c <calc_measurements+0xf54>)
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002766:	e00b      	b.n	8002780 <calc_measurements+0xd98>
		} else {
			//term_print("%s() - I2 = %fA below minimum\r\n", __FUNCTION__, i_measured[I2]);
			i_measured[I2] = 0.0;va_measured[I2] = 0.0; w_measured[I2] = 0.0;
 8002768:	4b6f      	ldr	r3, [pc, #444]	; (8002928 <calc_measurements+0xf40>)
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	4b6f      	ldr	r3, [pc, #444]	; (8002930 <calc_measurements+0xf48>)
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	4b6e      	ldr	r3, [pc, #440]	; (8002934 <calc_measurements+0xf4c>)
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	605a      	str	r2, [r3, #4]
		}
	}

	// Process I3 values
	if (sample_buf_meta[ADC_CH_I3].value_is_zero) {	// set all measured values to zero
 8002780:	4b6e      	ldr	r3, [pc, #440]	; (800293c <calc_measurements+0xf54>)
 8002782:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00c      	beq.n	80027a4 <calc_measurements+0xdbc>
		i_measured[I3] = 0.0; va_measured[I3] = 0.0; w_measured[I3] = 0.0;
 800278a:	4b67      	ldr	r3, [pc, #412]	; (8002928 <calc_measurements+0xf40>)
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	4b67      	ldr	r3, [pc, #412]	; (8002930 <calc_measurements+0xf48>)
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	4b66      	ldr	r3, [pc, #408]	; (8002934 <calc_measurements+0xf4c>)
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	e0d9      	b.n	8002958 <calc_measurements+0xf70>
	} else {
		//term_print("%s() - I3 = %f (%d-%d)\r\n", __FUNCTION__, i_measured[I3], sample_buf_meta[ADC_CH_I3].min, sample_buf_meta[ADC_CH_I3].max);
		i_measured[I3] = calc_adc_raw_to_A (sqrt((i3_sq_acc / num_readings)));	// RMS current
 80027a4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80027a8:	2200      	movs	r2, #0
 80027aa:	663b      	str	r3, [r7, #96]	; 0x60
 80027ac:	667a      	str	r2, [r7, #100]	; 0x64
 80027ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80027b2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80027b6:	f7fe fa67 	bl	8000c88 <__aeabi_ldivmod>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f7fd ff0b 	bl	80005dc <__aeabi_l2d>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	ec43 2b10 	vmov	d0, r2, r3
 80027ce:	f00f f97f 	bl	8011ad0 <sqrt>
 80027d2:	ec53 2b10 	vmov	r2, r3, d0
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	f7fe f9dd 	bl	8000b98 <__aeabi_d2iz>
 80027de:	4603      	mov	r3, r0
 80027e0:	b21b      	sxth	r3, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f974 	bl	8002ad0 <calc_adc_raw_to_A>
 80027e8:	eef0 7a40 	vmov.f32	s15, s0
 80027ec:	4b4e      	ldr	r3, [pc, #312]	; (8002928 <calc_measurements+0xf40>)
 80027ee:	edc3 7a02 	vstr	s15, [r3, #8]
		if (i_measured[I3] >= I3_MIN) {		// Reading above min current?
 80027f2:	4b4d      	ldr	r3, [pc, #308]	; (8002928 <calc_measurements+0xf40>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fec6 	bl	8000588 <__aeabi_f2d>
 80027fc:	a348      	add	r3, pc, #288	; (adr r3, 8002920 <calc_measurements+0xf38>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	f7fe f99f 	bl	8000b44 <__aeabi_dcmpge>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8099 	beq.w	8002940 <calc_measurements+0xf58>
			if (i3_va_acc > 0) { va = i3_va_acc / num_readings; }
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800281a:	f7fe f99d 	bl	8000b58 <__aeabi_dcmpgt>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <calc_measurements+0xe64>
 8002824:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fe9b 	bl	8000564 <__aeabi_i2d>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002836:	f7fe f829 	bl	800088c <__aeabi_ddiv>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f9d1 	bl	8000be8 <__aeabi_d2f>
 8002846:	4603      	mov	r3, r0
 8002848:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			if (i3_w_acc > 0) { w = i3_w_acc / num_readings; }
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8002858:	f7fe f97e 	bl	8000b58 <__aeabi_dcmpgt>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d013      	beq.n	800288a <calc_measurements+0xea2>
 8002862:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fe7c 	bl	8000564 <__aeabi_i2d>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8002874:	f7fe f80a 	bl	800088c <__aeabi_ddiv>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f7fe f9b2 	bl	8000be8 <__aeabi_d2f>
 8002884:	4603      	mov	r3, r0
 8002886:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			va_measured[I3] = v_measured * i_measured[I3];
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <calc_measurements+0xf40>)
 800288c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002890:	4b26      	ldr	r3, [pc, #152]	; (800292c <calc_measurements+0xf44>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289a:	4b25      	ldr	r3, [pc, #148]	; (8002930 <calc_measurements+0xf48>)
 800289c:	edc3 7a02 	vstr	s15, [r3, #8]
			if (w > 0) { w_measured[I3] = va - w; }
 80028a0:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 80028a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ac:	dd09      	ble.n	80028c2 <calc_measurements+0xeda>
 80028ae:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 80028b2:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 80028b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ba:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <calc_measurements+0xf4c>)
 80028bc:	edc3 7a02 	vstr	s15, [r3, #8]
 80028c0:	e003      	b.n	80028ca <calc_measurements+0xee2>
			else { w_measured[I3] = va_measured[I3]; }
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <calc_measurements+0xf48>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <calc_measurements+0xf4c>)
 80028c8:	6093      	str	r3, [r2, #8]
			if (w_measured[I3] > va_measured[I3]) w_measured[I3] = va_measured[I3];		// W must be =< than VA
 80028ca:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <calc_measurements+0xf4c>)
 80028cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80028d0:	4b17      	ldr	r3, [pc, #92]	; (8002930 <calc_measurements+0xf48>)
 80028d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80028d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028de:	dd03      	ble.n	80028e8 <calc_measurements+0xf00>
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <calc_measurements+0xf48>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a13      	ldr	r2, [pc, #76]	; (8002934 <calc_measurements+0xf4c>)
 80028e6:	6093      	str	r3, [r2, #8]
			if (i_measured[I3] >= I3_MIN_PF) { pf_measured[I3] = w_measured[I3] / va_measured[I3]; }	// Calculate PF if we have sufficient current
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <calc_measurements+0xf40>)
 80028ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80028ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fa:	db0a      	blt.n	8002912 <calc_measurements+0xf2a>
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <calc_measurements+0xf4c>)
 80028fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <calc_measurements+0xf48>)
 8002904:	ed93 7a02 	vldr	s14, [r3, #8]
 8002908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <calc_measurements+0xf50>)
 800290e:	edc3 7a02 	vstr	s15, [r3, #8]
			sample_buf_meta[ADC_CH_I3].measurements_valid = 1;
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <calc_measurements+0xf54>)
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2020 	strb.w	r2, [r3, #32]
 800291a:	e01d      	b.n	8002958 <calc_measurements+0xf70>
 800291c:	f3af 8000 	nop.w
 8002920:	33333333 	.word	0x33333333
 8002924:	3fd33333 	.word	0x3fd33333
 8002928:	200004d0 	.word	0x200004d0
 800292c:	200004cc 	.word	0x200004cc
 8002930:	200004dc 	.word	0x200004dc
 8002934:	200004e8 	.word	0x200004e8
 8002938:	200004f4 	.word	0x200004f4
 800293c:	2000023c 	.word	0x2000023c
		} else {
			//term_print("%s() - I3 = %fA below minimum\r\n", __FUNCTION__, i_measured[I3]);
			i_measured[I3] = 0.0; va_measured[I3] = 0.0; w_measured[I3] = 0.0;
 8002940:	4b30      	ldr	r3, [pc, #192]	; (8002a04 <calc_measurements+0x101c>)
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <calc_measurements+0x1020>)
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	4b2e      	ldr	r3, [pc, #184]	; (8002a0c <calc_measurements+0x1024>)
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
		}
	}

	// add measurements to filter
	calc_filter_add_v(v_measured);
 8002958:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <calc_measurements+0x1028>)
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	eeb0 0a67 	vmov.f32	s0, s15
 8002962:	f7fe fea7 	bl	80016b4 <calc_filter_add_v>
	calc_filter_add_i(I1, i_measured[I1], va_measured[I1], w_measured[I1], pf_measured[I1]);
 8002966:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <calc_measurements+0x101c>)
 8002968:	edd3 7a00 	vldr	s15, [r3]
 800296c:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <calc_measurements+0x1020>)
 800296e:	ed93 7a00 	vldr	s14, [r3]
 8002972:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <calc_measurements+0x1024>)
 8002974:	edd3 6a00 	vldr	s13, [r3]
 8002978:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <calc_measurements+0x102c>)
 800297a:	ed93 6a00 	vldr	s12, [r3]
 800297e:	eef0 1a46 	vmov.f32	s3, s12
 8002982:	eeb0 1a66 	vmov.f32	s2, s13
 8002986:	eef0 0a47 	vmov.f32	s1, s14
 800298a:	eeb0 0a67 	vmov.f32	s0, s15
 800298e:	2000      	movs	r0, #0
 8002990:	f7fe fed6 	bl	8001740 <calc_filter_add_i>
	calc_filter_add_i(I2, i_measured[I2], va_measured[I2], w_measured[I2], pf_measured[I2]);
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <calc_measurements+0x101c>)
 8002996:	edd3 7a01 	vldr	s15, [r3, #4]
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <calc_measurements+0x1020>)
 800299c:	ed93 7a01 	vldr	s14, [r3, #4]
 80029a0:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <calc_measurements+0x1024>)
 80029a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <calc_measurements+0x102c>)
 80029a8:	ed93 6a01 	vldr	s12, [r3, #4]
 80029ac:	eef0 1a46 	vmov.f32	s3, s12
 80029b0:	eeb0 1a66 	vmov.f32	s2, s13
 80029b4:	eef0 0a47 	vmov.f32	s1, s14
 80029b8:	eeb0 0a67 	vmov.f32	s0, s15
 80029bc:	2001      	movs	r0, #1
 80029be:	f7fe febf 	bl	8001740 <calc_filter_add_i>
	calc_filter_add_i(I3, i_measured[I3], va_measured[I3], w_measured[I3], pf_measured[I3]);
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <calc_measurements+0x101c>)
 80029c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <calc_measurements+0x1020>)
 80029ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <calc_measurements+0x1024>)
 80029d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <calc_measurements+0x102c>)
 80029d6:	ed93 6a02 	vldr	s12, [r3, #8]
 80029da:	eef0 1a46 	vmov.f32	s3, s12
 80029de:	eeb0 1a66 	vmov.f32	s2, s13
 80029e2:	eef0 0a47 	vmov.f32	s1, s14
 80029e6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ea:	2002      	movs	r0, #2
 80029ec:	f7fe fea8 	bl	8001740 <calc_filter_add_i>
	//calc_assign_meter_values(display_channel);

	return 0;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80029f8:	46bd      	mov	sp, r7
 80029fa:	ecbd 8b02 	vpop	{d8}
 80029fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a02:	bf00      	nop
 8002a04:	200004d0 	.word	0x200004d0
 8002a08:	200004dc 	.word	0x200004dc
 8002a0c:	200004e8 	.word	0x200004e8
 8002a10:	200004cc 	.word	0x200004cc
 8002a14:	200004f4 	.word	0x200004f4

08002a18 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns: mv as int
 */
int calc_adc_raw_to_mv_int(int16_t adc_raw) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 8002a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f816 	bl	8002a58 <calc_adc_raw_to_mv_float>
 8002a2c:	ee10 3a10 	vmov	r3, s0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fda9 	bl	8000588 <__aeabi_f2d>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	ec43 2b10 	vmov	d0, r2, r3
 8002a3e:	f00f f957 	bl	8011cf0 <round>
 8002a42:	ec53 2b10 	vmov	r2, r3, d0
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f7fe f8a5 	bl	8000b98 <__aeabi_d2iz>
 8002a4e:	4603      	mov	r3, r0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(int16_t adc_raw) {
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 8002a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a6e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002a8c <calc_adc_raw_to_mv_float+0x34>
 8002a72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a76:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002a90 <calc_adc_raw_to_mv_float+0x38>
 8002a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	457ff000 	.word	0x457ff000
 8002a90:	454e4000 	.word	0x454e4000

08002a94 <calc_adc_raw_to_V>:

/*
 * Convert ADC raw reading to V
 */
float calc_adc_raw_to_V(int16_t adc_raw) {
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_V;
 8002a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aaa:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002ac8 <calc_adc_raw_to_V+0x34>
 8002aae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ab2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002acc <calc_adc_raw_to_V+0x38>
 8002ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002aba:	eeb0 0a67 	vmov.f32	s0, s15
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	457ff000 	.word	0x457ff000
 8002acc:	44434000 	.word	0x44434000

08002ad0 <calc_adc_raw_to_A>:

/*
 * Convert ADC raw reading to A
 */
float calc_adc_raw_to_A(int16_t adc_raw) {
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_I;
 8002ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ae6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002b04 <calc_adc_raw_to_A+0x34>
 8002aea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002b08 <calc_adc_raw_to_A+0x38>
 8002af2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002af6:	eeb0 0a67 	vmov.f32	s0, s15
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	457ff000 	.word	0x457ff000
 8002b08:	43620000 	.word	0x43620000

08002b0c <cmd_error>:
extern uint8_t esp_mode;
extern uint16_t new_time_period;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4803      	ldr	r0, [pc, #12]	; (8002b24 <cmd_error+0x18>)
 8002b18:	f003 fa2e 	bl	8005f78 <term_print>
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	08011e20 	.word	0x08011e20

08002b28 <cmd_t>:

int cmd_t(uint8_t* cmd_str) {
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3301      	adds	r3, #1
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b74      	cmp	r3, #116	; 0x74
 8002b38:	d014      	beq.n	8002b64 <cmd_t+0x3c>
 8002b3a:	2b74      	cmp	r3, #116	; 0x74
 8002b3c:	dc17      	bgt.n	8002b6e <cmd_t+0x46>
 8002b3e:	2b54      	cmp	r3, #84	; 0x54
 8002b40:	d010      	beq.n	8002b64 <cmd_t+0x3c>
 8002b42:	2b54      	cmp	r3, #84	; 0x54
 8002b44:	dc13      	bgt.n	8002b6e <cmd_t+0x46>
 8002b46:	2b30      	cmp	r3, #48	; 0x30
 8002b48:	d002      	beq.n	8002b50 <cmd_t+0x28>
 8002b4a:	2b31      	cmp	r3, #49	; 0x31
 8002b4c:	d005      	beq.n	8002b5a <cmd_t+0x32>
 8002b4e:	e00e      	b.n	8002b6e <cmd_t+0x46>
	case '0':
		tft_display = 1;
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <cmd_t+0x58>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	701a      	strb	r2, [r3, #0]
		return 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e00b      	b.n	8002b72 <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <cmd_t+0x58>)
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	701a      	strb	r2, [r3, #0]
		return 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e006      	b.n	8002b72 <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <cmd_t+0x58>)
 8002b66:	2209      	movs	r2, #9
 8002b68:	701a      	strb	r2, [r3, #0]
		return 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e001      	b.n	8002b72 <cmd_t+0x4a>
	}
	return -1;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20002640 	.word	0x20002640

08002b84 <cmd_p>:

// adjust timer period
int cmd_p(uint8_t* cmd_str) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f107 0208 	add.w	r2, r7, #8
 8002b94:	4909      	ldr	r1, [pc, #36]	; (8002bbc <cmd_p+0x38>)
 8002b96:	4618      	mov	r0, r3
 8002b98:	f00b feb2 	bl	800e900 <siscanf>
 8002b9c:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d002      	beq.n	8002baa <cmd_p+0x26>
 8002ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ba8:	e004      	b.n	8002bb4 <cmd_p+0x30>
	new_time_period = value;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <cmd_p+0x3c>)
 8002bb0:	801a      	strh	r2, [r3, #0]
	return 0;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	08011e38 	.word	0x08011e38
 8002bc0:	20002642 	.word	0x20002642

08002bc4 <cmd_led>:

int cmd_led(int cmd) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	if (cmd > 1) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	dd05      	ble.n	8002bde <cmd_led+0x1a>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	2120      	movs	r1, #32
 8002bd6:	4807      	ldr	r0, [pc, #28]	; (8002bf4 <cmd_led+0x30>)
 8002bd8:	f006 ffd4 	bl	8009b84 <HAL_GPIO_WritePin>
 8002bdc:	e004      	b.n	8002be8 <cmd_led+0x24>
	} else {
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2120      	movs	r1, #32
 8002be2:	4804      	ldr	r0, [pc, #16]	; (8002bf4 <cmd_led+0x30>)
 8002be4:	f006 ffce 	bl	8009b84 <HAL_GPIO_WritePin>
	}
	return(0);
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40020000 	.word	0x40020000

08002bf8 <cmd_help>:


int cmd_help(void) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 8002bfc:	4810      	ldr	r0, [pc, #64]	; (8002c40 <cmd_help+0x48>)
 8002bfe:	f003 f9bb 	bl	8005f78 <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 8002c02:	4810      	ldr	r0, [pc, #64]	; (8002c44 <cmd_help+0x4c>)
 8002c04:	f003 f9b8 	bl	8005f78 <term_print>
	term_print("E: Toggle ESP mode\r\n");
 8002c08:	480f      	ldr	r0, [pc, #60]	; (8002c48 <cmd_help+0x50>)
 8002c0a:	f003 f9b5 	bl	8005f78 <term_print>
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 8002c0e:	480f      	ldr	r0, [pc, #60]	; (8002c4c <cmd_help+0x54>)
 8002c10:	f003 f9b2 	bl	8005f78 <term_print>
	term_print("M show measurements using all channels\r\n");
 8002c14:	480e      	ldr	r0, [pc, #56]	; (8002c50 <cmd_help+0x58>)
 8002c16:	f003 f9af 	bl	8005f78 <term_print>
	term_print("M[1..4]: Show measurements for ADC channel 1 - 4 buffer in terminal \r\n");
 8002c1a:	480e      	ldr	r0, [pc, #56]	; (8002c54 <cmd_help+0x5c>)
 8002c1c:	f003 f9ac 	bl	8005f78 <term_print>
	term_print("P[2000..2500]: adjust timer value for sample time\r\n");
 8002c20:	480d      	ldr	r0, [pc, #52]	; (8002c58 <cmd_help+0x60>)
 8002c22:	f003 f9a9 	bl	8005f78 <term_print>
	term_print("R: Restart ADC conversion\r\n");
 8002c26:	480d      	ldr	r0, [pc, #52]	; (8002c5c <cmd_help+0x64>)
 8002c28:	f003 f9a6 	bl	8005f78 <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 8002c2c:	480c      	ldr	r0, [pc, #48]	; (8002c60 <cmd_help+0x68>)
 8002c2e:	f003 f9a3 	bl	8005f78 <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 8002c32:	480c      	ldr	r0, [pc, #48]	; (8002c64 <cmd_help+0x6c>)
 8002c34:	f003 f9a0 	bl	8005f78 <term_print>
	return 0;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	08011e3c 	.word	0x08011e3c
 8002c44:	08011e50 	.word	0x08011e50
 8002c48:	08011e88 	.word	0x08011e88
 8002c4c:	08011ea0 	.word	0x08011ea0
 8002c50:	08011ebc 	.word	0x08011ebc
 8002c54:	08011ee8 	.word	0x08011ee8
 8002c58:	08011f30 	.word	0x08011f30
 8002c5c:	08011f64 	.word	0x08011f64
 8002c60:	08011f80 	.word	0x08011f80
 8002c64:	08011fc0 	.word	0x08011fc0

08002c68 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	int retval = -1;
 8002c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c74:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	3b3f      	subs	r3, #63	; 0x3f
 8002c7c:	2b35      	cmp	r3, #53	; 0x35
 8002c7e:	f200 80c4 	bhi.w	8002e0a <cmd_process+0x1a2>
 8002c82:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <cmd_process+0x20>)
 8002c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c88:	08002e05 	.word	0x08002e05
 8002c8c:	08002e0b 	.word	0x08002e0b
 8002c90:	08002e0b 	.word	0x08002e0b
 8002c94:	08002e0b 	.word	0x08002e0b
 8002c98:	08002d61 	.word	0x08002d61
 8002c9c:	08002e0b 	.word	0x08002e0b
 8002ca0:	08002d77 	.word	0x08002d77
 8002ca4:	08002e0b 	.word	0x08002e0b
 8002ca8:	08002e0b 	.word	0x08002e0b
 8002cac:	08002e05 	.word	0x08002e05
 8002cb0:	08002e0b 	.word	0x08002e0b
 8002cb4:	08002e0b 	.word	0x08002e0b
 8002cb8:	08002e0b 	.word	0x08002e0b
 8002cbc:	08002d95 	.word	0x08002d95
 8002cc0:	08002da7 	.word	0x08002da7
 8002cc4:	08002e0b 	.word	0x08002e0b
 8002cc8:	08002e0b 	.word	0x08002e0b
 8002ccc:	08002dcf 	.word	0x08002dcf
 8002cd0:	08002e0b 	.word	0x08002e0b
 8002cd4:	08002dd9 	.word	0x08002dd9
 8002cd8:	08002de5 	.word	0x08002de5
 8002cdc:	08002dfb 	.word	0x08002dfb
 8002ce0:	08002e0b 	.word	0x08002e0b
 8002ce4:	08002e0b 	.word	0x08002e0b
 8002ce8:	08002e0b 	.word	0x08002e0b
 8002cec:	08002e0b 	.word	0x08002e0b
 8002cf0:	08002e0b 	.word	0x08002e0b
 8002cf4:	08002e0b 	.word	0x08002e0b
 8002cf8:	08002e0b 	.word	0x08002e0b
 8002cfc:	08002e0b 	.word	0x08002e0b
 8002d00:	08002e0b 	.word	0x08002e0b
 8002d04:	08002e0b 	.word	0x08002e0b
 8002d08:	08002e0b 	.word	0x08002e0b
 8002d0c:	08002e0b 	.word	0x08002e0b
 8002d10:	08002e0b 	.word	0x08002e0b
 8002d14:	08002e0b 	.word	0x08002e0b
 8002d18:	08002d61 	.word	0x08002d61
 8002d1c:	08002e0b 	.word	0x08002e0b
 8002d20:	08002d77 	.word	0x08002d77
 8002d24:	08002e0b 	.word	0x08002e0b
 8002d28:	08002e0b 	.word	0x08002e0b
 8002d2c:	08002e05 	.word	0x08002e05
 8002d30:	08002e0b 	.word	0x08002e0b
 8002d34:	08002e0b 	.word	0x08002e0b
 8002d38:	08002e0b 	.word	0x08002e0b
 8002d3c:	08002d95 	.word	0x08002d95
 8002d40:	08002da7 	.word	0x08002da7
 8002d44:	08002e0b 	.word	0x08002e0b
 8002d48:	08002e0b 	.word	0x08002e0b
 8002d4c:	08002dcf 	.word	0x08002dcf
 8002d50:	08002e0b 	.word	0x08002e0b
 8002d54:	08002dd9 	.word	0x08002dd9
 8002d58:	08002de5 	.word	0x08002de5
 8002d5c:	08002dfb 	.word	0x08002dfb
	case 'C':
	case 'c':
		term_csv_buffer(cmd_str[1] - 0x31);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3301      	adds	r3, #1
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	3b31      	subs	r3, #49	; 0x31
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 fb22 	bl	80063b4 <term_csv_buffer>
		retval = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
		break;
 8002d74:	e049      	b.n	8002e0a <cmd_process+0x1a2>
	case 'E':
	case 'e':
		if (esp_mode) { esp_mode = 0; }
 8002d76:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <cmd_process+0x1ac>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <cmd_process+0x11e>
 8002d7e:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <cmd_process+0x1ac>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
		else {
			esp_mode = 1;
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
		}
		break;
 8002d84:	e041      	b.n	8002e0a <cmd_process+0x1a2>
			esp_mode = 1;
 8002d86:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <cmd_process+0x1ac>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
 8002d8c:	4822      	ldr	r0, [pc, #136]	; (8002e18 <cmd_process+0x1b0>)
 8002d8e:	f003 f8f3 	bl	8005f78 <term_print>
		break;
 8002d92:	e03a      	b.n	8002e0a <cmd_process+0x1a2>
	case 'L':
	case 'l':
		retval = cmd_led(cmd_str[1] - 0x30 + 1);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3301      	adds	r3, #1
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	3b2f      	subs	r3, #47	; 0x2f
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff11 	bl	8002bc4 <cmd_led>
 8002da2:	60f8      	str	r0, [r7, #12]
		break;
 8002da4:	e031      	b.n	8002e0a <cmd_process+0x1a2>
	case 'M':
	case 'm':
		if (strlen((char*)cmd_str) > 1) {
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fd fa82 	bl	80002b0 <strlen>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d908      	bls.n	8002dc4 <cmd_process+0x15c>
		    term_show_channel(cmd_str[1] - 0x31);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3301      	adds	r3, #1
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	3b31      	subs	r3, #49	; 0x31
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f003 fa39 	bl	8006234 <term_show_channel>
 8002dc2:	e001      	b.n	8002dc8 <cmd_process+0x160>
		} else {
			term_show_measurements();
 8002dc4:	f003 f954 	bl	8006070 <term_show_measurements>
		}
		retval = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
		break;
 8002dcc:	e01d      	b.n	8002e0a <cmd_process+0x1a2>
	case 'P':
	case 'p':
		retval = cmd_p(cmd_str);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff fed8 	bl	8002b84 <cmd_p>
 8002dd4:	60f8      	str	r0, [r7, #12]
		break;
 8002dd6:	e018      	b.n	8002e0a <cmd_process+0x1a2>
	case 'R':
	case 'r':
		adc_restart = 1;
 8002dd8:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <cmd_process+0x1b4>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
		break;
 8002de2:	e012      	b.n	8002e0a <cmd_process+0x1a2>
	case 'S':
	case 's':
		term_show_buffer(cmd_str[1] - 0x31);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3301      	adds	r3, #1
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	3b31      	subs	r3, #49	; 0x31
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 f8e8 	bl	8005fc4 <term_show_buffer>
		retval = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
		break;
 8002df8:	e007      	b.n	8002e0a <cmd_process+0x1a2>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff fe94 	bl	8002b28 <cmd_t>
 8002e00:	60f8      	str	r0, [r7, #12]
		break;
 8002e02:	e002      	b.n	8002e0a <cmd_process+0x1a2>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 8002e04:	f7ff fef8 	bl	8002bf8 <cmd_help>
 8002e08:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20002641 	.word	0x20002641
 8002e18:	08011ff4 	.word	0x08011ff4
 8002e1c:	2000263f 	.word	0x2000263f

08002e20 <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7fd fa41 	bl	80002b0 <strlen>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <CMD_Handler+0x3c>)
 8002e34:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <CMD_Handler+0x3c>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff fe64 	bl	8002b0c <cmd_error>
		return -1;
 8002e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e48:	e003      	b.n	8002e52 <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ff0c 	bl	8002c68 <cmd_process>
 8002e50:	4603      	mov	r3, r0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000500 	.word	0x20000500

08002e60 <display_init>:
uint8_t last_screen = 0;
const Displ_Orientat_e display_orientation = Displ_Orientat_180;
uint16_t display_x, display_y;


void display_init() {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
	Displ_Init(display_orientation); // initialize the display and set the initial display orientation
 8002e64:	2302      	movs	r3, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 fc0a 	bl	8006680 <Displ_Init>
	if ((display_orientation == Displ_Orientat_90) || (display_orientation == Displ_Orientat_270)) {	// Horizontal orientation
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d002      	beq.n	8002e78 <display_init+0x18>
 8002e72:	2302      	movs	r3, #2
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d107      	bne.n	8002e88 <display_init+0x28>
	  display_x = DISPL_HEIGHT;	// 480 or 320
 8002e78:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <display_init+0x3c>)
 8002e7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e7e:	801a      	strh	r2, [r3, #0]
	  display_y = DISPL_WIDTH;	// 320 or 240
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <display_init+0x40>)
 8002e82:	22f0      	movs	r2, #240	; 0xf0
 8002e84:	801a      	strh	r2, [r3, #0]
 8002e86:	e007      	b.n	8002e98 <display_init+0x38>
	} else {		// vertical orientation
		display_y = DISPL_HEIGHT;	// 480 or 320
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <display_init+0x40>)
 8002e8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e8e:	801a      	strh	r2, [r3, #0]
		display_x = DISPL_WIDTH;	// 320 or 240
 8002e90:	4b02      	ldr	r3, [pc, #8]	; (8002e9c <display_init+0x3c>)
 8002e92:	22f0      	movs	r2, #240	; 0xf0
 8002e94:	801a      	strh	r2, [r3, #0]
	}
}
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20002172 	.word	0x20002172
 8002ea0:	20002174 	.word	0x20002174

08002ea4 <display_splash_screen>:

void display_splash_screen() {
 8002ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af06      	add	r7, sp, #24
	// Draw initial TFT Display
	Displ_CLS(BLACK);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f003 fe3e 	bl	8006b2c <Displ_CLS>
	snprintf(str,32, "%s V%d.%02d",  product_msg ,VERSION_MAJOR, VERSION_MINOR);
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <display_splash_screen+0xe4>)
 8002eba:	4a34      	ldr	r2, [pc, #208]	; (8002f8c <display_splash_screen+0xe8>)
 8002ebc:	2120      	movs	r1, #32
 8002ebe:	4834      	ldr	r0, [pc, #208]	; (8002f90 <display_splash_screen+0xec>)
 8002ec0:	f00b fcbe 	bl	800e840 <sniprintf>
	Displ_WString((display_x-(strlen(str)*Font24.Width))/2, (display_y-Font24.Height)/2, str, Font24, 1, YELLOW, BLACK);
 8002ec4:	4b33      	ldr	r3, [pc, #204]	; (8002f94 <display_splash_screen+0xf0>)
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	461c      	mov	r4, r3
 8002eca:	4831      	ldr	r0, [pc, #196]	; (8002f90 <display_splash_screen+0xec>)
 8002ecc:	f7fd f9f0 	bl	80002b0 <strlen>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4a31      	ldr	r2, [pc, #196]	; (8002f98 <display_splash_screen+0xf4>)
 8002ed4:	8892      	ldrh	r2, [r2, #4]
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	1ae3      	subs	r3, r4, r3
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	b29c      	uxth	r4, r3
 8002ee0:	4b2e      	ldr	r3, [pc, #184]	; (8002f9c <display_splash_screen+0xf8>)
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <display_splash_screen+0xf4>)
 8002ee8:	88db      	ldrh	r3, [r3, #6]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	0fda      	lsrs	r2, r3, #31
 8002eee:	4413      	add	r3, r2
 8002ef0:	105b      	asrs	r3, r3, #1
 8002ef2:	b29d      	uxth	r5, r3
 8002ef4:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <display_splash_screen+0xf4>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	9204      	str	r2, [sp, #16]
 8002efa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002efe:	9203      	str	r2, [sp, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	9202      	str	r2, [sp, #8]
 8002f04:	466e      	mov	r6, sp
 8002f06:	1d1a      	adds	r2, r3, #4
 8002f08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f0c:	e886 0003 	stmia.w	r6, {r0, r1}
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <display_splash_screen+0xec>)
 8002f14:	4629      	mov	r1, r5
 8002f16:	4620      	mov	r0, r4
 8002f18:	f004 fd7a 	bl	8007a10 <Displ_WString>
	Displ_WString((display_x-(strlen(copyright_msg)*Font12.Width))/2, (display_y-Font24.Height)/2+25, copyright_msg, Font12, 1, WHITE, BLACK);
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <display_splash_screen+0xf0>)
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	461c      	mov	r4, r3
 8002f22:	481f      	ldr	r0, [pc, #124]	; (8002fa0 <display_splash_screen+0xfc>)
 8002f24:	f7fd f9c4 	bl	80002b0 <strlen>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <display_splash_screen+0x100>)
 8002f2c:	8892      	ldrh	r2, [r2, #4]
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	1ae3      	subs	r3, r4, r3
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	b29c      	uxth	r4, r3
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <display_splash_screen+0xf8>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <display_splash_screen+0xf4>)
 8002f40:	88db      	ldrh	r3, [r3, #6]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	0fda      	lsrs	r2, r3, #31
 8002f46:	4413      	add	r3, r2
 8002f48:	105b      	asrs	r3, r3, #1
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3319      	adds	r3, #25
 8002f4e:	b29d      	uxth	r5, r3
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <display_splash_screen+0x100>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	9204      	str	r2, [sp, #16]
 8002f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f5a:	9203      	str	r2, [sp, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	9202      	str	r2, [sp, #8]
 8002f60:	466e      	mov	r6, sp
 8002f62:	1d1a      	adds	r2, r3, #4
 8002f64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f68:	e886 0003 	stmia.w	r6, {r0, r1}
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a0c      	ldr	r2, [pc, #48]	; (8002fa0 <display_splash_screen+0xfc>)
 8002f70:	4629      	mov	r1, r5
 8002f72:	4620      	mov	r0, r4
 8002f74:	f004 fd4c 	bl	8007a10 <Displ_WString>

	Displ_BackLight('1');
 8002f78:	2031      	movs	r0, #49	; 0x31
 8002f7a:	f004 fd89 	bl	8007a90 <Displ_BackLight>
}
 8002f7e:	bf00      	nop
 8002f80:	3704      	adds	r7, #4
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f86:	bf00      	nop
 8002f88:	080165b4 	.word	0x080165b4
 8002f8c:	0801201c 	.word	0x0801201c
 8002f90:	20002150 	.word	0x20002150
 8002f94:	20002172 	.word	0x20002172
 8002f98:	20000018 	.word	0x20000018
 8002f9c:	20002174 	.word	0x20002174
 8002fa0:	080165b8 	.word	0x080165b8
 8002fa4:	2000000c 	.word	0x2000000c

08002fa8 <display_channel_detail>:
	snprintf(str,32,"%d,%d",display_x-10,display_y-10);
	Displ_WString(display_x-1-10-strlen(str)*Font12.Width, display_y-10-Font12.Height, str, Font12, 1, BLACK, WHITE);
}

// channel detail screen
void display_channel_detail() {
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af06      	add	r7, sp, #24
	uint16_t font_col = channel_colour[display_channel+1];
 8002fae:	4b98      	ldr	r3, [pc, #608]	; (8003210 <display_channel_detail+0x268>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	4a97      	ldr	r2, [pc, #604]	; (8003214 <display_channel_detail+0x26c>)
 8002fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fba:	80fb      	strh	r3, [r7, #6]
	if (!meter_readings_invalid) {
 8002fbc:	4b96      	ldr	r3, [pc, #600]	; (8003218 <display_channel_detail+0x270>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 80bd 	bne.w	8003140 <display_channel_detail+0x198>
		// V
		snprintf(str,sizeof(str),"%3.0f", v_filtered);
 8002fc6:	4b95      	ldr	r3, [pc, #596]	; (800321c <display_channel_detail+0x274>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fadc 	bl	8000588 <__aeabi_f2d>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	e9cd 2300 	strd	r2, r3, [sp]
 8002fd8:	4a91      	ldr	r2, [pc, #580]	; (8003220 <display_channel_detail+0x278>)
 8002fda:	2120      	movs	r1, #32
 8002fdc:	4891      	ldr	r0, [pc, #580]	; (8003224 <display_channel_detail+0x27c>)
 8002fde:	f00b fc2f 	bl	800e840 <sniprintf>
		Displ_WString(9, 7, str , Font30, 1, channel_colour[0], BLACK);
 8002fe2:	4b8c      	ldr	r3, [pc, #560]	; (8003214 <display_channel_detail+0x26c>)
 8002fe4:	881a      	ldrh	r2, [r3, #0]
 8002fe6:	4b90      	ldr	r3, [pc, #576]	; (8003228 <display_channel_detail+0x280>)
 8002fe8:	2100      	movs	r1, #0
 8002fea:	9104      	str	r1, [sp, #16]
 8002fec:	9203      	str	r2, [sp, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	9202      	str	r2, [sp, #8]
 8002ff2:	466c      	mov	r4, sp
 8002ff4:	1d1a      	adds	r2, r3, #4
 8002ff6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ffa:	e884 0003 	stmia.w	r4, {r0, r1}
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a88      	ldr	r2, [pc, #544]	; (8003224 <display_channel_detail+0x27c>)
 8003002:	2107      	movs	r1, #7
 8003004:	2009      	movs	r0, #9
 8003006:	f004 fd03 	bl	8007a10 <Displ_WString>
		// I
		snprintf(str,sizeof(str),"%4.1f", i_filtered[display_channel]);
 800300a:	4b81      	ldr	r3, [pc, #516]	; (8003210 <display_channel_detail+0x268>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	4a87      	ldr	r2, [pc, #540]	; (800322c <display_channel_detail+0x284>)
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fab6 	bl	8000588 <__aeabi_f2d>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	e9cd 2300 	strd	r2, r3, [sp]
 8003024:	4a82      	ldr	r2, [pc, #520]	; (8003230 <display_channel_detail+0x288>)
 8003026:	2120      	movs	r1, #32
 8003028:	487e      	ldr	r0, [pc, #504]	; (8003224 <display_channel_detail+0x27c>)
 800302a:	f00b fc09 	bl	800e840 <sniprintf>
		Displ_WString(120, 7, str , Font30, 1, font_col, BLACK);
 800302e:	4b7e      	ldr	r3, [pc, #504]	; (8003228 <display_channel_detail+0x280>)
 8003030:	2200      	movs	r2, #0
 8003032:	9204      	str	r2, [sp, #16]
 8003034:	88fa      	ldrh	r2, [r7, #6]
 8003036:	9203      	str	r2, [sp, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	9202      	str	r2, [sp, #8]
 800303c:	466c      	mov	r4, sp
 800303e:	1d1a      	adds	r2, r3, #4
 8003040:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003044:	e884 0003 	stmia.w	r4, {r0, r1}
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a76      	ldr	r2, [pc, #472]	; (8003224 <display_channel_detail+0x27c>)
 800304c:	2107      	movs	r1, #7
 800304e:	2078      	movs	r0, #120	; 0x78
 8003050:	f004 fcde 	bl	8007a10 <Displ_WString>
		// VA
		snprintf(str,sizeof(str),"%7.1f", va_filtered[display_channel] );
 8003054:	4b6e      	ldr	r3, [pc, #440]	; (8003210 <display_channel_detail+0x268>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	4a76      	ldr	r2, [pc, #472]	; (8003234 <display_channel_detail+0x28c>)
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd fa91 	bl	8000588 <__aeabi_f2d>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	e9cd 2300 	strd	r2, r3, [sp]
 800306e:	4a72      	ldr	r2, [pc, #456]	; (8003238 <display_channel_detail+0x290>)
 8003070:	2120      	movs	r1, #32
 8003072:	486c      	ldr	r0, [pc, #432]	; (8003224 <display_channel_detail+0x27c>)
 8003074:	f00b fbe4 	bl	800e840 <sniprintf>
		Displ_WString(9, 48, str , Font30, 1,  font_col, BLACK);
 8003078:	4b6b      	ldr	r3, [pc, #428]	; (8003228 <display_channel_detail+0x280>)
 800307a:	2200      	movs	r2, #0
 800307c:	9204      	str	r2, [sp, #16]
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	9203      	str	r2, [sp, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	9202      	str	r2, [sp, #8]
 8003086:	466c      	mov	r4, sp
 8003088:	1d1a      	adds	r2, r3, #4
 800308a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800308e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a63      	ldr	r2, [pc, #396]	; (8003224 <display_channel_detail+0x27c>)
 8003096:	2130      	movs	r1, #48	; 0x30
 8003098:	2009      	movs	r0, #9
 800309a:	f004 fcb9 	bl	8007a10 <Displ_WString>
		// W
		snprintf(str,sizeof(str),"%7.1f", w_filtered[display_channel] );
 800309e:	4b5c      	ldr	r3, [pc, #368]	; (8003210 <display_channel_detail+0x268>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	4a66      	ldr	r2, [pc, #408]	; (800323c <display_channel_detail+0x294>)
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd fa6c 	bl	8000588 <__aeabi_f2d>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	e9cd 2300 	strd	r2, r3, [sp]
 80030b8:	4a5f      	ldr	r2, [pc, #380]	; (8003238 <display_channel_detail+0x290>)
 80030ba:	2120      	movs	r1, #32
 80030bc:	4859      	ldr	r0, [pc, #356]	; (8003224 <display_channel_detail+0x27c>)
 80030be:	f00b fbbf 	bl	800e840 <sniprintf>
		Displ_WString(9, 89, str , Font30, 1,  font_col, BLACK);
 80030c2:	4b59      	ldr	r3, [pc, #356]	; (8003228 <display_channel_detail+0x280>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	9204      	str	r2, [sp, #16]
 80030c8:	88fa      	ldrh	r2, [r7, #6]
 80030ca:	9203      	str	r2, [sp, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	9202      	str	r2, [sp, #8]
 80030d0:	466c      	mov	r4, sp
 80030d2:	1d1a      	adds	r2, r3, #4
 80030d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a51      	ldr	r2, [pc, #324]	; (8003224 <display_channel_detail+0x27c>)
 80030e0:	2159      	movs	r1, #89	; 0x59
 80030e2:	2009      	movs	r0, #9
 80030e4:	f004 fc94 	bl	8007a10 <Displ_WString>
		// PF
		snprintf(str,sizeof(str),"%4.2f", fabs(pf_filtered[display_channel]) );
 80030e8:	4b49      	ldr	r3, [pc, #292]	; (8003210 <display_channel_detail+0x268>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4a54      	ldr	r2, [pc, #336]	; (8003240 <display_channel_detail+0x298>)
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	eef0 7ae7 	vabs.f32	s15, s15
 80030fa:	ee17 0a90 	vmov	r0, s15
 80030fe:	f7fd fa43 	bl	8000588 <__aeabi_f2d>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	e9cd 2300 	strd	r2, r3, [sp]
 800310a:	4a4e      	ldr	r2, [pc, #312]	; (8003244 <display_channel_detail+0x29c>)
 800310c:	2120      	movs	r1, #32
 800310e:	4845      	ldr	r0, [pc, #276]	; (8003224 <display_channel_detail+0x27c>)
 8003110:	f00b fb96 	bl	800e840 <sniprintf>
		Displ_WString(9, 130, str , Font30, 1,  font_col, BLACK);
 8003114:	4b44      	ldr	r3, [pc, #272]	; (8003228 <display_channel_detail+0x280>)
 8003116:	2200      	movs	r2, #0
 8003118:	9204      	str	r2, [sp, #16]
 800311a:	88fa      	ldrh	r2, [r7, #6]
 800311c:	9203      	str	r2, [sp, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	9202      	str	r2, [sp, #8]
 8003122:	466c      	mov	r4, sp
 8003124:	1d1a      	adds	r2, r3, #4
 8003126:	e892 0003 	ldmia.w	r2, {r0, r1}
 800312a:	e884 0003 	stmia.w	r4, {r0, r1}
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a3c      	ldr	r2, [pc, #240]	; (8003224 <display_channel_detail+0x27c>)
 8003132:	2182      	movs	r1, #130	; 0x82
 8003134:	2009      	movs	r0, #9
 8003136:	f004 fc6b 	bl	8007a10 <Displ_WString>
		} else {
			snprintf(str,sizeof(str)," 0.0");
		}
		Displ_WString(138, 130, str , Font30, 1, WHITE, BLACK);
		*/
		display_show_curves();
 800313a:	f001 fa31 	bl	80045a0 <display_show_curves>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
		//Displ_WString(138, 130, "--.-" , Font30, 1, WHITE, BLACK);
		}

}
 800313e:	e063      	b.n	8003208 <display_channel_detail+0x260>
		Displ_WString(9, 7, "---" , Font30, 1, GREEN, BLACK);
 8003140:	4b39      	ldr	r3, [pc, #228]	; (8003228 <display_channel_detail+0x280>)
 8003142:	2200      	movs	r2, #0
 8003144:	9204      	str	r2, [sp, #16]
 8003146:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800314a:	9203      	str	r2, [sp, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	9202      	str	r2, [sp, #8]
 8003150:	466c      	mov	r4, sp
 8003152:	1d1a      	adds	r2, r3, #4
 8003154:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003158:	e884 0003 	stmia.w	r4, {r0, r1}
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3a      	ldr	r2, [pc, #232]	; (8003248 <display_channel_detail+0x2a0>)
 8003160:	2107      	movs	r1, #7
 8003162:	2009      	movs	r0, #9
 8003164:	f004 fc54 	bl	8007a10 <Displ_WString>
		Displ_WString(120, 7, "--.-" , Font30, 1, ORANGE, BLACK);
 8003168:	4b2f      	ldr	r3, [pc, #188]	; (8003228 <display_channel_detail+0x280>)
 800316a:	2200      	movs	r2, #0
 800316c:	9204      	str	r2, [sp, #16]
 800316e:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 8003172:	9203      	str	r2, [sp, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	9202      	str	r2, [sp, #8]
 8003178:	466c      	mov	r4, sp
 800317a:	1d1a      	adds	r2, r3, #4
 800317c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003180:	e884 0003 	stmia.w	r4, {r0, r1}
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a31      	ldr	r2, [pc, #196]	; (800324c <display_channel_detail+0x2a4>)
 8003188:	2107      	movs	r1, #7
 800318a:	2078      	movs	r0, #120	; 0x78
 800318c:	f004 fc40 	bl	8007a10 <Displ_WString>
		Displ_WString(9, 48, "-----.-" , Font30, 1, YELLOW, BLACK);
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <display_channel_detail+0x280>)
 8003192:	2200      	movs	r2, #0
 8003194:	9204      	str	r2, [sp, #16]
 8003196:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800319a:	9203      	str	r2, [sp, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	9202      	str	r2, [sp, #8]
 80031a0:	466c      	mov	r4, sp
 80031a2:	1d1a      	adds	r2, r3, #4
 80031a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a28      	ldr	r2, [pc, #160]	; (8003250 <display_channel_detail+0x2a8>)
 80031b0:	2130      	movs	r1, #48	; 0x30
 80031b2:	2009      	movs	r0, #9
 80031b4:	f004 fc2c 	bl	8007a10 <Displ_WString>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
 80031b8:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <display_channel_detail+0x280>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	9204      	str	r2, [sp, #16]
 80031be:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80031c2:	9203      	str	r2, [sp, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	9202      	str	r2, [sp, #8]
 80031c8:	466c      	mov	r4, sp
 80031ca:	1d1a      	adds	r2, r3, #4
 80031cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <display_channel_detail+0x2a8>)
 80031d8:	2159      	movs	r1, #89	; 0x59
 80031da:	2009      	movs	r0, #9
 80031dc:	f004 fc18 	bl	8007a10 <Displ_WString>
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <display_channel_detail+0x280>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	9204      	str	r2, [sp, #16]
 80031e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ea:	9203      	str	r2, [sp, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	9202      	str	r2, [sp, #8]
 80031f0:	466c      	mov	r4, sp
 80031f2:	1d1a      	adds	r2, r3, #4
 80031f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <display_channel_detail+0x2ac>)
 8003200:	2182      	movs	r1, #130	; 0x82
 8003202:	2009      	movs	r0, #9
 8003204:	f004 fc04 	bl	8007a10 <Displ_WString>
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bd90      	pop	{r4, r7, pc}
 8003210:	20000501 	.word	0x20000501
 8003214:	20000000 	.word	0x20000000
 8003218:	2000028c 	.word	0x2000028c
 800321c:	20000498 	.word	0x20000498
 8003220:	08012038 	.word	0x08012038
 8003224:	20002150 	.word	0x20002150
 8003228:	20000024 	.word	0x20000024
 800322c:	2000049c 	.word	0x2000049c
 8003230:	08012040 	.word	0x08012040
 8003234:	200004a8 	.word	0x200004a8
 8003238:	08012048 	.word	0x08012048
 800323c:	200004b4 	.word	0x200004b4
 8003240:	200004c0 	.word	0x200004c0
 8003244:	08012050 	.word	0x08012050
 8003248:	08012058 	.word	0x08012058
 800324c:	0801205c 	.word	0x0801205c
 8003250:	08012064 	.word	0x08012064
 8003254:	0801206c 	.word	0x0801206c

08003258 <display_usage>:

/*
 * @brief      Display "Usage" page
 * @para mask  1=display Usage mask, 0=display values
 */
void display_usage(uint8_t mask) {
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b092      	sub	sp, #72	; 0x48
 800325c:	af06      	add	r7, sp, #24
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
	int font_col = channel_colour[0];
 8003262:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <display_usage+0x19c>)
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
	int ypos = 10;
 8003268:	230a      	movs	r3, #10
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int xpos = 20;
 800326c:	2314      	movs	r3, #20
 800326e:	623b      	str	r3, [r7, #32]
	int line_space = -2;
 8003270:	f06f 0301 	mvn.w	r3, #1
 8003274:	61fb      	str	r3, [r7, #28]
	int section_space = 5;
 8003276:	2305      	movs	r3, #5
 8003278:	61bb      	str	r3, [r7, #24]
	sFONT font = Font24;
 800327a:	4a5f      	ldr	r2, [pc, #380]	; (80033f8 <display_usage+0x1a0>)
 800327c:	f107 030c 	add.w	r3, r7, #12
 8003280:	ca07      	ldmia	r2, {r0, r1, r2}
 8003282:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Create page mask
	if (mask != 0) {
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80c1 	beq.w	8003410 <display_usage+0x1b8>
		xpos += 8*font.Width;
 800328e:	8a3b      	ldrh	r3, [r7, #16]
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	6a3a      	ldr	r2, [r7, #32]
 8003294:	4413      	add	r3, r2
 8003296:	623b      	str	r3, [r7, #32]
		Displ_WString(xpos, ypos, "V", font, 1,  font_col, BLACK);
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	b29c      	uxth	r4, r3
 800329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329e:	b29d      	uxth	r5, r3
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2200      	movs	r2, #0
 80032a6:	9204      	str	r2, [sp, #16]
 80032a8:	9303      	str	r3, [sp, #12]
 80032aa:	2301      	movs	r3, #1
 80032ac:	9302      	str	r3, [sp, #8]
 80032ae:	466a      	mov	r2, sp
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80032b8:	e882 0003 	stmia.w	r2, {r0, r1}
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4a4f      	ldr	r2, [pc, #316]	; (80033fc <display_usage+0x1a4>)
 80032c0:	4629      	mov	r1, r5
 80032c2:	4620      	mov	r0, r4
 80032c4:	f004 fba4 	bl	8007a10 <Displ_WString>
		ypos += section_space+line_space + font.Height;
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	4413      	add	r3, r2
 80032ce:	8a7a      	ldrh	r2, [r7, #18]
 80032d0:	4413      	add	r3, r2
 80032d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d4:	4413      	add	r3, r2
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		for (int i=I1; i<=I3; i++) {
 80032d8:	2300      	movs	r3, #0
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
 80032dc:	e085      	b.n	80033ea <display_usage+0x192>
			font_col = channel_colour[i+1];
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	3301      	adds	r3, #1
 80032e2:	4a44      	ldr	r2, [pc, #272]	; (80033f4 <display_usage+0x19c>)
 80032e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
			Displ_WString(xpos , ypos, "A" , font, 1,  font_col, BLACK);
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	b29c      	uxth	r4, r3
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	b29d      	uxth	r5, r3
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2200      	movs	r2, #0
 80032f8:	9204      	str	r2, [sp, #16]
 80032fa:	9303      	str	r3, [sp, #12]
 80032fc:	2301      	movs	r3, #1
 80032fe:	9302      	str	r3, [sp, #8]
 8003300:	466a      	mov	r2, sp
 8003302:	f107 0310 	add.w	r3, r7, #16
 8003306:	e893 0003 	ldmia.w	r3, {r0, r1}
 800330a:	e882 0003 	stmia.w	r2, {r0, r1}
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a3b      	ldr	r2, [pc, #236]	; (8003400 <display_usage+0x1a8>)
 8003312:	4629      	mov	r1, r5
 8003314:	4620      	mov	r0, r4
 8003316:	f004 fb7b 	bl	8007a10 <Displ_WString>
			ypos += line_space + font.Height;
 800331a:	8a7b      	ldrh	r3, [r7, #18]
 800331c:	461a      	mov	r2, r3
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	4413      	add	r3, r2
 8003322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003324:	4413      	add	r3, r2
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
			Displ_WString(xpos, ypos, "VA" , font, 1,  font_col, BLACK);
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	b29c      	uxth	r4, r3
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	b29d      	uxth	r5, r3
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	b29b      	uxth	r3, r3
 8003334:	2200      	movs	r2, #0
 8003336:	9204      	str	r2, [sp, #16]
 8003338:	9303      	str	r3, [sp, #12]
 800333a:	2301      	movs	r3, #1
 800333c:	9302      	str	r3, [sp, #8]
 800333e:	466a      	mov	r2, sp
 8003340:	f107 0310 	add.w	r3, r7, #16
 8003344:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003348:	e882 0003 	stmia.w	r2, {r0, r1}
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a2d      	ldr	r2, [pc, #180]	; (8003404 <display_usage+0x1ac>)
 8003350:	4629      	mov	r1, r5
 8003352:	4620      	mov	r0, r4
 8003354:	f004 fb5c 	bl	8007a10 <Displ_WString>
			ypos += line_space + font.Height;
 8003358:	8a7b      	ldrh	r3, [r7, #18]
 800335a:	461a      	mov	r2, r3
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4413      	add	r3, r2
 8003360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003362:	4413      	add	r3, r2
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
			Displ_WString(xpos, ypos, "W" , font, 1,  font_col, BLACK);
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	b29c      	uxth	r4, r3
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	b29d      	uxth	r5, r3
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	b29b      	uxth	r3, r3
 8003372:	2200      	movs	r2, #0
 8003374:	9204      	str	r2, [sp, #16]
 8003376:	9303      	str	r3, [sp, #12]
 8003378:	2301      	movs	r3, #1
 800337a:	9302      	str	r3, [sp, #8]
 800337c:	466a      	mov	r2, sp
 800337e:	f107 0310 	add.w	r3, r7, #16
 8003382:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003386:	e882 0003 	stmia.w	r2, {r0, r1}
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <display_usage+0x1b0>)
 800338e:	4629      	mov	r1, r5
 8003390:	4620      	mov	r0, r4
 8003392:	f004 fb3d 	bl	8007a10 <Displ_WString>
			ypos += line_space + font.Height;
 8003396:	8a7b      	ldrh	r3, [r7, #18]
 8003398:	461a      	mov	r2, r3
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	4413      	add	r3, r2
 800339e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a0:	4413      	add	r3, r2
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			Displ_WString(xpos, ypos, "PF" , font, 1,  font_col, BLACK);
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	b29c      	uxth	r4, r3
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	b29d      	uxth	r5, r3
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2200      	movs	r2, #0
 80033b2:	9204      	str	r2, [sp, #16]
 80033b4:	9303      	str	r3, [sp, #12]
 80033b6:	2301      	movs	r3, #1
 80033b8:	9302      	str	r3, [sp, #8]
 80033ba:	466a      	mov	r2, sp
 80033bc:	f107 0310 	add.w	r3, r7, #16
 80033c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a10      	ldr	r2, [pc, #64]	; (800340c <display_usage+0x1b4>)
 80033cc:	4629      	mov	r1, r5
 80033ce:	4620      	mov	r0, r4
 80033d0:	f004 fb1e 	bl	8007a10 <Displ_WString>
			ypos += section_space+line_space + font.Height;
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	8a7a      	ldrh	r2, [r7, #18]
 80033dc:	4413      	add	r3, r2
 80033de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e0:	4413      	add	r3, r2
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i=I1; i<=I3; i++) {
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	3301      	adds	r3, #1
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	f77f af76 	ble.w	80032de <display_usage+0x86>
		}
		return;
 80033f2:	e2ad      	b.n	8003950 <display_usage+0x6f8>
 80033f4:	20000000 	.word	0x20000000
 80033f8:	20000018 	.word	0x20000018
 80033fc:	08012074 	.word	0x08012074
 8003400:	08012078 	.word	0x08012078
 8003404:	0801207c 	.word	0x0801207c
 8003408:	08012080 	.word	0x08012080
 800340c:	08012084 	.word	0x08012084
	}

	snprintf(str,sizeof(str),"%3.0f", v_filtered);
 8003410:	4baa      	ldr	r3, [pc, #680]	; (80036bc <display_usage+0x464>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd f8b7 	bl	8000588 <__aeabi_f2d>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	e9cd 2300 	strd	r2, r3, [sp]
 8003422:	4aa7      	ldr	r2, [pc, #668]	; (80036c0 <display_usage+0x468>)
 8003424:	2120      	movs	r1, #32
 8003426:	48a7      	ldr	r0, [pc, #668]	; (80036c4 <display_usage+0x46c>)
 8003428:	f00b fa0a 	bl	800e840 <sniprintf>
	Displ_WString(xpos+4*font.Width, ypos, str , font, 1,  font_col, BLACK);
 800342c:	8a3b      	ldrh	r3, [r7, #16]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	b29a      	uxth	r2, r3
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	b29b      	uxth	r3, r3
 8003436:	4413      	add	r3, r2
 8003438:	b29c      	uxth	r4, r3
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	b29d      	uxth	r5, r3
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	b29b      	uxth	r3, r3
 8003442:	2200      	movs	r2, #0
 8003444:	9204      	str	r2, [sp, #16]
 8003446:	9303      	str	r3, [sp, #12]
 8003448:	2301      	movs	r3, #1
 800344a:	9302      	str	r3, [sp, #8]
 800344c:	466a      	mov	r2, sp
 800344e:	f107 0310 	add.w	r3, r7, #16
 8003452:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003456:	e882 0003 	stmia.w	r2, {r0, r1}
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a99      	ldr	r2, [pc, #612]	; (80036c4 <display_usage+0x46c>)
 800345e:	4629      	mov	r1, r5
 8003460:	4620      	mov	r0, r4
 8003462:	f004 fad5 	bl	8007a10 <Displ_WString>
	ypos += section_space+line_space + font.Height;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	4413      	add	r3, r2
 800346c:	8a7a      	ldrh	r2, [r7, #18]
 800346e:	4413      	add	r3, r2
 8003470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003472:	4413      	add	r3, r2
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c

	font_col = channel_colour[I1+1];
 8003476:	4b94      	ldr	r3, [pc, #592]	; (80036c8 <display_usage+0x470>)
 8003478:	885b      	ldrh	r3, [r3, #2]
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf(str,sizeof(str),"%4.1f", i_filtered[I1]);
 800347c:	4b93      	ldr	r3, [pc, #588]	; (80036cc <display_usage+0x474>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd f881 	bl	8000588 <__aeabi_f2d>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	e9cd 2300 	strd	r2, r3, [sp]
 800348e:	4a90      	ldr	r2, [pc, #576]	; (80036d0 <display_usage+0x478>)
 8003490:	2120      	movs	r1, #32
 8003492:	488c      	ldr	r0, [pc, #560]	; (80036c4 <display_usage+0x46c>)
 8003494:	f00b f9d4 	bl	800e840 <sniprintf>
	Displ_WString(xpos+3*font.Width , ypos, str , font, 1,  font_col, BLACK);
 8003498:	8a3b      	ldrh	r3, [r7, #16]
 800349a:	461a      	mov	r2, r3
 800349c:	0052      	lsls	r2, r2, #1
 800349e:	4413      	add	r3, r2
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	b29c      	uxth	r4, r3
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	b29d      	uxth	r5, r3
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2200      	movs	r2, #0
 80034b4:	9204      	str	r2, [sp, #16]
 80034b6:	9303      	str	r3, [sp, #12]
 80034b8:	2301      	movs	r3, #1
 80034ba:	9302      	str	r3, [sp, #8]
 80034bc:	466a      	mov	r2, sp
 80034be:	f107 0310 	add.w	r3, r7, #16
 80034c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034c6:	e882 0003 	stmia.w	r2, {r0, r1}
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a7d      	ldr	r2, [pc, #500]	; (80036c4 <display_usage+0x46c>)
 80034ce:	4629      	mov	r1, r5
 80034d0:	4620      	mov	r0, r4
 80034d2:	f004 fa9d 	bl	8007a10 <Displ_WString>
	ypos += line_space + font.Height;
 80034d6:	8a7b      	ldrh	r3, [r7, #18]
 80034d8:	461a      	mov	r2, r3
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e0:	4413      	add	r3, r2
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", va_filtered[I1]);
 80034e4:	4b7b      	ldr	r3, [pc, #492]	; (80036d4 <display_usage+0x47c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd f84d 	bl	8000588 <__aeabi_f2d>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	e9cd 2300 	strd	r2, r3, [sp]
 80034f6:	4a78      	ldr	r2, [pc, #480]	; (80036d8 <display_usage+0x480>)
 80034f8:	2120      	movs	r1, #32
 80034fa:	4872      	ldr	r0, [pc, #456]	; (80036c4 <display_usage+0x46c>)
 80034fc:	f00b f9a0 	bl	800e840 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	b29c      	uxth	r4, r3
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	b29d      	uxth	r5, r3
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	b29b      	uxth	r3, r3
 800350c:	2200      	movs	r2, #0
 800350e:	9204      	str	r2, [sp, #16]
 8003510:	9303      	str	r3, [sp, #12]
 8003512:	2301      	movs	r3, #1
 8003514:	9302      	str	r3, [sp, #8]
 8003516:	466a      	mov	r2, sp
 8003518:	f107 0310 	add.w	r3, r7, #16
 800351c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003520:	e882 0003 	stmia.w	r2, {r0, r1}
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a67      	ldr	r2, [pc, #412]	; (80036c4 <display_usage+0x46c>)
 8003528:	4629      	mov	r1, r5
 800352a:	4620      	mov	r0, r4
 800352c:	f004 fa70 	bl	8007a10 <Displ_WString>
	ypos += line_space + font.Height;
 8003530:	8a7b      	ldrh	r3, [r7, #18]
 8003532:	461a      	mov	r2, r3
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800353a:	4413      	add	r3, r2
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", w_filtered[I1]);
 800353e:	4b67      	ldr	r3, [pc, #412]	; (80036dc <display_usage+0x484>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd f820 	bl	8000588 <__aeabi_f2d>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	e9cd 2300 	strd	r2, r3, [sp]
 8003550:	4a61      	ldr	r2, [pc, #388]	; (80036d8 <display_usage+0x480>)
 8003552:	2120      	movs	r1, #32
 8003554:	485b      	ldr	r0, [pc, #364]	; (80036c4 <display_usage+0x46c>)
 8003556:	f00b f973 	bl	800e840 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	b29c      	uxth	r4, r3
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	b29d      	uxth	r5, r3
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	b29b      	uxth	r3, r3
 8003566:	2200      	movs	r2, #0
 8003568:	9204      	str	r2, [sp, #16]
 800356a:	9303      	str	r3, [sp, #12]
 800356c:	2301      	movs	r3, #1
 800356e:	9302      	str	r3, [sp, #8]
 8003570:	466a      	mov	r2, sp
 8003572:	f107 0310 	add.w	r3, r7, #16
 8003576:	e893 0003 	ldmia.w	r3, {r0, r1}
 800357a:	e882 0003 	stmia.w	r2, {r0, r1}
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4a50      	ldr	r2, [pc, #320]	; (80036c4 <display_usage+0x46c>)
 8003582:	4629      	mov	r1, r5
 8003584:	4620      	mov	r0, r4
 8003586:	f004 fa43 	bl	8007a10 <Displ_WString>
	ypos += line_space + font.Height;
 800358a:	8a7b      	ldrh	r3, [r7, #18]
 800358c:	461a      	mov	r2, r3
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003594:	4413      	add	r3, r2
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%4.2f", fabs(pf_filtered[I1]) );
 8003598:	4b51      	ldr	r3, [pc, #324]	; (80036e0 <display_usage+0x488>)
 800359a:	edd3 7a00 	vldr	s15, [r3]
 800359e:	eef0 7ae7 	vabs.f32	s15, s15
 80035a2:	ee17 0a90 	vmov	r0, s15
 80035a6:	f7fc ffef 	bl	8000588 <__aeabi_f2d>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	e9cd 2300 	strd	r2, r3, [sp]
 80035b2:	4a4c      	ldr	r2, [pc, #304]	; (80036e4 <display_usage+0x48c>)
 80035b4:	2120      	movs	r1, #32
 80035b6:	4843      	ldr	r0, [pc, #268]	; (80036c4 <display_usage+0x46c>)
 80035b8:	f00b f942 	bl	800e840 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 80035bc:	8a3b      	ldrh	r3, [r7, #16]
 80035be:	461a      	mov	r2, r3
 80035c0:	0052      	lsls	r2, r2, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	b29c      	uxth	r4, r3
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	b29d      	uxth	r5, r3
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2200      	movs	r2, #0
 80035d8:	9204      	str	r2, [sp, #16]
 80035da:	9303      	str	r3, [sp, #12]
 80035dc:	2301      	movs	r3, #1
 80035de:	9302      	str	r3, [sp, #8]
 80035e0:	466a      	mov	r2, sp
 80035e2:	f107 0310 	add.w	r3, r7, #16
 80035e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035ea:	e882 0003 	stmia.w	r2, {r0, r1}
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4a34      	ldr	r2, [pc, #208]	; (80036c4 <display_usage+0x46c>)
 80035f2:	4629      	mov	r1, r5
 80035f4:	4620      	mov	r0, r4
 80035f6:	f004 fa0b 	bl	8007a10 <Displ_WString>
	ypos += section_space+line_space + font.Height;
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	4413      	add	r3, r2
 8003600:	8a7a      	ldrh	r2, [r7, #18]
 8003602:	4413      	add	r3, r2
 8003604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003606:	4413      	add	r3, r2
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c

	font_col = channel_colour[I2+1];
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <display_usage+0x470>)
 800360c:	889b      	ldrh	r3, [r3, #4]
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf(str,sizeof(str),"%4.1f", i_filtered[I2]);
 8003610:	4b2e      	ldr	r3, [pc, #184]	; (80036cc <display_usage+0x474>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4618      	mov	r0, r3
 8003616:	f7fc ffb7 	bl	8000588 <__aeabi_f2d>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	e9cd 2300 	strd	r2, r3, [sp]
 8003622:	4a2b      	ldr	r2, [pc, #172]	; (80036d0 <display_usage+0x478>)
 8003624:	2120      	movs	r1, #32
 8003626:	4827      	ldr	r0, [pc, #156]	; (80036c4 <display_usage+0x46c>)
 8003628:	f00b f90a 	bl	800e840 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 800362c:	8a3b      	ldrh	r3, [r7, #16]
 800362e:	461a      	mov	r2, r3
 8003630:	0052      	lsls	r2, r2, #1
 8003632:	4413      	add	r3, r2
 8003634:	b29a      	uxth	r2, r3
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	b29b      	uxth	r3, r3
 800363a:	4413      	add	r3, r2
 800363c:	b29c      	uxth	r4, r3
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	b29d      	uxth	r5, r3
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	b29b      	uxth	r3, r3
 8003646:	2200      	movs	r2, #0
 8003648:	9204      	str	r2, [sp, #16]
 800364a:	9303      	str	r3, [sp, #12]
 800364c:	2301      	movs	r3, #1
 800364e:	9302      	str	r3, [sp, #8]
 8003650:	466a      	mov	r2, sp
 8003652:	f107 0310 	add.w	r3, r7, #16
 8003656:	e893 0003 	ldmia.w	r3, {r0, r1}
 800365a:	e882 0003 	stmia.w	r2, {r0, r1}
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <display_usage+0x46c>)
 8003662:	4629      	mov	r1, r5
 8003664:	4620      	mov	r0, r4
 8003666:	f004 f9d3 	bl	8007a10 <Displ_WString>
	ypos += line_space + font.Height;
 800366a:	8a7b      	ldrh	r3, [r7, #18]
 800366c:	461a      	mov	r2, r3
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003674:	4413      	add	r3, r2
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", va_filtered[I2]);
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <display_usage+0x47c>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4618      	mov	r0, r3
 800367e:	f7fc ff83 	bl	8000588 <__aeabi_f2d>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	e9cd 2300 	strd	r2, r3, [sp]
 800368a:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <display_usage+0x480>)
 800368c:	2120      	movs	r1, #32
 800368e:	480d      	ldr	r0, [pc, #52]	; (80036c4 <display_usage+0x46c>)
 8003690:	f00b f8d6 	bl	800e840 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	b29c      	uxth	r4, r3
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	b29d      	uxth	r5, r3
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2200      	movs	r2, #0
 80036a2:	9204      	str	r2, [sp, #16]
 80036a4:	9303      	str	r3, [sp, #12]
 80036a6:	2301      	movs	r3, #1
 80036a8:	9302      	str	r3, [sp, #8]
 80036aa:	466a      	mov	r2, sp
 80036ac:	f107 0310 	add.w	r3, r7, #16
 80036b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036b4:	e882 0003 	stmia.w	r2, {r0, r1}
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	e015      	b.n	80036e8 <display_usage+0x490>
 80036bc:	20000498 	.word	0x20000498
 80036c0:	08012038 	.word	0x08012038
 80036c4:	20002150 	.word	0x20002150
 80036c8:	20000000 	.word	0x20000000
 80036cc:	2000049c 	.word	0x2000049c
 80036d0:	08012040 	.word	0x08012040
 80036d4:	200004a8 	.word	0x200004a8
 80036d8:	08012048 	.word	0x08012048
 80036dc:	200004b4 	.word	0x200004b4
 80036e0:	200004c0 	.word	0x200004c0
 80036e4:	08012050 	.word	0x08012050
 80036e8:	4a9b      	ldr	r2, [pc, #620]	; (8003958 <display_usage+0x700>)
 80036ea:	4629      	mov	r1, r5
 80036ec:	4620      	mov	r0, r4
 80036ee:	f004 f98f 	bl	8007a10 <Displ_WString>
	ypos += line_space + font.Height;
 80036f2:	8a7b      	ldrh	r3, [r7, #18]
 80036f4:	461a      	mov	r2, r3
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fc:	4413      	add	r3, r2
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", w_filtered[I2]);
 8003700:	4b96      	ldr	r3, [pc, #600]	; (800395c <display_usage+0x704>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fc ff3f 	bl	8000588 <__aeabi_f2d>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	e9cd 2300 	strd	r2, r3, [sp]
 8003712:	4a93      	ldr	r2, [pc, #588]	; (8003960 <display_usage+0x708>)
 8003714:	2120      	movs	r1, #32
 8003716:	4890      	ldr	r0, [pc, #576]	; (8003958 <display_usage+0x700>)
 8003718:	f00b f892 	bl	800e840 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	b29c      	uxth	r4, r3
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003722:	b29d      	uxth	r5, r3
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	b29b      	uxth	r3, r3
 8003728:	2200      	movs	r2, #0
 800372a:	9204      	str	r2, [sp, #16]
 800372c:	9303      	str	r3, [sp, #12]
 800372e:	2301      	movs	r3, #1
 8003730:	9302      	str	r3, [sp, #8]
 8003732:	466a      	mov	r2, sp
 8003734:	f107 0310 	add.w	r3, r7, #16
 8003738:	e893 0003 	ldmia.w	r3, {r0, r1}
 800373c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a85      	ldr	r2, [pc, #532]	; (8003958 <display_usage+0x700>)
 8003744:	4629      	mov	r1, r5
 8003746:	4620      	mov	r0, r4
 8003748:	f004 f962 	bl	8007a10 <Displ_WString>
	ypos += line_space + font.Height;
 800374c:	8a7b      	ldrh	r3, [r7, #18]
 800374e:	461a      	mov	r2, r3
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	4413      	add	r3, r2
 8003754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003756:	4413      	add	r3, r2
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%4.2f", fabs(pf_filtered[I2]) );
 800375a:	4b82      	ldr	r3, [pc, #520]	; (8003964 <display_usage+0x70c>)
 800375c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003760:	eef0 7ae7 	vabs.f32	s15, s15
 8003764:	ee17 0a90 	vmov	r0, s15
 8003768:	f7fc ff0e 	bl	8000588 <__aeabi_f2d>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	e9cd 2300 	strd	r2, r3, [sp]
 8003774:	4a7c      	ldr	r2, [pc, #496]	; (8003968 <display_usage+0x710>)
 8003776:	2120      	movs	r1, #32
 8003778:	4877      	ldr	r0, [pc, #476]	; (8003958 <display_usage+0x700>)
 800377a:	f00b f861 	bl	800e840 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 800377e:	8a3b      	ldrh	r3, [r7, #16]
 8003780:	461a      	mov	r2, r3
 8003782:	0052      	lsls	r2, r2, #1
 8003784:	4413      	add	r3, r2
 8003786:	b29a      	uxth	r2, r3
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	b29b      	uxth	r3, r3
 800378c:	4413      	add	r3, r2
 800378e:	b29c      	uxth	r4, r3
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	b29d      	uxth	r5, r3
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	b29b      	uxth	r3, r3
 8003798:	2200      	movs	r2, #0
 800379a:	9204      	str	r2, [sp, #16]
 800379c:	9303      	str	r3, [sp, #12]
 800379e:	2301      	movs	r3, #1
 80037a0:	9302      	str	r3, [sp, #8]
 80037a2:	466a      	mov	r2, sp
 80037a4:	f107 0310 	add.w	r3, r7, #16
 80037a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4a69      	ldr	r2, [pc, #420]	; (8003958 <display_usage+0x700>)
 80037b4:	4629      	mov	r1, r5
 80037b6:	4620      	mov	r0, r4
 80037b8:	f004 f92a 	bl	8007a10 <Displ_WString>
	ypos += section_space+line_space + font.Height;
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4413      	add	r3, r2
 80037c2:	8a7a      	ldrh	r2, [r7, #18]
 80037c4:	4413      	add	r3, r2
 80037c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c8:	4413      	add	r3, r2
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c

	font_col = channel_colour[I3+1];
 80037cc:	4b67      	ldr	r3, [pc, #412]	; (800396c <display_usage+0x714>)
 80037ce:	88db      	ldrh	r3, [r3, #6]
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf(str,sizeof(str),"%4.1f", i_filtered[I3]);
 80037d2:	4b67      	ldr	r3, [pc, #412]	; (8003970 <display_usage+0x718>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc fed6 	bl	8000588 <__aeabi_f2d>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	e9cd 2300 	strd	r2, r3, [sp]
 80037e4:	4a63      	ldr	r2, [pc, #396]	; (8003974 <display_usage+0x71c>)
 80037e6:	2120      	movs	r1, #32
 80037e8:	485b      	ldr	r0, [pc, #364]	; (8003958 <display_usage+0x700>)
 80037ea:	f00b f829 	bl	800e840 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 80037ee:	8a3b      	ldrh	r3, [r7, #16]
 80037f0:	461a      	mov	r2, r3
 80037f2:	0052      	lsls	r2, r2, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	b29c      	uxth	r4, r3
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	b29d      	uxth	r5, r3
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	b29b      	uxth	r3, r3
 8003808:	2200      	movs	r2, #0
 800380a:	9204      	str	r2, [sp, #16]
 800380c:	9303      	str	r3, [sp, #12]
 800380e:	2301      	movs	r3, #1
 8003810:	9302      	str	r3, [sp, #8]
 8003812:	466a      	mov	r2, sp
 8003814:	f107 0310 	add.w	r3, r7, #16
 8003818:	e893 0003 	ldmia.w	r3, {r0, r1}
 800381c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a4d      	ldr	r2, [pc, #308]	; (8003958 <display_usage+0x700>)
 8003824:	4629      	mov	r1, r5
 8003826:	4620      	mov	r0, r4
 8003828:	f004 f8f2 	bl	8007a10 <Displ_WString>
	ypos += line_space + font.Height;
 800382c:	8a7b      	ldrh	r3, [r7, #18]
 800382e:	461a      	mov	r2, r3
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	4413      	add	r3, r2
 8003834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003836:	4413      	add	r3, r2
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", va_filtered[I3]);
 800383a:	4b4f      	ldr	r3, [pc, #316]	; (8003978 <display_usage+0x720>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fc fea2 	bl	8000588 <__aeabi_f2d>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	e9cd 2300 	strd	r2, r3, [sp]
 800384c:	4a44      	ldr	r2, [pc, #272]	; (8003960 <display_usage+0x708>)
 800384e:	2120      	movs	r1, #32
 8003850:	4841      	ldr	r0, [pc, #260]	; (8003958 <display_usage+0x700>)
 8003852:	f00a fff5 	bl	800e840 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	b29c      	uxth	r4, r3
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	b29d      	uxth	r5, r3
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	b29b      	uxth	r3, r3
 8003862:	2200      	movs	r2, #0
 8003864:	9204      	str	r2, [sp, #16]
 8003866:	9303      	str	r3, [sp, #12]
 8003868:	2301      	movs	r3, #1
 800386a:	9302      	str	r3, [sp, #8]
 800386c:	466a      	mov	r2, sp
 800386e:	f107 0310 	add.w	r3, r7, #16
 8003872:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003876:	e882 0003 	stmia.w	r2, {r0, r1}
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a36      	ldr	r2, [pc, #216]	; (8003958 <display_usage+0x700>)
 800387e:	4629      	mov	r1, r5
 8003880:	4620      	mov	r0, r4
 8003882:	f004 f8c5 	bl	8007a10 <Displ_WString>
	ypos += line_space + font.Height;
 8003886:	8a7b      	ldrh	r3, [r7, #18]
 8003888:	461a      	mov	r2, r3
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003890:	4413      	add	r3, r2
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%7.1f", w_filtered[I3]);
 8003894:	4b31      	ldr	r3, [pc, #196]	; (800395c <display_usage+0x704>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4618      	mov	r0, r3
 800389a:	f7fc fe75 	bl	8000588 <__aeabi_f2d>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	e9cd 2300 	strd	r2, r3, [sp]
 80038a6:	4a2e      	ldr	r2, [pc, #184]	; (8003960 <display_usage+0x708>)
 80038a8:	2120      	movs	r1, #32
 80038aa:	482b      	ldr	r0, [pc, #172]	; (8003958 <display_usage+0x700>)
 80038ac:	f00a ffc8 	bl	800e840 <sniprintf>
	Displ_WString(xpos, ypos, str , font, 1,  font_col, BLACK);
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	b29c      	uxth	r4, r3
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b6:	b29d      	uxth	r5, r3
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2200      	movs	r2, #0
 80038be:	9204      	str	r2, [sp, #16]
 80038c0:	9303      	str	r3, [sp, #12]
 80038c2:	2301      	movs	r3, #1
 80038c4:	9302      	str	r3, [sp, #8]
 80038c6:	466a      	mov	r2, sp
 80038c8:	f107 0310 	add.w	r3, r7, #16
 80038cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038d0:	e882 0003 	stmia.w	r2, {r0, r1}
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a20      	ldr	r2, [pc, #128]	; (8003958 <display_usage+0x700>)
 80038d8:	4629      	mov	r1, r5
 80038da:	4620      	mov	r0, r4
 80038dc:	f004 f898 	bl	8007a10 <Displ_WString>
	ypos += line_space + font.Height;
 80038e0:	8a7b      	ldrh	r3, [r7, #18]
 80038e2:	461a      	mov	r2, r3
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ea:	4413      	add	r3, r2
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	snprintf(str,sizeof(str),"%4.2f", fabs(pf_filtered[I3]) );
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <display_usage+0x70c>)
 80038f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80038f4:	eef0 7ae7 	vabs.f32	s15, s15
 80038f8:	ee17 0a90 	vmov	r0, s15
 80038fc:	f7fc fe44 	bl	8000588 <__aeabi_f2d>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	e9cd 2300 	strd	r2, r3, [sp]
 8003908:	4a17      	ldr	r2, [pc, #92]	; (8003968 <display_usage+0x710>)
 800390a:	2120      	movs	r1, #32
 800390c:	4812      	ldr	r0, [pc, #72]	; (8003958 <display_usage+0x700>)
 800390e:	f00a ff97 	bl	800e840 <sniprintf>
	Displ_WString(xpos+3*font.Width, ypos, str , font, 1,  font_col, BLACK);
 8003912:	8a3b      	ldrh	r3, [r7, #16]
 8003914:	461a      	mov	r2, r3
 8003916:	0052      	lsls	r2, r2, #1
 8003918:	4413      	add	r3, r2
 800391a:	b29a      	uxth	r2, r3
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	b29b      	uxth	r3, r3
 8003920:	4413      	add	r3, r2
 8003922:	b29c      	uxth	r4, r3
 8003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003926:	b29d      	uxth	r5, r3
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	b29b      	uxth	r3, r3
 800392c:	2200      	movs	r2, #0
 800392e:	9204      	str	r2, [sp, #16]
 8003930:	9303      	str	r3, [sp, #12]
 8003932:	2301      	movs	r3, #1
 8003934:	9302      	str	r3, [sp, #8]
 8003936:	466a      	mov	r2, sp
 8003938:	f107 0310 	add.w	r3, r7, #16
 800393c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003940:	e882 0003 	stmia.w	r2, {r0, r1}
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4a04      	ldr	r2, [pc, #16]	; (8003958 <display_usage+0x700>)
 8003948:	4629      	mov	r1, r5
 800394a:	4620      	mov	r0, r4
 800394c:	f004 f860 	bl	8007a10 <Displ_WString>
	//ypos += section_space+line_space + font.Height;


}
 8003950:	3730      	adds	r7, #48	; 0x30
 8003952:	46bd      	mov	sp, r7
 8003954:	bdb0      	pop	{r4, r5, r7, pc}
 8003956:	bf00      	nop
 8003958:	20002150 	.word	0x20002150
 800395c:	200004b4 	.word	0x200004b4
 8003960:	08012048 	.word	0x08012048
 8003964:	200004c0 	.word	0x200004c0
 8003968:	08012050 	.word	0x08012050
 800396c:	20000000 	.word	0x20000000
 8003970:	2000049c 	.word	0x2000049c
 8003974:	08012040 	.word	0x08012040
 8003978:	200004a8 	.word	0x200004a8

0800397c <display_debug>:

void display_debug() {
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af06      	add	r7, sp, #24
	int font_col = WHITE;
 8003982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003986:	607b      	str	r3, [r7, #4]
#ifdef DEBUG
	snprintf(str,sizeof(str),"Calc: %lums", calc_ticks);
 8003988:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <display_debug+0x4c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0f      	ldr	r2, [pc, #60]	; (80039cc <display_debug+0x50>)
 800398e:	2120      	movs	r1, #32
 8003990:	480f      	ldr	r0, [pc, #60]	; (80039d0 <display_debug+0x54>)
 8003992:	f00a ff55 	bl	800e840 <sniprintf>
	Displ_WString(20, 20, str , Font24, 1,  font_col, BLACK);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	b29a      	uxth	r2, r3
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <display_debug+0x58>)
 800399c:	2100      	movs	r1, #0
 800399e:	9104      	str	r1, [sp, #16]
 80039a0:	9203      	str	r2, [sp, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	9202      	str	r2, [sp, #8]
 80039a6:	466c      	mov	r4, sp
 80039a8:	1d1a      	adds	r2, r3, #4
 80039aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a06      	ldr	r2, [pc, #24]	; (80039d0 <display_debug+0x54>)
 80039b6:	2114      	movs	r1, #20
 80039b8:	2014      	movs	r0, #20
 80039ba:	f004 f829 	bl	8007a10 <Displ_WString>
#endif
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd90      	pop	{r4, r7, pc}
 80039c6:	bf00      	nop
 80039c8:	2000825c 	.word	0x2000825c
 80039cc:	08012088 	.word	0x08012088
 80039d0:	20002150 	.word	0x20002150
 80039d4:	20000018 	.word	0x20000018

080039d8 <display_update_meter>:

void display_update_meter(uint8_t screen) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	71fb      	strb	r3, [r7, #7]

	// detect screen number change
	if (screen != last_screen) {
 80039e2:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <display_update_meter+0xb0>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	79fa      	ldrb	r2, [r7, #7]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d031      	beq.n	8003a50 <display_update_meter+0x78>
		switch(screen) {
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d82a      	bhi.n	8003a4a <display_update_meter+0x72>
 80039f4:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <display_update_meter+0x24>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a11 	.word	0x08003a11
 8003a00:	08003a1d 	.word	0x08003a1d
 8003a04:	08003a29 	.word	0x08003a29
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a43 	.word	0x08003a43
		case 1:
			//meter_readings_invalid = 1;
			display_channel = I1;
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <display_update_meter+0xb4>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	701a      	strb	r2, [r3, #0]
			display_meter_mask();
 8003a16:	f000 f847 	bl	8003aa8 <display_meter_mask>
			break;
 8003a1a:	e016      	b.n	8003a4a <display_update_meter+0x72>
		case 2:
			//meter_readings_invalid = 1;
			display_channel = I2;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <display_update_meter+0xb4>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	701a      	strb	r2, [r3, #0]
			display_meter_mask();
 8003a22:	f000 f841 	bl	8003aa8 <display_meter_mask>
			break;
 8003a26:	e010      	b.n	8003a4a <display_update_meter+0x72>
		case 3:
			//meter_readings_invalid = 1;
			display_channel = I3;
 8003a28:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <display_update_meter+0xb4>)
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	701a      	strb	r2, [r3, #0]
			display_meter_mask();
 8003a2e:	f000 f83b 	bl	8003aa8 <display_meter_mask>
			break;
 8003a32:	e00a      	b.n	8003a4a <display_update_meter+0x72>
		case 4:
			Displ_CLS(BLACK);
 8003a34:	2000      	movs	r0, #0
 8003a36:	f003 f879 	bl	8006b2c <Displ_CLS>
			display_usage(1);
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	f7ff fc0c 	bl	8003258 <display_usage>
			break;
 8003a40:	e003      	b.n	8003a4a <display_update_meter+0x72>
		case 5:
			Displ_CLS(BLACK);
 8003a42:	2000      	movs	r0, #0
 8003a44:	f003 f872 	bl	8006b2c <Displ_CLS>
			break;
 8003a48:	bf00      	nop
		}
		last_screen = screen;
 8003a4a:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <display_update_meter+0xb0>)
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	7013      	strb	r3, [r2, #0]
	}

	// update screen contents
	switch(screen) {
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d010      	beq.n	8003a78 <display_update_meter+0xa0>
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	dc11      	bgt.n	8003a7e <display_update_meter+0xa6>
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	dc02      	bgt.n	8003a64 <display_update_meter+0x8c>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	dc03      	bgt.n	8003a6a <display_update_meter+0x92>
		break;
	case 5:
		display_debug();
		break;
	}
}
 8003a62:	e00c      	b.n	8003a7e <display_update_meter+0xa6>
	switch(screen) {
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d003      	beq.n	8003a70 <display_update_meter+0x98>
}
 8003a68:	e009      	b.n	8003a7e <display_update_meter+0xa6>
		display_channel_detail();
 8003a6a:	f7ff fa9d 	bl	8002fa8 <display_channel_detail>
		break;
 8003a6e:	e006      	b.n	8003a7e <display_update_meter+0xa6>
		display_usage(0);
 8003a70:	2000      	movs	r0, #0
 8003a72:	f7ff fbf1 	bl	8003258 <display_usage>
		break;
 8003a76:	e002      	b.n	8003a7e <display_update_meter+0xa6>
		display_debug();
 8003a78:	f7ff ff80 	bl	800397c <display_debug>
		break;
 8003a7c:	bf00      	nop
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20002170 	.word	0x20002170
 8003a8c:	20000501 	.word	0x20000501

08003a90 <display_update_mask>:

/*
 * force mask update on next meter update
 */
void display_update_mask(void) {
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
	last_screen = 0;
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <display_update_mask+0x14>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	20002170 	.word	0x20002170

08003aa8 <display_meter_mask>:

/*
 * Draw the screen mask for meter main screen
 */
void display_meter_mask() {
 8003aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aaa:	b08b      	sub	sp, #44	; 0x2c
 8003aac:	af06      	add	r7, sp, #24
	uint16_t ypos = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	81fb      	strh	r3, [r7, #14]
	uint16_t box_height = 40;
 8003ab2:	2328      	movs	r3, #40	; 0x28
 8003ab4:	81bb      	strh	r3, [r7, #12]
	uint16_t border_col = GREEN;
 8003ab6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003aba:	817b      	strh	r3, [r7, #10]
	uint16_t font_col = GREEN;
 8003abc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ac0:	813b      	strh	r3, [r7, #8]
	uint16_t back_col = BLACK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	80fb      	strh	r3, [r7, #6]
	Displ_CLS(back_col);
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f003 f82f 	bl	8006b2c <Displ_CLS>
	// V + A
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8003ace:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003ad2:	4ba6      	ldr	r3, [pc, #664]	; (8003d6c <display_meter_mask+0x2c4>)
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	b21a      	sxth	r2, r3
 8003adc:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003ae0:	897b      	ldrh	r3, [r7, #10]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f003 fa09 	bl	8006efe <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8003aec:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003af0:	89fa      	ldrh	r2, [r7, #14]
 8003af2:	89bb      	ldrh	r3, [r7, #12]
 8003af4:	4413      	add	r3, r2
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	b21a      	sxth	r2, r3
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	4613      	mov	r3, r2
 8003b00:	2200      	movs	r2, #0
 8003b02:	2000      	movs	r0, #0
 8003b04:	f003 f9fb 	bl	8006efe <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8003b08:	89fa      	ldrh	r2, [r7, #14]
 8003b0a:	89bb      	ldrh	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	b219      	sxth	r1, r3
 8003b12:	4b96      	ldr	r3, [pc, #600]	; (8003d6c <display_meter_mask+0x2c4>)
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	b218      	sxth	r0, r3
 8003b1c:	89fa      	ldrh	r2, [r7, #14]
 8003b1e:	89bb      	ldrh	r3, [r7, #12]
 8003b20:	4413      	add	r3, r2
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	b21a      	sxth	r2, r3
 8003b26:	897b      	ldrh	r3, [r7, #10]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f003 f9e5 	bl	8006efe <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, 0, border_col);
 8003b34:	4b8d      	ldr	r3, [pc, #564]	; (8003d6c <display_meter_mask+0x2c4>)
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	b218      	sxth	r0, r3
 8003b3e:	89fa      	ldrh	r2, [r7, #14]
 8003b40:	89bb      	ldrh	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	b219      	sxth	r1, r3
 8003b48:	4b88      	ldr	r3, [pc, #544]	; (8003d6c <display_meter_mask+0x2c4>)
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	b21a      	sxth	r2, r3
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	2300      	movs	r3, #0
 8003b58:	f003 f9d1 	bl	8006efe <Displ_Line>
	Displ_WChar(75, ypos+9, 'V', Font24, 1, font_col, back_col);
 8003b5c:	89fb      	ldrh	r3, [r7, #14]
 8003b5e:	3309      	adds	r3, #9
 8003b60:	b29c      	uxth	r4, r3
 8003b62:	4b83      	ldr	r3, [pc, #524]	; (8003d70 <display_meter_mask+0x2c8>)
 8003b64:	88fa      	ldrh	r2, [r7, #6]
 8003b66:	9204      	str	r2, [sp, #16]
 8003b68:	893a      	ldrh	r2, [r7, #8]
 8003b6a:	9203      	str	r2, [sp, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	9202      	str	r2, [sp, #8]
 8003b70:	466d      	mov	r5, sp
 8003b72:	1d1a      	adds	r2, r3, #4
 8003b74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b78:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2256      	movs	r2, #86	; 0x56
 8003b80:	4621      	mov	r1, r4
 8003b82:	204b      	movs	r0, #75	; 0x4b
 8003b84:	f003 fcc6 	bl	8007514 <Displ_WChar>
	font_col = channel_colour[display_channel+1];
 8003b88:	4b7a      	ldr	r3, [pc, #488]	; (8003d74 <display_meter_mask+0x2cc>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	4a7a      	ldr	r2, [pc, #488]	; (8003d78 <display_meter_mask+0x2d0>)
 8003b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b94:	813b      	strh	r3, [r7, #8]
	Displ_WChar(display_x-30, 9, 'A', Font24, 1, font_col, back_col);
 8003b96:	4b75      	ldr	r3, [pc, #468]	; (8003d6c <display_meter_mask+0x2c4>)
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	3b1e      	subs	r3, #30
 8003b9c:	b29c      	uxth	r4, r3
 8003b9e:	4b74      	ldr	r3, [pc, #464]	; (8003d70 <display_meter_mask+0x2c8>)
 8003ba0:	88fa      	ldrh	r2, [r7, #6]
 8003ba2:	9204      	str	r2, [sp, #16]
 8003ba4:	893a      	ldrh	r2, [r7, #8]
 8003ba6:	9203      	str	r2, [sp, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	9202      	str	r2, [sp, #8]
 8003bac:	466d      	mov	r5, sp
 8003bae:	1d1a      	adds	r2, r3, #4
 8003bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2241      	movs	r2, #65	; 0x41
 8003bbc:	2109      	movs	r1, #9
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f003 fca8 	bl	8007514 <Displ_WChar>
	// VA
	ypos += box_height+1;
 8003bc4:	89ba      	ldrh	r2, [r7, #12]
 8003bc6:	89fb      	ldrh	r3, [r7, #14]
 8003bc8:	4413      	add	r3, r2
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	81fb      	strh	r3, [r7, #14]
	border_col = YELLOW;
 8003bd0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003bd4:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8003bd6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003bda:	4b64      	ldr	r3, [pc, #400]	; (8003d6c <display_meter_mask+0x2c4>)
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b21a      	sxth	r2, r3
 8003be4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003be8:	897b      	ldrh	r3, [r7, #10]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	4603      	mov	r3, r0
 8003bee:	2000      	movs	r0, #0
 8003bf0:	f003 f985 	bl	8006efe <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8003bf4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003bf8:	89fa      	ldrh	r2, [r7, #14]
 8003bfa:	89bb      	ldrh	r3, [r7, #12]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	b21a      	sxth	r2, r3
 8003c02:	897b      	ldrh	r3, [r7, #10]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	4613      	mov	r3, r2
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f003 f977 	bl	8006efe <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8003c10:	89fa      	ldrh	r2, [r7, #14]
 8003c12:	89bb      	ldrh	r3, [r7, #12]
 8003c14:	4413      	add	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	b219      	sxth	r1, r3
 8003c1a:	4b54      	ldr	r3, [pc, #336]	; (8003d6c <display_meter_mask+0x2c4>)
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	b218      	sxth	r0, r3
 8003c24:	89fa      	ldrh	r2, [r7, #14]
 8003c26:	89bb      	ldrh	r3, [r7, #12]
 8003c28:	4413      	add	r3, r2
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	b21a      	sxth	r2, r3
 8003c2e:	897b      	ldrh	r3, [r7, #10]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	4613      	mov	r3, r2
 8003c34:	4602      	mov	r2, r0
 8003c36:	2000      	movs	r0, #0
 8003c38:	f003 f961 	bl	8006efe <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8003c3c:	4b4b      	ldr	r3, [pc, #300]	; (8003d6c <display_meter_mask+0x2c4>)
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	b218      	sxth	r0, r3
 8003c46:	89fa      	ldrh	r2, [r7, #14]
 8003c48:	89bb      	ldrh	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	b219      	sxth	r1, r3
 8003c50:	4b46      	ldr	r3, [pc, #280]	; (8003d6c <display_meter_mask+0x2c4>)
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	b21a      	sxth	r2, r3
 8003c5a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003c5e:	897b      	ldrh	r3, [r7, #10]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	4623      	mov	r3, r4
 8003c64:	f003 f94b 	bl	8006efe <Displ_Line>
	Displ_WString(display_x-80, ypos+9, "VA", Font24, 1, font_col, back_col);
 8003c68:	4b40      	ldr	r3, [pc, #256]	; (8003d6c <display_meter_mask+0x2c4>)
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	3b50      	subs	r3, #80	; 0x50
 8003c6e:	b29c      	uxth	r4, r3
 8003c70:	89fb      	ldrh	r3, [r7, #14]
 8003c72:	3309      	adds	r3, #9
 8003c74:	b29d      	uxth	r5, r3
 8003c76:	4b3e      	ldr	r3, [pc, #248]	; (8003d70 <display_meter_mask+0x2c8>)
 8003c78:	88fa      	ldrh	r2, [r7, #6]
 8003c7a:	9204      	str	r2, [sp, #16]
 8003c7c:	893a      	ldrh	r2, [r7, #8]
 8003c7e:	9203      	str	r2, [sp, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	9202      	str	r2, [sp, #8]
 8003c84:	466e      	mov	r6, sp
 8003c86:	1d1a      	adds	r2, r3, #4
 8003c88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c8c:	e886 0003 	stmia.w	r6, {r0, r1}
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a3a      	ldr	r2, [pc, #232]	; (8003d7c <display_meter_mask+0x2d4>)
 8003c94:	4629      	mov	r1, r5
 8003c96:	4620      	mov	r0, r4
 8003c98:	f003 feba 	bl	8007a10 <Displ_WString>
	// W
	ypos += box_height+1;
 8003c9c:	89ba      	ldrh	r2, [r7, #12]
 8003c9e:	89fb      	ldrh	r3, [r7, #14]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	81fb      	strh	r3, [r7, #14]
	border_col = YELLOW;
 8003ca8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003cac:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8003cae:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003cb2:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <display_meter_mask+0x2c4>)
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	b21a      	sxth	r2, r3
 8003cbc:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003cc0:	897b      	ldrh	r3, [r7, #10]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	f003 f919 	bl	8006efe <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8003ccc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003cd0:	89fa      	ldrh	r2, [r7, #14]
 8003cd2:	89bb      	ldrh	r3, [r7, #12]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	b21a      	sxth	r2, r3
 8003cda:	897b      	ldrh	r3, [r7, #10]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f003 f90b 	bl	8006efe <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8003ce8:	89fa      	ldrh	r2, [r7, #14]
 8003cea:	89bb      	ldrh	r3, [r7, #12]
 8003cec:	4413      	add	r3, r2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	b219      	sxth	r1, r3
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <display_meter_mask+0x2c4>)
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	b218      	sxth	r0, r3
 8003cfc:	89fa      	ldrh	r2, [r7, #14]
 8003cfe:	89bb      	ldrh	r3, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	b21a      	sxth	r2, r3
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	2000      	movs	r0, #0
 8003d10:	f003 f8f5 	bl	8006efe <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8003d14:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <display_meter_mask+0x2c4>)
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	b218      	sxth	r0, r3
 8003d1e:	89fa      	ldrh	r2, [r7, #14]
 8003d20:	89bb      	ldrh	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	b219      	sxth	r1, r3
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <display_meter_mask+0x2c4>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	b21a      	sxth	r2, r3
 8003d32:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003d36:	897b      	ldrh	r3, [r7, #10]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	f003 f8df 	bl	8006efe <Displ_Line>
	Displ_WChar(display_x-80, ypos+9, 'W', Font24, 1, font_col, back_col);
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <display_meter_mask+0x2c4>)
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	3b50      	subs	r3, #80	; 0x50
 8003d46:	b29c      	uxth	r4, r3
 8003d48:	89fb      	ldrh	r3, [r7, #14]
 8003d4a:	3309      	adds	r3, #9
 8003d4c:	b29d      	uxth	r5, r3
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <display_meter_mask+0x2c8>)
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	9204      	str	r2, [sp, #16]
 8003d54:	893a      	ldrh	r2, [r7, #8]
 8003d56:	9203      	str	r2, [sp, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	9202      	str	r2, [sp, #8]
 8003d5c:	466e      	mov	r6, sp
 8003d5e:	1d1a      	adds	r2, r3, #4
 8003d60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d64:	e886 0003 	stmia.w	r6, {r0, r1}
 8003d68:	e00a      	b.n	8003d80 <display_meter_mask+0x2d8>
 8003d6a:	bf00      	nop
 8003d6c:	20002172 	.word	0x20002172
 8003d70:	20000018 	.word	0x20000018
 8003d74:	20000501 	.word	0x20000501
 8003d78:	20000000 	.word	0x20000000
 8003d7c:	0801207c 	.word	0x0801207c
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2257      	movs	r2, #87	; 0x57
 8003d84:	4629      	mov	r1, r5
 8003d86:	4620      	mov	r0, r4
 8003d88:	f003 fbc4 	bl	8007514 <Displ_WChar>

	// PF
	ypos += box_height+1;
 8003d8c:	89ba      	ldrh	r2, [r7, #12]
 8003d8e:	89fb      	ldrh	r3, [r7, #14]
 8003d90:	4413      	add	r3, r2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	81fb      	strh	r3, [r7, #14]
	border_col = WHITE;
 8003d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d9c:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8003d9e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003da2:	4b62      	ldr	r3, [pc, #392]	; (8003f2c <display_meter_mask+0x484>)
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	b21a      	sxth	r2, r3
 8003dac:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003db0:	897b      	ldrh	r3, [r7, #10]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	4603      	mov	r3, r0
 8003db6:	2000      	movs	r0, #0
 8003db8:	f003 f8a1 	bl	8006efe <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8003dbc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003dc0:	89fa      	ldrh	r2, [r7, #14]
 8003dc2:	89bb      	ldrh	r3, [r7, #12]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	b21a      	sxth	r2, r3
 8003dca:	897b      	ldrh	r3, [r7, #10]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	f003 f893 	bl	8006efe <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8003dd8:	89fa      	ldrh	r2, [r7, #14]
 8003dda:	89bb      	ldrh	r3, [r7, #12]
 8003ddc:	4413      	add	r3, r2
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	b219      	sxth	r1, r3
 8003de2:	4b52      	ldr	r3, [pc, #328]	; (8003f2c <display_meter_mask+0x484>)
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	b218      	sxth	r0, r3
 8003dec:	89fa      	ldrh	r2, [r7, #14]
 8003dee:	89bb      	ldrh	r3, [r7, #12]
 8003df0:	4413      	add	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	b21a      	sxth	r2, r3
 8003df6:	897b      	ldrh	r3, [r7, #10]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f003 f87d 	bl	8006efe <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8003e04:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <display_meter_mask+0x484>)
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	b218      	sxth	r0, r3
 8003e0e:	89fa      	ldrh	r2, [r7, #14]
 8003e10:	89bb      	ldrh	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	b219      	sxth	r1, r3
 8003e18:	4b44      	ldr	r3, [pc, #272]	; (8003f2c <display_meter_mask+0x484>)
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	b21a      	sxth	r2, r3
 8003e22:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8003e26:	897b      	ldrh	r3, [r7, #10]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	f003 f867 	bl	8006efe <Displ_Line>
	Displ_WString(95, ypos+9, "PF", Font24, 1, font_col, back_col);
 8003e30:	89fb      	ldrh	r3, [r7, #14]
 8003e32:	3309      	adds	r3, #9
 8003e34:	b29c      	uxth	r4, r3
 8003e36:	4b3e      	ldr	r3, [pc, #248]	; (8003f30 <display_meter_mask+0x488>)
 8003e38:	88fa      	ldrh	r2, [r7, #6]
 8003e3a:	9204      	str	r2, [sp, #16]
 8003e3c:	893a      	ldrh	r2, [r7, #8]
 8003e3e:	9203      	str	r2, [sp, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	9202      	str	r2, [sp, #8]
 8003e44:	466d      	mov	r5, sp
 8003e46:	1d1a      	adds	r2, r3, #4
 8003e48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a38      	ldr	r2, [pc, #224]	; (8003f34 <display_meter_mask+0x48c>)
 8003e54:	4621      	mov	r1, r4
 8003e56:	205f      	movs	r0, #95	; 0x5f
 8003e58:	f003 fdda 	bl	8007a10 <Displ_WString>
	// Displ_WChar(display_x-22, 130, 0x60, Font30, 1, font_col, back_col);		// Degree sign

	// Graph Box
	ypos += box_height+1;
 8003e5c:	89ba      	ldrh	r2, [r7, #12]
 8003e5e:	89fb      	ldrh	r3, [r7, #14]
 8003e60:	4413      	add	r3, r2
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3301      	adds	r3, #1
 8003e66:	81fb      	strh	r3, [r7, #14]
	border_col = BLUE;
 8003e68:	231f      	movs	r3, #31
 8003e6a:	817b      	strh	r3, [r7, #10]
	curve_y_size = display_y-ypos-graph_border*2;
 8003e6c:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <display_meter_mask+0x490>)
 8003e6e:	881a      	ldrh	r2, [r3, #0]
 8003e70:	89fb      	ldrh	r3, [r7, #14]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	2302      	movs	r3, #2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	4b2e      	ldr	r3, [pc, #184]	; (8003f3c <display_meter_mask+0x494>)
 8003e82:	801a      	strh	r2, [r3, #0]
	curve_y_zero = ypos + curve_y_size / 2 + graph_border;
 8003e84:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <display_meter_mask+0x494>)
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	89fb      	ldrh	r3, [r7, #14]
 8003e8e:	4413      	add	r3, r2
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2202      	movs	r2, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	4b29      	ldr	r3, [pc, #164]	; (8003f40 <display_meter_mask+0x498>)
 8003e9a:	801a      	strh	r2, [r3, #0]
	Displ_Border(0,ypos,display_x,display_y-ypos, graph_border, border_col);
 8003e9c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003ea0:	4b22      	ldr	r3, [pc, #136]	; (8003f2c <display_meter_mask+0x484>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b218      	sxth	r0, r3
 8003ea6:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <display_meter_mask+0x490>)
 8003ea8:	881a      	ldrh	r2, [r3, #0]
 8003eaa:	89fb      	ldrh	r3, [r7, #14]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	b21c      	sxth	r4, r3
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	b21b      	sxth	r3, r3
 8003eb6:	897a      	ldrh	r2, [r7, #10]
 8003eb8:	9201      	str	r2, [sp, #4]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	4623      	mov	r3, r4
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f003 f94d 	bl	8007160 <Displ_Border>
	Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+210, curve_y_zero, WHITE);
 8003ec6:	4b1f      	ldr	r3, [pc, #124]	; (8003f44 <display_meter_mask+0x49c>)
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b218      	sxth	r0, r3
 8003ecc:	4b1c      	ldr	r3, [pc, #112]	; (8003f40 <display_meter_mask+0x498>)
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b219      	sxth	r1, r3
 8003ed2:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <display_meter_mask+0x49c>)
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	33d2      	adds	r3, #210	; 0xd2
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	b21a      	sxth	r2, r3
 8003edc:	4b18      	ldr	r3, [pc, #96]	; (8003f40 <display_meter_mask+0x498>)
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b21b      	sxth	r3, r3
 8003ee2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003ee6:	9400      	str	r4, [sp, #0]
 8003ee8:	f003 f809 	bl	8006efe <Displ_Line>

	// Channel
	snprintf(str,sizeof(str),"I%d", display_channel+1 );
 8003eec:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <display_meter_mask+0x4a0>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	4a16      	ldr	r2, [pc, #88]	; (8003f4c <display_meter_mask+0x4a4>)
 8003ef4:	2120      	movs	r1, #32
 8003ef6:	4816      	ldr	r0, [pc, #88]	; (8003f50 <display_meter_mask+0x4a8>)
 8003ef8:	f00a fca2 	bl	800e840 <sniprintf>
	Displ_WString(190, 133, str , Font24, 1, font_col, back_col);
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <display_meter_mask+0x488>)
 8003efe:	88fa      	ldrh	r2, [r7, #6]
 8003f00:	9204      	str	r2, [sp, #16]
 8003f02:	893a      	ldrh	r2, [r7, #8]
 8003f04:	9203      	str	r2, [sp, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	9202      	str	r2, [sp, #8]
 8003f0a:	466c      	mov	r4, sp
 8003f0c:	1d1a      	adds	r2, r3, #4
 8003f0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f12:	e884 0003 	stmia.w	r4, {r0, r1}
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a0d      	ldr	r2, [pc, #52]	; (8003f50 <display_meter_mask+0x4a8>)
 8003f1a:	2185      	movs	r1, #133	; 0x85
 8003f1c:	20be      	movs	r0, #190	; 0xbe
 8003f1e:	f003 fd77 	bl	8007a10 <Displ_WString>
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20002172 	.word	0x20002172
 8003f30:	20000018 	.word	0x20000018
 8003f34:	08012084 	.word	0x08012084
 8003f38:	20002174 	.word	0x20002174
 8003f3c:	20000008 	.word	0x20000008
 8003f40:	2000084c 	.word	0x2000084c
 8003f44:	2000000a 	.word	0x2000000a
 8003f48:	20000501 	.word	0x20000501
 8003f4c:	08012094 	.word	0x08012094
 8003f50:	20002150 	.word	0x20002150

08003f54 <display_align_curves>:

/*
 * @ brief       Aligns V + I curve to start at positive zero crossing and reduces it to one full cycle
 * @retval:      number of points in the aligned curve or -1 if alignment failed
 */
int display_align_curves() {
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
	int dest_idx = -1;
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f5e:	60fb      	str	r3, [r7, #12]
	int i, continue_at = -1;
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f64:	603b      	str	r3, [r7, #0]
	uint8_t adc_channel;

	switch(display_channel) {
 8003f66:	4b53      	ldr	r3, [pc, #332]	; (80040b4 <display_align_curves+0x160>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d00c      	beq.n	8003f88 <display_align_curves+0x34>
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	dc0d      	bgt.n	8003f8e <display_align_curves+0x3a>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <display_align_curves+0x28>
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d003      	beq.n	8003f82 <display_align_curves+0x2e>
 8003f7a:	e008      	b.n	8003f8e <display_align_curves+0x3a>
	case I1:
		adc_channel = ADC_CH_I1;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	71fb      	strb	r3, [r7, #7]
		break;
 8003f80:	e007      	b.n	8003f92 <display_align_curves+0x3e>
	case I2:
		adc_channel = ADC_CH_I2;
 8003f82:	2302      	movs	r3, #2
 8003f84:	71fb      	strb	r3, [r7, #7]
		break;
 8003f86:	e004      	b.n	8003f92 <display_align_curves+0x3e>
	case I3:
		adc_channel = ADC_CH_I3;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	71fb      	strb	r3, [r7, #7]
		break;
 8003f8c:	e001      	b.n	8003f92 <display_align_curves+0x3e>
	default:
		adc_channel = ADC_CH_I1;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	71fb      	strb	r3, [r7, #7]
	}

	// if we don't have a zero crossing use the sample_buf curve entries
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8003f92:	4b49      	ldr	r3, [pc, #292]	; (80040b8 <display_align_curves+0x164>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	da29      	bge.n	8003fee <display_align_curves+0x9a>
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	e01f      	b.n	8003fe0 <display_align_curves+0x8c>
			aligned_curve[ADC_CH_V][i] = sample_buf[ADC_CH_V][i];
 8003fa0:	4a46      	ldr	r2, [pc, #280]	; (80040bc <display_align_curves+0x168>)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003fa8:	4a45      	ldr	r2, [pc, #276]	; (80040c0 <display_align_curves+0x16c>)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[adc_channel][i] = sample_buf[adc_channel][i];
 8003fb0:	79fa      	ldrb	r2, [r7, #7]
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	4841      	ldr	r0, [pc, #260]	; (80040bc <display_align_curves+0x168>)
 8003fb6:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8003fba:	fb02 f101 	mul.w	r1, r2, r1
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	440a      	add	r2, r1
 8003fc2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 8003fc6:	493e      	ldr	r1, [pc, #248]	; (80040c0 <display_align_curves+0x16c>)
 8003fc8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003fcc:	fb03 f202 	mul.w	r2, r3, r2
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8003fe6:	d3db      	bcc.n	8003fa0 <display_align_curves+0x4c>
		}
		return SAMPLE_BUF_SIZE;
 8003fe8:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8003fec:	e05b      	b.n	80040a6 <display_align_curves+0x152>
	}

	// start at zero crossing and use every reading up to the end of the sample buffer
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8003fee:	4b32      	ldr	r3, [pc, #200]	; (80040b8 <display_align_curves+0x164>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	e022      	b.n	800403c <display_align_curves+0xe8>
		dest_idx++;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8003ffc:	4a2f      	ldr	r2, [pc, #188]	; (80040bc <display_align_curves+0x168>)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004004:	4a2e      	ldr	r2, [pc, #184]	; (80040c0 <display_align_curves+0x16c>)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[adc_channel][dest_idx] = sample_buf[adc_channel][i];
 800400c:	79fa      	ldrb	r2, [r7, #7]
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	482a      	ldr	r0, [pc, #168]	; (80040bc <display_align_curves+0x168>)
 8004012:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8004016:	fb02 f101 	mul.w	r1, r2, r1
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	440a      	add	r2, r1
 800401e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 8004022:	4927      	ldr	r1, [pc, #156]	; (80040c0 <display_align_curves+0x16c>)
 8004024:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004028:	fb03 f202 	mul.w	r2, r3, r2
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	4602      	mov	r2, r0
 8004032:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	3301      	adds	r3, #1
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8004042:	d3d8      	bcc.n	8003ff6 <display_align_curves+0xa2>
	}

	continue_at = SAMPLE_BUF_OVERLAP;
 8004044:	2314      	movs	r3, #20
 8004046:	603b      	str	r3, [r7, #0]

	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	e022      	b.n	8004094 <display_align_curves+0x140>
		dest_idx++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3301      	adds	r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8004054:	4a19      	ldr	r2, [pc, #100]	; (80040bc <display_align_curves+0x168>)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800405c:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <display_align_curves+0x16c>)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[adc_channel][dest_idx] = sample_buf[adc_channel][i];
 8004064:	79fa      	ldrb	r2, [r7, #7]
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	4814      	ldr	r0, [pc, #80]	; (80040bc <display_align_curves+0x168>)
 800406a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800406e:	fb02 f101 	mul.w	r1, r2, r1
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	440a      	add	r2, r1
 8004076:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 800407a:	4911      	ldr	r1, [pc, #68]	; (80040c0 <display_align_curves+0x16c>)
 800407c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004080:	fb03 f202 	mul.w	r2, r3, r2
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	4602      	mov	r2, r0
 800408a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3301      	adds	r3, #1
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <display_align_curves+0x164>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	dbd7      	blt.n	800404e <display_align_curves+0xfa>
	}

	return ++dest_idx;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3301      	adds	r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000501 	.word	0x20000501
 80040b8:	2000023c 	.word	0x2000023c
 80040bc:	20007518 	.word	0x20007518
 80040c0:	20000850 	.word	0x20000850

080040c4 <draw_curve>:
 * parameter dont_clear: set to 1 to prevent clearing of the previous curve
 * parameter centre_zero: set to 1 to draw curve around a centered zero line, otherwise from bottom
 * The curve display area is cleared and the zero line is drawn.
 * Each point in the curve_y array is drawn as a line to the previous point
 */
void draw_curve(uint16_t colour, uint8_t dont_clear, uint8_t centre_zero) {
 80040c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c6:	b08b      	sub	sp, #44	; 0x2c
 80040c8:	af06      	add	r7, sp, #24
 80040ca:	4603      	mov	r3, r0
 80040cc:	80fb      	strh	r3, [r7, #6]
 80040ce:	460b      	mov	r3, r1
 80040d0:	717b      	strb	r3, [r7, #5]
 80040d2:	4613      	mov	r3, r2
 80040d4:	713b      	strb	r3, [r7, #4]

	if ((! dont_clear) || (meter_readings_invalid)) {
 80040d6:	797b      	ldrb	r3, [r7, #5]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <draw_curve+0x20>
 80040dc:	4b65      	ldr	r3, [pc, #404]	; (8004274 <draw_curve+0x1b0>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d015      	beq.n	8004110 <draw_curve+0x4c>
		// first clear the curve area
		Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
 80040e4:	4b64      	ldr	r3, [pc, #400]	; (8004278 <draw_curve+0x1b4>)
 80040e6:	881a      	ldrh	r2, [r3, #0]
 80040e8:	4b64      	ldr	r3, [pc, #400]	; (800427c <draw_curve+0x1b8>)
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b02      	subs	r3, #2
 80040f2:	b299      	uxth	r1, r3
 80040f4:	4b62      	ldr	r3, [pc, #392]	; (8004280 <draw_curve+0x1bc>)
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	2302      	movs	r3, #2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	b29a      	uxth	r2, r3
 8004102:	4b5e      	ldr	r3, [pc, #376]	; (800427c <draw_curve+0x1b8>)
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	2000      	movs	r0, #0
 8004108:	9000      	str	r0, [sp, #0]
 800410a:	2002      	movs	r0, #2
 800410c:	f002 fb5a 	bl	80067c4 <Displ_FillArea>
	}
	// draw curve border
	//Displ_Border(0,display_y-curve_y_size,display_x-1,curve_y_size, graph_border, BLUE);

	// Don't draw curve for invalid meter reading
	if (meter_readings_invalid) {
 8004110:	4b58      	ldr	r3, [pc, #352]	; (8004274 <draw_curve+0x1b0>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d023      	beq.n	8004160 <draw_curve+0x9c>
		//Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
		Displ_WString(curve_x_zero+Font24.Width, curve_y_zero - Font24.Height / 2 , "Low Voltage", Font24, 1, YELLOW, RED);
 8004118:	4b5a      	ldr	r3, [pc, #360]	; (8004284 <draw_curve+0x1c0>)
 800411a:	889a      	ldrh	r2, [r3, #4]
 800411c:	4b5a      	ldr	r3, [pc, #360]	; (8004288 <draw_curve+0x1c4>)
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	4413      	add	r3, r2
 8004122:	b29c      	uxth	r4, r3
 8004124:	4b59      	ldr	r3, [pc, #356]	; (800428c <draw_curve+0x1c8>)
 8004126:	881a      	ldrh	r2, [r3, #0]
 8004128:	4b56      	ldr	r3, [pc, #344]	; (8004284 <draw_curve+0x1c0>)
 800412a:	88db      	ldrh	r3, [r3, #6]
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	b29b      	uxth	r3, r3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	b29d      	uxth	r5, r3
 8004134:	4b53      	ldr	r3, [pc, #332]	; (8004284 <draw_curve+0x1c0>)
 8004136:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800413a:	9204      	str	r2, [sp, #16]
 800413c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8004140:	9203      	str	r2, [sp, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	9202      	str	r2, [sp, #8]
 8004146:	466e      	mov	r6, sp
 8004148:	1d1a      	adds	r2, r3, #4
 800414a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800414e:	e886 0003 	stmia.w	r6, {r0, r1}
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a4e      	ldr	r2, [pc, #312]	; (8004290 <draw_curve+0x1cc>)
 8004156:	4629      	mov	r1, r5
 8004158:	4620      	mov	r0, r4
 800415a:	f003 fc59 	bl	8007a10 <Displ_WString>
		return;
 800415e:	e086      	b.n	800426e <draw_curve+0x1aa>
	}

	if (centre_zero) {
 8004160:	793b      	ldrb	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d04c      	beq.n	8004200 <draw_curve+0x13c>
		// draw zero line
		Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+curve_x_size, curve_y_zero, WHITE);
 8004166:	4b48      	ldr	r3, [pc, #288]	; (8004288 <draw_curve+0x1c4>)
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b218      	sxth	r0, r3
 800416c:	4b47      	ldr	r3, [pc, #284]	; (800428c <draw_curve+0x1c8>)
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b219      	sxth	r1, r3
 8004172:	4b45      	ldr	r3, [pc, #276]	; (8004288 <draw_curve+0x1c4>)
 8004174:	881a      	ldrh	r2, [r3, #0]
 8004176:	4b47      	ldr	r3, [pc, #284]	; (8004294 <draw_curve+0x1d0>)
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	4413      	add	r3, r2
 800417c:	b29b      	uxth	r3, r3
 800417e:	b21a      	sxth	r2, r3
 8004180:	4b42      	ldr	r3, [pc, #264]	; (800428c <draw_curve+0x1c8>)
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	b21b      	sxth	r3, r3
 8004186:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800418a:	9400      	str	r4, [sp, #0]
 800418c:	f002 feb7 	bl	8006efe <Displ_Line>
		// draw the curve
		for (int x=1; x<curve_x_size; x++) {
 8004190:	2301      	movs	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e02d      	b.n	80041f2 <draw_curve+0x12e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - curve_y[x-1], x + curve_x_zero, curve_y_zero - curve_y[x], colour);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	b29a      	uxth	r2, r3
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <draw_curve+0x1c4>)
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	4413      	add	r3, r2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	b218      	sxth	r0, r3
 80041a8:	4b38      	ldr	r3, [pc, #224]	; (800428c <draw_curve+0x1c8>)
 80041aa:	881a      	ldrh	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	4939      	ldr	r1, [pc, #228]	; (8004298 <draw_curve+0x1d4>)
 80041b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	b219      	sxth	r1, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <draw_curve+0x1c4>)
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	4413      	add	r3, r2
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	b21c      	sxth	r4, r3
 80041cc:	4b2f      	ldr	r3, [pc, #188]	; (800428c <draw_curve+0x1c8>)
 80041ce:	881a      	ldrh	r2, [r3, #0]
 80041d0:	4d31      	ldr	r5, [pc, #196]	; (8004298 <draw_curve+0x1d4>)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	b29b      	uxth	r3, r3
 80041de:	b21a      	sxth	r2, r3
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	4622      	mov	r2, r4
 80041e8:	f002 fe89 	bl	8006efe <Displ_Line>
		for (int x=1; x<curve_x_size; x++) {
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3301      	adds	r3, #1
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	4b28      	ldr	r3, [pc, #160]	; (8004294 <draw_curve+0x1d0>)
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4293      	cmp	r3, r2
 80041fc:	dbcb      	blt.n	8004196 <draw_curve+0xd2>
 80041fe:	e036      	b.n	800426e <draw_curve+0x1aa>
		}
	} else {	// display for non-AC wave forms
		for (int x=1; x<curve_x_size; x++) {
 8004200:	2301      	movs	r3, #1
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	e02d      	b.n	8004262 <draw_curve+0x19e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - (curve_y[x-1]), x + curve_x_zero, curve_y_zero - (curve_y[x]), colour);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	b29a      	uxth	r2, r3
 800420a:	4b1f      	ldr	r3, [pc, #124]	; (8004288 <draw_curve+0x1c4>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	4413      	add	r3, r2
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29b      	uxth	r3, r3
 8004216:	b218      	sxth	r0, r3
 8004218:	4b1c      	ldr	r3, [pc, #112]	; (800428c <draw_curve+0x1c8>)
 800421a:	881a      	ldrh	r2, [r3, #0]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	3b01      	subs	r3, #1
 8004220:	491d      	ldr	r1, [pc, #116]	; (8004298 <draw_curve+0x1d4>)
 8004222:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004226:	b29b      	uxth	r3, r3
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	b29b      	uxth	r3, r3
 800422c:	b219      	sxth	r1, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	b29a      	uxth	r2, r3
 8004232:	4b15      	ldr	r3, [pc, #84]	; (8004288 <draw_curve+0x1c4>)
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	4413      	add	r3, r2
 8004238:	b29b      	uxth	r3, r3
 800423a:	b21c      	sxth	r4, r3
 800423c:	4b13      	ldr	r3, [pc, #76]	; (800428c <draw_curve+0x1c8>)
 800423e:	881a      	ldrh	r2, [r3, #0]
 8004240:	4d15      	ldr	r5, [pc, #84]	; (8004298 <draw_curve+0x1d4>)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8004248:	b29b      	uxth	r3, r3
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	b29b      	uxth	r3, r3
 800424e:	b21a      	sxth	r2, r3
 8004250:	88fb      	ldrh	r3, [r7, #6]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	4622      	mov	r2, r4
 8004258:	f002 fe51 	bl	8006efe <Displ_Line>
		for (int x=1; x<curve_x_size; x++) {
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	3301      	adds	r3, #1
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <draw_curve+0x1d0>)
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4293      	cmp	r3, r2
 800426c:	dbcb      	blt.n	8004206 <draw_curve+0x142>
		}
	}
}
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004274:	2000028c 	.word	0x2000028c
 8004278:	20002174 	.word	0x20002174
 800427c:	20000008 	.word	0x20000008
 8004280:	20002172 	.word	0x20002172
 8004284:	20000018 	.word	0x20000018
 8004288:	2000000a 	.word	0x2000000a
 800428c:	2000084c 	.word	0x2000084c
 8004290:	08012098 	.word	0x08012098
 8004294:	2000084e 	.word	0x2000084e
 8004298:	20000504 	.word	0x20000504

0800429c <make_curve>:
 *             represents plus/minus values centered around the half way point of the data range.
 *          The (+/-)curve points are scaled to fit the vertical resolution of the graph.
 * @ para bufnum      Sample buffer to use for curve
 * @ para auto_scale  1 = scale to fit available screen area, 0 = use ADC full scale
 */
void make_curve(uint8_t bufnum, uint8_t auto_scale) {
 800429c:	b590      	push	{r4, r7, lr}
 800429e:	b095      	sub	sp, #84	; 0x54
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	460a      	mov	r2, r1
 80042a6:	71fb      	strb	r3, [r7, #7]
 80042a8:	4613      	mov	r3, r2
 80042aa:	71bb      	strb	r3, [r7, #6]
	int value;
	int scale_factor = 1;
 80042ac:	2301      	movs	r3, #1
 80042ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	int src_idx = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	64bb      	str	r3, [r7, #72]	; 0x48
	int range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80042b4:	79fa      	ldrb	r2, [r7, #7]
 80042b6:	49b3      	ldr	r1, [pc, #716]	; (8004584 <make_curve+0x2e8>)
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	3302      	adds	r3, #2
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	79fa      	ldrb	r2, [r7, #7]
 80042ca:	49ae      	ldr	r1, [pc, #696]	; (8004584 <make_curve+0x2e8>)
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	1ac3      	subs	r3, r0, r3
 80042da:	63bb      	str	r3, [r7, #56]	; 0x38
	int zero_value = range / 2 + sample_buf_meta[bufnum].min;	// zero should be half way if DC-Bias is accurate
 80042dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042de:	0fda      	lsrs	r2, r3, #31
 80042e0:	4413      	add	r3, r2
 80042e2:	105b      	asrs	r3, r3, #1
 80042e4:	4618      	mov	r0, r3
 80042e6:	79fa      	ldrb	r2, [r7, #7]
 80042e8:	49a6      	ldr	r1, [pc, #664]	; (8004584 <make_curve+0x2e8>)
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	4403      	add	r3, r0
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
	int curve_y_min;
	float fScale;

	if (auto_scale) {
 80042fa:	79bb      	ldrb	r3, [r7, #6]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00f      	beq.n	8004320 <make_curve+0x84>
		fScale = (float)curve_y_size / (float)range;
 8004300:	4ba1      	ldr	r3, [pc, #644]	; (8004588 <make_curve+0x2ec>)
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	ee07 3a90 	vmov	s15, r3
 8004308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800431a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 800431e:	e00b      	b.n	8004338 <make_curve+0x9c>
	} else {
		fScale = (float)curve_y_size / ADC_FS_RAW;
 8004320:	4b99      	ldr	r3, [pc, #612]	; (8004588 <make_curve+0x2ec>)
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	ee07 3a90 	vmov	s15, r3
 8004328:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800432c:	eddf 6a97 	vldr	s13, [pc, #604]	; 800458c <make_curve+0x2f0>
 8004330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004334:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	}
	if (fScale < 1) {
 8004338:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800433c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004348:	d51f      	bpl.n	800438a <make_curve+0xee>
		scale_factor = trunc(1/fScale)+1; // divisor
 800434a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800434e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004352:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004356:	ee16 0a90 	vmov	r0, s13
 800435a:	f7fc f915 	bl	8000588 <__aeabi_f2d>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	ec43 2b10 	vmov	d0, r2, r3
 8004366:	f00d fd0b 	bl	8011d80 <trunc>
 800436a:	ec51 0b10 	vmov	r0, r1, d0
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	4b87      	ldr	r3, [pc, #540]	; (8004590 <make_curve+0x2f4>)
 8004374:	f7fb ffaa 	bl	80002cc <__adddf3>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4610      	mov	r0, r2
 800437e:	4619      	mov	r1, r3
 8004380:	f7fc fc0a 	bl	8000b98 <__aeabi_d2iz>
 8004384:	4603      	mov	r3, r0
 8004386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004388:	e010      	b.n	80043ac <make_curve+0x110>
	} else {
		scale_factor = trunc(fScale);	// multiplier
 800438a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800438c:	f7fc f8fc 	bl	8000588 <__aeabi_f2d>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	ec43 2b10 	vmov	d0, r2, r3
 8004398:	f00d fcf2 	bl	8011d80 <trunc>
 800439c:	ec53 2b10 	vmov	r2, r3, d0
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	f7fc fbf8 	bl	8000b98 <__aeabi_d2iz>
 80043a8:	4603      	mov	r3, r0
 80043aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	curve_x_size = display_align_curves() / 2;		// half the data points to fit screen size
 80043ac:	f7ff fdd2 	bl	8003f54 <display_align_curves>
 80043b0:	4603      	mov	r3, r0
 80043b2:	0fda      	lsrs	r2, r3, #31
 80043b4:	4413      	add	r3, r2
 80043b6:	105b      	asrs	r3, r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	4b76      	ldr	r3, [pc, #472]	; (8004594 <make_curve+0x2f8>)
 80043bc:	801a      	strh	r2, [r3, #0]
	curve_y_min = 0 - (curve_y_size / 2 -1) ;	// limit y negative points to keep curve within area
 80043be:	4b72      	ldr	r3, [pc, #456]	; (8004588 <make_curve+0x2ec>)
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	085b      	lsrs	r3, r3, #1
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	f1c3 0301 	rsb	r3, r3, #1
 80043ca:	633b      	str	r3, [r7, #48]	; 0x30

	// calculate the new curve as +- values around the centre
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 80043cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80043d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043dc:	d567      	bpl.n	80044ae <make_curve+0x212>
		// calculate start of first line
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	496d      	ldr	r1, [pc, #436]	; (8004598 <make_curve+0x2fc>)
 80043e2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80043e6:	fb03 f202 	mul.w	r2, r3, r2
 80043ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ec:	4413      	add	r3, r2
 80043ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80043f2:	461c      	mov	r4, r3
 80043f4:	79fa      	ldrb	r2, [r7, #7]
 80043f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043f8:	3301      	adds	r3, #1
 80043fa:	4967      	ldr	r1, [pc, #412]	; (8004598 <make_curve+0x2fc>)
 80043fc:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004400:	fb00 f202 	mul.w	r2, r0, r2
 8004404:	4413      	add	r3, r2
 8004406:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800440a:	4423      	add	r3, r4
 800440c:	0fda      	lsrs	r2, r3, #31
 800440e:	4413      	add	r3, r2
 8004410:	105b      	asrs	r3, r3, #1
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
		//curve_y[0] = (value  - zero_value) / scale_factor;
		curve_y[0] = MAX((value - zero_value) / scale_factor, curve_y_min);
 8004414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004418:	1ad2      	subs	r2, r2, r3
 800441a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	4293      	cmp	r3, r2
 800442c:	bfb8      	it	lt
 800442e:	4613      	movlt	r3, r2
 8004430:	4a5a      	ldr	r2, [pc, #360]	; (800459c <make_curve+0x300>)
 8004432:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 8004434:	2301      	movs	r3, #1
 8004436:	643b      	str	r3, [r7, #64]	; 0x40
 8004438:	e032      	b.n	80044a0 <make_curve+0x204>
			src_idx+=2;
 800443a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800443c:	3302      	adds	r3, #2
 800443e:	64bb      	str	r3, [r7, #72]	; 0x48
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	4955      	ldr	r1, [pc, #340]	; (8004598 <make_curve+0x2fc>)
 8004444:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004448:	fb03 f202 	mul.w	r2, r3, r2
 800444c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800444e:	4413      	add	r3, r2
 8004450:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004454:	461c      	mov	r4, r3
 8004456:	79fa      	ldrb	r2, [r7, #7]
 8004458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445a:	3301      	adds	r3, #1
 800445c:	494e      	ldr	r1, [pc, #312]	; (8004598 <make_curve+0x2fc>)
 800445e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004462:	fb00 f202 	mul.w	r2, r0, r2
 8004466:	4413      	add	r3, r2
 8004468:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800446c:	4423      	add	r3, r4
 800446e:	0fda      	lsrs	r2, r3, #31
 8004470:	4413      	add	r3, r2
 8004472:	105b      	asrs	r3, r3, #1
 8004474:	62fb      	str	r3, [r7, #44]	; 0x2c
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) / scale_factor, curve_y_min);
 8004476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447a:	1ad2      	subs	r2, r2, r3
 800447c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	429a      	cmp	r2, r3
 800448e:	bfb8      	it	lt
 8004490:	461a      	movlt	r2, r3
 8004492:	4942      	ldr	r1, [pc, #264]	; (800459c <make_curve+0x300>)
 8004494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 800449a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449c:	3301      	adds	r3, #1
 800449e:	643b      	str	r3, [r7, #64]	; 0x40
 80044a0:	4b3c      	ldr	r3, [pc, #240]	; (8004594 <make_curve+0x2f8>)
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a8:	4293      	cmp	r3, r2
 80044aa:	dbc6      	blt.n	800443a <make_curve+0x19e>
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
		}
	}
}
 80044ac:	e066      	b.n	800457c <make_curve+0x2e0>
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	4939      	ldr	r1, [pc, #228]	; (8004598 <make_curve+0x2fc>)
 80044b2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80044b6:	fb03 f202 	mul.w	r2, r3, r2
 80044ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044bc:	4413      	add	r3, r2
 80044be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80044c2:	461c      	mov	r4, r3
 80044c4:	79fa      	ldrb	r2, [r7, #7]
 80044c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c8:	3301      	adds	r3, #1
 80044ca:	4933      	ldr	r1, [pc, #204]	; (8004598 <make_curve+0x2fc>)
 80044cc:	f44f 7048 	mov.w	r0, #800	; 0x320
 80044d0:	fb00 f202 	mul.w	r2, r0, r2
 80044d4:	4413      	add	r3, r2
 80044d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80044da:	4423      	add	r3, r4
 80044dc:	0fda      	lsrs	r2, r3, #31
 80044de:	4413      	add	r3, r2
 80044e0:	105b      	asrs	r3, r3, #1
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		curve_y[0] = MAX((value - zero_value) * scale_factor, curve_y_min);
 80044e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e8:	1ad2      	subs	r2, r2, r3
 80044ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ec:	fb02 f303 	mul.w	r3, r2, r3
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
 80044f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	4293      	cmp	r3, r2
 80044fc:	bfb8      	it	lt
 80044fe:	4613      	movlt	r3, r2
 8004500:	4a26      	ldr	r2, [pc, #152]	; (800459c <make_curve+0x300>)
 8004502:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 8004504:	2301      	movs	r3, #1
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004508:	e032      	b.n	8004570 <make_curve+0x2d4>
			src_idx+=2;
 800450a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450c:	3302      	adds	r3, #2
 800450e:	64bb      	str	r3, [r7, #72]	; 0x48
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	4921      	ldr	r1, [pc, #132]	; (8004598 <make_curve+0x2fc>)
 8004514:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004518:	fb03 f202 	mul.w	r2, r3, r2
 800451c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451e:	4413      	add	r3, r2
 8004520:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004524:	461c      	mov	r4, r3
 8004526:	79fa      	ldrb	r2, [r7, #7]
 8004528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800452a:	3301      	adds	r3, #1
 800452c:	491a      	ldr	r1, [pc, #104]	; (8004598 <make_curve+0x2fc>)
 800452e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004532:	fb00 f202 	mul.w	r2, r0, r2
 8004536:	4413      	add	r3, r2
 8004538:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800453c:	4423      	add	r3, r4
 800453e:	0fda      	lsrs	r2, r3, #31
 8004540:	4413      	add	r3, r2
 8004542:	105b      	asrs	r3, r3, #1
 8004544:	62fb      	str	r3, [r7, #44]	; 0x2c
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
 8004546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454a:	1ad2      	subs	r2, r2, r3
 800454c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800454e:	fb02 f303 	mul.w	r3, r2, r3
 8004552:	623b      	str	r3, [r7, #32]
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	429a      	cmp	r2, r3
 800455e:	bfb8      	it	lt
 8004560:	461a      	movlt	r2, r3
 8004562:	490e      	ldr	r1, [pc, #56]	; (800459c <make_curve+0x300>)
 8004564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 800456a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456c:	3301      	adds	r3, #1
 800456e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004570:	4b08      	ldr	r3, [pc, #32]	; (8004594 <make_curve+0x2f8>)
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004578:	4293      	cmp	r3, r2
 800457a:	dbc6      	blt.n	800450a <make_curve+0x26e>
}
 800457c:	bf00      	nop
 800457e:	3754      	adds	r7, #84	; 0x54
 8004580:	46bd      	mov	sp, r7
 8004582:	bd90      	pop	{r4, r7, pc}
 8004584:	2000023c 	.word	0x2000023c
 8004588:	20000008 	.word	0x20000008
 800458c:	457ff000 	.word	0x457ff000
 8004590:	3ff00000 	.word	0x3ff00000
 8004594:	2000084e 	.word	0x2000084e
 8004598:	20000850 	.word	0x20000850
 800459c:	20000504 	.word	0x20000504

080045a0 <display_show_curves>:

/*
 * @brief   Display curves for voltage + selected current channels on TFT display
 */
void display_show_curves(void) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
	uint8_t adc_channel;
	make_curve(ADC_CH_V, 0);
 80045a6:	2100      	movs	r1, #0
 80045a8:	2000      	movs	r0, #0
 80045aa:	f7ff fe77 	bl	800429c <make_curve>
	draw_curve(channel_colour[ADC_CH_V], 0, (sample_buf_meta[ADC_CH_V].zero_cross_pos >= 0));
 80045ae:	4b25      	ldr	r3, [pc, #148]	; (8004644 <display_show_curves+0xa4>)
 80045b0:	8818      	ldrh	r0, [r3, #0]
 80045b2:	4b25      	ldr	r3, [pc, #148]	; (8004648 <display_show_curves+0xa8>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	0fdb      	lsrs	r3, r3, #31
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	2100      	movs	r1, #0
 80045c0:	f7ff fd80 	bl	80040c4 <draw_curve>

	switch(display_channel) {
 80045c4:	4b21      	ldr	r3, [pc, #132]	; (800464c <display_show_curves+0xac>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d00c      	beq.n	80045e6 <display_show_curves+0x46>
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	dc0d      	bgt.n	80045ec <display_show_curves+0x4c>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <display_show_curves+0x3a>
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d003      	beq.n	80045e0 <display_show_curves+0x40>
 80045d8:	e008      	b.n	80045ec <display_show_curves+0x4c>
	case I1:
		adc_channel = ADC_CH_I1;
 80045da:	2303      	movs	r3, #3
 80045dc:	71fb      	strb	r3, [r7, #7]
		break;
 80045de:	e007      	b.n	80045f0 <display_show_curves+0x50>
	case I2:
		adc_channel = ADC_CH_I2;
 80045e0:	2302      	movs	r3, #2
 80045e2:	71fb      	strb	r3, [r7, #7]
		break;
 80045e4:	e004      	b.n	80045f0 <display_show_curves+0x50>
	case I3:
		adc_channel = ADC_CH_I3;
 80045e6:	2301      	movs	r3, #1
 80045e8:	71fb      	strb	r3, [r7, #7]
		break;
 80045ea:	e001      	b.n	80045f0 <display_show_curves+0x50>
	default:
		adc_channel = ADC_CH_I1;
 80045ec:	2303      	movs	r3, #3
 80045ee:	71fb      	strb	r3, [r7, #7]
	}
	if (!sample_buf_meta[adc_channel].value_is_zero) {
 80045f0:	79fa      	ldrb	r2, [r7, #7]
 80045f2:	4915      	ldr	r1, [pc, #84]	; (8004648 <display_show_curves+0xa8>)
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	330d      	adds	r3, #13
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d11a      	bne.n	800463c <display_show_curves+0x9c>
		make_curve(adc_channel, 1);
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	2101      	movs	r1, #1
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fe46 	bl	800429c <make_curve>
		draw_curve(channel_colour[display_channel+1], 1, (sample_buf_meta[adc_channel].zero_cross_pos >= 0));
 8004610:	4b0e      	ldr	r3, [pc, #56]	; (800464c <display_show_curves+0xac>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	4a0b      	ldr	r2, [pc, #44]	; (8004644 <display_show_curves+0xa4>)
 8004618:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800461c:	79fa      	ldrb	r2, [r7, #7]
 800461e:	490a      	ldr	r1, [pc, #40]	; (8004648 <display_show_curves+0xa8>)
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3304      	adds	r3, #4
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	43db      	mvns	r3, r3
 8004630:	0fdb      	lsrs	r3, r3, #31
 8004632:	b2db      	uxtb	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	2101      	movs	r1, #1
 8004638:	f7ff fd44 	bl	80040c4 <draw_curve>
	}
}
 800463c:	bf00      	nop
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20000000 	.word	0x20000000
 8004648:	2000023c 	.word	0x2000023c
 800464c:	20000501 	.word	0x20000501

08004650 <ee24_isConnected>:

/*
 * @ brief  Check if EEPROM device is present
 */
bool ee24_isConnected(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 200)!=HAL_OK)
 8004654:	23c8      	movs	r3, #200	; 0xc8
 8004656:	2202      	movs	r2, #2
 8004658:	21a0      	movs	r1, #160	; 0xa0
 800465a:	4805      	ldr	r0, [pc, #20]	; (8004670 <ee24_isConnected+0x20>)
 800465c:	f005 ff42 	bl	800a4e4 <HAL_I2C_IsDeviceReady>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <ee24_isConnected+0x1a>
    return false;
 8004666:	2300      	movs	r3, #0
 8004668:	e000      	b.n	800466c <ee24_isConnected+0x1c>

  return true;
 800466a:	2301      	movs	r3, #1
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	200022c8 	.word	0x200022c8

08004674 <ee24_write_word>:

/*
 * @ brief  Blocking call to write one word to EEPROM
 */
bool ee24_write_word(uint16_t address, uint16_t *data)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af04      	add	r7, sp, #16
 800467a:	4603      	mov	r3, r0
 800467c:	6039      	str	r1, [r7, #0]
 800467e:	80fb      	strh	r3, [r7, #6]
	if (ee24_lock == 1) return false;
 8004680:	4b12      	ldr	r3, [pc, #72]	; (80046cc <ee24_write_word+0x58>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <ee24_write_word+0x18>
 8004688:	2300      	movs	r3, #0
 800468a:	e01a      	b.n	80046c2 <ee24_write_word+0x4e>
	ee24_lock = 1;
 800468c:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <ee24_write_word+0x58>)
 800468e:	2201      	movs	r2, #1
 8004690:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2, 100) != HAL_OK)
 8004692:	88fa      	ldrh	r2, [r7, #6]
 8004694:	2364      	movs	r3, #100	; 0x64
 8004696:	9302      	str	r3, [sp, #8]
 8004698:	2302      	movs	r3, #2
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2301      	movs	r3, #1
 80046a2:	21a0      	movs	r1, #160	; 0xa0
 80046a4:	480a      	ldr	r0, [pc, #40]	; (80046d0 <ee24_write_word+0x5c>)
 80046a6:	f005 fbfd 	bl	8009ea4 <HAL_I2C_Mem_Write>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <ee24_write_word+0x46>
	//if (HAL_I2C_Mem_Write_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 2) != HAL_OK)
	{
		ee24_lock = 0;
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <ee24_write_word+0x58>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
		return false;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e003      	b.n	80046c2 <ee24_write_word+0x4e>
	}
	ee24_lock = 0;
 80046ba:	4b04      	ldr	r3, [pc, #16]	; (80046cc <ee24_write_word+0x58>)
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
	return true;
 80046c0:	2301      	movs	r3, #1
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20002176 	.word	0x20002176
 80046d0:	200022c8 	.word	0x200022c8

080046d4 <ee24_read_word>:

/*
 * @ brief  Blocking call to read one word from EEPROM
 */
bool ee24_read_word(uint8_t address, uint16_t *data)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af04      	add	r7, sp, #16
 80046da:	4603      	mov	r3, r0
 80046dc:	6039      	str	r1, [r7, #0]
 80046de:	71fb      	strb	r3, [r7, #7]
	if (ee24_lock == 1) return false;
 80046e0:	4b12      	ldr	r3, [pc, #72]	; (800472c <ee24_read_word+0x58>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <ee24_read_word+0x18>
 80046e8:	2300      	movs	r3, #0
 80046ea:	e01b      	b.n	8004724 <ee24_read_word+0x50>
	ee24_lock = 1;
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <ee24_read_word+0x58>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2, 100) != HAL_OK )
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	2364      	movs	r3, #100	; 0x64
 80046f8:	9302      	str	r3, [sp, #8]
 80046fa:	2302      	movs	r3, #2
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	2301      	movs	r3, #1
 8004704:	21a0      	movs	r1, #160	; 0xa0
 8004706:	480a      	ldr	r0, [pc, #40]	; (8004730 <ee24_read_word+0x5c>)
 8004708:	f005 fcc6 	bl	800a098 <HAL_I2C_Mem_Read>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d004      	beq.n	800471c <ee24_read_word+0x48>
	//if (HAL_I2C_Mem_Read_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 2) != HAL_OK)
	{
		ee24_lock = 0;
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <ee24_read_word+0x58>)
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]
		return false;
 8004718:	2300      	movs	r3, #0
 800471a:	e003      	b.n	8004724 <ee24_read_word+0x50>
	}
	ee24_lock = 0;
 800471c:	4b03      	ldr	r3, [pc, #12]	; (800472c <ee24_read_word+0x58>)
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]
	return true;
 8004722:	2301      	movs	r3, #1
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20002176 	.word	0x20002176
 8004730:	200022c8 	.word	0x200022c8

08004734 <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8004738:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 800473c:	490d      	ldr	r1, [pc, #52]	; (8004774 <start_adcs+0x40>)
 800473e:	480e      	ldr	r0, [pc, #56]	; (8004778 <start_adcs+0x44>)
 8004740:	f003 ffa0 	bl	8008684 <HAL_ADC_Start_DMA>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d004      	beq.n	8004754 <start_adcs+0x20>
	  term_print("Error starting ADC1 DMA\r\n");
 800474a:	480c      	ldr	r0, [pc, #48]	; (800477c <start_adcs+0x48>)
 800474c:	f001 fc14 	bl	8005f78 <term_print>
  	  Error_Handler();
 8004750:	f000 ffd0 	bl	80056f4 <Error_Handler>
	}
	//Start ADC2 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8004754:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8004758:	4909      	ldr	r1, [pc, #36]	; (8004780 <start_adcs+0x4c>)
 800475a:	480a      	ldr	r0, [pc, #40]	; (8004784 <start_adcs+0x50>)
 800475c:	f003 ff92 	bl	8008684 <HAL_ADC_Start_DMA>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d004      	beq.n	8004770 <start_adcs+0x3c>
	  term_print("Error starting ADC2 DMA\r\n");
 8004766:	4808      	ldr	r0, [pc, #32]	; (8004788 <start_adcs+0x54>)
 8004768:	f001 fc06 	bl	8005f78 <term_print>
 	  Error_Handler();
 800476c:	f000 ffc2 	bl	80056f4 <Error_Handler>
	}
}
 8004770:	bf00      	nop
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20002658 	.word	0x20002658
 8004778:	20002178 	.word	0x20002178
 800477c:	080120a4 	.word	0x080120a4
 8004780:	20004098 	.word	0x20004098
 8004784:	200021c0 	.word	0x200021c0
 8004788:	080120c0 	.word	0x080120c0

0800478c <adjust_TIM2_period>:
 * This function is used in conjunction with the debug GPIO to tune each individual
 * board to produce 25us signal which is shown on the oscilloscope
 * as a 20kHz square wave (period 50us) as the signal changes
 * with every TIM2 call
 */
void adjust_TIM2_period(uint16_t newPeriod, uint8_t store) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	460a      	mov	r2, r1
 8004796:	80fb      	strh	r3, [r7, #6]
 8004798:	4613      	mov	r3, r2
 800479a:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 2500) || (newPeriod < 2000) ) {
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d803      	bhi.n	80047ae <adjust_TIM2_period+0x22>
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80047ac:	d205      	bcs.n	80047ba <adjust_TIM2_period+0x2e>
		term_print("Invalid period for TIM (%u)\r\n", newPeriod);
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	4619      	mov	r1, r3
 80047b2:	4808      	ldr	r0, [pc, #32]	; (80047d4 <adjust_TIM2_period+0x48>)
 80047b4:	f001 fbe0 	bl	8005f78 <term_print>
		return;
 80047b8:	e008      	b.n	80047cc <adjust_TIM2_period+0x40>
	}
	TIM2->ARR = (uint32_t) newPeriod;	// change register directly
 80047ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM2 ARR = %u\r\n", newPeriod);
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	4619      	mov	r1, r3
 80047c6:	4804      	ldr	r0, [pc, #16]	; (80047d8 <adjust_TIM2_period+0x4c>)
 80047c8:	f001 fbd6 	bl	8005f78 <term_print>
			term_print("EEPROM write failed\r\n");
		} else {
			term_print("EEPROM write %u\r\n", newPeriod);
		}
	}*/
}
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	080120dc 	.word	0x080120dc
 80047d8:	080120fc 	.word	0x080120fc

080047dc <version_change>:

/*
 * @brief  Function to manage version change and update stored parameters
 */
void version_change(uint8_t old_major, uint8_t old_minor) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	460a      	mov	r2, r1
 80047e6:	71fb      	strb	r3, [r7, #7]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71bb      	strb	r3, [r7, #6]
	// update version number in EEPROM
	eeprom_buf[0] = VERSION_MAJOR; eeprom_buf[1] = VERSION_MINOR;
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <version_change+0x40>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <version_change+0x40>)
 80047f4:	2202      	movs	r2, #2
 80047f6:	705a      	strb	r2, [r3, #1]
	if (ee24_write_word(EEPROM_ADDR_VERSION,(uint16_t *) &eeprom_buf) != true ) {
 80047f8:	4908      	ldr	r1, [pc, #32]	; (800481c <version_change+0x40>)
 80047fa:	2000      	movs	r0, #0
 80047fc:	f7ff ff3a 	bl	8004674 <ee24_write_word>
 8004800:	4603      	mov	r3, r0
 8004802:	f083 0301 	eor.w	r3, r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <version_change+0x36>
		term_print("Error: EEPROM write failed\r\n");
 800480c:	4804      	ldr	r0, [pc, #16]	; (8004820 <version_change+0x44>)
 800480e:	f001 fbb3 	bl	8005f78 <term_print>
	}
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	2000262c 	.word	0x2000262c
 8004820:	0801210c 	.word	0x0801210c

08004824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800482a:	f003 fe51 	bl	80084d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800482e:	f000 fb0f 	bl	8004e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004832:	f000 fd81 	bl	8005338 <MX_GPIO_Init>
  MX_DMA_Init();
 8004836:	f000 fd41 	bl	80052bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800483a:	f000 fceb 	bl	8005214 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800483e:	f000 fc9d 	bl	800517c <MX_TIM2_Init>
  MX_ADC1_Init();
 8004842:	f000 fb77 	bl	8004f34 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004846:	f000 fbd5 	bl	8004ff4 <MX_ADC2_Init>
  MX_SPI2_Init();
 800484a:	f000 fc61 	bl	8005110 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800484e:	f000 fd0b 	bl	8005268 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8004852:	f000 fc2f 	bl	80050b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

#ifdef USE_DISPLAY
  // TFT Display
  display_init(); // THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8004856:	f7fe fb03 	bl	8002e60 <display_init>
#endif

  // Start CLI UART receive via interrupt
  if (HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) != HAL_OK) {
 800485a:	2201      	movs	r2, #1
 800485c:	499c      	ldr	r1, [pc, #624]	; (8004ad0 <main+0x2ac>)
 800485e:	489d      	ldr	r0, [pc, #628]	; (8004ad4 <main+0x2b0>)
 8004860:	f008 fb47 	bl	800cef2 <HAL_UART_Receive_IT>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <main+0x4a>
    Error_Handler();
 800486a:	f000 ff43 	bl	80056f4 <Error_Handler>
      Error_Handler();
  }
#endif

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 800486e:	489a      	ldr	r0, [pc, #616]	; (8004ad8 <main+0x2b4>)
 8004870:	f007 fe24 	bl	800c4bc <HAL_TIM_Base_Start_IT>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <main+0x5a>
     Error_Handler();
 800487a:	f000 ff3b 	bl	80056f4 <Error_Handler>
  }

  // Start ADCs
  start_adcs();
 800487e:	f7ff ff59 	bl	8004734 <start_adcs>

#ifdef USE_DISPLAY
  display_splash_screen();
 8004882:	f7fe fb0f 	bl	8002ea4 <display_splash_screen>
  display_splash_ticks = HAL_GetTick() + SPLASH_SCREEN_TIME;
 8004886:	f003 fe89 	bl	800859c <HAL_GetTick>
 800488a:	4603      	mov	r3, r0
 800488c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8004890:	4a92      	ldr	r2, [pc, #584]	; (8004adc <main+0x2b8>)
 8004892:	6013      	str	r3, [r2, #0]
#endif

  // Startup message
  sprintf(msg_buf, "\r\n%s V%d.%02d\r\n%s\r\n",  product_msg ,VERSION_MAJOR, VERSION_MINOR, copyright_msg);
 8004894:	4b92      	ldr	r3, [pc, #584]	; (8004ae0 <main+0x2bc>)
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	2302      	movs	r3, #2
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2300      	movs	r3, #0
 800489e:	4a91      	ldr	r2, [pc, #580]	; (8004ae4 <main+0x2c0>)
 80048a0:	4991      	ldr	r1, [pc, #580]	; (8004ae8 <main+0x2c4>)
 80048a2:	4892      	ldr	r0, [pc, #584]	; (8004aec <main+0x2c8>)
 80048a4:	f00a f80c 	bl	800e8c0 <siprintf>
  if (HAL_UART_Transmit(&CLI_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 80048a8:	4890      	ldr	r0, [pc, #576]	; (8004aec <main+0x2c8>)
 80048aa:	f7fb fd01 	bl	80002b0 <strlen>
 80048ae:	4603      	mov	r3, r0
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048b6:	498d      	ldr	r1, [pc, #564]	; (8004aec <main+0x2c8>)
 80048b8:	4886      	ldr	r0, [pc, #536]	; (8004ad4 <main+0x2b0>)
 80048ba:	f008 fa88 	bl	800cdce <HAL_UART_Transmit>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <main+0xa4>
	  Error_Handler();
 80048c4:	f000 ff16 	bl	80056f4 <Error_Handler>
  }
  // Show active TIM2 configuration (for 25us ADC trigger)
  term_print("TIM2 ARR = %d\r\n",TIM2->ARR);
 80048c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	4619      	mov	r1, r3
 80048d0:	4887      	ldr	r0, [pc, #540]	; (8004af0 <main+0x2cc>)
 80048d2:	f001 fb51 	bl	8005f78 <term_print>
  if (HAL_UART_Transmit(&ESP_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
  	  Error_Handler();
  }*/
#endif

  if (!ee24_isConnected()) {
 80048d6:	f7ff febb 	bl	8004650 <ee24_isConnected>
 80048da:	4603      	mov	r3, r0
 80048dc:	f083 0301 	eor.w	r3, r3, #1
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <main+0xca>
	  term_print("Error: EEPROM not found\r\n");
 80048e6:	4883      	ldr	r0, [pc, #524]	; (8004af4 <main+0x2d0>)
 80048e8:	f001 fb46 	bl	8005f78 <term_print>
 80048ec:	e049      	b.n	8004982 <main+0x15e>
  } else {
	  if (ee24_read_word(EEPROM_ADDR_VERSION, (uint16_t *) &eeprom_buf) != true) {
 80048ee:	4982      	ldr	r1, [pc, #520]	; (8004af8 <main+0x2d4>)
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7ff feef 	bl	80046d4 <ee24_read_word>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f083 0301 	eor.w	r3, r3, #1
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <main+0xe6>
		  term_print("Error: EEPROM read error\r\n");
 8004902:	487e      	ldr	r0, [pc, #504]	; (8004afc <main+0x2d8>)
 8004904:	f001 fb38 	bl	8005f78 <term_print>
 8004908:	e03b      	b.n	8004982 <main+0x15e>
	  } else {
		term_print("EEPROM Version: V%d.%02d\r\n", eeprom_buf[0], eeprom_buf[1]);
 800490a:	4b7b      	ldr	r3, [pc, #492]	; (8004af8 <main+0x2d4>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	b2db      	uxtb	r3, r3
 8004910:	4619      	mov	r1, r3
 8004912:	4b79      	ldr	r3, [pc, #484]	; (8004af8 <main+0x2d4>)
 8004914:	785b      	ldrb	r3, [r3, #1]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	461a      	mov	r2, r3
 800491a:	4879      	ldr	r0, [pc, #484]	; (8004b00 <main+0x2dc>)
 800491c:	f001 fb2c 	bl	8005f78 <term_print>
		if ((eeprom_buf[0] == 0xFF) && (eeprom_buf[1] == 0xFF)) {		// new/blank EEPROM
 8004920:	4b75      	ldr	r3, [pc, #468]	; (8004af8 <main+0x2d4>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2bff      	cmp	r3, #255	; 0xff
 8004928:	d117      	bne.n	800495a <main+0x136>
 800492a:	4b73      	ldr	r3, [pc, #460]	; (8004af8 <main+0x2d4>)
 800492c:	785b      	ldrb	r3, [r3, #1]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2bff      	cmp	r3, #255	; 0xff
 8004932:	d112      	bne.n	800495a <main+0x136>
			eeprom_buf[0] = VERSION_MAJOR; eeprom_buf[1] = VERSION_MINOR;
 8004934:	4b70      	ldr	r3, [pc, #448]	; (8004af8 <main+0x2d4>)
 8004936:	2200      	movs	r2, #0
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	4b6f      	ldr	r3, [pc, #444]	; (8004af8 <main+0x2d4>)
 800493c:	2202      	movs	r2, #2
 800493e:	705a      	strb	r2, [r3, #1]
			if (ee24_write_word(EEPROM_ADDR_VERSION,(uint16_t *) &eeprom_buf) != true ) {
 8004940:	496d      	ldr	r1, [pc, #436]	; (8004af8 <main+0x2d4>)
 8004942:	2000      	movs	r0, #0
 8004944:	f7ff fe96 	bl	8004674 <ee24_write_word>
 8004948:	4603      	mov	r3, r0
 800494a:	f083 0301 	eor.w	r3, r3, #1
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <main+0x136>
				term_print("Error: EEPROM write failed\r\n");
 8004954:	486b      	ldr	r0, [pc, #428]	; (8004b04 <main+0x2e0>)
 8004956:	f001 fb0f 	bl	8005f78 <term_print>
			}
		}
		// Detect version change
		if ((eeprom_buf[0]!=VERSION_MAJOR) || (eeprom_buf[0]!=VERSION_MINOR)) {
 800495a:	4b67      	ldr	r3, [pc, #412]	; (8004af8 <main+0x2d4>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d104      	bne.n	800496e <main+0x14a>
 8004964:	4b64      	ldr	r3, [pc, #400]	; (8004af8 <main+0x2d4>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d009      	beq.n	8004982 <main+0x15e>
			version_change(eeprom_buf[0], eeprom_buf[1]);
 800496e:	4b62      	ldr	r3, [pc, #392]	; (8004af8 <main+0x2d4>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	4a60      	ldr	r2, [pc, #384]	; (8004af8 <main+0x2d4>)
 8004976:	7852      	ldrb	r2, [r2, #1]
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	4611      	mov	r1, r2
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ff2d 	bl	80047dc <version_change>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  next_process_time = HAL_GetTick() + PROCESS_INTERVAL;
 8004982:	f003 fe0b 	bl	800859c <HAL_GetTick>
 8004986:	4603      	mov	r3, r0
 8004988:	3364      	adds	r3, #100	; 0x64
 800498a:	4a5f      	ldr	r2, [pc, #380]	; (8004b08 <main+0x2e4>)
 800498c:	6013      	str	r3, [r2, #0]
  //term_print("current: %lu next: %lu\r\n", HAL_GetTick(), next_process_time);
  next_measurement_time = HAL_GetTick() + MEASUREMENT_INTERVAL;
 800498e:	f003 fe05 	bl	800859c <HAL_GetTick>
 8004992:	4603      	mov	r3, r0
 8004994:	3364      	adds	r3, #100	; 0x64
 8004996:	4a5d      	ldr	r2, [pc, #372]	; (8004b0c <main+0x2e8>)
 8004998:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	now_ticks = HAL_GetTick();
 800499a:	f003 fdff 	bl	800859c <HAL_GetTick>
 800499e:	4603      	mov	r3, r0
 80049a0:	4a5b      	ldr	r2, [pc, #364]	; (8004b10 <main+0x2ec>)
 80049a2:	6013      	str	r3, [r2, #0]
	// look for ticks overrun
	if (now_ticks < last_ticks) {
 80049a4:	4b5a      	ldr	r3, [pc, #360]	; (8004b10 <main+0x2ec>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b5a      	ldr	r3, [pc, #360]	; (8004b14 <main+0x2f0>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d21b      	bcs.n	80049e8 <main+0x1c4>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 80049b0:	4b57      	ldr	r3, [pc, #348]	; (8004b10 <main+0x2ec>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3364      	adds	r3, #100	; 0x64
 80049b6:	4a54      	ldr	r2, [pc, #336]	; (8004b08 <main+0x2e4>)
 80049b8:	6013      	str	r3, [r2, #0]
		if (display_off_ticks) { display_off_ticks = now_ticks + DISPLAY_TIMEOUT; }
 80049ba:	4b57      	ldr	r3, [pc, #348]	; (8004b18 <main+0x2f4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <main+0x1ae>
 80049c2:	4b53      	ldr	r3, [pc, #332]	; (8004b10 <main+0x2ec>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80049ca:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80049ce:	4a52      	ldr	r2, [pc, #328]	; (8004b18 <main+0x2f4>)
 80049d0:	6013      	str	r3, [r2, #0]
		display_update_ticks = now_ticks + DISPLAY_UPDATE_TIME;
 80049d2:	4b4f      	ldr	r3, [pc, #316]	; (8004b10 <main+0x2ec>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 80049da:	4a50      	ldr	r2, [pc, #320]	; (8004b1c <main+0x2f8>)
 80049dc:	6013      	str	r3, [r2, #0]
		next_measurement_time = now_ticks + MEASUREMENT_INTERVAL;
 80049de:	4b4c      	ldr	r3, [pc, #304]	; (8004b10 <main+0x2ec>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3364      	adds	r3, #100	; 0x64
 80049e4:	4a49      	ldr	r2, [pc, #292]	; (8004b0c <main+0x2e8>)
 80049e6:	6013      	str	r3, [r2, #0]
	}
	last_ticks = now_ticks;		// store for compare in next iteration
 80049e8:	4b49      	ldr	r3, [pc, #292]	; (8004b10 <main+0x2ec>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a49      	ldr	r2, [pc, #292]	; (8004b14 <main+0x2f0>)
 80049ee:	6013      	str	r3, [r2, #0]

	// perform measurements and update the display
	if ( now_ticks >= next_measurement_time ) {
 80049f0:	4b47      	ldr	r3, [pc, #284]	; (8004b10 <main+0x2ec>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b45      	ldr	r3, [pc, #276]	; (8004b0c <main+0x2e8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d330      	bcc.n	8004a5e <main+0x23a>
		next_measurement_time += MEASUREMENT_INTERVAL;
 80049fc:	4b43      	ldr	r3, [pc, #268]	; (8004b0c <main+0x2e8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3364      	adds	r3, #100	; 0x64
 8004a02:	4a42      	ldr	r2, [pc, #264]	; (8004b0c <main+0x2e8>)
 8004a04:	6013      	str	r3, [r2, #0]
#ifdef DEBUG
		measure_ticks = HAL_GetTick();
 8004a06:	f003 fdc9 	bl	800859c <HAL_GetTick>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4a44      	ldr	r2, [pc, #272]	; (8004b20 <main+0x2fc>)
 8004a0e:	6013      	str	r3, [r2, #0]
#endif
		calc_measurements();
 8004a10:	f7fc ffea 	bl	80019e8 <calc_measurements>
#ifdef DEBUG
		calc_ticks = HAL_GetTick() - measure_ticks;		// calculation execution time
 8004a14:	f003 fdc2 	bl	800859c <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	4b41      	ldr	r3, [pc, #260]	; (8004b20 <main+0x2fc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	4a40      	ldr	r2, [pc, #256]	; (8004b24 <main+0x300>)
 8004a22:	6013      	str	r3, [r2, #0]
#endif

#ifdef USE_DISPLAY
		// update meter display, only if display is visible ( backlight on )
		if ((HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_SET) && (display_screen)) {
 8004a24:	2140      	movs	r1, #64	; 0x40
 8004a26:	4840      	ldr	r0, [pc, #256]	; (8004b28 <main+0x304>)
 8004a28:	f005 f894 	bl	8009b54 <HAL_GPIO_ReadPin>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d115      	bne.n	8004a5e <main+0x23a>
 8004a32:	4b3e      	ldr	r3, [pc, #248]	; (8004b2c <main+0x308>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d011      	beq.n	8004a5e <main+0x23a>
#ifdef DEBUG
			measure_ticks = HAL_GetTick();
 8004a3a:	f003 fdaf 	bl	800859c <HAL_GetTick>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4a37      	ldr	r2, [pc, #220]	; (8004b20 <main+0x2fc>)
 8004a42:	6013      	str	r3, [r2, #0]
#endif
			display_update_meter(display_screen);
 8004a44:	4b39      	ldr	r3, [pc, #228]	; (8004b2c <main+0x308>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe ffc5 	bl	80039d8 <display_update_meter>
#ifdef DEBUG
			display_ticks = HAL_GetTick() - measure_ticks;		// display update execution time
 8004a4e:	f003 fda5 	bl	800859c <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	4b32      	ldr	r3, [pc, #200]	; (8004b20 <main+0x2fc>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	4a35      	ldr	r2, [pc, #212]	; (8004b30 <main+0x30c>)
 8004a5c:	6013      	str	r3, [r2, #0]
		}
#endif
	}

	// process slow tasks
	if ( now_ticks >= next_process_time ) {
 8004a5e:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <main+0x2ec>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b29      	ldr	r3, [pc, #164]	; (8004b08 <main+0x2e4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	f0c0 8165 	bcc.w	8004d36 <main+0x512>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 8004a6c:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <main+0x2ec>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3364      	adds	r3, #100	; 0x64
 8004a72:	4a25      	ldr	r2, [pc, #148]	; (8004b08 <main+0x2e4>)
 8004a74:	6013      	str	r3, [r2, #0]

		// clear splash screen
		if (display_splash_ticks) {
 8004a76:	4b19      	ldr	r3, [pc, #100]	; (8004adc <main+0x2b8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d013      	beq.n	8004aa6 <main+0x282>
			if (now_ticks >= display_splash_ticks) {
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <main+0x2ec>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4b16      	ldr	r3, [pc, #88]	; (8004adc <main+0x2b8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d30d      	bcc.n	8004aa6 <main+0x282>
				display_splash_ticks = 0;
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <main+0x2b8>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
#ifdef USE_DISPLAY
				//display_meter_mask();
				display_screen = 1;		// set to main screen
 8004a90:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <main+0x308>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
				display_off_ticks = now_ticks + DISPLAY_TIMEOUT;
 8004a96:	4b1e      	ldr	r3, [pc, #120]	; (8004b10 <main+0x2ec>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8004a9e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8004aa2:	4a1d      	ldr	r2, [pc, #116]	; (8004b18 <main+0x2f4>)
 8004aa4:	6013      	str	r3, [r2, #0]
				}
			}
		}*/

		// Handle CLI UART communication
		if (cli_rx_cmd_ready) {
 8004aa6:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <main+0x310>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d06c      	beq.n	8004b8a <main+0x366>
			if (esp_mode) {
 8004ab0:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <main+0x314>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d05f      	beq.n	8004b78 <main+0x354>
				if (cli_rx_buff[0] == '~') { // cancel ESP mode
 8004ab8:	4b20      	ldr	r3, [pc, #128]	; (8004b3c <main+0x318>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b7e      	cmp	r3, #126	; 0x7e
 8004ac0:	d140      	bne.n	8004b44 <main+0x320>
					esp_mode = 0;
 8004ac2:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <main+0x314>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
					term_print("\r\nESP mode deactivated\r\n");
 8004ac8:	481d      	ldr	r0, [pc, #116]	; (8004b40 <main+0x31c>)
 8004aca:	f001 fa55 	bl	8005f78 <term_print>
 8004ace:	e056      	b.n	8004b7e <main+0x35a>
 8004ad0:	200025a6 	.word	0x200025a6
 8004ad4:	2000241c 	.word	0x2000241c
 8004ad8:	200023d4 	.word	0x200023d4
 8004adc:	20008240 	.word	0x20008240
 8004ae0:	080165b8 	.word	0x080165b8
 8004ae4:	080165b4 	.word	0x080165b4
 8004ae8:	0801212c 	.word	0x0801212c
 8004aec:	200024a4 	.word	0x200024a4
 8004af0:	08012140 	.word	0x08012140
 8004af4:	08012150 	.word	0x08012150
 8004af8:	2000262c 	.word	0x2000262c
 8004afc:	0801216c 	.word	0x0801216c
 8004b00:	08012188 	.word	0x08012188
 8004b04:	0801210c 	.word	0x0801210c
 8004b08:	20008254 	.word	0x20008254
 8004b0c:	20008250 	.word	0x20008250
 8004b10:	20008248 	.word	0x20008248
 8004b14:	2000824c 	.word	0x2000824c
 8004b18:	20008238 	.word	0x20008238
 8004b1c:	20008244 	.word	0x20008244
 8004b20:	20008258 	.word	0x20008258
 8004b24:	2000825c 	.word	0x2000825c
 8004b28:	40020000 	.word	0x40020000
 8004b2c:	20002644 	.word	0x20002644
 8004b30:	20008260 	.word	0x20008260
 8004b34:	20002628 	.word	0x20002628
 8004b38:	20002641 	.word	0x20002641
 8004b3c:	200025a8 	.word	0x200025a8
 8004b40:	080121a4 	.word	0x080121a4
				} else {
					sprintf(msg_buf, "%s\r\n", cli_rx_buff);	// send command line to ESP01
 8004b44:	4a66      	ldr	r2, [pc, #408]	; (8004ce0 <main+0x4bc>)
 8004b46:	4967      	ldr	r1, [pc, #412]	; (8004ce4 <main+0x4c0>)
 8004b48:	4867      	ldr	r0, [pc, #412]	; (8004ce8 <main+0x4c4>)
 8004b4a:	f009 feb9 	bl	800e8c0 <siprintf>
					if (HAL_UART_Transmit(&ESP_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 8004b4e:	4866      	ldr	r0, [pc, #408]	; (8004ce8 <main+0x4c4>)
 8004b50:	f7fb fbae 	bl	80002b0 <strlen>
 8004b54:	4603      	mov	r3, r0
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b5c:	4962      	ldr	r1, [pc, #392]	; (8004ce8 <main+0x4c4>)
 8004b5e:	4863      	ldr	r0, [pc, #396]	; (8004cec <main+0x4c8>)
 8004b60:	f008 f935 	bl	800cdce <HAL_UART_Transmit>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <main+0x34a>
						Error_Handler();
 8004b6a:	f000 fdc3 	bl	80056f4 <Error_Handler>
					}
					term_print("%s", msg_buf);
 8004b6e:	495e      	ldr	r1, [pc, #376]	; (8004ce8 <main+0x4c4>)
 8004b70:	485f      	ldr	r0, [pc, #380]	; (8004cf0 <main+0x4cc>)
 8004b72:	f001 fa01 	bl	8005f78 <term_print>
 8004b76:	e002      	b.n	8004b7e <main+0x35a>
				}
			} else {
				CMD_Handler((uint8_t*)cli_rx_buff);
 8004b78:	4859      	ldr	r0, [pc, #356]	; (8004ce0 <main+0x4bc>)
 8004b7a:	f7fe f951 	bl	8002e20 <CMD_Handler>
			}
			cli_rx_count = 0;
 8004b7e:	4b5d      	ldr	r3, [pc, #372]	; (8004cf4 <main+0x4d0>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	801a      	strh	r2, [r3, #0]
			cli_rx_cmd_ready = 0;
 8004b84:	4b5c      	ldr	r3, [pc, #368]	; (8004cf8 <main+0x4d4>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
				esp_rx_count_last = esp_rx_count;
			}
		}
#endif		// USE_WIFI

		if (adc_restart) {
 8004b8a:	4b5c      	ldr	r3, [pc, #368]	; (8004cfc <main+0x4d8>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d004      	beq.n	8004b9c <main+0x378>
		  adc_restart = 0;
 8004b92:	4b5a      	ldr	r3, [pc, #360]	; (8004cfc <main+0x4d8>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
		  start_adcs();
 8004b98:	f7ff fdcc 	bl	8004734 <start_adcs>
		}

		if (new_time_period) {
 8004b9c:	4b58      	ldr	r3, [pc, #352]	; (8004d00 <main+0x4dc>)
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <main+0x392>
		  // change timer period to new value
		  adjust_TIM2_period(new_time_period, 1);
 8004ba4:	4b56      	ldr	r3, [pc, #344]	; (8004d00 <main+0x4dc>)
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	2101      	movs	r1, #1
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fdee 	bl	800478c <adjust_TIM2_period>
		  new_time_period = 0;
 8004bb0:	4b53      	ldr	r3, [pc, #332]	; (8004d00 <main+0x4dc>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	801a      	strh	r2, [r3, #0]
		}

#ifdef USE_DISPLAY

		if (display_change) {
 8004bb6:	4b53      	ldr	r3, [pc, #332]	; (8004d04 <main+0x4e0>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d018      	beq.n	8004bf2 <main+0x3ce>
			display_screen++;
 8004bc0:	4b51      	ldr	r3, [pc, #324]	; (8004d08 <main+0x4e4>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	4b4f      	ldr	r3, [pc, #316]	; (8004d08 <main+0x4e4>)
 8004bca:	701a      	strb	r2, [r3, #0]
			if (display_screen > SCREEN_MAX) {
 8004bcc:	4b4e      	ldr	r3, [pc, #312]	; (8004d08 <main+0x4e4>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b05      	cmp	r3, #5
 8004bd2:	d902      	bls.n	8004bda <main+0x3b6>
				display_screen = 1;
 8004bd4:	4b4c      	ldr	r3, [pc, #304]	; (8004d08 <main+0x4e4>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
			}
			display_change = 0;
 8004bda:	4b4a      	ldr	r3, [pc, #296]	; (8004d04 <main+0x4e0>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;	// restart screen saver
 8004be0:	f003 fcdc 	bl	800859c <HAL_GetTick>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8004bea:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8004bee:	4a47      	ldr	r2, [pc, #284]	; (8004d0c <main+0x4e8>)
 8004bf0:	6013      	str	r3, [r2, #0]
		}

		// display timeout
		if (display_off_ticks && (now_ticks >= display_off_ticks)) {
 8004bf2:	4b46      	ldr	r3, [pc, #280]	; (8004d0c <main+0x4e8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00b      	beq.n	8004c12 <main+0x3ee>
 8004bfa:	4b45      	ldr	r3, [pc, #276]	; (8004d10 <main+0x4ec>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b43      	ldr	r3, [pc, #268]	; (8004d0c <main+0x4e8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d305      	bcc.n	8004c12 <main+0x3ee>
			Displ_BackLight('0');
 8004c06:	2030      	movs	r0, #48	; 0x30
 8004c08:	f002 ff42 	bl	8007a90 <Displ_BackLight>
	  		display_off_ticks = 0;
 8004c0c:	4b3f      	ldr	r3, [pc, #252]	; (8004d0c <main+0x4e8>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
	  	}

		if (tft_display) {
 8004c12:	4b40      	ldr	r3, [pc, #256]	; (8004d14 <main+0x4f0>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d02b      	beq.n	8004c72 <main+0x44e>
			if (tft_display == 9) {
 8004c1a:	4b3e      	ldr	r3, [pc, #248]	; (8004d14 <main+0x4f0>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b09      	cmp	r3, #9
 8004c20:	d10e      	bne.n	8004c40 <main+0x41c>
				term_print("Running TFT performance test ...\r\n");
 8004c22:	483d      	ldr	r0, [pc, #244]	; (8004d18 <main+0x4f4>)
 8004c24:	f001 f9a8 	bl	8005f78 <term_print>
				Displ_BackLight('1');
 8004c28:	2031      	movs	r0, #49	; 0x31
 8004c2a:	f002 ff31 	bl	8007a90 <Displ_BackLight>
				Displ_TestAll();
 8004c2e:	f003 fbf9 	bl	8008424 <Displ_TestAll>
				Displ_BackLight('0');
 8004c32:	2030      	movs	r0, #48	; 0x30
 8004c34:	f002 ff2c 	bl	8007a90 <Displ_BackLight>
				term_print("....completed\r\n");
 8004c38:	4838      	ldr	r0, [pc, #224]	; (8004d1c <main+0x4f8>)
 8004c3a:	f001 f99d 	bl	8005f78 <term_print>
 8004c3e:	e015      	b.n	8004c6c <main+0x448>
			} else {
				if (tft_display == 1) {
 8004c40:	4b34      	ldr	r3, [pc, #208]	; (8004d14 <main+0x4f0>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d103      	bne.n	8004c50 <main+0x42c>
					Displ_BackLight('0');
 8004c48:	2030      	movs	r0, #48	; 0x30
 8004c4a:	f002 ff21 	bl	8007a90 <Displ_BackLight>
 8004c4e:	e00d      	b.n	8004c6c <main+0x448>
				} else {
					Displ_BackLight('1');
 8004c50:	2031      	movs	r0, #49	; 0x31
 8004c52:	f002 ff1d 	bl	8007a90 <Displ_BackLight>
					display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 8004c56:	f003 fca1 	bl	800859c <HAL_GetTick>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8004c60:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8004c64:	4a29      	ldr	r2, [pc, #164]	; (8004d0c <main+0x4e8>)
 8004c66:	6013      	str	r3, [r2, #0]
					display_update_mask();
 8004c68:	f7fe ff12 	bl	8003a90 <display_update_mask>
				}
			}
		tft_display = 0;
 8004c6c:	4b29      	ldr	r3, [pc, #164]	; (8004d14 <main+0x4f0>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
		}

		if (display_activate) {		// set by touch screen or blue button
 8004c72:	4b2b      	ldr	r3, [pc, #172]	; (8004d20 <main+0x4fc>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d010      	beq.n	8004c9e <main+0x47a>
			display_activate = 0;
 8004c7c:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <main+0x4fc>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	701a      	strb	r2, [r3, #0]
			display_update_mask();
 8004c82:	f7fe ff05 	bl	8003a90 <display_update_mask>
			Displ_BackLight('1');
 8004c86:	2031      	movs	r0, #49	; 0x31
 8004c88:	f002 ff02 	bl	8007a90 <Displ_BackLight>
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 8004c8c:	f003 fc86 	bl	800859c <HAL_GetTick>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8004c96:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8004c9a:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <main+0x4e8>)
 8004c9c:	6013      	str	r3, [r2, #0]
		}

		if (touch_action) {			// touch screen
 8004c9e:	4b21      	ldr	r3, [pc, #132]	; (8004d24 <main+0x500>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d046      	beq.n	8004d36 <main+0x512>
			touch_action = 0;
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <main+0x500>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]
			if (now_ticks < touch_debounce_ticks){
 8004cae:	4b18      	ldr	r3, [pc, #96]	; (8004d10 <main+0x4ec>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4b1d      	ldr	r3, [pc, #116]	; (8004d28 <main+0x504>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d33d      	bcc.n	8004d36 <main+0x512>
				;	// do nothing
			} else {
				touch_debounce_ticks = HAL_GetTick() + TOUCH_DEBOUNCE_TIME;
 8004cba:	f003 fc6f 	bl	800859c <HAL_GetTick>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004cc4:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <main+0x504>)
 8004cc6:	6013      	str	r3, [r2, #0]
				// if Backlight is OFF
				if (HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_RESET) {
 8004cc8:	2140      	movs	r1, #64	; 0x40
 8004cca:	4818      	ldr	r0, [pc, #96]	; (8004d2c <main+0x508>)
 8004ccc:	f004 ff42 	bl	8009b54 <HAL_GPIO_ReadPin>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d12c      	bne.n	8004d30 <main+0x50c>
					display_activate = 1;		// activate backlight
 8004cd6:	4b12      	ldr	r3, [pc, #72]	; (8004d20 <main+0x4fc>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e02b      	b.n	8004d36 <main+0x512>
 8004cde:	bf00      	nop
 8004ce0:	200025a8 	.word	0x200025a8
 8004ce4:	080121c0 	.word	0x080121c0
 8004ce8:	200024a4 	.word	0x200024a4
 8004cec:	20002460 	.word	0x20002460
 8004cf0:	080121c8 	.word	0x080121c8
 8004cf4:	200025a4 	.word	0x200025a4
 8004cf8:	20002628 	.word	0x20002628
 8004cfc:	2000263f 	.word	0x2000263f
 8004d00:	20002642 	.word	0x20002642
 8004d04:	2000263d 	.word	0x2000263d
 8004d08:	20002644 	.word	0x20002644
 8004d0c:	20008238 	.word	0x20008238
 8004d10:	20008248 	.word	0x20008248
 8004d14:	20002640 	.word	0x20002640
 8004d18:	080121cc 	.word	0x080121cc
 8004d1c:	080121f0 	.word	0x080121f0
 8004d20:	2000263c 	.word	0x2000263c
 8004d24:	2000263e 	.word	0x2000263e
 8004d28:	2000823c 	.word	0x2000823c
 8004d2c:	40020000 	.word	0x40020000
				} else {		// backlight is already on -> change display
					display_change = 1;
 8004d30:	4b3e      	ldr	r3, [pc, #248]	; (8004e2c <main+0x608>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]

		}

		// Check if we have missed processing DMA data sets
		// This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
		if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 8004d36:	4b3e      	ldr	r3, [pc, #248]	; (8004e30 <main+0x60c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	dc0b      	bgt.n	8004d56 <main+0x532>
 8004d3e:	4b3d      	ldr	r3, [pc, #244]	; (8004e34 <main+0x610>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	dc07      	bgt.n	8004d56 <main+0x532>
 8004d46:	4b3c      	ldr	r3, [pc, #240]	; (8004e38 <main+0x614>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	dc03      	bgt.n	8004d56 <main+0x532>
 8004d4e:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <main+0x618>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	dd1b      	ble.n	8004d8e <main+0x56a>
			//term_print("Processing has missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
			if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 8004d56:	4b36      	ldr	r3, [pc, #216]	; (8004e30 <main+0x60c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	dd02      	ble.n	8004d64 <main+0x540>
 8004d5e:	4b34      	ldr	r3, [pc, #208]	; (8004e30 <main+0x60c>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
			if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 8004d64:	4b33      	ldr	r3, [pc, #204]	; (8004e34 <main+0x610>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	dd02      	ble.n	8004d72 <main+0x54e>
 8004d6c:	4b31      	ldr	r3, [pc, #196]	; (8004e34 <main+0x610>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
			if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 8004d72:	4b31      	ldr	r3, [pc, #196]	; (8004e38 <main+0x614>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	dd02      	ble.n	8004d80 <main+0x55c>
 8004d7a:	4b2f      	ldr	r3, [pc, #188]	; (8004e38 <main+0x614>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
			if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 8004d80:	4b2e      	ldr	r3, [pc, #184]	; (8004e3c <main+0x618>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	dd02      	ble.n	8004d8e <main+0x56a>
 8004d88:	4b2c      	ldr	r3, [pc, #176]	; (8004e3c <main+0x618>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
		}

		// Process DMA buffers
		if (adc1_dma_l_count > 0) {
 8004d8e:	4b28      	ldr	r3, [pc, #160]	; (8004e30 <main+0x60c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	dd0e      	ble.n	8004db4 <main+0x590>
			if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 8004d96:	2100      	movs	r1, #0
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f7fc f943 	bl	8001024 <calc_process_dma_buffer>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <main+0x586>
				term_print("Processing ADC1 DMA 1st half failed\r\n");
 8004da4:	4826      	ldr	r0, [pc, #152]	; (8004e40 <main+0x61c>)
 8004da6:	f001 f8e7 	bl	8005f78 <term_print>
			}
			adc1_dma_l_count--;
 8004daa:	4b21      	ldr	r3, [pc, #132]	; (8004e30 <main+0x60c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <main+0x60c>)
 8004db2:	6013      	str	r3, [r2, #0]
		}
		if (adc1_dma_h_count > 0) {
 8004db4:	4b1f      	ldr	r3, [pc, #124]	; (8004e34 <main+0x610>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	dd0e      	ble.n	8004dda <main+0x5b6>
			if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	2001      	movs	r0, #1
 8004dc0:	f7fc f930 	bl	8001024 <calc_process_dma_buffer>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <main+0x5ac>
				term_print("Processing ADC1 DMA 2nd half failed\r\n");
 8004dca:	481e      	ldr	r0, [pc, #120]	; (8004e44 <main+0x620>)
 8004dcc:	f001 f8d4 	bl	8005f78 <term_print>
			}
			adc1_dma_h_count--;
 8004dd0:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <main+0x610>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	4a17      	ldr	r2, [pc, #92]	; (8004e34 <main+0x610>)
 8004dd8:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_l_count > 0) {
 8004dda:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <main+0x614>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	dd0e      	ble.n	8004e00 <main+0x5dc>
			if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 8004de2:	2101      	movs	r1, #1
 8004de4:	2000      	movs	r0, #0
 8004de6:	f7fc f91d 	bl	8001024 <calc_process_dma_buffer>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <main+0x5d2>
			term_print("Processing ADC2 DMA 1st half failed\r\n");
 8004df0:	4815      	ldr	r0, [pc, #84]	; (8004e48 <main+0x624>)
 8004df2:	f001 f8c1 	bl	8005f78 <term_print>
			}
			adc2_dma_l_count--;
 8004df6:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <main+0x614>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	4a0e      	ldr	r2, [pc, #56]	; (8004e38 <main+0x614>)
 8004dfe:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_h_count > 0) {
 8004e00:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <main+0x618>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f77f adc8 	ble.w	800499a <main+0x176>
			if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	f7fc f909 	bl	8001024 <calc_process_dma_buffer>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <main+0x5fa>
			term_print("Processing ADC2 DMA 2nd half failed\r\n");
 8004e18:	480c      	ldr	r0, [pc, #48]	; (8004e4c <main+0x628>)
 8004e1a:	f001 f8ad 	bl	8005f78 <term_print>
			}
			adc2_dma_h_count--;
 8004e1e:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <main+0x618>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	4a05      	ldr	r2, [pc, #20]	; (8004e3c <main+0x618>)
 8004e26:	6013      	str	r3, [r2, #0]
	now_ticks = HAL_GetTick();
 8004e28:	e5b7      	b.n	800499a <main+0x176>
 8004e2a:	bf00      	nop
 8004e2c:	2000263d 	.word	0x2000263d
 8004e30:	20002648 	.word	0x20002648
 8004e34:	2000264c 	.word	0x2000264c
 8004e38:	20002650 	.word	0x20002650
 8004e3c:	20002654 	.word	0x20002654
 8004e40:	08012200 	.word	0x08012200
 8004e44:	08012228 	.word	0x08012228
 8004e48:	08012250 	.word	0x08012250
 8004e4c:	08012278 	.word	0x08012278

08004e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b094      	sub	sp, #80	; 0x50
 8004e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e56:	f107 031c 	add.w	r3, r7, #28
 8004e5a:	2234      	movs	r2, #52	; 0x34
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f009 ff52 	bl	800ed08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e64:	f107 0308 	add.w	r3, r7, #8
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	609a      	str	r2, [r3, #8]
 8004e70:	60da      	str	r2, [r3, #12]
 8004e72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e74:	2300      	movs	r3, #0
 8004e76:	607b      	str	r3, [r7, #4]
 8004e78:	4b2c      	ldr	r3, [pc, #176]	; (8004f2c <SystemClock_Config+0xdc>)
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	4a2b      	ldr	r2, [pc, #172]	; (8004f2c <SystemClock_Config+0xdc>)
 8004e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e82:	6413      	str	r3, [r2, #64]	; 0x40
 8004e84:	4b29      	ldr	r3, [pc, #164]	; (8004f2c <SystemClock_Config+0xdc>)
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	607b      	str	r3, [r7, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e90:	2300      	movs	r3, #0
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <SystemClock_Config+0xe0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a25      	ldr	r2, [pc, #148]	; (8004f30 <SystemClock_Config+0xe0>)
 8004e9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	4b23      	ldr	r3, [pc, #140]	; (8004f30 <SystemClock_Config+0xe0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004eac:	2302      	movs	r3, #2
 8004eae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004ec4:	23b4      	movs	r3, #180	; 0xb4
 8004ec6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ec8:	2302      	movs	r3, #2
 8004eca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ed4:	f107 031c 	add.w	r3, r7, #28
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f006 fb27 	bl	800b52c <HAL_RCC_OscConfig>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004ee4:	f000 fc06 	bl	80056f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004ee8:	f005 ff86 	bl	800adf8 <HAL_PWREx_EnableOverDrive>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8004ef2:	f000 fbff 	bl	80056f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ef6:	230f      	movs	r3, #15
 8004ef8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004efa:	2302      	movs	r3, #2
 8004efc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004f02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004f06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f0c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004f0e:	f107 0308 	add.w	r3, r7, #8
 8004f12:	2105      	movs	r1, #5
 8004f14:	4618      	mov	r0, r3
 8004f16:	f005 ffbf 	bl	800ae98 <HAL_RCC_ClockConfig>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004f20:	f000 fbe8 	bl	80056f4 <Error_Handler>
  }
}
 8004f24:	bf00      	nop
 8004f26:	3750      	adds	r7, #80	; 0x50
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40007000 	.word	0x40007000

08004f34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	605a      	str	r2, [r3, #4]
 8004f42:	609a      	str	r2, [r3, #8]
 8004f44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004f46:	4b29      	ldr	r3, [pc, #164]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004f48:	4a29      	ldr	r2, [pc, #164]	; (8004ff0 <MX_ADC1_Init+0xbc>)
 8004f4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004f4c:	4b27      	ldr	r3, [pc, #156]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004f4e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004f52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004f54:	4b25      	ldr	r3, [pc, #148]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004f5a:	4b24      	ldr	r3, [pc, #144]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004f60:	4b22      	ldr	r3, [pc, #136]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004f66:	4b21      	ldr	r3, [pc, #132]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004f6e:	4b1f      	ldr	r3, [pc, #124]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8004f76:	4b1d      	ldr	r3, [pc, #116]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004f78:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f7e:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004f84:	4b19      	ldr	r3, [pc, #100]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004f86:	2202      	movs	r2, #2
 8004f88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004f8a:	4b18      	ldr	r3, [pc, #96]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004f92:	4b16      	ldr	r3, [pc, #88]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004f98:	4814      	ldr	r0, [pc, #80]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004f9a:	f003 fb2f 	bl	80085fc <HAL_ADC_Init>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8004fa4:	f000 fba6 	bl	80056f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004fac:	2301      	movs	r3, #1
 8004fae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004fb4:	463b      	mov	r3, r7
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	480c      	ldr	r0, [pc, #48]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004fba:	f003 fc73 	bl	80088a4 <HAL_ADC_ConfigChannel>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8004fc4:	f000 fb96 	bl	80056f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004fc8:	230a      	movs	r3, #10
 8004fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004fd0:	463b      	mov	r3, r7
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4805      	ldr	r0, [pc, #20]	; (8004fec <MX_ADC1_Init+0xb8>)
 8004fd6:	f003 fc65 	bl	80088a4 <HAL_ADC_ConfigChannel>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8004fe0:	f000 fb88 	bl	80056f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20002178 	.word	0x20002178
 8004ff0:	40012000 	.word	0x40012000

08004ff4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ffa:	463b      	mov	r3, r7
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005006:	4b29      	ldr	r3, [pc, #164]	; (80050ac <MX_ADC2_Init+0xb8>)
 8005008:	4a29      	ldr	r2, [pc, #164]	; (80050b0 <MX_ADC2_Init+0xbc>)
 800500a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800500c:	4b27      	ldr	r3, [pc, #156]	; (80050ac <MX_ADC2_Init+0xb8>)
 800500e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005012:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005014:	4b25      	ldr	r3, [pc, #148]	; (80050ac <MX_ADC2_Init+0xb8>)
 8005016:	2200      	movs	r2, #0
 8005018:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800501a:	4b24      	ldr	r3, [pc, #144]	; (80050ac <MX_ADC2_Init+0xb8>)
 800501c:	2201      	movs	r2, #1
 800501e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005020:	4b22      	ldr	r3, [pc, #136]	; (80050ac <MX_ADC2_Init+0xb8>)
 8005022:	2200      	movs	r2, #0
 8005024:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005026:	4b21      	ldr	r3, [pc, #132]	; (80050ac <MX_ADC2_Init+0xb8>)
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800502e:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <MX_ADC2_Init+0xb8>)
 8005030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005034:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8005036:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <MX_ADC2_Init+0xb8>)
 8005038:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800503c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800503e:	4b1b      	ldr	r3, [pc, #108]	; (80050ac <MX_ADC2_Init+0xb8>)
 8005040:	2200      	movs	r2, #0
 8005042:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8005044:	4b19      	ldr	r3, [pc, #100]	; (80050ac <MX_ADC2_Init+0xb8>)
 8005046:	2202      	movs	r2, #2
 8005048:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800504a:	4b18      	ldr	r3, [pc, #96]	; (80050ac <MX_ADC2_Init+0xb8>)
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005052:	4b16      	ldr	r3, [pc, #88]	; (80050ac <MX_ADC2_Init+0xb8>)
 8005054:	2200      	movs	r2, #0
 8005056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005058:	4814      	ldr	r0, [pc, #80]	; (80050ac <MX_ADC2_Init+0xb8>)
 800505a:	f003 facf 	bl	80085fc <HAL_ADC_Init>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8005064:	f000 fb46 	bl	80056f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005068:	2301      	movs	r3, #1
 800506a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800506c:	2301      	movs	r3, #1
 800506e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8005070:	2303      	movs	r3, #3
 8005072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005074:	463b      	mov	r3, r7
 8005076:	4619      	mov	r1, r3
 8005078:	480c      	ldr	r0, [pc, #48]	; (80050ac <MX_ADC2_Init+0xb8>)
 800507a:	f003 fc13 	bl	80088a4 <HAL_ADC_ConfigChannel>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8005084:	f000 fb36 	bl	80056f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005088:	230b      	movs	r3, #11
 800508a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800508c:	2302      	movs	r3, #2
 800508e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005090:	463b      	mov	r3, r7
 8005092:	4619      	mov	r1, r3
 8005094:	4805      	ldr	r0, [pc, #20]	; (80050ac <MX_ADC2_Init+0xb8>)
 8005096:	f003 fc05 	bl	80088a4 <HAL_ADC_ConfigChannel>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80050a0:	f000 fb28 	bl	80056f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80050a4:	bf00      	nop
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	200021c0 	.word	0x200021c0
 80050b0:	40012100 	.word	0x40012100

080050b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80050b8:	4b12      	ldr	r3, [pc, #72]	; (8005104 <MX_I2C1_Init+0x50>)
 80050ba:	4a13      	ldr	r2, [pc, #76]	; (8005108 <MX_I2C1_Init+0x54>)
 80050bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80050be:	4b11      	ldr	r3, [pc, #68]	; (8005104 <MX_I2C1_Init+0x50>)
 80050c0:	4a12      	ldr	r2, [pc, #72]	; (800510c <MX_I2C1_Init+0x58>)
 80050c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80050c4:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <MX_I2C1_Init+0x50>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80050ca:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <MX_I2C1_Init+0x50>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <MX_I2C1_Init+0x50>)
 80050d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80050d8:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <MX_I2C1_Init+0x50>)
 80050da:	2200      	movs	r2, #0
 80050dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <MX_I2C1_Init+0x50>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80050e4:	4b07      	ldr	r3, [pc, #28]	; (8005104 <MX_I2C1_Init+0x50>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80050ea:	4b06      	ldr	r3, [pc, #24]	; (8005104 <MX_I2C1_Init+0x50>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80050f0:	4804      	ldr	r0, [pc, #16]	; (8005104 <MX_I2C1_Init+0x50>)
 80050f2:	f004 fd93 	bl	8009c1c <HAL_I2C_Init>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80050fc:	f000 fafa 	bl	80056f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005100:	bf00      	nop
 8005102:	bd80      	pop	{r7, pc}
 8005104:	200022c8 	.word	0x200022c8
 8005108:	40005400 	.word	0x40005400
 800510c:	00061a80 	.word	0x00061a80

08005110 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005114:	4b17      	ldr	r3, [pc, #92]	; (8005174 <MX_SPI2_Init+0x64>)
 8005116:	4a18      	ldr	r2, [pc, #96]	; (8005178 <MX_SPI2_Init+0x68>)
 8005118:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800511a:	4b16      	ldr	r3, [pc, #88]	; (8005174 <MX_SPI2_Init+0x64>)
 800511c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005120:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005122:	4b14      	ldr	r3, [pc, #80]	; (8005174 <MX_SPI2_Init+0x64>)
 8005124:	2200      	movs	r2, #0
 8005126:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005128:	4b12      	ldr	r3, [pc, #72]	; (8005174 <MX_SPI2_Init+0x64>)
 800512a:	2200      	movs	r2, #0
 800512c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800512e:	4b11      	ldr	r3, [pc, #68]	; (8005174 <MX_SPI2_Init+0x64>)
 8005130:	2200      	movs	r2, #0
 8005132:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005134:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <MX_SPI2_Init+0x64>)
 8005136:	2200      	movs	r2, #0
 8005138:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800513a:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <MX_SPI2_Init+0x64>)
 800513c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005140:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005142:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <MX_SPI2_Init+0x64>)
 8005144:	2200      	movs	r2, #0
 8005146:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005148:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <MX_SPI2_Init+0x64>)
 800514a:	2200      	movs	r2, #0
 800514c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800514e:	4b09      	ldr	r3, [pc, #36]	; (8005174 <MX_SPI2_Init+0x64>)
 8005150:	2200      	movs	r2, #0
 8005152:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005154:	4b07      	ldr	r3, [pc, #28]	; (8005174 <MX_SPI2_Init+0x64>)
 8005156:	2200      	movs	r2, #0
 8005158:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800515a:	4b06      	ldr	r3, [pc, #24]	; (8005174 <MX_SPI2_Init+0x64>)
 800515c:	220a      	movs	r2, #10
 800515e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005160:	4804      	ldr	r0, [pc, #16]	; (8005174 <MX_SPI2_Init+0x64>)
 8005162:	f006 fc81 	bl	800ba68 <HAL_SPI_Init>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800516c:	f000 fac2 	bl	80056f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005170:	bf00      	nop
 8005172:	bd80      	pop	{r7, pc}
 8005174:	2000231c 	.word	0x2000231c
 8005178:	40003800 	.word	0x40003800

0800517c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005182:	f107 0308 	add.w	r3, r7, #8
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	605a      	str	r2, [r3, #4]
 800518c:	609a      	str	r2, [r3, #8]
 800518e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005190:	463b      	mov	r3, r7
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005198:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <MX_TIM2_Init+0x94>)
 800519a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800519e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <MX_TIM2_Init+0x94>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051a6:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <MX_TIM2_Init+0x94>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 80051ac:	4b18      	ldr	r3, [pc, #96]	; (8005210 <MX_TIM2_Init+0x94>)
 80051ae:	f640 02ee 	movw	r2, #2286	; 0x8ee
 80051b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051b4:	4b16      	ldr	r3, [pc, #88]	; (8005210 <MX_TIM2_Init+0x94>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051ba:	4b15      	ldr	r3, [pc, #84]	; (8005210 <MX_TIM2_Init+0x94>)
 80051bc:	2200      	movs	r2, #0
 80051be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80051c0:	4813      	ldr	r0, [pc, #76]	; (8005210 <MX_TIM2_Init+0x94>)
 80051c2:	f007 f92b 	bl	800c41c <HAL_TIM_Base_Init>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80051cc:	f000 fa92 	bl	80056f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80051d6:	f107 0308 	add.w	r3, r7, #8
 80051da:	4619      	mov	r1, r3
 80051dc:	480c      	ldr	r0, [pc, #48]	; (8005210 <MX_TIM2_Init+0x94>)
 80051de:	f007 fae5 	bl	800c7ac <HAL_TIM_ConfigClockSource>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80051e8:	f000 fa84 	bl	80056f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80051ec:	2320      	movs	r3, #32
 80051ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051f0:	2300      	movs	r3, #0
 80051f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80051f4:	463b      	mov	r3, r7
 80051f6:	4619      	mov	r1, r3
 80051f8:	4805      	ldr	r0, [pc, #20]	; (8005210 <MX_TIM2_Init+0x94>)
 80051fa:	f007 fd0b 	bl	800cc14 <HAL_TIMEx_MasterConfigSynchronization>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005204:	f000 fa76 	bl	80056f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005208:	bf00      	nop
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	200023d4 	.word	0x200023d4

08005214 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005218:	4b11      	ldr	r3, [pc, #68]	; (8005260 <MX_USART2_UART_Init+0x4c>)
 800521a:	4a12      	ldr	r2, [pc, #72]	; (8005264 <MX_USART2_UART_Init+0x50>)
 800521c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <MX_USART2_UART_Init+0x4c>)
 8005220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005226:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <MX_USART2_UART_Init+0x4c>)
 8005228:	2200      	movs	r2, #0
 800522a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800522c:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <MX_USART2_UART_Init+0x4c>)
 800522e:	2200      	movs	r2, #0
 8005230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005232:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <MX_USART2_UART_Init+0x4c>)
 8005234:	2200      	movs	r2, #0
 8005236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005238:	4b09      	ldr	r3, [pc, #36]	; (8005260 <MX_USART2_UART_Init+0x4c>)
 800523a:	220c      	movs	r2, #12
 800523c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800523e:	4b08      	ldr	r3, [pc, #32]	; (8005260 <MX_USART2_UART_Init+0x4c>)
 8005240:	2200      	movs	r2, #0
 8005242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005244:	4b06      	ldr	r3, [pc, #24]	; (8005260 <MX_USART2_UART_Init+0x4c>)
 8005246:	2200      	movs	r2, #0
 8005248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800524a:	4805      	ldr	r0, [pc, #20]	; (8005260 <MX_USART2_UART_Init+0x4c>)
 800524c:	f007 fd72 	bl	800cd34 <HAL_UART_Init>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005256:	f000 fa4d 	bl	80056f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	2000241c 	.word	0x2000241c
 8005264:	40004400 	.word	0x40004400

08005268 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800526c:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <MX_USART3_UART_Init+0x4c>)
 800526e:	4a12      	ldr	r2, [pc, #72]	; (80052b8 <MX_USART3_UART_Init+0x50>)
 8005270:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005272:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <MX_USART3_UART_Init+0x4c>)
 8005274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005278:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800527a:	4b0e      	ldr	r3, [pc, #56]	; (80052b4 <MX_USART3_UART_Init+0x4c>)
 800527c:	2200      	movs	r2, #0
 800527e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <MX_USART3_UART_Init+0x4c>)
 8005282:	2200      	movs	r2, #0
 8005284:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005286:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <MX_USART3_UART_Init+0x4c>)
 8005288:	2200      	movs	r2, #0
 800528a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <MX_USART3_UART_Init+0x4c>)
 800528e:	220c      	movs	r2, #12
 8005290:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005292:	4b08      	ldr	r3, [pc, #32]	; (80052b4 <MX_USART3_UART_Init+0x4c>)
 8005294:	2200      	movs	r2, #0
 8005296:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005298:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <MX_USART3_UART_Init+0x4c>)
 800529a:	2200      	movs	r2, #0
 800529c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800529e:	4805      	ldr	r0, [pc, #20]	; (80052b4 <MX_USART3_UART_Init+0x4c>)
 80052a0:	f007 fd48 	bl	800cd34 <HAL_UART_Init>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80052aa:	f000 fa23 	bl	80056f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80052ae:	bf00      	nop
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20002460 	.word	0x20002460
 80052b8:	40004800 	.word	0x40004800

080052bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80052c2:	2300      	movs	r3, #0
 80052c4:	607b      	str	r3, [r7, #4]
 80052c6:	4b1b      	ldr	r3, [pc, #108]	; (8005334 <MX_DMA_Init+0x78>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	4a1a      	ldr	r2, [pc, #104]	; (8005334 <MX_DMA_Init+0x78>)
 80052cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052d0:	6313      	str	r3, [r2, #48]	; 0x30
 80052d2:	4b18      	ldr	r3, [pc, #96]	; (8005334 <MX_DMA_Init+0x78>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052da:	607b      	str	r3, [r7, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	4b14      	ldr	r3, [pc, #80]	; (8005334 <MX_DMA_Init+0x78>)
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	4a13      	ldr	r2, [pc, #76]	; (8005334 <MX_DMA_Init+0x78>)
 80052e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052ec:	6313      	str	r3, [r2, #48]	; 0x30
 80052ee:	4b11      	ldr	r3, [pc, #68]	; (8005334 <MX_DMA_Init+0x78>)
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80052fa:	2200      	movs	r2, #0
 80052fc:	2100      	movs	r1, #0
 80052fe:	200f      	movs	r0, #15
 8005300:	f003 fe5b 	bl	8008fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005304:	200f      	movs	r0, #15
 8005306:	f003 fe74 	bl	8008ff2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800530a:	2200      	movs	r2, #0
 800530c:	2100      	movs	r1, #0
 800530e:	2038      	movs	r0, #56	; 0x38
 8005310:	f003 fe53 	bl	8008fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005314:	2038      	movs	r0, #56	; 0x38
 8005316:	f003 fe6c 	bl	8008ff2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800531a:	2200      	movs	r2, #0
 800531c:	2100      	movs	r1, #0
 800531e:	203a      	movs	r0, #58	; 0x3a
 8005320:	f003 fe4b 	bl	8008fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005324:	203a      	movs	r0, #58	; 0x3a
 8005326:	f003 fe64 	bl	8008ff2 <HAL_NVIC_EnableIRQ>

}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023800 	.word	0x40023800

08005338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	; 0x28
 800533c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800533e:	f107 0314 	add.w	r3, r7, #20
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	605a      	str	r2, [r3, #4]
 8005348:	609a      	str	r2, [r3, #8]
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	4b61      	ldr	r3, [pc, #388]	; (80054d8 <MX_GPIO_Init+0x1a0>)
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	4a60      	ldr	r2, [pc, #384]	; (80054d8 <MX_GPIO_Init+0x1a0>)
 8005358:	f043 0304 	orr.w	r3, r3, #4
 800535c:	6313      	str	r3, [r2, #48]	; 0x30
 800535e:	4b5e      	ldr	r3, [pc, #376]	; (80054d8 <MX_GPIO_Init+0x1a0>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	4b5a      	ldr	r3, [pc, #360]	; (80054d8 <MX_GPIO_Init+0x1a0>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	4a59      	ldr	r2, [pc, #356]	; (80054d8 <MX_GPIO_Init+0x1a0>)
 8005374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005378:	6313      	str	r3, [r2, #48]	; 0x30
 800537a:	4b57      	ldr	r3, [pc, #348]	; (80054d8 <MX_GPIO_Init+0x1a0>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	4b53      	ldr	r3, [pc, #332]	; (80054d8 <MX_GPIO_Init+0x1a0>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	4a52      	ldr	r2, [pc, #328]	; (80054d8 <MX_GPIO_Init+0x1a0>)
 8005390:	f043 0301 	orr.w	r3, r3, #1
 8005394:	6313      	str	r3, [r2, #48]	; 0x30
 8005396:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <MX_GPIO_Init+0x1a0>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	60bb      	str	r3, [r7, #8]
 80053a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053a2:	2300      	movs	r3, #0
 80053a4:	607b      	str	r3, [r7, #4]
 80053a6:	4b4c      	ldr	r3, [pc, #304]	; (80054d8 <MX_GPIO_Init+0x1a0>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	4a4b      	ldr	r2, [pc, #300]	; (80054d8 <MX_GPIO_Init+0x1a0>)
 80053ac:	f043 0302 	orr.w	r3, r3, #2
 80053b0:	6313      	str	r3, [r2, #48]	; 0x30
 80053b2:	4b49      	ldr	r3, [pc, #292]	; (80054d8 <MX_GPIO_Init+0x1a0>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	607b      	str	r3, [r7, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin
 80053be:	2200      	movs	r2, #0
 80053c0:	f248 41e0 	movw	r1, #34016	; 0x84e0
 80053c4:	4845      	ldr	r0, [pc, #276]	; (80054dc <MX_GPIO_Init+0x1a4>)
 80053c6:	f004 fbdd 	bl	8009b84 <HAL_GPIO_WritePin>
                          |ESP01_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 80053ca:	2201      	movs	r2, #1
 80053cc:	2180      	movs	r1, #128	; 0x80
 80053ce:	4844      	ldr	r0, [pc, #272]	; (80054e0 <MX_GPIO_Init+0x1a8>)
 80053d0:	f004 fbd8 	bl	8009b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 80053d4:	2201      	movs	r2, #1
 80053d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053da:	4840      	ldr	r0, [pc, #256]	; (80054dc <MX_GPIO_Init+0x1a4>)
 80053dc:	f004 fbd2 	bl	8009b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPL_RST_Pin|ESP01_RST_Pin, GPIO_PIN_RESET);
 80053e0:	2200      	movs	r2, #0
 80053e2:	21c0      	movs	r1, #192	; 0xc0
 80053e4:	483f      	ldr	r0, [pc, #252]	; (80054e4 <MX_GPIO_Init+0x1ac>)
 80053e6:	f004 fbcd 	bl	8009b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80053ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80053f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80053f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80053fa:	f107 0314 	add.w	r3, r7, #20
 80053fe:	4619      	mov	r1, r3
 8005400:	4837      	ldr	r0, [pc, #220]	; (80054e0 <MX_GPIO_Init+0x1a8>)
 8005402:	f004 fa13 	bl	800982c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin ESP01_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin|ESP01_EN_Pin;
 8005406:	f248 4360 	movw	r3, #33888	; 0x8460
 800540a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800540c:	2301      	movs	r3, #1
 800540e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005410:	2300      	movs	r3, #0
 8005412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005414:	2300      	movs	r3, #0
 8005416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005418:	f107 0314 	add.w	r3, r7, #20
 800541c:	4619      	mov	r1, r3
 800541e:	482f      	ldr	r0, [pc, #188]	; (80054dc <MX_GPIO_Init+0x1a4>)
 8005420:	f004 fa04 	bl	800982c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8005424:	2380      	movs	r3, #128	; 0x80
 8005426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005428:	2301      	movs	r3, #1
 800542a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005430:	2302      	movs	r3, #2
 8005432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8005434:	f107 0314 	add.w	r3, r7, #20
 8005438:	4619      	mov	r1, r3
 800543a:	4828      	ldr	r0, [pc, #160]	; (80054dc <MX_GPIO_Init+0x1a4>)
 800543c:	f004 f9f6 	bl	800982c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005444:	2301      	movs	r3, #1
 8005446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800544c:	2303      	movs	r3, #3
 800544e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8005450:	f107 0314 	add.w	r3, r7, #20
 8005454:	4619      	mov	r1, r3
 8005456:	4822      	ldr	r0, [pc, #136]	; (80054e0 <MX_GPIO_Init+0x1a8>)
 8005458:	f004 f9e8 	bl	800982c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 800545c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005462:	2301      	movs	r3, #1
 8005464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800546a:	2303      	movs	r3, #3
 800546c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 800546e:	f107 0314 	add.w	r3, r7, #20
 8005472:	4619      	mov	r1, r3
 8005474:	4819      	ldr	r0, [pc, #100]	; (80054dc <MX_GPIO_Init+0x1a4>)
 8005476:	f004 f9d9 	bl	800982c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 800547a:	2310      	movs	r3, #16
 800547c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800547e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005484:	2300      	movs	r3, #0
 8005486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005488:	f107 0314 	add.w	r3, r7, #20
 800548c:	4619      	mov	r1, r3
 800548e:	4815      	ldr	r0, [pc, #84]	; (80054e4 <MX_GPIO_Init+0x1ac>)
 8005490:	f004 f9cc 	bl	800982c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin ESP01_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|ESP01_RST_Pin;
 8005494:	23c0      	movs	r3, #192	; 0xc0
 8005496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005498:	2301      	movs	r3, #1
 800549a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549c:	2300      	movs	r3, #0
 800549e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054a0:	2300      	movs	r3, #0
 80054a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054a4:	f107 0314 	add.w	r3, r7, #20
 80054a8:	4619      	mov	r1, r3
 80054aa:	480e      	ldr	r0, [pc, #56]	; (80054e4 <MX_GPIO_Init+0x1ac>)
 80054ac:	f004 f9be 	bl	800982c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80054b0:	2200      	movs	r2, #0
 80054b2:	2100      	movs	r1, #0
 80054b4:	200a      	movs	r0, #10
 80054b6:	f003 fd80 	bl	8008fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80054ba:	200a      	movs	r0, #10
 80054bc:	f003 fd99 	bl	8008ff2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80054c0:	2200      	movs	r2, #0
 80054c2:	2100      	movs	r1, #0
 80054c4:	2028      	movs	r0, #40	; 0x28
 80054c6:	f003 fd78 	bl	8008fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80054ca:	2028      	movs	r0, #40	; 0x28
 80054cc:	f003 fd91 	bl	8008ff2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80054d0:	bf00      	nop
 80054d2:	3728      	adds	r7, #40	; 0x28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40023800 	.word	0x40023800
 80054dc:	40020000 	.word	0x40020000
 80054e0:	40020800 	.word	0x40020800
 80054e4:	40020400 	.word	0x40020400

080054e8 <HAL_GPIO_EXTI_Callback>:
//	my_printf("HAL_I2C_MemRxCpltCallback");
}

// External GPIO Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4603      	mov	r3, r0
 80054f0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d003      	beq.n	8005500 <HAL_GPIO_EXTI_Callback+0x18>
 80054f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fc:	d004      	beq.n	8005508 <HAL_GPIO_EXTI_Callback+0x20>
	case GPIO_PIN_13:		// Blue button on Development board
		display_change = 1;
		//display_activate = 1;
		break;
	}
}
 80054fe:	e007      	b.n	8005510 <HAL_GPIO_EXTI_Callback+0x28>
		touch_action = 1;
 8005500:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_GPIO_EXTI_Callback+0x34>)
 8005502:	2201      	movs	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
		break;
 8005506:	e003      	b.n	8005510 <HAL_GPIO_EXTI_Callback+0x28>
		display_change = 1;
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <HAL_GPIO_EXTI_Callback+0x38>)
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
		break;
 800550e:	bf00      	nop
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	2000263e 	.word	0x2000263e
 8005520:	2000263d 	.word	0x2000263d

08005524 <HAL_ADC_ConvCpltCallback>:

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <HAL_ADC_ConvCpltCallback+0x34>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d105      	bne.n	8005540 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 8005534:	4b09      	ldr	r3, [pc, #36]	; (800555c <HAL_ADC_ConvCpltCallback+0x38>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	4a08      	ldr	r2, [pc, #32]	; (800555c <HAL_ADC_ConvCpltCallback+0x38>)
 800553c:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 800553e:	e004      	b.n	800554a <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8005540:	4b07      	ldr	r3, [pc, #28]	; (8005560 <HAL_ADC_ConvCpltCallback+0x3c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3301      	adds	r3, #1
 8005546:	4a06      	ldr	r2, [pc, #24]	; (8005560 <HAL_ADC_ConvCpltCallback+0x3c>)
 8005548:	6013      	str	r3, [r2, #0]
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20002178 	.word	0x20002178
 800555c:	2000264c 	.word	0x2000264c
 8005560:	20002654 	.word	0x20002654

08005564 <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a0a      	ldr	r2, [pc, #40]	; (8005598 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d105      	bne.n	8005580 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 8005574:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3301      	adds	r3, #1
 800557a:	4a08      	ldr	r2, [pc, #32]	; (800559c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800557c:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 800557e:	e004      	b.n	800558a <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 8005580:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3301      	adds	r3, #1
 8005586:	4a06      	ldr	r2, [pc, #24]	; (80055a0 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8005588:	6013      	str	r3, [r2, #0]
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	20002178 	.word	0x20002178
 800559c:	20002648 	.word	0x20002648
 80055a0:	20002650 	.word	0x20002650

080055a4 <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a22      	ldr	r2, [pc, #136]	; (8005638 <HAL_ADC_ErrorCallback+0x94>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d102      	bne.n	80055ba <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 80055b4:	2301      	movs	r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e001      	b.n	80055be <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 80055ba:	2302      	movs	r3, #2
 80055bc:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d82c      	bhi.n	8005620 <HAL_ADC_ErrorCallback+0x7c>
 80055c6:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <HAL_ADC_ErrorCallback+0x28>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	080055e1 	.word	0x080055e1
 80055d0:	080055f1 	.word	0x080055f1
 80055d4:	08005601 	.word	0x08005601
 80055d8:	08005621 	.word	0x08005621
 80055dc:	08005611 	.word	0x08005611
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e4:	461a      	mov	r2, r3
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	4814      	ldr	r0, [pc, #80]	; (800563c <HAL_ADC_ErrorCallback+0x98>)
 80055ea:	f000 fcc5 	bl	8005f78 <term_print>
		break;
 80055ee:	e01e      	b.n	800562e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f4:	461a      	mov	r2, r3
 80055f6:	68f9      	ldr	r1, [r7, #12]
 80055f8:	4811      	ldr	r0, [pc, #68]	; (8005640 <HAL_ADC_ErrorCallback+0x9c>)
 80055fa:	f000 fcbd 	bl	8005f78 <term_print>
		break;
 80055fe:	e016      	b.n	800562e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005604:	461a      	mov	r2, r3
 8005606:	68f9      	ldr	r1, [r7, #12]
 8005608:	480e      	ldr	r0, [pc, #56]	; (8005644 <HAL_ADC_ErrorCallback+0xa0>)
 800560a:	f000 fcb5 	bl	8005f78 <term_print>
		break;
 800560e:	e00e      	b.n	800562e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005614:	461a      	mov	r2, r3
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	480b      	ldr	r0, [pc, #44]	; (8005648 <HAL_ADC_ErrorCallback+0xa4>)
 800561a:	f000 fcad 	bl	8005f78 <term_print>
		break;
 800561e:	e006      	b.n	800562e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	4619      	mov	r1, r3
 8005626:	4809      	ldr	r0, [pc, #36]	; (800564c <HAL_ADC_ErrorCallback+0xa8>)
 8005628:	f000 fca6 	bl	8005f78 <term_print>
	}
}
 800562c:	bf00      	nop
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20002178 	.word	0x20002178
 800563c:	080122a0 	.word	0x080122a0
 8005640:	080122bc 	.word	0x080122bc
 8005644:	080122e0 	.word	0x080122e0
 8005648:	08012300 	.word	0x08012300
 800564c:	0801231c 	.word	0x0801231c

08005650 <HAL_UART_RxCpltCallback>:

// UART has received data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	// CLI command
	if (huart == &CLI_UART) {
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a21      	ldr	r2, [pc, #132]	; (80056e0 <HAL_UART_RxCpltCallback+0x90>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d13b      	bne.n	80056d8 <HAL_UART_RxCpltCallback+0x88>
		if (cli_rx_count >= sizeof(cli_rx_buff)) {
 8005660:	4b20      	ldr	r3, [pc, #128]	; (80056e4 <HAL_UART_RxCpltCallback+0x94>)
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b7f      	cmp	r3, #127	; 0x7f
 8005668:	d902      	bls.n	8005670 <HAL_UART_RxCpltCallback+0x20>
			cli_rx_count = 0;		// wrap back to start
 800566a:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <HAL_UART_RxCpltCallback+0x94>)
 800566c:	2200      	movs	r2, #0
 800566e:	801a      	strh	r2, [r3, #0]
		}
		if ( HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8005670:	2201      	movs	r2, #1
 8005672:	491d      	ldr	r1, [pc, #116]	; (80056e8 <HAL_UART_RxCpltCallback+0x98>)
 8005674:	481a      	ldr	r0, [pc, #104]	; (80056e0 <HAL_UART_RxCpltCallback+0x90>)
 8005676:	f007 fc3c 	bl	800cef2 <HAL_UART_Receive_IT>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d12a      	bne.n	80056d6 <HAL_UART_RxCpltCallback+0x86>
			// check for End of input (CR or LF)
			if ( (cli_rx_byte != 0x0A) && (cli_rx_byte !=  0x0D) ) {
 8005680:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <HAL_UART_RxCpltCallback+0x98>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b0a      	cmp	r3, #10
 8005688:	d012      	beq.n	80056b0 <HAL_UART_RxCpltCallback+0x60>
 800568a:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <HAL_UART_RxCpltCallback+0x98>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b0d      	cmp	r3, #13
 8005692:	d00d      	beq.n	80056b0 <HAL_UART_RxCpltCallback+0x60>
				cli_rx_buff[cli_rx_count++] = cli_rx_byte;
 8005694:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <HAL_UART_RxCpltCallback+0x94>)
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	b291      	uxth	r1, r2
 800569e:	4a11      	ldr	r2, [pc, #68]	; (80056e4 <HAL_UART_RxCpltCallback+0x94>)
 80056a0:	8011      	strh	r1, [r2, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <HAL_UART_RxCpltCallback+0x98>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	b2d9      	uxtb	r1, r3
 80056aa:	4b10      	ldr	r3, [pc, #64]	; (80056ec <HAL_UART_RxCpltCallback+0x9c>)
 80056ac:	5499      	strb	r1, [r3, r2]
					cli_rx_cmd_ready = 1;
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
				}
			}
		} // else { rx_error_count++; } // this should never happen
		return;
 80056ae:	e012      	b.n	80056d6 <HAL_UART_RxCpltCallback+0x86>
				if (cli_rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 80056b0:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <HAL_UART_RxCpltCallback+0x94>)
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00d      	beq.n	80056d6 <HAL_UART_RxCpltCallback+0x86>
					cli_rx_cmd_ready = 1;
 80056ba:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <HAL_UART_RxCpltCallback+0xa0>)
 80056bc:	2201      	movs	r2, #1
 80056be:	701a      	strb	r2, [r3, #0]
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
 80056c0:	4b08      	ldr	r3, [pc, #32]	; (80056e4 <HAL_UART_RxCpltCallback+0x94>)
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	b291      	uxth	r1, r2
 80056ca:	4a06      	ldr	r2, [pc, #24]	; (80056e4 <HAL_UART_RxCpltCallback+0x94>)
 80056cc:	8011      	strh	r1, [r2, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	4b06      	ldr	r3, [pc, #24]	; (80056ec <HAL_UART_RxCpltCallback+0x9c>)
 80056d2:	2100      	movs	r1, #0
 80056d4:	5499      	strb	r1, [r3, r2]
		return;
 80056d6:	bf00      	nop
		} else {	// this should never happen
			esp_rx_error_count++;
		}
	}
#endif
}
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	2000241c 	.word	0x2000241c
 80056e4:	200025a4 	.word	0x200025a4
 80056e8:	200025a6 	.word	0x200025a6
 80056ec:	200025a8 	.word	0x200025a8
 80056f0:	20002628 	.word	0x20002628

080056f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 80056f8:	4802      	ldr	r0, [pc, #8]	; (8005704 <Error_Handler+0x10>)
 80056fa:	f009 faf3 	bl	800ece4 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056fe:	b672      	cpsid	i
}
 8005700:	bf00      	nop
    __disable_irq();
    while (1)
 8005702:	e7fe      	b.n	8005702 <Error_Handler+0xe>
 8005704:	0801233c 	.word	0x0801233c

08005708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800570e:	2300      	movs	r3, #0
 8005710:	607b      	str	r3, [r7, #4]
 8005712:	4b10      	ldr	r3, [pc, #64]	; (8005754 <HAL_MspInit+0x4c>)
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	4a0f      	ldr	r2, [pc, #60]	; (8005754 <HAL_MspInit+0x4c>)
 8005718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800571c:	6453      	str	r3, [r2, #68]	; 0x44
 800571e:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <HAL_MspInit+0x4c>)
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800572a:	2300      	movs	r3, #0
 800572c:	603b      	str	r3, [r7, #0]
 800572e:	4b09      	ldr	r3, [pc, #36]	; (8005754 <HAL_MspInit+0x4c>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	4a08      	ldr	r2, [pc, #32]	; (8005754 <HAL_MspInit+0x4c>)
 8005734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005738:	6413      	str	r3, [r2, #64]	; 0x40
 800573a:	4b06      	ldr	r3, [pc, #24]	; (8005754 <HAL_MspInit+0x4c>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005746:	2007      	movs	r0, #7
 8005748:	f003 fc2c 	bl	8008fa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40023800 	.word	0x40023800

08005758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08e      	sub	sp, #56	; 0x38
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	605a      	str	r2, [r3, #4]
 800576a:	609a      	str	r2, [r3, #8]
 800576c:	60da      	str	r2, [r3, #12]
 800576e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a79      	ldr	r2, [pc, #484]	; (800595c <HAL_ADC_MspInit+0x204>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d173      	bne.n	8005862 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800577a:	2300      	movs	r3, #0
 800577c:	623b      	str	r3, [r7, #32]
 800577e:	4b78      	ldr	r3, [pc, #480]	; (8005960 <HAL_ADC_MspInit+0x208>)
 8005780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005782:	4a77      	ldr	r2, [pc, #476]	; (8005960 <HAL_ADC_MspInit+0x208>)
 8005784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005788:	6453      	str	r3, [r2, #68]	; 0x44
 800578a:	4b75      	ldr	r3, [pc, #468]	; (8005960 <HAL_ADC_MspInit+0x208>)
 800578c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005792:	623b      	str	r3, [r7, #32]
 8005794:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005796:	2300      	movs	r3, #0
 8005798:	61fb      	str	r3, [r7, #28]
 800579a:	4b71      	ldr	r3, [pc, #452]	; (8005960 <HAL_ADC_MspInit+0x208>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	4a70      	ldr	r2, [pc, #448]	; (8005960 <HAL_ADC_MspInit+0x208>)
 80057a0:	f043 0304 	orr.w	r3, r3, #4
 80057a4:	6313      	str	r3, [r2, #48]	; 0x30
 80057a6:	4b6e      	ldr	r3, [pc, #440]	; (8005960 <HAL_ADC_MspInit+0x208>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	4b6a      	ldr	r3, [pc, #424]	; (8005960 <HAL_ADC_MspInit+0x208>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	4a69      	ldr	r2, [pc, #420]	; (8005960 <HAL_ADC_MspInit+0x208>)
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	6313      	str	r3, [r2, #48]	; 0x30
 80057c2:	4b67      	ldr	r3, [pc, #412]	; (8005960 <HAL_ADC_MspInit+0x208>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	61bb      	str	r3, [r7, #24]
 80057cc:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80057ce:	2301      	movs	r3, #1
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057d2:	2303      	movs	r3, #3
 80057d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057de:	4619      	mov	r1, r3
 80057e0:	4860      	ldr	r0, [pc, #384]	; (8005964 <HAL_ADC_MspInit+0x20c>)
 80057e2:	f004 f823 	bl	800982c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80057e6:	2301      	movs	r3, #1
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057ea:	2303      	movs	r3, #3
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f6:	4619      	mov	r1, r3
 80057f8:	485b      	ldr	r0, [pc, #364]	; (8005968 <HAL_ADC_MspInit+0x210>)
 80057fa:	f004 f817 	bl	800982c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80057fe:	4b5b      	ldr	r3, [pc, #364]	; (800596c <HAL_ADC_MspInit+0x214>)
 8005800:	4a5b      	ldr	r2, [pc, #364]	; (8005970 <HAL_ADC_MspInit+0x218>)
 8005802:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005804:	4b59      	ldr	r3, [pc, #356]	; (800596c <HAL_ADC_MspInit+0x214>)
 8005806:	2200      	movs	r2, #0
 8005808:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800580a:	4b58      	ldr	r3, [pc, #352]	; (800596c <HAL_ADC_MspInit+0x214>)
 800580c:	2200      	movs	r2, #0
 800580e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005810:	4b56      	ldr	r3, [pc, #344]	; (800596c <HAL_ADC_MspInit+0x214>)
 8005812:	2200      	movs	r2, #0
 8005814:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005816:	4b55      	ldr	r3, [pc, #340]	; (800596c <HAL_ADC_MspInit+0x214>)
 8005818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800581c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800581e:	4b53      	ldr	r3, [pc, #332]	; (800596c <HAL_ADC_MspInit+0x214>)
 8005820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005824:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005826:	4b51      	ldr	r3, [pc, #324]	; (800596c <HAL_ADC_MspInit+0x214>)
 8005828:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800582c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800582e:	4b4f      	ldr	r3, [pc, #316]	; (800596c <HAL_ADC_MspInit+0x214>)
 8005830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005834:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005836:	4b4d      	ldr	r3, [pc, #308]	; (800596c <HAL_ADC_MspInit+0x214>)
 8005838:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800583c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800583e:	4b4b      	ldr	r3, [pc, #300]	; (800596c <HAL_ADC_MspInit+0x214>)
 8005840:	2200      	movs	r2, #0
 8005842:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005844:	4849      	ldr	r0, [pc, #292]	; (800596c <HAL_ADC_MspInit+0x214>)
 8005846:	f003 fbef 	bl	8009028 <HAL_DMA_Init>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8005850:	f7ff ff50 	bl	80056f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a45      	ldr	r2, [pc, #276]	; (800596c <HAL_ADC_MspInit+0x214>)
 8005858:	639a      	str	r2, [r3, #56]	; 0x38
 800585a:	4a44      	ldr	r2, [pc, #272]	; (800596c <HAL_ADC_MspInit+0x214>)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005860:	e078      	b.n	8005954 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a43      	ldr	r2, [pc, #268]	; (8005974 <HAL_ADC_MspInit+0x21c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d173      	bne.n	8005954 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	4b3b      	ldr	r3, [pc, #236]	; (8005960 <HAL_ADC_MspInit+0x208>)
 8005872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005874:	4a3a      	ldr	r2, [pc, #232]	; (8005960 <HAL_ADC_MspInit+0x208>)
 8005876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800587a:	6453      	str	r3, [r2, #68]	; 0x44
 800587c:	4b38      	ldr	r3, [pc, #224]	; (8005960 <HAL_ADC_MspInit+0x208>)
 800587e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005888:	2300      	movs	r3, #0
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	4b34      	ldr	r3, [pc, #208]	; (8005960 <HAL_ADC_MspInit+0x208>)
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	4a33      	ldr	r2, [pc, #204]	; (8005960 <HAL_ADC_MspInit+0x208>)
 8005892:	f043 0304 	orr.w	r3, r3, #4
 8005896:	6313      	str	r3, [r2, #48]	; 0x30
 8005898:	4b31      	ldr	r3, [pc, #196]	; (8005960 <HAL_ADC_MspInit+0x208>)
 800589a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	4b2d      	ldr	r3, [pc, #180]	; (8005960 <HAL_ADC_MspInit+0x208>)
 80058aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ac:	4a2c      	ldr	r2, [pc, #176]	; (8005960 <HAL_ADC_MspInit+0x208>)
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	6313      	str	r3, [r2, #48]	; 0x30
 80058b4:	4b2a      	ldr	r3, [pc, #168]	; (8005960 <HAL_ADC_MspInit+0x208>)
 80058b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80058c0:	2302      	movs	r3, #2
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058c4:	2303      	movs	r3, #3
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c8:	2300      	movs	r3, #0
 80058ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058d0:	4619      	mov	r1, r3
 80058d2:	4824      	ldr	r0, [pc, #144]	; (8005964 <HAL_ADC_MspInit+0x20c>)
 80058d4:	f003 ffaa 	bl	800982c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80058d8:	2302      	movs	r3, #2
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058dc:	2303      	movs	r3, #3
 80058de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058e8:	4619      	mov	r1, r3
 80058ea:	481f      	ldr	r0, [pc, #124]	; (8005968 <HAL_ADC_MspInit+0x210>)
 80058ec:	f003 ff9e 	bl	800982c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80058f0:	4b21      	ldr	r3, [pc, #132]	; (8005978 <HAL_ADC_MspInit+0x220>)
 80058f2:	4a22      	ldr	r2, [pc, #136]	; (800597c <HAL_ADC_MspInit+0x224>)
 80058f4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80058f6:	4b20      	ldr	r3, [pc, #128]	; (8005978 <HAL_ADC_MspInit+0x220>)
 80058f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058fc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058fe:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <HAL_ADC_MspInit+0x220>)
 8005900:	2200      	movs	r2, #0
 8005902:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005904:	4b1c      	ldr	r3, [pc, #112]	; (8005978 <HAL_ADC_MspInit+0x220>)
 8005906:	2200      	movs	r2, #0
 8005908:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800590a:	4b1b      	ldr	r3, [pc, #108]	; (8005978 <HAL_ADC_MspInit+0x220>)
 800590c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005910:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005912:	4b19      	ldr	r3, [pc, #100]	; (8005978 <HAL_ADC_MspInit+0x220>)
 8005914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005918:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800591a:	4b17      	ldr	r3, [pc, #92]	; (8005978 <HAL_ADC_MspInit+0x220>)
 800591c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005920:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <HAL_ADC_MspInit+0x220>)
 8005924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005928:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800592a:	4b13      	ldr	r3, [pc, #76]	; (8005978 <HAL_ADC_MspInit+0x220>)
 800592c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005930:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005932:	4b11      	ldr	r3, [pc, #68]	; (8005978 <HAL_ADC_MspInit+0x220>)
 8005934:	2200      	movs	r2, #0
 8005936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005938:	480f      	ldr	r0, [pc, #60]	; (8005978 <HAL_ADC_MspInit+0x220>)
 800593a:	f003 fb75 	bl	8009028 <HAL_DMA_Init>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 8005944:	f7ff fed6 	bl	80056f4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a0b      	ldr	r2, [pc, #44]	; (8005978 <HAL_ADC_MspInit+0x220>)
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
 800594e:	4a0a      	ldr	r2, [pc, #40]	; (8005978 <HAL_ADC_MspInit+0x220>)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005954:	bf00      	nop
 8005956:	3738      	adds	r7, #56	; 0x38
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40012000 	.word	0x40012000
 8005960:	40023800 	.word	0x40023800
 8005964:	40020800 	.word	0x40020800
 8005968:	40020000 	.word	0x40020000
 800596c:	20002208 	.word	0x20002208
 8005970:	40026410 	.word	0x40026410
 8005974:	40012100 	.word	0x40012100
 8005978:	20002268 	.word	0x20002268
 800597c:	40026440 	.word	0x40026440

08005980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	; 0x28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005988:	f107 0314 	add.w	r3, r7, #20
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	605a      	str	r2, [r3, #4]
 8005992:	609a      	str	r2, [r3, #8]
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a19      	ldr	r2, [pc, #100]	; (8005a04 <HAL_I2C_MspInit+0x84>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d12c      	bne.n	80059fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059a2:	2300      	movs	r3, #0
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <HAL_I2C_MspInit+0x88>)
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <HAL_I2C_MspInit+0x88>)
 80059ac:	f043 0302 	orr.w	r3, r3, #2
 80059b0:	6313      	str	r3, [r2, #48]	; 0x30
 80059b2:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <HAL_I2C_MspInit+0x88>)
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80059be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80059c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80059c4:	2312      	movs	r3, #18
 80059c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059cc:	2303      	movs	r3, #3
 80059ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80059d0:	2304      	movs	r3, #4
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059d4:	f107 0314 	add.w	r3, r7, #20
 80059d8:	4619      	mov	r1, r3
 80059da:	480c      	ldr	r0, [pc, #48]	; (8005a0c <HAL_I2C_MspInit+0x8c>)
 80059dc:	f003 ff26 	bl	800982c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <HAL_I2C_MspInit+0x88>)
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	4a07      	ldr	r2, [pc, #28]	; (8005a08 <HAL_I2C_MspInit+0x88>)
 80059ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059ee:	6413      	str	r3, [r2, #64]	; 0x40
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <HAL_I2C_MspInit+0x88>)
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80059fc:	bf00      	nop
 80059fe:	3728      	adds	r7, #40	; 0x28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40005400 	.word	0x40005400
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	40020400 	.word	0x40020400

08005a10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08a      	sub	sp, #40	; 0x28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a18:	f107 0314 	add.w	r3, r7, #20
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	605a      	str	r2, [r3, #4]
 8005a22:	609a      	str	r2, [r3, #8]
 8005a24:	60da      	str	r2, [r3, #12]
 8005a26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a43      	ldr	r2, [pc, #268]	; (8005b3c <HAL_SPI_MspInit+0x12c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d17f      	bne.n	8005b32 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a32:	2300      	movs	r3, #0
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	4b42      	ldr	r3, [pc, #264]	; (8005b40 <HAL_SPI_MspInit+0x130>)
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	4a41      	ldr	r2, [pc, #260]	; (8005b40 <HAL_SPI_MspInit+0x130>)
 8005a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a40:	6413      	str	r3, [r2, #64]	; 0x40
 8005a42:	4b3f      	ldr	r3, [pc, #252]	; (8005b40 <HAL_SPI_MspInit+0x130>)
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	4b3b      	ldr	r3, [pc, #236]	; (8005b40 <HAL_SPI_MspInit+0x130>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	4a3a      	ldr	r2, [pc, #232]	; (8005b40 <HAL_SPI_MspInit+0x130>)
 8005a58:	f043 0304 	orr.w	r3, r3, #4
 8005a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a5e:	4b38      	ldr	r3, [pc, #224]	; (8005b40 <HAL_SPI_MspInit+0x130>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60bb      	str	r3, [r7, #8]
 8005a6e:	4b34      	ldr	r3, [pc, #208]	; (8005b40 <HAL_SPI_MspInit+0x130>)
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	4a33      	ldr	r2, [pc, #204]	; (8005b40 <HAL_SPI_MspInit+0x130>)
 8005a74:	f043 0302 	orr.w	r3, r3, #2
 8005a78:	6313      	str	r3, [r2, #48]	; 0x30
 8005a7a:	4b31      	ldr	r3, [pc, #196]	; (8005b40 <HAL_SPI_MspInit+0x130>)
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	60bb      	str	r3, [r7, #8]
 8005a84:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8005a86:	230c      	movs	r3, #12
 8005a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a92:	2303      	movs	r3, #3
 8005a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a96:	2305      	movs	r3, #5
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a9a:	f107 0314 	add.w	r3, r7, #20
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4828      	ldr	r0, [pc, #160]	; (8005b44 <HAL_SPI_MspInit+0x134>)
 8005aa2:	f003 fec3 	bl	800982c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 8005aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aac:	2302      	movs	r3, #2
 8005aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005ab8:	2305      	movs	r3, #5
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 8005abc:	f107 0314 	add.w	r3, r7, #20
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4821      	ldr	r0, [pc, #132]	; (8005b48 <HAL_SPI_MspInit+0x138>)
 8005ac4:	f003 feb2 	bl	800982c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005ac8:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <HAL_SPI_MspInit+0x13c>)
 8005aca:	4a21      	ldr	r2, [pc, #132]	; (8005b50 <HAL_SPI_MspInit+0x140>)
 8005acc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005ace:	4b1f      	ldr	r3, [pc, #124]	; (8005b4c <HAL_SPI_MspInit+0x13c>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <HAL_SPI_MspInit+0x13c>)
 8005ad6:	2240      	movs	r2, #64	; 0x40
 8005ad8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ada:	4b1c      	ldr	r3, [pc, #112]	; (8005b4c <HAL_SPI_MspInit+0x13c>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <HAL_SPI_MspInit+0x13c>)
 8005ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ae6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ae8:	4b18      	ldr	r3, [pc, #96]	; (8005b4c <HAL_SPI_MspInit+0x13c>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005aee:	4b17      	ldr	r3, [pc, #92]	; (8005b4c <HAL_SPI_MspInit+0x13c>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005af4:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <HAL_SPI_MspInit+0x13c>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005afa:	4b14      	ldr	r3, [pc, #80]	; (8005b4c <HAL_SPI_MspInit+0x13c>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b00:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <HAL_SPI_MspInit+0x13c>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005b06:	4811      	ldr	r0, [pc, #68]	; (8005b4c <HAL_SPI_MspInit+0x13c>)
 8005b08:	f003 fa8e 	bl	8009028 <HAL_DMA_Init>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8005b12:	f7ff fdef 	bl	80056f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a0c      	ldr	r2, [pc, #48]	; (8005b4c <HAL_SPI_MspInit+0x13c>)
 8005b1a:	649a      	str	r2, [r3, #72]	; 0x48
 8005b1c:	4a0b      	ldr	r2, [pc, #44]	; (8005b4c <HAL_SPI_MspInit+0x13c>)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005b22:	2200      	movs	r2, #0
 8005b24:	2100      	movs	r1, #0
 8005b26:	2024      	movs	r0, #36	; 0x24
 8005b28:	f003 fa47 	bl	8008fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005b2c:	2024      	movs	r0, #36	; 0x24
 8005b2e:	f003 fa60 	bl	8008ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005b32:	bf00      	nop
 8005b34:	3728      	adds	r7, #40	; 0x28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40003800 	.word	0x40003800
 8005b40:	40023800 	.word	0x40023800
 8005b44:	40020800 	.word	0x40020800
 8005b48:	40020400 	.word	0x40020400
 8005b4c:	20002374 	.word	0x20002374
 8005b50:	40026070 	.word	0x40026070

08005b54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b64:	d115      	bne.n	8005b92 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <HAL_TIM_Base_MspInit+0x48>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	4a0b      	ldr	r2, [pc, #44]	; (8005b9c <HAL_TIM_Base_MspInit+0x48>)
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	6413      	str	r3, [r2, #64]	; 0x40
 8005b76:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <HAL_TIM_Base_MspInit+0x48>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005b82:	2200      	movs	r2, #0
 8005b84:	2100      	movs	r1, #0
 8005b86:	201c      	movs	r0, #28
 8005b88:	f003 fa17 	bl	8008fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005b8c:	201c      	movs	r0, #28
 8005b8e:	f003 fa30 	bl	8008ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40023800 	.word	0x40023800

08005ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08c      	sub	sp, #48	; 0x30
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ba8:	f107 031c 	add.w	r3, r7, #28
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	605a      	str	r2, [r3, #4]
 8005bb2:	609a      	str	r2, [r3, #8]
 8005bb4:	60da      	str	r2, [r3, #12]
 8005bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a3a      	ldr	r2, [pc, #232]	; (8005ca8 <HAL_UART_MspInit+0x108>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d134      	bne.n	8005c2c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	4b39      	ldr	r3, [pc, #228]	; (8005cac <HAL_UART_MspInit+0x10c>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	4a38      	ldr	r2, [pc, #224]	; (8005cac <HAL_UART_MspInit+0x10c>)
 8005bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bd2:	4b36      	ldr	r3, [pc, #216]	; (8005cac <HAL_UART_MspInit+0x10c>)
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bda:	61bb      	str	r3, [r7, #24]
 8005bdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	4b32      	ldr	r3, [pc, #200]	; (8005cac <HAL_UART_MspInit+0x10c>)
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	4a31      	ldr	r2, [pc, #196]	; (8005cac <HAL_UART_MspInit+0x10c>)
 8005be8:	f043 0301 	orr.w	r3, r3, #1
 8005bec:	6313      	str	r3, [r2, #48]	; 0x30
 8005bee:	4b2f      	ldr	r3, [pc, #188]	; (8005cac <HAL_UART_MspInit+0x10c>)
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005bfa:	230c      	movs	r3, #12
 8005bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bfe:	2302      	movs	r3, #2
 8005c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c06:	2303      	movs	r3, #3
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005c0a:	2307      	movs	r3, #7
 8005c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c0e:	f107 031c 	add.w	r3, r7, #28
 8005c12:	4619      	mov	r1, r3
 8005c14:	4826      	ldr	r0, [pc, #152]	; (8005cb0 <HAL_UART_MspInit+0x110>)
 8005c16:	f003 fe09 	bl	800982c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	2026      	movs	r0, #38	; 0x26
 8005c20:	f003 f9cb 	bl	8008fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005c24:	2026      	movs	r0, #38	; 0x26
 8005c26:	f003 f9e4 	bl	8008ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005c2a:	e039      	b.n	8005ca0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a20      	ldr	r2, [pc, #128]	; (8005cb4 <HAL_UART_MspInit+0x114>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d134      	bne.n	8005ca0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005c36:	2300      	movs	r3, #0
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	4b1c      	ldr	r3, [pc, #112]	; (8005cac <HAL_UART_MspInit+0x10c>)
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	4a1b      	ldr	r2, [pc, #108]	; (8005cac <HAL_UART_MspInit+0x10c>)
 8005c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c44:	6413      	str	r3, [r2, #64]	; 0x40
 8005c46:	4b19      	ldr	r3, [pc, #100]	; (8005cac <HAL_UART_MspInit+0x10c>)
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	4b15      	ldr	r3, [pc, #84]	; (8005cac <HAL_UART_MspInit+0x10c>)
 8005c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5a:	4a14      	ldr	r2, [pc, #80]	; (8005cac <HAL_UART_MspInit+0x10c>)
 8005c5c:	f043 0304 	orr.w	r3, r3, #4
 8005c60:	6313      	str	r3, [r2, #48]	; 0x30
 8005c62:	4b12      	ldr	r3, [pc, #72]	; (8005cac <HAL_UART_MspInit+0x10c>)
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8005c6e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8005c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c74:	2302      	movs	r3, #2
 8005c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005c80:	2307      	movs	r3, #7
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c84:	f107 031c 	add.w	r3, r7, #28
 8005c88:	4619      	mov	r1, r3
 8005c8a:	480b      	ldr	r0, [pc, #44]	; (8005cb8 <HAL_UART_MspInit+0x118>)
 8005c8c:	f003 fdce 	bl	800982c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005c90:	2200      	movs	r2, #0
 8005c92:	2100      	movs	r1, #0
 8005c94:	2027      	movs	r0, #39	; 0x27
 8005c96:	f003 f990 	bl	8008fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005c9a:	2027      	movs	r0, #39	; 0x27
 8005c9c:	f003 f9a9 	bl	8008ff2 <HAL_NVIC_EnableIRQ>
}
 8005ca0:	bf00      	nop
 8005ca2:	3730      	adds	r7, #48	; 0x30
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40004400 	.word	0x40004400
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	40020000 	.word	0x40020000
 8005cb4:	40004800 	.word	0x40004800
 8005cb8:	40020800 	.word	0x40020800

08005cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005cc0:	e7fe      	b.n	8005cc0 <NMI_Handler+0x4>

08005cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cc6:	e7fe      	b.n	8005cc6 <HardFault_Handler+0x4>

08005cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ccc:	e7fe      	b.n	8005ccc <MemManage_Handler+0x4>

08005cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cd2:	e7fe      	b.n	8005cd2 <BusFault_Handler+0x4>

08005cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cd8:	e7fe      	b.n	8005cd8 <UsageFault_Handler+0x4>

08005cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005cde:	bf00      	nop
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cec:	bf00      	nop
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cfa:	bf00      	nop
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d08:	f002 fc34 	bl	8008574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d0c:	bf00      	nop
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8005d14:	2010      	movs	r0, #16
 8005d16:	f003 ff69 	bl	8009bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005d1a:	bf00      	nop
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005d24:	4802      	ldr	r0, [pc, #8]	; (8005d30 <DMA1_Stream4_IRQHandler+0x10>)
 8005d26:	f003 fb17 	bl	8009358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005d2a:	bf00      	nop
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20002374 	.word	0x20002374

08005d34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005d38:	4804      	ldr	r0, [pc, #16]	; (8005d4c <TIM2_IRQHandler+0x18>)
 8005d3a:	f006 fc2f 	bl	800c59c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 8005d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d42:	4803      	ldr	r0, [pc, #12]	; (8005d50 <TIM2_IRQHandler+0x1c>)
 8005d44:	f003 ff37 	bl	8009bb6 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8005d48:	bf00      	nop
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	200023d4 	.word	0x200023d4
 8005d50:	40020000 	.word	0x40020000

08005d54 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005d58:	4802      	ldr	r0, [pc, #8]	; (8005d64 <SPI2_IRQHandler+0x10>)
 8005d5a:	f006 f901 	bl	800bf60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005d5e:	bf00      	nop
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	2000231c 	.word	0x2000231c

08005d68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005d6c:	4802      	ldr	r0, [pc, #8]	; (8005d78 <USART2_IRQHandler+0x10>)
 8005d6e:	f007 f8f1 	bl	800cf54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005d72:	bf00      	nop
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	2000241c 	.word	0x2000241c

08005d7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005d80:	4802      	ldr	r0, [pc, #8]	; (8005d8c <USART3_IRQHandler+0x10>)
 8005d82:	f007 f8e7 	bl	800cf54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005d86:	bf00      	nop
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20002460 	.word	0x20002460

08005d90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005d94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005d98:	f003 ff28 	bl	8009bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005d9c:	bf00      	nop
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005da4:	4802      	ldr	r0, [pc, #8]	; (8005db0 <DMA2_Stream0_IRQHandler+0x10>)
 8005da6:	f003 fad7 	bl	8009358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005daa:	bf00      	nop
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20002208 	.word	0x20002208

08005db4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005db8:	4802      	ldr	r0, [pc, #8]	; (8005dc4 <DMA2_Stream2_IRQHandler+0x10>)
 8005dba:	f003 facd 	bl	8009358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005dbe:	bf00      	nop
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20002268 	.word	0x20002268

08005dc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return 1;
 8005dcc:	2301      	movs	r3, #1
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <_kill>:

int _kill(int pid, int sig)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005de2:	f008 fff3 	bl	800edcc <__errno>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2216      	movs	r2, #22
 8005dea:	601a      	str	r2, [r3, #0]
  return -1;
 8005dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <_exit>:

void _exit (int status)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff ffe7 	bl	8005dd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005e0a:	e7fe      	b.n	8005e0a <_exit+0x12>

08005e0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e00a      	b.n	8005e34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005e1e:	f3af 8000 	nop.w
 8005e22:	4601      	mov	r1, r0
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	60ba      	str	r2, [r7, #8]
 8005e2a:	b2ca      	uxtb	r2, r1
 8005e2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	3301      	adds	r3, #1
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	dbf0      	blt.n	8005e1e <_read+0x12>
  }

  return len;
 8005e3c:	687b      	ldr	r3, [r7, #4]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b086      	sub	sp, #24
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	e009      	b.n	8005e6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	60ba      	str	r2, [r7, #8]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	dbf1      	blt.n	8005e58 <_write+0x12>
  }
  return len;
 8005e74:	687b      	ldr	r3, [r7, #4]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <_close>:

int _close(int file)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ea6:	605a      	str	r2, [r3, #4]
  return 0;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <_isatty>:

int _isatty(int file)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005ebe:	2301      	movs	r3, #1
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ef0:	4a14      	ldr	r2, [pc, #80]	; (8005f44 <_sbrk+0x5c>)
 8005ef2:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <_sbrk+0x60>)
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005efc:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <_sbrk+0x64>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d102      	bne.n	8005f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f04:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <_sbrk+0x64>)
 8005f06:	4a12      	ldr	r2, [pc, #72]	; (8005f50 <_sbrk+0x68>)
 8005f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f0a:	4b10      	ldr	r3, [pc, #64]	; (8005f4c <_sbrk+0x64>)
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4413      	add	r3, r2
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d207      	bcs.n	8005f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f18:	f008 ff58 	bl	800edcc <__errno>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	220c      	movs	r2, #12
 8005f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f26:	e009      	b.n	8005f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f28:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <_sbrk+0x64>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f2e:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <_sbrk+0x64>)
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4413      	add	r3, r2
 8005f36:	4a05      	ldr	r2, [pc, #20]	; (8005f4c <_sbrk+0x64>)
 8005f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20020000 	.word	0x20020000
 8005f48:	00000400 	.word	0x00000400
 8005f4c:	20008264 	.word	0x20008264
 8005f50:	200097c8 	.word	0x200097c8

08005f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f58:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <SystemInit+0x20>)
 8005f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5e:	4a05      	ldr	r2, [pc, #20]	; (8005f74 <SystemInit+0x20>)
 8005f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f68:	bf00      	nop
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	e000ed00 	.word	0xe000ed00

08005f78 <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 8005f78:	b40f      	push	{r0, r1, r2, r3}
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 8005f80:	f107 0314 	add.w	r3, r7, #20
 8005f84:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f8e:	480b      	ldr	r0, [pc, #44]	; (8005fbc <term_print+0x44>)
 8005f90:	f008 fe9a 	bl	800ecc8 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 8005f94:	4809      	ldr	r0, [pc, #36]	; (8005fbc <term_print+0x44>)
 8005f96:	f7fa f98b 	bl	80002b0 <strlen>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fa2:	4906      	ldr	r1, [pc, #24]	; (8005fbc <term_print+0x44>)
 8005fa4:	4806      	ldr	r0, [pc, #24]	; (8005fc0 <term_print+0x48>)
 8005fa6:	f006 ff12 	bl	800cdce <HAL_UART_Transmit>
 8005faa:	4603      	mov	r3, r0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fb6:	b004      	add	sp, #16
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20008268 	.word	0x20008268
 8005fc0:	2000241c 	.word	0x2000241c

08005fc4 <term_show_buffer>:
}

/*
 * Show the adc_raw_buf contents in terminal
 */
void term_show_buffer(uint8_t bufnum) {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	617b      	str	r3, [r7, #20]
	uint16_t address = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	827b      	strh	r3, [r7, #18]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d838      	bhi.n	800604e <term_show_buffer+0x8a>
	term_print("Buffer %d\r\n", bufnum);
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	481d      	ldr	r0, [pc, #116]	; (8006058 <term_show_buffer+0x94>)
 8005fe2:	f7ff ffc9 	bl	8005f78 <term_print>
	term_print("%3d: ", 0);
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	481c      	ldr	r0, [pc, #112]	; (800605c <term_show_buffer+0x98>)
 8005fea:	f7ff ffc5 	bl	8005f78 <term_print>
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e020      	b.n	8006036 <term_show_buffer+0x72>
		if (count >= 20) {
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	2b13      	cmp	r3, #19
 8005ff8:	dd06      	ble.n	8006008 <term_show_buffer+0x44>
			count =0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
			term_print("\r\n%3d: ", address);
 8005ffe:	8a7b      	ldrh	r3, [r7, #18]
 8006000:	4619      	mov	r1, r3
 8006002:	4817      	ldr	r0, [pc, #92]	; (8006060 <term_show_buffer+0x9c>)
 8006004:	f7ff ffb8 	bl	8005f78 <term_print>
		}
		term_print("%04u ", sample_buf[bufnum][i]);
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	4916      	ldr	r1, [pc, #88]	; (8006064 <term_show_buffer+0xa0>)
 800600c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006010:	fb03 f202 	mul.w	r2, r3, r2
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4413      	add	r3, r2
 8006018:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800601c:	4619      	mov	r1, r3
 800601e:	4812      	ldr	r0, [pc, #72]	; (8006068 <term_show_buffer+0xa4>)
 8006020:	f7ff ffaa 	bl	8005f78 <term_print>
		count++; address++;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	3301      	adds	r3, #1
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	8a7b      	ldrh	r3, [r7, #18]
 800602c:	3301      	adds	r3, #1
 800602e:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800603c:	d3da      	bcc.n	8005ff4 <term_show_buffer+0x30>
	}
	term_print("\r\n");
 800603e:	480b      	ldr	r0, [pc, #44]	; (800606c <term_show_buffer+0xa8>)
 8006040:	f7ff ff9a 	bl	8005f78 <term_print>
	term_show_channel(bufnum);
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	4618      	mov	r0, r3
 8006048:	f000 f8f4 	bl	8006234 <term_show_channel>
 800604c:	e000      	b.n	8006050 <term_show_buffer+0x8c>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800604e:	bf00      	nop
}
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	0801237c 	.word	0x0801237c
 800605c:	08012388 	.word	0x08012388
 8006060:	08012390 	.word	0x08012390
 8006064:	20007518 	.word	0x20007518
 8006068:	08012398 	.word	0x08012398
 800606c:	08012378 	.word	0x08012378

08006070 <term_show_measurements>:

void term_show_measurements() {
 8006070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006074:	b090      	sub	sp, #64	; 0x40
 8006076:	af0c      	add	r7, sp, #48	; 0x30
			term_print(" invalid readings\r\n");
			return;
		}
	}
	*/
	term_print("%.1fV \r\nI%d: %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", v_filtered, I1+1, i_filtered[I1], va_filtered[I1], w_filtered[I1], pf_filtered[I1], acos(pf_filtered[I1]) * (180.0 / 3.14159265) );
 8006078:	4b67      	ldr	r3, [pc, #412]	; (8006218 <term_show_measurements+0x1a8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f7fa fa83 	bl	8000588 <__aeabi_f2d>
 8006082:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006086:	4b65      	ldr	r3, [pc, #404]	; (800621c <term_show_measurements+0x1ac>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f7fa fa7c 	bl	8000588 <__aeabi_f2d>
 8006090:	4604      	mov	r4, r0
 8006092:	460d      	mov	r5, r1
 8006094:	4b62      	ldr	r3, [pc, #392]	; (8006220 <term_show_measurements+0x1b0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4618      	mov	r0, r3
 800609a:	f7fa fa75 	bl	8000588 <__aeabi_f2d>
 800609e:	4680      	mov	r8, r0
 80060a0:	4689      	mov	r9, r1
 80060a2:	4b60      	ldr	r3, [pc, #384]	; (8006224 <term_show_measurements+0x1b4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fa fa6e 	bl	8000588 <__aeabi_f2d>
 80060ac:	4682      	mov	sl, r0
 80060ae:	468b      	mov	fp, r1
 80060b0:	4b5d      	ldr	r3, [pc, #372]	; (8006228 <term_show_measurements+0x1b8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fa fa67 	bl	8000588 <__aeabi_f2d>
 80060ba:	e9c7 0100 	strd	r0, r1, [r7]
 80060be:	4b5a      	ldr	r3, [pc, #360]	; (8006228 <term_show_measurements+0x1b8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fa fa60 	bl	8000588 <__aeabi_f2d>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	ec43 2b10 	vmov	d0, r2, r3
 80060d0:	f00b fa68 	bl	80115a4 <acos>
 80060d4:	ec51 0b10 	vmov	r0, r1, d0
 80060d8:	a34d      	add	r3, pc, #308	; (adr r3, 8006210 <term_show_measurements+0x1a0>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f7fa faab 	bl	8000638 <__aeabi_dmul>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80060ea:	ed97 7b00 	vldr	d7, [r7]
 80060ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80060f2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80060f6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80060fa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80060fe:	2301      	movs	r3, #1
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006106:	4849      	ldr	r0, [pc, #292]	; (800622c <term_show_measurements+0x1bc>)
 8006108:	f7ff ff36 	bl	8005f78 <term_print>
	term_print("I%d: %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", I2+1, i_filtered[I2], va_filtered[I2], w_filtered[I2], pf_filtered[I2], acos(pf_filtered[I2]) * (180.0 / 3.14159265) );
 800610c:	4b43      	ldr	r3, [pc, #268]	; (800621c <term_show_measurements+0x1ac>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	4618      	mov	r0, r3
 8006112:	f7fa fa39 	bl	8000588 <__aeabi_f2d>
 8006116:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800611a:	4b41      	ldr	r3, [pc, #260]	; (8006220 <term_show_measurements+0x1b0>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	4618      	mov	r0, r3
 8006120:	f7fa fa32 	bl	8000588 <__aeabi_f2d>
 8006124:	4604      	mov	r4, r0
 8006126:	460d      	mov	r5, r1
 8006128:	4b3e      	ldr	r3, [pc, #248]	; (8006224 <term_show_measurements+0x1b4>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	4618      	mov	r0, r3
 800612e:	f7fa fa2b 	bl	8000588 <__aeabi_f2d>
 8006132:	4680      	mov	r8, r0
 8006134:	4689      	mov	r9, r1
 8006136:	4b3c      	ldr	r3, [pc, #240]	; (8006228 <term_show_measurements+0x1b8>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	4618      	mov	r0, r3
 800613c:	f7fa fa24 	bl	8000588 <__aeabi_f2d>
 8006140:	4682      	mov	sl, r0
 8006142:	468b      	mov	fp, r1
 8006144:	4b38      	ldr	r3, [pc, #224]	; (8006228 <term_show_measurements+0x1b8>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	4618      	mov	r0, r3
 800614a:	f7fa fa1d 	bl	8000588 <__aeabi_f2d>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	ec43 2b10 	vmov	d0, r2, r3
 8006156:	f00b fa25 	bl	80115a4 <acos>
 800615a:	ec51 0b10 	vmov	r0, r1, d0
 800615e:	a32c      	add	r3, pc, #176	; (adr r3, 8006210 <term_show_measurements+0x1a0>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f7fa fa68 	bl	8000638 <__aeabi_dmul>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006170:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006174:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006178:	e9cd 4500 	strd	r4, r5, [sp]
 800617c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006180:	2102      	movs	r1, #2
 8006182:	482b      	ldr	r0, [pc, #172]	; (8006230 <term_show_measurements+0x1c0>)
 8006184:	f7ff fef8 	bl	8005f78 <term_print>
	term_print("I%d: %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", I3+1, i_filtered[I3], va_filtered[I3], w_filtered[I3], pf_filtered[I3], acos(pf_filtered[I3]) * (180.0 / 3.14159265) );
 8006188:	4b24      	ldr	r3, [pc, #144]	; (800621c <term_show_measurements+0x1ac>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	4618      	mov	r0, r3
 800618e:	f7fa f9fb 	bl	8000588 <__aeabi_f2d>
 8006192:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006196:	4b22      	ldr	r3, [pc, #136]	; (8006220 <term_show_measurements+0x1b0>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	4618      	mov	r0, r3
 800619c:	f7fa f9f4 	bl	8000588 <__aeabi_f2d>
 80061a0:	4604      	mov	r4, r0
 80061a2:	460d      	mov	r5, r1
 80061a4:	4b1f      	ldr	r3, [pc, #124]	; (8006224 <term_show_measurements+0x1b4>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fa f9ed 	bl	8000588 <__aeabi_f2d>
 80061ae:	4680      	mov	r8, r0
 80061b0:	4689      	mov	r9, r1
 80061b2:	4b1d      	ldr	r3, [pc, #116]	; (8006228 <term_show_measurements+0x1b8>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fa f9e6 	bl	8000588 <__aeabi_f2d>
 80061bc:	4682      	mov	sl, r0
 80061be:	468b      	mov	fp, r1
 80061c0:	4b19      	ldr	r3, [pc, #100]	; (8006228 <term_show_measurements+0x1b8>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fa f9df 	bl	8000588 <__aeabi_f2d>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	ec43 2b10 	vmov	d0, r2, r3
 80061d2:	f00b f9e7 	bl	80115a4 <acos>
 80061d6:	ec51 0b10 	vmov	r0, r1, d0
 80061da:	a30d      	add	r3, pc, #52	; (adr r3, 8006210 <term_show_measurements+0x1a0>)
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f7fa fa2a 	bl	8000638 <__aeabi_dmul>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80061ec:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80061f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80061f4:	e9cd 4500 	strd	r4, r5, [sp]
 80061f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061fc:	2103      	movs	r1, #3
 80061fe:	480c      	ldr	r0, [pc, #48]	; (8006230 <term_show_measurements+0x1c0>)
 8006200:	f7ff feba 	bl	8005f78 <term_print>
}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800620e:	bf00      	nop
 8006210:	1af05a77 	.word	0x1af05a77
 8006214:	404ca5dc 	.word	0x404ca5dc
 8006218:	20000498 	.word	0x20000498
 800621c:	2000049c 	.word	0x2000049c
 8006220:	200004a8 	.word	0x200004a8
 8006224:	200004b4 	.word	0x200004b4
 8006228:	200004c0 	.word	0x200004c0
 800622c:	080123a0 	.word	0x080123a0
 8006230:	080123d4 	.word	0x080123d4

08006234 <term_show_channel>:

void term_show_channel(uint8_t bufnum) {
 8006234:	b5b0      	push	{r4, r5, r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	71fb      	strb	r3, [r7, #7]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800623e:	79fb      	ldrb	r3, [r7, #7]
 8006240:	2b03      	cmp	r3, #3
 8006242:	f200 80a5 	bhi.w	8006390 <term_show_channel+0x15c>
	term_print("Measurements Buffer %d:\r\n", bufnum);
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	4619      	mov	r1, r3
 800624a:	4853      	ldr	r0, [pc, #332]	; (8006398 <term_show_channel+0x164>)
 800624c:	f7ff fe94 	bl	8005f78 <term_print>
	if (sample_buf_meta[bufnum].measurements_valid != 1) {
 8006250:	79fa      	ldrb	r2, [r7, #7]
 8006252:	4952      	ldr	r1, [pc, #328]	; (800639c <term_show_channel+0x168>)
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	330c      	adds	r3, #12
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d004      	beq.n	8006270 <term_show_channel+0x3c>
		term_print("Buffer %d - invalid readings\r\n", bufnum);
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	4619      	mov	r1, r3
 800626a:	484d      	ldr	r0, [pc, #308]	; (80063a0 <term_show_channel+0x16c>)
 800626c:	f7ff fe84 	bl	8005f78 <term_print>
		//term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
		//return;
	}

	int pp_reading = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8006270:	79fa      	ldrb	r2, [r7, #7]
 8006272:	494a      	ldr	r1, [pc, #296]	; (800639c <term_show_channel+0x168>)
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	3302      	adds	r3, #2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	79fa      	ldrb	r2, [r7, #7]
 8006286:	4945      	ldr	r1, [pc, #276]	; (800639c <term_show_channel+0x168>)
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	440b      	add	r3, r1
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	1ac3      	subs	r3, r0, r3
 8006296:	60fb      	str	r3, [r7, #12]
	term_print("ADC raw: %d - %d (%d)\r\n", sample_buf_meta[bufnum].min, sample_buf_meta[bufnum].max, pp_reading );
 8006298:	79fa      	ldrb	r2, [r7, #7]
 800629a:	4940      	ldr	r1, [pc, #256]	; (800639c <term_show_channel+0x168>)
 800629c:	4613      	mov	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	440b      	add	r3, r1
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	4618      	mov	r0, r3
 80062aa:	79fa      	ldrb	r2, [r7, #7]
 80062ac:	493b      	ldr	r1, [pc, #236]	; (800639c <term_show_channel+0x168>)
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	440b      	add	r3, r1
 80062b8:	3302      	adds	r3, #2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4601      	mov	r1, r0
 80062c2:	4838      	ldr	r0, [pc, #224]	; (80063a4 <term_show_channel+0x170>)
 80062c4:	f7ff fe58 	bl	8005f78 <term_print>
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 80062c8:	79fa      	ldrb	r2, [r7, #7]
 80062ca:	4934      	ldr	r1, [pc, #208]	; (800639c <term_show_channel+0x168>)
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	3310      	adds	r3, #16
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	b21b      	sxth	r3, r3
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fc fb9b 	bl	8002a18 <calc_adc_raw_to_mv_int>
 80062e2:	4604      	mov	r4, r0
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	b21b      	sxth	r3, r3
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fc fb95 	bl	8002a18 <calc_adc_raw_to_mv_int>
 80062ee:	4605      	mov	r5, r0
			calc_adc_raw_to_mv_int(pp_reading),
			calc_adc_raw_to_mv_int(pp_reading/2 + sample_buf_meta[bufnum].min) );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	0fda      	lsrs	r2, r3, #31
 80062f4:	4413      	add	r3, r2
 80062f6:	105b      	asrs	r3, r3, #1
 80062f8:	b299      	uxth	r1, r3
 80062fa:	79fa      	ldrb	r2, [r7, #7]
 80062fc:	4827      	ldr	r0, [pc, #156]	; (800639c <term_show_channel+0x168>)
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4403      	add	r3, r0
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	440b      	add	r3, r1
 800630c:	b29b      	uxth	r3, r3
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 800630e:	b21b      	sxth	r3, r3
 8006310:	4618      	mov	r0, r3
 8006312:	f7fc fb81 	bl	8002a18 <calc_adc_raw_to_mv_int>
 8006316:	4603      	mov	r3, r0
 8006318:	462a      	mov	r2, r5
 800631a:	4621      	mov	r1, r4
 800631c:	4822      	ldr	r0, [pc, #136]	; (80063a8 <term_show_channel+0x174>)
 800631e:	f7ff fe2b 	bl	8005f78 <term_print>
	term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8006322:	79fa      	ldrb	r2, [r7, #7]
 8006324:	491d      	ldr	r1, [pc, #116]	; (800639c <term_show_channel+0x168>)
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	b21b      	sxth	r3, r3
 8006334:	4618      	mov	r0, r3
 8006336:	f7fc fb6f 	bl	8002a18 <calc_adc_raw_to_mv_int>
 800633a:	4604      	mov	r4, r0
 800633c:	79fa      	ldrb	r2, [r7, #7]
 800633e:	4917      	ldr	r1, [pc, #92]	; (800639c <term_show_channel+0x168>)
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	440b      	add	r3, r1
 800634a:	3302      	adds	r3, #2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b21b      	sxth	r3, r3
 8006350:	4618      	mov	r0, r3
 8006352:	f7fc fb61 	bl	8002a18 <calc_adc_raw_to_mv_int>
 8006356:	4603      	mov	r3, r0
 8006358:	461a      	mov	r2, r3
 800635a:	4621      	mov	r1, r4
 800635c:	4813      	ldr	r0, [pc, #76]	; (80063ac <term_show_channel+0x178>)
 800635e:	f7ff fe0b 	bl	8005f78 <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[bufnum].zero_cross_pos, sample_buf_meta[bufnum].zero_cross_neg);
 8006362:	79fa      	ldrb	r2, [r7, #7]
 8006364:	490d      	ldr	r1, [pc, #52]	; (800639c <term_show_channel+0x168>)
 8006366:	4613      	mov	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	440b      	add	r3, r1
 8006370:	3304      	adds	r3, #4
 8006372:	6819      	ldr	r1, [r3, #0]
 8006374:	79fa      	ldrb	r2, [r7, #7]
 8006376:	4809      	ldr	r0, [pc, #36]	; (800639c <term_show_channel+0x168>)
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4403      	add	r3, r0
 8006382:	3308      	adds	r3, #8
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	4809      	ldr	r0, [pc, #36]	; (80063b0 <term_show_channel+0x17c>)
 800638a:	f7ff fdf5 	bl	8005f78 <term_print>
 800638e:	e000      	b.n	8006392 <term_show_channel+0x15e>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8006390:	bf00      	nop
}
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bdb0      	pop	{r4, r5, r7, pc}
 8006398:	08012400 	.word	0x08012400
 800639c:	2000023c 	.word	0x2000023c
 80063a0:	0801241c 	.word	0x0801241c
 80063a4:	0801243c 	.word	0x0801243c
 80063a8:	08012454 	.word	0x08012454
 80063ac:	08012478 	.word	0x08012478
 80063b0:	08012490 	.word	0x08012490

080063b4 <term_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void term_csv_buffer(uint8_t buf_num) {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	71fb      	strb	r3, [r7, #7]
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d821      	bhi.n	8006408 <term_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	4619      	mov	r1, r3
 80063c8:	4811      	ldr	r0, [pc, #68]	; (8006410 <term_csv_buffer+0x5c>)
 80063ca:	f7ff fdd5 	bl	8005f78 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e011      	b.n	80063f8 <term_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 80063d4:	79fb      	ldrb	r3, [r7, #7]
 80063d6:	490f      	ldr	r1, [pc, #60]	; (8006414 <term_csv_buffer+0x60>)
 80063d8:	f44f 7252 	mov.w	r2, #840	; 0x348
 80063dc:	fb03 f202 	mul.w	r2, r3, r2
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4413      	add	r3, r2
 80063e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80063e8:	461a      	mov	r2, r3
 80063ea:	68f9      	ldr	r1, [r7, #12]
 80063ec:	480a      	ldr	r0, [pc, #40]	; (8006418 <term_csv_buffer+0x64>)
 80063ee:	f7ff fdc3 	bl	8005f78 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3301      	adds	r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 80063fe:	d3e9      	bcc.n	80063d4 <term_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 8006400:	4806      	ldr	r0, [pc, #24]	; (800641c <term_csv_buffer+0x68>)
 8006402:	f7ff fdb9 	bl	8005f78 <term_print>
 8006406:	e000      	b.n	800640a <term_csv_buffer+0x56>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8006408:	bf00      	nop
}
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	0801237c 	.word	0x0801237c
 8006414:	20005ad8 	.word	0x20005ad8
 8006418:	080124b0 	.word	0x080124b0
 800641c:	080124b8 	.word	0x080124b8

08006420 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8006424:	2180      	movs	r1, #128	; 0x80
 8006426:	480f      	ldr	r0, [pc, #60]	; (8006464 <Displ_Select+0x44>)
 8006428:	f003 fb94 	bl	8009b54 <HAL_GPIO_ReadPin>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d015      	beq.n	800645e <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8006432:	2201      	movs	r2, #1
 8006434:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006438:	480b      	ldr	r0, [pc, #44]	; (8006468 <Displ_Select+0x48>)
 800643a:	f003 fba3 	bl	8009b84 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 800643e:	4b0b      	ldr	r3, [pc, #44]	; (800646c <Displ_Select+0x4c>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	490a      	ldr	r1, [pc, #40]	; (800646c <Displ_Select+0x4c>)
 8006444:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8006448:	4013      	ands	r3, r2
 800644a:	600b      	str	r3, [r1, #0]
 800644c:	4b07      	ldr	r3, [pc, #28]	; (800646c <Displ_Select+0x4c>)
 800644e:	4a07      	ldr	r2, [pc, #28]	; (800646c <Displ_Select+0x4c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8006454:	2200      	movs	r2, #0
 8006456:	2180      	movs	r1, #128	; 0x80
 8006458:	4802      	ldr	r0, [pc, #8]	; (8006464 <Displ_Select+0x44>)
 800645a:	f003 fb93 	bl	8009b84 <HAL_GPIO_WritePin>
		}
	}
}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40020800 	.word	0x40020800
 8006468:	40020000 	.word	0x40020000
 800646c:	40003800 	.word	0x40003800

08006470 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6039      	str	r1, [r7, #0]
 8006478:	4611      	mov	r1, r2
 800647a:	461a      	mov	r2, r3
 800647c:	4603      	mov	r3, r0
 800647e:	71fb      	strb	r3, [r7, #7]
 8006480:	460b      	mov	r3, r1
 8006482:	80bb      	strh	r3, [r7, #4]
 8006484:	4613      	mov	r3, r2
 8006486:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8006488:	bf00      	nop
 800648a:	4b22      	ldr	r3, [pc, #136]	; (8006514 <Displ_Transmit+0xa4>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0fa      	beq.n	800648a <Displ_Transmit+0x1a>

	Displ_Select();
 8006494:	f7ff ffc4 	bl	8006420 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	461a      	mov	r2, r3
 800649c:	2180      	movs	r1, #128	; 0x80
 800649e:	481e      	ldr	r0, [pc, #120]	; (8006518 <Displ_Transmit+0xa8>)
 80064a0:	f003 fb70 	bl	8009b84 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 80064a4:	79bb      	ldrb	r3, [r7, #6]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d016      	beq.n	80064d8 <Displ_Transmit+0x68>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 80064aa:	88bb      	ldrh	r3, [r7, #4]
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	4413      	add	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e00b      	b.n	80064d0 <Displ_Transmit+0x60>
			*data32=__REV16(*data32);
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	ba5b      	rev16	r3, r3
 80064c2:	60bb      	str	r3, [r7, #8]
  return result;
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	3304      	adds	r3, #4
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d3ef      	bcc.n	80064b8 <Displ_Transmit+0x48>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 80064d8:	88bb      	ldrh	r3, [r7, #4]
 80064da:	2b13      	cmp	r3, #19
 80064dc:	d80d      	bhi.n	80064fa <Displ_Transmit+0x8a>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 80064de:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <Displ_Transmit+0xa4>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 80064e4:	88ba      	ldrh	r2, [r7, #4]
 80064e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	480b      	ldr	r0, [pc, #44]	; (800651c <Displ_Transmit+0xac>)
 80064ee:	f005 fb44 	bl	800bb7a <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 80064f2:	4b08      	ldr	r3, [pc, #32]	; (8006514 <Displ_Transmit+0xa4>)
 80064f4:	2201      	movs	r2, #1
 80064f6:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 80064f8:	e008      	b.n	800650c <Displ_Transmit+0x9c>
			Displ_SpiAvailable=0;
 80064fa:	4b06      	ldr	r3, [pc, #24]	; (8006514 <Displ_Transmit+0xa4>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8006500:	88bb      	ldrh	r3, [r7, #4]
 8006502:	461a      	mov	r2, r3
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	4805      	ldr	r0, [pc, #20]	; (800651c <Displ_Transmit+0xac>)
 8006508:	f005 fc74 	bl	800bdf4 <HAL_SPI_Transmit_DMA>
	}
 800650c:	bf00      	nop
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20000034 	.word	0x20000034
 8006518:	40020000 	.word	0x40020000
 800651c:	2000231c 	.word	0x2000231c

08006520 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	4603      	mov	r3, r0
 8006528:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 800652a:	1df9      	adds	r1, r7, #7
 800652c:	2300      	movs	r3, #0
 800652e:	2201      	movs	r2, #1
 8006530:	2000      	movs	r0, #0
 8006532:	f7ff ff9d 	bl	8006470 <Displ_Transmit>
}
 8006536:	bf00      	nop
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	4613      	mov	r3, r2
 800654a:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	b29a      	uxth	r2, r3
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	68f9      	ldr	r1, [r7, #12]
 800655a:	2001      	movs	r0, #1
 800655c:	f7ff ff88 	bl	8006470 <Displ_Transmit>
 8006560:	e000      	b.n	8006564 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8006562:	bf00      	nop
}
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
	Displ_Select();
 8006570:	f7ff ff56 	bl	8006420 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8006574:	2200      	movs	r2, #0
 8006576:	2140      	movs	r1, #64	; 0x40
 8006578:	4819      	ldr	r0, [pc, #100]	; (80065e0 <ILI9XXX_Init+0x74>)
 800657a:	f003 fb03 	bl	8009b84 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800657e:	2001      	movs	r0, #1
 8006580:	f002 f818 	bl	80085b4 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8006584:	2201      	movs	r2, #1
 8006586:	2140      	movs	r1, #64	; 0x40
 8006588:	4815      	ldr	r0, [pc, #84]	; (80065e0 <ILI9XXX_Init+0x74>)
 800658a:	f003 fafb 	bl	8009b84 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 800658e:	20a5      	movs	r0, #165	; 0xa5
 8006590:	f002 f810 	bl	80085b4 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8006594:	203a      	movs	r0, #58	; 0x3a
 8006596:	f7ff ffc3 	bl	8006520 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 800659a:	2200      	movs	r2, #0
 800659c:	2101      	movs	r1, #1
 800659e:	4811      	ldr	r0, [pc, #68]	; (80065e4 <ILI9XXX_Init+0x78>)
 80065a0:	f7ff ffcd 	bl	800653e <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 80065a4:	20b0      	movs	r0, #176	; 0xb0
 80065a6:	f7ff ffbb 	bl	8006520 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 80065aa:	2200      	movs	r2, #0
 80065ac:	2101      	movs	r1, #1
 80065ae:	480e      	ldr	r0, [pc, #56]	; (80065e8 <ILI9XXX_Init+0x7c>)
 80065b0:	f7ff ffc5 	bl	800653e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 80065b4:	20b0      	movs	r0, #176	; 0xb0
 80065b6:	f7ff ffb3 	bl	8006520 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 80065ba:	2200      	movs	r2, #0
 80065bc:	2101      	movs	r1, #1
 80065be:	480a      	ldr	r0, [pc, #40]	; (80065e8 <ILI9XXX_Init+0x7c>)
 80065c0:	f7ff ffbd 	bl	800653e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 80065c4:	2011      	movs	r0, #17
 80065c6:	f7ff ffab 	bl	8006520 <Displ_WriteCommand>
	HAL_Delay(120);
 80065ca:	2078      	movs	r0, #120	; 0x78
 80065cc:	f001 fff2 	bl	80085b4 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 80065d0:	2029      	movs	r0, #41	; 0x29
 80065d2:	f7ff ffa5 	bl	8006520 <Displ_WriteCommand>
	HAL_Delay(5);
 80065d6:	2005      	movs	r0, #5
 80065d8:	f001 ffec 	bl	80085b4 <HAL_Delay>

}
 80065dc:	bf00      	nop
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	40020400 	.word	0x40020400
 80065e4:	080124c0 	.word	0x080124c0
 80065e8:	080124c4 	.word	0x080124c4

080065ec <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80065ec:	b590      	push	{r4, r7, lr}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4604      	mov	r4, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	461a      	mov	r2, r3
 80065fa:	4623      	mov	r3, r4
 80065fc:	80fb      	strh	r3, [r7, #6]
 80065fe:	4603      	mov	r3, r0
 8006600:	80bb      	strh	r3, [r7, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	807b      	strh	r3, [r7, #2]
 8006606:	4613      	mov	r3, r2
 8006608:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 800660a:	887b      	ldrh	r3, [r7, #2]
 800660c:	061a      	lsls	r2, r3, #24
 800660e:	887b      	ldrh	r3, [r7, #2]
 8006610:	021b      	lsls	r3, r3, #8
 8006612:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006616:	431a      	orrs	r2, r3
 8006618:	88fb      	ldrh	r3, [r7, #6]
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	b29b      	uxth	r3, r3
 800661e:	4313      	orrs	r3, r2
 8006620:	88fa      	ldrh	r2, [r7, #6]
 8006622:	0a12      	lsrs	r2, r2, #8
 8006624:	b292      	uxth	r2, r2
 8006626:	431a      	orrs	r2, r3
 8006628:	4b14      	ldr	r3, [pc, #80]	; (800667c <Displ_SetAddressWindow+0x90>)
 800662a:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 800662c:	202a      	movs	r0, #42	; 0x2a
 800662e:	f7ff ff77 	bl	8006520 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8006632:	2200      	movs	r2, #0
 8006634:	2104      	movs	r1, #4
 8006636:	4811      	ldr	r0, [pc, #68]	; (800667c <Displ_SetAddressWindow+0x90>)
 8006638:	f7ff ff81 	bl	800653e <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 800663c:	883b      	ldrh	r3, [r7, #0]
 800663e:	061a      	lsls	r2, r3, #24
 8006640:	883b      	ldrh	r3, [r7, #0]
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006648:	431a      	orrs	r2, r3
 800664a:	88bb      	ldrh	r3, [r7, #4]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	b29b      	uxth	r3, r3
 8006650:	4313      	orrs	r3, r2
 8006652:	88ba      	ldrh	r2, [r7, #4]
 8006654:	0a12      	lsrs	r2, r2, #8
 8006656:	b292      	uxth	r2, r2
 8006658:	431a      	orrs	r2, r3
 800665a:	4b08      	ldr	r3, [pc, #32]	; (800667c <Displ_SetAddressWindow+0x90>)
 800665c:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 800665e:	202b      	movs	r0, #43	; 0x2b
 8006660:	f7ff ff5e 	bl	8006520 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8006664:	2200      	movs	r2, #0
 8006666:	2104      	movs	r1, #4
 8006668:	4804      	ldr	r0, [pc, #16]	; (800667c <Displ_SetAddressWindow+0x90>)
 800666a:	f7ff ff68 	bl	800653e <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 800666e:	202c      	movs	r0, #44	; 0x2c
 8006670:	f7ff ff56 	bl	8006520 <Displ_WriteCommand>
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	bd90      	pop	{r4, r7, pc}
 800667c:	20009670 	.word	0x20009670

08006680 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 800668a:	2201      	movs	r2, #1
 800668c:	2180      	movs	r1, #128	; 0x80
 800668e:	4809      	ldr	r0, [pc, #36]	; (80066b4 <Displ_Init+0x34>)
 8006690:	f003 fa78 	bl	8009b84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8006694:	2201      	movs	r2, #1
 8006696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800669a:	4807      	ldr	r0, [pc, #28]	; (80066b8 <Displ_Init+0x38>)
 800669c:	f003 fa72 	bl	8009b84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 80066a0:	f7ff ff64 	bl	800656c <ILI9XXX_Init>
	Displ_Orientation(orientation);
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 f808 	bl	80066bc <Displ_Orientation>
}
 80066ac:	bf00      	nop
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	40020800 	.word	0x40020800
 80066b8:	40020000 	.word	0x40020000

080066bc <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d837      	bhi.n	800673c <Displ_Orientation+0x80>
 80066cc:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <Displ_Orientation+0x18>)
 80066ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d2:	bf00      	nop
 80066d4:	080066e5 	.word	0x080066e5
 80066d8:	080066fb 	.word	0x080066fb
 80066dc:	08006711 	.word	0x08006711
 80066e0:	08006727 	.word	0x08006727
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 80066e4:	4b1d      	ldr	r3, [pc, #116]	; (800675c <Displ_Orientation+0xa0>)
 80066e6:	2288      	movs	r2, #136	; 0x88
 80066e8:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 80066ea:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <Displ_Orientation+0xa4>)
 80066ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80066f0:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 80066f2:	4b1c      	ldr	r3, [pc, #112]	; (8006764 <Displ_Orientation+0xa8>)
 80066f4:	22f0      	movs	r2, #240	; 0xf0
 80066f6:	801a      	strh	r2, [r3, #0]
			break;
 80066f8:	e020      	b.n	800673c <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 80066fa:	4b18      	ldr	r3, [pc, #96]	; (800675c <Displ_Orientation+0xa0>)
 80066fc:	22e8      	movs	r2, #232	; 0xe8
 80066fe:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8006700:	4b17      	ldr	r3, [pc, #92]	; (8006760 <Displ_Orientation+0xa4>)
 8006702:	22f0      	movs	r2, #240	; 0xf0
 8006704:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8006706:	4b17      	ldr	r3, [pc, #92]	; (8006764 <Displ_Orientation+0xa8>)
 8006708:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800670c:	801a      	strh	r2, [r3, #0]
			break;
 800670e:	e015      	b.n	800673c <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8006710:	4b12      	ldr	r3, [pc, #72]	; (800675c <Displ_Orientation+0xa0>)
 8006712:	2248      	movs	r2, #72	; 0x48
 8006714:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8006716:	4b12      	ldr	r3, [pc, #72]	; (8006760 <Displ_Orientation+0xa4>)
 8006718:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800671c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 800671e:	4b11      	ldr	r3, [pc, #68]	; (8006764 <Displ_Orientation+0xa8>)
 8006720:	22f0      	movs	r2, #240	; 0xf0
 8006722:	801a      	strh	r2, [r3, #0]
			break;
 8006724:	e00a      	b.n	800673c <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8006726:	4b0d      	ldr	r3, [pc, #52]	; (800675c <Displ_Orientation+0xa0>)
 8006728:	2228      	movs	r2, #40	; 0x28
 800672a:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 800672c:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <Displ_Orientation+0xa4>)
 800672e:	22f0      	movs	r2, #240	; 0xf0
 8006730:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8006732:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <Displ_Orientation+0xa8>)
 8006734:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006738:	801a      	strh	r2, [r3, #0]
			break;
 800673a:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 800673c:	2036      	movs	r0, #54	; 0x36
 800673e:	f7ff feef 	bl	8006520 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8006742:	2200      	movs	r2, #0
 8006744:	2101      	movs	r1, #1
 8006746:	4805      	ldr	r0, [pc, #20]	; (800675c <Displ_Orientation+0xa0>)
 8006748:	f7ff fef9 	bl	800653e <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 800674c:	4a06      	ldr	r2, [pc, #24]	; (8006768 <Displ_Orientation+0xac>)
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	7013      	strb	r3, [r2, #0]
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20009674 	.word	0x20009674
 8006760:	2000866c 	.word	0x2000866c
 8006764:	2000866a 	.word	0x2000866a
 8006768:	20008668 	.word	0x20008668

0800676c <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a05      	ldr	r2, [pc, #20]	; (8006790 <HAL_SPI_ErrorCallback+0x24>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d102      	bne.n	8006784 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 800677e:	4b05      	ldr	r3, [pc, #20]	; (8006794 <HAL_SPI_ErrorCallback+0x28>)
 8006780:	2201      	movs	r2, #1
 8006782:	701a      	strb	r2, [r3, #0]
	}
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	40003800 	.word	0x40003800
 8006794:	20000034 	.word	0x20000034

08006798 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a05      	ldr	r2, [pc, #20]	; (80067bc <HAL_SPI_TxCpltCallback+0x24>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d102      	bne.n	80067b0 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <HAL_SPI_TxCpltCallback+0x28>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	40003800 	.word	0x40003800
 80067c0:	20000034 	.word	0x20000034

080067c4 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80067c4:	b590      	push	{r4, r7, lr}
 80067c6:	b08b      	sub	sp, #44	; 0x2c
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4604      	mov	r4, r0
 80067cc:	4608      	mov	r0, r1
 80067ce:	4611      	mov	r1, r2
 80067d0:	461a      	mov	r2, r3
 80067d2:	4623      	mov	r3, r4
 80067d4:	80fb      	strh	r3, [r7, #6]
 80067d6:	4603      	mov	r3, r0
 80067d8:	80bb      	strh	r3, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	807b      	strh	r3, [r7, #2]
 80067de:	4613      	mov	r3, r2
 80067e0:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	4a4f      	ldr	r2, [pc, #316]	; (8006924 <Displ_FillArea+0x160>)
 80067e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80067ea:	4293      	cmp	r3, r2
 80067ec:	f280 8096 	bge.w	800691c <Displ_FillArea+0x158>
 80067f0:	88bb      	ldrh	r3, [r7, #4]
 80067f2:	4a4d      	ldr	r2, [pc, #308]	; (8006928 <Displ_FillArea+0x164>)
 80067f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80067f8:	4293      	cmp	r3, r2
 80067fa:	f280 808f 	bge.w	800691c <Displ_FillArea+0x158>
 80067fe:	887b      	ldrh	r3, [r7, #2]
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 808b 	beq.w	800691c <Displ_FillArea+0x158>
 8006806:	883b      	ldrh	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 8087 	beq.w	800691c <Displ_FillArea+0x158>

	x1=x + w - 1;
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	887b      	ldrh	r3, [r7, #2]
 8006812:	4413      	add	r3, r2
 8006814:	3b01      	subs	r3, #1
 8006816:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8006818:	4b42      	ldr	r3, [pc, #264]	; (8006924 <Displ_FillArea+0x160>)
 800681a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800681e:	461a      	mov	r2, r3
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	4293      	cmp	r3, r2
 8006824:	d903      	bls.n	800682e <Displ_FillArea+0x6a>
		x1=_width;
 8006826:	4b3f      	ldr	r3, [pc, #252]	; (8006924 <Displ_FillArea+0x160>)
 8006828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800682c:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 800682e:	88ba      	ldrh	r2, [r7, #4]
 8006830:	883b      	ldrh	r3, [r7, #0]
 8006832:	4413      	add	r3, r2
 8006834:	3b01      	subs	r3, #1
 8006836:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8006838:	4b3b      	ldr	r3, [pc, #236]	; (8006928 <Displ_FillArea+0x164>)
 800683a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800683e:	461a      	mov	r2, r3
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	4293      	cmp	r3, r2
 8006844:	d903      	bls.n	800684e <Displ_FillArea+0x8a>
		y1=_height;
 8006846:	4b38      	ldr	r3, [pc, #224]	; (8006928 <Displ_FillArea+0x164>)
 8006848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800684c:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 800684e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006850:	0a1b      	lsrs	r3, r3, #8
 8006852:	b29b      	uxth	r3, r3
 8006854:	461a      	mov	r2, r3
 8006856:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006858:	021b      	lsls	r3, r3, #8
 800685a:	431a      	orrs	r2, r3
 800685c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800685e:	061b      	lsls	r3, r3, #24
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 8006864:	88bb      	ldrh	r3, [r7, #4]
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	3301      	adds	r3, #1
 800686c:	88fa      	ldrh	r2, [r7, #6]
 800686e:	6a39      	ldr	r1, [r7, #32]
 8006870:	1a8a      	subs	r2, r1, r2
 8006872:	3201      	adds	r2, #1
 8006874:	fb02 f303 	mul.w	r3, r2, r3
 8006878:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 800687a:	4b2c      	ldr	r3, [pc, #176]	; (800692c <Displ_FillArea+0x168>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006886:	d204      	bcs.n	8006892 <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	3301      	adds	r3, #1
 800688e:	61bb      	str	r3, [r7, #24]
 8006890:	e002      	b.n	8006898 <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 8006892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006896:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8006898:	2300      	movs	r3, #0
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
 800689c:	e007      	b.n	80068ae <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	1d1a      	adds	r2, r3, #4
 80068a2:	617a      	str	r2, [r7, #20]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	3301      	adds	r3, #1
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
 80068ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d3f3      	bcc.n	800689e <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	88b9      	ldrh	r1, [r7, #4]
 80068c0:	88f8      	ldrh	r0, [r7, #6]
 80068c2:	f7ff fe93 	bl	80065ec <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	0a9b      	lsrs	r3, r3, #10
 80068ca:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 80068cc:	2300      	movs	r3, #0
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
 80068d0:	e00a      	b.n	80068e8 <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 80068d2:	4b16      	ldr	r3, [pc, #88]	; (800692c <Displ_FillArea+0x168>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff fe2e 	bl	800653e <Displ_WriteData>
	for  (k=0;k<times;k++) {
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	3301      	adds	r3, #1
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
 80068e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d3f0      	bcc.n	80068d2 <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 80068f0:	4b0e      	ldr	r3, [pc, #56]	; (800692c <Displ_FillArea+0x168>)
 80068f2:	6818      	ldr	r0, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	005a      	lsls	r2, r3, #1
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	02db      	lsls	r3, r3, #11
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2200      	movs	r2, #0
 8006900:	4619      	mov	r1, r3
 8006902:	f7ff fe1c 	bl	800653e <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8006906:	4b09      	ldr	r3, [pc, #36]	; (800692c <Displ_FillArea+0x168>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a09      	ldr	r2, [pc, #36]	; (8006930 <Displ_FillArea+0x16c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d101      	bne.n	8006914 <Displ_FillArea+0x150>
 8006910:	4b08      	ldr	r3, [pc, #32]	; (8006934 <Displ_FillArea+0x170>)
 8006912:	e000      	b.n	8006916 <Displ_FillArea+0x152>
 8006914:	4b06      	ldr	r3, [pc, #24]	; (8006930 <Displ_FillArea+0x16c>)
 8006916:	4a05      	ldr	r2, [pc, #20]	; (800692c <Displ_FillArea+0x168>)
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	e000      	b.n	800691e <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 800691c:	bf00      	nop

}
 800691e:	372c      	adds	r7, #44	; 0x2c
 8006920:	46bd      	mov	sp, r7
 8006922:	bd90      	pop	{r4, r7, pc}
 8006924:	2000866a 	.word	0x2000866a
 8006928:	2000866c 	.word	0x2000866c
 800692c:	20000038 	.word	0x20000038
 8006930:	20008670 	.word	0x20008670
 8006934:	20008e70 	.word	0x20008e70

08006938 <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af02      	add	r7, sp, #8
 800693e:	4603      	mov	r3, r0
 8006940:	80fb      	strh	r3, [r7, #6]
 8006942:	460b      	mov	r3, r1
 8006944:	80bb      	strh	r3, [r7, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800694a:	88fb      	ldrh	r3, [r7, #6]
 800694c:	4a0b      	ldr	r2, [pc, #44]	; (800697c <Displ_Pixel+0x44>)
 800694e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006952:	4293      	cmp	r3, r2
 8006954:	da0e      	bge.n	8006974 <Displ_Pixel+0x3c>
 8006956:	88bb      	ldrh	r3, [r7, #4]
 8006958:	4a09      	ldr	r2, [pc, #36]	; (8006980 <Displ_Pixel+0x48>)
 800695a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800695e:	4293      	cmp	r3, r2
 8006960:	da08      	bge.n	8006974 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8006962:	88b9      	ldrh	r1, [r7, #4]
 8006964:	88f8      	ldrh	r0, [r7, #6]
 8006966:	887b      	ldrh	r3, [r7, #2]
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	2301      	movs	r3, #1
 800696c:	2201      	movs	r2, #1
 800696e:	f7ff ff29 	bl	80067c4 <Displ_FillArea>
 8006972:	e000      	b.n	8006976 <Displ_Pixel+0x3e>
        return;
 8006974:	bf00      	nop

}
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	2000866a 	.word	0x2000866a
 8006980:	2000866c 	.word	0x2000866c

08006984 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8006984:	b590      	push	{r4, r7, lr}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	4611      	mov	r1, r2
 8006990:	461a      	mov	r2, r3
 8006992:	4623      	mov	r3, r4
 8006994:	80fb      	strh	r3, [r7, #6]
 8006996:	4603      	mov	r3, r0
 8006998:	80bb      	strh	r3, [r7, #4]
 800699a:	460b      	mov	r3, r1
 800699c:	807b      	strh	r3, [r7, #2]
 800699e:	4613      	mov	r3, r2
 80069a0:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 80069a2:	887b      	ldrh	r3, [r7, #2]
 80069a4:	f1c3 0301 	rsb	r3, r3, #1
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80069ac:	2301      	movs	r3, #1
 80069ae:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80069b0:	887b      	ldrh	r3, [r7, #2]
 80069b2:	461a      	mov	r2, r3
 80069b4:	03d2      	lsls	r2, r2, #15
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 80069c2:	887b      	ldrh	r3, [r7, #2]
 80069c4:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 80069c6:	88f8      	ldrh	r0, [r7, #6]
 80069c8:	88ba      	ldrh	r2, [r7, #4]
 80069ca:	887b      	ldrh	r3, [r7, #2]
 80069cc:	4413      	add	r3, r2
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	883a      	ldrh	r2, [r7, #0]
 80069d2:	4619      	mov	r1, r3
 80069d4:	f7ff ffb0 	bl	8006938 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 80069d8:	88f8      	ldrh	r0, [r7, #6]
 80069da:	88ba      	ldrh	r2, [r7, #4]
 80069dc:	887b      	ldrh	r3, [r7, #2]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	883a      	ldrh	r2, [r7, #0]
 80069e4:	4619      	mov	r1, r3
 80069e6:	f7ff ffa7 	bl	8006938 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	887b      	ldrh	r3, [r7, #2]
 80069ee:	4413      	add	r3, r2
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	88b9      	ldrh	r1, [r7, #4]
 80069f4:	883a      	ldrh	r2, [r7, #0]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7ff ff9e 	bl	8006938 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 80069fc:	88fa      	ldrh	r2, [r7, #6]
 80069fe:	887b      	ldrh	r3, [r7, #2]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	88b9      	ldrh	r1, [r7, #4]
 8006a06:	883a      	ldrh	r2, [r7, #0]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff ff95 	bl	8006938 <Displ_Pixel>

    while (x<y) {
 8006a0e:	e081      	b.n	8006b14 <Displ_drawCircle+0x190>
        if (f >= 0) {
 8006a10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	db0e      	blt.n	8006a36 <Displ_drawCircle+0xb2>
            y--;
 8006a18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8006a24:	8a7b      	ldrh	r3, [r7, #18]
 8006a26:	3302      	adds	r3, #2
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8006a2c:	8afa      	ldrh	r2, [r7, #22]
 8006a2e:	8a7b      	ldrh	r3, [r7, #18]
 8006a30:	4413      	add	r3, r2
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8006a36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8006a42:	8abb      	ldrh	r3, [r7, #20]
 8006a44:	3302      	adds	r3, #2
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8006a4a:	8afa      	ldrh	r2, [r7, #22]
 8006a4c:	8abb      	ldrh	r3, [r7, #20]
 8006a4e:	4413      	add	r3, r2
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8006a54:	88fa      	ldrh	r2, [r7, #6]
 8006a56:	8a3b      	ldrh	r3, [r7, #16]
 8006a58:	4413      	add	r3, r2
 8006a5a:	b298      	uxth	r0, r3
 8006a5c:	88ba      	ldrh	r2, [r7, #4]
 8006a5e:	89fb      	ldrh	r3, [r7, #14]
 8006a60:	4413      	add	r3, r2
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	883a      	ldrh	r2, [r7, #0]
 8006a66:	4619      	mov	r1, r3
 8006a68:	f7ff ff66 	bl	8006938 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8006a6c:	88fa      	ldrh	r2, [r7, #6]
 8006a6e:	8a3b      	ldrh	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	b298      	uxth	r0, r3
 8006a74:	88ba      	ldrh	r2, [r7, #4]
 8006a76:	89fb      	ldrh	r3, [r7, #14]
 8006a78:	4413      	add	r3, r2
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	883a      	ldrh	r2, [r7, #0]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	f7ff ff5a 	bl	8006938 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8006a84:	88fa      	ldrh	r2, [r7, #6]
 8006a86:	8a3b      	ldrh	r3, [r7, #16]
 8006a88:	4413      	add	r3, r2
 8006a8a:	b298      	uxth	r0, r3
 8006a8c:	88ba      	ldrh	r2, [r7, #4]
 8006a8e:	89fb      	ldrh	r3, [r7, #14]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	883a      	ldrh	r2, [r7, #0]
 8006a96:	4619      	mov	r1, r3
 8006a98:	f7ff ff4e 	bl	8006938 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8006a9c:	88fa      	ldrh	r2, [r7, #6]
 8006a9e:	8a3b      	ldrh	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	b298      	uxth	r0, r3
 8006aa4:	88ba      	ldrh	r2, [r7, #4]
 8006aa6:	89fb      	ldrh	r3, [r7, #14]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	883a      	ldrh	r2, [r7, #0]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	f7ff ff42 	bl	8006938 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8006ab4:	88fa      	ldrh	r2, [r7, #6]
 8006ab6:	89fb      	ldrh	r3, [r7, #14]
 8006ab8:	4413      	add	r3, r2
 8006aba:	b298      	uxth	r0, r3
 8006abc:	88ba      	ldrh	r2, [r7, #4]
 8006abe:	8a3b      	ldrh	r3, [r7, #16]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	883a      	ldrh	r2, [r7, #0]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	f7ff ff36 	bl	8006938 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8006acc:	88fa      	ldrh	r2, [r7, #6]
 8006ace:	89fb      	ldrh	r3, [r7, #14]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	b298      	uxth	r0, r3
 8006ad4:	88ba      	ldrh	r2, [r7, #4]
 8006ad6:	8a3b      	ldrh	r3, [r7, #16]
 8006ad8:	4413      	add	r3, r2
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	883a      	ldrh	r2, [r7, #0]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	f7ff ff2a 	bl	8006938 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8006ae4:	88fa      	ldrh	r2, [r7, #6]
 8006ae6:	89fb      	ldrh	r3, [r7, #14]
 8006ae8:	4413      	add	r3, r2
 8006aea:	b298      	uxth	r0, r3
 8006aec:	88ba      	ldrh	r2, [r7, #4]
 8006aee:	8a3b      	ldrh	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	883a      	ldrh	r2, [r7, #0]
 8006af6:	4619      	mov	r1, r3
 8006af8:	f7ff ff1e 	bl	8006938 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	89fb      	ldrh	r3, [r7, #14]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	b298      	uxth	r0, r3
 8006b04:	88ba      	ldrh	r2, [r7, #4]
 8006b06:	8a3b      	ldrh	r3, [r7, #16]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	883a      	ldrh	r2, [r7, #0]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	f7ff ff12 	bl	8006938 <Displ_Pixel>
    while (x<y) {
 8006b14:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006b18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	f6ff af77 	blt.w	8006a10 <Displ_drawCircle+0x8c>
    }
}
 8006b22:	bf00      	nop
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd90      	pop	{r4, r7, pc}

08006b2c <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	4603      	mov	r3, r0
 8006b34:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8006b36:	4b09      	ldr	r3, [pc, #36]	; (8006b5c <Displ_CLS+0x30>)
 8006b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	4b08      	ldr	r3, [pc, #32]	; (8006b60 <Displ_CLS+0x34>)
 8006b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b44:	b299      	uxth	r1, r3
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	2000      	movs	r0, #0
 8006b50:	f7ff fe38 	bl	80067c4 <Displ_FillArea>
}
 8006b54:	bf00      	nop
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	2000866a 	.word	0x2000866a
 8006b60:	2000866c 	.word	0x2000866c

08006b64 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8006b64:	b590      	push	{r4, r7, lr}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	4611      	mov	r1, r2
 8006b70:	461a      	mov	r2, r3
 8006b72:	4623      	mov	r3, r4
 8006b74:	80fb      	strh	r3, [r7, #6]
 8006b76:	4603      	mov	r3, r0
 8006b78:	80bb      	strh	r3, [r7, #4]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	807b      	strh	r3, [r7, #2]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8006b82:	887b      	ldrh	r3, [r7, #2]
 8006b84:	f1c3 0301 	rsb	r3, r3, #1
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8006b90:	887b      	ldrh	r3, [r7, #2]
 8006b92:	461a      	mov	r2, r3
 8006b94:	03d2      	lsls	r2, r2, #15
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8006ba2:	887b      	ldrh	r3, [r7, #2]
 8006ba4:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8006ba6:	e095      	b.n	8006cd4 <drawCircleHelper+0x170>
        if (f >= 0) {
 8006ba8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	db0e      	blt.n	8006bce <drawCircleHelper+0x6a>
            y--;
 8006bb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8006bbc:	8a7b      	ldrh	r3, [r7, #18]
 8006bbe:	3302      	adds	r3, #2
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8006bc4:	8afa      	ldrh	r2, [r7, #22]
 8006bc6:	8a7b      	ldrh	r3, [r7, #18]
 8006bc8:	4413      	add	r3, r2
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8006bce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8006bda:	8abb      	ldrh	r3, [r7, #20]
 8006bdc:	3302      	adds	r3, #2
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8006be2:	8afa      	ldrh	r2, [r7, #22]
 8006be4:	8abb      	ldrh	r3, [r7, #20]
 8006be6:	4413      	add	r3, r2
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8006bec:	787b      	ldrb	r3, [r7, #1]
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d017      	beq.n	8006c26 <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 8006bf6:	88fa      	ldrh	r2, [r7, #6]
 8006bf8:	8a3b      	ldrh	r3, [r7, #16]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	b298      	uxth	r0, r3
 8006bfe:	88ba      	ldrh	r2, [r7, #4]
 8006c00:	89fb      	ldrh	r3, [r7, #14]
 8006c02:	4413      	add	r3, r2
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c08:	4619      	mov	r1, r3
 8006c0a:	f7ff fe95 	bl	8006938 <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 8006c0e:	88fa      	ldrh	r2, [r7, #6]
 8006c10:	89fb      	ldrh	r3, [r7, #14]
 8006c12:	4413      	add	r3, r2
 8006c14:	b298      	uxth	r0, r3
 8006c16:	88ba      	ldrh	r2, [r7, #4]
 8006c18:	8a3b      	ldrh	r3, [r7, #16]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c20:	4619      	mov	r1, r3
 8006c22:	f7ff fe89 	bl	8006938 <Displ_Pixel>
        }
        if (cornername & 0x2) {
 8006c26:	787b      	ldrb	r3, [r7, #1]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d017      	beq.n	8006c60 <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 8006c30:	88fa      	ldrh	r2, [r7, #6]
 8006c32:	8a3b      	ldrh	r3, [r7, #16]
 8006c34:	4413      	add	r3, r2
 8006c36:	b298      	uxth	r0, r3
 8006c38:	88ba      	ldrh	r2, [r7, #4]
 8006c3a:	89fb      	ldrh	r3, [r7, #14]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c42:	4619      	mov	r1, r3
 8006c44:	f7ff fe78 	bl	8006938 <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 8006c48:	88fa      	ldrh	r2, [r7, #6]
 8006c4a:	89fb      	ldrh	r3, [r7, #14]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	b298      	uxth	r0, r3
 8006c50:	88ba      	ldrh	r2, [r7, #4]
 8006c52:	8a3b      	ldrh	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	f7ff fe6c 	bl	8006938 <Displ_Pixel>
        }
        if (cornername & 0x8) {
 8006c60:	787b      	ldrb	r3, [r7, #1]
 8006c62:	f003 0308 	and.w	r3, r3, #8
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d017      	beq.n	8006c9a <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 8006c6a:	88fa      	ldrh	r2, [r7, #6]
 8006c6c:	89fb      	ldrh	r3, [r7, #14]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	b298      	uxth	r0, r3
 8006c72:	88ba      	ldrh	r2, [r7, #4]
 8006c74:	8a3b      	ldrh	r3, [r7, #16]
 8006c76:	4413      	add	r3, r2
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	f7ff fe5b 	bl	8006938 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 8006c82:	88fa      	ldrh	r2, [r7, #6]
 8006c84:	8a3b      	ldrh	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	b298      	uxth	r0, r3
 8006c8a:	88ba      	ldrh	r2, [r7, #4]
 8006c8c:	89fb      	ldrh	r3, [r7, #14]
 8006c8e:	4413      	add	r3, r2
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c94:	4619      	mov	r1, r3
 8006c96:	f7ff fe4f 	bl	8006938 <Displ_Pixel>
        }
        if (cornername & 0x1) {
 8006c9a:	787b      	ldrb	r3, [r7, #1]
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d017      	beq.n	8006cd4 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8006ca4:	88fa      	ldrh	r2, [r7, #6]
 8006ca6:	89fb      	ldrh	r3, [r7, #14]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	b298      	uxth	r0, r3
 8006cac:	88ba      	ldrh	r2, [r7, #4]
 8006cae:	8a3b      	ldrh	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f7ff fe3e 	bl	8006938 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 8006cbc:	88fa      	ldrh	r2, [r7, #6]
 8006cbe:	8a3b      	ldrh	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	b298      	uxth	r0, r3
 8006cc4:	88ba      	ldrh	r2, [r7, #4]
 8006cc6:	89fb      	ldrh	r3, [r7, #14]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006cce:	4619      	mov	r1, r3
 8006cd0:	f7ff fe32 	bl	8006938 <Displ_Pixel>
    while (x<y) {
 8006cd4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006cd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	f6ff af63 	blt.w	8006ba8 <drawCircleHelper+0x44>
        }
    }
}
 8006ce2:	bf00      	nop
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd90      	pop	{r4, r7, pc}

08006cec <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8006cec:	b590      	push	{r4, r7, lr}
 8006cee:	b089      	sub	sp, #36	; 0x24
 8006cf0:	af02      	add	r7, sp, #8
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4623      	mov	r3, r4
 8006cfc:	80fb      	strh	r3, [r7, #6]
 8006cfe:	4603      	mov	r3, r0
 8006d00:	80bb      	strh	r3, [r7, #4]
 8006d02:	460b      	mov	r3, r1
 8006d04:	807b      	strh	r3, [r7, #2]
 8006d06:	4613      	mov	r3, r2
 8006d08:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8006d0a:	887b      	ldrh	r3, [r7, #2]
 8006d0c:	f1c3 0301 	rsb	r3, r3, #1
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8006d14:	2301      	movs	r3, #1
 8006d16:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8006d18:	887b      	ldrh	r3, [r7, #2]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	03d2      	lsls	r2, r2, #15
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8006d2a:	887b      	ldrh	r3, [r7, #2]
 8006d2c:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8006d2e:	e0a7      	b.n	8006e80 <fillCircleHelper+0x194>
    if (f >= 0) {
 8006d30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	db0e      	blt.n	8006d56 <fillCircleHelper+0x6a>
      y--;
 8006d38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8006d44:	8a7b      	ldrh	r3, [r7, #18]
 8006d46:	3302      	adds	r3, #2
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8006d4c:	8afa      	ldrh	r2, [r7, #22]
 8006d4e:	8a7b      	ldrh	r3, [r7, #18]
 8006d50:	4413      	add	r3, r2
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8006d56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8006d62:	8abb      	ldrh	r3, [r7, #20]
 8006d64:	3302      	adds	r3, #2
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8006d6a:	8afa      	ldrh	r2, [r7, #22]
 8006d6c:	8abb      	ldrh	r3, [r7, #20]
 8006d6e:	4413      	add	r3, r2
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8006d74:	787b      	ldrb	r3, [r7, #1]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d03d      	beq.n	8006dfa <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	8a3b      	ldrh	r3, [r7, #16]
 8006d82:	4413      	add	r3, r2
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	b218      	sxth	r0, r3
 8006d88:	88ba      	ldrh	r2, [r7, #4]
 8006d8a:	89fb      	ldrh	r3, [r7, #14]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	b219      	sxth	r1, r3
 8006d92:	88fa      	ldrh	r2, [r7, #6]
 8006d94:	8a3b      	ldrh	r3, [r7, #16]
 8006d96:	4413      	add	r3, r2
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	b21c      	sxth	r4, r3
 8006d9c:	88ba      	ldrh	r2, [r7, #4]
 8006d9e:	89fb      	ldrh	r3, [r7, #14]
 8006da0:	4413      	add	r3, r2
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006da6:	4413      	add	r3, r2
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	3301      	adds	r3, #1
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	b21a      	sxth	r2, r3
 8006db0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	4613      	mov	r3, r2
 8006db6:	4622      	mov	r2, r4
 8006db8:	f000 f8a1 	bl	8006efe <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 8006dbc:	88fa      	ldrh	r2, [r7, #6]
 8006dbe:	89fb      	ldrh	r3, [r7, #14]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	b218      	sxth	r0, r3
 8006dc6:	88ba      	ldrh	r2, [r7, #4]
 8006dc8:	8a3b      	ldrh	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	b219      	sxth	r1, r3
 8006dd0:	88fa      	ldrh	r2, [r7, #6]
 8006dd2:	89fb      	ldrh	r3, [r7, #14]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	b21c      	sxth	r4, r3
 8006dda:	88ba      	ldrh	r2, [r7, #4]
 8006ddc:	8a3b      	ldrh	r3, [r7, #16]
 8006dde:	4413      	add	r3, r2
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006de4:	4413      	add	r3, r2
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3301      	adds	r3, #1
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	b21a      	sxth	r2, r3
 8006dee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	4613      	mov	r3, r2
 8006df4:	4622      	mov	r2, r4
 8006df6:	f000 f882 	bl	8006efe <Displ_Line>
    }
    if (cornername & 0x2) {
 8006dfa:	787b      	ldrb	r3, [r7, #1]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d03d      	beq.n	8006e80 <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 8006e04:	88fa      	ldrh	r2, [r7, #6]
 8006e06:	8a3b      	ldrh	r3, [r7, #16]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	b218      	sxth	r0, r3
 8006e0e:	88ba      	ldrh	r2, [r7, #4]
 8006e10:	89fb      	ldrh	r3, [r7, #14]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	b219      	sxth	r1, r3
 8006e18:	88fa      	ldrh	r2, [r7, #6]
 8006e1a:	8a3b      	ldrh	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	b21c      	sxth	r4, r3
 8006e22:	88ba      	ldrh	r2, [r7, #4]
 8006e24:	89fb      	ldrh	r3, [r7, #14]
 8006e26:	4413      	add	r3, r2
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e2c:	4413      	add	r3, r2
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	3301      	adds	r3, #1
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	b21a      	sxth	r2, r3
 8006e36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	4622      	mov	r2, r4
 8006e3e:	f000 f85e 	bl	8006efe <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 8006e42:	88fa      	ldrh	r2, [r7, #6]
 8006e44:	89fb      	ldrh	r3, [r7, #14]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	b218      	sxth	r0, r3
 8006e4c:	88ba      	ldrh	r2, [r7, #4]
 8006e4e:	8a3b      	ldrh	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	b219      	sxth	r1, r3
 8006e56:	88fa      	ldrh	r2, [r7, #6]
 8006e58:	89fb      	ldrh	r3, [r7, #14]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	b21c      	sxth	r4, r3
 8006e60:	88ba      	ldrh	r2, [r7, #4]
 8006e62:	8a3b      	ldrh	r3, [r7, #16]
 8006e64:	4413      	add	r3, r2
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e6a:	4413      	add	r3, r2
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3301      	adds	r3, #1
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	b21a      	sxth	r2, r3
 8006e74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	f000 f83f 	bl	8006efe <Displ_Line>
  while (x<y) {
 8006e80:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006e84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	f6ff af51 	blt.w	8006d30 <fillCircleHelper+0x44>
    }
  }
}
 8006e8e:	bf00      	nop
 8006e90:	bf00      	nop
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd90      	pop	{r4, r7, pc}

08006e98 <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8006e98:	b590      	push	{r4, r7, lr}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4623      	mov	r3, r4
 8006ea8:	80fb      	strh	r3, [r7, #6]
 8006eaa:	4603      	mov	r3, r0
 8006eac:	80bb      	strh	r3, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	807b      	strh	r3, [r7, #2]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 8006eb6:	88ba      	ldrh	r2, [r7, #4]
 8006eb8:	887b      	ldrh	r3, [r7, #2]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	b219      	sxth	r1, r3
 8006ec0:	88ba      	ldrh	r2, [r7, #4]
 8006ec2:	887b      	ldrh	r3, [r7, #2]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	b21c      	sxth	r4, r3
 8006eca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ece:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006ed2:	883b      	ldrh	r3, [r7, #0]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	4623      	mov	r3, r4
 8006ed8:	f000 f811 	bl	8006efe <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8006edc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006ee0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006ee4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006ee8:	883b      	ldrh	r3, [r7, #0]
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	2300      	movs	r3, #0
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	f7ff fefb 	bl	8006cec <fillCircleHelper>
}
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd90      	pop	{r4, r7, pc}

08006efe <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8006efe:	b590      	push	{r4, r7, lr}
 8006f00:	b08b      	sub	sp, #44	; 0x2c
 8006f02:	af02      	add	r7, sp, #8
 8006f04:	4604      	mov	r4, r0
 8006f06:	4608      	mov	r0, r1
 8006f08:	4611      	mov	r1, r2
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	80fb      	strh	r3, [r7, #6]
 8006f10:	4603      	mov	r3, r0
 8006f12:	80bb      	strh	r3, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	807b      	strh	r3, [r7, #2]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8006f1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d123      	bne.n	8006f70 <Displ_Line+0x72>
    	if (y1>y0){
 8006f28:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006f2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	dd0e      	ble.n	8006f52 <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8006f34:	88f8      	ldrh	r0, [r7, #6]
 8006f36:	88b9      	ldrh	r1, [r7, #4]
 8006f38:	883a      	ldrh	r2, [r7, #0]
 8006f3a:	88bb      	ldrh	r3, [r7, #4]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	3301      	adds	r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f7ff fc3a 	bl	80067c4 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8006f50:	e103      	b.n	800715a <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8006f52:	88f8      	ldrh	r0, [r7, #6]
 8006f54:	8839      	ldrh	r1, [r7, #0]
 8006f56:	88ba      	ldrh	r2, [r7, #4]
 8006f58:	883b      	ldrh	r3, [r7, #0]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3301      	adds	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	4613      	mov	r3, r2
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f7ff fc2b 	bl	80067c4 <Displ_FillArea>
    	return;
 8006f6e:	e0f4      	b.n	800715a <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8006f70:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006f74:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d121      	bne.n	8006fc0 <Displ_Line+0xc2>
    	if (x1>x0)
 8006f7c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006f80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	dd0d      	ble.n	8006fa4 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8006f88:	88f8      	ldrh	r0, [r7, #6]
 8006f8a:	88b9      	ldrh	r1, [r7, #4]
 8006f8c:	887a      	ldrh	r2, [r7, #2]
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	3301      	adds	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	f7ff fc11 	bl	80067c4 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8006fa2:	e0da      	b.n	800715a <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8006fa4:	8878      	ldrh	r0, [r7, #2]
 8006fa6:	8839      	ldrh	r1, [r7, #0]
 8006fa8:	88fa      	ldrh	r2, [r7, #6]
 8006faa:	887b      	ldrh	r3, [r7, #2]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	2301      	movs	r3, #1
 8006fba:	f7ff fc03 	bl	80067c4 <Displ_FillArea>
    	return;
 8006fbe:	e0cc      	b.n	800715a <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8006fc0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006fc4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	dd05      	ble.n	8006fd8 <Displ_Line+0xda>
 8006fcc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006fd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006fd4:	1ad2      	subs	r2, r2, r3
 8006fd6:	e004      	b.n	8006fe2 <Displ_Line+0xe4>
 8006fd8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006fdc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006fe0:	1ad2      	subs	r2, r2, r3
 8006fe2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8006fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fea:	4299      	cmp	r1, r3
 8006fec:	dd05      	ble.n	8006ffa <Displ_Line+0xfc>
 8006fee:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8006ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ff6:	1acb      	subs	r3, r1, r3
 8006ff8:	e004      	b.n	8007004 <Displ_Line+0x106>
 8006ffa:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8006ffe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007002:	1acb      	subs	r3, r1, r3
 8007004:	429a      	cmp	r2, r3
 8007006:	bfcc      	ite	gt
 8007008:	2301      	movgt	r3, #1
 800700a:	2300      	movle	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8007010:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	827b      	strh	r3, [r7, #18]
 800701c:	88bb      	ldrh	r3, [r7, #4]
 800701e:	80fb      	strh	r3, [r7, #6]
 8007020:	8a7b      	ldrh	r3, [r7, #18]
 8007022:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8007024:	887b      	ldrh	r3, [r7, #2]
 8007026:	823b      	strh	r3, [r7, #16]
 8007028:	883b      	ldrh	r3, [r7, #0]
 800702a:	807b      	strh	r3, [r7, #2]
 800702c:	8a3b      	ldrh	r3, [r7, #16]
 800702e:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8007030:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007034:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007038:	429a      	cmp	r2, r3
 800703a:	dd0b      	ble.n	8007054 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 800703c:	88fb      	ldrh	r3, [r7, #6]
 800703e:	81fb      	strh	r3, [r7, #14]
 8007040:	887b      	ldrh	r3, [r7, #2]
 8007042:	80fb      	strh	r3, [r7, #6]
 8007044:	89fb      	ldrh	r3, [r7, #14]
 8007046:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8007048:	88bb      	ldrh	r3, [r7, #4]
 800704a:	81bb      	strh	r3, [r7, #12]
 800704c:	883b      	ldrh	r3, [r7, #0]
 800704e:	80bb      	strh	r3, [r7, #4]
 8007050:	89bb      	ldrh	r3, [r7, #12]
 8007052:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8007054:	887a      	ldrh	r2, [r7, #2]
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	b29b      	uxth	r3, r3
 800705c:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 800705e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007062:	105b      	asrs	r3, r3, #1
 8007064:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8007066:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800706a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800706e:	429a      	cmp	r2, r3
 8007070:	da07      	bge.n	8007082 <Displ_Line+0x184>
        dy = y1-y0;
 8007072:	883a      	ldrh	r2, [r7, #0]
 8007074:	88bb      	ldrh	r3, [r7, #4]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	b29b      	uxth	r3, r3
 800707a:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 800707c:	2301      	movs	r3, #1
 800707e:	837b      	strh	r3, [r7, #26]
 8007080:	e007      	b.n	8007092 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8007082:	88ba      	ldrh	r2, [r7, #4]
 8007084:	883b      	ldrh	r3, [r7, #0]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	b29b      	uxth	r3, r3
 800708a:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 800708c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007090:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8007092:	2300      	movs	r3, #0
 8007094:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8007096:	88fb      	ldrh	r3, [r7, #6]
 8007098:	83bb      	strh	r3, [r7, #28]
 800709a:	e03a      	b.n	8007112 <Displ_Line+0x214>
    	l++;
 800709c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3301      	adds	r3, #1
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 80070a8:	8b3a      	ldrh	r2, [r7, #24]
 80070aa:	8afb      	ldrh	r3, [r7, #22]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 80070b2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	da25      	bge.n	8007106 <Displ_Line+0x208>
        	if (steep) {
 80070ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 80070c2:	88b8      	ldrh	r0, [r7, #4]
 80070c4:	88f9      	ldrh	r1, [r7, #6]
 80070c6:	8bfa      	ldrh	r2, [r7, #30]
 80070c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	4613      	mov	r3, r2
 80070ce:	2201      	movs	r2, #1
 80070d0:	f7ff fb78 	bl	80067c4 <Displ_FillArea>
 80070d4:	e007      	b.n	80070e6 <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 80070d6:	88f8      	ldrh	r0, [r7, #6]
 80070d8:	88b9      	ldrh	r1, [r7, #4]
 80070da:	8bfa      	ldrh	r2, [r7, #30]
 80070dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	2301      	movs	r3, #1
 80070e2:	f7ff fb6f 	bl	80067c4 <Displ_FillArea>
            }
            y0 += ystep;
 80070e6:	88ba      	ldrh	r2, [r7, #4]
 80070e8:	8b7b      	ldrh	r3, [r7, #26]
 80070ea:	4413      	add	r3, r2
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	80bb      	strh	r3, [r7, #4]
            l=0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 80070f4:	8bbb      	ldrh	r3, [r7, #28]
 80070f6:	3301      	adds	r3, #1
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	80fb      	strh	r3, [r7, #6]
            err += dx;
 80070fc:	8b3a      	ldrh	r2, [r7, #24]
 80070fe:	897b      	ldrh	r3, [r7, #10]
 8007100:	4413      	add	r3, r2
 8007102:	b29b      	uxth	r3, r3
 8007104:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8007106:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800710a:	b29b      	uxth	r3, r3
 800710c:	3301      	adds	r3, #1
 800710e:	b29b      	uxth	r3, r3
 8007110:	83bb      	strh	r3, [r7, #28]
 8007112:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007116:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800711a:	429a      	cmp	r2, r3
 800711c:	ddbe      	ble.n	800709c <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 800711e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d019      	beq.n	800715a <Displ_Line+0x25c>
    	if (steep) {
 8007126:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00b      	beq.n	8007146 <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 800712e:	88b8      	ldrh	r0, [r7, #4]
 8007130:	88f9      	ldrh	r1, [r7, #6]
 8007132:	8bfb      	ldrh	r3, [r7, #30]
 8007134:	3b01      	subs	r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	4613      	mov	r3, r2
 800713e:	2201      	movs	r2, #1
 8007140:	f7ff fb40 	bl	80067c4 <Displ_FillArea>
 8007144:	e009      	b.n	800715a <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 8007146:	88f8      	ldrh	r0, [r7, #6]
 8007148:	88b9      	ldrh	r1, [r7, #4]
 800714a:	8bfb      	ldrh	r3, [r7, #30]
 800714c:	3b01      	subs	r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	2301      	movs	r3, #1
 8007156:	f7ff fb35 	bl	80067c4 <Displ_FillArea>
    	}
    }
}
 800715a:	3724      	adds	r7, #36	; 0x24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd90      	pop	{r4, r7, pc}

08007160 <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 8007160:	b590      	push	{r4, r7, lr}
 8007162:	b085      	sub	sp, #20
 8007164:	af02      	add	r7, sp, #8
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	4611      	mov	r1, r2
 800716c:	461a      	mov	r2, r3
 800716e:	4623      	mov	r3, r4
 8007170:	80fb      	strh	r3, [r7, #6]
 8007172:	4603      	mov	r3, r0
 8007174:	80bb      	strh	r3, [r7, #4]
 8007176:	460b      	mov	r3, r1
 8007178:	807b      	strh	r3, [r7, #2]
 800717a:	4613      	mov	r3, r2
 800717c:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 800717e:	88f8      	ldrh	r0, [r7, #6]
 8007180:	88b9      	ldrh	r1, [r7, #4]
 8007182:	887a      	ldrh	r2, [r7, #2]
 8007184:	8b3c      	ldrh	r4, [r7, #24]
 8007186:	8bbb      	ldrh	r3, [r7, #28]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	4623      	mov	r3, r4
 800718c:	f7ff fb1a 	bl	80067c4 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 8007190:	88f8      	ldrh	r0, [r7, #6]
 8007192:	88ba      	ldrh	r2, [r7, #4]
 8007194:	883b      	ldrh	r3, [r7, #0]
 8007196:	4413      	add	r3, r2
 8007198:	b29a      	uxth	r2, r3
 800719a:	8b3b      	ldrh	r3, [r7, #24]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	b299      	uxth	r1, r3
 80071a0:	887a      	ldrh	r2, [r7, #2]
 80071a2:	8b3c      	ldrh	r4, [r7, #24]
 80071a4:	8bbb      	ldrh	r3, [r7, #28]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	4623      	mov	r3, r4
 80071aa:	f7ff fb0b 	bl	80067c4 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 80071ae:	88f8      	ldrh	r0, [r7, #6]
 80071b0:	88b9      	ldrh	r1, [r7, #4]
 80071b2:	8b3a      	ldrh	r2, [r7, #24]
 80071b4:	883c      	ldrh	r4, [r7, #0]
 80071b6:	8bbb      	ldrh	r3, [r7, #28]
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	4623      	mov	r3, r4
 80071bc:	f7ff fb02 	bl	80067c4 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 80071c0:	88fa      	ldrh	r2, [r7, #6]
 80071c2:	887b      	ldrh	r3, [r7, #2]
 80071c4:	4413      	add	r3, r2
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	8b3b      	ldrh	r3, [r7, #24]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	b298      	uxth	r0, r3
 80071ce:	88b9      	ldrh	r1, [r7, #4]
 80071d0:	8b3a      	ldrh	r2, [r7, #24]
 80071d2:	883c      	ldrh	r4, [r7, #0]
 80071d4:	8bbb      	ldrh	r3, [r7, #28]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	4623      	mov	r3, r4
 80071da:	f7ff faf3 	bl	80067c4 <Displ_FillArea>
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd90      	pop	{r4, r7, pc}

080071e6 <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80071e6:	b590      	push	{r4, r7, lr}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af02      	add	r7, sp, #8
 80071ec:	4604      	mov	r4, r0
 80071ee:	4608      	mov	r0, r1
 80071f0:	4611      	mov	r1, r2
 80071f2:	461a      	mov	r2, r3
 80071f4:	4623      	mov	r3, r4
 80071f6:	80fb      	strh	r3, [r7, #6]
 80071f8:	4603      	mov	r3, r0
 80071fa:	80bb      	strh	r3, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	807b      	strh	r3, [r7, #2]
 8007200:	4613      	mov	r3, r2
 8007202:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 8007204:	f9b7 4000 	ldrsh.w	r4, [r7]
 8007208:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800720c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007210:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007214:	8c3b      	ldrh	r3, [r7, #32]
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	4623      	mov	r3, r4
 800721a:	f7ff fe70 	bl	8006efe <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 800721e:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8007222:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007226:	f9b7 1000 	ldrsh.w	r1, [r7]
 800722a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800722e:	8c3b      	ldrh	r3, [r7, #32]
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	4623      	mov	r3, r4
 8007234:	f7ff fe63 	bl	8006efe <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 8007238:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800723c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007240:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8007244:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8007248:	8c3b      	ldrh	r3, [r7, #32]
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	4623      	mov	r3, r4
 800724e:	f7ff fe56 	bl	8006efe <Displ_Line>
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	bd90      	pop	{r4, r7, pc}

0800725a <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800725a:	b590      	push	{r4, r7, lr}
 800725c:	b091      	sub	sp, #68	; 0x44
 800725e:	af02      	add	r7, sp, #8
 8007260:	4604      	mov	r4, r0
 8007262:	4608      	mov	r0, r1
 8007264:	4611      	mov	r1, r2
 8007266:	461a      	mov	r2, r3
 8007268:	4623      	mov	r3, r4
 800726a:	80fb      	strh	r3, [r7, #6]
 800726c:	4603      	mov	r3, r0
 800726e:	80bb      	strh	r3, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	807b      	strh	r3, [r7, #2]
 8007274:	4613      	mov	r3, r2
 8007276:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8007278:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800727c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007280:	429a      	cmp	r2, r3
 8007282:	dd0b      	ble.n	800729c <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8007284:	88bb      	ldrh	r3, [r7, #4]
 8007286:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007288:	883b      	ldrh	r3, [r7, #0]
 800728a:	80bb      	strh	r3, [r7, #4]
 800728c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800728e:	803b      	strh	r3, [r7, #0]
 8007290:	88fb      	ldrh	r3, [r7, #6]
 8007292:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007294:	887b      	ldrh	r3, [r7, #2]
 8007296:	80fb      	strh	r3, [r7, #6]
 8007298:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800729a:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 800729c:	f9b7 2000 	ldrsh.w	r2, [r7]
 80072a0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80072a4:	429a      	cmp	r2, r3
 80072a6:	dd0f      	ble.n	80072c8 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 80072a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072ac:	847b      	strh	r3, [r7, #34]	; 0x22
 80072ae:	883b      	ldrh	r3, [r7, #0]
 80072b0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80072b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072b6:	803b      	strh	r3, [r7, #0]
 80072b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80072bc:	843b      	strh	r3, [r7, #32]
 80072be:	887b      	ldrh	r3, [r7, #2]
 80072c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80072c4:	8c3b      	ldrh	r3, [r7, #32]
 80072c6:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80072c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80072cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	dd0b      	ble.n	80072ec <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80072d4:	88bb      	ldrh	r3, [r7, #4]
 80072d6:	83fb      	strh	r3, [r7, #30]
 80072d8:	883b      	ldrh	r3, [r7, #0]
 80072da:	80bb      	strh	r3, [r7, #4]
 80072dc:	8bfb      	ldrh	r3, [r7, #30]
 80072de:	803b      	strh	r3, [r7, #0]
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	83bb      	strh	r3, [r7, #28]
 80072e4:	887b      	ldrh	r3, [r7, #2]
 80072e6:	80fb      	strh	r3, [r7, #6]
 80072e8:	8bbb      	ldrh	r3, [r7, #28]
 80072ea:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80072ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80072f0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d136      	bne.n	8007366 <Displ_fillTriangle+0x10c>
        a = b = x0;
 80072f8:	88fb      	ldrh	r3, [r7, #6]
 80072fa:	86bb      	strh	r3, [r7, #52]	; 0x34
 80072fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80072fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8007300:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007304:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8007308:	429a      	cmp	r2, r3
 800730a:	da02      	bge.n	8007312 <Displ_fillTriangle+0xb8>
 800730c:	887b      	ldrh	r3, [r7, #2]
 800730e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007310:	e007      	b.n	8007322 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8007312:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007316:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800731a:	429a      	cmp	r2, r3
 800731c:	dd01      	ble.n	8007322 <Displ_fillTriangle+0xc8>
 800731e:	887b      	ldrh	r3, [r7, #2]
 8007320:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8007322:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8007326:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800732a:	429a      	cmp	r2, r3
 800732c:	da03      	bge.n	8007336 <Displ_fillTriangle+0xdc>
 800732e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007332:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007334:	e008      	b.n	8007348 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8007336:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800733a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800733e:	429a      	cmp	r2, r3
 8007340:	dd02      	ble.n	8007348 <Displ_fillTriangle+0xee>
 8007342:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007346:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8007348:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800734c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8007350:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007354:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8007358:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	4623      	mov	r3, r4
 8007360:	f7ff fdcd 	bl	8006efe <Displ_Line>
        return;
 8007364:	e0d2      	b.n	800750c <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8007366:	887a      	ldrh	r2, [r7, #2]
 8007368:	88fb      	ldrh	r3, [r7, #6]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	b29b      	uxth	r3, r3
 800736e:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8007370:	883a      	ldrh	r2, [r7, #0]
 8007372:	88bb      	ldrh	r3, [r7, #4]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	b29b      	uxth	r3, r3
 8007378:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 800737a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800737e:	88fb      	ldrh	r3, [r7, #6]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	b29b      	uxth	r3, r3
 8007384:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8007386:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800738a:	88bb      	ldrh	r3, [r7, #4]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	b29b      	uxth	r3, r3
 8007390:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8007392:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007396:	887b      	ldrh	r3, [r7, #2]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	b29b      	uxth	r3, r3
 800739c:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 800739e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80073a2:	883b      	ldrh	r3, [r7, #0]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 80073aa:	2300      	movs	r3, #0
 80073ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80073b2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80073b6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d102      	bne.n	80073c4 <Displ_fillTriangle+0x16a>
 80073be:	883b      	ldrh	r3, [r7, #0]
 80073c0:	863b      	strh	r3, [r7, #48]	; 0x30
 80073c2:	e003      	b.n	80073cc <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 80073c4:	883b      	ldrh	r3, [r7, #0]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 80073cc:	88bb      	ldrh	r3, [r7, #4]
 80073ce:	867b      	strh	r3, [r7, #50]	; 0x32
 80073d0:	e03d      	b.n	800744e <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 80073d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80073d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80073dc:	b29a      	uxth	r2, r3
 80073de:	88fb      	ldrh	r3, [r7, #6]
 80073e0:	4413      	add	r3, r2
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80073e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80073ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	4413      	add	r3, r2
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 80073fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80073fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007400:	4413      	add	r3, r2
 8007402:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8007404:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800740a:	4413      	add	r3, r2
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800740e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8007412:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8007416:	429a      	cmp	r2, r3
 8007418:	dd05      	ble.n	8007426 <Displ_fillTriangle+0x1cc>
 800741a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800741c:	81bb      	strh	r3, [r7, #12]
 800741e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007420:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007422:	89bb      	ldrh	r3, [r7, #12]
 8007424:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8007426:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 800742a:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800742e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8007432:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8007436:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	4623      	mov	r3, r4
 800743e:	f7ff fd5e 	bl	8006efe <Displ_Line>
    for(y=y0; y<=last; y++) {
 8007442:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8007446:	b29b      	uxth	r3, r3
 8007448:	3301      	adds	r3, #1
 800744a:	b29b      	uxth	r3, r3
 800744c:	867b      	strh	r3, [r7, #50]	; 0x32
 800744e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8007452:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8007456:	429a      	cmp	r2, r3
 8007458:	ddbb      	ble.n	80073d2 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 800745a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800745e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8007462:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007466:	1a8a      	subs	r2, r1, r2
 8007468:	fb02 f303 	mul.w	r3, r2, r3
 800746c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 800746e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007472:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8007476:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800747a:	1a8a      	subs	r2, r1, r2
 800747c:	fb02 f303 	mul.w	r3, r2, r3
 8007480:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8007482:	e03d      	b.n	8007500 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8007484:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800748a:	fb92 f3f3 	sdiv	r3, r2, r3
 800748e:	b29a      	uxth	r2, r3
 8007490:	887b      	ldrh	r3, [r7, #2]
 8007492:	4413      	add	r3, r2
 8007494:	b29b      	uxth	r3, r3
 8007496:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8007498:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800749c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800749e:	fb92 f3f3 	sdiv	r3, r2, r3
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	4413      	add	r3, r2
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 80074ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b2:	4413      	add	r3, r2
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80074b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80074ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074bc:	4413      	add	r3, r2
 80074be:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80074c0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80074c4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80074c8:	429a      	cmp	r2, r3
 80074ca:	dd05      	ble.n	80074d8 <Displ_fillTriangle+0x27e>
 80074cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80074ce:	81fb      	strh	r3, [r7, #14]
 80074d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80074d2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80074d4:	89fb      	ldrh	r3, [r7, #14]
 80074d6:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 80074d8:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 80074dc:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80074e0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80074e4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80074e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	4623      	mov	r3, r4
 80074f0:	f7ff fd05 	bl	8006efe <Displ_Line>
    for(; y<=y2; y++) {
 80074f4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3301      	adds	r3, #1
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	867b      	strh	r3, [r7, #50]	; 0x32
 8007500:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8007504:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007508:	429a      	cmp	r2, r3
 800750a:	ddbb      	ble.n	8007484 <Displ_fillTriangle+0x22a>
    }
}
 800750c:	373c      	adds	r7, #60	; 0x3c
 800750e:	46bd      	mov	sp, r7
 8007510:	bd90      	pop	{r4, r7, pc}
	...

08007514 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8007514:	b082      	sub	sp, #8
 8007516:	b590      	push	{r4, r7, lr}
 8007518:	b08f      	sub	sp, #60	; 0x3c
 800751a:	af02      	add	r7, sp, #8
 800751c:	647b      	str	r3, [r7, #68]	; 0x44
 800751e:	4603      	mov	r3, r0
 8007520:	80fb      	strh	r3, [r7, #6]
 8007522:	460b      	mov	r3, r1
 8007524:	80bb      	strh	r3, [r7, #4]
 8007526:	4613      	mov	r3, r2
 8007528:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 800752a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800752e:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 8007530:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8007534:	2b02      	cmp	r3, #2
 8007536:	d102      	bne.n	800753e <Displ_WChar+0x2a>
		wsize<<= 1;
 8007538:	7efb      	ldrb	r3, [r7, #27]
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 800753e:	2300      	movs	r3, #0
 8007540:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 8007542:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007546:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800754a:	fb02 f303 	mul.w	r3, r2, r3
 800754e:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8007550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	3b20      	subs	r3, #32
 8007556:	4619      	mov	r1, r3
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	fb01 f303 	mul.w	r3, r1, r3
 800755e:	4413      	add	r3, r2
 8007560:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 8007562:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007566:	2b02      	cmp	r3, #2
 8007568:	d005      	beq.n	8007576 <Displ_WChar+0x62>
 800756a:	2b03      	cmp	r3, #3
 800756c:	d107      	bne.n	800757e <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 800756e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007572:	61fb      	str	r3, [r7, #28]
			break;
 8007574:	e005      	b.n	8007582 <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 8007576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800757a:	61fb      	str	r3, [r7, #28]
			break;
 800757c:	e001      	b.n	8007582 <Displ_WChar+0x6e>
		default:
			mask=0x80;
 800757e:	2380      	movs	r3, #128	; 0x80
 8007580:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 8007582:	4b68      	ldr	r3, [pc, #416]	; (8007724 <Displ_WChar+0x210>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8007588:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800758c:	021b      	lsls	r3, r3, #8
 800758e:	b21a      	sxth	r2, r3
 8007590:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007594:	0a1b      	lsrs	r3, r3, #8
 8007596:	b29b      	uxth	r3, r3
 8007598:	b21b      	sxth	r3, r3
 800759a:	4313      	orrs	r3, r2
 800759c:	b21b      	sxth	r3, r3
 800759e:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 80075a0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80075a4:	021b      	lsls	r3, r3, #8
 80075a6:	b21a      	sxth	r2, r3
 80075a8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80075ac:	0a1b      	lsrs	r3, r3, #8
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	b21b      	sxth	r3, r3
 80075b2:	4313      	orrs	r3, r2
 80075b4:	b21b      	sxth	r3, r3
 80075b6:	813b      	strh	r3, [r7, #8]


	for(i = 0; i < (bytes); i+=font.Size){
 80075b8:	2300      	movs	r3, #0
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075bc:	e06f      	b.n	800769e <Displ_WChar+0x18a>
		b=0;
 80075be:	2300      	movs	r3, #0
 80075c0:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 80075c2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d015      	beq.n	80075f6 <Displ_WChar+0xe2>
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d120      	bne.n	8007610 <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d2:	4413      	add	r3, r2
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	041a      	lsls	r2, r3, #16
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	3301      	adds	r3, #1
 80075dc:	6939      	ldr	r1, [r7, #16]
 80075de:	440b      	add	r3, r1
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	4313      	orrs	r3, r2
 80075e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075e8:	3202      	adds	r2, #2
 80075ea:	6939      	ldr	r1, [r7, #16]
 80075ec:	440a      	add	r2, r1
 80075ee:	7812      	ldrb	r2, [r2, #0]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 80075f4:	e011      	b.n	800761a <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fa:	4413      	add	r3, r2
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	021b      	lsls	r3, r3, #8
 8007600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007602:	3201      	adds	r2, #1
 8007604:	6939      	ldr	r1, [r7, #16]
 8007606:	440a      	add	r2, r1
 8007608:	7812      	ldrb	r2, [r2, #0]
 800760a:	4313      	orrs	r3, r2
 800760c:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800760e:	e004      	b.n	800761a <Displ_WChar+0x106>
			default:
				b=pos[i];
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	4413      	add	r3, r2
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 800761a:	2300      	movs	r3, #0
 800761c:	627b      	str	r3, [r7, #36]	; 0x24
 800761e:	e032      	b.n	8007686 <Displ_WChar+0x172>
			if((b << j) & mask)  {
 8007620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	409a      	lsls	r2, r3
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4013      	ands	r3, r2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d014      	beq.n	8007658 <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	1c5a      	adds	r2, r3, #1
 8007632:	623a      	str	r2, [r7, #32]
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4413      	add	r3, r2
 800763a:	897a      	ldrh	r2, [r7, #10]
 800763c:	801a      	strh	r2, [r3, #0]
				if (size==2){
 800763e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8007642:	2b02      	cmp	r3, #2
 8007644:	d11c      	bne.n	8007680 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	623a      	str	r2, [r7, #32]
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	4413      	add	r3, r2
 8007652:	897a      	ldrh	r2, [r7, #10]
 8007654:	801a      	strh	r2, [r3, #0]
 8007656:	e013      	b.n	8007680 <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	623a      	str	r2, [r7, #32]
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	893a      	ldrh	r2, [r7, #8]
 8007666:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 8007668:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800766c:	2b02      	cmp	r3, #2
 800766e:	d107      	bne.n	8007680 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	623a      	str	r2, [r7, #32]
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	4413      	add	r3, r2
 800767c:	893a      	ldrh	r2, [r7, #8]
 800767e:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	3301      	adds	r3, #1
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
 8007686:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800768a:	461a      	mov	r2, r3
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	4293      	cmp	r3, r2
 8007690:	d3c6      	bcc.n	8007620 <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 8007692:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007696:	461a      	mov	r2, r3
 8007698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769a:	4413      	add	r3, r2
 800769c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800769e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d38b      	bcc.n	80075be <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 80076ac:	7efb      	ldrb	r3, [r7, #27]
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	88fb      	ldrh	r3, [r7, #6]
 80076b2:	4413      	add	r3, r2
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b29c      	uxth	r4, r3
 80076ba:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80076be:	88bb      	ldrh	r3, [r7, #4]
 80076c0:	4413      	add	r3, r2
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	88b9      	ldrh	r1, [r7, #4]
 80076ca:	88f8      	ldrh	r0, [r7, #6]
 80076cc:	4622      	mov	r2, r4
 80076ce:	f7fe ff8d 	bl	80065ec <Displ_SetAddressWindow>
	// Buffer size too small !!!
	if (bufSize > SIZEBUF) {
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076d8:	d90b      	bls.n	80076f2 <Displ_WChar+0x1de>
		term_print("%s %s() Line %d - bufSize error, require %d but size is %d!!\r\n", __FILE__, __FUNCTION__, __LINE__, bufSize, SIZEBUF);
 80076da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	f240 33ad 	movw	r3, #941	; 0x3ad
 80076e8:	4a0f      	ldr	r2, [pc, #60]	; (8007728 <Displ_WChar+0x214>)
 80076ea:	4910      	ldr	r1, [pc, #64]	; (800772c <Displ_WChar+0x218>)
 80076ec:	4810      	ldr	r0, [pc, #64]	; (8007730 <Displ_WChar+0x21c>)
 80076ee:	f7fe fc43 	bl	8005f78 <term_print>
	}
	Displ_WriteData(dispBuffer,bufSize,0);
 80076f2:	4b0c      	ldr	r3, [pc, #48]	; (8007724 <Displ_WChar+0x210>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2200      	movs	r2, #0
 80076f8:	6a39      	ldr	r1, [r7, #32]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe ff1f 	bl	800653e <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8007700:	4b08      	ldr	r3, [pc, #32]	; (8007724 <Displ_WChar+0x210>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a0b      	ldr	r2, [pc, #44]	; (8007734 <Displ_WChar+0x220>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d101      	bne.n	800770e <Displ_WChar+0x1fa>
 800770a:	4b0b      	ldr	r3, [pc, #44]	; (8007738 <Displ_WChar+0x224>)
 800770c:	e000      	b.n	8007710 <Displ_WChar+0x1fc>
 800770e:	4b09      	ldr	r3, [pc, #36]	; (8007734 <Displ_WChar+0x220>)
 8007710:	4a04      	ldr	r2, [pc, #16]	; (8007724 <Displ_WChar+0x210>)
 8007712:	6013      	str	r3, [r2, #0]

}
 8007714:	bf00      	nop
 8007716:	3734      	adds	r7, #52	; 0x34
 8007718:	46bd      	mov	sp, r7
 800771a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800771e:	b002      	add	sp, #8
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20000038 	.word	0x20000038
 8007728:	080165f4 	.word	0x080165f4
 800772c:	080124c8 	.word	0x080124c8
 8007730:	080124e8 	.word	0x080124e8
 8007734:	20008670 	.word	0x20008670
 8007738:	20008e70 	.word	0x20008e70

0800773c <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 800773c:	b590      	push	{r4, r7, lr}
 800773e:	b087      	sub	sp, #28
 8007740:	af02      	add	r7, sp, #8
 8007742:	4604      	mov	r4, r0
 8007744:	4608      	mov	r0, r1
 8007746:	4611      	mov	r1, r2
 8007748:	461a      	mov	r2, r3
 800774a:	4623      	mov	r3, r4
 800774c:	80fb      	strh	r3, [r7, #6]
 800774e:	4603      	mov	r3, r0
 8007750:	80bb      	strh	r3, [r7, #4]
 8007752:	460b      	mov	r3, r1
 8007754:	807b      	strh	r3, [r7, #2]
 8007756:	4613      	mov	r3, r2
 8007758:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800775a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800775e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007762:	4293      	cmp	r3, r2
 8007764:	bfa8      	it	ge
 8007766:	4613      	movge	r3, r2
 8007768:	b21b      	sxth	r3, r3
 800776a:	0fda      	lsrs	r2, r3, #31
 800776c:	4413      	add	r3, r2
 800776e:	105b      	asrs	r3, r3, #1
 8007770:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8007772:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800777a:	429a      	cmp	r2, r3
 800777c:	dd01      	ble.n	8007782 <Displ_drawRoundRect+0x46>
 800777e:	89fb      	ldrh	r3, [r7, #14]
 8007780:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 8007782:	88fa      	ldrh	r2, [r7, #6]
 8007784:	8c3b      	ldrh	r3, [r7, #32]
 8007786:	4413      	add	r3, r2
 8007788:	b29b      	uxth	r3, r3
 800778a:	b218      	sxth	r0, r3
 800778c:	88fa      	ldrh	r2, [r7, #6]
 800778e:	887b      	ldrh	r3, [r7, #2]
 8007790:	4413      	add	r3, r2
 8007792:	b29a      	uxth	r2, r3
 8007794:	8c3b      	ldrh	r3, [r7, #32]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	b29b      	uxth	r3, r3
 800779a:	3b01      	subs	r3, #1
 800779c:	b29b      	uxth	r3, r3
 800779e:	b21a      	sxth	r2, r3
 80077a0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80077a4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80077a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	4623      	mov	r3, r4
 80077ae:	f7ff fba6 	bl	8006efe <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	8c3b      	ldrh	r3, [r7, #32]
 80077b6:	4413      	add	r3, r2
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	b218      	sxth	r0, r3
 80077bc:	88ba      	ldrh	r2, [r7, #4]
 80077be:	883b      	ldrh	r3, [r7, #0]
 80077c0:	4413      	add	r3, r2
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	3b01      	subs	r3, #1
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	b219      	sxth	r1, r3
 80077ca:	88fa      	ldrh	r2, [r7, #6]
 80077cc:	887b      	ldrh	r3, [r7, #2]
 80077ce:	4413      	add	r3, r2
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	8c3b      	ldrh	r3, [r7, #32]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29b      	uxth	r3, r3
 80077dc:	b21c      	sxth	r4, r3
 80077de:	88ba      	ldrh	r2, [r7, #4]
 80077e0:	883b      	ldrh	r3, [r7, #0]
 80077e2:	4413      	add	r3, r2
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	b21a      	sxth	r2, r3
 80077ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	4613      	mov	r3, r2
 80077f2:	4622      	mov	r2, r4
 80077f4:	f7ff fb83 	bl	8006efe <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 80077f8:	88ba      	ldrh	r2, [r7, #4]
 80077fa:	8c3b      	ldrh	r3, [r7, #32]
 80077fc:	4413      	add	r3, r2
 80077fe:	b29b      	uxth	r3, r3
 8007800:	b219      	sxth	r1, r3
 8007802:	88ba      	ldrh	r2, [r7, #4]
 8007804:	883b      	ldrh	r3, [r7, #0]
 8007806:	4413      	add	r3, r2
 8007808:	b29a      	uxth	r2, r3
 800780a:	8c3b      	ldrh	r3, [r7, #32]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	b29b      	uxth	r3, r3
 8007810:	3b01      	subs	r3, #1
 8007812:	b29b      	uxth	r3, r3
 8007814:	b21c      	sxth	r4, r3
 8007816:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800781a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800781e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	4623      	mov	r3, r4
 8007824:	f7ff fb6b 	bl	8006efe <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 8007828:	88fa      	ldrh	r2, [r7, #6]
 800782a:	887b      	ldrh	r3, [r7, #2]
 800782c:	4413      	add	r3, r2
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29b      	uxth	r3, r3
 8007834:	b218      	sxth	r0, r3
 8007836:	88ba      	ldrh	r2, [r7, #4]
 8007838:	8c3b      	ldrh	r3, [r7, #32]
 800783a:	4413      	add	r3, r2
 800783c:	b29b      	uxth	r3, r3
 800783e:	b219      	sxth	r1, r3
 8007840:	88fa      	ldrh	r2, [r7, #6]
 8007842:	887b      	ldrh	r3, [r7, #2]
 8007844:	4413      	add	r3, r2
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b29b      	uxth	r3, r3
 800784c:	b21c      	sxth	r4, r3
 800784e:	88ba      	ldrh	r2, [r7, #4]
 8007850:	883b      	ldrh	r3, [r7, #0]
 8007852:	4413      	add	r3, r2
 8007854:	b29a      	uxth	r2, r3
 8007856:	8c3b      	ldrh	r3, [r7, #32]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29b      	uxth	r3, r3
 8007860:	b21a      	sxth	r2, r3
 8007862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	4613      	mov	r3, r2
 8007868:	4622      	mov	r2, r4
 800786a:	f7ff fb48 	bl	8006efe <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 800786e:	88fa      	ldrh	r2, [r7, #6]
 8007870:	8c3b      	ldrh	r3, [r7, #32]
 8007872:	4413      	add	r3, r2
 8007874:	b29b      	uxth	r3, r3
 8007876:	b218      	sxth	r0, r3
 8007878:	88ba      	ldrh	r2, [r7, #4]
 800787a:	8c3b      	ldrh	r3, [r7, #32]
 800787c:	4413      	add	r3, r2
 800787e:	b29b      	uxth	r3, r3
 8007880:	b219      	sxth	r1, r3
 8007882:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	2301      	movs	r3, #1
 800788c:	f7ff f96a 	bl	8006b64 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8007890:	88fa      	ldrh	r2, [r7, #6]
 8007892:	887b      	ldrh	r3, [r7, #2]
 8007894:	4413      	add	r3, r2
 8007896:	b29a      	uxth	r2, r3
 8007898:	8c3b      	ldrh	r3, [r7, #32]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	b29b      	uxth	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	b218      	sxth	r0, r3
 80078a4:	88ba      	ldrh	r2, [r7, #4]
 80078a6:	8c3b      	ldrh	r3, [r7, #32]
 80078a8:	4413      	add	r3, r2
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	b219      	sxth	r1, r3
 80078ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80078b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	2302      	movs	r3, #2
 80078b8:	f7ff f954 	bl	8006b64 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 80078bc:	88fa      	ldrh	r2, [r7, #6]
 80078be:	887b      	ldrh	r3, [r7, #2]
 80078c0:	4413      	add	r3, r2
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	8c3b      	ldrh	r3, [r7, #32]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	3b01      	subs	r3, #1
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	b218      	sxth	r0, r3
 80078d0:	88ba      	ldrh	r2, [r7, #4]
 80078d2:	883b      	ldrh	r3, [r7, #0]
 80078d4:	4413      	add	r3, r2
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	8c3b      	ldrh	r3, [r7, #32]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	b219      	sxth	r1, r3
 80078e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80078e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	2304      	movs	r3, #4
 80078ee:	f7ff f939 	bl	8006b64 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80078f2:	88fa      	ldrh	r2, [r7, #6]
 80078f4:	8c3b      	ldrh	r3, [r7, #32]
 80078f6:	4413      	add	r3, r2
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	b218      	sxth	r0, r3
 80078fc:	88ba      	ldrh	r2, [r7, #4]
 80078fe:	883b      	ldrh	r3, [r7, #0]
 8007900:	4413      	add	r3, r2
 8007902:	b29a      	uxth	r2, r3
 8007904:	8c3b      	ldrh	r3, [r7, #32]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	b29b      	uxth	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	b29b      	uxth	r3, r3
 800790e:	b219      	sxth	r1, r3
 8007910:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007914:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	2308      	movs	r3, #8
 800791a:	f7ff f923 	bl	8006b64 <drawCircleHelper>
}
 800791e:	bf00      	nop
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	bd90      	pop	{r4, r7, pc}

08007926 <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8007926:	b590      	push	{r4, r7, lr}
 8007928:	b087      	sub	sp, #28
 800792a:	af02      	add	r7, sp, #8
 800792c:	4604      	mov	r4, r0
 800792e:	4608      	mov	r0, r1
 8007930:	4611      	mov	r1, r2
 8007932:	461a      	mov	r2, r3
 8007934:	4623      	mov	r3, r4
 8007936:	80fb      	strh	r3, [r7, #6]
 8007938:	4603      	mov	r3, r0
 800793a:	80bb      	strh	r3, [r7, #4]
 800793c:	460b      	mov	r3, r1
 800793e:	807b      	strh	r3, [r7, #2]
 8007940:	4613      	mov	r3, r2
 8007942:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8007944:	f9b7 2000 	ldrsh.w	r2, [r7]
 8007948:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800794c:	4293      	cmp	r3, r2
 800794e:	bfa8      	it	ge
 8007950:	4613      	movge	r3, r2
 8007952:	b21b      	sxth	r3, r3
 8007954:	0fda      	lsrs	r2, r3, #31
 8007956:	4413      	add	r3, r2
 8007958:	105b      	asrs	r3, r3, #1
 800795a:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800795c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007960:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007964:	429a      	cmp	r2, r3
 8007966:	dd01      	ble.n	800796c <Displ_fillRoundRect+0x46>
 8007968:	89fb      	ldrh	r3, [r7, #14]
 800796a:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	8c3b      	ldrh	r3, [r7, #32]
 8007970:	4413      	add	r3, r2
 8007972:	b298      	uxth	r0, r3
 8007974:	88b9      	ldrh	r1, [r7, #4]
 8007976:	887a      	ldrh	r2, [r7, #2]
 8007978:	8c3b      	ldrh	r3, [r7, #32]
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	b29b      	uxth	r3, r3
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	b29a      	uxth	r2, r3
 8007982:	883c      	ldrh	r4, [r7, #0]
 8007984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	4623      	mov	r3, r4
 800798a:	f7fe ff1b 	bl	80067c4 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800798e:	88fa      	ldrh	r2, [r7, #6]
 8007990:	887b      	ldrh	r3, [r7, #2]
 8007992:	4413      	add	r3, r2
 8007994:	b29a      	uxth	r2, r3
 8007996:	8c3b      	ldrh	r3, [r7, #32]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	b29b      	uxth	r3, r3
 800799c:	3b01      	subs	r3, #1
 800799e:	b29b      	uxth	r3, r3
 80079a0:	b218      	sxth	r0, r3
 80079a2:	88ba      	ldrh	r2, [r7, #4]
 80079a4:	8c3b      	ldrh	r3, [r7, #32]
 80079a6:	4413      	add	r3, r2
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	b219      	sxth	r1, r3
 80079ac:	883a      	ldrh	r2, [r7, #0]
 80079ae:	8c3b      	ldrh	r3, [r7, #32]
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	3b01      	subs	r3, #1
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	b21b      	sxth	r3, r3
 80079be:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80079c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079c4:	9201      	str	r2, [sp, #4]
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	2301      	movs	r3, #1
 80079ca:	4622      	mov	r2, r4
 80079cc:	f7ff f98e 	bl	8006cec <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80079d0:	88fa      	ldrh	r2, [r7, #6]
 80079d2:	8c3b      	ldrh	r3, [r7, #32]
 80079d4:	4413      	add	r3, r2
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	b218      	sxth	r0, r3
 80079da:	88ba      	ldrh	r2, [r7, #4]
 80079dc:	8c3b      	ldrh	r3, [r7, #32]
 80079de:	4413      	add	r3, r2
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	b219      	sxth	r1, r3
 80079e4:	883a      	ldrh	r2, [r7, #0]
 80079e6:	8c3b      	ldrh	r3, [r7, #32]
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	3b01      	subs	r3, #1
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	b21b      	sxth	r3, r3
 80079f6:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80079fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079fc:	9201      	str	r2, [sp, #4]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2302      	movs	r3, #2
 8007a02:	4622      	mov	r2, r4
 8007a04:	f7ff f972 	bl	8006cec <fillCircleHelper>
}
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd90      	pop	{r4, r7, pc}

08007a10 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8007a10:	b082      	sub	sp, #8
 8007a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a14:	b08b      	sub	sp, #44	; 0x2c
 8007a16:	af06      	add	r7, sp, #24
 8007a18:	603a      	str	r2, [r7, #0]
 8007a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	80fb      	strh	r3, [r7, #6]
 8007a20:	460b      	mov	r3, r1
 8007a22:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 8007a24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a26:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 8007a28:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d922      	bls.n	8007a76 <Displ_WString+0x66>
		delta<<=1;
 8007a30:	89fb      	ldrh	r3, [r7, #14]
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8007a36:	e01e      	b.n	8007a76 <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781a      	ldrb	r2, [r3, #0]
 8007a3c:	88bd      	ldrh	r5, [r7, #4]
 8007a3e:	88fc      	ldrh	r4, [r7, #6]
 8007a40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007a44:	9304      	str	r3, [sp, #16]
 8007a46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a48:	9303      	str	r3, [sp, #12]
 8007a4a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007a4e:	9302      	str	r3, [sp, #8]
 8007a50:	466e      	mov	r6, sp
 8007a52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007a5a:	e886 0003 	stmia.w	r6, {r0, r1}
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	4629      	mov	r1, r5
 8007a62:	4620      	mov	r0, r4
 8007a64:	f7ff fd56 	bl	8007514 <Displ_WChar>
        x += delta;
 8007a68:	88fa      	ldrh	r2, [r7, #6]
 8007a6a:	89fb      	ldrh	r3, [r7, #14]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	80fb      	strh	r3, [r7, #6]
        str++;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	603b      	str	r3, [r7, #0]
    while(*str) {
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1dc      	bne.n	8007a38 <Displ_WString+0x28>
    }
}
 8007a7e:	bf00      	nop
 8007a80:	bf00      	nop
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007a8a:	b002      	add	sp, #8
 8007a8c:	4770      	bx	lr
	...

08007a90 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	4603      	mov	r3, r0
 8007a98:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	2b51      	cmp	r3, #81	; 0x51
 8007a9e:	d00a      	beq.n	8007ab6 <Displ_BackLight+0x26>
 8007aa0:	2b51      	cmp	r3, #81	; 0x51
 8007aa2:	dc16      	bgt.n	8007ad2 <Displ_BackLight+0x42>
 8007aa4:	2b46      	cmp	r3, #70	; 0x46
 8007aa6:	d008      	beq.n	8007aba <Displ_BackLight+0x2a>
 8007aa8:	2b46      	cmp	r3, #70	; 0x46
 8007aaa:	dc12      	bgt.n	8007ad2 <Displ_BackLight+0x42>
 8007aac:	2b30      	cmp	r3, #48	; 0x30
 8007aae:	d00a      	beq.n	8007ac6 <Displ_BackLight+0x36>
 8007ab0:	2b31      	cmp	r3, #49	; 0x31
 8007ab2:	d002      	beq.n	8007aba <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8007ab4:	e00d      	b.n	8007ad2 <Displ_BackLight+0x42>
		__NOP();
 8007ab6:	bf00      	nop
		break;
 8007ab8:	e00c      	b.n	8007ad4 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8007aba:	2201      	movs	r2, #1
 8007abc:	2140      	movs	r1, #64	; 0x40
 8007abe:	480a      	ldr	r0, [pc, #40]	; (8007ae8 <Displ_BackLight+0x58>)
 8007ac0:	f002 f860 	bl	8009b84 <HAL_GPIO_WritePin>
		break;
 8007ac4:	e006      	b.n	8007ad4 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2140      	movs	r1, #64	; 0x40
 8007aca:	4807      	ldr	r0, [pc, #28]	; (8007ae8 <Displ_BackLight+0x58>)
 8007acc:	f002 f85a 	bl	8009b84 <HAL_GPIO_WritePin>
		break;
 8007ad0:	e000      	b.n	8007ad4 <Displ_BackLight+0x44>
		break;
 8007ad2:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8007ad4:	2140      	movs	r1, #64	; 0x40
 8007ad6:	4804      	ldr	r0, [pc, #16]	; (8007ae8 <Displ_BackLight+0x58>)
 8007ad8:	f002 f83c 	bl	8009b54 <HAL_GPIO_ReadPin>
 8007adc:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	40020000 	.word	0x40020000

08007aec <testLines>:




void testLines(uint16_t color)
{
 8007aec:	b590      	push	{r4, r7, lr}
 8007aee:	b08b      	sub	sp, #44	; 0x2c
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	4603      	mov	r3, r0
 8007af4:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8007af6:	4b7c      	ldr	r3, [pc, #496]	; (8007ce8 <testLines+0x1fc>)
 8007af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007afc:	617b      	str	r3, [r7, #20]
                  h = _height;
 8007afe:	4b7b      	ldr	r3, [pc, #492]	; (8007cec <testLines+0x200>)
 8007b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b04:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8007b06:	2000      	movs	r0, #0
 8007b08:	f7ff f810 	bl	8006b2c <Displ_CLS>

    x1 = y1 = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61fb      	str	r3, [r7, #28]
 8007b1e:	e00f      	b.n	8007b40 <testLines+0x54>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	b218      	sxth	r0, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	b219      	sxth	r1, r3
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	b21a      	sxth	r2, r3
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	b21c      	sxth	r4, r3
 8007b30:	88fb      	ldrh	r3, [r7, #6]
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	4623      	mov	r3, r4
 8007b36:	f7ff f9e2 	bl	8006efe <Displ_Line>
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	3306      	adds	r3, #6
 8007b3e:	61fb      	str	r3, [r7, #28]
 8007b40:	69fa      	ldr	r2, [r7, #28]
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	dbeb      	blt.n	8007b20 <testLines+0x34>
    x2    = w - 1;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007b4e:	2300      	movs	r3, #0
 8007b50:	61bb      	str	r3, [r7, #24]
 8007b52:	e00f      	b.n	8007b74 <testLines+0x88>
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	b218      	sxth	r0, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	b219      	sxth	r1, r3
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	b21a      	sxth	r2, r3
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	b21c      	sxth	r4, r3
 8007b64:	88fb      	ldrh	r3, [r7, #6]
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	4623      	mov	r3, r4
 8007b6a:	f7ff f9c8 	bl	8006efe <Displ_Line>
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	3306      	adds	r3, #6
 8007b72:	61bb      	str	r3, [r7, #24]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	dbeb      	blt.n	8007b54 <testLines+0x68>

    Displ_CLS(BLACK);
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	f7fe ffd5 	bl	8006b2c <Displ_CLS>

    x1    = w - 1;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007b92:	2300      	movs	r3, #0
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	e00f      	b.n	8007bb8 <testLines+0xcc>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	b218      	sxth	r0, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	b219      	sxth	r1, r3
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	b21a      	sxth	r2, r3
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	b21c      	sxth	r4, r3
 8007ba8:	88fb      	ldrh	r3, [r7, #6]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	4623      	mov	r3, r4
 8007bae:	f7ff f9a6 	bl	8006efe <Displ_Line>
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	3306      	adds	r3, #6
 8007bb6:	61fb      	str	r3, [r7, #28]
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	dbeb      	blt.n	8007b98 <testLines+0xac>
    x2    = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61bb      	str	r3, [r7, #24]
 8007bc8:	e00f      	b.n	8007bea <testLines+0xfe>
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	b218      	sxth	r0, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	b219      	sxth	r1, r3
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	b21a      	sxth	r2, r3
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	b21c      	sxth	r4, r3
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	4623      	mov	r3, r4
 8007be0:	f7ff f98d 	bl	8006efe <Displ_Line>
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	3306      	adds	r3, #6
 8007be8:	61bb      	str	r3, [r7, #24]
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	dbeb      	blt.n	8007bca <testLines+0xde>

    Displ_CLS(BLACK);
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	f7fe ff9a 	bl	8006b2c <Displ_CLS>

    x1    = 0;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007c06:	2300      	movs	r3, #0
 8007c08:	61fb      	str	r3, [r7, #28]
 8007c0a:	e00f      	b.n	8007c2c <testLines+0x140>
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	b218      	sxth	r0, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	b219      	sxth	r1, r3
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	b21a      	sxth	r2, r3
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	b21c      	sxth	r4, r3
 8007c1c:	88fb      	ldrh	r3, [r7, #6]
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	4623      	mov	r3, r4
 8007c22:	f7ff f96c 	bl	8006efe <Displ_Line>
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	3306      	adds	r3, #6
 8007c2a:	61fb      	str	r3, [r7, #28]
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	dbeb      	blt.n	8007c0c <testLines+0x120>
    x2    = w - 1;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	61bb      	str	r3, [r7, #24]
 8007c3e:	e00f      	b.n	8007c60 <testLines+0x174>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	b218      	sxth	r0, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	b219      	sxth	r1, r3
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	b21a      	sxth	r2, r3
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	b21c      	sxth	r4, r3
 8007c50:	88fb      	ldrh	r3, [r7, #6]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	4623      	mov	r3, r4
 8007c56:	f7ff f952 	bl	8006efe <Displ_Line>
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	3306      	adds	r3, #6
 8007c5e:	61bb      	str	r3, [r7, #24]
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	dbeb      	blt.n	8007c40 <testLines+0x154>

    Displ_CLS(BLACK);
 8007c68:	2000      	movs	r0, #0
 8007c6a:	f7fe ff5f 	bl	8006b2c <Displ_CLS>

    x1    = w - 1;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61fb      	str	r3, [r7, #28]
 8007c82:	e00f      	b.n	8007ca4 <testLines+0x1b8>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	b218      	sxth	r0, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	b219      	sxth	r1, r3
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	b21a      	sxth	r2, r3
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	b21c      	sxth	r4, r3
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	4623      	mov	r3, r4
 8007c9a:	f7ff f930 	bl	8006efe <Displ_Line>
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	3306      	adds	r3, #6
 8007ca2:	61fb      	str	r3, [r7, #28]
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	dbeb      	blt.n	8007c84 <testLines+0x198>
    x2    = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	e00f      	b.n	8007cd6 <testLines+0x1ea>
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	b218      	sxth	r0, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	b219      	sxth	r1, r3
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	b21a      	sxth	r2, r3
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	b21c      	sxth	r4, r3
 8007cc6:	88fb      	ldrh	r3, [r7, #6]
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	4623      	mov	r3, r4
 8007ccc:	f7ff f917 	bl	8006efe <Displ_Line>
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	3306      	adds	r3, #6
 8007cd4:	61bb      	str	r3, [r7, #24]
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	dbeb      	blt.n	8007cb6 <testLines+0x1ca>

}
 8007cde:	bf00      	nop
 8007ce0:	bf00      	nop
 8007ce2:	3724      	adds	r7, #36	; 0x24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd90      	pop	{r4, r7, pc}
 8007ce8:	2000866a 	.word	0x2000866a
 8007cec:	2000866c 	.word	0x2000866c

08007cf0 <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b088      	sub	sp, #32
 8007cf4:	af02      	add	r7, sp, #8
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	460a      	mov	r2, r1
 8007cfa:	80fb      	strh	r3, [r7, #6]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 8007d00:	4b20      	ldr	r3, [pc, #128]	; (8007d84 <testFastLines+0x94>)
 8007d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	4b1f      	ldr	r3, [pc, #124]	; (8007d88 <testFastLines+0x98>)
 8007d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d0e:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8007d10:	2000      	movs	r0, #0
 8007d12:	f7fe ff0b 	bl	8006b2c <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 8007d16:	2300      	movs	r3, #0
 8007d18:	613b      	str	r3, [r7, #16]
 8007d1a:	e011      	b.n	8007d40 <testFastLines+0x50>
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	b219      	sxth	r1, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	b21a      	sxth	r2, r3
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	b218      	sxth	r0, r3
 8007d2e:	88fb      	ldrh	r3, [r7, #6]
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	4603      	mov	r3, r0
 8007d34:	2000      	movs	r0, #0
 8007d36:	f7ff f8e2 	bl	8006efe <Displ_Line>
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	3305      	adds	r3, #5
 8007d3e:	613b      	str	r3, [r7, #16]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	dbe9      	blt.n	8007d1c <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 8007d48:	2300      	movs	r3, #0
 8007d4a:	617b      	str	r3, [r7, #20]
 8007d4c:	e011      	b.n	8007d72 <testFastLines+0x82>
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	b218      	sxth	r0, r3
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	b21a      	sxth	r2, r3
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	b219      	sxth	r1, r3
 8007d60:	88bb      	ldrh	r3, [r7, #4]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	460b      	mov	r3, r1
 8007d66:	2100      	movs	r1, #0
 8007d68:	f7ff f8c9 	bl	8006efe <Displ_Line>
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	3305      	adds	r3, #5
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	dbe9      	blt.n	8007d4e <testFastLines+0x5e>
}
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	2000866a 	.word	0x2000866a
 8007d88:	2000866c 	.word	0x2000866c

08007d8c <testRects>:




void testRects(uint16_t color)
{
 8007d8c:	b590      	push	{r4, r7, lr}
 8007d8e:	b08b      	sub	sp, #44	; 0x2c
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	4603      	mov	r3, r0
 8007d94:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 8007d96:	4b25      	ldr	r3, [pc, #148]	; (8007e2c <testRects+0xa0>)
 8007d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d9c:	0fda      	lsrs	r2, r3, #31
 8007d9e:	4413      	add	r3, r2
 8007da0:	105b      	asrs	r3, r3, #1
 8007da2:	b21b      	sxth	r3, r3
 8007da4:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 8007da6:	4b22      	ldr	r3, [pc, #136]	; (8007e30 <testRects+0xa4>)
 8007da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dac:	0fda      	lsrs	r2, r3, #31
 8007dae:	4413      	add	r3, r2
 8007db0:	105b      	asrs	r3, r3, #1
 8007db2:	b21b      	sxth	r3, r3
 8007db4:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8007db6:	2000      	movs	r0, #0
 8007db8:	f7fe feb8 	bl	8006b2c <Displ_CLS>
	n     = min(_width, _height);
 8007dbc:	4b1c      	ldr	r3, [pc, #112]	; (8007e30 <testRects+0xa4>)
 8007dbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007dc2:	4b1a      	ldr	r3, [pc, #104]	; (8007e2c <testRects+0xa0>)
 8007dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	bfa8      	it	ge
 8007dcc:	4613      	movge	r3, r2
 8007dce:	b21b      	sxth	r3, r3
 8007dd0:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	61fb      	str	r3, [r7, #28]
 8007dd6:	e020      	b.n	8007e1a <testRects+0x8e>
		i2 = i / 2;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	0fda      	lsrs	r2, r3, #31
 8007ddc:	4413      	add	r3, r2
 8007dde:	105b      	asrs	r3, r3, #1
 8007de0:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	b218      	sxth	r0, r3
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	b219      	sxth	r1, r3
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	b21a      	sxth	r2, r3
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	b21c      	sxth	r4, r3
 8007e06:	88fb      	ldrh	r3, [r7, #6]
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	4623      	mov	r3, r4
 8007e10:	f7ff f9a6 	bl	8007160 <Displ_Border>
	for (i = 2; i < n; i += 6) {
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	3306      	adds	r3, #6
 8007e18:	61fb      	str	r3, [r7, #28]
 8007e1a:	69fa      	ldr	r2, [r7, #28]
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	dbda      	blt.n	8007dd8 <testRects+0x4c>
	}
}
 8007e22:	bf00      	nop
 8007e24:	bf00      	nop
 8007e26:	3724      	adds	r7, #36	; 0x24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd90      	pop	{r4, r7, pc}
 8007e2c:	2000866a 	.word	0x2000866a
 8007e30:	2000866c 	.word	0x2000866c

08007e34 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8007e34:	b590      	push	{r4, r7, lr}
 8007e36:	b08b      	sub	sp, #44	; 0x2c
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	460a      	mov	r2, r1
 8007e3e:	80fb      	strh	r3, [r7, #6]
 8007e40:	4613      	mov	r3, r2
 8007e42:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8007e44:	4b30      	ldr	r3, [pc, #192]	; (8007f08 <testFilledRects+0xd4>)
 8007e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e4a:	0fda      	lsrs	r2, r3, #31
 8007e4c:	4413      	add	r3, r2
 8007e4e:	105b      	asrs	r3, r3, #1
 8007e50:	b21b      	sxth	r3, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 8007e56:	4b2d      	ldr	r3, [pc, #180]	; (8007f0c <testFilledRects+0xd8>)
 8007e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e5c:	0fda      	lsrs	r2, r3, #31
 8007e5e:	4413      	add	r3, r2
 8007e60:	105b      	asrs	r3, r3, #1
 8007e62:	b21b      	sxth	r3, r3
 8007e64:	3b01      	subs	r3, #1
 8007e66:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8007e68:	2000      	movs	r0, #0
 8007e6a:	f7fe fe5f 	bl	8006b2c <Displ_CLS>
	n = min(_width, _height);
 8007e6e:	4b27      	ldr	r3, [pc, #156]	; (8007f0c <testFilledRects+0xd8>)
 8007e70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007e74:	4b24      	ldr	r3, [pc, #144]	; (8007f08 <testFilledRects+0xd4>)
 8007e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	bfa8      	it	ge
 8007e7e:	4613      	movge	r3, r2
 8007e80:	b21b      	sxth	r3, r3
 8007e82:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	e035      	b.n	8007ef6 <testFilledRects+0xc2>
		i2    = i / 2;
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	0fda      	lsrs	r2, r3, #31
 8007e8e:	4413      	add	r3, r2
 8007e90:	105b      	asrs	r3, r3, #1
 8007e92:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	b298      	uxth	r0, r3
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	b299      	uxth	r1, r3
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	b29c      	uxth	r4, r3
 8007eb4:	88fb      	ldrh	r3, [r7, #6]
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	4623      	mov	r3, r4
 8007eba:	f7fe fc83 	bl	80067c4 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	b218      	sxth	r0, r3
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	b219      	sxth	r1, r3
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	b21a      	sxth	r2, r3
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	b21c      	sxth	r4, r3
 8007ee2:	88bb      	ldrh	r3, [r7, #4]
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	4623      	mov	r3, r4
 8007eec:	f7ff f938 	bl	8007160 <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	3b06      	subs	r3, #6
 8007ef4:	61fb      	str	r3, [r7, #28]
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	dcc6      	bgt.n	8007e8a <testFilledRects+0x56>
	}
}
 8007efc:	bf00      	nop
 8007efe:	bf00      	nop
 8007f00:	3724      	adds	r7, #36	; 0x24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd90      	pop	{r4, r7, pc}
 8007f06:	bf00      	nop
 8007f08:	2000866a 	.word	0x2000866a
 8007f0c:	2000866c 	.word	0x2000866c

08007f10 <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	4603      	mov	r3, r0
 8007f18:	460a      	mov	r2, r1
 8007f1a:	71fb      	strb	r3, [r7, #7]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8007f20:	4b18      	ldr	r3, [pc, #96]	; (8007f84 <testFilledCircles+0x74>)
 8007f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	4b17      	ldr	r3, [pc, #92]	; (8007f88 <testFilledCircles+0x78>)
 8007f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f2e:	613b      	str	r3, [r7, #16]
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 8007f36:	2000      	movs	r0, #0
 8007f38:	f7fe fdf8 	bl	8006b2c <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8007f3c:	79fb      	ldrb	r3, [r7, #7]
 8007f3e:	61fb      	str	r3, [r7, #28]
 8007f40:	e017      	b.n	8007f72 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8007f42:	79fb      	ldrb	r3, [r7, #7]
 8007f44:	61bb      	str	r3, [r7, #24]
 8007f46:	e00c      	b.n	8007f62 <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	b218      	sxth	r0, r3
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	b219      	sxth	r1, r3
 8007f50:	79fb      	ldrb	r3, [r7, #7]
 8007f52:	b21a      	sxth	r2, r3
 8007f54:	88bb      	ldrh	r3, [r7, #4]
 8007f56:	f7fe ff9f 	bl	8006e98 <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	61bb      	str	r3, [r7, #24]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	dbee      	blt.n	8007f48 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	61fb      	str	r3, [r7, #28]
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	dbe3      	blt.n	8007f42 <testFilledCircles+0x32>
        }
    }
}
 8007f7a:	bf00      	nop
 8007f7c:	bf00      	nop
 8007f7e:	3720      	adds	r7, #32
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	2000866a 	.word	0x2000866a
 8007f88:	2000866c 	.word	0x2000866c

08007f8c <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4603      	mov	r3, r0
 8007f94:	460a      	mov	r2, r1
 8007f96:	71fb      	strb	r3, [r7, #7]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8007fa2:	4b19      	ldr	r3, [pc, #100]	; (8008008 <testCircles+0x7c>)
 8007fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	4413      	add	r3, r2
 8007fae:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8007fb0:	4b16      	ldr	r3, [pc, #88]	; (800800c <testCircles+0x80>)
 8007fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	4413      	add	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	61fb      	str	r3, [r7, #28]
 8007fc2:	e017      	b.n	8007ff4 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	61bb      	str	r3, [r7, #24]
 8007fc8:	e00c      	b.n	8007fe4 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	b218      	sxth	r0, r3
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	b219      	sxth	r1, r3
 8007fd2:	79fb      	ldrb	r3, [r7, #7]
 8007fd4:	b21a      	sxth	r2, r3
 8007fd6:	88bb      	ldrh	r3, [r7, #4]
 8007fd8:	f7fe fcd4 	bl	8006984 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	61bb      	str	r3, [r7, #24]
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	dbee      	blt.n	8007fca <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	61fb      	str	r3, [r7, #28]
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	dbe3      	blt.n	8007fc4 <testCircles+0x38>
        }
    }
}
 8007ffc:	bf00      	nop
 8007ffe:	bf00      	nop
 8008000:	3720      	adds	r7, #32
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	2000866a 	.word	0x2000866a
 800800c:	2000866c 	.word	0x2000866c

08008010 <testTriangles>:




void testTriangles()
{
 8008010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008012:	b089      	sub	sp, #36	; 0x24
 8008014:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 8008016:	4b2e      	ldr	r3, [pc, #184]	; (80080d0 <testTriangles+0xc0>)
 8008018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800801c:	0fda      	lsrs	r2, r3, #31
 800801e:	4413      	add	r3, r2
 8008020:	105b      	asrs	r3, r3, #1
 8008022:	b21b      	sxth	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8008028:	4b2a      	ldr	r3, [pc, #168]	; (80080d4 <testTriangles+0xc4>)
 800802a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800802e:	0fda      	lsrs	r2, r3, #31
 8008030:	4413      	add	r3, r2
 8008032:	105b      	asrs	r3, r3, #1
 8008034:	b21b      	sxth	r3, r3
 8008036:	3b01      	subs	r3, #1
 8008038:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 800803a:	2000      	movs	r0, #0
 800803c:	f7fe fd76 	bl	8006b2c <Displ_CLS>
    n     = min(cx, cy);
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	4293      	cmp	r3, r2
 8008046:	bfa8      	it	ge
 8008048:	4613      	movge	r3, r2
 800804a:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	e035      	b.n	80080be <testTriangles+0xae>
    	Displ_drawTriangle(
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	b29a      	uxth	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	b29b      	uxth	r3, r3
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8008062:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	b29a      	uxth	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	b29b      	uxth	r3, r3
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8008070:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	b29a      	uxth	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	b29b      	uxth	r3, r3
 800807a:	4413      	add	r3, r2
 800807c:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 800807e:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	b29b      	uxth	r3, r3
 8008088:	4413      	add	r3, r2
 800808a:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 800808c:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	b291      	uxth	r1, r2
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	b292      	uxth	r2, r2
 8008096:	440a      	add	r2, r1
 8008098:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 800809a:	b212      	sxth	r2, r2
            color565(0, 0, i));
 800809c:	68f9      	ldr	r1, [r7, #12]
 800809e:	10c9      	asrs	r1, r1, #3
 80080a0:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 80080a2:	f001 011f 	and.w	r1, r1, #31
 80080a6:	b289      	uxth	r1, r1
 80080a8:	9102      	str	r1, [sp, #8]
 80080aa:	9201      	str	r2, [sp, #4]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	4633      	mov	r3, r6
 80080b0:	462a      	mov	r2, r5
 80080b2:	4621      	mov	r1, r4
 80080b4:	f7ff f897 	bl	80071e6 <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3305      	adds	r3, #5
 80080bc:	60fb      	str	r3, [r7, #12]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	dbc5      	blt.n	8008052 <testTriangles+0x42>
    }
}
 80080c6:	bf00      	nop
 80080c8:	bf00      	nop
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d0:	2000866a 	.word	0x2000866a
 80080d4:	2000866c 	.word	0x2000866c

080080d8 <testFilledTriangles>:





void testFilledTriangles() {
 80080d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080da:	b089      	sub	sp, #36	; 0x24
 80080dc:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 80080de:	4b53      	ldr	r3, [pc, #332]	; (800822c <testFilledTriangles+0x154>)
 80080e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080e4:	0fda      	lsrs	r2, r3, #31
 80080e6:	4413      	add	r3, r2
 80080e8:	105b      	asrs	r3, r3, #1
 80080ea:	b21b      	sxth	r3, r3
 80080ec:	3b01      	subs	r3, #1
 80080ee:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 80080f0:	4b4f      	ldr	r3, [pc, #316]	; (8008230 <testFilledTriangles+0x158>)
 80080f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080f6:	0fda      	lsrs	r2, r3, #31
 80080f8:	4413      	add	r3, r2
 80080fa:	105b      	asrs	r3, r3, #1
 80080fc:	b21b      	sxth	r3, r3
 80080fe:	3b01      	subs	r3, #1
 8008100:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8008102:	2000      	movs	r0, #0
 8008104:	f7fe fd12 	bl	8006b2c <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	4293      	cmp	r3, r2
 800810e:	bfa8      	it	ge
 8008110:	4613      	movge	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	e080      	b.n	8008218 <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	b21c      	sxth	r4, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	b29a      	uxth	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	b29b      	uxth	r3, r3
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	b29b      	uxth	r3, r3
 8008126:	b21d      	sxth	r5, r3
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	b29a      	uxth	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	b29b      	uxth	r3, r3
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	b29b      	uxth	r3, r3
 8008134:	b21e      	sxth	r6, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	b29b      	uxth	r3, r3
 800813e:	4413      	add	r3, r2
 8008140:	b29b      	uxth	r3, r3
 8008142:	fa0f fc83 	sxth.w	ip, r3
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	b29b      	uxth	r3, r3
 800814e:	4413      	add	r3, r2
 8008150:	b29b      	uxth	r3, r3
 8008152:	b21b      	sxth	r3, r3
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	b291      	uxth	r1, r2
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	b292      	uxth	r2, r2
 800815c:	440a      	add	r2, r1
 800815e:	b292      	uxth	r2, r2
 8008160:	b212      	sxth	r2, r2
 8008162:	68f9      	ldr	r1, [r7, #12]
 8008164:	00c9      	lsls	r1, r1, #3
 8008166:	b209      	sxth	r1, r1
 8008168:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 800816c:	b208      	sxth	r0, r1
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	10c9      	asrs	r1, r1, #3
 8008172:	b209      	sxth	r1, r1
 8008174:	f001 011f 	and.w	r1, r1, #31
 8008178:	b209      	sxth	r1, r1
 800817a:	4301      	orrs	r1, r0
 800817c:	b209      	sxth	r1, r1
 800817e:	b289      	uxth	r1, r1
 8008180:	9102      	str	r1, [sp, #8]
 8008182:	9201      	str	r2, [sp, #4]
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	4663      	mov	r3, ip
 8008188:	4632      	mov	r2, r6
 800818a:	4629      	mov	r1, r5
 800818c:	4620      	mov	r0, r4
 800818e:	f7ff f864 	bl	800725a <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	b21c      	sxth	r4, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	b29a      	uxth	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	b29b      	uxth	r3, r3
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	b21d      	sxth	r5, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	b21e      	sxth	r6, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	4413      	add	r3, r2
 80081bc:	b29b      	uxth	r3, r3
 80081be:	fa0f fc83 	sxth.w	ip, r3
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	4413      	add	r3, r2
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	b21a      	sxth	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	b299      	uxth	r1, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	440b      	add	r3, r1
 80081da:	b29b      	uxth	r3, r3
 80081dc:	b219      	sxth	r1, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	021b      	lsls	r3, r3, #8
 80081e2:	b21b      	sxth	r3, r3
 80081e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80081e8:	f023 0307 	bic.w	r3, r3, #7
 80081ec:	b218      	sxth	r0, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	b21b      	sxth	r3, r3
 80081f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80081f8:	b21b      	sxth	r3, r3
 80081fa:	4303      	orrs	r3, r0
 80081fc:	b21b      	sxth	r3, r3
 80081fe:	b29b      	uxth	r3, r3
 8008200:	9302      	str	r3, [sp, #8]
 8008202:	9101      	str	r1, [sp, #4]
 8008204:	9200      	str	r2, [sp, #0]
 8008206:	4663      	mov	r3, ip
 8008208:	4632      	mov	r2, r6
 800820a:	4629      	mov	r1, r5
 800820c:	4620      	mov	r0, r4
 800820e:	f7fe ffea 	bl	80071e6 <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3b05      	subs	r3, #5
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b0a      	cmp	r3, #10
 800821c:	f73f af7b 	bgt.w	8008116 <testFilledTriangles+0x3e>
    }
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800822a:	bf00      	nop
 800822c:	2000866a 	.word	0x2000866a
 8008230:	2000866c 	.word	0x2000866c

08008234 <testRoundRects>:





void testRoundRects() {
 8008234:	b5b0      	push	{r4, r5, r7, lr}
 8008236:	b08a      	sub	sp, #40	; 0x28
 8008238:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 800823a:	4b33      	ldr	r3, [pc, #204]	; (8008308 <testRoundRects+0xd4>)
 800823c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008240:	0fda      	lsrs	r2, r3, #31
 8008242:	4413      	add	r3, r2
 8008244:	105b      	asrs	r3, r3, #1
 8008246:	b21b      	sxth	r3, r3
 8008248:	3b01      	subs	r3, #1
 800824a:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 800824c:	4b2f      	ldr	r3, [pc, #188]	; (800830c <testRoundRects+0xd8>)
 800824e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008252:	0fda      	lsrs	r2, r3, #31
 8008254:	4413      	add	r3, r2
 8008256:	105b      	asrs	r3, r3, #1
 8008258:	b21b      	sxth	r3, r3
 800825a:	3b01      	subs	r3, #1
 800825c:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 800825e:	2000      	movs	r0, #0
 8008260:	f7fe fc64 	bl	8006b2c <Displ_CLS>
    w     = min(_width, _height);
 8008264:	4b29      	ldr	r3, [pc, #164]	; (800830c <testRoundRects+0xd8>)
 8008266:	f9b3 2000 	ldrsh.w	r2, [r3]
 800826a:	4b27      	ldr	r3, [pc, #156]	; (8008308 <testRoundRects+0xd4>)
 800826c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008270:	4293      	cmp	r3, r2
 8008272:	bfa8      	it	ge
 8008274:	4613      	movge	r3, r2
 8008276:	b21b      	sxth	r3, r3
 8008278:	60fb      	str	r3, [r7, #12]
    red = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 800827e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	fb92 f3f3 	sdiv	r3, r2, r3
 8008288:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 800828a:	2300      	movs	r3, #0
 800828c:	61fb      	str	r3, [r7, #28]
 800828e:	e031      	b.n	80082f4 <testRoundRects+0xc0>
        i2 = i / 2;
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	0fda      	lsrs	r2, r3, #31
 8008294:	4413      	add	r3, r2
 8008296:	105b      	asrs	r3, r3, #1
 8008298:	607b      	str	r3, [r7, #4]
        red += step;
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4413      	add	r3, r2
 80082a0:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	b218      	sxth	r0, r3
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	b219      	sxth	r1, r3
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	b21c      	sxth	r4, r3
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	b21d      	sxth	r5, r3
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	da00      	bge.n	80082ce <testRoundRects+0x9a>
 80082cc:	3307      	adds	r3, #7
 80082ce:	10db      	asrs	r3, r3, #3
 80082d0:	b21a      	sxth	r2, r3
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	021b      	lsls	r3, r3, #8
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80082dc:	f023 0307 	bic.w	r3, r3, #7
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	9200      	str	r2, [sp, #0]
 80082e6:	462b      	mov	r3, r5
 80082e8:	4622      	mov	r2, r4
 80082ea:	f7ff fa27 	bl	800773c <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	3306      	adds	r3, #6
 80082f2:	61fb      	str	r3, [r7, #28]
 80082f4:	69fa      	ldr	r2, [r7, #28]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	dbc9      	blt.n	8008290 <testRoundRects+0x5c>
    }
}
 80082fc:	bf00      	nop
 80082fe:	bf00      	nop
 8008300:	3720      	adds	r7, #32
 8008302:	46bd      	mov	sp, r7
 8008304:	bdb0      	pop	{r4, r5, r7, pc}
 8008306:	bf00      	nop
 8008308:	2000866a 	.word	0x2000866a
 800830c:	2000866c 	.word	0x2000866c

08008310 <testFilledRoundRects>:





void testFilledRoundRects() {
 8008310:	b5b0      	push	{r4, r5, r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8008316:	4b36      	ldr	r3, [pc, #216]	; (80083f0 <testFilledRoundRects+0xe0>)
 8008318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800831c:	0fda      	lsrs	r2, r3, #31
 800831e:	4413      	add	r3, r2
 8008320:	105b      	asrs	r3, r3, #1
 8008322:	b21b      	sxth	r3, r3
 8008324:	3b01      	subs	r3, #1
 8008326:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8008328:	4b32      	ldr	r3, [pc, #200]	; (80083f4 <testFilledRoundRects+0xe4>)
 800832a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800832e:	0fda      	lsrs	r2, r3, #31
 8008330:	4413      	add	r3, r2
 8008332:	105b      	asrs	r3, r3, #1
 8008334:	b21b      	sxth	r3, r3
 8008336:	3b01      	subs	r3, #1
 8008338:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 800833a:	2000      	movs	r0, #0
 800833c:	f7fe fbf6 	bl	8006b2c <Displ_CLS>
    green = 256;
 8008340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008344:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8008346:	4b2b      	ldr	r3, [pc, #172]	; (80083f4 <testFilledRoundRects+0xe4>)
 8008348:	f9b3 2000 	ldrsh.w	r2, [r3]
 800834c:	4b28      	ldr	r3, [pc, #160]	; (80083f0 <testFilledRoundRects+0xe0>)
 800834e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008352:	4293      	cmp	r3, r2
 8008354:	bfa8      	it	ge
 8008356:	4613      	movge	r3, r2
 8008358:	b21b      	sxth	r3, r3
 800835a:	461a      	mov	r2, r3
 800835c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008360:	fb93 f3f2 	sdiv	r3, r3, r2
 8008364:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8008366:	4b23      	ldr	r3, [pc, #140]	; (80083f4 <testFilledRoundRects+0xe4>)
 8008368:	f9b3 2000 	ldrsh.w	r2, [r3]
 800836c:	4b20      	ldr	r3, [pc, #128]	; (80083f0 <testFilledRoundRects+0xe0>)
 800836e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008372:	4293      	cmp	r3, r2
 8008374:	bfa8      	it	ge
 8008376:	4613      	movge	r3, r2
 8008378:	b21b      	sxth	r3, r3
 800837a:	617b      	str	r3, [r7, #20]
 800837c:	e02f      	b.n	80083de <testFilledRoundRects+0xce>
        i2 = i / 2;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	0fda      	lsrs	r2, r3, #31
 8008382:	4413      	add	r3, r2
 8008384:	105b      	asrs	r3, r3, #1
 8008386:	603b      	str	r3, [r7, #0]
        green -= step;
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	b29a      	uxth	r2, r3
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	b29b      	uxth	r3, r3
 800839c:	b218      	sxth	r0, r3
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	b219      	sxth	r1, r3
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	b21c      	sxth	r4, r3
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	b21d      	sxth	r5, r3
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	da00      	bge.n	80083bc <testFilledRoundRects+0xac>
 80083ba:	3307      	adds	r3, #7
 80083bc:	10db      	asrs	r3, r3, #3
 80083be:	b21b      	sxth	r3, r3
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	00d2      	lsls	r2, r2, #3
 80083c4:	b292      	uxth	r2, r2
 80083c6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80083ca:	b292      	uxth	r2, r2
 80083cc:	9201      	str	r2, [sp, #4]
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	462b      	mov	r3, r5
 80083d2:	4622      	mov	r2, r4
 80083d4:	f7ff faa7 	bl	8007926 <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	3b06      	subs	r3, #6
 80083dc:	617b      	str	r3, [r7, #20]
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2b14      	cmp	r3, #20
 80083e2:	dccc      	bgt.n	800837e <testFilledRoundRects+0x6e>
    }
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bdb0      	pop	{r4, r5, r7, pc}
 80083ee:	bf00      	nop
 80083f0:	2000866a 	.word	0x2000866a
 80083f4:	2000866c 	.word	0x2000866c

080083f8 <testFillScreen>:




void testFillScreen()
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 80083fc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8008400:	f7fe fb94 	bl	8006b2c <Displ_CLS>
	Displ_CLS(GREEN);
 8008404:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8008408:	f7fe fb90 	bl	8006b2c <Displ_CLS>
	Displ_CLS(BLUE);
 800840c:	201f      	movs	r0, #31
 800840e:	f7fe fb8d 	bl	8006b2c <Displ_CLS>
	Displ_CLS(YELLOW);
 8008412:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8008416:	f7fe fb89 	bl	8006b2c <Displ_CLS>
	Displ_CLS(BLACK);
 800841a:	2000      	movs	r0, #0
 800841c:	f7fe fb86 	bl	8006b2c <Displ_CLS>
}
 8008420:	bf00      	nop
 8008422:	bd80      	pop	{r7, pc}

08008424 <Displ_TestAll>:





void Displ_TestAll (){
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
	testFillScreen();
 8008428:	f7ff ffe6 	bl	80083f8 <testFillScreen>
	testLines(CYAN);
 800842c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8008430:	f7ff fb5c 	bl	8007aec <testLines>
	testFastLines(RED, BLUE);
 8008434:	211f      	movs	r1, #31
 8008436:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800843a:	f7ff fc59 	bl	8007cf0 <testFastLines>
	testRects(GREEN);
 800843e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8008442:	f7ff fca3 	bl	8007d8c <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8008446:	f64f 011f 	movw	r1, #63519	; 0xf81f
 800844a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800844e:	f7ff fcf1 	bl	8007e34 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8008452:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8008456:	200a      	movs	r0, #10
 8008458:	f7ff fd5a 	bl	8007f10 <testFilledCircles>
	testCircles(10, WHITE);
 800845c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008460:	200a      	movs	r0, #10
 8008462:	f7ff fd93 	bl	8007f8c <testCircles>
	testTriangles();
 8008466:	f7ff fdd3 	bl	8008010 <testTriangles>
	testFilledTriangles();
 800846a:	f7ff fe35 	bl	80080d8 <testFilledTriangles>
	testRoundRects();
 800846e:	f7ff fee1 	bl	8008234 <testRoundRects>
	testFilledRoundRects();
 8008472:	f7ff ff4d 	bl	8008310 <testFilledRoundRects>
}
 8008476:	bf00      	nop
 8008478:	bd80      	pop	{r7, pc}
	...

0800847c <Reset_Handler>:
 800847c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80084b4 <LoopFillZerobss+0x12>
 8008480:	480d      	ldr	r0, [pc, #52]	; (80084b8 <LoopFillZerobss+0x16>)
 8008482:	490e      	ldr	r1, [pc, #56]	; (80084bc <LoopFillZerobss+0x1a>)
 8008484:	4a0e      	ldr	r2, [pc, #56]	; (80084c0 <LoopFillZerobss+0x1e>)
 8008486:	2300      	movs	r3, #0
 8008488:	e002      	b.n	8008490 <LoopCopyDataInit>

0800848a <CopyDataInit>:
 800848a:	58d4      	ldr	r4, [r2, r3]
 800848c:	50c4      	str	r4, [r0, r3]
 800848e:	3304      	adds	r3, #4

08008490 <LoopCopyDataInit>:
 8008490:	18c4      	adds	r4, r0, r3
 8008492:	428c      	cmp	r4, r1
 8008494:	d3f9      	bcc.n	800848a <CopyDataInit>
 8008496:	4a0b      	ldr	r2, [pc, #44]	; (80084c4 <LoopFillZerobss+0x22>)
 8008498:	4c0b      	ldr	r4, [pc, #44]	; (80084c8 <LoopFillZerobss+0x26>)
 800849a:	2300      	movs	r3, #0
 800849c:	e001      	b.n	80084a2 <LoopFillZerobss>

0800849e <FillZerobss>:
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	3204      	adds	r2, #4

080084a2 <LoopFillZerobss>:
 80084a2:	42a2      	cmp	r2, r4
 80084a4:	d3fb      	bcc.n	800849e <FillZerobss>
 80084a6:	f7fd fd55 	bl	8005f54 <SystemInit>
 80084aa:	f006 fc95 	bl	800edd8 <__libc_init_array>
 80084ae:	f7fc f9b9 	bl	8004824 <main>
 80084b2:	4770      	bx	lr
 80084b4:	20020000 	.word	0x20020000
 80084b8:	20000000 	.word	0x20000000
 80084bc:	20000220 	.word	0x20000220
 80084c0:	080169a8 	.word	0x080169a8
 80084c4:	20000220 	.word	0x20000220
 80084c8:	200097c8 	.word	0x200097c8

080084cc <ADC_IRQHandler>:
 80084cc:	e7fe      	b.n	80084cc <ADC_IRQHandler>
	...

080084d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80084d4:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <HAL_Init+0x40>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a0d      	ldr	r2, [pc, #52]	; (8008510 <HAL_Init+0x40>)
 80084da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80084e0:	4b0b      	ldr	r3, [pc, #44]	; (8008510 <HAL_Init+0x40>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a0a      	ldr	r2, [pc, #40]	; (8008510 <HAL_Init+0x40>)
 80084e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084ec:	4b08      	ldr	r3, [pc, #32]	; (8008510 <HAL_Init+0x40>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a07      	ldr	r2, [pc, #28]	; (8008510 <HAL_Init+0x40>)
 80084f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084f8:	2003      	movs	r0, #3
 80084fa:	f000 fd53 	bl	8008fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80084fe:	2000      	movs	r0, #0
 8008500:	f000 f808 	bl	8008514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008504:	f7fd f900 	bl	8005708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	40023c00 	.word	0x40023c00

08008514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800851c:	4b12      	ldr	r3, [pc, #72]	; (8008568 <HAL_InitTick+0x54>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	4b12      	ldr	r3, [pc, #72]	; (800856c <HAL_InitTick+0x58>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	4619      	mov	r1, r3
 8008526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800852a:	fbb3 f3f1 	udiv	r3, r3, r1
 800852e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008532:	4618      	mov	r0, r3
 8008534:	f000 fd6b 	bl	800900e <HAL_SYSTICK_Config>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e00e      	b.n	8008560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b0f      	cmp	r3, #15
 8008546:	d80a      	bhi.n	800855e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008548:	2200      	movs	r2, #0
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008550:	f000 fd33 	bl	8008fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008554:	4a06      	ldr	r2, [pc, #24]	; (8008570 <HAL_InitTick+0x5c>)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	e000      	b.n	8008560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20000030 	.word	0x20000030
 800856c:	20000040 	.word	0x20000040
 8008570:	2000003c 	.word	0x2000003c

08008574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008578:	4b06      	ldr	r3, [pc, #24]	; (8008594 <HAL_IncTick+0x20>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	4b06      	ldr	r3, [pc, #24]	; (8008598 <HAL_IncTick+0x24>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4413      	add	r3, r2
 8008584:	4a04      	ldr	r2, [pc, #16]	; (8008598 <HAL_IncTick+0x24>)
 8008586:	6013      	str	r3, [r2, #0]
}
 8008588:	bf00      	nop
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	20000040 	.word	0x20000040
 8008598:	20009678 	.word	0x20009678

0800859c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
  return uwTick;
 80085a0:	4b03      	ldr	r3, [pc, #12]	; (80085b0 <HAL_GetTick+0x14>)
 80085a2:	681b      	ldr	r3, [r3, #0]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	20009678 	.word	0x20009678

080085b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80085bc:	f7ff ffee 	bl	800859c <HAL_GetTick>
 80085c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085cc:	d005      	beq.n	80085da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80085ce:	4b0a      	ldr	r3, [pc, #40]	; (80085f8 <HAL_Delay+0x44>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4413      	add	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80085da:	bf00      	nop
 80085dc:	f7ff ffde 	bl	800859c <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d8f7      	bhi.n	80085dc <HAL_Delay+0x28>
  {
  }
}
 80085ec:	bf00      	nop
 80085ee:	bf00      	nop
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000040 	.word	0x20000040

080085fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e033      	b.n	800867a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d109      	bne.n	800862e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7fd f89c 	bl	8005758 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	f003 0310 	and.w	r3, r3, #16
 8008636:	2b00      	cmp	r3, #0
 8008638:	d118      	bne.n	800866c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008642:	f023 0302 	bic.w	r3, r3, #2
 8008646:	f043 0202 	orr.w	r2, r3, #2
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa5a 	bl	8008b08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865e:	f023 0303 	bic.w	r3, r3, #3
 8008662:	f043 0201 	orr.w	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	641a      	str	r2, [r3, #64]	; 0x40
 800866a:	e001      	b.n	8008670 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008678:	7bfb      	ldrb	r3, [r7, #15]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800869a:	2b01      	cmp	r3, #1
 800869c:	d101      	bne.n	80086a2 <HAL_ADC_Start_DMA+0x1e>
 800869e:	2302      	movs	r3, #2
 80086a0:	e0e9      	b.n	8008876 <HAL_ADC_Start_DMA+0x1f2>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d018      	beq.n	80086ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f042 0201 	orr.w	r2, r2, #1
 80086c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80086c8:	4b6d      	ldr	r3, [pc, #436]	; (8008880 <HAL_ADC_Start_DMA+0x1fc>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a6d      	ldr	r2, [pc, #436]	; (8008884 <HAL_ADC_Start_DMA+0x200>)
 80086ce:	fba2 2303 	umull	r2, r3, r2, r3
 80086d2:	0c9a      	lsrs	r2, r3, #18
 80086d4:	4613      	mov	r3, r2
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	4413      	add	r3, r2
 80086da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80086dc:	e002      	b.n	80086e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1f9      	bne.n	80086de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086f8:	d107      	bne.n	800870a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008708:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b01      	cmp	r3, #1
 8008716:	f040 80a1 	bne.w	800885c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008722:	f023 0301 	bic.w	r3, r3, #1
 8008726:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008738:	2b00      	cmp	r3, #0
 800873a:	d007      	beq.n	800874c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008740:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008744:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008758:	d106      	bne.n	8008768 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800875e:	f023 0206 	bic.w	r2, r3, #6
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	645a      	str	r2, [r3, #68]	; 0x44
 8008766:	e002      	b.n	800876e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008776:	4b44      	ldr	r3, [pc, #272]	; (8008888 <HAL_ADC_Start_DMA+0x204>)
 8008778:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877e:	4a43      	ldr	r2, [pc, #268]	; (800888c <HAL_ADC_Start_DMA+0x208>)
 8008780:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	4a42      	ldr	r2, [pc, #264]	; (8008890 <HAL_ADC_Start_DMA+0x20c>)
 8008788:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878e:	4a41      	ldr	r2, [pc, #260]	; (8008894 <HAL_ADC_Start_DMA+0x210>)
 8008790:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800879a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80087aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	334c      	adds	r3, #76	; 0x4c
 80087c6:	4619      	mov	r1, r3
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f000 fcda 	bl	8009184 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d12a      	bne.n	8008832 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a2d      	ldr	r2, [pc, #180]	; (8008898 <HAL_ADC_Start_DMA+0x214>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d015      	beq.n	8008812 <HAL_ADC_Start_DMA+0x18e>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a2c      	ldr	r2, [pc, #176]	; (800889c <HAL_ADC_Start_DMA+0x218>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d105      	bne.n	80087fc <HAL_ADC_Start_DMA+0x178>
 80087f0:	4b25      	ldr	r3, [pc, #148]	; (8008888 <HAL_ADC_Start_DMA+0x204>)
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f003 031f 	and.w	r3, r3, #31
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00a      	beq.n	8008812 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a27      	ldr	r2, [pc, #156]	; (80088a0 <HAL_ADC_Start_DMA+0x21c>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d136      	bne.n	8008874 <HAL_ADC_Start_DMA+0x1f0>
 8008806:	4b20      	ldr	r3, [pc, #128]	; (8008888 <HAL_ADC_Start_DMA+0x204>)
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f003 0310 	and.w	r3, r3, #16
 800880e:	2b00      	cmp	r3, #0
 8008810:	d130      	bne.n	8008874 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d129      	bne.n	8008874 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800882e:	609a      	str	r2, [r3, #8]
 8008830:	e020      	b.n	8008874 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a18      	ldr	r2, [pc, #96]	; (8008898 <HAL_ADC_Start_DMA+0x214>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d11b      	bne.n	8008874 <HAL_ADC_Start_DMA+0x1f0>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d114      	bne.n	8008874 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689a      	ldr	r2, [r3, #8]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008858:	609a      	str	r2, [r3, #8]
 800885a:	e00b      	b.n	8008874 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008860:	f043 0210 	orr.w	r2, r3, #16
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886c:	f043 0201 	orr.w	r2, r3, #1
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	20000030 	.word	0x20000030
 8008884:	431bde83 	.word	0x431bde83
 8008888:	40012300 	.word	0x40012300
 800888c:	08008d01 	.word	0x08008d01
 8008890:	08008dbb 	.word	0x08008dbb
 8008894:	08008dd7 	.word	0x08008dd7
 8008898:	40012000 	.word	0x40012000
 800889c:	40012100 	.word	0x40012100
 80088a0:	40012200 	.word	0x40012200

080088a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d101      	bne.n	80088c0 <HAL_ADC_ConfigChannel+0x1c>
 80088bc:	2302      	movs	r3, #2
 80088be:	e113      	b.n	8008ae8 <HAL_ADC_ConfigChannel+0x244>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b09      	cmp	r3, #9
 80088ce:	d925      	bls.n	800891c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68d9      	ldr	r1, [r3, #12]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	461a      	mov	r2, r3
 80088de:	4613      	mov	r3, r2
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	4413      	add	r3, r2
 80088e4:	3b1e      	subs	r3, #30
 80088e6:	2207      	movs	r2, #7
 80088e8:	fa02 f303 	lsl.w	r3, r2, r3
 80088ec:	43da      	mvns	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	400a      	ands	r2, r1
 80088f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68d9      	ldr	r1, [r3, #12]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	b29b      	uxth	r3, r3
 8008906:	4618      	mov	r0, r3
 8008908:	4603      	mov	r3, r0
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	4403      	add	r3, r0
 800890e:	3b1e      	subs	r3, #30
 8008910:	409a      	lsls	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	60da      	str	r2, [r3, #12]
 800891a:	e022      	b.n	8008962 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6919      	ldr	r1, [r3, #16]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	b29b      	uxth	r3, r3
 8008928:	461a      	mov	r2, r3
 800892a:	4613      	mov	r3, r2
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	4413      	add	r3, r2
 8008930:	2207      	movs	r2, #7
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	43da      	mvns	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	400a      	ands	r2, r1
 800893e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6919      	ldr	r1, [r3, #16]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	689a      	ldr	r2, [r3, #8]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	b29b      	uxth	r3, r3
 8008950:	4618      	mov	r0, r3
 8008952:	4603      	mov	r3, r0
 8008954:	005b      	lsls	r3, r3, #1
 8008956:	4403      	add	r3, r0
 8008958:	409a      	lsls	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	430a      	orrs	r2, r1
 8008960:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b06      	cmp	r3, #6
 8008968:	d824      	bhi.n	80089b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	3b05      	subs	r3, #5
 800897c:	221f      	movs	r2, #31
 800897e:	fa02 f303 	lsl.w	r3, r2, r3
 8008982:	43da      	mvns	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	400a      	ands	r2, r1
 800898a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	b29b      	uxth	r3, r3
 8008998:	4618      	mov	r0, r3
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	3b05      	subs	r3, #5
 80089a6:	fa00 f203 	lsl.w	r2, r0, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	635a      	str	r2, [r3, #52]	; 0x34
 80089b2:	e04c      	b.n	8008a4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	2b0c      	cmp	r3, #12
 80089ba:	d824      	bhi.n	8008a06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	4613      	mov	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	3b23      	subs	r3, #35	; 0x23
 80089ce:	221f      	movs	r2, #31
 80089d0:	fa02 f303 	lsl.w	r3, r2, r3
 80089d4:	43da      	mvns	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	400a      	ands	r2, r1
 80089dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	4618      	mov	r0, r3
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	3b23      	subs	r3, #35	; 0x23
 80089f8:	fa00 f203 	lsl.w	r2, r0, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	631a      	str	r2, [r3, #48]	; 0x30
 8008a04:	e023      	b.n	8008a4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	4613      	mov	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	3b41      	subs	r3, #65	; 0x41
 8008a18:	221f      	movs	r2, #31
 8008a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1e:	43da      	mvns	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	400a      	ands	r2, r1
 8008a26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	4618      	mov	r0, r3
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	3b41      	subs	r3, #65	; 0x41
 8008a42:	fa00 f203 	lsl.w	r2, r0, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008a4e:	4b29      	ldr	r3, [pc, #164]	; (8008af4 <HAL_ADC_ConfigChannel+0x250>)
 8008a50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a28      	ldr	r2, [pc, #160]	; (8008af8 <HAL_ADC_ConfigChannel+0x254>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d10f      	bne.n	8008a7c <HAL_ADC_ConfigChannel+0x1d8>
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b12      	cmp	r3, #18
 8008a62:	d10b      	bne.n	8008a7c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a1d      	ldr	r2, [pc, #116]	; (8008af8 <HAL_ADC_ConfigChannel+0x254>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d12b      	bne.n	8008ade <HAL_ADC_ConfigChannel+0x23a>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a1c      	ldr	r2, [pc, #112]	; (8008afc <HAL_ADC_ConfigChannel+0x258>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d003      	beq.n	8008a98 <HAL_ADC_ConfigChannel+0x1f4>
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b11      	cmp	r3, #17
 8008a96:	d122      	bne.n	8008ade <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a11      	ldr	r2, [pc, #68]	; (8008afc <HAL_ADC_ConfigChannel+0x258>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d111      	bne.n	8008ade <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008aba:	4b11      	ldr	r3, [pc, #68]	; (8008b00 <HAL_ADC_ConfigChannel+0x25c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a11      	ldr	r2, [pc, #68]	; (8008b04 <HAL_ADC_ConfigChannel+0x260>)
 8008ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac4:	0c9a      	lsrs	r2, r3, #18
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008ad0:	e002      	b.n	8008ad8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1f9      	bne.n	8008ad2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	40012300 	.word	0x40012300
 8008af8:	40012000 	.word	0x40012000
 8008afc:	10000012 	.word	0x10000012
 8008b00:	20000030 	.word	0x20000030
 8008b04:	431bde83 	.word	0x431bde83

08008b08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008b10:	4b79      	ldr	r3, [pc, #484]	; (8008cf8 <ADC_Init+0x1f0>)
 8008b12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6859      	ldr	r1, [r3, #4]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	021a      	lsls	r2, r3, #8
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008b60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6859      	ldr	r1, [r3, #4]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689a      	ldr	r2, [r3, #8]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6899      	ldr	r1, [r3, #8]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9a:	4a58      	ldr	r2, [pc, #352]	; (8008cfc <ADC_Init+0x1f4>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d022      	beq.n	8008be6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008bae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6899      	ldr	r1, [r3, #8]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	689a      	ldr	r2, [r3, #8]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008bd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6899      	ldr	r1, [r3, #8]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	609a      	str	r2, [r3, #8]
 8008be4:	e00f      	b.n	8008c06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689a      	ldr	r2, [r3, #8]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008bf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008c04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689a      	ldr	r2, [r3, #8]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 0202 	bic.w	r2, r2, #2
 8008c14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6899      	ldr	r1, [r3, #8]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	7e1b      	ldrb	r3, [r3, #24]
 8008c20:	005a      	lsls	r2, r3, #1
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	430a      	orrs	r2, r1
 8008c28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d01b      	beq.n	8008c6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008c52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6859      	ldr	r1, [r3, #4]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	035a      	lsls	r2, r3, #13
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	605a      	str	r2, [r3, #4]
 8008c6a:	e007      	b.n	8008c7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	051a      	lsls	r2, r3, #20
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6899      	ldr	r1, [r3, #8]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008cbe:	025a      	lsls	r2, r3, #9
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6899      	ldr	r1, [r3, #8]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	029a      	lsls	r2, r3, #10
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	609a      	str	r2, [r3, #8]
}
 8008cec:	bf00      	nop
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	40012300 	.word	0x40012300
 8008cfc:	0f000001 	.word	0x0f000001

08008d00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d13c      	bne.n	8008d94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d12b      	bne.n	8008d8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d127      	bne.n	8008d8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d006      	beq.n	8008d58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d119      	bne.n	8008d8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 0220 	bic.w	r2, r2, #32
 8008d66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d105      	bne.n	8008d8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d84:	f043 0201 	orr.w	r2, r3, #1
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7fc fbc9 	bl	8005524 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008d92:	e00e      	b.n	8008db2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d98:	f003 0310 	and.w	r3, r3, #16
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f7fc fbff 	bl	80055a4 <HAL_ADC_ErrorCallback>
}
 8008da6:	e004      	b.n	8008db2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	4798      	blx	r3
}
 8008db2:	bf00      	nop
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7fc fbcb 	bl	8005564 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008dce:	bf00      	nop
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2240      	movs	r2, #64	; 0x40
 8008de8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dee:	f043 0204 	orr.w	r2, r3, #4
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f7fc fbd4 	bl	80055a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008dfc:	bf00      	nop
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f003 0307 	and.w	r3, r3, #7
 8008e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008e14:	4b0c      	ldr	r3, [pc, #48]	; (8008e48 <__NVIC_SetPriorityGrouping+0x44>)
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008e20:	4013      	ands	r3, r2
 8008e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008e36:	4a04      	ldr	r2, [pc, #16]	; (8008e48 <__NVIC_SetPriorityGrouping+0x44>)
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	60d3      	str	r3, [r2, #12]
}
 8008e3c:	bf00      	nop
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	e000ed00 	.word	0xe000ed00

08008e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008e50:	4b04      	ldr	r3, [pc, #16]	; (8008e64 <__NVIC_GetPriorityGrouping+0x18>)
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	0a1b      	lsrs	r3, r3, #8
 8008e56:	f003 0307 	and.w	r3, r3, #7
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	e000ed00 	.word	0xe000ed00

08008e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	db0b      	blt.n	8008e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008e7a:	79fb      	ldrb	r3, [r7, #7]
 8008e7c:	f003 021f 	and.w	r2, r3, #31
 8008e80:	4907      	ldr	r1, [pc, #28]	; (8008ea0 <__NVIC_EnableIRQ+0x38>)
 8008e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e86:	095b      	lsrs	r3, r3, #5
 8008e88:	2001      	movs	r0, #1
 8008e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8008e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008e92:	bf00      	nop
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	e000e100 	.word	0xe000e100

08008ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	db0a      	blt.n	8008ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	490c      	ldr	r1, [pc, #48]	; (8008ef0 <__NVIC_SetPriority+0x4c>)
 8008ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ec2:	0112      	lsls	r2, r2, #4
 8008ec4:	b2d2      	uxtb	r2, r2
 8008ec6:	440b      	add	r3, r1
 8008ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ecc:	e00a      	b.n	8008ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	4908      	ldr	r1, [pc, #32]	; (8008ef4 <__NVIC_SetPriority+0x50>)
 8008ed4:	79fb      	ldrb	r3, [r7, #7]
 8008ed6:	f003 030f 	and.w	r3, r3, #15
 8008eda:	3b04      	subs	r3, #4
 8008edc:	0112      	lsls	r2, r2, #4
 8008ede:	b2d2      	uxtb	r2, r2
 8008ee0:	440b      	add	r3, r1
 8008ee2:	761a      	strb	r2, [r3, #24]
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	e000e100 	.word	0xe000e100
 8008ef4:	e000ed00 	.word	0xe000ed00

08008ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b089      	sub	sp, #36	; 0x24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	f1c3 0307 	rsb	r3, r3, #7
 8008f12:	2b04      	cmp	r3, #4
 8008f14:	bf28      	it	cs
 8008f16:	2304      	movcs	r3, #4
 8008f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	2b06      	cmp	r3, #6
 8008f20:	d902      	bls.n	8008f28 <NVIC_EncodePriority+0x30>
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	3b03      	subs	r3, #3
 8008f26:	e000      	b.n	8008f2a <NVIC_EncodePriority+0x32>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	fa02 f303 	lsl.w	r3, r2, r3
 8008f36:	43da      	mvns	r2, r3
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	401a      	ands	r2, r3
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008f40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	fa01 f303 	lsl.w	r3, r1, r3
 8008f4a:	43d9      	mvns	r1, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f50:	4313      	orrs	r3, r2
         );
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3724      	adds	r7, #36	; 0x24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
	...

08008f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f70:	d301      	bcc.n	8008f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008f72:	2301      	movs	r3, #1
 8008f74:	e00f      	b.n	8008f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008f76:	4a0a      	ldr	r2, [pc, #40]	; (8008fa0 <SysTick_Config+0x40>)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008f7e:	210f      	movs	r1, #15
 8008f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f84:	f7ff ff8e 	bl	8008ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008f88:	4b05      	ldr	r3, [pc, #20]	; (8008fa0 <SysTick_Config+0x40>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008f8e:	4b04      	ldr	r3, [pc, #16]	; (8008fa0 <SysTick_Config+0x40>)
 8008f90:	2207      	movs	r2, #7
 8008f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	e000e010 	.word	0xe000e010

08008fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7ff ff29 	bl	8008e04 <__NVIC_SetPriorityGrouping>
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b086      	sub	sp, #24
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	607a      	str	r2, [r7, #4]
 8008fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008fcc:	f7ff ff3e 	bl	8008e4c <__NVIC_GetPriorityGrouping>
 8008fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	6978      	ldr	r0, [r7, #20]
 8008fd8:	f7ff ff8e 	bl	8008ef8 <NVIC_EncodePriority>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fe2:	4611      	mov	r1, r2
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff ff5d 	bl	8008ea4 <__NVIC_SetPriority>
}
 8008fea:	bf00      	nop
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff ff31 	bl	8008e68 <__NVIC_EnableIRQ>
}
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7ff ffa2 	bl	8008f60 <SysTick_Config>
 800901c:	4603      	mov	r3, r0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009034:	f7ff fab2 	bl	800859c <HAL_GetTick>
 8009038:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e099      	b.n	8009178 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2202      	movs	r2, #2
 8009048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f022 0201 	bic.w	r2, r2, #1
 8009062:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009064:	e00f      	b.n	8009086 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009066:	f7ff fa99 	bl	800859c <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b05      	cmp	r3, #5
 8009072:	d908      	bls.n	8009086 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2220      	movs	r2, #32
 8009078:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2203      	movs	r2, #3
 800907e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e078      	b.n	8009178 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e8      	bne.n	8009066 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4b38      	ldr	r3, [pc, #224]	; (8009180 <HAL_DMA_Init+0x158>)
 80090a0:	4013      	ands	r3, r2
 80090a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685a      	ldr	r2, [r3, #4]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80090b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80090d2:	697a      	ldr	r2, [r7, #20]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d107      	bne.n	80090f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e8:	4313      	orrs	r3, r2
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	695b      	ldr	r3, [r3, #20]
 80090fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f023 0307 	bic.w	r3, r3, #7
 8009106:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	4313      	orrs	r3, r2
 8009110:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	2b04      	cmp	r3, #4
 8009118:	d117      	bne.n	800914a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	4313      	orrs	r3, r2
 8009122:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00e      	beq.n	800914a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fb01 	bl	8009734 <DMA_CheckFifoParam>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d008      	beq.n	800914a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2240      	movs	r2, #64	; 0x40
 800913c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009146:	2301      	movs	r3, #1
 8009148:	e016      	b.n	8009178 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fab8 	bl	80096c8 <DMA_CalcBaseAndBitshift>
 8009158:	4603      	mov	r3, r0
 800915a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009160:	223f      	movs	r2, #63	; 0x3f
 8009162:	409a      	lsls	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	f010803f 	.word	0xf010803f

08009184 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
 8009190:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800919a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d101      	bne.n	80091aa <HAL_DMA_Start_IT+0x26>
 80091a6:	2302      	movs	r3, #2
 80091a8:	e040      	b.n	800922c <HAL_DMA_Start_IT+0xa8>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d12f      	bne.n	800921e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2202      	movs	r2, #2
 80091c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	68b9      	ldr	r1, [r7, #8]
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 fa4a 	bl	800966c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091dc:	223f      	movs	r2, #63	; 0x3f
 80091de:	409a      	lsls	r2, r3
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0216 	orr.w	r2, r2, #22
 80091f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d007      	beq.n	800920c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0208 	orr.w	r2, r2, #8
 800920a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f042 0201 	orr.w	r2, r2, #1
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	e005      	b.n	800922a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009226:	2302      	movs	r3, #2
 8009228:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800922a:	7dfb      	ldrb	r3, [r7, #23]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3718      	adds	r7, #24
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009240:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009242:	f7ff f9ab 	bl	800859c <HAL_GetTick>
 8009246:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b02      	cmp	r3, #2
 8009252:	d008      	beq.n	8009266 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2280      	movs	r2, #128	; 0x80
 8009258:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e052      	b.n	800930c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f022 0216 	bic.w	r2, r2, #22
 8009274:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	695a      	ldr	r2, [r3, #20]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009284:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928a:	2b00      	cmp	r3, #0
 800928c:	d103      	bne.n	8009296 <HAL_DMA_Abort+0x62>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009292:	2b00      	cmp	r3, #0
 8009294:	d007      	beq.n	80092a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0208 	bic.w	r2, r2, #8
 80092a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 0201 	bic.w	r2, r2, #1
 80092b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80092b6:	e013      	b.n	80092e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80092b8:	f7ff f970 	bl	800859c <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b05      	cmp	r3, #5
 80092c4:	d90c      	bls.n	80092e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2220      	movs	r2, #32
 80092ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2203      	movs	r2, #3
 80092d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e015      	b.n	800930c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0301 	and.w	r3, r3, #1
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e4      	bne.n	80092b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092f2:	223f      	movs	r2, #63	; 0x3f
 80092f4:	409a      	lsls	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009322:	b2db      	uxtb	r3, r3
 8009324:	2b02      	cmp	r3, #2
 8009326:	d004      	beq.n	8009332 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2280      	movs	r2, #128	; 0x80
 800932c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e00c      	b.n	800934c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2205      	movs	r2, #5
 8009336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f022 0201 	bic.w	r2, r2, #1
 8009348:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009364:	4b8e      	ldr	r3, [pc, #568]	; (80095a0 <HAL_DMA_IRQHandler+0x248>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a8e      	ldr	r2, [pc, #568]	; (80095a4 <HAL_DMA_IRQHandler+0x24c>)
 800936a:	fba2 2303 	umull	r2, r3, r2, r3
 800936e:	0a9b      	lsrs	r3, r3, #10
 8009370:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009376:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009382:	2208      	movs	r2, #8
 8009384:	409a      	lsls	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	4013      	ands	r3, r2
 800938a:	2b00      	cmp	r3, #0
 800938c:	d01a      	beq.n	80093c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	2b00      	cmp	r3, #0
 800939a:	d013      	beq.n	80093c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0204 	bic.w	r2, r2, #4
 80093aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b0:	2208      	movs	r2, #8
 80093b2:	409a      	lsls	r2, r3
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093bc:	f043 0201 	orr.w	r2, r3, #1
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093c8:	2201      	movs	r2, #1
 80093ca:	409a      	lsls	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4013      	ands	r3, r2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d012      	beq.n	80093fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00b      	beq.n	80093fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093e6:	2201      	movs	r2, #1
 80093e8:	409a      	lsls	r2, r3
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f2:	f043 0202 	orr.w	r2, r3, #2
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093fe:	2204      	movs	r2, #4
 8009400:	409a      	lsls	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	4013      	ands	r3, r2
 8009406:	2b00      	cmp	r3, #0
 8009408:	d012      	beq.n	8009430 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00b      	beq.n	8009430 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800941c:	2204      	movs	r2, #4
 800941e:	409a      	lsls	r2, r3
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009428:	f043 0204 	orr.w	r2, r3, #4
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009434:	2210      	movs	r2, #16
 8009436:	409a      	lsls	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4013      	ands	r3, r2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d043      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 0308 	and.w	r3, r3, #8
 800944a:	2b00      	cmp	r3, #0
 800944c:	d03c      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009452:	2210      	movs	r2, #16
 8009454:	409a      	lsls	r2, r3
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d018      	beq.n	800949a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d108      	bne.n	8009488 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947a:	2b00      	cmp	r3, #0
 800947c:	d024      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	4798      	blx	r3
 8009486:	e01f      	b.n	80094c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01b      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	4798      	blx	r3
 8009498:	e016      	b.n	80094c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d107      	bne.n	80094b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f022 0208 	bic.w	r2, r2, #8
 80094b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094cc:	2220      	movs	r2, #32
 80094ce:	409a      	lsls	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4013      	ands	r3, r2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 808f 	beq.w	80095f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0310 	and.w	r3, r3, #16
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 8087 	beq.w	80095f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ee:	2220      	movs	r2, #32
 80094f0:	409a      	lsls	r2, r3
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b05      	cmp	r3, #5
 8009500:	d136      	bne.n	8009570 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 0216 	bic.w	r2, r2, #22
 8009510:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	695a      	ldr	r2, [r3, #20]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009520:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009526:	2b00      	cmp	r3, #0
 8009528:	d103      	bne.n	8009532 <HAL_DMA_IRQHandler+0x1da>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800952e:	2b00      	cmp	r3, #0
 8009530:	d007      	beq.n	8009542 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f022 0208 	bic.w	r2, r2, #8
 8009540:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009546:	223f      	movs	r2, #63	; 0x3f
 8009548:	409a      	lsls	r2, r3
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009562:	2b00      	cmp	r3, #0
 8009564:	d07e      	beq.n	8009664 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	4798      	blx	r3
        }
        return;
 800956e:	e079      	b.n	8009664 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d01d      	beq.n	80095ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10d      	bne.n	80095a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009590:	2b00      	cmp	r3, #0
 8009592:	d031      	beq.n	80095f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	4798      	blx	r3
 800959c:	e02c      	b.n	80095f8 <HAL_DMA_IRQHandler+0x2a0>
 800959e:	bf00      	nop
 80095a0:	20000030 	.word	0x20000030
 80095a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d023      	beq.n	80095f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	4798      	blx	r3
 80095b8:	e01e      	b.n	80095f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10f      	bne.n	80095e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 0210 	bic.w	r2, r2, #16
 80095d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d003      	beq.n	80095f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d032      	beq.n	8009666 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b00      	cmp	r3, #0
 800960a:	d022      	beq.n	8009652 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2205      	movs	r2, #5
 8009610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f022 0201 	bic.w	r2, r2, #1
 8009622:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	3301      	adds	r3, #1
 8009628:	60bb      	str	r3, [r7, #8]
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	429a      	cmp	r2, r3
 800962e:	d307      	bcc.n	8009640 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1f2      	bne.n	8009624 <HAL_DMA_IRQHandler+0x2cc>
 800963e:	e000      	b.n	8009642 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009640:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	4798      	blx	r3
 8009662:	e000      	b.n	8009666 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009664:	bf00      	nop
    }
  }
}
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009688:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	2b40      	cmp	r3, #64	; 0x40
 8009698:	d108      	bne.n	80096ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80096aa:	e007      	b.n	80096bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	60da      	str	r2, [r3, #12]
}
 80096bc:	bf00      	nop
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	3b10      	subs	r3, #16
 80096d8:	4a14      	ldr	r2, [pc, #80]	; (800972c <DMA_CalcBaseAndBitshift+0x64>)
 80096da:	fba2 2303 	umull	r2, r3, r2, r3
 80096de:	091b      	lsrs	r3, r3, #4
 80096e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80096e2:	4a13      	ldr	r2, [pc, #76]	; (8009730 <DMA_CalcBaseAndBitshift+0x68>)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4413      	add	r3, r2
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d909      	bls.n	800970a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80096fe:	f023 0303 	bic.w	r3, r3, #3
 8009702:	1d1a      	adds	r2, r3, #4
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	659a      	str	r2, [r3, #88]	; 0x58
 8009708:	e007      	b.n	800971a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009712:	f023 0303 	bic.w	r3, r3, #3
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	aaaaaaab 	.word	0xaaaaaaab
 8009730:	08016600 	.word	0x08016600

08009734 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009744:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d11f      	bne.n	800978e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2b03      	cmp	r3, #3
 8009752:	d856      	bhi.n	8009802 <DMA_CheckFifoParam+0xce>
 8009754:	a201      	add	r2, pc, #4	; (adr r2, 800975c <DMA_CheckFifoParam+0x28>)
 8009756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975a:	bf00      	nop
 800975c:	0800976d 	.word	0x0800976d
 8009760:	0800977f 	.word	0x0800977f
 8009764:	0800976d 	.word	0x0800976d
 8009768:	08009803 	.word	0x08009803
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009774:	2b00      	cmp	r3, #0
 8009776:	d046      	beq.n	8009806 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800977c:	e043      	b.n	8009806 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009782:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009786:	d140      	bne.n	800980a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800978c:	e03d      	b.n	800980a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009796:	d121      	bne.n	80097dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2b03      	cmp	r3, #3
 800979c:	d837      	bhi.n	800980e <DMA_CheckFifoParam+0xda>
 800979e:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <DMA_CheckFifoParam+0x70>)
 80097a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a4:	080097b5 	.word	0x080097b5
 80097a8:	080097bb 	.word	0x080097bb
 80097ac:	080097b5 	.word	0x080097b5
 80097b0:	080097cd 	.word	0x080097cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
      break;
 80097b8:	e030      	b.n	800981c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d025      	beq.n	8009812 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097ca:	e022      	b.n	8009812 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80097d4:	d11f      	bne.n	8009816 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80097da:	e01c      	b.n	8009816 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d903      	bls.n	80097ea <DMA_CheckFifoParam+0xb6>
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	2b03      	cmp	r3, #3
 80097e6:	d003      	beq.n	80097f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80097e8:	e018      	b.n	800981c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	73fb      	strb	r3, [r7, #15]
      break;
 80097ee:	e015      	b.n	800981c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00e      	beq.n	800981a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009800:	e00b      	b.n	800981a <DMA_CheckFifoParam+0xe6>
      break;
 8009802:	bf00      	nop
 8009804:	e00a      	b.n	800981c <DMA_CheckFifoParam+0xe8>
      break;
 8009806:	bf00      	nop
 8009808:	e008      	b.n	800981c <DMA_CheckFifoParam+0xe8>
      break;
 800980a:	bf00      	nop
 800980c:	e006      	b.n	800981c <DMA_CheckFifoParam+0xe8>
      break;
 800980e:	bf00      	nop
 8009810:	e004      	b.n	800981c <DMA_CheckFifoParam+0xe8>
      break;
 8009812:	bf00      	nop
 8009814:	e002      	b.n	800981c <DMA_CheckFifoParam+0xe8>
      break;   
 8009816:	bf00      	nop
 8009818:	e000      	b.n	800981c <DMA_CheckFifoParam+0xe8>
      break;
 800981a:	bf00      	nop
    }
  } 
  
  return status; 
 800981c:	7bfb      	ldrb	r3, [r7, #15]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop

0800982c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800982c:	b480      	push	{r7}
 800982e:	b089      	sub	sp, #36	; 0x24
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009836:	2300      	movs	r3, #0
 8009838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800983a:	2300      	movs	r3, #0
 800983c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800983e:	2300      	movs	r3, #0
 8009840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009842:	2300      	movs	r3, #0
 8009844:	61fb      	str	r3, [r7, #28]
 8009846:	e165      	b.n	8009b14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009848:	2201      	movs	r2, #1
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	fa02 f303 	lsl.w	r3, r2, r3
 8009850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	4013      	ands	r3, r2
 800985a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	429a      	cmp	r2, r3
 8009862:	f040 8154 	bne.w	8009b0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f003 0303 	and.w	r3, r3, #3
 800986e:	2b01      	cmp	r3, #1
 8009870:	d005      	beq.n	800987e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800987a:	2b02      	cmp	r3, #2
 800987c:	d130      	bne.n	80098e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	2203      	movs	r2, #3
 800988a:	fa02 f303 	lsl.w	r3, r2, r3
 800988e:	43db      	mvns	r3, r3
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	4013      	ands	r3, r2
 8009894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	68da      	ldr	r2, [r3, #12]
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	fa02 f303 	lsl.w	r3, r2, r3
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	69ba      	ldr	r2, [r7, #24]
 80098ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80098b4:	2201      	movs	r2, #1
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	fa02 f303 	lsl.w	r3, r2, r3
 80098bc:	43db      	mvns	r3, r3
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	4013      	ands	r3, r2
 80098c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	091b      	lsrs	r3, r3, #4
 80098ca:	f003 0201 	and.w	r2, r3, #1
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	fa02 f303 	lsl.w	r3, r2, r3
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	69ba      	ldr	r2, [r7, #24]
 80098de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	f003 0303 	and.w	r3, r3, #3
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d017      	beq.n	800991c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	005b      	lsls	r3, r3, #1
 80098f6:	2203      	movs	r2, #3
 80098f8:	fa02 f303 	lsl.w	r3, r2, r3
 80098fc:	43db      	mvns	r3, r3
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	4013      	ands	r3, r2
 8009902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	fa02 f303 	lsl.w	r3, r2, r3
 8009910:	69ba      	ldr	r2, [r7, #24]
 8009912:	4313      	orrs	r3, r2
 8009914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	69ba      	ldr	r2, [r7, #24]
 800991a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	f003 0303 	and.w	r3, r3, #3
 8009924:	2b02      	cmp	r3, #2
 8009926:	d123      	bne.n	8009970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	08da      	lsrs	r2, r3, #3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3208      	adds	r2, #8
 8009930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	f003 0307 	and.w	r3, r3, #7
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	220f      	movs	r2, #15
 8009940:	fa02 f303 	lsl.w	r3, r2, r3
 8009944:	43db      	mvns	r3, r3
 8009946:	69ba      	ldr	r2, [r7, #24]
 8009948:	4013      	ands	r3, r2
 800994a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	691a      	ldr	r2, [r3, #16]
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	f003 0307 	and.w	r3, r3, #7
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	fa02 f303 	lsl.w	r3, r2, r3
 800995c:	69ba      	ldr	r2, [r7, #24]
 800995e:	4313      	orrs	r3, r2
 8009960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	08da      	lsrs	r2, r3, #3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3208      	adds	r2, #8
 800996a:	69b9      	ldr	r1, [r7, #24]
 800996c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	2203      	movs	r2, #3
 800997c:	fa02 f303 	lsl.w	r3, r2, r3
 8009980:	43db      	mvns	r3, r3
 8009982:	69ba      	ldr	r2, [r7, #24]
 8009984:	4013      	ands	r3, r2
 8009986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	f003 0203 	and.w	r2, r3, #3
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	fa02 f303 	lsl.w	r3, r2, r3
 8009998:	69ba      	ldr	r2, [r7, #24]
 800999a:	4313      	orrs	r3, r2
 800999c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	69ba      	ldr	r2, [r7, #24]
 80099a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 80ae 	beq.w	8009b0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80099b2:	2300      	movs	r3, #0
 80099b4:	60fb      	str	r3, [r7, #12]
 80099b6:	4b5d      	ldr	r3, [pc, #372]	; (8009b2c <HAL_GPIO_Init+0x300>)
 80099b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ba:	4a5c      	ldr	r2, [pc, #368]	; (8009b2c <HAL_GPIO_Init+0x300>)
 80099bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80099c0:	6453      	str	r3, [r2, #68]	; 0x44
 80099c2:	4b5a      	ldr	r3, [pc, #360]	; (8009b2c <HAL_GPIO_Init+0x300>)
 80099c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80099ce:	4a58      	ldr	r2, [pc, #352]	; (8009b30 <HAL_GPIO_Init+0x304>)
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	089b      	lsrs	r3, r3, #2
 80099d4:	3302      	adds	r3, #2
 80099d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	f003 0303 	and.w	r3, r3, #3
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	220f      	movs	r2, #15
 80099e6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ea:	43db      	mvns	r3, r3
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	4013      	ands	r3, r2
 80099f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a4f      	ldr	r2, [pc, #316]	; (8009b34 <HAL_GPIO_Init+0x308>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d025      	beq.n	8009a46 <HAL_GPIO_Init+0x21a>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a4e      	ldr	r2, [pc, #312]	; (8009b38 <HAL_GPIO_Init+0x30c>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d01f      	beq.n	8009a42 <HAL_GPIO_Init+0x216>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a4d      	ldr	r2, [pc, #308]	; (8009b3c <HAL_GPIO_Init+0x310>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d019      	beq.n	8009a3e <HAL_GPIO_Init+0x212>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a4c      	ldr	r2, [pc, #304]	; (8009b40 <HAL_GPIO_Init+0x314>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d013      	beq.n	8009a3a <HAL_GPIO_Init+0x20e>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a4b      	ldr	r2, [pc, #300]	; (8009b44 <HAL_GPIO_Init+0x318>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d00d      	beq.n	8009a36 <HAL_GPIO_Init+0x20a>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a4a      	ldr	r2, [pc, #296]	; (8009b48 <HAL_GPIO_Init+0x31c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d007      	beq.n	8009a32 <HAL_GPIO_Init+0x206>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a49      	ldr	r2, [pc, #292]	; (8009b4c <HAL_GPIO_Init+0x320>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d101      	bne.n	8009a2e <HAL_GPIO_Init+0x202>
 8009a2a:	2306      	movs	r3, #6
 8009a2c:	e00c      	b.n	8009a48 <HAL_GPIO_Init+0x21c>
 8009a2e:	2307      	movs	r3, #7
 8009a30:	e00a      	b.n	8009a48 <HAL_GPIO_Init+0x21c>
 8009a32:	2305      	movs	r3, #5
 8009a34:	e008      	b.n	8009a48 <HAL_GPIO_Init+0x21c>
 8009a36:	2304      	movs	r3, #4
 8009a38:	e006      	b.n	8009a48 <HAL_GPIO_Init+0x21c>
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e004      	b.n	8009a48 <HAL_GPIO_Init+0x21c>
 8009a3e:	2302      	movs	r3, #2
 8009a40:	e002      	b.n	8009a48 <HAL_GPIO_Init+0x21c>
 8009a42:	2301      	movs	r3, #1
 8009a44:	e000      	b.n	8009a48 <HAL_GPIO_Init+0x21c>
 8009a46:	2300      	movs	r3, #0
 8009a48:	69fa      	ldr	r2, [r7, #28]
 8009a4a:	f002 0203 	and.w	r2, r2, #3
 8009a4e:	0092      	lsls	r2, r2, #2
 8009a50:	4093      	lsls	r3, r2
 8009a52:	69ba      	ldr	r2, [r7, #24]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009a58:	4935      	ldr	r1, [pc, #212]	; (8009b30 <HAL_GPIO_Init+0x304>)
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	089b      	lsrs	r3, r3, #2
 8009a5e:	3302      	adds	r3, #2
 8009a60:	69ba      	ldr	r2, [r7, #24]
 8009a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009a66:	4b3a      	ldr	r3, [pc, #232]	; (8009b50 <HAL_GPIO_Init+0x324>)
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	43db      	mvns	r3, r3
 8009a70:	69ba      	ldr	r2, [r7, #24]
 8009a72:	4013      	ands	r3, r2
 8009a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009a82:	69ba      	ldr	r2, [r7, #24]
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009a8a:	4a31      	ldr	r2, [pc, #196]	; (8009b50 <HAL_GPIO_Init+0x324>)
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009a90:	4b2f      	ldr	r3, [pc, #188]	; (8009b50 <HAL_GPIO_Init+0x324>)
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	43db      	mvns	r3, r3
 8009a9a:	69ba      	ldr	r2, [r7, #24]
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009aac:	69ba      	ldr	r2, [r7, #24]
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009ab4:	4a26      	ldr	r2, [pc, #152]	; (8009b50 <HAL_GPIO_Init+0x324>)
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009aba:	4b25      	ldr	r3, [pc, #148]	; (8009b50 <HAL_GPIO_Init+0x324>)
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	43db      	mvns	r3, r3
 8009ac4:	69ba      	ldr	r2, [r7, #24]
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009ade:	4a1c      	ldr	r2, [pc, #112]	; (8009b50 <HAL_GPIO_Init+0x324>)
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009ae4:	4b1a      	ldr	r3, [pc, #104]	; (8009b50 <HAL_GPIO_Init+0x324>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	43db      	mvns	r3, r3
 8009aee:	69ba      	ldr	r2, [r7, #24]
 8009af0:	4013      	ands	r3, r2
 8009af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009b08:	4a11      	ldr	r2, [pc, #68]	; (8009b50 <HAL_GPIO_Init+0x324>)
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	3301      	adds	r3, #1
 8009b12:	61fb      	str	r3, [r7, #28]
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	2b0f      	cmp	r3, #15
 8009b18:	f67f ae96 	bls.w	8009848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009b1c:	bf00      	nop
 8009b1e:	bf00      	nop
 8009b20:	3724      	adds	r7, #36	; 0x24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	40023800 	.word	0x40023800
 8009b30:	40013800 	.word	0x40013800
 8009b34:	40020000 	.word	0x40020000
 8009b38:	40020400 	.word	0x40020400
 8009b3c:	40020800 	.word	0x40020800
 8009b40:	40020c00 	.word	0x40020c00
 8009b44:	40021000 	.word	0x40021000
 8009b48:	40021400 	.word	0x40021400
 8009b4c:	40021800 	.word	0x40021800
 8009b50:	40013c00 	.word	0x40013c00

08009b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691a      	ldr	r2, [r3, #16]
 8009b64:	887b      	ldrh	r3, [r7, #2]
 8009b66:	4013      	ands	r3, r2
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d002      	beq.n	8009b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	73fb      	strb	r3, [r7, #15]
 8009b70:	e001      	b.n	8009b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3714      	adds	r7, #20
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	807b      	strh	r3, [r7, #2]
 8009b90:	4613      	mov	r3, r2
 8009b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009b94:	787b      	ldrb	r3, [r7, #1]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d003      	beq.n	8009ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009b9a:	887a      	ldrh	r2, [r7, #2]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009ba0:	e003      	b.n	8009baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009ba2:	887b      	ldrh	r3, [r7, #2]
 8009ba4:	041a      	lsls	r2, r3, #16
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	619a      	str	r2, [r3, #24]
}
 8009baa:	bf00      	nop
 8009bac:	370c      	adds	r7, #12
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr

08009bb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b085      	sub	sp, #20
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009bc8:	887a      	ldrh	r2, [r7, #2]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4013      	ands	r3, r2
 8009bce:	041a      	lsls	r2, r3, #16
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	43d9      	mvns	r1, r3
 8009bd4:	887b      	ldrh	r3, [r7, #2]
 8009bd6:	400b      	ands	r3, r1
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	619a      	str	r2, [r3, #24]
}
 8009bde:	bf00      	nop
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
	...

08009bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009bf6:	4b08      	ldr	r3, [pc, #32]	; (8009c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009bf8:	695a      	ldr	r2, [r3, #20]
 8009bfa:	88fb      	ldrh	r3, [r7, #6]
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d006      	beq.n	8009c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009c02:	4a05      	ldr	r2, [pc, #20]	; (8009c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009c04:	88fb      	ldrh	r3, [r7, #6]
 8009c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009c08:	88fb      	ldrh	r3, [r7, #6]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fb fc6c 	bl	80054e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8009c10:	bf00      	nop
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	40013c00 	.word	0x40013c00

08009c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e12b      	b.n	8009e86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d106      	bne.n	8009c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7fb fe9c 	bl	8005980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2224      	movs	r2, #36	; 0x24
 8009c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f022 0201 	bic.w	r2, r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009c80:	f001 f9fc 	bl	800b07c <HAL_RCC_GetPCLK1Freq>
 8009c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	4a81      	ldr	r2, [pc, #516]	; (8009e90 <HAL_I2C_Init+0x274>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d807      	bhi.n	8009ca0 <HAL_I2C_Init+0x84>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4a80      	ldr	r2, [pc, #512]	; (8009e94 <HAL_I2C_Init+0x278>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	bf94      	ite	ls
 8009c98:	2301      	movls	r3, #1
 8009c9a:	2300      	movhi	r3, #0
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	e006      	b.n	8009cae <HAL_I2C_Init+0x92>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4a7d      	ldr	r2, [pc, #500]	; (8009e98 <HAL_I2C_Init+0x27c>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	bf94      	ite	ls
 8009ca8:	2301      	movls	r3, #1
 8009caa:	2300      	movhi	r3, #0
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e0e7      	b.n	8009e86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4a78      	ldr	r2, [pc, #480]	; (8009e9c <HAL_I2C_Init+0x280>)
 8009cba:	fba2 2303 	umull	r2, r3, r2, r3
 8009cbe:	0c9b      	lsrs	r3, r3, #18
 8009cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6a1b      	ldr	r3, [r3, #32]
 8009cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	4a6a      	ldr	r2, [pc, #424]	; (8009e90 <HAL_I2C_Init+0x274>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d802      	bhi.n	8009cf0 <HAL_I2C_Init+0xd4>
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	3301      	adds	r3, #1
 8009cee:	e009      	b.n	8009d04 <HAL_I2C_Init+0xe8>
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009cf6:	fb02 f303 	mul.w	r3, r2, r3
 8009cfa:	4a69      	ldr	r2, [pc, #420]	; (8009ea0 <HAL_I2C_Init+0x284>)
 8009cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009d00:	099b      	lsrs	r3, r3, #6
 8009d02:	3301      	adds	r3, #1
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	6812      	ldr	r2, [r2, #0]
 8009d08:	430b      	orrs	r3, r1
 8009d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009d16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	495c      	ldr	r1, [pc, #368]	; (8009e90 <HAL_I2C_Init+0x274>)
 8009d20:	428b      	cmp	r3, r1
 8009d22:	d819      	bhi.n	8009d58 <HAL_I2C_Init+0x13c>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	1e59      	subs	r1, r3, #1
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d32:	1c59      	adds	r1, r3, #1
 8009d34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009d38:	400b      	ands	r3, r1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00a      	beq.n	8009d54 <HAL_I2C_Init+0x138>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	1e59      	subs	r1, r3, #1
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d52:	e051      	b.n	8009df8 <HAL_I2C_Init+0x1dc>
 8009d54:	2304      	movs	r3, #4
 8009d56:	e04f      	b.n	8009df8 <HAL_I2C_Init+0x1dc>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d111      	bne.n	8009d84 <HAL_I2C_Init+0x168>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	1e58      	subs	r0, r3, #1
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6859      	ldr	r1, [r3, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	005b      	lsls	r3, r3, #1
 8009d6c:	440b      	add	r3, r1
 8009d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d72:	3301      	adds	r3, #1
 8009d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bf0c      	ite	eq
 8009d7c:	2301      	moveq	r3, #1
 8009d7e:	2300      	movne	r3, #0
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	e012      	b.n	8009daa <HAL_I2C_Init+0x18e>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	1e58      	subs	r0, r3, #1
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6859      	ldr	r1, [r3, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	440b      	add	r3, r1
 8009d92:	0099      	lsls	r1, r3, #2
 8009d94:	440b      	add	r3, r1
 8009d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bf0c      	ite	eq
 8009da4:	2301      	moveq	r3, #1
 8009da6:	2300      	movne	r3, #0
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <HAL_I2C_Init+0x196>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e022      	b.n	8009df8 <HAL_I2C_Init+0x1dc>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10e      	bne.n	8009dd8 <HAL_I2C_Init+0x1bc>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	1e58      	subs	r0, r3, #1
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6859      	ldr	r1, [r3, #4]
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	440b      	add	r3, r1
 8009dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8009dcc:	3301      	adds	r3, #1
 8009dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dd6:	e00f      	b.n	8009df8 <HAL_I2C_Init+0x1dc>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	1e58      	subs	r0, r3, #1
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6859      	ldr	r1, [r3, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	440b      	add	r3, r1
 8009de6:	0099      	lsls	r1, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8009dee:	3301      	adds	r3, #1
 8009df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009df8:	6879      	ldr	r1, [r7, #4]
 8009dfa:	6809      	ldr	r1, [r1, #0]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	69da      	ldr	r2, [r3, #28]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009e26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	6911      	ldr	r1, [r2, #16]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	68d2      	ldr	r2, [r2, #12]
 8009e32:	4311      	orrs	r1, r2
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	6812      	ldr	r2, [r2, #0]
 8009e38:	430b      	orrs	r3, r1
 8009e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	695a      	ldr	r2, [r3, #20]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	430a      	orrs	r2, r1
 8009e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f042 0201 	orr.w	r2, r2, #1
 8009e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	000186a0 	.word	0x000186a0
 8009e94:	001e847f 	.word	0x001e847f
 8009e98:	003d08ff 	.word	0x003d08ff
 8009e9c:	431bde83 	.word	0x431bde83
 8009ea0:	10624dd3 	.word	0x10624dd3

08009ea4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b088      	sub	sp, #32
 8009ea8:	af02      	add	r7, sp, #8
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	4608      	mov	r0, r1
 8009eae:	4611      	mov	r1, r2
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	817b      	strh	r3, [r7, #10]
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	813b      	strh	r3, [r7, #8]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ebe:	f7fe fb6d 	bl	800859c <HAL_GetTick>
 8009ec2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b20      	cmp	r3, #32
 8009ece:	f040 80d9 	bne.w	800a084 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	9300      	str	r3, [sp, #0]
 8009ed6:	2319      	movs	r3, #25
 8009ed8:	2201      	movs	r2, #1
 8009eda:	496d      	ldr	r1, [pc, #436]	; (800a090 <HAL_I2C_Mem_Write+0x1ec>)
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 fdad 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009ee8:	2302      	movs	r3, #2
 8009eea:	e0cc      	b.n	800a086 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <HAL_I2C_Mem_Write+0x56>
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e0c5      	b.n	800a086 <HAL_I2C_Mem_Write+0x1e2>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d007      	beq.n	8009f20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f042 0201 	orr.w	r2, r2, #1
 8009f1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2221      	movs	r2, #33	; 0x21
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2240      	movs	r2, #64	; 0x40
 8009f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6a3a      	ldr	r2, [r7, #32]
 8009f4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4a4d      	ldr	r2, [pc, #308]	; (800a094 <HAL_I2C_Mem_Write+0x1f0>)
 8009f60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009f62:	88f8      	ldrh	r0, [r7, #6]
 8009f64:	893a      	ldrh	r2, [r7, #8]
 8009f66:	8979      	ldrh	r1, [r7, #10]
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	9301      	str	r3, [sp, #4]
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	4603      	mov	r3, r0
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f000 fbe4 	bl	800a740 <I2C_RequestMemoryWrite>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d052      	beq.n	800a024 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e081      	b.n	800a086 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 fe2e 	bl	800abe8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00d      	beq.n	8009fae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	d107      	bne.n	8009faa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e06b      	b.n	800a086 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	781a      	ldrb	r2, [r3, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	1c5a      	adds	r2, r3, #1
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	f003 0304 	and.w	r3, r3, #4
 8009fe8:	2b04      	cmp	r3, #4
 8009fea:	d11b      	bne.n	800a024 <HAL_I2C_Mem_Write+0x180>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d017      	beq.n	800a024 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	781a      	ldrb	r2, [r3, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	1c5a      	adds	r2, r3, #1
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a00e:	3b01      	subs	r3, #1
 800a010:	b29a      	uxth	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	3b01      	subs	r3, #1
 800a01e:	b29a      	uxth	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1aa      	bne.n	8009f82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f000 fe1a 	bl	800ac6a <I2C_WaitOnBTFFlagUntilTimeout>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00d      	beq.n	800a058 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a040:	2b04      	cmp	r3, #4
 800a042:	d107      	bne.n	800a054 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a052:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e016      	b.n	800a086 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2220      	movs	r2, #32
 800a06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	e000      	b.n	800a086 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a084:	2302      	movs	r3, #2
  }
}
 800a086:	4618      	mov	r0, r3
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	00100002 	.word	0x00100002
 800a094:	ffff0000 	.word	0xffff0000

0800a098 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08c      	sub	sp, #48	; 0x30
 800a09c:	af02      	add	r7, sp, #8
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	4608      	mov	r0, r1
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	817b      	strh	r3, [r7, #10]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	813b      	strh	r3, [r7, #8]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a0b2:	f7fe fa73 	bl	800859c <HAL_GetTick>
 800a0b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	2b20      	cmp	r3, #32
 800a0c2:	f040 8208 	bne.w	800a4d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	2319      	movs	r3, #25
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	497b      	ldr	r1, [pc, #492]	; (800a2bc <HAL_I2C_Mem_Read+0x224>)
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 fcb3 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a0dc:	2302      	movs	r3, #2
 800a0de:	e1fb      	b.n	800a4d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d101      	bne.n	800a0ee <HAL_I2C_Mem_Read+0x56>
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	e1f4      	b.n	800a4d8 <HAL_I2C_Mem_Read+0x440>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b01      	cmp	r3, #1
 800a102:	d007      	beq.n	800a114 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f042 0201 	orr.w	r2, r2, #1
 800a112:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a122:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2222      	movs	r2, #34	; 0x22
 800a128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2240      	movs	r2, #64	; 0x40
 800a130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a13e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4a5b      	ldr	r2, [pc, #364]	; (800a2c0 <HAL_I2C_Mem_Read+0x228>)
 800a154:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a156:	88f8      	ldrh	r0, [r7, #6]
 800a158:	893a      	ldrh	r2, [r7, #8]
 800a15a:	8979      	ldrh	r1, [r7, #10]
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	4603      	mov	r3, r0
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 fb80 	bl	800a86c <I2C_RequestMemoryRead>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e1b0      	b.n	800a4d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d113      	bne.n	800a1a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a17e:	2300      	movs	r3, #0
 800a180:	623b      	str	r3, [r7, #32]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	623b      	str	r3, [r7, #32]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	623b      	str	r3, [r7, #32]
 800a192:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	e184      	b.n	800a4b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d11b      	bne.n	800a1e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1be:	2300      	movs	r3, #0
 800a1c0:	61fb      	str	r3, [r7, #28]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	61fb      	str	r3, [r7, #28]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	61fb      	str	r3, [r7, #28]
 800a1d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1e2:	601a      	str	r2, [r3, #0]
 800a1e4:	e164      	b.n	800a4b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d11b      	bne.n	800a226 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a20c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a20e:	2300      	movs	r3, #0
 800a210:	61bb      	str	r3, [r7, #24]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	695b      	ldr	r3, [r3, #20]
 800a218:	61bb      	str	r3, [r7, #24]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	61bb      	str	r3, [r7, #24]
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	e144      	b.n	800a4b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a226:	2300      	movs	r3, #0
 800a228:	617b      	str	r3, [r7, #20]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	617b      	str	r3, [r7, #20]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	617b      	str	r3, [r7, #20]
 800a23a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a23c:	e138      	b.n	800a4b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a242:	2b03      	cmp	r3, #3
 800a244:	f200 80f1 	bhi.w	800a42a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d123      	bne.n	800a298 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a252:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f000 fd49 	bl	800acec <I2C_WaitOnRXNEFlagUntilTimeout>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e139      	b.n	800a4d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	691a      	ldr	r2, [r3, #16]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	b2d2      	uxtb	r2, r2
 800a270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	1c5a      	adds	r2, r3, #1
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a280:	3b01      	subs	r3, #1
 800a282:	b29a      	uxth	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	3b01      	subs	r3, #1
 800a290:	b29a      	uxth	r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a296:	e10b      	b.n	800a4b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d14e      	bne.n	800a33e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	4906      	ldr	r1, [pc, #24]	; (800a2c4 <HAL_I2C_Mem_Read+0x22c>)
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 fbc6 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d008      	beq.n	800a2c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e10e      	b.n	800a4d8 <HAL_I2C_Mem_Read+0x440>
 800a2ba:	bf00      	nop
 800a2bc:	00100002 	.word	0x00100002
 800a2c0:	ffff0000 	.word	0xffff0000
 800a2c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	691a      	ldr	r2, [r3, #16]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e2:	b2d2      	uxtb	r2, r2
 800a2e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a300:	b29b      	uxth	r3, r3
 800a302:	3b01      	subs	r3, #1
 800a304:	b29a      	uxth	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	691a      	ldr	r2, [r3, #16]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a314:	b2d2      	uxtb	r2, r2
 800a316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a326:	3b01      	subs	r3, #1
 800a328:	b29a      	uxth	r2, r3
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a332:	b29b      	uxth	r3, r3
 800a334:	3b01      	subs	r3, #1
 800a336:	b29a      	uxth	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a33c:	e0b8      	b.n	800a4b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	2200      	movs	r2, #0
 800a346:	4966      	ldr	r1, [pc, #408]	; (800a4e0 <HAL_I2C_Mem_Read+0x448>)
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f000 fb77 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e0bf      	b.n	800a4d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691a      	ldr	r2, [r3, #16]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a372:	b2d2      	uxtb	r2, r2
 800a374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a384:	3b01      	subs	r3, #1
 800a386:	b29a      	uxth	r2, r3
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a390:	b29b      	uxth	r3, r3
 800a392:	3b01      	subs	r3, #1
 800a394:	b29a      	uxth	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	494f      	ldr	r1, [pc, #316]	; (800a4e0 <HAL_I2C_Mem_Read+0x448>)
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 fb49 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e091      	b.n	800a4d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	691a      	ldr	r2, [r3, #16]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ce:	b2d2      	uxtb	r2, r2
 800a3d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	1c5a      	adds	r2, r3, #1
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	691a      	ldr	r2, [r3, #16]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a400:	b2d2      	uxtb	r2, r2
 800a402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a412:	3b01      	subs	r3, #1
 800a414:	b29a      	uxth	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a41e:	b29b      	uxth	r3, r3
 800a420:	3b01      	subs	r3, #1
 800a422:	b29a      	uxth	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a428:	e042      	b.n	800a4b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a42a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a42c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f000 fc5c 	bl	800acec <I2C_WaitOnRXNEFlagUntilTimeout>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e04c      	b.n	800a4d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	691a      	ldr	r2, [r3, #16]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a448:	b2d2      	uxtb	r2, r2
 800a44a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a450:	1c5a      	adds	r2, r3, #1
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a45a:	3b01      	subs	r3, #1
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a466:	b29b      	uxth	r3, r3
 800a468:	3b01      	subs	r3, #1
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	f003 0304 	and.w	r3, r3, #4
 800a47a:	2b04      	cmp	r3, #4
 800a47c:	d118      	bne.n	800a4b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	691a      	ldr	r2, [r3, #16]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	b2d2      	uxtb	r2, r2
 800a48a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a490:	1c5a      	adds	r2, r3, #1
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a49a:	3b01      	subs	r3, #1
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f47f aec2 	bne.w	800a23e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2220      	movs	r2, #32
 800a4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	e000      	b.n	800a4d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a4d6:	2302      	movs	r3, #2
  }
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3728      	adds	r7, #40	; 0x28
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	00010004 	.word	0x00010004

0800a4e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08a      	sub	sp, #40	; 0x28
 800a4e8:	af02      	add	r7, sp, #8
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800a4f4:	f7fe f852 	bl	800859c <HAL_GetTick>
 800a4f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b20      	cmp	r3, #32
 800a508:	f040 8111 	bne.w	800a72e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	2319      	movs	r3, #25
 800a512:	2201      	movs	r2, #1
 800a514:	4988      	ldr	r1, [pc, #544]	; (800a738 <HAL_I2C_IsDeviceReady+0x254>)
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 fa90 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800a522:	2302      	movs	r3, #2
 800a524:	e104      	b.n	800a730 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d101      	bne.n	800a534 <HAL_I2C_IsDeviceReady+0x50>
 800a530:	2302      	movs	r3, #2
 800a532:	e0fd      	b.n	800a730 <HAL_I2C_IsDeviceReady+0x24c>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	2b01      	cmp	r3, #1
 800a548:	d007      	beq.n	800a55a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f042 0201 	orr.w	r2, r2, #1
 800a558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a568:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2224      	movs	r2, #36	; 0x24
 800a56e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	4a70      	ldr	r2, [pc, #448]	; (800a73c <HAL_I2C_IsDeviceReady+0x258>)
 800a57c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a58c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2200      	movs	r2, #0
 800a596:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 fa4e 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00d      	beq.n	800a5c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5b4:	d103      	bne.n	800a5be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e0b6      	b.n	800a730 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a5c2:	897b      	ldrh	r3, [r7, #10]
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a5d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a5d2:	f7fd ffe3 	bl	800859c <HAL_GetTick>
 800a5d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	695b      	ldr	r3, [r3, #20]
 800a5de:	f003 0302 	and.w	r3, r3, #2
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	bf0c      	ite	eq
 800a5e6:	2301      	moveq	r3, #1
 800a5e8:	2300      	movne	r3, #0
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	695b      	ldr	r3, [r3, #20]
 800a5f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5fc:	bf0c      	ite	eq
 800a5fe:	2301      	moveq	r3, #1
 800a600:	2300      	movne	r3, #0
 800a602:	b2db      	uxtb	r3, r3
 800a604:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a606:	e025      	b.n	800a654 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a608:	f7fd ffc8 	bl	800859c <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	429a      	cmp	r2, r3
 800a616:	d302      	bcc.n	800a61e <HAL_I2C_IsDeviceReady+0x13a>
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d103      	bne.n	800a626 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	22a0      	movs	r2, #160	; 0xa0
 800a622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	695b      	ldr	r3, [r3, #20]
 800a62c:	f003 0302 	and.w	r3, r3, #2
 800a630:	2b02      	cmp	r3, #2
 800a632:	bf0c      	ite	eq
 800a634:	2301      	moveq	r3, #1
 800a636:	2300      	movne	r3, #0
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a64a:	bf0c      	ite	eq
 800a64c:	2301      	moveq	r3, #1
 800a64e:	2300      	movne	r3, #0
 800a650:	b2db      	uxtb	r3, r3
 800a652:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	2ba0      	cmp	r3, #160	; 0xa0
 800a65e:	d005      	beq.n	800a66c <HAL_I2C_IsDeviceReady+0x188>
 800a660:	7dfb      	ldrb	r3, [r7, #23]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d102      	bne.n	800a66c <HAL_I2C_IsDeviceReady+0x188>
 800a666:	7dbb      	ldrb	r3, [r7, #22]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d0cd      	beq.n	800a608 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2220      	movs	r2, #32
 800a670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	f003 0302 	and.w	r3, r3, #2
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d129      	bne.n	800a6d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a690:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a692:	2300      	movs	r3, #0
 800a694:	613b      	str	r3, [r7, #16]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	613b      	str	r3, [r7, #16]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	613b      	str	r3, [r7, #16]
 800a6a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	2319      	movs	r3, #25
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	4921      	ldr	r1, [pc, #132]	; (800a738 <HAL_I2C_IsDeviceReady+0x254>)
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 f9c2 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e036      	b.n	800a730 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2220      	movs	r2, #32
 800a6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	e02c      	b.n	800a730 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a6ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	2319      	movs	r3, #25
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	490f      	ldr	r1, [pc, #60]	; (800a738 <HAL_I2C_IsDeviceReady+0x254>)
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 f99e 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e012      	b.n	800a730 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	3301      	adds	r3, #1
 800a70e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a710:	69ba      	ldr	r2, [r7, #24]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	429a      	cmp	r2, r3
 800a716:	f4ff af32 	bcc.w	800a57e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2220      	movs	r2, #32
 800a71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e000      	b.n	800a730 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800a72e:	2302      	movs	r3, #2
  }
}
 800a730:	4618      	mov	r0, r3
 800a732:	3720      	adds	r7, #32
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	00100002 	.word	0x00100002
 800a73c:	ffff0000 	.word	0xffff0000

0800a740 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af02      	add	r7, sp, #8
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	4608      	mov	r0, r1
 800a74a:	4611      	mov	r1, r2
 800a74c:	461a      	mov	r2, r3
 800a74e:	4603      	mov	r3, r0
 800a750:	817b      	strh	r3, [r7, #10]
 800a752:	460b      	mov	r3, r1
 800a754:	813b      	strh	r3, [r7, #8]
 800a756:	4613      	mov	r3, r2
 800a758:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a768:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	2200      	movs	r2, #0
 800a772:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f000 f960 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00d      	beq.n	800a79e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a78c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a790:	d103      	bne.n	800a79a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a798:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e05f      	b.n	800a85e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a79e:	897b      	ldrh	r3, [r7, #10]
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a7ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	6a3a      	ldr	r2, [r7, #32]
 800a7b2:	492d      	ldr	r1, [pc, #180]	; (800a868 <I2C_RequestMemoryWrite+0x128>)
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f000 f998 	bl	800aaea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d001      	beq.n	800a7c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e04c      	b.n	800a85e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	617b      	str	r3, [r7, #20]
 800a7d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7dc:	6a39      	ldr	r1, [r7, #32]
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 fa02 	bl	800abe8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00d      	beq.n	800a806 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d107      	bne.n	800a802 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a800:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e02b      	b.n	800a85e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a806:	88fb      	ldrh	r3, [r7, #6]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d105      	bne.n	800a818 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a80c:	893b      	ldrh	r3, [r7, #8]
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	611a      	str	r2, [r3, #16]
 800a816:	e021      	b.n	800a85c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a818:	893b      	ldrh	r3, [r7, #8]
 800a81a:	0a1b      	lsrs	r3, r3, #8
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a828:	6a39      	ldr	r1, [r7, #32]
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f000 f9dc 	bl	800abe8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00d      	beq.n	800a852 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	d107      	bne.n	800a84e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a84c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e005      	b.n	800a85e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a852:	893b      	ldrh	r3, [r7, #8]
 800a854:	b2da      	uxtb	r2, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3718      	adds	r7, #24
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	00010002 	.word	0x00010002

0800a86c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b088      	sub	sp, #32
 800a870:	af02      	add	r7, sp, #8
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	4608      	mov	r0, r1
 800a876:	4611      	mov	r1, r2
 800a878:	461a      	mov	r2, r3
 800a87a:	4603      	mov	r3, r0
 800a87c:	817b      	strh	r3, [r7, #10]
 800a87e:	460b      	mov	r3, r1
 800a880:	813b      	strh	r3, [r7, #8]
 800a882:	4613      	mov	r3, r2
 800a884:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a894:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f000 f8c2 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00d      	beq.n	800a8da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8cc:	d103      	bne.n	800a8d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e0aa      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a8da:	897b      	ldrh	r3, [r7, #10]
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	461a      	mov	r2, r3
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a8e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	6a3a      	ldr	r2, [r7, #32]
 800a8ee:	4952      	ldr	r1, [pc, #328]	; (800aa38 <I2C_RequestMemoryRead+0x1cc>)
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f000 f8fa 	bl	800aaea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d001      	beq.n	800a900 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e097      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a900:	2300      	movs	r3, #0
 800a902:	617b      	str	r3, [r7, #20]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	617b      	str	r3, [r7, #20]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a918:	6a39      	ldr	r1, [r7, #32]
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 f964 	bl	800abe8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00d      	beq.n	800a942 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d107      	bne.n	800a93e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a93c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e076      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a942:	88fb      	ldrh	r3, [r7, #6]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d105      	bne.n	800a954 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a948:	893b      	ldrh	r3, [r7, #8]
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	611a      	str	r2, [r3, #16]
 800a952:	e021      	b.n	800a998 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a954:	893b      	ldrh	r3, [r7, #8]
 800a956:	0a1b      	lsrs	r3, r3, #8
 800a958:	b29b      	uxth	r3, r3
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a964:	6a39      	ldr	r1, [r7, #32]
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 f93e 	bl	800abe8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00d      	beq.n	800a98e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a976:	2b04      	cmp	r3, #4
 800a978:	d107      	bne.n	800a98a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a988:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e050      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a98e:	893b      	ldrh	r3, [r7, #8]
 800a990:	b2da      	uxtb	r2, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a99a:	6a39      	ldr	r1, [r7, #32]
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 f923 	bl	800abe8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00d      	beq.n	800a9c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d107      	bne.n	800a9c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e035      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 f82b 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00d      	beq.n	800aa08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9fa:	d103      	bne.n	800aa04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e013      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aa08:	897b      	ldrh	r3, [r7, #10]
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	f043 0301 	orr.w	r3, r3, #1
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1a:	6a3a      	ldr	r2, [r7, #32]
 800aa1c:	4906      	ldr	r1, [pc, #24]	; (800aa38 <I2C_RequestMemoryRead+0x1cc>)
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f000 f863 	bl	800aaea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e000      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3718      	adds	r7, #24
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	00010002 	.word	0x00010002

0800aa3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	603b      	str	r3, [r7, #0]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa4c:	e025      	b.n	800aa9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa54:	d021      	beq.n	800aa9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa56:	f7fd fda1 	bl	800859c <HAL_GetTick>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d302      	bcc.n	800aa6c <I2C_WaitOnFlagUntilTimeout+0x30>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d116      	bne.n	800aa9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2220      	movs	r2, #32
 800aa76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa86:	f043 0220 	orr.w	r2, r3, #32
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e023      	b.n	800aae2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	0c1b      	lsrs	r3, r3, #16
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d10d      	bne.n	800aac0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	695b      	ldr	r3, [r3, #20]
 800aaaa:	43da      	mvns	r2, r3
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	4013      	ands	r3, r2
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	bf0c      	ite	eq
 800aab6:	2301      	moveq	r3, #1
 800aab8:	2300      	movne	r3, #0
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	461a      	mov	r2, r3
 800aabe:	e00c      	b.n	800aada <I2C_WaitOnFlagUntilTimeout+0x9e>
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	43da      	mvns	r2, r3
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	4013      	ands	r3, r2
 800aacc:	b29b      	uxth	r3, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	bf0c      	ite	eq
 800aad2:	2301      	moveq	r3, #1
 800aad4:	2300      	movne	r3, #0
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	461a      	mov	r2, r3
 800aada:	79fb      	ldrb	r3, [r7, #7]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d0b6      	beq.n	800aa4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b084      	sub	sp, #16
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	60f8      	str	r0, [r7, #12]
 800aaf2:	60b9      	str	r1, [r7, #8]
 800aaf4:	607a      	str	r2, [r7, #4]
 800aaf6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aaf8:	e051      	b.n	800ab9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab08:	d123      	bne.n	800ab52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3e:	f043 0204 	orr.w	r2, r3, #4
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e046      	b.n	800abe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab58:	d021      	beq.n	800ab9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab5a:	f7fd fd1f 	bl	800859c <HAL_GetTick>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d302      	bcc.n	800ab70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d116      	bne.n	800ab9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2200      	movs	r2, #0
 800ab74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2220      	movs	r2, #32
 800ab7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8a:	f043 0220 	orr.w	r2, r3, #32
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e020      	b.n	800abe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	0c1b      	lsrs	r3, r3, #16
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d10c      	bne.n	800abc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	43da      	mvns	r2, r3
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	4013      	ands	r3, r2
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	bf14      	ite	ne
 800abba:	2301      	movne	r3, #1
 800abbc:	2300      	moveq	r3, #0
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	e00b      	b.n	800abda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	43da      	mvns	r2, r3
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	4013      	ands	r3, r2
 800abce:	b29b      	uxth	r3, r3
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	bf14      	ite	ne
 800abd4:	2301      	movne	r3, #1
 800abd6:	2300      	moveq	r3, #0
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d18d      	bne.n	800aafa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abf4:	e02d      	b.n	800ac52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f000 f8ce 	bl	800ad98 <I2C_IsAcknowledgeFailed>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d001      	beq.n	800ac06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e02d      	b.n	800ac62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac0c:	d021      	beq.n	800ac52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac0e:	f7fd fcc5 	bl	800859c <HAL_GetTick>
 800ac12:	4602      	mov	r2, r0
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d302      	bcc.n	800ac24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d116      	bne.n	800ac52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2220      	movs	r2, #32
 800ac2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3e:	f043 0220 	orr.w	r2, r3, #32
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e007      	b.n	800ac62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac5c:	2b80      	cmp	r3, #128	; 0x80
 800ac5e:	d1ca      	bne.n	800abf6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b084      	sub	sp, #16
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	60f8      	str	r0, [r7, #12]
 800ac72:	60b9      	str	r1, [r7, #8]
 800ac74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac76:	e02d      	b.n	800acd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 f88d 	bl	800ad98 <I2C_IsAcknowledgeFailed>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d001      	beq.n	800ac88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e02d      	b.n	800ace4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac8e:	d021      	beq.n	800acd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac90:	f7fd fc84 	bl	800859c <HAL_GetTick>
 800ac94:	4602      	mov	r2, r0
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d302      	bcc.n	800aca6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d116      	bne.n	800acd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2220      	movs	r2, #32
 800acb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc0:	f043 0220 	orr.w	r2, r3, #32
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e007      	b.n	800ace4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	f003 0304 	and.w	r3, r3, #4
 800acde:	2b04      	cmp	r3, #4
 800ace0:	d1ca      	bne.n	800ac78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800acf8:	e042      	b.n	800ad80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	f003 0310 	and.w	r3, r3, #16
 800ad04:	2b10      	cmp	r3, #16
 800ad06:	d119      	bne.n	800ad3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f06f 0210 	mvn.w	r2, #16
 800ad10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2220      	movs	r2, #32
 800ad1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e029      	b.n	800ad90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad3c:	f7fd fc2e 	bl	800859c <HAL_GetTick>
 800ad40:	4602      	mov	r2, r0
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d302      	bcc.n	800ad52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d116      	bne.n	800ad80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2200      	movs	r2, #0
 800ad56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2220      	movs	r2, #32
 800ad5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6c:	f043 0220 	orr.w	r2, r3, #32
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e007      	b.n	800ad90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	695b      	ldr	r3, [r3, #20]
 800ad86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8a:	2b40      	cmp	r3, #64	; 0x40
 800ad8c:	d1b5      	bne.n	800acfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	695b      	ldr	r3, [r3, #20]
 800ada6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adae:	d11b      	bne.n	800ade8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800adb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2220      	movs	r2, #32
 800adc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add4:	f043 0204 	orr.w	r2, r3, #4
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e000      	b.n	800adea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	370c      	adds	r7, #12
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
	...

0800adf8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800adfe:	2300      	movs	r3, #0
 800ae00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ae02:	2300      	movs	r3, #0
 800ae04:	603b      	str	r3, [r7, #0]
 800ae06:	4b20      	ldr	r3, [pc, #128]	; (800ae88 <HAL_PWREx_EnableOverDrive+0x90>)
 800ae08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0a:	4a1f      	ldr	r2, [pc, #124]	; (800ae88 <HAL_PWREx_EnableOverDrive+0x90>)
 800ae0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae10:	6413      	str	r3, [r2, #64]	; 0x40
 800ae12:	4b1d      	ldr	r3, [pc, #116]	; (800ae88 <HAL_PWREx_EnableOverDrive+0x90>)
 800ae14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae1a:	603b      	str	r3, [r7, #0]
 800ae1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ae1e:	4b1b      	ldr	r3, [pc, #108]	; (800ae8c <HAL_PWREx_EnableOverDrive+0x94>)
 800ae20:	2201      	movs	r2, #1
 800ae22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ae24:	f7fd fbba 	bl	800859c <HAL_GetTick>
 800ae28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ae2a:	e009      	b.n	800ae40 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ae2c:	f7fd fbb6 	bl	800859c <HAL_GetTick>
 800ae30:	4602      	mov	r2, r0
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae3a:	d901      	bls.n	800ae40 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e01f      	b.n	800ae80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ae40:	4b13      	ldr	r3, [pc, #76]	; (800ae90 <HAL_PWREx_EnableOverDrive+0x98>)
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae4c:	d1ee      	bne.n	800ae2c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ae4e:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ae50:	2201      	movs	r2, #1
 800ae52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ae54:	f7fd fba2 	bl	800859c <HAL_GetTick>
 800ae58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ae5a:	e009      	b.n	800ae70 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ae5c:	f7fd fb9e 	bl	800859c <HAL_GetTick>
 800ae60:	4602      	mov	r2, r0
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae6a:	d901      	bls.n	800ae70 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	e007      	b.n	800ae80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ae70:	4b07      	ldr	r3, [pc, #28]	; (800ae90 <HAL_PWREx_EnableOverDrive+0x98>)
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae7c:	d1ee      	bne.n	800ae5c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	40023800 	.word	0x40023800
 800ae8c:	420e0040 	.word	0x420e0040
 800ae90:	40007000 	.word	0x40007000
 800ae94:	420e0044 	.word	0x420e0044

0800ae98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e0cc      	b.n	800b046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aeac:	4b68      	ldr	r3, [pc, #416]	; (800b050 <HAL_RCC_ClockConfig+0x1b8>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f003 030f 	and.w	r3, r3, #15
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d90c      	bls.n	800aed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeba:	4b65      	ldr	r3, [pc, #404]	; (800b050 <HAL_RCC_ClockConfig+0x1b8>)
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	b2d2      	uxtb	r2, r2
 800aec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aec2:	4b63      	ldr	r3, [pc, #396]	; (800b050 <HAL_RCC_ClockConfig+0x1b8>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 030f 	and.w	r3, r3, #15
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d001      	beq.n	800aed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	e0b8      	b.n	800b046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 0302 	and.w	r3, r3, #2
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d020      	beq.n	800af22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 0304 	and.w	r3, r3, #4
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d005      	beq.n	800aef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aeec:	4b59      	ldr	r3, [pc, #356]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	4a58      	ldr	r2, [pc, #352]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800aef2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800aef6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0308 	and.w	r3, r3, #8
 800af00:	2b00      	cmp	r3, #0
 800af02:	d005      	beq.n	800af10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af04:	4b53      	ldr	r3, [pc, #332]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	4a52      	ldr	r2, [pc, #328]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800af0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800af0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af10:	4b50      	ldr	r3, [pc, #320]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	494d      	ldr	r1, [pc, #308]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800af1e:	4313      	orrs	r3, r2
 800af20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d044      	beq.n	800afb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d107      	bne.n	800af46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af36:	4b47      	ldr	r3, [pc, #284]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d119      	bne.n	800af76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	e07f      	b.n	800b046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d003      	beq.n	800af56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800af52:	2b03      	cmp	r3, #3
 800af54:	d107      	bne.n	800af66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af56:	4b3f      	ldr	r3, [pc, #252]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d109      	bne.n	800af76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e06f      	b.n	800b046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af66:	4b3b      	ldr	r3, [pc, #236]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 0302 	and.w	r3, r3, #2
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e067      	b.n	800b046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800af76:	4b37      	ldr	r3, [pc, #220]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	f023 0203 	bic.w	r2, r3, #3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	4934      	ldr	r1, [pc, #208]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800af84:	4313      	orrs	r3, r2
 800af86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800af88:	f7fd fb08 	bl	800859c <HAL_GetTick>
 800af8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af8e:	e00a      	b.n	800afa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af90:	f7fd fb04 	bl	800859c <HAL_GetTick>
 800af94:	4602      	mov	r2, r0
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d901      	bls.n	800afa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800afa2:	2303      	movs	r3, #3
 800afa4:	e04f      	b.n	800b046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afa6:	4b2b      	ldr	r3, [pc, #172]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f003 020c 	and.w	r2, r3, #12
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d1eb      	bne.n	800af90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800afb8:	4b25      	ldr	r3, [pc, #148]	; (800b050 <HAL_RCC_ClockConfig+0x1b8>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 030f 	and.w	r3, r3, #15
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d20c      	bcs.n	800afe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afc6:	4b22      	ldr	r3, [pc, #136]	; (800b050 <HAL_RCC_ClockConfig+0x1b8>)
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	b2d2      	uxtb	r2, r2
 800afcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800afce:	4b20      	ldr	r3, [pc, #128]	; (800b050 <HAL_RCC_ClockConfig+0x1b8>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 030f 	and.w	r3, r3, #15
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d001      	beq.n	800afe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	e032      	b.n	800b046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 0304 	and.w	r3, r3, #4
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d008      	beq.n	800affe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800afec:	4b19      	ldr	r3, [pc, #100]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	4916      	ldr	r1, [pc, #88]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800affa:	4313      	orrs	r3, r2
 800affc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 0308 	and.w	r3, r3, #8
 800b006:	2b00      	cmp	r3, #0
 800b008:	d009      	beq.n	800b01e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b00a:	4b12      	ldr	r3, [pc, #72]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	490e      	ldr	r1, [pc, #56]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800b01a:	4313      	orrs	r3, r2
 800b01c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b01e:	f000 f855 	bl	800b0cc <HAL_RCC_GetSysClockFreq>
 800b022:	4602      	mov	r2, r0
 800b024:	4b0b      	ldr	r3, [pc, #44]	; (800b054 <HAL_RCC_ClockConfig+0x1bc>)
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	091b      	lsrs	r3, r3, #4
 800b02a:	f003 030f 	and.w	r3, r3, #15
 800b02e:	490a      	ldr	r1, [pc, #40]	; (800b058 <HAL_RCC_ClockConfig+0x1c0>)
 800b030:	5ccb      	ldrb	r3, [r1, r3]
 800b032:	fa22 f303 	lsr.w	r3, r2, r3
 800b036:	4a09      	ldr	r2, [pc, #36]	; (800b05c <HAL_RCC_ClockConfig+0x1c4>)
 800b038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b03a:	4b09      	ldr	r3, [pc, #36]	; (800b060 <HAL_RCC_ClockConfig+0x1c8>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fd fa68 	bl	8008514 <HAL_InitTick>

  return HAL_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	40023c00 	.word	0x40023c00
 800b054:	40023800 	.word	0x40023800
 800b058:	080165dc 	.word	0x080165dc
 800b05c:	20000030 	.word	0x20000030
 800b060:	2000003c 	.word	0x2000003c

0800b064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b064:	b480      	push	{r7}
 800b066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b068:	4b03      	ldr	r3, [pc, #12]	; (800b078 <HAL_RCC_GetHCLKFreq+0x14>)
 800b06a:	681b      	ldr	r3, [r3, #0]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	20000030 	.word	0x20000030

0800b07c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b080:	f7ff fff0 	bl	800b064 <HAL_RCC_GetHCLKFreq>
 800b084:	4602      	mov	r2, r0
 800b086:	4b05      	ldr	r3, [pc, #20]	; (800b09c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	0a9b      	lsrs	r3, r3, #10
 800b08c:	f003 0307 	and.w	r3, r3, #7
 800b090:	4903      	ldr	r1, [pc, #12]	; (800b0a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b092:	5ccb      	ldrb	r3, [r1, r3]
 800b094:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b098:	4618      	mov	r0, r3
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	40023800 	.word	0x40023800
 800b0a0:	080165ec 	.word	0x080165ec

0800b0a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b0a8:	f7ff ffdc 	bl	800b064 <HAL_RCC_GetHCLKFreq>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	0b5b      	lsrs	r3, r3, #13
 800b0b4:	f003 0307 	and.w	r3, r3, #7
 800b0b8:	4903      	ldr	r1, [pc, #12]	; (800b0c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0ba:	5ccb      	ldrb	r3, [r1, r3]
 800b0bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	40023800 	.word	0x40023800
 800b0c8:	080165ec 	.word	0x080165ec

0800b0cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0d0:	b0ae      	sub	sp, #184	; 0xb8
 800b0d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b0f2:	4bcb      	ldr	r3, [pc, #812]	; (800b420 <HAL_RCC_GetSysClockFreq+0x354>)
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f003 030c 	and.w	r3, r3, #12
 800b0fa:	2b0c      	cmp	r3, #12
 800b0fc:	f200 8206 	bhi.w	800b50c <HAL_RCC_GetSysClockFreq+0x440>
 800b100:	a201      	add	r2, pc, #4	; (adr r2, 800b108 <HAL_RCC_GetSysClockFreq+0x3c>)
 800b102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b106:	bf00      	nop
 800b108:	0800b13d 	.word	0x0800b13d
 800b10c:	0800b50d 	.word	0x0800b50d
 800b110:	0800b50d 	.word	0x0800b50d
 800b114:	0800b50d 	.word	0x0800b50d
 800b118:	0800b145 	.word	0x0800b145
 800b11c:	0800b50d 	.word	0x0800b50d
 800b120:	0800b50d 	.word	0x0800b50d
 800b124:	0800b50d 	.word	0x0800b50d
 800b128:	0800b14d 	.word	0x0800b14d
 800b12c:	0800b50d 	.word	0x0800b50d
 800b130:	0800b50d 	.word	0x0800b50d
 800b134:	0800b50d 	.word	0x0800b50d
 800b138:	0800b33d 	.word	0x0800b33d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b13c:	4bb9      	ldr	r3, [pc, #740]	; (800b424 <HAL_RCC_GetSysClockFreq+0x358>)
 800b13e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800b142:	e1e7      	b.n	800b514 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b144:	4bb8      	ldr	r3, [pc, #736]	; (800b428 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b146:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800b14a:	e1e3      	b.n	800b514 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b14c:	4bb4      	ldr	r3, [pc, #720]	; (800b420 <HAL_RCC_GetSysClockFreq+0x354>)
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b158:	4bb1      	ldr	r3, [pc, #708]	; (800b420 <HAL_RCC_GetSysClockFreq+0x354>)
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d071      	beq.n	800b248 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b164:	4bae      	ldr	r3, [pc, #696]	; (800b420 <HAL_RCC_GetSysClockFreq+0x354>)
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	099b      	lsrs	r3, r3, #6
 800b16a:	2200      	movs	r2, #0
 800b16c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b170:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800b174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b17c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b180:	2300      	movs	r3, #0
 800b182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b186:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b18a:	4622      	mov	r2, r4
 800b18c:	462b      	mov	r3, r5
 800b18e:	f04f 0000 	mov.w	r0, #0
 800b192:	f04f 0100 	mov.w	r1, #0
 800b196:	0159      	lsls	r1, r3, #5
 800b198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b19c:	0150      	lsls	r0, r2, #5
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	1a51      	subs	r1, r2, r1
 800b1a6:	6439      	str	r1, [r7, #64]	; 0x40
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	eb63 0301 	sbc.w	r3, r3, r1
 800b1ae:	647b      	str	r3, [r7, #68]	; 0x44
 800b1b0:	f04f 0200 	mov.w	r2, #0
 800b1b4:	f04f 0300 	mov.w	r3, #0
 800b1b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800b1bc:	4649      	mov	r1, r9
 800b1be:	018b      	lsls	r3, r1, #6
 800b1c0:	4641      	mov	r1, r8
 800b1c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b1c6:	4641      	mov	r1, r8
 800b1c8:	018a      	lsls	r2, r1, #6
 800b1ca:	4641      	mov	r1, r8
 800b1cc:	1a51      	subs	r1, r2, r1
 800b1ce:	63b9      	str	r1, [r7, #56]	; 0x38
 800b1d0:	4649      	mov	r1, r9
 800b1d2:	eb63 0301 	sbc.w	r3, r3, r1
 800b1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1d8:	f04f 0200 	mov.w	r2, #0
 800b1dc:	f04f 0300 	mov.w	r3, #0
 800b1e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800b1e4:	4649      	mov	r1, r9
 800b1e6:	00cb      	lsls	r3, r1, #3
 800b1e8:	4641      	mov	r1, r8
 800b1ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1ee:	4641      	mov	r1, r8
 800b1f0:	00ca      	lsls	r2, r1, #3
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	4622      	mov	r2, r4
 800b1fa:	189b      	adds	r3, r3, r2
 800b1fc:	633b      	str	r3, [r7, #48]	; 0x30
 800b1fe:	462b      	mov	r3, r5
 800b200:	460a      	mov	r2, r1
 800b202:	eb42 0303 	adc.w	r3, r2, r3
 800b206:	637b      	str	r3, [r7, #52]	; 0x34
 800b208:	f04f 0200 	mov.w	r2, #0
 800b20c:	f04f 0300 	mov.w	r3, #0
 800b210:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b214:	4629      	mov	r1, r5
 800b216:	024b      	lsls	r3, r1, #9
 800b218:	4621      	mov	r1, r4
 800b21a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b21e:	4621      	mov	r1, r4
 800b220:	024a      	lsls	r2, r1, #9
 800b222:	4610      	mov	r0, r2
 800b224:	4619      	mov	r1, r3
 800b226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b22a:	2200      	movs	r2, #0
 800b22c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b230:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b234:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b238:	f7f5 fd76 	bl	8000d28 <__aeabi_uldivmod>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4613      	mov	r3, r2
 800b242:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b246:	e067      	b.n	800b318 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b248:	4b75      	ldr	r3, [pc, #468]	; (800b420 <HAL_RCC_GetSysClockFreq+0x354>)
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	099b      	lsrs	r3, r3, #6
 800b24e:	2200      	movs	r2, #0
 800b250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b254:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800b258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b25c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b260:	67bb      	str	r3, [r7, #120]	; 0x78
 800b262:	2300      	movs	r3, #0
 800b264:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b266:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800b26a:	4622      	mov	r2, r4
 800b26c:	462b      	mov	r3, r5
 800b26e:	f04f 0000 	mov.w	r0, #0
 800b272:	f04f 0100 	mov.w	r1, #0
 800b276:	0159      	lsls	r1, r3, #5
 800b278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b27c:	0150      	lsls	r0, r2, #5
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	4621      	mov	r1, r4
 800b284:	1a51      	subs	r1, r2, r1
 800b286:	62b9      	str	r1, [r7, #40]	; 0x28
 800b288:	4629      	mov	r1, r5
 800b28a:	eb63 0301 	sbc.w	r3, r3, r1
 800b28e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b290:	f04f 0200 	mov.w	r2, #0
 800b294:	f04f 0300 	mov.w	r3, #0
 800b298:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800b29c:	4649      	mov	r1, r9
 800b29e:	018b      	lsls	r3, r1, #6
 800b2a0:	4641      	mov	r1, r8
 800b2a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b2a6:	4641      	mov	r1, r8
 800b2a8:	018a      	lsls	r2, r1, #6
 800b2aa:	4641      	mov	r1, r8
 800b2ac:	ebb2 0a01 	subs.w	sl, r2, r1
 800b2b0:	4649      	mov	r1, r9
 800b2b2:	eb63 0b01 	sbc.w	fp, r3, r1
 800b2b6:	f04f 0200 	mov.w	r2, #0
 800b2ba:	f04f 0300 	mov.w	r3, #0
 800b2be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b2c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b2c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b2ca:	4692      	mov	sl, r2
 800b2cc:	469b      	mov	fp, r3
 800b2ce:	4623      	mov	r3, r4
 800b2d0:	eb1a 0303 	adds.w	r3, sl, r3
 800b2d4:	623b      	str	r3, [r7, #32]
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	eb4b 0303 	adc.w	r3, fp, r3
 800b2dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b2de:	f04f 0200 	mov.w	r2, #0
 800b2e2:	f04f 0300 	mov.w	r3, #0
 800b2e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	028b      	lsls	r3, r1, #10
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	028a      	lsls	r2, r1, #10
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b300:	2200      	movs	r2, #0
 800b302:	673b      	str	r3, [r7, #112]	; 0x70
 800b304:	677a      	str	r2, [r7, #116]	; 0x74
 800b306:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800b30a:	f7f5 fd0d 	bl	8000d28 <__aeabi_uldivmod>
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	4613      	mov	r3, r2
 800b314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b318:	4b41      	ldr	r3, [pc, #260]	; (800b420 <HAL_RCC_GetSysClockFreq+0x354>)
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	0c1b      	lsrs	r3, r3, #16
 800b31e:	f003 0303 	and.w	r3, r3, #3
 800b322:	3301      	adds	r3, #1
 800b324:	005b      	lsls	r3, r3, #1
 800b326:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800b32a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b32e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b332:	fbb2 f3f3 	udiv	r3, r2, r3
 800b336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800b33a:	e0eb      	b.n	800b514 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b33c:	4b38      	ldr	r3, [pc, #224]	; (800b420 <HAL_RCC_GetSysClockFreq+0x354>)
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b344:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b348:	4b35      	ldr	r3, [pc, #212]	; (800b420 <HAL_RCC_GetSysClockFreq+0x354>)
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b350:	2b00      	cmp	r3, #0
 800b352:	d06b      	beq.n	800b42c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b354:	4b32      	ldr	r3, [pc, #200]	; (800b420 <HAL_RCC_GetSysClockFreq+0x354>)
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	099b      	lsrs	r3, r3, #6
 800b35a:	2200      	movs	r2, #0
 800b35c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b35e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b360:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b366:	663b      	str	r3, [r7, #96]	; 0x60
 800b368:	2300      	movs	r3, #0
 800b36a:	667b      	str	r3, [r7, #100]	; 0x64
 800b36c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800b370:	4622      	mov	r2, r4
 800b372:	462b      	mov	r3, r5
 800b374:	f04f 0000 	mov.w	r0, #0
 800b378:	f04f 0100 	mov.w	r1, #0
 800b37c:	0159      	lsls	r1, r3, #5
 800b37e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b382:	0150      	lsls	r0, r2, #5
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4621      	mov	r1, r4
 800b38a:	1a51      	subs	r1, r2, r1
 800b38c:	61b9      	str	r1, [r7, #24]
 800b38e:	4629      	mov	r1, r5
 800b390:	eb63 0301 	sbc.w	r3, r3, r1
 800b394:	61fb      	str	r3, [r7, #28]
 800b396:	f04f 0200 	mov.w	r2, #0
 800b39a:	f04f 0300 	mov.w	r3, #0
 800b39e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800b3a2:	4659      	mov	r1, fp
 800b3a4:	018b      	lsls	r3, r1, #6
 800b3a6:	4651      	mov	r1, sl
 800b3a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b3ac:	4651      	mov	r1, sl
 800b3ae:	018a      	lsls	r2, r1, #6
 800b3b0:	4651      	mov	r1, sl
 800b3b2:	ebb2 0801 	subs.w	r8, r2, r1
 800b3b6:	4659      	mov	r1, fp
 800b3b8:	eb63 0901 	sbc.w	r9, r3, r1
 800b3bc:	f04f 0200 	mov.w	r2, #0
 800b3c0:	f04f 0300 	mov.w	r3, #0
 800b3c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b3c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b3cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b3d0:	4690      	mov	r8, r2
 800b3d2:	4699      	mov	r9, r3
 800b3d4:	4623      	mov	r3, r4
 800b3d6:	eb18 0303 	adds.w	r3, r8, r3
 800b3da:	613b      	str	r3, [r7, #16]
 800b3dc:	462b      	mov	r3, r5
 800b3de:	eb49 0303 	adc.w	r3, r9, r3
 800b3e2:	617b      	str	r3, [r7, #20]
 800b3e4:	f04f 0200 	mov.w	r2, #0
 800b3e8:	f04f 0300 	mov.w	r3, #0
 800b3ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	024b      	lsls	r3, r1, #9
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	024a      	lsls	r2, r1, #9
 800b3fe:	4610      	mov	r0, r2
 800b400:	4619      	mov	r1, r3
 800b402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b406:	2200      	movs	r2, #0
 800b408:	65bb      	str	r3, [r7, #88]	; 0x58
 800b40a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b40c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b410:	f7f5 fc8a 	bl	8000d28 <__aeabi_uldivmod>
 800b414:	4602      	mov	r2, r0
 800b416:	460b      	mov	r3, r1
 800b418:	4613      	mov	r3, r2
 800b41a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b41e:	e065      	b.n	800b4ec <HAL_RCC_GetSysClockFreq+0x420>
 800b420:	40023800 	.word	0x40023800
 800b424:	00f42400 	.word	0x00f42400
 800b428:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b42c:	4b3d      	ldr	r3, [pc, #244]	; (800b524 <HAL_RCC_GetSysClockFreq+0x458>)
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	099b      	lsrs	r3, r3, #6
 800b432:	2200      	movs	r2, #0
 800b434:	4618      	mov	r0, r3
 800b436:	4611      	mov	r1, r2
 800b438:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b43c:	653b      	str	r3, [r7, #80]	; 0x50
 800b43e:	2300      	movs	r3, #0
 800b440:	657b      	str	r3, [r7, #84]	; 0x54
 800b442:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800b446:	4642      	mov	r2, r8
 800b448:	464b      	mov	r3, r9
 800b44a:	f04f 0000 	mov.w	r0, #0
 800b44e:	f04f 0100 	mov.w	r1, #0
 800b452:	0159      	lsls	r1, r3, #5
 800b454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b458:	0150      	lsls	r0, r2, #5
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	4641      	mov	r1, r8
 800b460:	1a51      	subs	r1, r2, r1
 800b462:	60b9      	str	r1, [r7, #8]
 800b464:	4649      	mov	r1, r9
 800b466:	eb63 0301 	sbc.w	r3, r3, r1
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	f04f 0200 	mov.w	r2, #0
 800b470:	f04f 0300 	mov.w	r3, #0
 800b474:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800b478:	4659      	mov	r1, fp
 800b47a:	018b      	lsls	r3, r1, #6
 800b47c:	4651      	mov	r1, sl
 800b47e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b482:	4651      	mov	r1, sl
 800b484:	018a      	lsls	r2, r1, #6
 800b486:	4651      	mov	r1, sl
 800b488:	1a54      	subs	r4, r2, r1
 800b48a:	4659      	mov	r1, fp
 800b48c:	eb63 0501 	sbc.w	r5, r3, r1
 800b490:	f04f 0200 	mov.w	r2, #0
 800b494:	f04f 0300 	mov.w	r3, #0
 800b498:	00eb      	lsls	r3, r5, #3
 800b49a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b49e:	00e2      	lsls	r2, r4, #3
 800b4a0:	4614      	mov	r4, r2
 800b4a2:	461d      	mov	r5, r3
 800b4a4:	4643      	mov	r3, r8
 800b4a6:	18e3      	adds	r3, r4, r3
 800b4a8:	603b      	str	r3, [r7, #0]
 800b4aa:	464b      	mov	r3, r9
 800b4ac:	eb45 0303 	adc.w	r3, r5, r3
 800b4b0:	607b      	str	r3, [r7, #4]
 800b4b2:	f04f 0200 	mov.w	r2, #0
 800b4b6:	f04f 0300 	mov.w	r3, #0
 800b4ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b4be:	4629      	mov	r1, r5
 800b4c0:	028b      	lsls	r3, r1, #10
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	028a      	lsls	r2, r1, #10
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b4da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b4de:	f7f5 fc23 	bl	8000d28 <__aeabi_uldivmod>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b4ec:	4b0d      	ldr	r3, [pc, #52]	; (800b524 <HAL_RCC_GetSysClockFreq+0x458>)
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	0f1b      	lsrs	r3, r3, #28
 800b4f2:	f003 0307 	and.w	r3, r3, #7
 800b4f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800b4fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b4fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b502:	fbb2 f3f3 	udiv	r3, r2, r3
 800b506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800b50a:	e003      	b.n	800b514 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b50c:	4b06      	ldr	r3, [pc, #24]	; (800b528 <HAL_RCC_GetSysClockFreq+0x45c>)
 800b50e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800b512:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	37b8      	adds	r7, #184	; 0xb8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b522:	bf00      	nop
 800b524:	40023800 	.word	0x40023800
 800b528:	00f42400 	.word	0x00f42400

0800b52c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e28d      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 0301 	and.w	r3, r3, #1
 800b546:	2b00      	cmp	r3, #0
 800b548:	f000 8083 	beq.w	800b652 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b54c:	4b94      	ldr	r3, [pc, #592]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	f003 030c 	and.w	r3, r3, #12
 800b554:	2b04      	cmp	r3, #4
 800b556:	d019      	beq.n	800b58c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b558:	4b91      	ldr	r3, [pc, #580]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b560:	2b08      	cmp	r3, #8
 800b562:	d106      	bne.n	800b572 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b564:	4b8e      	ldr	r3, [pc, #568]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b56c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b570:	d00c      	beq.n	800b58c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b572:	4b8b      	ldr	r3, [pc, #556]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b57a:	2b0c      	cmp	r3, #12
 800b57c:	d112      	bne.n	800b5a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b57e:	4b88      	ldr	r3, [pc, #544]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b58a:	d10b      	bne.n	800b5a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b58c:	4b84      	ldr	r3, [pc, #528]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b594:	2b00      	cmp	r3, #0
 800b596:	d05b      	beq.n	800b650 <HAL_RCC_OscConfig+0x124>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d157      	bne.n	800b650 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e25a      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5ac:	d106      	bne.n	800b5bc <HAL_RCC_OscConfig+0x90>
 800b5ae:	4b7c      	ldr	r3, [pc, #496]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a7b      	ldr	r2, [pc, #492]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b5b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5b8:	6013      	str	r3, [r2, #0]
 800b5ba:	e01d      	b.n	800b5f8 <HAL_RCC_OscConfig+0xcc>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5c4:	d10c      	bne.n	800b5e0 <HAL_RCC_OscConfig+0xb4>
 800b5c6:	4b76      	ldr	r3, [pc, #472]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a75      	ldr	r2, [pc, #468]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b5cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b5d0:	6013      	str	r3, [r2, #0]
 800b5d2:	4b73      	ldr	r3, [pc, #460]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4a72      	ldr	r2, [pc, #456]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b5d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5dc:	6013      	str	r3, [r2, #0]
 800b5de:	e00b      	b.n	800b5f8 <HAL_RCC_OscConfig+0xcc>
 800b5e0:	4b6f      	ldr	r3, [pc, #444]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a6e      	ldr	r2, [pc, #440]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b5e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5ea:	6013      	str	r3, [r2, #0]
 800b5ec:	4b6c      	ldr	r3, [pc, #432]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a6b      	ldr	r2, [pc, #428]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b5f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d013      	beq.n	800b628 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b600:	f7fc ffcc 	bl	800859c <HAL_GetTick>
 800b604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b606:	e008      	b.n	800b61a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b608:	f7fc ffc8 	bl	800859c <HAL_GetTick>
 800b60c:	4602      	mov	r2, r0
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	2b64      	cmp	r3, #100	; 0x64
 800b614:	d901      	bls.n	800b61a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b616:	2303      	movs	r3, #3
 800b618:	e21f      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b61a:	4b61      	ldr	r3, [pc, #388]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b622:	2b00      	cmp	r3, #0
 800b624:	d0f0      	beq.n	800b608 <HAL_RCC_OscConfig+0xdc>
 800b626:	e014      	b.n	800b652 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b628:	f7fc ffb8 	bl	800859c <HAL_GetTick>
 800b62c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b62e:	e008      	b.n	800b642 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b630:	f7fc ffb4 	bl	800859c <HAL_GetTick>
 800b634:	4602      	mov	r2, r0
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	2b64      	cmp	r3, #100	; 0x64
 800b63c:	d901      	bls.n	800b642 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800b63e:	2303      	movs	r3, #3
 800b640:	e20b      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b642:	4b57      	ldr	r3, [pc, #348]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1f0      	bne.n	800b630 <HAL_RCC_OscConfig+0x104>
 800b64e:	e000      	b.n	800b652 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f003 0302 	and.w	r3, r3, #2
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d06f      	beq.n	800b73e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b65e:	4b50      	ldr	r3, [pc, #320]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	f003 030c 	and.w	r3, r3, #12
 800b666:	2b00      	cmp	r3, #0
 800b668:	d017      	beq.n	800b69a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b66a:	4b4d      	ldr	r3, [pc, #308]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b672:	2b08      	cmp	r3, #8
 800b674:	d105      	bne.n	800b682 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b676:	4b4a      	ldr	r3, [pc, #296]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00b      	beq.n	800b69a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b682:	4b47      	ldr	r3, [pc, #284]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b68a:	2b0c      	cmp	r3, #12
 800b68c:	d11c      	bne.n	800b6c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b68e:	4b44      	ldr	r3, [pc, #272]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b696:	2b00      	cmp	r3, #0
 800b698:	d116      	bne.n	800b6c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b69a:	4b41      	ldr	r3, [pc, #260]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f003 0302 	and.w	r3, r3, #2
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d005      	beq.n	800b6b2 <HAL_RCC_OscConfig+0x186>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d001      	beq.n	800b6b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e1d3      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6b2:	4b3b      	ldr	r3, [pc, #236]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	00db      	lsls	r3, r3, #3
 800b6c0:	4937      	ldr	r1, [pc, #220]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b6c6:	e03a      	b.n	800b73e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d020      	beq.n	800b712 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b6d0:	4b34      	ldr	r3, [pc, #208]	; (800b7a4 <HAL_RCC_OscConfig+0x278>)
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6d6:	f7fc ff61 	bl	800859c <HAL_GetTick>
 800b6da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6dc:	e008      	b.n	800b6f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b6de:	f7fc ff5d 	bl	800859c <HAL_GetTick>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	1ad3      	subs	r3, r2, r3
 800b6e8:	2b02      	cmp	r3, #2
 800b6ea:	d901      	bls.n	800b6f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	e1b4      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6f0:	4b2b      	ldr	r3, [pc, #172]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f003 0302 	and.w	r3, r3, #2
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d0f0      	beq.n	800b6de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6fc:	4b28      	ldr	r3, [pc, #160]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	00db      	lsls	r3, r3, #3
 800b70a:	4925      	ldr	r1, [pc, #148]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b70c:	4313      	orrs	r3, r2
 800b70e:	600b      	str	r3, [r1, #0]
 800b710:	e015      	b.n	800b73e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b712:	4b24      	ldr	r3, [pc, #144]	; (800b7a4 <HAL_RCC_OscConfig+0x278>)
 800b714:	2200      	movs	r2, #0
 800b716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b718:	f7fc ff40 	bl	800859c <HAL_GetTick>
 800b71c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b71e:	e008      	b.n	800b732 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b720:	f7fc ff3c 	bl	800859c <HAL_GetTick>
 800b724:	4602      	mov	r2, r0
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d901      	bls.n	800b732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b72e:	2303      	movs	r3, #3
 800b730:	e193      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b732:	4b1b      	ldr	r3, [pc, #108]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1f0      	bne.n	800b720 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f003 0308 	and.w	r3, r3, #8
 800b746:	2b00      	cmp	r3, #0
 800b748:	d036      	beq.n	800b7b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	695b      	ldr	r3, [r3, #20]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d016      	beq.n	800b780 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b752:	4b15      	ldr	r3, [pc, #84]	; (800b7a8 <HAL_RCC_OscConfig+0x27c>)
 800b754:	2201      	movs	r2, #1
 800b756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b758:	f7fc ff20 	bl	800859c <HAL_GetTick>
 800b75c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b75e:	e008      	b.n	800b772 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b760:	f7fc ff1c 	bl	800859c <HAL_GetTick>
 800b764:	4602      	mov	r2, r0
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	2b02      	cmp	r3, #2
 800b76c:	d901      	bls.n	800b772 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b76e:	2303      	movs	r3, #3
 800b770:	e173      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b772:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <HAL_RCC_OscConfig+0x274>)
 800b774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b776:	f003 0302 	and.w	r3, r3, #2
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d0f0      	beq.n	800b760 <HAL_RCC_OscConfig+0x234>
 800b77e:	e01b      	b.n	800b7b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b780:	4b09      	ldr	r3, [pc, #36]	; (800b7a8 <HAL_RCC_OscConfig+0x27c>)
 800b782:	2200      	movs	r2, #0
 800b784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b786:	f7fc ff09 	bl	800859c <HAL_GetTick>
 800b78a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b78c:	e00e      	b.n	800b7ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b78e:	f7fc ff05 	bl	800859c <HAL_GetTick>
 800b792:	4602      	mov	r2, r0
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	2b02      	cmp	r3, #2
 800b79a:	d907      	bls.n	800b7ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b79c:	2303      	movs	r3, #3
 800b79e:	e15c      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
 800b7a0:	40023800 	.word	0x40023800
 800b7a4:	42470000 	.word	0x42470000
 800b7a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b7ac:	4b8a      	ldr	r3, [pc, #552]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b7ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7b0:	f003 0302 	and.w	r3, r3, #2
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1ea      	bne.n	800b78e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 0304 	and.w	r3, r3, #4
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f000 8097 	beq.w	800b8f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b7ca:	4b83      	ldr	r3, [pc, #524]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10f      	bne.n	800b7f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	60bb      	str	r3, [r7, #8]
 800b7da:	4b7f      	ldr	r3, [pc, #508]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7de:	4a7e      	ldr	r2, [pc, #504]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b7e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7e4:	6413      	str	r3, [r2, #64]	; 0x40
 800b7e6:	4b7c      	ldr	r3, [pc, #496]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7ee:	60bb      	str	r3, [r7, #8]
 800b7f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b7f6:	4b79      	ldr	r3, [pc, #484]	; (800b9dc <HAL_RCC_OscConfig+0x4b0>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d118      	bne.n	800b834 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b802:	4b76      	ldr	r3, [pc, #472]	; (800b9dc <HAL_RCC_OscConfig+0x4b0>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a75      	ldr	r2, [pc, #468]	; (800b9dc <HAL_RCC_OscConfig+0x4b0>)
 800b808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b80c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b80e:	f7fc fec5 	bl	800859c <HAL_GetTick>
 800b812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b814:	e008      	b.n	800b828 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b816:	f7fc fec1 	bl	800859c <HAL_GetTick>
 800b81a:	4602      	mov	r2, r0
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	2b02      	cmp	r3, #2
 800b822:	d901      	bls.n	800b828 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b824:	2303      	movs	r3, #3
 800b826:	e118      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b828:	4b6c      	ldr	r3, [pc, #432]	; (800b9dc <HAL_RCC_OscConfig+0x4b0>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b830:	2b00      	cmp	r3, #0
 800b832:	d0f0      	beq.n	800b816 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d106      	bne.n	800b84a <HAL_RCC_OscConfig+0x31e>
 800b83c:	4b66      	ldr	r3, [pc, #408]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b840:	4a65      	ldr	r2, [pc, #404]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b842:	f043 0301 	orr.w	r3, r3, #1
 800b846:	6713      	str	r3, [r2, #112]	; 0x70
 800b848:	e01c      	b.n	800b884 <HAL_RCC_OscConfig+0x358>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	2b05      	cmp	r3, #5
 800b850:	d10c      	bne.n	800b86c <HAL_RCC_OscConfig+0x340>
 800b852:	4b61      	ldr	r3, [pc, #388]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b856:	4a60      	ldr	r2, [pc, #384]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b858:	f043 0304 	orr.w	r3, r3, #4
 800b85c:	6713      	str	r3, [r2, #112]	; 0x70
 800b85e:	4b5e      	ldr	r3, [pc, #376]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b862:	4a5d      	ldr	r2, [pc, #372]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b864:	f043 0301 	orr.w	r3, r3, #1
 800b868:	6713      	str	r3, [r2, #112]	; 0x70
 800b86a:	e00b      	b.n	800b884 <HAL_RCC_OscConfig+0x358>
 800b86c:	4b5a      	ldr	r3, [pc, #360]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b86e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b870:	4a59      	ldr	r2, [pc, #356]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b872:	f023 0301 	bic.w	r3, r3, #1
 800b876:	6713      	str	r3, [r2, #112]	; 0x70
 800b878:	4b57      	ldr	r3, [pc, #348]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b87a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b87c:	4a56      	ldr	r2, [pc, #344]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b87e:	f023 0304 	bic.w	r3, r3, #4
 800b882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d015      	beq.n	800b8b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b88c:	f7fc fe86 	bl	800859c <HAL_GetTick>
 800b890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b892:	e00a      	b.n	800b8aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b894:	f7fc fe82 	bl	800859c <HAL_GetTick>
 800b898:	4602      	mov	r2, r0
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d901      	bls.n	800b8aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	e0d7      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8aa:	4b4b      	ldr	r3, [pc, #300]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ae:	f003 0302 	and.w	r3, r3, #2
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d0ee      	beq.n	800b894 <HAL_RCC_OscConfig+0x368>
 800b8b6:	e014      	b.n	800b8e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8b8:	f7fc fe70 	bl	800859c <HAL_GetTick>
 800b8bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8be:	e00a      	b.n	800b8d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b8c0:	f7fc fe6c 	bl	800859c <HAL_GetTick>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	1ad3      	subs	r3, r2, r3
 800b8ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d901      	bls.n	800b8d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b8d2:	2303      	movs	r3, #3
 800b8d4:	e0c1      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8d6:	4b40      	ldr	r3, [pc, #256]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8da:	f003 0302 	and.w	r3, r3, #2
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1ee      	bne.n	800b8c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d105      	bne.n	800b8f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8e8:	4b3b      	ldr	r3, [pc, #236]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ec:	4a3a      	ldr	r2, [pc, #232]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b8ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	699b      	ldr	r3, [r3, #24]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f000 80ad 	beq.w	800ba58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b8fe:	4b36      	ldr	r3, [pc, #216]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	f003 030c 	and.w	r3, r3, #12
 800b906:	2b08      	cmp	r3, #8
 800b908:	d060      	beq.n	800b9cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d145      	bne.n	800b99e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b912:	4b33      	ldr	r3, [pc, #204]	; (800b9e0 <HAL_RCC_OscConfig+0x4b4>)
 800b914:	2200      	movs	r2, #0
 800b916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b918:	f7fc fe40 	bl	800859c <HAL_GetTick>
 800b91c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b91e:	e008      	b.n	800b932 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b920:	f7fc fe3c 	bl	800859c <HAL_GetTick>
 800b924:	4602      	mov	r2, r0
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d901      	bls.n	800b932 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b92e:	2303      	movs	r3, #3
 800b930:	e093      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b932:	4b29      	ldr	r3, [pc, #164]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1f0      	bne.n	800b920 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	69da      	ldr	r2, [r3, #28]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a1b      	ldr	r3, [r3, #32]
 800b946:	431a      	orrs	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94c:	019b      	lsls	r3, r3, #6
 800b94e:	431a      	orrs	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b954:	085b      	lsrs	r3, r3, #1
 800b956:	3b01      	subs	r3, #1
 800b958:	041b      	lsls	r3, r3, #16
 800b95a:	431a      	orrs	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b960:	061b      	lsls	r3, r3, #24
 800b962:	431a      	orrs	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b968:	071b      	lsls	r3, r3, #28
 800b96a:	491b      	ldr	r1, [pc, #108]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b96c:	4313      	orrs	r3, r2
 800b96e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b970:	4b1b      	ldr	r3, [pc, #108]	; (800b9e0 <HAL_RCC_OscConfig+0x4b4>)
 800b972:	2201      	movs	r2, #1
 800b974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b976:	f7fc fe11 	bl	800859c <HAL_GetTick>
 800b97a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b97c:	e008      	b.n	800b990 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b97e:	f7fc fe0d 	bl	800859c <HAL_GetTick>
 800b982:	4602      	mov	r2, r0
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d901      	bls.n	800b990 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b98c:	2303      	movs	r3, #3
 800b98e:	e064      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b990:	4b11      	ldr	r3, [pc, #68]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d0f0      	beq.n	800b97e <HAL_RCC_OscConfig+0x452>
 800b99c:	e05c      	b.n	800ba58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b99e:	4b10      	ldr	r3, [pc, #64]	; (800b9e0 <HAL_RCC_OscConfig+0x4b4>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9a4:	f7fc fdfa 	bl	800859c <HAL_GetTick>
 800b9a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9aa:	e008      	b.n	800b9be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9ac:	f7fc fdf6 	bl	800859c <HAL_GetTick>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	1ad3      	subs	r3, r2, r3
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d901      	bls.n	800b9be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	e04d      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9be:	4b06      	ldr	r3, [pc, #24]	; (800b9d8 <HAL_RCC_OscConfig+0x4ac>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1f0      	bne.n	800b9ac <HAL_RCC_OscConfig+0x480>
 800b9ca:	e045      	b.n	800ba58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d107      	bne.n	800b9e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e040      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
 800b9d8:	40023800 	.word	0x40023800
 800b9dc:	40007000 	.word	0x40007000
 800b9e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b9e4:	4b1f      	ldr	r3, [pc, #124]	; (800ba64 <HAL_RCC_OscConfig+0x538>)
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	699b      	ldr	r3, [r3, #24]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d030      	beq.n	800ba54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d129      	bne.n	800ba54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d122      	bne.n	800ba54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ba14:	4013      	ands	r3, r2
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ba1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d119      	bne.n	800ba54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2a:	085b      	lsrs	r3, r3, #1
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d10f      	bne.n	800ba54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d107      	bne.n	800ba54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d001      	beq.n	800ba58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	e000      	b.n	800ba5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3718      	adds	r7, #24
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	40023800 	.word	0x40023800

0800ba68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d101      	bne.n	800ba7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	e07b      	b.n	800bb72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d108      	bne.n	800ba94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba8a:	d009      	beq.n	800baa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	61da      	str	r2, [r3, #28]
 800ba92:	e005      	b.n	800baa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800baac:	b2db      	uxtb	r3, r3
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d106      	bne.n	800bac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f7f9 ffa8 	bl	8005a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2202      	movs	r2, #2
 800bac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bad6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bae8:	431a      	orrs	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baf2:	431a      	orrs	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	f003 0302 	and.w	r3, r3, #2
 800bafc:	431a      	orrs	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	f003 0301 	and.w	r3, r3, #1
 800bb06:	431a      	orrs	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb10:	431a      	orrs	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	69db      	ldr	r3, [r3, #28]
 800bb16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb1a:	431a      	orrs	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a1b      	ldr	r3, [r3, #32]
 800bb20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb24:	ea42 0103 	orr.w	r1, r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	430a      	orrs	r2, r1
 800bb36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	699b      	ldr	r3, [r3, #24]
 800bb3c:	0c1b      	lsrs	r3, r3, #16
 800bb3e:	f003 0104 	and.w	r1, r3, #4
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb46:	f003 0210 	and.w	r2, r3, #16
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	430a      	orrs	r2, r1
 800bb50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	69da      	ldr	r2, [r3, #28]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b088      	sub	sp, #32
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	60f8      	str	r0, [r7, #12]
 800bb82:	60b9      	str	r1, [r7, #8]
 800bb84:	603b      	str	r3, [r7, #0]
 800bb86:	4613      	mov	r3, r2
 800bb88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d101      	bne.n	800bb9c <HAL_SPI_Transmit+0x22>
 800bb98:	2302      	movs	r3, #2
 800bb9a:	e126      	b.n	800bdea <HAL_SPI_Transmit+0x270>
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bba4:	f7fc fcfa 	bl	800859c <HAL_GetTick>
 800bba8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bbaa:	88fb      	ldrh	r3, [r7, #6]
 800bbac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d002      	beq.n	800bbc0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bbba:	2302      	movs	r3, #2
 800bbbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bbbe:	e10b      	b.n	800bdd8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d002      	beq.n	800bbcc <HAL_SPI_Transmit+0x52>
 800bbc6:	88fb      	ldrh	r3, [r7, #6]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d102      	bne.n	800bbd2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bbd0:	e102      	b.n	800bdd8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2203      	movs	r2, #3
 800bbd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	88fa      	ldrh	r2, [r7, #6]
 800bbea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	88fa      	ldrh	r2, [r7, #6]
 800bbf0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc18:	d10f      	bne.n	800bc3a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc44:	2b40      	cmp	r3, #64	; 0x40
 800bc46:	d007      	beq.n	800bc58 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc60:	d14b      	bne.n	800bcfa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <HAL_SPI_Transmit+0xf6>
 800bc6a:	8afb      	ldrh	r3, [r7, #22]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d13e      	bne.n	800bcee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc74:	881a      	ldrh	r2, [r3, #0]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc80:	1c9a      	adds	r2, r3, #2
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bc94:	e02b      	b.n	800bcee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	f003 0302 	and.w	r3, r3, #2
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d112      	bne.n	800bcca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca8:	881a      	ldrh	r2, [r3, #0]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb4:	1c9a      	adds	r2, r3, #2
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	86da      	strh	r2, [r3, #54]	; 0x36
 800bcc8:	e011      	b.n	800bcee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bcca:	f7fc fc67 	bl	800859c <HAL_GetTick>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d803      	bhi.n	800bce2 <HAL_SPI_Transmit+0x168>
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bce0:	d102      	bne.n	800bce8 <HAL_SPI_Transmit+0x16e>
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d102      	bne.n	800bcee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800bce8:	2303      	movs	r3, #3
 800bcea:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bcec:	e074      	b.n	800bdd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1ce      	bne.n	800bc96 <HAL_SPI_Transmit+0x11c>
 800bcf8:	e04c      	b.n	800bd94 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d002      	beq.n	800bd08 <HAL_SPI_Transmit+0x18e>
 800bd02:	8afb      	ldrh	r3, [r7, #22]
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d140      	bne.n	800bd8a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	330c      	adds	r3, #12
 800bd12:	7812      	ldrb	r2, [r2, #0]
 800bd14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1a:	1c5a      	adds	r2, r3, #1
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	3b01      	subs	r3, #1
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bd2e:	e02c      	b.n	800bd8a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	f003 0302 	and.w	r3, r3, #2
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d113      	bne.n	800bd66 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	330c      	adds	r3, #12
 800bd48:	7812      	ldrb	r2, [r2, #0]
 800bd4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd50:	1c5a      	adds	r2, r3, #1
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	86da      	strh	r2, [r3, #54]	; 0x36
 800bd64:	e011      	b.n	800bd8a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd66:	f7fc fc19 	bl	800859c <HAL_GetTick>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	683a      	ldr	r2, [r7, #0]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d803      	bhi.n	800bd7e <HAL_SPI_Transmit+0x204>
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd7c:	d102      	bne.n	800bd84 <HAL_SPI_Transmit+0x20a>
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d102      	bne.n	800bd8a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800bd84:	2303      	movs	r3, #3
 800bd86:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bd88:	e026      	b.n	800bdd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1cd      	bne.n	800bd30 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bd94:	69ba      	ldr	r2, [r7, #24]
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 fafd 	bl	800c398 <SPI_EndRxTxTransaction>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d002      	beq.n	800bdaa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2220      	movs	r2, #32
 800bda8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10a      	bne.n	800bdc8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	613b      	str	r3, [r7, #16]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	613b      	str	r3, [r7, #16]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	613b      	str	r3, [r7, #16]
 800bdc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	77fb      	strb	r3, [r7, #31]
 800bdd4:	e000      	b.n	800bdd8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800bdd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bde8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3720      	adds	r7, #32
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
	...

0800bdf4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	4613      	mov	r3, r2
 800be00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be02:	2300      	movs	r3, #0
 800be04:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d101      	bne.n	800be14 <HAL_SPI_Transmit_DMA+0x20>
 800be10:	2302      	movs	r3, #2
 800be12:	e09b      	b.n	800bf4c <HAL_SPI_Transmit_DMA+0x158>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2b01      	cmp	r3, #1
 800be26:	d002      	beq.n	800be2e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800be28:	2302      	movs	r3, #2
 800be2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800be2c:	e089      	b.n	800bf42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d002      	beq.n	800be3a <HAL_SPI_Transmit_DMA+0x46>
 800be34:	88fb      	ldrh	r3, [r7, #6]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d102      	bne.n	800be40 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800be3e:	e080      	b.n	800bf42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2203      	movs	r2, #3
 800be44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2200      	movs	r2, #0
 800be4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	88fa      	ldrh	r2, [r7, #6]
 800be58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	88fa      	ldrh	r2, [r7, #6]
 800be5e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2200      	movs	r2, #0
 800be6a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be86:	d10f      	bne.n	800bea8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bea6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800beac:	4a29      	ldr	r2, [pc, #164]	; (800bf54 <HAL_SPI_Transmit_DMA+0x160>)
 800beae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800beb4:	4a28      	ldr	r2, [pc, #160]	; (800bf58 <HAL_SPI_Transmit_DMA+0x164>)
 800beb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bebc:	4a27      	ldr	r2, [pc, #156]	; (800bf5c <HAL_SPI_Transmit_DMA+0x168>)
 800bebe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bec4:	2200      	movs	r2, #0
 800bec6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed0:	4619      	mov	r1, r3
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	330c      	adds	r3, #12
 800bed8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bede:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bee0:	f7fd f950 	bl	8009184 <HAL_DMA_Start_IT>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00c      	beq.n	800bf04 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beee:	f043 0210 	orr.w	r2, r3, #16
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2201      	movs	r2, #1
 800befe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800bf02:	e01e      	b.n	800bf42 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf0e:	2b40      	cmp	r3, #64	; 0x40
 800bf10:	d007      	beq.n	800bf22 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf20:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	685a      	ldr	r2, [r3, #4]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f042 0220 	orr.w	r2, r2, #32
 800bf30:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f042 0202 	orr.w	r2, r2, #2
 800bf40:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3718      	adds	r7, #24
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	0800c205 	.word	0x0800c205
 800bf58:	0800c15d 	.word	0x0800c15d
 800bf5c:	0800c221 	.word	0x0800c221

0800bf60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b088      	sub	sp, #32
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d10e      	bne.n	800bfa0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d009      	beq.n	800bfa0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d004      	beq.n	800bfa0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	4798      	blx	r3
    return;
 800bf9e:	e0ce      	b.n	800c13e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	f003 0302 	and.w	r3, r3, #2
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d009      	beq.n	800bfbe <HAL_SPI_IRQHandler+0x5e>
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d004      	beq.n	800bfbe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	4798      	blx	r3
    return;
 800bfbc:	e0bf      	b.n	800c13e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	f003 0320 	and.w	r3, r3, #32
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d10a      	bne.n	800bfde <HAL_SPI_IRQHandler+0x7e>
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d105      	bne.n	800bfde <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f000 80b0 	beq.w	800c13e <HAL_SPI_IRQHandler+0x1de>
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	f003 0320 	and.w	r3, r3, #32
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f000 80aa 	beq.w	800c13e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d023      	beq.n	800c03c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b03      	cmp	r3, #3
 800bffe:	d011      	beq.n	800c024 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c004:	f043 0204 	orr.w	r2, r3, #4
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c00c:	2300      	movs	r3, #0
 800c00e:	617b      	str	r3, [r7, #20]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	617b      	str	r3, [r7, #20]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	617b      	str	r3, [r7, #20]
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	e00b      	b.n	800c03c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c024:	2300      	movs	r3, #0
 800c026:	613b      	str	r3, [r7, #16]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	613b      	str	r3, [r7, #16]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	613b      	str	r3, [r7, #16]
 800c038:	693b      	ldr	r3, [r7, #16]
        return;
 800c03a:	e080      	b.n	800c13e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	f003 0320 	and.w	r3, r3, #32
 800c042:	2b00      	cmp	r3, #0
 800c044:	d014      	beq.n	800c070 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c04a:	f043 0201 	orr.w	r2, r3, #1
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c052:	2300      	movs	r3, #0
 800c054:	60fb      	str	r3, [r7, #12]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	60fb      	str	r3, [r7, #12]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c06c:	601a      	str	r2, [r3, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00c      	beq.n	800c094 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c07e:	f043 0208 	orr.w	r2, r3, #8
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c086:	2300      	movs	r3, #0
 800c088:	60bb      	str	r3, [r7, #8]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	60bb      	str	r3, [r7, #8]
 800c092:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d04f      	beq.n	800c13c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c0aa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	f003 0302 	and.w	r3, r3, #2
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d104      	bne.n	800c0c8 <HAL_SPI_IRQHandler+0x168>
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	f003 0301 	and.w	r3, r3, #1
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d034      	beq.n	800c132 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	685a      	ldr	r2, [r3, #4]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f022 0203 	bic.w	r2, r2, #3
 800c0d6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d011      	beq.n	800c104 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0e4:	4a17      	ldr	r2, [pc, #92]	; (800c144 <HAL_SPI_IRQHandler+0x1e4>)
 800c0e6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fd f911 	bl	8009314 <HAL_DMA_Abort_IT>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d005      	beq.n	800c104 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d016      	beq.n	800c13a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c110:	4a0c      	ldr	r2, [pc, #48]	; (800c144 <HAL_SPI_IRQHandler+0x1e4>)
 800c112:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fd f8fb 	bl	8009314 <HAL_DMA_Abort_IT>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00a      	beq.n	800c13a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c128:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800c130:	e003      	b.n	800c13a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7fa fb1a 	bl	800676c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c138:	e000      	b.n	800c13c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800c13a:	bf00      	nop
    return;
 800c13c:	bf00      	nop
  }
}
 800c13e:	3720      	adds	r7, #32
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	0800c261 	.word	0x0800c261

0800c148 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c150:	bf00      	nop
 800c152:	370c      	adds	r7, #12
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c168:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c16a:	f7fc fa17 	bl	800859c <HAL_GetTick>
 800c16e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c17a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c17e:	d03b      	beq.n	800c1f8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	685a      	ldr	r2, [r3, #4]
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f022 0220 	bic.w	r2, r2, #32
 800c18e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	685a      	ldr	r2, [r3, #4]
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f022 0202 	bic.w	r2, r2, #2
 800c19e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c1a0:	693a      	ldr	r2, [r7, #16]
 800c1a2:	2164      	movs	r1, #100	; 0x64
 800c1a4:	6978      	ldr	r0, [r7, #20]
 800c1a6:	f000 f8f7 	bl	800c398 <SPI_EndRxTxTransaction>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d005      	beq.n	800c1bc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b4:	f043 0220 	orr.w	r2, r3, #32
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d10a      	bne.n	800c1da <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	60fb      	str	r3, [r7, #12]
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	60fb      	str	r3, [r7, #12]
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	60fb      	str	r3, [r7, #12]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d003      	beq.n	800c1f8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c1f0:	6978      	ldr	r0, [r7, #20]
 800c1f2:	f7fa fabb 	bl	800676c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c1f6:	e002      	b.n	800c1fe <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c1f8:	6978      	ldr	r0, [r7, #20]
 800c1fa:	f7fa facd 	bl	8006798 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c1fe:	3718      	adds	r7, #24
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c210:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f7ff ff98 	bl	800c148 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c218:	bf00      	nop
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	685a      	ldr	r2, [r3, #4]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f022 0203 	bic.w	r2, r2, #3
 800c23c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c242:	f043 0210 	orr.w	r2, r3, #16
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f7fa fa8a 	bl	800676c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c258:	bf00      	nop
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c26c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2200      	movs	r2, #0
 800c272:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f7fa fa76 	bl	800676c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c280:	bf00      	nop
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	603b      	str	r3, [r7, #0]
 800c294:	4613      	mov	r3, r2
 800c296:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c298:	f7fc f980 	bl	800859c <HAL_GetTick>
 800c29c:	4602      	mov	r2, r0
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	1a9b      	subs	r3, r3, r2
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c2a8:	f7fc f978 	bl	800859c <HAL_GetTick>
 800c2ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c2ae:	4b39      	ldr	r3, [pc, #228]	; (800c394 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	015b      	lsls	r3, r3, #5
 800c2b4:	0d1b      	lsrs	r3, r3, #20
 800c2b6:	69fa      	ldr	r2, [r7, #28]
 800c2b8:	fb02 f303 	mul.w	r3, r2, r3
 800c2bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c2be:	e054      	b.n	800c36a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2c6:	d050      	beq.n	800c36a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c2c8:	f7fc f968 	bl	800859c <HAL_GetTick>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	69fa      	ldr	r2, [r7, #28]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d902      	bls.n	800c2de <SPI_WaitFlagStateUntilTimeout+0x56>
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d13d      	bne.n	800c35a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	685a      	ldr	r2, [r3, #4]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c2ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2f6:	d111      	bne.n	800c31c <SPI_WaitFlagStateUntilTimeout+0x94>
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c300:	d004      	beq.n	800c30c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c30a:	d107      	bne.n	800c31c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c31a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c324:	d10f      	bne.n	800c346 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c334:	601a      	str	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c344:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c356:	2303      	movs	r3, #3
 800c358:	e017      	b.n	800c38a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d101      	bne.n	800c364 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c360:	2300      	movs	r3, #0
 800c362:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	3b01      	subs	r3, #1
 800c368:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	689a      	ldr	r2, [r3, #8]
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	4013      	ands	r3, r2
 800c374:	68ba      	ldr	r2, [r7, #8]
 800c376:	429a      	cmp	r2, r3
 800c378:	bf0c      	ite	eq
 800c37a:	2301      	moveq	r3, #1
 800c37c:	2300      	movne	r3, #0
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	461a      	mov	r2, r3
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	429a      	cmp	r2, r3
 800c386:	d19b      	bne.n	800c2c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3720      	adds	r7, #32
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	20000030 	.word	0x20000030

0800c398 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b088      	sub	sp, #32
 800c39c:	af02      	add	r7, sp, #8
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c3a4:	4b1b      	ldr	r3, [pc, #108]	; (800c414 <SPI_EndRxTxTransaction+0x7c>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a1b      	ldr	r2, [pc, #108]	; (800c418 <SPI_EndRxTxTransaction+0x80>)
 800c3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ae:	0d5b      	lsrs	r3, r3, #21
 800c3b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c3b4:	fb02 f303 	mul.w	r3, r2, r3
 800c3b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3c2:	d112      	bne.n	800c3ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	2180      	movs	r1, #128	; 0x80
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f7ff ff5a 	bl	800c288 <SPI_WaitFlagStateUntilTimeout>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d016      	beq.n	800c408 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3de:	f043 0220 	orr.w	r2, r3, #32
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c3e6:	2303      	movs	r3, #3
 800c3e8:	e00f      	b.n	800c40a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00a      	beq.n	800c406 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c400:	2b80      	cmp	r3, #128	; 0x80
 800c402:	d0f2      	beq.n	800c3ea <SPI_EndRxTxTransaction+0x52>
 800c404:	e000      	b.n	800c408 <SPI_EndRxTxTransaction+0x70>
        break;
 800c406:	bf00      	nop
  }

  return HAL_OK;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3718      	adds	r7, #24
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	20000030 	.word	0x20000030
 800c418:	165e9f81 	.word	0x165e9f81

0800c41c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d101      	bne.n	800c42e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c42a:	2301      	movs	r3, #1
 800c42c:	e041      	b.n	800c4b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c434:	b2db      	uxtb	r3, r3
 800c436:	2b00      	cmp	r3, #0
 800c438:	d106      	bne.n	800c448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f7f9 fb86 	bl	8005b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2202      	movs	r2, #2
 800c44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	3304      	adds	r3, #4
 800c458:	4619      	mov	r1, r3
 800c45a:	4610      	mov	r0, r2
 800c45c:	f000 faa0 	bl	800c9a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2201      	movs	r2, #1
 800c474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
	...

0800c4bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d001      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e04e      	b.n	800c572 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2202      	movs	r2, #2
 800c4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	68da      	ldr	r2, [r3, #12]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f042 0201 	orr.w	r2, r2, #1
 800c4ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a23      	ldr	r2, [pc, #140]	; (800c580 <HAL_TIM_Base_Start_IT+0xc4>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d022      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4fe:	d01d      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a1f      	ldr	r2, [pc, #124]	; (800c584 <HAL_TIM_Base_Start_IT+0xc8>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d018      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a1e      	ldr	r2, [pc, #120]	; (800c588 <HAL_TIM_Base_Start_IT+0xcc>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d013      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a1c      	ldr	r2, [pc, #112]	; (800c58c <HAL_TIM_Base_Start_IT+0xd0>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d00e      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a1b      	ldr	r2, [pc, #108]	; (800c590 <HAL_TIM_Base_Start_IT+0xd4>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d009      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a19      	ldr	r2, [pc, #100]	; (800c594 <HAL_TIM_Base_Start_IT+0xd8>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d004      	beq.n	800c53c <HAL_TIM_Base_Start_IT+0x80>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a18      	ldr	r2, [pc, #96]	; (800c598 <HAL_TIM_Base_Start_IT+0xdc>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d111      	bne.n	800c560 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	f003 0307 	and.w	r3, r3, #7
 800c546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2b06      	cmp	r3, #6
 800c54c:	d010      	beq.n	800c570 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f042 0201 	orr.w	r2, r2, #1
 800c55c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c55e:	e007      	b.n	800c570 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f042 0201 	orr.w	r2, r2, #1
 800c56e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	3714      	adds	r7, #20
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	40010000 	.word	0x40010000
 800c584:	40000400 	.word	0x40000400
 800c588:	40000800 	.word	0x40000800
 800c58c:	40000c00 	.word	0x40000c00
 800c590:	40010400 	.word	0x40010400
 800c594:	40014000 	.word	0x40014000
 800c598:	40001800 	.word	0x40001800

0800c59c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	f003 0302 	and.w	r3, r3, #2
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d122      	bne.n	800c5f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	f003 0302 	and.w	r3, r3, #2
 800c5bc:	2b02      	cmp	r3, #2
 800c5be:	d11b      	bne.n	800c5f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f06f 0202 	mvn.w	r2, #2
 800c5c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	699b      	ldr	r3, [r3, #24]
 800c5d6:	f003 0303 	and.w	r3, r3, #3
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d003      	beq.n	800c5e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 f9bf 	bl	800c962 <HAL_TIM_IC_CaptureCallback>
 800c5e4:	e005      	b.n	800c5f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f9b1 	bl	800c94e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 f9c2 	bl	800c976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	f003 0304 	and.w	r3, r3, #4
 800c602:	2b04      	cmp	r3, #4
 800c604:	d122      	bne.n	800c64c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	f003 0304 	and.w	r3, r3, #4
 800c610:	2b04      	cmp	r3, #4
 800c612:	d11b      	bne.n	800c64c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f06f 0204 	mvn.w	r2, #4
 800c61c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2202      	movs	r2, #2
 800c622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d003      	beq.n	800c63a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 f995 	bl	800c962 <HAL_TIM_IC_CaptureCallback>
 800c638:	e005      	b.n	800c646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 f987 	bl	800c94e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f998 	bl	800c976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2200      	movs	r2, #0
 800c64a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	691b      	ldr	r3, [r3, #16]
 800c652:	f003 0308 	and.w	r3, r3, #8
 800c656:	2b08      	cmp	r3, #8
 800c658:	d122      	bne.n	800c6a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	f003 0308 	and.w	r3, r3, #8
 800c664:	2b08      	cmp	r3, #8
 800c666:	d11b      	bne.n	800c6a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f06f 0208 	mvn.w	r2, #8
 800c670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2204      	movs	r2, #4
 800c676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	69db      	ldr	r3, [r3, #28]
 800c67e:	f003 0303 	and.w	r3, r3, #3
 800c682:	2b00      	cmp	r3, #0
 800c684:	d003      	beq.n	800c68e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 f96b 	bl	800c962 <HAL_TIM_IC_CaptureCallback>
 800c68c:	e005      	b.n	800c69a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f95d 	bl	800c94e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 f96e 	bl	800c976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	f003 0310 	and.w	r3, r3, #16
 800c6aa:	2b10      	cmp	r3, #16
 800c6ac:	d122      	bne.n	800c6f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	f003 0310 	and.w	r3, r3, #16
 800c6b8:	2b10      	cmp	r3, #16
 800c6ba:	d11b      	bne.n	800c6f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f06f 0210 	mvn.w	r2, #16
 800c6c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2208      	movs	r2, #8
 800c6ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	69db      	ldr	r3, [r3, #28]
 800c6d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d003      	beq.n	800c6e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f941 	bl	800c962 <HAL_TIM_IC_CaptureCallback>
 800c6e0:	e005      	b.n	800c6ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f933 	bl	800c94e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 f944 	bl	800c976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	f003 0301 	and.w	r3, r3, #1
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d10e      	bne.n	800c720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	f003 0301 	and.w	r3, r3, #1
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d107      	bne.n	800c720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f06f 0201 	mvn.w	r2, #1
 800c718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 f90d 	bl	800c93a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	691b      	ldr	r3, [r3, #16]
 800c726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c72a:	2b80      	cmp	r3, #128	; 0x80
 800c72c:	d10e      	bne.n	800c74c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c738:	2b80      	cmp	r3, #128	; 0x80
 800c73a:	d107      	bne.n	800c74c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 faea 	bl	800cd20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c756:	2b40      	cmp	r3, #64	; 0x40
 800c758:	d10e      	bne.n	800c778 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c764:	2b40      	cmp	r3, #64	; 0x40
 800c766:	d107      	bne.n	800c778 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f909 	bl	800c98a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	f003 0320 	and.w	r3, r3, #32
 800c782:	2b20      	cmp	r3, #32
 800c784:	d10e      	bne.n	800c7a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	f003 0320 	and.w	r3, r3, #32
 800c790:	2b20      	cmp	r3, #32
 800c792:	d107      	bne.n	800c7a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f06f 0220 	mvn.w	r2, #32
 800c79c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 fab4 	bl	800cd0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c7a4:	bf00      	nop
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d101      	bne.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1c>
 800c7c4:	2302      	movs	r3, #2
 800c7c6:	e0b4      	b.n	800c932 <HAL_TIM_ConfigClockSource+0x186>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2202      	movs	r2, #2
 800c7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c7e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c800:	d03e      	beq.n	800c880 <HAL_TIM_ConfigClockSource+0xd4>
 800c802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c806:	f200 8087 	bhi.w	800c918 <HAL_TIM_ConfigClockSource+0x16c>
 800c80a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c80e:	f000 8086 	beq.w	800c91e <HAL_TIM_ConfigClockSource+0x172>
 800c812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c816:	d87f      	bhi.n	800c918 <HAL_TIM_ConfigClockSource+0x16c>
 800c818:	2b70      	cmp	r3, #112	; 0x70
 800c81a:	d01a      	beq.n	800c852 <HAL_TIM_ConfigClockSource+0xa6>
 800c81c:	2b70      	cmp	r3, #112	; 0x70
 800c81e:	d87b      	bhi.n	800c918 <HAL_TIM_ConfigClockSource+0x16c>
 800c820:	2b60      	cmp	r3, #96	; 0x60
 800c822:	d050      	beq.n	800c8c6 <HAL_TIM_ConfigClockSource+0x11a>
 800c824:	2b60      	cmp	r3, #96	; 0x60
 800c826:	d877      	bhi.n	800c918 <HAL_TIM_ConfigClockSource+0x16c>
 800c828:	2b50      	cmp	r3, #80	; 0x50
 800c82a:	d03c      	beq.n	800c8a6 <HAL_TIM_ConfigClockSource+0xfa>
 800c82c:	2b50      	cmp	r3, #80	; 0x50
 800c82e:	d873      	bhi.n	800c918 <HAL_TIM_ConfigClockSource+0x16c>
 800c830:	2b40      	cmp	r3, #64	; 0x40
 800c832:	d058      	beq.n	800c8e6 <HAL_TIM_ConfigClockSource+0x13a>
 800c834:	2b40      	cmp	r3, #64	; 0x40
 800c836:	d86f      	bhi.n	800c918 <HAL_TIM_ConfigClockSource+0x16c>
 800c838:	2b30      	cmp	r3, #48	; 0x30
 800c83a:	d064      	beq.n	800c906 <HAL_TIM_ConfigClockSource+0x15a>
 800c83c:	2b30      	cmp	r3, #48	; 0x30
 800c83e:	d86b      	bhi.n	800c918 <HAL_TIM_ConfigClockSource+0x16c>
 800c840:	2b20      	cmp	r3, #32
 800c842:	d060      	beq.n	800c906 <HAL_TIM_ConfigClockSource+0x15a>
 800c844:	2b20      	cmp	r3, #32
 800c846:	d867      	bhi.n	800c918 <HAL_TIM_ConfigClockSource+0x16c>
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d05c      	beq.n	800c906 <HAL_TIM_ConfigClockSource+0x15a>
 800c84c:	2b10      	cmp	r3, #16
 800c84e:	d05a      	beq.n	800c906 <HAL_TIM_ConfigClockSource+0x15a>
 800c850:	e062      	b.n	800c918 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6818      	ldr	r0, [r3, #0]
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	6899      	ldr	r1, [r3, #8]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	685a      	ldr	r2, [r3, #4]
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	f000 f9b7 	bl	800cbd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	609a      	str	r2, [r3, #8]
      break;
 800c87e:	e04f      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6818      	ldr	r0, [r3, #0]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	6899      	ldr	r1, [r3, #8]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	f000 f9a0 	bl	800cbd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	689a      	ldr	r2, [r3, #8]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c8a2:	609a      	str	r2, [r3, #8]
      break;
 800c8a4:	e03c      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6818      	ldr	r0, [r3, #0]
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	6859      	ldr	r1, [r3, #4]
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	f000 f914 	bl	800cae0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	2150      	movs	r1, #80	; 0x50
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 f96d 	bl	800cb9e <TIM_ITRx_SetConfig>
      break;
 800c8c4:	e02c      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6818      	ldr	r0, [r3, #0]
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	6859      	ldr	r1, [r3, #4]
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	f000 f933 	bl	800cb3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2160      	movs	r1, #96	; 0x60
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f000 f95d 	bl	800cb9e <TIM_ITRx_SetConfig>
      break;
 800c8e4:	e01c      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6818      	ldr	r0, [r3, #0]
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	6859      	ldr	r1, [r3, #4]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	f000 f8f4 	bl	800cae0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2140      	movs	r1, #64	; 0x40
 800c8fe:	4618      	mov	r0, r3
 800c900:	f000 f94d 	bl	800cb9e <TIM_ITRx_SetConfig>
      break;
 800c904:	e00c      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4619      	mov	r1, r3
 800c910:	4610      	mov	r0, r2
 800c912:	f000 f944 	bl	800cb9e <TIM_ITRx_SetConfig>
      break;
 800c916:	e003      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	73fb      	strb	r3, [r7, #15]
      break;
 800c91c:	e000      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c91e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c930:	7bfb      	ldrb	r3, [r7, #15]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b083      	sub	sp, #12
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c942:	bf00      	nop
 800c944:	370c      	adds	r7, #12
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c94e:	b480      	push	{r7}
 800c950:	b083      	sub	sp, #12
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c956:	bf00      	nop
 800c958:	370c      	adds	r7, #12
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c962:	b480      	push	{r7}
 800c964:	b083      	sub	sp, #12
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c96a:	bf00      	nop
 800c96c:	370c      	adds	r7, #12
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c976:	b480      	push	{r7}
 800c978:	b083      	sub	sp, #12
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c97e:	bf00      	nop
 800c980:	370c      	adds	r7, #12
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b083      	sub	sp, #12
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c992:	bf00      	nop
 800c994:	370c      	adds	r7, #12
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
	...

0800c9a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a40      	ldr	r2, [pc, #256]	; (800cab4 <TIM_Base_SetConfig+0x114>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d013      	beq.n	800c9e0 <TIM_Base_SetConfig+0x40>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9be:	d00f      	beq.n	800c9e0 <TIM_Base_SetConfig+0x40>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4a3d      	ldr	r2, [pc, #244]	; (800cab8 <TIM_Base_SetConfig+0x118>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d00b      	beq.n	800c9e0 <TIM_Base_SetConfig+0x40>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a3c      	ldr	r2, [pc, #240]	; (800cabc <TIM_Base_SetConfig+0x11c>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d007      	beq.n	800c9e0 <TIM_Base_SetConfig+0x40>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4a3b      	ldr	r2, [pc, #236]	; (800cac0 <TIM_Base_SetConfig+0x120>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d003      	beq.n	800c9e0 <TIM_Base_SetConfig+0x40>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	4a3a      	ldr	r2, [pc, #232]	; (800cac4 <TIM_Base_SetConfig+0x124>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d108      	bne.n	800c9f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4a2f      	ldr	r2, [pc, #188]	; (800cab4 <TIM_Base_SetConfig+0x114>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d02b      	beq.n	800ca52 <TIM_Base_SetConfig+0xb2>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca00:	d027      	beq.n	800ca52 <TIM_Base_SetConfig+0xb2>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a2c      	ldr	r2, [pc, #176]	; (800cab8 <TIM_Base_SetConfig+0x118>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d023      	beq.n	800ca52 <TIM_Base_SetConfig+0xb2>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4a2b      	ldr	r2, [pc, #172]	; (800cabc <TIM_Base_SetConfig+0x11c>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d01f      	beq.n	800ca52 <TIM_Base_SetConfig+0xb2>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4a2a      	ldr	r2, [pc, #168]	; (800cac0 <TIM_Base_SetConfig+0x120>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d01b      	beq.n	800ca52 <TIM_Base_SetConfig+0xb2>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a29      	ldr	r2, [pc, #164]	; (800cac4 <TIM_Base_SetConfig+0x124>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d017      	beq.n	800ca52 <TIM_Base_SetConfig+0xb2>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4a28      	ldr	r2, [pc, #160]	; (800cac8 <TIM_Base_SetConfig+0x128>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d013      	beq.n	800ca52 <TIM_Base_SetConfig+0xb2>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4a27      	ldr	r2, [pc, #156]	; (800cacc <TIM_Base_SetConfig+0x12c>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d00f      	beq.n	800ca52 <TIM_Base_SetConfig+0xb2>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	4a26      	ldr	r2, [pc, #152]	; (800cad0 <TIM_Base_SetConfig+0x130>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d00b      	beq.n	800ca52 <TIM_Base_SetConfig+0xb2>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4a25      	ldr	r2, [pc, #148]	; (800cad4 <TIM_Base_SetConfig+0x134>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d007      	beq.n	800ca52 <TIM_Base_SetConfig+0xb2>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4a24      	ldr	r2, [pc, #144]	; (800cad8 <TIM_Base_SetConfig+0x138>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d003      	beq.n	800ca52 <TIM_Base_SetConfig+0xb2>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4a23      	ldr	r2, [pc, #140]	; (800cadc <TIM_Base_SetConfig+0x13c>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d108      	bne.n	800ca64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	68fa      	ldr	r2, [r7, #12]
 800ca60:	4313      	orrs	r3, r2
 800ca62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	695b      	ldr	r3, [r3, #20]
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	689a      	ldr	r2, [r3, #8]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a0a      	ldr	r2, [pc, #40]	; (800cab4 <TIM_Base_SetConfig+0x114>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d003      	beq.n	800ca98 <TIM_Base_SetConfig+0xf8>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4a0c      	ldr	r2, [pc, #48]	; (800cac4 <TIM_Base_SetConfig+0x124>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d103      	bne.n	800caa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	691a      	ldr	r2, [r3, #16]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	615a      	str	r2, [r3, #20]
}
 800caa6:	bf00      	nop
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	40010000 	.word	0x40010000
 800cab8:	40000400 	.word	0x40000400
 800cabc:	40000800 	.word	0x40000800
 800cac0:	40000c00 	.word	0x40000c00
 800cac4:	40010400 	.word	0x40010400
 800cac8:	40014000 	.word	0x40014000
 800cacc:	40014400 	.word	0x40014400
 800cad0:	40014800 	.word	0x40014800
 800cad4:	40001800 	.word	0x40001800
 800cad8:	40001c00 	.word	0x40001c00
 800cadc:	40002000 	.word	0x40002000

0800cae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b087      	sub	sp, #28
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6a1b      	ldr	r3, [r3, #32]
 800caf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6a1b      	ldr	r3, [r3, #32]
 800caf6:	f023 0201 	bic.w	r2, r3, #1
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	699b      	ldr	r3, [r3, #24]
 800cb02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	011b      	lsls	r3, r3, #4
 800cb10:	693a      	ldr	r2, [r7, #16]
 800cb12:	4313      	orrs	r3, r2
 800cb14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f023 030a 	bic.w	r3, r3, #10
 800cb1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cb1e:	697a      	ldr	r2, [r7, #20]
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	4313      	orrs	r3, r2
 800cb24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	693a      	ldr	r2, [r7, #16]
 800cb2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	697a      	ldr	r2, [r7, #20]
 800cb30:	621a      	str	r2, [r3, #32]
}
 800cb32:	bf00      	nop
 800cb34:	371c      	adds	r7, #28
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b087      	sub	sp, #28
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	60f8      	str	r0, [r7, #12]
 800cb46:	60b9      	str	r1, [r7, #8]
 800cb48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6a1b      	ldr	r3, [r3, #32]
 800cb4e:	f023 0210 	bic.w	r2, r3, #16
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	699b      	ldr	r3, [r3, #24]
 800cb5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	6a1b      	ldr	r3, [r3, #32]
 800cb60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	031b      	lsls	r3, r3, #12
 800cb6e:	697a      	ldr	r2, [r7, #20]
 800cb70:	4313      	orrs	r3, r2
 800cb72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cb7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	011b      	lsls	r3, r3, #4
 800cb80:	693a      	ldr	r2, [r7, #16]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	697a      	ldr	r2, [r7, #20]
 800cb8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	693a      	ldr	r2, [r7, #16]
 800cb90:	621a      	str	r2, [r3, #32]
}
 800cb92:	bf00      	nop
 800cb94:	371c      	adds	r7, #28
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr

0800cb9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb9e:	b480      	push	{r7}
 800cba0:	b085      	sub	sp, #20
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
 800cba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cbb6:	683a      	ldr	r2, [r7, #0]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	f043 0307 	orr.w	r3, r3, #7
 800cbc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	609a      	str	r2, [r3, #8]
}
 800cbc8:	bf00      	nop
 800cbca:	3714      	adds	r7, #20
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b087      	sub	sp, #28
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
 800cbe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	689b      	ldr	r3, [r3, #8]
 800cbe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cbee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	021a      	lsls	r2, r3, #8
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	431a      	orrs	r2, r3
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	697a      	ldr	r2, [r7, #20]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	697a      	ldr	r2, [r7, #20]
 800cc06:	609a      	str	r2, [r3, #8]
}
 800cc08:	bf00      	nop
 800cc0a:	371c      	adds	r7, #28
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d101      	bne.n	800cc2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc28:	2302      	movs	r3, #2
 800cc2a:	e05a      	b.n	800cce2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2202      	movs	r2, #2
 800cc38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a21      	ldr	r2, [pc, #132]	; (800ccf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d022      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc78:	d01d      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a1d      	ldr	r2, [pc, #116]	; (800ccf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d018      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a1b      	ldr	r2, [pc, #108]	; (800ccf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d013      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a1a      	ldr	r2, [pc, #104]	; (800ccfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d00e      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a18      	ldr	r2, [pc, #96]	; (800cd00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d009      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a17      	ldr	r2, [pc, #92]	; (800cd04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d004      	beq.n	800ccb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a15      	ldr	r2, [pc, #84]	; (800cd08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d10c      	bne.n	800ccd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	68ba      	ldr	r2, [r7, #8]
 800ccce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3714      	adds	r7, #20
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	40010000 	.word	0x40010000
 800ccf4:	40000400 	.word	0x40000400
 800ccf8:	40000800 	.word	0x40000800
 800ccfc:	40000c00 	.word	0x40000c00
 800cd00:	40010400 	.word	0x40010400
 800cd04:	40014000 	.word	0x40014000
 800cd08:	40001800 	.word	0x40001800

0800cd0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cd14:	bf00      	nop
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd28:	bf00      	nop
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	e03f      	b.n	800cdc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d106      	bne.n	800cd60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7f8 ff20 	bl	8005ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2224      	movs	r2, #36	; 0x24
 800cd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	68da      	ldr	r2, [r3, #12]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 fddf 	bl	800d93c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	691a      	ldr	r2, [r3, #16]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cd8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	695a      	ldr	r2, [r3, #20]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	68da      	ldr	r2, [r3, #12]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cdac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2220      	movs	r2, #32
 800cdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2220      	movs	r2, #32
 800cdc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b08a      	sub	sp, #40	; 0x28
 800cdd2:	af02      	add	r7, sp, #8
 800cdd4:	60f8      	str	r0, [r7, #12]
 800cdd6:	60b9      	str	r1, [r7, #8]
 800cdd8:	603b      	str	r3, [r7, #0]
 800cdda:	4613      	mov	r3, r2
 800cddc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cdde:	2300      	movs	r3, #0
 800cde0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	2b20      	cmp	r3, #32
 800cdec:	d17c      	bne.n	800cee8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d002      	beq.n	800cdfa <HAL_UART_Transmit+0x2c>
 800cdf4:	88fb      	ldrh	r3, [r7, #6]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d101      	bne.n	800cdfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e075      	b.n	800ceea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d101      	bne.n	800ce0c <HAL_UART_Transmit+0x3e>
 800ce08:	2302      	movs	r3, #2
 800ce0a:	e06e      	b.n	800ceea <HAL_UART_Transmit+0x11c>
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2200      	movs	r2, #0
 800ce18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2221      	movs	r2, #33	; 0x21
 800ce1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ce22:	f7fb fbbb 	bl	800859c <HAL_GetTick>
 800ce26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	88fa      	ldrh	r2, [r7, #6]
 800ce2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	88fa      	ldrh	r2, [r7, #6]
 800ce32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce3c:	d108      	bne.n	800ce50 <HAL_UART_Transmit+0x82>
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	691b      	ldr	r3, [r3, #16]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d104      	bne.n	800ce50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ce46:	2300      	movs	r3, #0
 800ce48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	61bb      	str	r3, [r7, #24]
 800ce4e:	e003      	b.n	800ce58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ce54:	2300      	movs	r3, #0
 800ce56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ce60:	e02a      	b.n	800ceb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	2180      	movs	r1, #128	; 0x80
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	f000 fb1f 	bl	800d4b0 <UART_WaitOnFlagUntilTimeout>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d001      	beq.n	800ce7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	e036      	b.n	800ceea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d10b      	bne.n	800ce9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	881b      	ldrh	r3, [r3, #0]
 800ce86:	461a      	mov	r2, r3
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	3302      	adds	r3, #2
 800ce96:	61bb      	str	r3, [r7, #24]
 800ce98:	e007      	b.n	800ceaa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	781a      	ldrb	r2, [r3, #0]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	3301      	adds	r3, #1
 800cea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1cf      	bne.n	800ce62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	9300      	str	r3, [sp, #0]
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	2200      	movs	r2, #0
 800ceca:	2140      	movs	r1, #64	; 0x40
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f000 faef 	bl	800d4b0 <UART_WaitOnFlagUntilTimeout>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d001      	beq.n	800cedc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ced8:	2303      	movs	r3, #3
 800ceda:	e006      	b.n	800ceea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2220      	movs	r2, #32
 800cee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	e000      	b.n	800ceea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cee8:	2302      	movs	r3, #2
  }
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3720      	adds	r7, #32
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b084      	sub	sp, #16
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	60f8      	str	r0, [r7, #12]
 800cefa:	60b9      	str	r1, [r7, #8]
 800cefc:	4613      	mov	r3, r2
 800cefe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	2b20      	cmp	r3, #32
 800cf0a:	d11d      	bne.n	800cf48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d002      	beq.n	800cf18 <HAL_UART_Receive_IT+0x26>
 800cf12:	88fb      	ldrh	r3, [r7, #6]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d101      	bne.n	800cf1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e016      	b.n	800cf4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d101      	bne.n	800cf2a <HAL_UART_Receive_IT+0x38>
 800cf26:	2302      	movs	r3, #2
 800cf28:	e00f      	b.n	800cf4a <HAL_UART_Receive_IT+0x58>
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2200      	movs	r2, #0
 800cf36:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cf38:	88fb      	ldrh	r3, [r7, #6]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	68b9      	ldr	r1, [r7, #8]
 800cf3e:	68f8      	ldr	r0, [r7, #12]
 800cf40:	f000 fb24 	bl	800d58c <UART_Start_Receive_IT>
 800cf44:	4603      	mov	r3, r0
 800cf46:	e000      	b.n	800cf4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800cf48:	2302      	movs	r3, #2
  }
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
	...

0800cf54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b0ba      	sub	sp, #232	; 0xe8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	695b      	ldr	r3, [r3, #20]
 800cf76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800cf80:	2300      	movs	r3, #0
 800cf82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cf86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf8a:	f003 030f 	and.w	r3, r3, #15
 800cf8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800cf92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d10f      	bne.n	800cfba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cf9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf9e:	f003 0320 	and.w	r3, r3, #32
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d009      	beq.n	800cfba <HAL_UART_IRQHandler+0x66>
 800cfa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfaa:	f003 0320 	and.w	r3, r3, #32
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d003      	beq.n	800cfba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 fc07 	bl	800d7c6 <UART_Receive_IT>
      return;
 800cfb8:	e256      	b.n	800d468 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cfba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f000 80de 	beq.w	800d180 <HAL_UART_IRQHandler+0x22c>
 800cfc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfc8:	f003 0301 	and.w	r3, r3, #1
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d106      	bne.n	800cfde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cfd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 80d1 	beq.w	800d180 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cfde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfe2:	f003 0301 	and.w	r3, r3, #1
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00b      	beq.n	800d002 <HAL_UART_IRQHandler+0xae>
 800cfea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d005      	beq.n	800d002 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cffa:	f043 0201 	orr.w	r2, r3, #1
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d006:	f003 0304 	and.w	r3, r3, #4
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d00b      	beq.n	800d026 <HAL_UART_IRQHandler+0xd2>
 800d00e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d012:	f003 0301 	and.w	r3, r3, #1
 800d016:	2b00      	cmp	r3, #0
 800d018:	d005      	beq.n	800d026 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01e:	f043 0202 	orr.w	r2, r3, #2
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d02a:	f003 0302 	and.w	r3, r3, #2
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00b      	beq.n	800d04a <HAL_UART_IRQHandler+0xf6>
 800d032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d036:	f003 0301 	and.w	r3, r3, #1
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d005      	beq.n	800d04a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d042:	f043 0204 	orr.w	r2, r3, #4
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d04e:	f003 0308 	and.w	r3, r3, #8
 800d052:	2b00      	cmp	r3, #0
 800d054:	d011      	beq.n	800d07a <HAL_UART_IRQHandler+0x126>
 800d056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d05a:	f003 0320 	and.w	r3, r3, #32
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d105      	bne.n	800d06e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d066:	f003 0301 	and.w	r3, r3, #1
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d005      	beq.n	800d07a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d072:	f043 0208 	orr.w	r2, r3, #8
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 81ed 	beq.w	800d45e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d088:	f003 0320 	and.w	r3, r3, #32
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d008      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x14e>
 800d090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d094:	f003 0320 	and.w	r3, r3, #32
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d002      	beq.n	800d0a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 fb92 	bl	800d7c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	695b      	ldr	r3, [r3, #20]
 800d0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ac:	2b40      	cmp	r3, #64	; 0x40
 800d0ae:	bf0c      	ite	eq
 800d0b0:	2301      	moveq	r3, #1
 800d0b2:	2300      	movne	r3, #0
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0be:	f003 0308 	and.w	r3, r3, #8
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d103      	bne.n	800d0ce <HAL_UART_IRQHandler+0x17a>
 800d0c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d04f      	beq.n	800d16e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 fa9a 	bl	800d608 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	695b      	ldr	r3, [r3, #20]
 800d0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0de:	2b40      	cmp	r3, #64	; 0x40
 800d0e0:	d141      	bne.n	800d166 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	3314      	adds	r3, #20
 800d0e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d0f0:	e853 3f00 	ldrex	r3, [r3]
 800d0f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d0f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d0fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	3314      	adds	r3, #20
 800d10a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d10e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d116:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d11a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d11e:	e841 2300 	strex	r3, r2, [r1]
 800d122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1d9      	bne.n	800d0e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d132:	2b00      	cmp	r3, #0
 800d134:	d013      	beq.n	800d15e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13a:	4a7d      	ldr	r2, [pc, #500]	; (800d330 <HAL_UART_IRQHandler+0x3dc>)
 800d13c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d142:	4618      	mov	r0, r3
 800d144:	f7fc f8e6 	bl	8009314 <HAL_DMA_Abort_IT>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d016      	beq.n	800d17c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d158:	4610      	mov	r0, r2
 800d15a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d15c:	e00e      	b.n	800d17c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 f990 	bl	800d484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d164:	e00a      	b.n	800d17c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 f98c 	bl	800d484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d16c:	e006      	b.n	800d17c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f988 	bl	800d484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d17a:	e170      	b.n	800d45e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d17c:	bf00      	nop
    return;
 800d17e:	e16e      	b.n	800d45e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d184:	2b01      	cmp	r3, #1
 800d186:	f040 814a 	bne.w	800d41e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d18a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d18e:	f003 0310 	and.w	r3, r3, #16
 800d192:	2b00      	cmp	r3, #0
 800d194:	f000 8143 	beq.w	800d41e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d19c:	f003 0310 	and.w	r3, r3, #16
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f000 813c 	beq.w	800d41e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	60bb      	str	r3, [r7, #8]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	60bb      	str	r3, [r7, #8]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	60bb      	str	r3, [r7, #8]
 800d1ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	695b      	ldr	r3, [r3, #20]
 800d1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1c6:	2b40      	cmp	r3, #64	; 0x40
 800d1c8:	f040 80b4 	bne.w	800d334 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d1d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	f000 8140 	beq.w	800d462 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d1e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	f080 8139 	bcs.w	800d462 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d1f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fc:	69db      	ldr	r3, [r3, #28]
 800d1fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d202:	f000 8088 	beq.w	800d316 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	330c      	adds	r3, #12
 800d20c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d210:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d214:	e853 3f00 	ldrex	r3, [r3]
 800d218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d21c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	330c      	adds	r3, #12
 800d22e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d232:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d23e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d242:	e841 2300 	strex	r3, r2, [r1]
 800d246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d24a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1d9      	bne.n	800d206 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	3314      	adds	r3, #20
 800d258:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d25a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d25c:	e853 3f00 	ldrex	r3, [r3]
 800d260:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d264:	f023 0301 	bic.w	r3, r3, #1
 800d268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	3314      	adds	r3, #20
 800d272:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d276:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d27a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d27e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d282:	e841 2300 	strex	r3, r2, [r1]
 800d286:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1e1      	bne.n	800d252 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	3314      	adds	r3, #20
 800d294:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d298:	e853 3f00 	ldrex	r3, [r3]
 800d29c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d29e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	3314      	adds	r3, #20
 800d2ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d2b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d2b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d2b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d2ba:	e841 2300 	strex	r3, r2, [r1]
 800d2be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d2c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1e3      	bne.n	800d28e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2220      	movs	r2, #32
 800d2ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	330c      	adds	r3, #12
 800d2da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2de:	e853 3f00 	ldrex	r3, [r3]
 800d2e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d2e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2e6:	f023 0310 	bic.w	r3, r3, #16
 800d2ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	330c      	adds	r3, #12
 800d2f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d2f8:	65ba      	str	r2, [r7, #88]	; 0x58
 800d2fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d2fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d300:	e841 2300 	strex	r3, r2, [r1]
 800d304:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d1e3      	bne.n	800d2d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d310:	4618      	mov	r0, r3
 800d312:	f7fb ff8f 	bl	8009234 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d31e:	b29b      	uxth	r3, r3
 800d320:	1ad3      	subs	r3, r2, r3
 800d322:	b29b      	uxth	r3, r3
 800d324:	4619      	mov	r1, r3
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f8b6 	bl	800d498 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d32c:	e099      	b.n	800d462 <HAL_UART_IRQHandler+0x50e>
 800d32e:	bf00      	nop
 800d330:	0800d6cf 	.word	0x0800d6cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d348:	b29b      	uxth	r3, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f000 808b 	beq.w	800d466 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d354:	2b00      	cmp	r3, #0
 800d356:	f000 8086 	beq.w	800d466 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	330c      	adds	r3, #12
 800d360:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d364:	e853 3f00 	ldrex	r3, [r3]
 800d368:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d36c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d370:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	330c      	adds	r3, #12
 800d37a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d37e:	647a      	str	r2, [r7, #68]	; 0x44
 800d380:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d382:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d386:	e841 2300 	strex	r3, r2, [r1]
 800d38a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d1e3      	bne.n	800d35a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	3314      	adds	r3, #20
 800d398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39c:	e853 3f00 	ldrex	r3, [r3]
 800d3a0:	623b      	str	r3, [r7, #32]
   return(result);
 800d3a2:	6a3b      	ldr	r3, [r7, #32]
 800d3a4:	f023 0301 	bic.w	r3, r3, #1
 800d3a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	3314      	adds	r3, #20
 800d3b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d3b6:	633a      	str	r2, [r7, #48]	; 0x30
 800d3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3be:	e841 2300 	strex	r3, r2, [r1]
 800d3c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d1e3      	bne.n	800d392 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2220      	movs	r2, #32
 800d3ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	330c      	adds	r3, #12
 800d3de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	e853 3f00 	ldrex	r3, [r3]
 800d3e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f023 0310 	bic.w	r3, r3, #16
 800d3ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	330c      	adds	r3, #12
 800d3f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d3fc:	61fa      	str	r2, [r7, #28]
 800d3fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d400:	69b9      	ldr	r1, [r7, #24]
 800d402:	69fa      	ldr	r2, [r7, #28]
 800d404:	e841 2300 	strex	r3, r2, [r1]
 800d408:	617b      	str	r3, [r7, #20]
   return(result);
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d1e3      	bne.n	800d3d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d410:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d414:	4619      	mov	r1, r3
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 f83e 	bl	800d498 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d41c:	e023      	b.n	800d466 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d426:	2b00      	cmp	r3, #0
 800d428:	d009      	beq.n	800d43e <HAL_UART_IRQHandler+0x4ea>
 800d42a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d432:	2b00      	cmp	r3, #0
 800d434:	d003      	beq.n	800d43e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f000 f95d 	bl	800d6f6 <UART_Transmit_IT>
    return;
 800d43c:	e014      	b.n	800d468 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d43e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00e      	beq.n	800d468 <HAL_UART_IRQHandler+0x514>
 800d44a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d452:	2b00      	cmp	r3, #0
 800d454:	d008      	beq.n	800d468 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 f99d 	bl	800d796 <UART_EndTransmit_IT>
    return;
 800d45c:	e004      	b.n	800d468 <HAL_UART_IRQHandler+0x514>
    return;
 800d45e:	bf00      	nop
 800d460:	e002      	b.n	800d468 <HAL_UART_IRQHandler+0x514>
      return;
 800d462:	bf00      	nop
 800d464:	e000      	b.n	800d468 <HAL_UART_IRQHandler+0x514>
      return;
 800d466:	bf00      	nop
  }
}
 800d468:	37e8      	adds	r7, #232	; 0xe8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop

0800d470 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d478:	bf00      	nop
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b090      	sub	sp, #64	; 0x40
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	603b      	str	r3, [r7, #0]
 800d4bc:	4613      	mov	r3, r2
 800d4be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4c0:	e050      	b.n	800d564 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4c8:	d04c      	beq.n	800d564 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d4ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d007      	beq.n	800d4e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800d4d0:	f7fb f864 	bl	800859c <HAL_GetTick>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d241      	bcs.n	800d564 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	330c      	adds	r3, #12
 800d4e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ea:	e853 3f00 	ldrex	r3, [r3]
 800d4ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	330c      	adds	r3, #12
 800d4fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d500:	637a      	str	r2, [r7, #52]	; 0x34
 800d502:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d508:	e841 2300 	strex	r3, r2, [r1]
 800d50c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1e5      	bne.n	800d4e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	3314      	adds	r3, #20
 800d51a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	e853 3f00 	ldrex	r3, [r3]
 800d522:	613b      	str	r3, [r7, #16]
   return(result);
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	f023 0301 	bic.w	r3, r3, #1
 800d52a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	3314      	adds	r3, #20
 800d532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d534:	623a      	str	r2, [r7, #32]
 800d536:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d538:	69f9      	ldr	r1, [r7, #28]
 800d53a:	6a3a      	ldr	r2, [r7, #32]
 800d53c:	e841 2300 	strex	r3, r2, [r1]
 800d540:	61bb      	str	r3, [r7, #24]
   return(result);
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d1e5      	bne.n	800d514 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2220      	movs	r2, #32
 800d54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2220      	movs	r2, #32
 800d554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d560:	2303      	movs	r3, #3
 800d562:	e00f      	b.n	800d584 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	4013      	ands	r3, r2
 800d56e:	68ba      	ldr	r2, [r7, #8]
 800d570:	429a      	cmp	r2, r3
 800d572:	bf0c      	ite	eq
 800d574:	2301      	moveq	r3, #1
 800d576:	2300      	movne	r3, #0
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	461a      	mov	r2, r3
 800d57c:	79fb      	ldrb	r3, [r7, #7]
 800d57e:	429a      	cmp	r2, r3
 800d580:	d09f      	beq.n	800d4c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3740      	adds	r7, #64	; 0x40
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	4613      	mov	r3, r2
 800d598:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	88fa      	ldrh	r2, [r7, #6]
 800d5a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	88fa      	ldrh	r2, [r7, #6]
 800d5aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2222      	movs	r2, #34	; 0x22
 800d5b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	691b      	ldr	r3, [r3, #16]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d007      	beq.n	800d5da <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	68da      	ldr	r2, [r3, #12]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	695a      	ldr	r2, [r3, #20]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f042 0201 	orr.w	r2, r2, #1
 800d5e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	68da      	ldr	r2, [r3, #12]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f042 0220 	orr.w	r2, r2, #32
 800d5f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3714      	adds	r7, #20
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr

0800d608 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d608:	b480      	push	{r7}
 800d60a:	b095      	sub	sp, #84	; 0x54
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	330c      	adds	r3, #12
 800d616:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d61a:	e853 3f00 	ldrex	r3, [r3]
 800d61e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d622:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d626:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	330c      	adds	r3, #12
 800d62e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d630:	643a      	str	r2, [r7, #64]	; 0x40
 800d632:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d634:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d636:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d638:	e841 2300 	strex	r3, r2, [r1]
 800d63c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d640:	2b00      	cmp	r3, #0
 800d642:	d1e5      	bne.n	800d610 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	3314      	adds	r3, #20
 800d64a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64c:	6a3b      	ldr	r3, [r7, #32]
 800d64e:	e853 3f00 	ldrex	r3, [r3]
 800d652:	61fb      	str	r3, [r7, #28]
   return(result);
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	f023 0301 	bic.w	r3, r3, #1
 800d65a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	3314      	adds	r3, #20
 800d662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d664:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d66a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d66c:	e841 2300 	strex	r3, r2, [r1]
 800d670:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1e5      	bne.n	800d644 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d119      	bne.n	800d6b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	330c      	adds	r3, #12
 800d686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	e853 3f00 	ldrex	r3, [r3]
 800d68e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	f023 0310 	bic.w	r3, r3, #16
 800d696:	647b      	str	r3, [r7, #68]	; 0x44
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	330c      	adds	r3, #12
 800d69e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6a0:	61ba      	str	r2, [r7, #24]
 800d6a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a4:	6979      	ldr	r1, [r7, #20]
 800d6a6:	69ba      	ldr	r2, [r7, #24]
 800d6a8:	e841 2300 	strex	r3, r2, [r1]
 800d6ac:	613b      	str	r3, [r7, #16]
   return(result);
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d1e5      	bne.n	800d680 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2220      	movs	r2, #32
 800d6b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d6c2:	bf00      	nop
 800d6c4:	3754      	adds	r7, #84	; 0x54
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr

0800d6ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b084      	sub	sp, #16
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f7ff fecb 	bl	800d484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6ee:	bf00      	nop
 800d6f0:	3710      	adds	r7, #16
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d6f6:	b480      	push	{r7}
 800d6f8:	b085      	sub	sp, #20
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d704:	b2db      	uxtb	r3, r3
 800d706:	2b21      	cmp	r3, #33	; 0x21
 800d708:	d13e      	bne.n	800d788 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d712:	d114      	bne.n	800d73e <UART_Transmit_IT+0x48>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	691b      	ldr	r3, [r3, #16]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d110      	bne.n	800d73e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6a1b      	ldr	r3, [r3, #32]
 800d720:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	881b      	ldrh	r3, [r3, #0]
 800d726:	461a      	mov	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d730:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6a1b      	ldr	r3, [r3, #32]
 800d736:	1c9a      	adds	r2, r3, #2
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	621a      	str	r2, [r3, #32]
 800d73c:	e008      	b.n	800d750 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a1b      	ldr	r3, [r3, #32]
 800d742:	1c59      	adds	r1, r3, #1
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	6211      	str	r1, [r2, #32]
 800d748:	781a      	ldrb	r2, [r3, #0]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d754:	b29b      	uxth	r3, r3
 800d756:	3b01      	subs	r3, #1
 800d758:	b29b      	uxth	r3, r3
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	4619      	mov	r1, r3
 800d75e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d760:	2b00      	cmp	r3, #0
 800d762:	d10f      	bne.n	800d784 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	68da      	ldr	r2, [r3, #12]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d772:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	68da      	ldr	r2, [r3, #12]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d782:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	e000      	b.n	800d78a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d788:	2302      	movs	r3, #2
  }
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3714      	adds	r7, #20
 800d78e:	46bd      	mov	sp, r7
 800d790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d794:	4770      	bx	lr

0800d796 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d796:	b580      	push	{r7, lr}
 800d798:	b082      	sub	sp, #8
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	68da      	ldr	r2, [r3, #12]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d7ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2220      	movs	r2, #32
 800d7b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7ff fe5a 	bl	800d470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b08c      	sub	sp, #48	; 0x30
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	2b22      	cmp	r3, #34	; 0x22
 800d7d8:	f040 80ab 	bne.w	800d932 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7e4:	d117      	bne.n	800d816 <UART_Receive_IT+0x50>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	691b      	ldr	r3, [r3, #16]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d113      	bne.n	800d816 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d804:	b29a      	uxth	r2, r3
 800d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d808:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d80e:	1c9a      	adds	r2, r3, #2
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	629a      	str	r2, [r3, #40]	; 0x28
 800d814:	e026      	b.n	800d864 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d81a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d81c:	2300      	movs	r3, #0
 800d81e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	689b      	ldr	r3, [r3, #8]
 800d824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d828:	d007      	beq.n	800d83a <UART_Receive_IT+0x74>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d10a      	bne.n	800d848 <UART_Receive_IT+0x82>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	691b      	ldr	r3, [r3, #16]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d106      	bne.n	800d848 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	b2da      	uxtb	r2, r3
 800d842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d844:	701a      	strb	r2, [r3, #0]
 800d846:	e008      	b.n	800d85a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d854:	b2da      	uxtb	r2, r3
 800d856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d858:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d85e:	1c5a      	adds	r2, r3, #1
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d868:	b29b      	uxth	r3, r3
 800d86a:	3b01      	subs	r3, #1
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	4619      	mov	r1, r3
 800d872:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d874:	2b00      	cmp	r3, #0
 800d876:	d15a      	bne.n	800d92e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68da      	ldr	r2, [r3, #12]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f022 0220 	bic.w	r2, r2, #32
 800d886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68da      	ldr	r2, [r3, #12]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d896:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	695a      	ldr	r2, [r3, #20]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f022 0201 	bic.w	r2, r2, #1
 800d8a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2220      	movs	r2, #32
 800d8ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d135      	bne.n	800d924 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	330c      	adds	r3, #12
 800d8c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	e853 3f00 	ldrex	r3, [r3]
 800d8cc:	613b      	str	r3, [r7, #16]
   return(result);
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	f023 0310 	bic.w	r3, r3, #16
 800d8d4:	627b      	str	r3, [r7, #36]	; 0x24
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	330c      	adds	r3, #12
 800d8dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8de:	623a      	str	r2, [r7, #32]
 800d8e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e2:	69f9      	ldr	r1, [r7, #28]
 800d8e4:	6a3a      	ldr	r2, [r7, #32]
 800d8e6:	e841 2300 	strex	r3, r2, [r1]
 800d8ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1e5      	bne.n	800d8be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f003 0310 	and.w	r3, r3, #16
 800d8fc:	2b10      	cmp	r3, #16
 800d8fe:	d10a      	bne.n	800d916 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d900:	2300      	movs	r3, #0
 800d902:	60fb      	str	r3, [r7, #12]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	60fb      	str	r3, [r7, #12]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	60fb      	str	r3, [r7, #12]
 800d914:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d91a:	4619      	mov	r1, r3
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7ff fdbb 	bl	800d498 <HAL_UARTEx_RxEventCallback>
 800d922:	e002      	b.n	800d92a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7f7 fe93 	bl	8005650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d92a:	2300      	movs	r3, #0
 800d92c:	e002      	b.n	800d934 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d92e:	2300      	movs	r3, #0
 800d930:	e000      	b.n	800d934 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d932:	2302      	movs	r3, #2
  }
}
 800d934:	4618      	mov	r0, r3
 800d936:	3730      	adds	r7, #48	; 0x30
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d93c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d940:	b0c0      	sub	sp, #256	; 0x100
 800d942:	af00      	add	r7, sp, #0
 800d944:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	691b      	ldr	r3, [r3, #16]
 800d950:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d958:	68d9      	ldr	r1, [r3, #12]
 800d95a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	ea40 0301 	orr.w	r3, r0, r1
 800d964:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d96a:	689a      	ldr	r2, [r3, #8]
 800d96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	431a      	orrs	r2, r3
 800d974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d978:	695b      	ldr	r3, [r3, #20]
 800d97a:	431a      	orrs	r2, r3
 800d97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d980:	69db      	ldr	r3, [r3, #28]
 800d982:	4313      	orrs	r3, r2
 800d984:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d994:	f021 010c 	bic.w	r1, r1, #12
 800d998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d9a2:	430b      	orrs	r3, r1
 800d9a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d9a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	695b      	ldr	r3, [r3, #20]
 800d9ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d9b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d9b6:	6999      	ldr	r1, [r3, #24]
 800d9b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	ea40 0301 	orr.w	r3, r0, r1
 800d9c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d9c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d9c8:	681a      	ldr	r2, [r3, #0]
 800d9ca:	4b8f      	ldr	r3, [pc, #572]	; (800dc08 <UART_SetConfig+0x2cc>)
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d005      	beq.n	800d9dc <UART_SetConfig+0xa0>
 800d9d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	4b8d      	ldr	r3, [pc, #564]	; (800dc0c <UART_SetConfig+0x2d0>)
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d104      	bne.n	800d9e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d9dc:	f7fd fb62 	bl	800b0a4 <HAL_RCC_GetPCLK2Freq>
 800d9e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d9e4:	e003      	b.n	800d9ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d9e6:	f7fd fb49 	bl	800b07c <HAL_RCC_GetPCLK1Freq>
 800d9ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d9f2:	69db      	ldr	r3, [r3, #28]
 800d9f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9f8:	f040 810c 	bne.w	800dc14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d9fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800da00:	2200      	movs	r2, #0
 800da02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800da06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800da0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800da0e:	4622      	mov	r2, r4
 800da10:	462b      	mov	r3, r5
 800da12:	1891      	adds	r1, r2, r2
 800da14:	65b9      	str	r1, [r7, #88]	; 0x58
 800da16:	415b      	adcs	r3, r3
 800da18:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800da1e:	4621      	mov	r1, r4
 800da20:	eb12 0801 	adds.w	r8, r2, r1
 800da24:	4629      	mov	r1, r5
 800da26:	eb43 0901 	adc.w	r9, r3, r1
 800da2a:	f04f 0200 	mov.w	r2, #0
 800da2e:	f04f 0300 	mov.w	r3, #0
 800da32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800da36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800da3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800da3e:	4690      	mov	r8, r2
 800da40:	4699      	mov	r9, r3
 800da42:	4623      	mov	r3, r4
 800da44:	eb18 0303 	adds.w	r3, r8, r3
 800da48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800da4c:	462b      	mov	r3, r5
 800da4e:	eb49 0303 	adc.w	r3, r9, r3
 800da52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800da56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	2200      	movs	r2, #0
 800da5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800da62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800da66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800da6a:	460b      	mov	r3, r1
 800da6c:	18db      	adds	r3, r3, r3
 800da6e:	653b      	str	r3, [r7, #80]	; 0x50
 800da70:	4613      	mov	r3, r2
 800da72:	eb42 0303 	adc.w	r3, r2, r3
 800da76:	657b      	str	r3, [r7, #84]	; 0x54
 800da78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800da7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800da80:	f7f3 f952 	bl	8000d28 <__aeabi_uldivmod>
 800da84:	4602      	mov	r2, r0
 800da86:	460b      	mov	r3, r1
 800da88:	4b61      	ldr	r3, [pc, #388]	; (800dc10 <UART_SetConfig+0x2d4>)
 800da8a:	fba3 2302 	umull	r2, r3, r3, r2
 800da8e:	095b      	lsrs	r3, r3, #5
 800da90:	011c      	lsls	r4, r3, #4
 800da92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800da96:	2200      	movs	r2, #0
 800da98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800da9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800daa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800daa4:	4642      	mov	r2, r8
 800daa6:	464b      	mov	r3, r9
 800daa8:	1891      	adds	r1, r2, r2
 800daaa:	64b9      	str	r1, [r7, #72]	; 0x48
 800daac:	415b      	adcs	r3, r3
 800daae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dab0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dab4:	4641      	mov	r1, r8
 800dab6:	eb12 0a01 	adds.w	sl, r2, r1
 800daba:	4649      	mov	r1, r9
 800dabc:	eb43 0b01 	adc.w	fp, r3, r1
 800dac0:	f04f 0200 	mov.w	r2, #0
 800dac4:	f04f 0300 	mov.w	r3, #0
 800dac8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800dacc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800dad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dad4:	4692      	mov	sl, r2
 800dad6:	469b      	mov	fp, r3
 800dad8:	4643      	mov	r3, r8
 800dada:	eb1a 0303 	adds.w	r3, sl, r3
 800dade:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dae2:	464b      	mov	r3, r9
 800dae4:	eb4b 0303 	adc.w	r3, fp, r3
 800dae8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800daec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800daf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800dafc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800db00:	460b      	mov	r3, r1
 800db02:	18db      	adds	r3, r3, r3
 800db04:	643b      	str	r3, [r7, #64]	; 0x40
 800db06:	4613      	mov	r3, r2
 800db08:	eb42 0303 	adc.w	r3, r2, r3
 800db0c:	647b      	str	r3, [r7, #68]	; 0x44
 800db0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800db12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800db16:	f7f3 f907 	bl	8000d28 <__aeabi_uldivmod>
 800db1a:	4602      	mov	r2, r0
 800db1c:	460b      	mov	r3, r1
 800db1e:	4611      	mov	r1, r2
 800db20:	4b3b      	ldr	r3, [pc, #236]	; (800dc10 <UART_SetConfig+0x2d4>)
 800db22:	fba3 2301 	umull	r2, r3, r3, r1
 800db26:	095b      	lsrs	r3, r3, #5
 800db28:	2264      	movs	r2, #100	; 0x64
 800db2a:	fb02 f303 	mul.w	r3, r2, r3
 800db2e:	1acb      	subs	r3, r1, r3
 800db30:	00db      	lsls	r3, r3, #3
 800db32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800db36:	4b36      	ldr	r3, [pc, #216]	; (800dc10 <UART_SetConfig+0x2d4>)
 800db38:	fba3 2302 	umull	r2, r3, r3, r2
 800db3c:	095b      	lsrs	r3, r3, #5
 800db3e:	005b      	lsls	r3, r3, #1
 800db40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800db44:	441c      	add	r4, r3
 800db46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800db4a:	2200      	movs	r2, #0
 800db4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800db50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800db54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800db58:	4642      	mov	r2, r8
 800db5a:	464b      	mov	r3, r9
 800db5c:	1891      	adds	r1, r2, r2
 800db5e:	63b9      	str	r1, [r7, #56]	; 0x38
 800db60:	415b      	adcs	r3, r3
 800db62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800db68:	4641      	mov	r1, r8
 800db6a:	1851      	adds	r1, r2, r1
 800db6c:	6339      	str	r1, [r7, #48]	; 0x30
 800db6e:	4649      	mov	r1, r9
 800db70:	414b      	adcs	r3, r1
 800db72:	637b      	str	r3, [r7, #52]	; 0x34
 800db74:	f04f 0200 	mov.w	r2, #0
 800db78:	f04f 0300 	mov.w	r3, #0
 800db7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800db80:	4659      	mov	r1, fp
 800db82:	00cb      	lsls	r3, r1, #3
 800db84:	4651      	mov	r1, sl
 800db86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800db8a:	4651      	mov	r1, sl
 800db8c:	00ca      	lsls	r2, r1, #3
 800db8e:	4610      	mov	r0, r2
 800db90:	4619      	mov	r1, r3
 800db92:	4603      	mov	r3, r0
 800db94:	4642      	mov	r2, r8
 800db96:	189b      	adds	r3, r3, r2
 800db98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800db9c:	464b      	mov	r3, r9
 800db9e:	460a      	mov	r2, r1
 800dba0:	eb42 0303 	adc.w	r3, r2, r3
 800dba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dbb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800dbb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	18db      	adds	r3, r3, r3
 800dbc0:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	eb42 0303 	adc.w	r3, r2, r3
 800dbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dbce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800dbd2:	f7f3 f8a9 	bl	8000d28 <__aeabi_uldivmod>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	460b      	mov	r3, r1
 800dbda:	4b0d      	ldr	r3, [pc, #52]	; (800dc10 <UART_SetConfig+0x2d4>)
 800dbdc:	fba3 1302 	umull	r1, r3, r3, r2
 800dbe0:	095b      	lsrs	r3, r3, #5
 800dbe2:	2164      	movs	r1, #100	; 0x64
 800dbe4:	fb01 f303 	mul.w	r3, r1, r3
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	00db      	lsls	r3, r3, #3
 800dbec:	3332      	adds	r3, #50	; 0x32
 800dbee:	4a08      	ldr	r2, [pc, #32]	; (800dc10 <UART_SetConfig+0x2d4>)
 800dbf0:	fba2 2303 	umull	r2, r3, r2, r3
 800dbf4:	095b      	lsrs	r3, r3, #5
 800dbf6:	f003 0207 	and.w	r2, r3, #7
 800dbfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4422      	add	r2, r4
 800dc02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800dc04:	e106      	b.n	800de14 <UART_SetConfig+0x4d8>
 800dc06:	bf00      	nop
 800dc08:	40011000 	.word	0x40011000
 800dc0c:	40011400 	.word	0x40011400
 800dc10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dc14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dc1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dc22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800dc26:	4642      	mov	r2, r8
 800dc28:	464b      	mov	r3, r9
 800dc2a:	1891      	adds	r1, r2, r2
 800dc2c:	6239      	str	r1, [r7, #32]
 800dc2e:	415b      	adcs	r3, r3
 800dc30:	627b      	str	r3, [r7, #36]	; 0x24
 800dc32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dc36:	4641      	mov	r1, r8
 800dc38:	1854      	adds	r4, r2, r1
 800dc3a:	4649      	mov	r1, r9
 800dc3c:	eb43 0501 	adc.w	r5, r3, r1
 800dc40:	f04f 0200 	mov.w	r2, #0
 800dc44:	f04f 0300 	mov.w	r3, #0
 800dc48:	00eb      	lsls	r3, r5, #3
 800dc4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dc4e:	00e2      	lsls	r2, r4, #3
 800dc50:	4614      	mov	r4, r2
 800dc52:	461d      	mov	r5, r3
 800dc54:	4643      	mov	r3, r8
 800dc56:	18e3      	adds	r3, r4, r3
 800dc58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dc5c:	464b      	mov	r3, r9
 800dc5e:	eb45 0303 	adc.w	r3, r5, r3
 800dc62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dc66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dc72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800dc76:	f04f 0200 	mov.w	r2, #0
 800dc7a:	f04f 0300 	mov.w	r3, #0
 800dc7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800dc82:	4629      	mov	r1, r5
 800dc84:	008b      	lsls	r3, r1, #2
 800dc86:	4621      	mov	r1, r4
 800dc88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dc8c:	4621      	mov	r1, r4
 800dc8e:	008a      	lsls	r2, r1, #2
 800dc90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800dc94:	f7f3 f848 	bl	8000d28 <__aeabi_uldivmod>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	4b60      	ldr	r3, [pc, #384]	; (800de20 <UART_SetConfig+0x4e4>)
 800dc9e:	fba3 2302 	umull	r2, r3, r3, r2
 800dca2:	095b      	lsrs	r3, r3, #5
 800dca4:	011c      	lsls	r4, r3, #4
 800dca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dcb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800dcb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800dcb8:	4642      	mov	r2, r8
 800dcba:	464b      	mov	r3, r9
 800dcbc:	1891      	adds	r1, r2, r2
 800dcbe:	61b9      	str	r1, [r7, #24]
 800dcc0:	415b      	adcs	r3, r3
 800dcc2:	61fb      	str	r3, [r7, #28]
 800dcc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dcc8:	4641      	mov	r1, r8
 800dcca:	1851      	adds	r1, r2, r1
 800dccc:	6139      	str	r1, [r7, #16]
 800dcce:	4649      	mov	r1, r9
 800dcd0:	414b      	adcs	r3, r1
 800dcd2:	617b      	str	r3, [r7, #20]
 800dcd4:	f04f 0200 	mov.w	r2, #0
 800dcd8:	f04f 0300 	mov.w	r3, #0
 800dcdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dce0:	4659      	mov	r1, fp
 800dce2:	00cb      	lsls	r3, r1, #3
 800dce4:	4651      	mov	r1, sl
 800dce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dcea:	4651      	mov	r1, sl
 800dcec:	00ca      	lsls	r2, r1, #3
 800dcee:	4610      	mov	r0, r2
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	4642      	mov	r2, r8
 800dcf6:	189b      	adds	r3, r3, r2
 800dcf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dcfc:	464b      	mov	r3, r9
 800dcfe:	460a      	mov	r2, r1
 800dd00:	eb42 0303 	adc.w	r3, r2, r3
 800dd04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dd08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	67bb      	str	r3, [r7, #120]	; 0x78
 800dd12:	67fa      	str	r2, [r7, #124]	; 0x7c
 800dd14:	f04f 0200 	mov.w	r2, #0
 800dd18:	f04f 0300 	mov.w	r3, #0
 800dd1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800dd20:	4649      	mov	r1, r9
 800dd22:	008b      	lsls	r3, r1, #2
 800dd24:	4641      	mov	r1, r8
 800dd26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dd2a:	4641      	mov	r1, r8
 800dd2c:	008a      	lsls	r2, r1, #2
 800dd2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800dd32:	f7f2 fff9 	bl	8000d28 <__aeabi_uldivmod>
 800dd36:	4602      	mov	r2, r0
 800dd38:	460b      	mov	r3, r1
 800dd3a:	4611      	mov	r1, r2
 800dd3c:	4b38      	ldr	r3, [pc, #224]	; (800de20 <UART_SetConfig+0x4e4>)
 800dd3e:	fba3 2301 	umull	r2, r3, r3, r1
 800dd42:	095b      	lsrs	r3, r3, #5
 800dd44:	2264      	movs	r2, #100	; 0x64
 800dd46:	fb02 f303 	mul.w	r3, r2, r3
 800dd4a:	1acb      	subs	r3, r1, r3
 800dd4c:	011b      	lsls	r3, r3, #4
 800dd4e:	3332      	adds	r3, #50	; 0x32
 800dd50:	4a33      	ldr	r2, [pc, #204]	; (800de20 <UART_SetConfig+0x4e4>)
 800dd52:	fba2 2303 	umull	r2, r3, r2, r3
 800dd56:	095b      	lsrs	r3, r3, #5
 800dd58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd5c:	441c      	add	r4, r3
 800dd5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dd62:	2200      	movs	r2, #0
 800dd64:	673b      	str	r3, [r7, #112]	; 0x70
 800dd66:	677a      	str	r2, [r7, #116]	; 0x74
 800dd68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800dd6c:	4642      	mov	r2, r8
 800dd6e:	464b      	mov	r3, r9
 800dd70:	1891      	adds	r1, r2, r2
 800dd72:	60b9      	str	r1, [r7, #8]
 800dd74:	415b      	adcs	r3, r3
 800dd76:	60fb      	str	r3, [r7, #12]
 800dd78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dd7c:	4641      	mov	r1, r8
 800dd7e:	1851      	adds	r1, r2, r1
 800dd80:	6039      	str	r1, [r7, #0]
 800dd82:	4649      	mov	r1, r9
 800dd84:	414b      	adcs	r3, r1
 800dd86:	607b      	str	r3, [r7, #4]
 800dd88:	f04f 0200 	mov.w	r2, #0
 800dd8c:	f04f 0300 	mov.w	r3, #0
 800dd90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dd94:	4659      	mov	r1, fp
 800dd96:	00cb      	lsls	r3, r1, #3
 800dd98:	4651      	mov	r1, sl
 800dd9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dd9e:	4651      	mov	r1, sl
 800dda0:	00ca      	lsls	r2, r1, #3
 800dda2:	4610      	mov	r0, r2
 800dda4:	4619      	mov	r1, r3
 800dda6:	4603      	mov	r3, r0
 800dda8:	4642      	mov	r2, r8
 800ddaa:	189b      	adds	r3, r3, r2
 800ddac:	66bb      	str	r3, [r7, #104]	; 0x68
 800ddae:	464b      	mov	r3, r9
 800ddb0:	460a      	mov	r2, r1
 800ddb2:	eb42 0303 	adc.w	r3, r2, r3
 800ddb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ddb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	663b      	str	r3, [r7, #96]	; 0x60
 800ddc2:	667a      	str	r2, [r7, #100]	; 0x64
 800ddc4:	f04f 0200 	mov.w	r2, #0
 800ddc8:	f04f 0300 	mov.w	r3, #0
 800ddcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ddd0:	4649      	mov	r1, r9
 800ddd2:	008b      	lsls	r3, r1, #2
 800ddd4:	4641      	mov	r1, r8
 800ddd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ddda:	4641      	mov	r1, r8
 800dddc:	008a      	lsls	r2, r1, #2
 800ddde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dde2:	f7f2 ffa1 	bl	8000d28 <__aeabi_uldivmod>
 800dde6:	4602      	mov	r2, r0
 800dde8:	460b      	mov	r3, r1
 800ddea:	4b0d      	ldr	r3, [pc, #52]	; (800de20 <UART_SetConfig+0x4e4>)
 800ddec:	fba3 1302 	umull	r1, r3, r3, r2
 800ddf0:	095b      	lsrs	r3, r3, #5
 800ddf2:	2164      	movs	r1, #100	; 0x64
 800ddf4:	fb01 f303 	mul.w	r3, r1, r3
 800ddf8:	1ad3      	subs	r3, r2, r3
 800ddfa:	011b      	lsls	r3, r3, #4
 800ddfc:	3332      	adds	r3, #50	; 0x32
 800ddfe:	4a08      	ldr	r2, [pc, #32]	; (800de20 <UART_SetConfig+0x4e4>)
 800de00:	fba2 2303 	umull	r2, r3, r2, r3
 800de04:	095b      	lsrs	r3, r3, #5
 800de06:	f003 020f 	and.w	r2, r3, #15
 800de0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4422      	add	r2, r4
 800de12:	609a      	str	r2, [r3, #8]
}
 800de14:	bf00      	nop
 800de16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800de1a:	46bd      	mov	sp, r7
 800de1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800de20:	51eb851f 	.word	0x51eb851f

0800de24 <__cvt>:
 800de24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de28:	ec55 4b10 	vmov	r4, r5, d0
 800de2c:	2d00      	cmp	r5, #0
 800de2e:	460e      	mov	r6, r1
 800de30:	4619      	mov	r1, r3
 800de32:	462b      	mov	r3, r5
 800de34:	bfbb      	ittet	lt
 800de36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800de3a:	461d      	movlt	r5, r3
 800de3c:	2300      	movge	r3, #0
 800de3e:	232d      	movlt	r3, #45	; 0x2d
 800de40:	700b      	strb	r3, [r1, #0]
 800de42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800de48:	4691      	mov	r9, r2
 800de4a:	f023 0820 	bic.w	r8, r3, #32
 800de4e:	bfbc      	itt	lt
 800de50:	4622      	movlt	r2, r4
 800de52:	4614      	movlt	r4, r2
 800de54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de58:	d005      	beq.n	800de66 <__cvt+0x42>
 800de5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800de5e:	d100      	bne.n	800de62 <__cvt+0x3e>
 800de60:	3601      	adds	r6, #1
 800de62:	2102      	movs	r1, #2
 800de64:	e000      	b.n	800de68 <__cvt+0x44>
 800de66:	2103      	movs	r1, #3
 800de68:	ab03      	add	r3, sp, #12
 800de6a:	9301      	str	r3, [sp, #4]
 800de6c:	ab02      	add	r3, sp, #8
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	ec45 4b10 	vmov	d0, r4, r5
 800de74:	4653      	mov	r3, sl
 800de76:	4632      	mov	r2, r6
 800de78:	f001 f88a 	bl	800ef90 <_dtoa_r>
 800de7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800de80:	4607      	mov	r7, r0
 800de82:	d102      	bne.n	800de8a <__cvt+0x66>
 800de84:	f019 0f01 	tst.w	r9, #1
 800de88:	d022      	beq.n	800ded0 <__cvt+0xac>
 800de8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de8e:	eb07 0906 	add.w	r9, r7, r6
 800de92:	d110      	bne.n	800deb6 <__cvt+0x92>
 800de94:	783b      	ldrb	r3, [r7, #0]
 800de96:	2b30      	cmp	r3, #48	; 0x30
 800de98:	d10a      	bne.n	800deb0 <__cvt+0x8c>
 800de9a:	2200      	movs	r2, #0
 800de9c:	2300      	movs	r3, #0
 800de9e:	4620      	mov	r0, r4
 800dea0:	4629      	mov	r1, r5
 800dea2:	f7f2 fe31 	bl	8000b08 <__aeabi_dcmpeq>
 800dea6:	b918      	cbnz	r0, 800deb0 <__cvt+0x8c>
 800dea8:	f1c6 0601 	rsb	r6, r6, #1
 800deac:	f8ca 6000 	str.w	r6, [sl]
 800deb0:	f8da 3000 	ldr.w	r3, [sl]
 800deb4:	4499      	add	r9, r3
 800deb6:	2200      	movs	r2, #0
 800deb8:	2300      	movs	r3, #0
 800deba:	4620      	mov	r0, r4
 800debc:	4629      	mov	r1, r5
 800debe:	f7f2 fe23 	bl	8000b08 <__aeabi_dcmpeq>
 800dec2:	b108      	cbz	r0, 800dec8 <__cvt+0xa4>
 800dec4:	f8cd 900c 	str.w	r9, [sp, #12]
 800dec8:	2230      	movs	r2, #48	; 0x30
 800deca:	9b03      	ldr	r3, [sp, #12]
 800decc:	454b      	cmp	r3, r9
 800dece:	d307      	bcc.n	800dee0 <__cvt+0xbc>
 800ded0:	9b03      	ldr	r3, [sp, #12]
 800ded2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ded4:	1bdb      	subs	r3, r3, r7
 800ded6:	4638      	mov	r0, r7
 800ded8:	6013      	str	r3, [r2, #0]
 800deda:	b004      	add	sp, #16
 800dedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dee0:	1c59      	adds	r1, r3, #1
 800dee2:	9103      	str	r1, [sp, #12]
 800dee4:	701a      	strb	r2, [r3, #0]
 800dee6:	e7f0      	b.n	800deca <__cvt+0xa6>

0800dee8 <__exponent>:
 800dee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800deea:	4603      	mov	r3, r0
 800deec:	2900      	cmp	r1, #0
 800deee:	bfb8      	it	lt
 800def0:	4249      	neglt	r1, r1
 800def2:	f803 2b02 	strb.w	r2, [r3], #2
 800def6:	bfb4      	ite	lt
 800def8:	222d      	movlt	r2, #45	; 0x2d
 800defa:	222b      	movge	r2, #43	; 0x2b
 800defc:	2909      	cmp	r1, #9
 800defe:	7042      	strb	r2, [r0, #1]
 800df00:	dd2a      	ble.n	800df58 <__exponent+0x70>
 800df02:	f10d 0207 	add.w	r2, sp, #7
 800df06:	4617      	mov	r7, r2
 800df08:	260a      	movs	r6, #10
 800df0a:	4694      	mov	ip, r2
 800df0c:	fb91 f5f6 	sdiv	r5, r1, r6
 800df10:	fb06 1415 	mls	r4, r6, r5, r1
 800df14:	3430      	adds	r4, #48	; 0x30
 800df16:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800df1a:	460c      	mov	r4, r1
 800df1c:	2c63      	cmp	r4, #99	; 0x63
 800df1e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800df22:	4629      	mov	r1, r5
 800df24:	dcf1      	bgt.n	800df0a <__exponent+0x22>
 800df26:	3130      	adds	r1, #48	; 0x30
 800df28:	f1ac 0402 	sub.w	r4, ip, #2
 800df2c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800df30:	1c41      	adds	r1, r0, #1
 800df32:	4622      	mov	r2, r4
 800df34:	42ba      	cmp	r2, r7
 800df36:	d30a      	bcc.n	800df4e <__exponent+0x66>
 800df38:	f10d 0209 	add.w	r2, sp, #9
 800df3c:	eba2 020c 	sub.w	r2, r2, ip
 800df40:	42bc      	cmp	r4, r7
 800df42:	bf88      	it	hi
 800df44:	2200      	movhi	r2, #0
 800df46:	4413      	add	r3, r2
 800df48:	1a18      	subs	r0, r3, r0
 800df4a:	b003      	add	sp, #12
 800df4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df4e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800df52:	f801 5f01 	strb.w	r5, [r1, #1]!
 800df56:	e7ed      	b.n	800df34 <__exponent+0x4c>
 800df58:	2330      	movs	r3, #48	; 0x30
 800df5a:	3130      	adds	r1, #48	; 0x30
 800df5c:	7083      	strb	r3, [r0, #2]
 800df5e:	70c1      	strb	r1, [r0, #3]
 800df60:	1d03      	adds	r3, r0, #4
 800df62:	e7f1      	b.n	800df48 <__exponent+0x60>

0800df64 <_printf_float>:
 800df64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df68:	ed2d 8b02 	vpush	{d8}
 800df6c:	b08d      	sub	sp, #52	; 0x34
 800df6e:	460c      	mov	r4, r1
 800df70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800df74:	4616      	mov	r6, r2
 800df76:	461f      	mov	r7, r3
 800df78:	4605      	mov	r5, r0
 800df7a:	f000 fecd 	bl	800ed18 <_localeconv_r>
 800df7e:	f8d0 a000 	ldr.w	sl, [r0]
 800df82:	4650      	mov	r0, sl
 800df84:	f7f2 f994 	bl	80002b0 <strlen>
 800df88:	2300      	movs	r3, #0
 800df8a:	930a      	str	r3, [sp, #40]	; 0x28
 800df8c:	6823      	ldr	r3, [r4, #0]
 800df8e:	9305      	str	r3, [sp, #20]
 800df90:	f8d8 3000 	ldr.w	r3, [r8]
 800df94:	f894 b018 	ldrb.w	fp, [r4, #24]
 800df98:	3307      	adds	r3, #7
 800df9a:	f023 0307 	bic.w	r3, r3, #7
 800df9e:	f103 0208 	add.w	r2, r3, #8
 800dfa2:	f8c8 2000 	str.w	r2, [r8]
 800dfa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dfaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dfae:	9307      	str	r3, [sp, #28]
 800dfb0:	f8cd 8018 	str.w	r8, [sp, #24]
 800dfb4:	ee08 0a10 	vmov	s16, r0
 800dfb8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800dfbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dfc0:	4b9e      	ldr	r3, [pc, #632]	; (800e23c <_printf_float+0x2d8>)
 800dfc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfc6:	f7f2 fdd1 	bl	8000b6c <__aeabi_dcmpun>
 800dfca:	bb88      	cbnz	r0, 800e030 <_printf_float+0xcc>
 800dfcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dfd0:	4b9a      	ldr	r3, [pc, #616]	; (800e23c <_printf_float+0x2d8>)
 800dfd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfd6:	f7f2 fdab 	bl	8000b30 <__aeabi_dcmple>
 800dfda:	bb48      	cbnz	r0, 800e030 <_printf_float+0xcc>
 800dfdc:	2200      	movs	r2, #0
 800dfde:	2300      	movs	r3, #0
 800dfe0:	4640      	mov	r0, r8
 800dfe2:	4649      	mov	r1, r9
 800dfe4:	f7f2 fd9a 	bl	8000b1c <__aeabi_dcmplt>
 800dfe8:	b110      	cbz	r0, 800dff0 <_printf_float+0x8c>
 800dfea:	232d      	movs	r3, #45	; 0x2d
 800dfec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dff0:	4a93      	ldr	r2, [pc, #588]	; (800e240 <_printf_float+0x2dc>)
 800dff2:	4b94      	ldr	r3, [pc, #592]	; (800e244 <_printf_float+0x2e0>)
 800dff4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dff8:	bf94      	ite	ls
 800dffa:	4690      	movls	r8, r2
 800dffc:	4698      	movhi	r8, r3
 800dffe:	2303      	movs	r3, #3
 800e000:	6123      	str	r3, [r4, #16]
 800e002:	9b05      	ldr	r3, [sp, #20]
 800e004:	f023 0304 	bic.w	r3, r3, #4
 800e008:	6023      	str	r3, [r4, #0]
 800e00a:	f04f 0900 	mov.w	r9, #0
 800e00e:	9700      	str	r7, [sp, #0]
 800e010:	4633      	mov	r3, r6
 800e012:	aa0b      	add	r2, sp, #44	; 0x2c
 800e014:	4621      	mov	r1, r4
 800e016:	4628      	mov	r0, r5
 800e018:	f000 fa82 	bl	800e520 <_printf_common>
 800e01c:	3001      	adds	r0, #1
 800e01e:	f040 8090 	bne.w	800e142 <_printf_float+0x1de>
 800e022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e026:	b00d      	add	sp, #52	; 0x34
 800e028:	ecbd 8b02 	vpop	{d8}
 800e02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e030:	4642      	mov	r2, r8
 800e032:	464b      	mov	r3, r9
 800e034:	4640      	mov	r0, r8
 800e036:	4649      	mov	r1, r9
 800e038:	f7f2 fd98 	bl	8000b6c <__aeabi_dcmpun>
 800e03c:	b140      	cbz	r0, 800e050 <_printf_float+0xec>
 800e03e:	464b      	mov	r3, r9
 800e040:	2b00      	cmp	r3, #0
 800e042:	bfbc      	itt	lt
 800e044:	232d      	movlt	r3, #45	; 0x2d
 800e046:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e04a:	4a7f      	ldr	r2, [pc, #508]	; (800e248 <_printf_float+0x2e4>)
 800e04c:	4b7f      	ldr	r3, [pc, #508]	; (800e24c <_printf_float+0x2e8>)
 800e04e:	e7d1      	b.n	800dff4 <_printf_float+0x90>
 800e050:	6863      	ldr	r3, [r4, #4]
 800e052:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e056:	9206      	str	r2, [sp, #24]
 800e058:	1c5a      	adds	r2, r3, #1
 800e05a:	d13f      	bne.n	800e0dc <_printf_float+0x178>
 800e05c:	2306      	movs	r3, #6
 800e05e:	6063      	str	r3, [r4, #4]
 800e060:	9b05      	ldr	r3, [sp, #20]
 800e062:	6861      	ldr	r1, [r4, #4]
 800e064:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e068:	2300      	movs	r3, #0
 800e06a:	9303      	str	r3, [sp, #12]
 800e06c:	ab0a      	add	r3, sp, #40	; 0x28
 800e06e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e072:	ab09      	add	r3, sp, #36	; 0x24
 800e074:	ec49 8b10 	vmov	d0, r8, r9
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	6022      	str	r2, [r4, #0]
 800e07c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e080:	4628      	mov	r0, r5
 800e082:	f7ff fecf 	bl	800de24 <__cvt>
 800e086:	9b06      	ldr	r3, [sp, #24]
 800e088:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e08a:	2b47      	cmp	r3, #71	; 0x47
 800e08c:	4680      	mov	r8, r0
 800e08e:	d108      	bne.n	800e0a2 <_printf_float+0x13e>
 800e090:	1cc8      	adds	r0, r1, #3
 800e092:	db02      	blt.n	800e09a <_printf_float+0x136>
 800e094:	6863      	ldr	r3, [r4, #4]
 800e096:	4299      	cmp	r1, r3
 800e098:	dd41      	ble.n	800e11e <_printf_float+0x1ba>
 800e09a:	f1ab 0302 	sub.w	r3, fp, #2
 800e09e:	fa5f fb83 	uxtb.w	fp, r3
 800e0a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e0a6:	d820      	bhi.n	800e0ea <_printf_float+0x186>
 800e0a8:	3901      	subs	r1, #1
 800e0aa:	465a      	mov	r2, fp
 800e0ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e0b0:	9109      	str	r1, [sp, #36]	; 0x24
 800e0b2:	f7ff ff19 	bl	800dee8 <__exponent>
 800e0b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0b8:	1813      	adds	r3, r2, r0
 800e0ba:	2a01      	cmp	r2, #1
 800e0bc:	4681      	mov	r9, r0
 800e0be:	6123      	str	r3, [r4, #16]
 800e0c0:	dc02      	bgt.n	800e0c8 <_printf_float+0x164>
 800e0c2:	6822      	ldr	r2, [r4, #0]
 800e0c4:	07d2      	lsls	r2, r2, #31
 800e0c6:	d501      	bpl.n	800e0cc <_printf_float+0x168>
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	6123      	str	r3, [r4, #16]
 800e0cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d09c      	beq.n	800e00e <_printf_float+0xaa>
 800e0d4:	232d      	movs	r3, #45	; 0x2d
 800e0d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0da:	e798      	b.n	800e00e <_printf_float+0xaa>
 800e0dc:	9a06      	ldr	r2, [sp, #24]
 800e0de:	2a47      	cmp	r2, #71	; 0x47
 800e0e0:	d1be      	bne.n	800e060 <_printf_float+0xfc>
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d1bc      	bne.n	800e060 <_printf_float+0xfc>
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e7b9      	b.n	800e05e <_printf_float+0xfa>
 800e0ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e0ee:	d118      	bne.n	800e122 <_printf_float+0x1be>
 800e0f0:	2900      	cmp	r1, #0
 800e0f2:	6863      	ldr	r3, [r4, #4]
 800e0f4:	dd0b      	ble.n	800e10e <_printf_float+0x1aa>
 800e0f6:	6121      	str	r1, [r4, #16]
 800e0f8:	b913      	cbnz	r3, 800e100 <_printf_float+0x19c>
 800e0fa:	6822      	ldr	r2, [r4, #0]
 800e0fc:	07d0      	lsls	r0, r2, #31
 800e0fe:	d502      	bpl.n	800e106 <_printf_float+0x1a2>
 800e100:	3301      	adds	r3, #1
 800e102:	440b      	add	r3, r1
 800e104:	6123      	str	r3, [r4, #16]
 800e106:	65a1      	str	r1, [r4, #88]	; 0x58
 800e108:	f04f 0900 	mov.w	r9, #0
 800e10c:	e7de      	b.n	800e0cc <_printf_float+0x168>
 800e10e:	b913      	cbnz	r3, 800e116 <_printf_float+0x1b2>
 800e110:	6822      	ldr	r2, [r4, #0]
 800e112:	07d2      	lsls	r2, r2, #31
 800e114:	d501      	bpl.n	800e11a <_printf_float+0x1b6>
 800e116:	3302      	adds	r3, #2
 800e118:	e7f4      	b.n	800e104 <_printf_float+0x1a0>
 800e11a:	2301      	movs	r3, #1
 800e11c:	e7f2      	b.n	800e104 <_printf_float+0x1a0>
 800e11e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e124:	4299      	cmp	r1, r3
 800e126:	db05      	blt.n	800e134 <_printf_float+0x1d0>
 800e128:	6823      	ldr	r3, [r4, #0]
 800e12a:	6121      	str	r1, [r4, #16]
 800e12c:	07d8      	lsls	r0, r3, #31
 800e12e:	d5ea      	bpl.n	800e106 <_printf_float+0x1a2>
 800e130:	1c4b      	adds	r3, r1, #1
 800e132:	e7e7      	b.n	800e104 <_printf_float+0x1a0>
 800e134:	2900      	cmp	r1, #0
 800e136:	bfd4      	ite	le
 800e138:	f1c1 0202 	rsble	r2, r1, #2
 800e13c:	2201      	movgt	r2, #1
 800e13e:	4413      	add	r3, r2
 800e140:	e7e0      	b.n	800e104 <_printf_float+0x1a0>
 800e142:	6823      	ldr	r3, [r4, #0]
 800e144:	055a      	lsls	r2, r3, #21
 800e146:	d407      	bmi.n	800e158 <_printf_float+0x1f4>
 800e148:	6923      	ldr	r3, [r4, #16]
 800e14a:	4642      	mov	r2, r8
 800e14c:	4631      	mov	r1, r6
 800e14e:	4628      	mov	r0, r5
 800e150:	47b8      	blx	r7
 800e152:	3001      	adds	r0, #1
 800e154:	d12c      	bne.n	800e1b0 <_printf_float+0x24c>
 800e156:	e764      	b.n	800e022 <_printf_float+0xbe>
 800e158:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e15c:	f240 80e0 	bls.w	800e320 <_printf_float+0x3bc>
 800e160:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e164:	2200      	movs	r2, #0
 800e166:	2300      	movs	r3, #0
 800e168:	f7f2 fcce 	bl	8000b08 <__aeabi_dcmpeq>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d034      	beq.n	800e1da <_printf_float+0x276>
 800e170:	4a37      	ldr	r2, [pc, #220]	; (800e250 <_printf_float+0x2ec>)
 800e172:	2301      	movs	r3, #1
 800e174:	4631      	mov	r1, r6
 800e176:	4628      	mov	r0, r5
 800e178:	47b8      	blx	r7
 800e17a:	3001      	adds	r0, #1
 800e17c:	f43f af51 	beq.w	800e022 <_printf_float+0xbe>
 800e180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e184:	429a      	cmp	r2, r3
 800e186:	db02      	blt.n	800e18e <_printf_float+0x22a>
 800e188:	6823      	ldr	r3, [r4, #0]
 800e18a:	07d8      	lsls	r0, r3, #31
 800e18c:	d510      	bpl.n	800e1b0 <_printf_float+0x24c>
 800e18e:	ee18 3a10 	vmov	r3, s16
 800e192:	4652      	mov	r2, sl
 800e194:	4631      	mov	r1, r6
 800e196:	4628      	mov	r0, r5
 800e198:	47b8      	blx	r7
 800e19a:	3001      	adds	r0, #1
 800e19c:	f43f af41 	beq.w	800e022 <_printf_float+0xbe>
 800e1a0:	f04f 0800 	mov.w	r8, #0
 800e1a4:	f104 091a 	add.w	r9, r4, #26
 800e1a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	4543      	cmp	r3, r8
 800e1ae:	dc09      	bgt.n	800e1c4 <_printf_float+0x260>
 800e1b0:	6823      	ldr	r3, [r4, #0]
 800e1b2:	079b      	lsls	r3, r3, #30
 800e1b4:	f100 8107 	bmi.w	800e3c6 <_printf_float+0x462>
 800e1b8:	68e0      	ldr	r0, [r4, #12]
 800e1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1bc:	4298      	cmp	r0, r3
 800e1be:	bfb8      	it	lt
 800e1c0:	4618      	movlt	r0, r3
 800e1c2:	e730      	b.n	800e026 <_printf_float+0xc2>
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	464a      	mov	r2, r9
 800e1c8:	4631      	mov	r1, r6
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	47b8      	blx	r7
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	f43f af27 	beq.w	800e022 <_printf_float+0xbe>
 800e1d4:	f108 0801 	add.w	r8, r8, #1
 800e1d8:	e7e6      	b.n	800e1a8 <_printf_float+0x244>
 800e1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	dc39      	bgt.n	800e254 <_printf_float+0x2f0>
 800e1e0:	4a1b      	ldr	r2, [pc, #108]	; (800e250 <_printf_float+0x2ec>)
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	4631      	mov	r1, r6
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	47b8      	blx	r7
 800e1ea:	3001      	adds	r0, #1
 800e1ec:	f43f af19 	beq.w	800e022 <_printf_float+0xbe>
 800e1f0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	d102      	bne.n	800e1fe <_printf_float+0x29a>
 800e1f8:	6823      	ldr	r3, [r4, #0]
 800e1fa:	07d9      	lsls	r1, r3, #31
 800e1fc:	d5d8      	bpl.n	800e1b0 <_printf_float+0x24c>
 800e1fe:	ee18 3a10 	vmov	r3, s16
 800e202:	4652      	mov	r2, sl
 800e204:	4631      	mov	r1, r6
 800e206:	4628      	mov	r0, r5
 800e208:	47b8      	blx	r7
 800e20a:	3001      	adds	r0, #1
 800e20c:	f43f af09 	beq.w	800e022 <_printf_float+0xbe>
 800e210:	f04f 0900 	mov.w	r9, #0
 800e214:	f104 0a1a 	add.w	sl, r4, #26
 800e218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e21a:	425b      	negs	r3, r3
 800e21c:	454b      	cmp	r3, r9
 800e21e:	dc01      	bgt.n	800e224 <_printf_float+0x2c0>
 800e220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e222:	e792      	b.n	800e14a <_printf_float+0x1e6>
 800e224:	2301      	movs	r3, #1
 800e226:	4652      	mov	r2, sl
 800e228:	4631      	mov	r1, r6
 800e22a:	4628      	mov	r0, r5
 800e22c:	47b8      	blx	r7
 800e22e:	3001      	adds	r0, #1
 800e230:	f43f aef7 	beq.w	800e022 <_printf_float+0xbe>
 800e234:	f109 0901 	add.w	r9, r9, #1
 800e238:	e7ee      	b.n	800e218 <_printf_float+0x2b4>
 800e23a:	bf00      	nop
 800e23c:	7fefffff 	.word	0x7fefffff
 800e240:	08016608 	.word	0x08016608
 800e244:	0801660c 	.word	0x0801660c
 800e248:	08016610 	.word	0x08016610
 800e24c:	08016614 	.word	0x08016614
 800e250:	0801682b 	.word	0x0801682b
 800e254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e256:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e258:	429a      	cmp	r2, r3
 800e25a:	bfa8      	it	ge
 800e25c:	461a      	movge	r2, r3
 800e25e:	2a00      	cmp	r2, #0
 800e260:	4691      	mov	r9, r2
 800e262:	dc37      	bgt.n	800e2d4 <_printf_float+0x370>
 800e264:	f04f 0b00 	mov.w	fp, #0
 800e268:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e26c:	f104 021a 	add.w	r2, r4, #26
 800e270:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e272:	9305      	str	r3, [sp, #20]
 800e274:	eba3 0309 	sub.w	r3, r3, r9
 800e278:	455b      	cmp	r3, fp
 800e27a:	dc33      	bgt.n	800e2e4 <_printf_float+0x380>
 800e27c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e280:	429a      	cmp	r2, r3
 800e282:	db3b      	blt.n	800e2fc <_printf_float+0x398>
 800e284:	6823      	ldr	r3, [r4, #0]
 800e286:	07da      	lsls	r2, r3, #31
 800e288:	d438      	bmi.n	800e2fc <_printf_float+0x398>
 800e28a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e28e:	eba2 0903 	sub.w	r9, r2, r3
 800e292:	9b05      	ldr	r3, [sp, #20]
 800e294:	1ad2      	subs	r2, r2, r3
 800e296:	4591      	cmp	r9, r2
 800e298:	bfa8      	it	ge
 800e29a:	4691      	movge	r9, r2
 800e29c:	f1b9 0f00 	cmp.w	r9, #0
 800e2a0:	dc35      	bgt.n	800e30e <_printf_float+0x3aa>
 800e2a2:	f04f 0800 	mov.w	r8, #0
 800e2a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2aa:	f104 0a1a 	add.w	sl, r4, #26
 800e2ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2b2:	1a9b      	subs	r3, r3, r2
 800e2b4:	eba3 0309 	sub.w	r3, r3, r9
 800e2b8:	4543      	cmp	r3, r8
 800e2ba:	f77f af79 	ble.w	800e1b0 <_printf_float+0x24c>
 800e2be:	2301      	movs	r3, #1
 800e2c0:	4652      	mov	r2, sl
 800e2c2:	4631      	mov	r1, r6
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	47b8      	blx	r7
 800e2c8:	3001      	adds	r0, #1
 800e2ca:	f43f aeaa 	beq.w	800e022 <_printf_float+0xbe>
 800e2ce:	f108 0801 	add.w	r8, r8, #1
 800e2d2:	e7ec      	b.n	800e2ae <_printf_float+0x34a>
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	4642      	mov	r2, r8
 800e2da:	4628      	mov	r0, r5
 800e2dc:	47b8      	blx	r7
 800e2de:	3001      	adds	r0, #1
 800e2e0:	d1c0      	bne.n	800e264 <_printf_float+0x300>
 800e2e2:	e69e      	b.n	800e022 <_printf_float+0xbe>
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	4631      	mov	r1, r6
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	9205      	str	r2, [sp, #20]
 800e2ec:	47b8      	blx	r7
 800e2ee:	3001      	adds	r0, #1
 800e2f0:	f43f ae97 	beq.w	800e022 <_printf_float+0xbe>
 800e2f4:	9a05      	ldr	r2, [sp, #20]
 800e2f6:	f10b 0b01 	add.w	fp, fp, #1
 800e2fa:	e7b9      	b.n	800e270 <_printf_float+0x30c>
 800e2fc:	ee18 3a10 	vmov	r3, s16
 800e300:	4652      	mov	r2, sl
 800e302:	4631      	mov	r1, r6
 800e304:	4628      	mov	r0, r5
 800e306:	47b8      	blx	r7
 800e308:	3001      	adds	r0, #1
 800e30a:	d1be      	bne.n	800e28a <_printf_float+0x326>
 800e30c:	e689      	b.n	800e022 <_printf_float+0xbe>
 800e30e:	9a05      	ldr	r2, [sp, #20]
 800e310:	464b      	mov	r3, r9
 800e312:	4442      	add	r2, r8
 800e314:	4631      	mov	r1, r6
 800e316:	4628      	mov	r0, r5
 800e318:	47b8      	blx	r7
 800e31a:	3001      	adds	r0, #1
 800e31c:	d1c1      	bne.n	800e2a2 <_printf_float+0x33e>
 800e31e:	e680      	b.n	800e022 <_printf_float+0xbe>
 800e320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e322:	2a01      	cmp	r2, #1
 800e324:	dc01      	bgt.n	800e32a <_printf_float+0x3c6>
 800e326:	07db      	lsls	r3, r3, #31
 800e328:	d53a      	bpl.n	800e3a0 <_printf_float+0x43c>
 800e32a:	2301      	movs	r3, #1
 800e32c:	4642      	mov	r2, r8
 800e32e:	4631      	mov	r1, r6
 800e330:	4628      	mov	r0, r5
 800e332:	47b8      	blx	r7
 800e334:	3001      	adds	r0, #1
 800e336:	f43f ae74 	beq.w	800e022 <_printf_float+0xbe>
 800e33a:	ee18 3a10 	vmov	r3, s16
 800e33e:	4652      	mov	r2, sl
 800e340:	4631      	mov	r1, r6
 800e342:	4628      	mov	r0, r5
 800e344:	47b8      	blx	r7
 800e346:	3001      	adds	r0, #1
 800e348:	f43f ae6b 	beq.w	800e022 <_printf_float+0xbe>
 800e34c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e350:	2200      	movs	r2, #0
 800e352:	2300      	movs	r3, #0
 800e354:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e358:	f7f2 fbd6 	bl	8000b08 <__aeabi_dcmpeq>
 800e35c:	b9d8      	cbnz	r0, 800e396 <_printf_float+0x432>
 800e35e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800e362:	f108 0201 	add.w	r2, r8, #1
 800e366:	4631      	mov	r1, r6
 800e368:	4628      	mov	r0, r5
 800e36a:	47b8      	blx	r7
 800e36c:	3001      	adds	r0, #1
 800e36e:	d10e      	bne.n	800e38e <_printf_float+0x42a>
 800e370:	e657      	b.n	800e022 <_printf_float+0xbe>
 800e372:	2301      	movs	r3, #1
 800e374:	4652      	mov	r2, sl
 800e376:	4631      	mov	r1, r6
 800e378:	4628      	mov	r0, r5
 800e37a:	47b8      	blx	r7
 800e37c:	3001      	adds	r0, #1
 800e37e:	f43f ae50 	beq.w	800e022 <_printf_float+0xbe>
 800e382:	f108 0801 	add.w	r8, r8, #1
 800e386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e388:	3b01      	subs	r3, #1
 800e38a:	4543      	cmp	r3, r8
 800e38c:	dcf1      	bgt.n	800e372 <_printf_float+0x40e>
 800e38e:	464b      	mov	r3, r9
 800e390:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e394:	e6da      	b.n	800e14c <_printf_float+0x1e8>
 800e396:	f04f 0800 	mov.w	r8, #0
 800e39a:	f104 0a1a 	add.w	sl, r4, #26
 800e39e:	e7f2      	b.n	800e386 <_printf_float+0x422>
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	4642      	mov	r2, r8
 800e3a4:	e7df      	b.n	800e366 <_printf_float+0x402>
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	464a      	mov	r2, r9
 800e3aa:	4631      	mov	r1, r6
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	47b8      	blx	r7
 800e3b0:	3001      	adds	r0, #1
 800e3b2:	f43f ae36 	beq.w	800e022 <_printf_float+0xbe>
 800e3b6:	f108 0801 	add.w	r8, r8, #1
 800e3ba:	68e3      	ldr	r3, [r4, #12]
 800e3bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3be:	1a5b      	subs	r3, r3, r1
 800e3c0:	4543      	cmp	r3, r8
 800e3c2:	dcf0      	bgt.n	800e3a6 <_printf_float+0x442>
 800e3c4:	e6f8      	b.n	800e1b8 <_printf_float+0x254>
 800e3c6:	f04f 0800 	mov.w	r8, #0
 800e3ca:	f104 0919 	add.w	r9, r4, #25
 800e3ce:	e7f4      	b.n	800e3ba <_printf_float+0x456>

0800e3d0 <malloc>:
 800e3d0:	4b02      	ldr	r3, [pc, #8]	; (800e3dc <malloc+0xc>)
 800e3d2:	4601      	mov	r1, r0
 800e3d4:	6818      	ldr	r0, [r3, #0]
 800e3d6:	f000 b823 	b.w	800e420 <_malloc_r>
 800e3da:	bf00      	nop
 800e3dc:	2000009c 	.word	0x2000009c

0800e3e0 <sbrk_aligned>:
 800e3e0:	b570      	push	{r4, r5, r6, lr}
 800e3e2:	4e0e      	ldr	r6, [pc, #56]	; (800e41c <sbrk_aligned+0x3c>)
 800e3e4:	460c      	mov	r4, r1
 800e3e6:	6831      	ldr	r1, [r6, #0]
 800e3e8:	4605      	mov	r5, r0
 800e3ea:	b911      	cbnz	r1, 800e3f2 <sbrk_aligned+0x12>
 800e3ec:	f000 fccc 	bl	800ed88 <_sbrk_r>
 800e3f0:	6030      	str	r0, [r6, #0]
 800e3f2:	4621      	mov	r1, r4
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	f000 fcc7 	bl	800ed88 <_sbrk_r>
 800e3fa:	1c43      	adds	r3, r0, #1
 800e3fc:	d00a      	beq.n	800e414 <sbrk_aligned+0x34>
 800e3fe:	1cc4      	adds	r4, r0, #3
 800e400:	f024 0403 	bic.w	r4, r4, #3
 800e404:	42a0      	cmp	r0, r4
 800e406:	d007      	beq.n	800e418 <sbrk_aligned+0x38>
 800e408:	1a21      	subs	r1, r4, r0
 800e40a:	4628      	mov	r0, r5
 800e40c:	f000 fcbc 	bl	800ed88 <_sbrk_r>
 800e410:	3001      	adds	r0, #1
 800e412:	d101      	bne.n	800e418 <sbrk_aligned+0x38>
 800e414:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e418:	4620      	mov	r0, r4
 800e41a:	bd70      	pop	{r4, r5, r6, pc}
 800e41c:	20009680 	.word	0x20009680

0800e420 <_malloc_r>:
 800e420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e424:	1ccd      	adds	r5, r1, #3
 800e426:	f025 0503 	bic.w	r5, r5, #3
 800e42a:	3508      	adds	r5, #8
 800e42c:	2d0c      	cmp	r5, #12
 800e42e:	bf38      	it	cc
 800e430:	250c      	movcc	r5, #12
 800e432:	2d00      	cmp	r5, #0
 800e434:	4607      	mov	r7, r0
 800e436:	db01      	blt.n	800e43c <_malloc_r+0x1c>
 800e438:	42a9      	cmp	r1, r5
 800e43a:	d905      	bls.n	800e448 <_malloc_r+0x28>
 800e43c:	230c      	movs	r3, #12
 800e43e:	603b      	str	r3, [r7, #0]
 800e440:	2600      	movs	r6, #0
 800e442:	4630      	mov	r0, r6
 800e444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e448:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e51c <_malloc_r+0xfc>
 800e44c:	f000 fa2c 	bl	800e8a8 <__malloc_lock>
 800e450:	f8d8 3000 	ldr.w	r3, [r8]
 800e454:	461c      	mov	r4, r3
 800e456:	bb5c      	cbnz	r4, 800e4b0 <_malloc_r+0x90>
 800e458:	4629      	mov	r1, r5
 800e45a:	4638      	mov	r0, r7
 800e45c:	f7ff ffc0 	bl	800e3e0 <sbrk_aligned>
 800e460:	1c43      	adds	r3, r0, #1
 800e462:	4604      	mov	r4, r0
 800e464:	d155      	bne.n	800e512 <_malloc_r+0xf2>
 800e466:	f8d8 4000 	ldr.w	r4, [r8]
 800e46a:	4626      	mov	r6, r4
 800e46c:	2e00      	cmp	r6, #0
 800e46e:	d145      	bne.n	800e4fc <_malloc_r+0xdc>
 800e470:	2c00      	cmp	r4, #0
 800e472:	d048      	beq.n	800e506 <_malloc_r+0xe6>
 800e474:	6823      	ldr	r3, [r4, #0]
 800e476:	4631      	mov	r1, r6
 800e478:	4638      	mov	r0, r7
 800e47a:	eb04 0903 	add.w	r9, r4, r3
 800e47e:	f000 fc83 	bl	800ed88 <_sbrk_r>
 800e482:	4581      	cmp	r9, r0
 800e484:	d13f      	bne.n	800e506 <_malloc_r+0xe6>
 800e486:	6821      	ldr	r1, [r4, #0]
 800e488:	1a6d      	subs	r5, r5, r1
 800e48a:	4629      	mov	r1, r5
 800e48c:	4638      	mov	r0, r7
 800e48e:	f7ff ffa7 	bl	800e3e0 <sbrk_aligned>
 800e492:	3001      	adds	r0, #1
 800e494:	d037      	beq.n	800e506 <_malloc_r+0xe6>
 800e496:	6823      	ldr	r3, [r4, #0]
 800e498:	442b      	add	r3, r5
 800e49a:	6023      	str	r3, [r4, #0]
 800e49c:	f8d8 3000 	ldr.w	r3, [r8]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d038      	beq.n	800e516 <_malloc_r+0xf6>
 800e4a4:	685a      	ldr	r2, [r3, #4]
 800e4a6:	42a2      	cmp	r2, r4
 800e4a8:	d12b      	bne.n	800e502 <_malloc_r+0xe2>
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	605a      	str	r2, [r3, #4]
 800e4ae:	e00f      	b.n	800e4d0 <_malloc_r+0xb0>
 800e4b0:	6822      	ldr	r2, [r4, #0]
 800e4b2:	1b52      	subs	r2, r2, r5
 800e4b4:	d41f      	bmi.n	800e4f6 <_malloc_r+0xd6>
 800e4b6:	2a0b      	cmp	r2, #11
 800e4b8:	d917      	bls.n	800e4ea <_malloc_r+0xca>
 800e4ba:	1961      	adds	r1, r4, r5
 800e4bc:	42a3      	cmp	r3, r4
 800e4be:	6025      	str	r5, [r4, #0]
 800e4c0:	bf18      	it	ne
 800e4c2:	6059      	strne	r1, [r3, #4]
 800e4c4:	6863      	ldr	r3, [r4, #4]
 800e4c6:	bf08      	it	eq
 800e4c8:	f8c8 1000 	streq.w	r1, [r8]
 800e4cc:	5162      	str	r2, [r4, r5]
 800e4ce:	604b      	str	r3, [r1, #4]
 800e4d0:	4638      	mov	r0, r7
 800e4d2:	f104 060b 	add.w	r6, r4, #11
 800e4d6:	f000 f9ed 	bl	800e8b4 <__malloc_unlock>
 800e4da:	f026 0607 	bic.w	r6, r6, #7
 800e4de:	1d23      	adds	r3, r4, #4
 800e4e0:	1af2      	subs	r2, r6, r3
 800e4e2:	d0ae      	beq.n	800e442 <_malloc_r+0x22>
 800e4e4:	1b9b      	subs	r3, r3, r6
 800e4e6:	50a3      	str	r3, [r4, r2]
 800e4e8:	e7ab      	b.n	800e442 <_malloc_r+0x22>
 800e4ea:	42a3      	cmp	r3, r4
 800e4ec:	6862      	ldr	r2, [r4, #4]
 800e4ee:	d1dd      	bne.n	800e4ac <_malloc_r+0x8c>
 800e4f0:	f8c8 2000 	str.w	r2, [r8]
 800e4f4:	e7ec      	b.n	800e4d0 <_malloc_r+0xb0>
 800e4f6:	4623      	mov	r3, r4
 800e4f8:	6864      	ldr	r4, [r4, #4]
 800e4fa:	e7ac      	b.n	800e456 <_malloc_r+0x36>
 800e4fc:	4634      	mov	r4, r6
 800e4fe:	6876      	ldr	r6, [r6, #4]
 800e500:	e7b4      	b.n	800e46c <_malloc_r+0x4c>
 800e502:	4613      	mov	r3, r2
 800e504:	e7cc      	b.n	800e4a0 <_malloc_r+0x80>
 800e506:	230c      	movs	r3, #12
 800e508:	603b      	str	r3, [r7, #0]
 800e50a:	4638      	mov	r0, r7
 800e50c:	f000 f9d2 	bl	800e8b4 <__malloc_unlock>
 800e510:	e797      	b.n	800e442 <_malloc_r+0x22>
 800e512:	6025      	str	r5, [r4, #0]
 800e514:	e7dc      	b.n	800e4d0 <_malloc_r+0xb0>
 800e516:	605b      	str	r3, [r3, #4]
 800e518:	deff      	udf	#255	; 0xff
 800e51a:	bf00      	nop
 800e51c:	2000967c 	.word	0x2000967c

0800e520 <_printf_common>:
 800e520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e524:	4616      	mov	r6, r2
 800e526:	4699      	mov	r9, r3
 800e528:	688a      	ldr	r2, [r1, #8]
 800e52a:	690b      	ldr	r3, [r1, #16]
 800e52c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e530:	4293      	cmp	r3, r2
 800e532:	bfb8      	it	lt
 800e534:	4613      	movlt	r3, r2
 800e536:	6033      	str	r3, [r6, #0]
 800e538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e53c:	4607      	mov	r7, r0
 800e53e:	460c      	mov	r4, r1
 800e540:	b10a      	cbz	r2, 800e546 <_printf_common+0x26>
 800e542:	3301      	adds	r3, #1
 800e544:	6033      	str	r3, [r6, #0]
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	0699      	lsls	r1, r3, #26
 800e54a:	bf42      	ittt	mi
 800e54c:	6833      	ldrmi	r3, [r6, #0]
 800e54e:	3302      	addmi	r3, #2
 800e550:	6033      	strmi	r3, [r6, #0]
 800e552:	6825      	ldr	r5, [r4, #0]
 800e554:	f015 0506 	ands.w	r5, r5, #6
 800e558:	d106      	bne.n	800e568 <_printf_common+0x48>
 800e55a:	f104 0a19 	add.w	sl, r4, #25
 800e55e:	68e3      	ldr	r3, [r4, #12]
 800e560:	6832      	ldr	r2, [r6, #0]
 800e562:	1a9b      	subs	r3, r3, r2
 800e564:	42ab      	cmp	r3, r5
 800e566:	dc26      	bgt.n	800e5b6 <_printf_common+0x96>
 800e568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e56c:	1e13      	subs	r3, r2, #0
 800e56e:	6822      	ldr	r2, [r4, #0]
 800e570:	bf18      	it	ne
 800e572:	2301      	movne	r3, #1
 800e574:	0692      	lsls	r2, r2, #26
 800e576:	d42b      	bmi.n	800e5d0 <_printf_common+0xb0>
 800e578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e57c:	4649      	mov	r1, r9
 800e57e:	4638      	mov	r0, r7
 800e580:	47c0      	blx	r8
 800e582:	3001      	adds	r0, #1
 800e584:	d01e      	beq.n	800e5c4 <_printf_common+0xa4>
 800e586:	6823      	ldr	r3, [r4, #0]
 800e588:	6922      	ldr	r2, [r4, #16]
 800e58a:	f003 0306 	and.w	r3, r3, #6
 800e58e:	2b04      	cmp	r3, #4
 800e590:	bf02      	ittt	eq
 800e592:	68e5      	ldreq	r5, [r4, #12]
 800e594:	6833      	ldreq	r3, [r6, #0]
 800e596:	1aed      	subeq	r5, r5, r3
 800e598:	68a3      	ldr	r3, [r4, #8]
 800e59a:	bf0c      	ite	eq
 800e59c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5a0:	2500      	movne	r5, #0
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	bfc4      	itt	gt
 800e5a6:	1a9b      	subgt	r3, r3, r2
 800e5a8:	18ed      	addgt	r5, r5, r3
 800e5aa:	2600      	movs	r6, #0
 800e5ac:	341a      	adds	r4, #26
 800e5ae:	42b5      	cmp	r5, r6
 800e5b0:	d11a      	bne.n	800e5e8 <_printf_common+0xc8>
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	e008      	b.n	800e5c8 <_printf_common+0xa8>
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	4652      	mov	r2, sl
 800e5ba:	4649      	mov	r1, r9
 800e5bc:	4638      	mov	r0, r7
 800e5be:	47c0      	blx	r8
 800e5c0:	3001      	adds	r0, #1
 800e5c2:	d103      	bne.n	800e5cc <_printf_common+0xac>
 800e5c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5cc:	3501      	adds	r5, #1
 800e5ce:	e7c6      	b.n	800e55e <_printf_common+0x3e>
 800e5d0:	18e1      	adds	r1, r4, r3
 800e5d2:	1c5a      	adds	r2, r3, #1
 800e5d4:	2030      	movs	r0, #48	; 0x30
 800e5d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5da:	4422      	add	r2, r4
 800e5dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5e4:	3302      	adds	r3, #2
 800e5e6:	e7c7      	b.n	800e578 <_printf_common+0x58>
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	4622      	mov	r2, r4
 800e5ec:	4649      	mov	r1, r9
 800e5ee:	4638      	mov	r0, r7
 800e5f0:	47c0      	blx	r8
 800e5f2:	3001      	adds	r0, #1
 800e5f4:	d0e6      	beq.n	800e5c4 <_printf_common+0xa4>
 800e5f6:	3601      	adds	r6, #1
 800e5f8:	e7d9      	b.n	800e5ae <_printf_common+0x8e>
	...

0800e5fc <_printf_i>:
 800e5fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e600:	7e0f      	ldrb	r7, [r1, #24]
 800e602:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e604:	2f78      	cmp	r7, #120	; 0x78
 800e606:	4691      	mov	r9, r2
 800e608:	4680      	mov	r8, r0
 800e60a:	460c      	mov	r4, r1
 800e60c:	469a      	mov	sl, r3
 800e60e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e612:	d807      	bhi.n	800e624 <_printf_i+0x28>
 800e614:	2f62      	cmp	r7, #98	; 0x62
 800e616:	d80a      	bhi.n	800e62e <_printf_i+0x32>
 800e618:	2f00      	cmp	r7, #0
 800e61a:	f000 80d4 	beq.w	800e7c6 <_printf_i+0x1ca>
 800e61e:	2f58      	cmp	r7, #88	; 0x58
 800e620:	f000 80c0 	beq.w	800e7a4 <_printf_i+0x1a8>
 800e624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e62c:	e03a      	b.n	800e6a4 <_printf_i+0xa8>
 800e62e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e632:	2b15      	cmp	r3, #21
 800e634:	d8f6      	bhi.n	800e624 <_printf_i+0x28>
 800e636:	a101      	add	r1, pc, #4	; (adr r1, 800e63c <_printf_i+0x40>)
 800e638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e63c:	0800e695 	.word	0x0800e695
 800e640:	0800e6a9 	.word	0x0800e6a9
 800e644:	0800e625 	.word	0x0800e625
 800e648:	0800e625 	.word	0x0800e625
 800e64c:	0800e625 	.word	0x0800e625
 800e650:	0800e625 	.word	0x0800e625
 800e654:	0800e6a9 	.word	0x0800e6a9
 800e658:	0800e625 	.word	0x0800e625
 800e65c:	0800e625 	.word	0x0800e625
 800e660:	0800e625 	.word	0x0800e625
 800e664:	0800e625 	.word	0x0800e625
 800e668:	0800e7ad 	.word	0x0800e7ad
 800e66c:	0800e6d5 	.word	0x0800e6d5
 800e670:	0800e767 	.word	0x0800e767
 800e674:	0800e625 	.word	0x0800e625
 800e678:	0800e625 	.word	0x0800e625
 800e67c:	0800e7cf 	.word	0x0800e7cf
 800e680:	0800e625 	.word	0x0800e625
 800e684:	0800e6d5 	.word	0x0800e6d5
 800e688:	0800e625 	.word	0x0800e625
 800e68c:	0800e625 	.word	0x0800e625
 800e690:	0800e76f 	.word	0x0800e76f
 800e694:	682b      	ldr	r3, [r5, #0]
 800e696:	1d1a      	adds	r2, r3, #4
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	602a      	str	r2, [r5, #0]
 800e69c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	e09f      	b.n	800e7e8 <_printf_i+0x1ec>
 800e6a8:	6820      	ldr	r0, [r4, #0]
 800e6aa:	682b      	ldr	r3, [r5, #0]
 800e6ac:	0607      	lsls	r7, r0, #24
 800e6ae:	f103 0104 	add.w	r1, r3, #4
 800e6b2:	6029      	str	r1, [r5, #0]
 800e6b4:	d501      	bpl.n	800e6ba <_printf_i+0xbe>
 800e6b6:	681e      	ldr	r6, [r3, #0]
 800e6b8:	e003      	b.n	800e6c2 <_printf_i+0xc6>
 800e6ba:	0646      	lsls	r6, r0, #25
 800e6bc:	d5fb      	bpl.n	800e6b6 <_printf_i+0xba>
 800e6be:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e6c2:	2e00      	cmp	r6, #0
 800e6c4:	da03      	bge.n	800e6ce <_printf_i+0xd2>
 800e6c6:	232d      	movs	r3, #45	; 0x2d
 800e6c8:	4276      	negs	r6, r6
 800e6ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6ce:	485a      	ldr	r0, [pc, #360]	; (800e838 <_printf_i+0x23c>)
 800e6d0:	230a      	movs	r3, #10
 800e6d2:	e012      	b.n	800e6fa <_printf_i+0xfe>
 800e6d4:	682b      	ldr	r3, [r5, #0]
 800e6d6:	6820      	ldr	r0, [r4, #0]
 800e6d8:	1d19      	adds	r1, r3, #4
 800e6da:	6029      	str	r1, [r5, #0]
 800e6dc:	0605      	lsls	r5, r0, #24
 800e6de:	d501      	bpl.n	800e6e4 <_printf_i+0xe8>
 800e6e0:	681e      	ldr	r6, [r3, #0]
 800e6e2:	e002      	b.n	800e6ea <_printf_i+0xee>
 800e6e4:	0641      	lsls	r1, r0, #25
 800e6e6:	d5fb      	bpl.n	800e6e0 <_printf_i+0xe4>
 800e6e8:	881e      	ldrh	r6, [r3, #0]
 800e6ea:	4853      	ldr	r0, [pc, #332]	; (800e838 <_printf_i+0x23c>)
 800e6ec:	2f6f      	cmp	r7, #111	; 0x6f
 800e6ee:	bf0c      	ite	eq
 800e6f0:	2308      	moveq	r3, #8
 800e6f2:	230a      	movne	r3, #10
 800e6f4:	2100      	movs	r1, #0
 800e6f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6fa:	6865      	ldr	r5, [r4, #4]
 800e6fc:	60a5      	str	r5, [r4, #8]
 800e6fe:	2d00      	cmp	r5, #0
 800e700:	bfa2      	ittt	ge
 800e702:	6821      	ldrge	r1, [r4, #0]
 800e704:	f021 0104 	bicge.w	r1, r1, #4
 800e708:	6021      	strge	r1, [r4, #0]
 800e70a:	b90e      	cbnz	r6, 800e710 <_printf_i+0x114>
 800e70c:	2d00      	cmp	r5, #0
 800e70e:	d04b      	beq.n	800e7a8 <_printf_i+0x1ac>
 800e710:	4615      	mov	r5, r2
 800e712:	fbb6 f1f3 	udiv	r1, r6, r3
 800e716:	fb03 6711 	mls	r7, r3, r1, r6
 800e71a:	5dc7      	ldrb	r7, [r0, r7]
 800e71c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e720:	4637      	mov	r7, r6
 800e722:	42bb      	cmp	r3, r7
 800e724:	460e      	mov	r6, r1
 800e726:	d9f4      	bls.n	800e712 <_printf_i+0x116>
 800e728:	2b08      	cmp	r3, #8
 800e72a:	d10b      	bne.n	800e744 <_printf_i+0x148>
 800e72c:	6823      	ldr	r3, [r4, #0]
 800e72e:	07de      	lsls	r6, r3, #31
 800e730:	d508      	bpl.n	800e744 <_printf_i+0x148>
 800e732:	6923      	ldr	r3, [r4, #16]
 800e734:	6861      	ldr	r1, [r4, #4]
 800e736:	4299      	cmp	r1, r3
 800e738:	bfde      	ittt	le
 800e73a:	2330      	movle	r3, #48	; 0x30
 800e73c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e740:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e744:	1b52      	subs	r2, r2, r5
 800e746:	6122      	str	r2, [r4, #16]
 800e748:	f8cd a000 	str.w	sl, [sp]
 800e74c:	464b      	mov	r3, r9
 800e74e:	aa03      	add	r2, sp, #12
 800e750:	4621      	mov	r1, r4
 800e752:	4640      	mov	r0, r8
 800e754:	f7ff fee4 	bl	800e520 <_printf_common>
 800e758:	3001      	adds	r0, #1
 800e75a:	d14a      	bne.n	800e7f2 <_printf_i+0x1f6>
 800e75c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e760:	b004      	add	sp, #16
 800e762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	f043 0320 	orr.w	r3, r3, #32
 800e76c:	6023      	str	r3, [r4, #0]
 800e76e:	4833      	ldr	r0, [pc, #204]	; (800e83c <_printf_i+0x240>)
 800e770:	2778      	movs	r7, #120	; 0x78
 800e772:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e776:	6823      	ldr	r3, [r4, #0]
 800e778:	6829      	ldr	r1, [r5, #0]
 800e77a:	061f      	lsls	r7, r3, #24
 800e77c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e780:	d402      	bmi.n	800e788 <_printf_i+0x18c>
 800e782:	065f      	lsls	r7, r3, #25
 800e784:	bf48      	it	mi
 800e786:	b2b6      	uxthmi	r6, r6
 800e788:	07df      	lsls	r7, r3, #31
 800e78a:	bf48      	it	mi
 800e78c:	f043 0320 	orrmi.w	r3, r3, #32
 800e790:	6029      	str	r1, [r5, #0]
 800e792:	bf48      	it	mi
 800e794:	6023      	strmi	r3, [r4, #0]
 800e796:	b91e      	cbnz	r6, 800e7a0 <_printf_i+0x1a4>
 800e798:	6823      	ldr	r3, [r4, #0]
 800e79a:	f023 0320 	bic.w	r3, r3, #32
 800e79e:	6023      	str	r3, [r4, #0]
 800e7a0:	2310      	movs	r3, #16
 800e7a2:	e7a7      	b.n	800e6f4 <_printf_i+0xf8>
 800e7a4:	4824      	ldr	r0, [pc, #144]	; (800e838 <_printf_i+0x23c>)
 800e7a6:	e7e4      	b.n	800e772 <_printf_i+0x176>
 800e7a8:	4615      	mov	r5, r2
 800e7aa:	e7bd      	b.n	800e728 <_printf_i+0x12c>
 800e7ac:	682b      	ldr	r3, [r5, #0]
 800e7ae:	6826      	ldr	r6, [r4, #0]
 800e7b0:	6961      	ldr	r1, [r4, #20]
 800e7b2:	1d18      	adds	r0, r3, #4
 800e7b4:	6028      	str	r0, [r5, #0]
 800e7b6:	0635      	lsls	r5, r6, #24
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	d501      	bpl.n	800e7c0 <_printf_i+0x1c4>
 800e7bc:	6019      	str	r1, [r3, #0]
 800e7be:	e002      	b.n	800e7c6 <_printf_i+0x1ca>
 800e7c0:	0670      	lsls	r0, r6, #25
 800e7c2:	d5fb      	bpl.n	800e7bc <_printf_i+0x1c0>
 800e7c4:	8019      	strh	r1, [r3, #0]
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	6123      	str	r3, [r4, #16]
 800e7ca:	4615      	mov	r5, r2
 800e7cc:	e7bc      	b.n	800e748 <_printf_i+0x14c>
 800e7ce:	682b      	ldr	r3, [r5, #0]
 800e7d0:	1d1a      	adds	r2, r3, #4
 800e7d2:	602a      	str	r2, [r5, #0]
 800e7d4:	681d      	ldr	r5, [r3, #0]
 800e7d6:	6862      	ldr	r2, [r4, #4]
 800e7d8:	2100      	movs	r1, #0
 800e7da:	4628      	mov	r0, r5
 800e7dc:	f7f1 fd18 	bl	8000210 <memchr>
 800e7e0:	b108      	cbz	r0, 800e7e6 <_printf_i+0x1ea>
 800e7e2:	1b40      	subs	r0, r0, r5
 800e7e4:	6060      	str	r0, [r4, #4]
 800e7e6:	6863      	ldr	r3, [r4, #4]
 800e7e8:	6123      	str	r3, [r4, #16]
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7f0:	e7aa      	b.n	800e748 <_printf_i+0x14c>
 800e7f2:	6923      	ldr	r3, [r4, #16]
 800e7f4:	462a      	mov	r2, r5
 800e7f6:	4649      	mov	r1, r9
 800e7f8:	4640      	mov	r0, r8
 800e7fa:	47d0      	blx	sl
 800e7fc:	3001      	adds	r0, #1
 800e7fe:	d0ad      	beq.n	800e75c <_printf_i+0x160>
 800e800:	6823      	ldr	r3, [r4, #0]
 800e802:	079b      	lsls	r3, r3, #30
 800e804:	d413      	bmi.n	800e82e <_printf_i+0x232>
 800e806:	68e0      	ldr	r0, [r4, #12]
 800e808:	9b03      	ldr	r3, [sp, #12]
 800e80a:	4298      	cmp	r0, r3
 800e80c:	bfb8      	it	lt
 800e80e:	4618      	movlt	r0, r3
 800e810:	e7a6      	b.n	800e760 <_printf_i+0x164>
 800e812:	2301      	movs	r3, #1
 800e814:	4632      	mov	r2, r6
 800e816:	4649      	mov	r1, r9
 800e818:	4640      	mov	r0, r8
 800e81a:	47d0      	blx	sl
 800e81c:	3001      	adds	r0, #1
 800e81e:	d09d      	beq.n	800e75c <_printf_i+0x160>
 800e820:	3501      	adds	r5, #1
 800e822:	68e3      	ldr	r3, [r4, #12]
 800e824:	9903      	ldr	r1, [sp, #12]
 800e826:	1a5b      	subs	r3, r3, r1
 800e828:	42ab      	cmp	r3, r5
 800e82a:	dcf2      	bgt.n	800e812 <_printf_i+0x216>
 800e82c:	e7eb      	b.n	800e806 <_printf_i+0x20a>
 800e82e:	2500      	movs	r5, #0
 800e830:	f104 0619 	add.w	r6, r4, #25
 800e834:	e7f5      	b.n	800e822 <_printf_i+0x226>
 800e836:	bf00      	nop
 800e838:	08016618 	.word	0x08016618
 800e83c:	08016629 	.word	0x08016629

0800e840 <sniprintf>:
 800e840:	b40c      	push	{r2, r3}
 800e842:	b530      	push	{r4, r5, lr}
 800e844:	4b17      	ldr	r3, [pc, #92]	; (800e8a4 <sniprintf+0x64>)
 800e846:	1e0c      	subs	r4, r1, #0
 800e848:	681d      	ldr	r5, [r3, #0]
 800e84a:	b09d      	sub	sp, #116	; 0x74
 800e84c:	da08      	bge.n	800e860 <sniprintf+0x20>
 800e84e:	238b      	movs	r3, #139	; 0x8b
 800e850:	602b      	str	r3, [r5, #0]
 800e852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e856:	b01d      	add	sp, #116	; 0x74
 800e858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e85c:	b002      	add	sp, #8
 800e85e:	4770      	bx	lr
 800e860:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e864:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e868:	bf14      	ite	ne
 800e86a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e86e:	4623      	moveq	r3, r4
 800e870:	9304      	str	r3, [sp, #16]
 800e872:	9307      	str	r3, [sp, #28]
 800e874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e878:	9002      	str	r0, [sp, #8]
 800e87a:	9006      	str	r0, [sp, #24]
 800e87c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e880:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e882:	ab21      	add	r3, sp, #132	; 0x84
 800e884:	a902      	add	r1, sp, #8
 800e886:	4628      	mov	r0, r5
 800e888:	9301      	str	r3, [sp, #4]
 800e88a:	f001 fa19 	bl	800fcc0 <_svfiprintf_r>
 800e88e:	1c43      	adds	r3, r0, #1
 800e890:	bfbc      	itt	lt
 800e892:	238b      	movlt	r3, #139	; 0x8b
 800e894:	602b      	strlt	r3, [r5, #0]
 800e896:	2c00      	cmp	r4, #0
 800e898:	d0dd      	beq.n	800e856 <sniprintf+0x16>
 800e89a:	9b02      	ldr	r3, [sp, #8]
 800e89c:	2200      	movs	r2, #0
 800e89e:	701a      	strb	r2, [r3, #0]
 800e8a0:	e7d9      	b.n	800e856 <sniprintf+0x16>
 800e8a2:	bf00      	nop
 800e8a4:	2000009c 	.word	0x2000009c

0800e8a8 <__malloc_lock>:
 800e8a8:	4801      	ldr	r0, [pc, #4]	; (800e8b0 <__malloc_lock+0x8>)
 800e8aa:	f000 baba 	b.w	800ee22 <__retarget_lock_acquire_recursive>
 800e8ae:	bf00      	nop
 800e8b0:	200097c4 	.word	0x200097c4

0800e8b4 <__malloc_unlock>:
 800e8b4:	4801      	ldr	r0, [pc, #4]	; (800e8bc <__malloc_unlock+0x8>)
 800e8b6:	f000 bab5 	b.w	800ee24 <__retarget_lock_release_recursive>
 800e8ba:	bf00      	nop
 800e8bc:	200097c4 	.word	0x200097c4

0800e8c0 <siprintf>:
 800e8c0:	b40e      	push	{r1, r2, r3}
 800e8c2:	b500      	push	{lr}
 800e8c4:	b09c      	sub	sp, #112	; 0x70
 800e8c6:	ab1d      	add	r3, sp, #116	; 0x74
 800e8c8:	9002      	str	r0, [sp, #8]
 800e8ca:	9006      	str	r0, [sp, #24]
 800e8cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e8d0:	4809      	ldr	r0, [pc, #36]	; (800e8f8 <siprintf+0x38>)
 800e8d2:	9107      	str	r1, [sp, #28]
 800e8d4:	9104      	str	r1, [sp, #16]
 800e8d6:	4909      	ldr	r1, [pc, #36]	; (800e8fc <siprintf+0x3c>)
 800e8d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8dc:	9105      	str	r1, [sp, #20]
 800e8de:	6800      	ldr	r0, [r0, #0]
 800e8e0:	9301      	str	r3, [sp, #4]
 800e8e2:	a902      	add	r1, sp, #8
 800e8e4:	f001 f9ec 	bl	800fcc0 <_svfiprintf_r>
 800e8e8:	9b02      	ldr	r3, [sp, #8]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	701a      	strb	r2, [r3, #0]
 800e8ee:	b01c      	add	sp, #112	; 0x70
 800e8f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8f4:	b003      	add	sp, #12
 800e8f6:	4770      	bx	lr
 800e8f8:	2000009c 	.word	0x2000009c
 800e8fc:	ffff0208 	.word	0xffff0208

0800e900 <siscanf>:
 800e900:	b40e      	push	{r1, r2, r3}
 800e902:	b510      	push	{r4, lr}
 800e904:	b09f      	sub	sp, #124	; 0x7c
 800e906:	ac21      	add	r4, sp, #132	; 0x84
 800e908:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e90c:	f854 2b04 	ldr.w	r2, [r4], #4
 800e910:	9201      	str	r2, [sp, #4]
 800e912:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e916:	9004      	str	r0, [sp, #16]
 800e918:	9008      	str	r0, [sp, #32]
 800e91a:	f7f1 fcc9 	bl	80002b0 <strlen>
 800e91e:	4b0c      	ldr	r3, [pc, #48]	; (800e950 <siscanf+0x50>)
 800e920:	9005      	str	r0, [sp, #20]
 800e922:	9009      	str	r0, [sp, #36]	; 0x24
 800e924:	930d      	str	r3, [sp, #52]	; 0x34
 800e926:	480b      	ldr	r0, [pc, #44]	; (800e954 <siscanf+0x54>)
 800e928:	9a01      	ldr	r2, [sp, #4]
 800e92a:	6800      	ldr	r0, [r0, #0]
 800e92c:	9403      	str	r4, [sp, #12]
 800e92e:	2300      	movs	r3, #0
 800e930:	9311      	str	r3, [sp, #68]	; 0x44
 800e932:	9316      	str	r3, [sp, #88]	; 0x58
 800e934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e938:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e93c:	a904      	add	r1, sp, #16
 800e93e:	4623      	mov	r3, r4
 800e940:	f001 fb16 	bl	800ff70 <__ssvfiscanf_r>
 800e944:	b01f      	add	sp, #124	; 0x7c
 800e946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e94a:	b003      	add	sp, #12
 800e94c:	4770      	bx	lr
 800e94e:	bf00      	nop
 800e950:	0800e97b 	.word	0x0800e97b
 800e954:	2000009c 	.word	0x2000009c

0800e958 <__sread>:
 800e958:	b510      	push	{r4, lr}
 800e95a:	460c      	mov	r4, r1
 800e95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e960:	f000 fa00 	bl	800ed64 <_read_r>
 800e964:	2800      	cmp	r0, #0
 800e966:	bfab      	itete	ge
 800e968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e96a:	89a3      	ldrhlt	r3, [r4, #12]
 800e96c:	181b      	addge	r3, r3, r0
 800e96e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e972:	bfac      	ite	ge
 800e974:	6563      	strge	r3, [r4, #84]	; 0x54
 800e976:	81a3      	strhlt	r3, [r4, #12]
 800e978:	bd10      	pop	{r4, pc}

0800e97a <__seofread>:
 800e97a:	2000      	movs	r0, #0
 800e97c:	4770      	bx	lr

0800e97e <__swrite>:
 800e97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e982:	461f      	mov	r7, r3
 800e984:	898b      	ldrh	r3, [r1, #12]
 800e986:	05db      	lsls	r3, r3, #23
 800e988:	4605      	mov	r5, r0
 800e98a:	460c      	mov	r4, r1
 800e98c:	4616      	mov	r6, r2
 800e98e:	d505      	bpl.n	800e99c <__swrite+0x1e>
 800e990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e994:	2302      	movs	r3, #2
 800e996:	2200      	movs	r2, #0
 800e998:	f000 f9d2 	bl	800ed40 <_lseek_r>
 800e99c:	89a3      	ldrh	r3, [r4, #12]
 800e99e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9a6:	81a3      	strh	r3, [r4, #12]
 800e9a8:	4632      	mov	r2, r6
 800e9aa:	463b      	mov	r3, r7
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b2:	f000 b9f9 	b.w	800eda8 <_write_r>

0800e9b6 <__sseek>:
 800e9b6:	b510      	push	{r4, lr}
 800e9b8:	460c      	mov	r4, r1
 800e9ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9be:	f000 f9bf 	bl	800ed40 <_lseek_r>
 800e9c2:	1c43      	adds	r3, r0, #1
 800e9c4:	89a3      	ldrh	r3, [r4, #12]
 800e9c6:	bf15      	itete	ne
 800e9c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e9ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e9ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e9d2:	81a3      	strheq	r3, [r4, #12]
 800e9d4:	bf18      	it	ne
 800e9d6:	81a3      	strhne	r3, [r4, #12]
 800e9d8:	bd10      	pop	{r4, pc}

0800e9da <__sclose>:
 800e9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9de:	f000 b99f 	b.w	800ed20 <_close_r>
	...

0800e9e4 <std>:
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	b510      	push	{r4, lr}
 800e9e8:	4604      	mov	r4, r0
 800e9ea:	e9c0 3300 	strd	r3, r3, [r0]
 800e9ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9f2:	6083      	str	r3, [r0, #8]
 800e9f4:	8181      	strh	r1, [r0, #12]
 800e9f6:	6643      	str	r3, [r0, #100]	; 0x64
 800e9f8:	81c2      	strh	r2, [r0, #14]
 800e9fa:	6183      	str	r3, [r0, #24]
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	2208      	movs	r2, #8
 800ea00:	305c      	adds	r0, #92	; 0x5c
 800ea02:	f000 f981 	bl	800ed08 <memset>
 800ea06:	4b0d      	ldr	r3, [pc, #52]	; (800ea3c <std+0x58>)
 800ea08:	6263      	str	r3, [r4, #36]	; 0x24
 800ea0a:	4b0d      	ldr	r3, [pc, #52]	; (800ea40 <std+0x5c>)
 800ea0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea0e:	4b0d      	ldr	r3, [pc, #52]	; (800ea44 <std+0x60>)
 800ea10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea12:	4b0d      	ldr	r3, [pc, #52]	; (800ea48 <std+0x64>)
 800ea14:	6323      	str	r3, [r4, #48]	; 0x30
 800ea16:	4b0d      	ldr	r3, [pc, #52]	; (800ea4c <std+0x68>)
 800ea18:	6224      	str	r4, [r4, #32]
 800ea1a:	429c      	cmp	r4, r3
 800ea1c:	d006      	beq.n	800ea2c <std+0x48>
 800ea1e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ea22:	4294      	cmp	r4, r2
 800ea24:	d002      	beq.n	800ea2c <std+0x48>
 800ea26:	33d0      	adds	r3, #208	; 0xd0
 800ea28:	429c      	cmp	r4, r3
 800ea2a:	d105      	bne.n	800ea38 <std+0x54>
 800ea2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea34:	f000 b9f4 	b.w	800ee20 <__retarget_lock_init_recursive>
 800ea38:	bd10      	pop	{r4, pc}
 800ea3a:	bf00      	nop
 800ea3c:	0800e959 	.word	0x0800e959
 800ea40:	0800e97f 	.word	0x0800e97f
 800ea44:	0800e9b7 	.word	0x0800e9b7
 800ea48:	0800e9db 	.word	0x0800e9db
 800ea4c:	20009684 	.word	0x20009684

0800ea50 <stdio_exit_handler>:
 800ea50:	4a02      	ldr	r2, [pc, #8]	; (800ea5c <stdio_exit_handler+0xc>)
 800ea52:	4903      	ldr	r1, [pc, #12]	; (800ea60 <stdio_exit_handler+0x10>)
 800ea54:	4803      	ldr	r0, [pc, #12]	; (800ea64 <stdio_exit_handler+0x14>)
 800ea56:	f000 b8ed 	b.w	800ec34 <_fwalk_sglue>
 800ea5a:	bf00      	nop
 800ea5c:	20000044 	.word	0x20000044
 800ea60:	08010905 	.word	0x08010905
 800ea64:	20000050 	.word	0x20000050

0800ea68 <cleanup_stdio>:
 800ea68:	6841      	ldr	r1, [r0, #4]
 800ea6a:	4b0c      	ldr	r3, [pc, #48]	; (800ea9c <cleanup_stdio+0x34>)
 800ea6c:	4299      	cmp	r1, r3
 800ea6e:	b510      	push	{r4, lr}
 800ea70:	4604      	mov	r4, r0
 800ea72:	d001      	beq.n	800ea78 <cleanup_stdio+0x10>
 800ea74:	f001 ff46 	bl	8010904 <_fflush_r>
 800ea78:	68a1      	ldr	r1, [r4, #8]
 800ea7a:	4b09      	ldr	r3, [pc, #36]	; (800eaa0 <cleanup_stdio+0x38>)
 800ea7c:	4299      	cmp	r1, r3
 800ea7e:	d002      	beq.n	800ea86 <cleanup_stdio+0x1e>
 800ea80:	4620      	mov	r0, r4
 800ea82:	f001 ff3f 	bl	8010904 <_fflush_r>
 800ea86:	68e1      	ldr	r1, [r4, #12]
 800ea88:	4b06      	ldr	r3, [pc, #24]	; (800eaa4 <cleanup_stdio+0x3c>)
 800ea8a:	4299      	cmp	r1, r3
 800ea8c:	d004      	beq.n	800ea98 <cleanup_stdio+0x30>
 800ea8e:	4620      	mov	r0, r4
 800ea90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea94:	f001 bf36 	b.w	8010904 <_fflush_r>
 800ea98:	bd10      	pop	{r4, pc}
 800ea9a:	bf00      	nop
 800ea9c:	20009684 	.word	0x20009684
 800eaa0:	200096ec 	.word	0x200096ec
 800eaa4:	20009754 	.word	0x20009754

0800eaa8 <global_stdio_init.part.0>:
 800eaa8:	b510      	push	{r4, lr}
 800eaaa:	4b0b      	ldr	r3, [pc, #44]	; (800ead8 <global_stdio_init.part.0+0x30>)
 800eaac:	4c0b      	ldr	r4, [pc, #44]	; (800eadc <global_stdio_init.part.0+0x34>)
 800eaae:	4a0c      	ldr	r2, [pc, #48]	; (800eae0 <global_stdio_init.part.0+0x38>)
 800eab0:	601a      	str	r2, [r3, #0]
 800eab2:	4620      	mov	r0, r4
 800eab4:	2200      	movs	r2, #0
 800eab6:	2104      	movs	r1, #4
 800eab8:	f7ff ff94 	bl	800e9e4 <std>
 800eabc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800eac0:	2201      	movs	r2, #1
 800eac2:	2109      	movs	r1, #9
 800eac4:	f7ff ff8e 	bl	800e9e4 <std>
 800eac8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800eacc:	2202      	movs	r2, #2
 800eace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ead2:	2112      	movs	r1, #18
 800ead4:	f7ff bf86 	b.w	800e9e4 <std>
 800ead8:	200097bc 	.word	0x200097bc
 800eadc:	20009684 	.word	0x20009684
 800eae0:	0800ea51 	.word	0x0800ea51

0800eae4 <__sfp_lock_acquire>:
 800eae4:	4801      	ldr	r0, [pc, #4]	; (800eaec <__sfp_lock_acquire+0x8>)
 800eae6:	f000 b99c 	b.w	800ee22 <__retarget_lock_acquire_recursive>
 800eaea:	bf00      	nop
 800eaec:	200097c5 	.word	0x200097c5

0800eaf0 <__sfp_lock_release>:
 800eaf0:	4801      	ldr	r0, [pc, #4]	; (800eaf8 <__sfp_lock_release+0x8>)
 800eaf2:	f000 b997 	b.w	800ee24 <__retarget_lock_release_recursive>
 800eaf6:	bf00      	nop
 800eaf8:	200097c5 	.word	0x200097c5

0800eafc <__sinit>:
 800eafc:	b510      	push	{r4, lr}
 800eafe:	4604      	mov	r4, r0
 800eb00:	f7ff fff0 	bl	800eae4 <__sfp_lock_acquire>
 800eb04:	6a23      	ldr	r3, [r4, #32]
 800eb06:	b11b      	cbz	r3, 800eb10 <__sinit+0x14>
 800eb08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb0c:	f7ff bff0 	b.w	800eaf0 <__sfp_lock_release>
 800eb10:	4b04      	ldr	r3, [pc, #16]	; (800eb24 <__sinit+0x28>)
 800eb12:	6223      	str	r3, [r4, #32]
 800eb14:	4b04      	ldr	r3, [pc, #16]	; (800eb28 <__sinit+0x2c>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d1f5      	bne.n	800eb08 <__sinit+0xc>
 800eb1c:	f7ff ffc4 	bl	800eaa8 <global_stdio_init.part.0>
 800eb20:	e7f2      	b.n	800eb08 <__sinit+0xc>
 800eb22:	bf00      	nop
 800eb24:	0800ea69 	.word	0x0800ea69
 800eb28:	200097bc 	.word	0x200097bc

0800eb2c <_strtol_l.constprop.0>:
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb32:	d001      	beq.n	800eb38 <_strtol_l.constprop.0+0xc>
 800eb34:	2b24      	cmp	r3, #36	; 0x24
 800eb36:	d906      	bls.n	800eb46 <_strtol_l.constprop.0+0x1a>
 800eb38:	f000 f948 	bl	800edcc <__errno>
 800eb3c:	2316      	movs	r3, #22
 800eb3e:	6003      	str	r3, [r0, #0]
 800eb40:	2000      	movs	r0, #0
 800eb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb46:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ec2c <_strtol_l.constprop.0+0x100>
 800eb4a:	460d      	mov	r5, r1
 800eb4c:	462e      	mov	r6, r5
 800eb4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb52:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800eb56:	f017 0708 	ands.w	r7, r7, #8
 800eb5a:	d1f7      	bne.n	800eb4c <_strtol_l.constprop.0+0x20>
 800eb5c:	2c2d      	cmp	r4, #45	; 0x2d
 800eb5e:	d132      	bne.n	800ebc6 <_strtol_l.constprop.0+0x9a>
 800eb60:	782c      	ldrb	r4, [r5, #0]
 800eb62:	2701      	movs	r7, #1
 800eb64:	1cb5      	adds	r5, r6, #2
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d05b      	beq.n	800ec22 <_strtol_l.constprop.0+0xf6>
 800eb6a:	2b10      	cmp	r3, #16
 800eb6c:	d109      	bne.n	800eb82 <_strtol_l.constprop.0+0x56>
 800eb6e:	2c30      	cmp	r4, #48	; 0x30
 800eb70:	d107      	bne.n	800eb82 <_strtol_l.constprop.0+0x56>
 800eb72:	782c      	ldrb	r4, [r5, #0]
 800eb74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eb78:	2c58      	cmp	r4, #88	; 0x58
 800eb7a:	d14d      	bne.n	800ec18 <_strtol_l.constprop.0+0xec>
 800eb7c:	786c      	ldrb	r4, [r5, #1]
 800eb7e:	2310      	movs	r3, #16
 800eb80:	3502      	adds	r5, #2
 800eb82:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eb86:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800eb8a:	f04f 0e00 	mov.w	lr, #0
 800eb8e:	fbb8 f9f3 	udiv	r9, r8, r3
 800eb92:	4676      	mov	r6, lr
 800eb94:	fb03 8a19 	mls	sl, r3, r9, r8
 800eb98:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800eb9c:	f1bc 0f09 	cmp.w	ip, #9
 800eba0:	d816      	bhi.n	800ebd0 <_strtol_l.constprop.0+0xa4>
 800eba2:	4664      	mov	r4, ip
 800eba4:	42a3      	cmp	r3, r4
 800eba6:	dd24      	ble.n	800ebf2 <_strtol_l.constprop.0+0xc6>
 800eba8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800ebac:	d008      	beq.n	800ebc0 <_strtol_l.constprop.0+0x94>
 800ebae:	45b1      	cmp	r9, r6
 800ebb0:	d31c      	bcc.n	800ebec <_strtol_l.constprop.0+0xc0>
 800ebb2:	d101      	bne.n	800ebb8 <_strtol_l.constprop.0+0x8c>
 800ebb4:	45a2      	cmp	sl, r4
 800ebb6:	db19      	blt.n	800ebec <_strtol_l.constprop.0+0xc0>
 800ebb8:	fb06 4603 	mla	r6, r6, r3, r4
 800ebbc:	f04f 0e01 	mov.w	lr, #1
 800ebc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ebc4:	e7e8      	b.n	800eb98 <_strtol_l.constprop.0+0x6c>
 800ebc6:	2c2b      	cmp	r4, #43	; 0x2b
 800ebc8:	bf04      	itt	eq
 800ebca:	782c      	ldrbeq	r4, [r5, #0]
 800ebcc:	1cb5      	addeq	r5, r6, #2
 800ebce:	e7ca      	b.n	800eb66 <_strtol_l.constprop.0+0x3a>
 800ebd0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ebd4:	f1bc 0f19 	cmp.w	ip, #25
 800ebd8:	d801      	bhi.n	800ebde <_strtol_l.constprop.0+0xb2>
 800ebda:	3c37      	subs	r4, #55	; 0x37
 800ebdc:	e7e2      	b.n	800eba4 <_strtol_l.constprop.0+0x78>
 800ebde:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ebe2:	f1bc 0f19 	cmp.w	ip, #25
 800ebe6:	d804      	bhi.n	800ebf2 <_strtol_l.constprop.0+0xc6>
 800ebe8:	3c57      	subs	r4, #87	; 0x57
 800ebea:	e7db      	b.n	800eba4 <_strtol_l.constprop.0+0x78>
 800ebec:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800ebf0:	e7e6      	b.n	800ebc0 <_strtol_l.constprop.0+0x94>
 800ebf2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800ebf6:	d105      	bne.n	800ec04 <_strtol_l.constprop.0+0xd8>
 800ebf8:	2322      	movs	r3, #34	; 0x22
 800ebfa:	6003      	str	r3, [r0, #0]
 800ebfc:	4646      	mov	r6, r8
 800ebfe:	b942      	cbnz	r2, 800ec12 <_strtol_l.constprop.0+0xe6>
 800ec00:	4630      	mov	r0, r6
 800ec02:	e79e      	b.n	800eb42 <_strtol_l.constprop.0+0x16>
 800ec04:	b107      	cbz	r7, 800ec08 <_strtol_l.constprop.0+0xdc>
 800ec06:	4276      	negs	r6, r6
 800ec08:	2a00      	cmp	r2, #0
 800ec0a:	d0f9      	beq.n	800ec00 <_strtol_l.constprop.0+0xd4>
 800ec0c:	f1be 0f00 	cmp.w	lr, #0
 800ec10:	d000      	beq.n	800ec14 <_strtol_l.constprop.0+0xe8>
 800ec12:	1e69      	subs	r1, r5, #1
 800ec14:	6011      	str	r1, [r2, #0]
 800ec16:	e7f3      	b.n	800ec00 <_strtol_l.constprop.0+0xd4>
 800ec18:	2430      	movs	r4, #48	; 0x30
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d1b1      	bne.n	800eb82 <_strtol_l.constprop.0+0x56>
 800ec1e:	2308      	movs	r3, #8
 800ec20:	e7af      	b.n	800eb82 <_strtol_l.constprop.0+0x56>
 800ec22:	2c30      	cmp	r4, #48	; 0x30
 800ec24:	d0a5      	beq.n	800eb72 <_strtol_l.constprop.0+0x46>
 800ec26:	230a      	movs	r3, #10
 800ec28:	e7ab      	b.n	800eb82 <_strtol_l.constprop.0+0x56>
 800ec2a:	bf00      	nop
 800ec2c:	0801663b 	.word	0x0801663b

0800ec30 <_strtol_r>:
 800ec30:	f7ff bf7c 	b.w	800eb2c <_strtol_l.constprop.0>

0800ec34 <_fwalk_sglue>:
 800ec34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec38:	4607      	mov	r7, r0
 800ec3a:	4688      	mov	r8, r1
 800ec3c:	4614      	mov	r4, r2
 800ec3e:	2600      	movs	r6, #0
 800ec40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec44:	f1b9 0901 	subs.w	r9, r9, #1
 800ec48:	d505      	bpl.n	800ec56 <_fwalk_sglue+0x22>
 800ec4a:	6824      	ldr	r4, [r4, #0]
 800ec4c:	2c00      	cmp	r4, #0
 800ec4e:	d1f7      	bne.n	800ec40 <_fwalk_sglue+0xc>
 800ec50:	4630      	mov	r0, r6
 800ec52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec56:	89ab      	ldrh	r3, [r5, #12]
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d907      	bls.n	800ec6c <_fwalk_sglue+0x38>
 800ec5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec60:	3301      	adds	r3, #1
 800ec62:	d003      	beq.n	800ec6c <_fwalk_sglue+0x38>
 800ec64:	4629      	mov	r1, r5
 800ec66:	4638      	mov	r0, r7
 800ec68:	47c0      	blx	r8
 800ec6a:	4306      	orrs	r6, r0
 800ec6c:	3568      	adds	r5, #104	; 0x68
 800ec6e:	e7e9      	b.n	800ec44 <_fwalk_sglue+0x10>

0800ec70 <_vsniprintf_r>:
 800ec70:	b530      	push	{r4, r5, lr}
 800ec72:	4614      	mov	r4, r2
 800ec74:	2c00      	cmp	r4, #0
 800ec76:	b09b      	sub	sp, #108	; 0x6c
 800ec78:	4605      	mov	r5, r0
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	da05      	bge.n	800ec8a <_vsniprintf_r+0x1a>
 800ec7e:	238b      	movs	r3, #139	; 0x8b
 800ec80:	6003      	str	r3, [r0, #0]
 800ec82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec86:	b01b      	add	sp, #108	; 0x6c
 800ec88:	bd30      	pop	{r4, r5, pc}
 800ec8a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ec8e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ec92:	bf14      	ite	ne
 800ec94:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ec98:	4623      	moveq	r3, r4
 800ec9a:	9302      	str	r3, [sp, #8]
 800ec9c:	9305      	str	r3, [sp, #20]
 800ec9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eca2:	9100      	str	r1, [sp, #0]
 800eca4:	9104      	str	r1, [sp, #16]
 800eca6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ecaa:	4669      	mov	r1, sp
 800ecac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ecae:	f001 f807 	bl	800fcc0 <_svfiprintf_r>
 800ecb2:	1c43      	adds	r3, r0, #1
 800ecb4:	bfbc      	itt	lt
 800ecb6:	238b      	movlt	r3, #139	; 0x8b
 800ecb8:	602b      	strlt	r3, [r5, #0]
 800ecba:	2c00      	cmp	r4, #0
 800ecbc:	d0e3      	beq.n	800ec86 <_vsniprintf_r+0x16>
 800ecbe:	9b00      	ldr	r3, [sp, #0]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	701a      	strb	r2, [r3, #0]
 800ecc4:	e7df      	b.n	800ec86 <_vsniprintf_r+0x16>
	...

0800ecc8 <vsniprintf>:
 800ecc8:	b507      	push	{r0, r1, r2, lr}
 800ecca:	9300      	str	r3, [sp, #0]
 800eccc:	4613      	mov	r3, r2
 800ecce:	460a      	mov	r2, r1
 800ecd0:	4601      	mov	r1, r0
 800ecd2:	4803      	ldr	r0, [pc, #12]	; (800ece0 <vsniprintf+0x18>)
 800ecd4:	6800      	ldr	r0, [r0, #0]
 800ecd6:	f7ff ffcb 	bl	800ec70 <_vsniprintf_r>
 800ecda:	b003      	add	sp, #12
 800ecdc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ece0:	2000009c 	.word	0x2000009c

0800ece4 <iprintf>:
 800ece4:	b40f      	push	{r0, r1, r2, r3}
 800ece6:	b507      	push	{r0, r1, r2, lr}
 800ece8:	4906      	ldr	r1, [pc, #24]	; (800ed04 <iprintf+0x20>)
 800ecea:	ab04      	add	r3, sp, #16
 800ecec:	6808      	ldr	r0, [r1, #0]
 800ecee:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecf2:	6881      	ldr	r1, [r0, #8]
 800ecf4:	9301      	str	r3, [sp, #4]
 800ecf6:	f001 fadd 	bl	80102b4 <_vfiprintf_r>
 800ecfa:	b003      	add	sp, #12
 800ecfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed00:	b004      	add	sp, #16
 800ed02:	4770      	bx	lr
 800ed04:	2000009c 	.word	0x2000009c

0800ed08 <memset>:
 800ed08:	4402      	add	r2, r0
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d100      	bne.n	800ed12 <memset+0xa>
 800ed10:	4770      	bx	lr
 800ed12:	f803 1b01 	strb.w	r1, [r3], #1
 800ed16:	e7f9      	b.n	800ed0c <memset+0x4>

0800ed18 <_localeconv_r>:
 800ed18:	4800      	ldr	r0, [pc, #0]	; (800ed1c <_localeconv_r+0x4>)
 800ed1a:	4770      	bx	lr
 800ed1c:	20000190 	.word	0x20000190

0800ed20 <_close_r>:
 800ed20:	b538      	push	{r3, r4, r5, lr}
 800ed22:	4d06      	ldr	r5, [pc, #24]	; (800ed3c <_close_r+0x1c>)
 800ed24:	2300      	movs	r3, #0
 800ed26:	4604      	mov	r4, r0
 800ed28:	4608      	mov	r0, r1
 800ed2a:	602b      	str	r3, [r5, #0]
 800ed2c:	f7f7 f8a7 	bl	8005e7e <_close>
 800ed30:	1c43      	adds	r3, r0, #1
 800ed32:	d102      	bne.n	800ed3a <_close_r+0x1a>
 800ed34:	682b      	ldr	r3, [r5, #0]
 800ed36:	b103      	cbz	r3, 800ed3a <_close_r+0x1a>
 800ed38:	6023      	str	r3, [r4, #0]
 800ed3a:	bd38      	pop	{r3, r4, r5, pc}
 800ed3c:	200097c0 	.word	0x200097c0

0800ed40 <_lseek_r>:
 800ed40:	b538      	push	{r3, r4, r5, lr}
 800ed42:	4d07      	ldr	r5, [pc, #28]	; (800ed60 <_lseek_r+0x20>)
 800ed44:	4604      	mov	r4, r0
 800ed46:	4608      	mov	r0, r1
 800ed48:	4611      	mov	r1, r2
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	602a      	str	r2, [r5, #0]
 800ed4e:	461a      	mov	r2, r3
 800ed50:	f7f7 f8bc 	bl	8005ecc <_lseek>
 800ed54:	1c43      	adds	r3, r0, #1
 800ed56:	d102      	bne.n	800ed5e <_lseek_r+0x1e>
 800ed58:	682b      	ldr	r3, [r5, #0]
 800ed5a:	b103      	cbz	r3, 800ed5e <_lseek_r+0x1e>
 800ed5c:	6023      	str	r3, [r4, #0]
 800ed5e:	bd38      	pop	{r3, r4, r5, pc}
 800ed60:	200097c0 	.word	0x200097c0

0800ed64 <_read_r>:
 800ed64:	b538      	push	{r3, r4, r5, lr}
 800ed66:	4d07      	ldr	r5, [pc, #28]	; (800ed84 <_read_r+0x20>)
 800ed68:	4604      	mov	r4, r0
 800ed6a:	4608      	mov	r0, r1
 800ed6c:	4611      	mov	r1, r2
 800ed6e:	2200      	movs	r2, #0
 800ed70:	602a      	str	r2, [r5, #0]
 800ed72:	461a      	mov	r2, r3
 800ed74:	f7f7 f84a 	bl	8005e0c <_read>
 800ed78:	1c43      	adds	r3, r0, #1
 800ed7a:	d102      	bne.n	800ed82 <_read_r+0x1e>
 800ed7c:	682b      	ldr	r3, [r5, #0]
 800ed7e:	b103      	cbz	r3, 800ed82 <_read_r+0x1e>
 800ed80:	6023      	str	r3, [r4, #0]
 800ed82:	bd38      	pop	{r3, r4, r5, pc}
 800ed84:	200097c0 	.word	0x200097c0

0800ed88 <_sbrk_r>:
 800ed88:	b538      	push	{r3, r4, r5, lr}
 800ed8a:	4d06      	ldr	r5, [pc, #24]	; (800eda4 <_sbrk_r+0x1c>)
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	4604      	mov	r4, r0
 800ed90:	4608      	mov	r0, r1
 800ed92:	602b      	str	r3, [r5, #0]
 800ed94:	f7f7 f8a8 	bl	8005ee8 <_sbrk>
 800ed98:	1c43      	adds	r3, r0, #1
 800ed9a:	d102      	bne.n	800eda2 <_sbrk_r+0x1a>
 800ed9c:	682b      	ldr	r3, [r5, #0]
 800ed9e:	b103      	cbz	r3, 800eda2 <_sbrk_r+0x1a>
 800eda0:	6023      	str	r3, [r4, #0]
 800eda2:	bd38      	pop	{r3, r4, r5, pc}
 800eda4:	200097c0 	.word	0x200097c0

0800eda8 <_write_r>:
 800eda8:	b538      	push	{r3, r4, r5, lr}
 800edaa:	4d07      	ldr	r5, [pc, #28]	; (800edc8 <_write_r+0x20>)
 800edac:	4604      	mov	r4, r0
 800edae:	4608      	mov	r0, r1
 800edb0:	4611      	mov	r1, r2
 800edb2:	2200      	movs	r2, #0
 800edb4:	602a      	str	r2, [r5, #0]
 800edb6:	461a      	mov	r2, r3
 800edb8:	f7f7 f845 	bl	8005e46 <_write>
 800edbc:	1c43      	adds	r3, r0, #1
 800edbe:	d102      	bne.n	800edc6 <_write_r+0x1e>
 800edc0:	682b      	ldr	r3, [r5, #0]
 800edc2:	b103      	cbz	r3, 800edc6 <_write_r+0x1e>
 800edc4:	6023      	str	r3, [r4, #0]
 800edc6:	bd38      	pop	{r3, r4, r5, pc}
 800edc8:	200097c0 	.word	0x200097c0

0800edcc <__errno>:
 800edcc:	4b01      	ldr	r3, [pc, #4]	; (800edd4 <__errno+0x8>)
 800edce:	6818      	ldr	r0, [r3, #0]
 800edd0:	4770      	bx	lr
 800edd2:	bf00      	nop
 800edd4:	2000009c 	.word	0x2000009c

0800edd8 <__libc_init_array>:
 800edd8:	b570      	push	{r4, r5, r6, lr}
 800edda:	4d0d      	ldr	r5, [pc, #52]	; (800ee10 <__libc_init_array+0x38>)
 800eddc:	4c0d      	ldr	r4, [pc, #52]	; (800ee14 <__libc_init_array+0x3c>)
 800edde:	1b64      	subs	r4, r4, r5
 800ede0:	10a4      	asrs	r4, r4, #2
 800ede2:	2600      	movs	r6, #0
 800ede4:	42a6      	cmp	r6, r4
 800ede6:	d109      	bne.n	800edfc <__libc_init_array+0x24>
 800ede8:	4d0b      	ldr	r5, [pc, #44]	; (800ee18 <__libc_init_array+0x40>)
 800edea:	4c0c      	ldr	r4, [pc, #48]	; (800ee1c <__libc_init_array+0x44>)
 800edec:	f003 f80c 	bl	8011e08 <_init>
 800edf0:	1b64      	subs	r4, r4, r5
 800edf2:	10a4      	asrs	r4, r4, #2
 800edf4:	2600      	movs	r6, #0
 800edf6:	42a6      	cmp	r6, r4
 800edf8:	d105      	bne.n	800ee06 <__libc_init_array+0x2e>
 800edfa:	bd70      	pop	{r4, r5, r6, pc}
 800edfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee00:	4798      	blx	r3
 800ee02:	3601      	adds	r6, #1
 800ee04:	e7ee      	b.n	800ede4 <__libc_init_array+0xc>
 800ee06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee0a:	4798      	blx	r3
 800ee0c:	3601      	adds	r6, #1
 800ee0e:	e7f2      	b.n	800edf6 <__libc_init_array+0x1e>
 800ee10:	080169a0 	.word	0x080169a0
 800ee14:	080169a0 	.word	0x080169a0
 800ee18:	080169a0 	.word	0x080169a0
 800ee1c:	080169a4 	.word	0x080169a4

0800ee20 <__retarget_lock_init_recursive>:
 800ee20:	4770      	bx	lr

0800ee22 <__retarget_lock_acquire_recursive>:
 800ee22:	4770      	bx	lr

0800ee24 <__retarget_lock_release_recursive>:
 800ee24:	4770      	bx	lr

0800ee26 <memcpy>:
 800ee26:	440a      	add	r2, r1
 800ee28:	4291      	cmp	r1, r2
 800ee2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ee2e:	d100      	bne.n	800ee32 <memcpy+0xc>
 800ee30:	4770      	bx	lr
 800ee32:	b510      	push	{r4, lr}
 800ee34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee3c:	4291      	cmp	r1, r2
 800ee3e:	d1f9      	bne.n	800ee34 <memcpy+0xe>
 800ee40:	bd10      	pop	{r4, pc}
	...

0800ee44 <__assert_func>:
 800ee44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee46:	4614      	mov	r4, r2
 800ee48:	461a      	mov	r2, r3
 800ee4a:	4b09      	ldr	r3, [pc, #36]	; (800ee70 <__assert_func+0x2c>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	4605      	mov	r5, r0
 800ee50:	68d8      	ldr	r0, [r3, #12]
 800ee52:	b14c      	cbz	r4, 800ee68 <__assert_func+0x24>
 800ee54:	4b07      	ldr	r3, [pc, #28]	; (800ee74 <__assert_func+0x30>)
 800ee56:	9100      	str	r1, [sp, #0]
 800ee58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee5c:	4906      	ldr	r1, [pc, #24]	; (800ee78 <__assert_func+0x34>)
 800ee5e:	462b      	mov	r3, r5
 800ee60:	f002 f8f4 	bl	801104c <fiprintf>
 800ee64:	f002 fb16 	bl	8011494 <abort>
 800ee68:	4b04      	ldr	r3, [pc, #16]	; (800ee7c <__assert_func+0x38>)
 800ee6a:	461c      	mov	r4, r3
 800ee6c:	e7f3      	b.n	800ee56 <__assert_func+0x12>
 800ee6e:	bf00      	nop
 800ee70:	2000009c 	.word	0x2000009c
 800ee74:	0801673b 	.word	0x0801673b
 800ee78:	08016748 	.word	0x08016748
 800ee7c:	08016776 	.word	0x08016776

0800ee80 <quorem>:
 800ee80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	6903      	ldr	r3, [r0, #16]
 800ee86:	690c      	ldr	r4, [r1, #16]
 800ee88:	42a3      	cmp	r3, r4
 800ee8a:	4607      	mov	r7, r0
 800ee8c:	db7e      	blt.n	800ef8c <quorem+0x10c>
 800ee8e:	3c01      	subs	r4, #1
 800ee90:	f101 0814 	add.w	r8, r1, #20
 800ee94:	f100 0514 	add.w	r5, r0, #20
 800ee98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee9c:	9301      	str	r3, [sp, #4]
 800ee9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eea2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eea6:	3301      	adds	r3, #1
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eeae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eeb2:	fbb2 f6f3 	udiv	r6, r2, r3
 800eeb6:	d331      	bcc.n	800ef1c <quorem+0x9c>
 800eeb8:	f04f 0e00 	mov.w	lr, #0
 800eebc:	4640      	mov	r0, r8
 800eebe:	46ac      	mov	ip, r5
 800eec0:	46f2      	mov	sl, lr
 800eec2:	f850 2b04 	ldr.w	r2, [r0], #4
 800eec6:	b293      	uxth	r3, r2
 800eec8:	fb06 e303 	mla	r3, r6, r3, lr
 800eecc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eed0:	0c1a      	lsrs	r2, r3, #16
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	ebaa 0303 	sub.w	r3, sl, r3
 800eed8:	f8dc a000 	ldr.w	sl, [ip]
 800eedc:	fa13 f38a 	uxtah	r3, r3, sl
 800eee0:	fb06 220e 	mla	r2, r6, lr, r2
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	9b00      	ldr	r3, [sp, #0]
 800eee8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eeec:	b292      	uxth	r2, r2
 800eeee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800eef2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eef6:	f8bd 3000 	ldrh.w	r3, [sp]
 800eefa:	4581      	cmp	r9, r0
 800eefc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef00:	f84c 3b04 	str.w	r3, [ip], #4
 800ef04:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef08:	d2db      	bcs.n	800eec2 <quorem+0x42>
 800ef0a:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef0e:	b92b      	cbnz	r3, 800ef1c <quorem+0x9c>
 800ef10:	9b01      	ldr	r3, [sp, #4]
 800ef12:	3b04      	subs	r3, #4
 800ef14:	429d      	cmp	r5, r3
 800ef16:	461a      	mov	r2, r3
 800ef18:	d32c      	bcc.n	800ef74 <quorem+0xf4>
 800ef1a:	613c      	str	r4, [r7, #16]
 800ef1c:	4638      	mov	r0, r7
 800ef1e:	f001 ff95 	bl	8010e4c <__mcmp>
 800ef22:	2800      	cmp	r0, #0
 800ef24:	db22      	blt.n	800ef6c <quorem+0xec>
 800ef26:	3601      	adds	r6, #1
 800ef28:	4629      	mov	r1, r5
 800ef2a:	2000      	movs	r0, #0
 800ef2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef30:	f8d1 c000 	ldr.w	ip, [r1]
 800ef34:	b293      	uxth	r3, r2
 800ef36:	1ac3      	subs	r3, r0, r3
 800ef38:	0c12      	lsrs	r2, r2, #16
 800ef3a:	fa13 f38c 	uxtah	r3, r3, ip
 800ef3e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ef42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef4c:	45c1      	cmp	r9, r8
 800ef4e:	f841 3b04 	str.w	r3, [r1], #4
 800ef52:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ef56:	d2e9      	bcs.n	800ef2c <quorem+0xac>
 800ef58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef60:	b922      	cbnz	r2, 800ef6c <quorem+0xec>
 800ef62:	3b04      	subs	r3, #4
 800ef64:	429d      	cmp	r5, r3
 800ef66:	461a      	mov	r2, r3
 800ef68:	d30a      	bcc.n	800ef80 <quorem+0x100>
 800ef6a:	613c      	str	r4, [r7, #16]
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	b003      	add	sp, #12
 800ef70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef74:	6812      	ldr	r2, [r2, #0]
 800ef76:	3b04      	subs	r3, #4
 800ef78:	2a00      	cmp	r2, #0
 800ef7a:	d1ce      	bne.n	800ef1a <quorem+0x9a>
 800ef7c:	3c01      	subs	r4, #1
 800ef7e:	e7c9      	b.n	800ef14 <quorem+0x94>
 800ef80:	6812      	ldr	r2, [r2, #0]
 800ef82:	3b04      	subs	r3, #4
 800ef84:	2a00      	cmp	r2, #0
 800ef86:	d1f0      	bne.n	800ef6a <quorem+0xea>
 800ef88:	3c01      	subs	r4, #1
 800ef8a:	e7eb      	b.n	800ef64 <quorem+0xe4>
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	e7ee      	b.n	800ef6e <quorem+0xee>

0800ef90 <_dtoa_r>:
 800ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef94:	ed2d 8b04 	vpush	{d8-d9}
 800ef98:	69c5      	ldr	r5, [r0, #28]
 800ef9a:	b093      	sub	sp, #76	; 0x4c
 800ef9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800efa0:	ec57 6b10 	vmov	r6, r7, d0
 800efa4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800efa8:	9107      	str	r1, [sp, #28]
 800efaa:	4604      	mov	r4, r0
 800efac:	920a      	str	r2, [sp, #40]	; 0x28
 800efae:	930d      	str	r3, [sp, #52]	; 0x34
 800efb0:	b975      	cbnz	r5, 800efd0 <_dtoa_r+0x40>
 800efb2:	2010      	movs	r0, #16
 800efb4:	f7ff fa0c 	bl	800e3d0 <malloc>
 800efb8:	4602      	mov	r2, r0
 800efba:	61e0      	str	r0, [r4, #28]
 800efbc:	b920      	cbnz	r0, 800efc8 <_dtoa_r+0x38>
 800efbe:	4bae      	ldr	r3, [pc, #696]	; (800f278 <_dtoa_r+0x2e8>)
 800efc0:	21ef      	movs	r1, #239	; 0xef
 800efc2:	48ae      	ldr	r0, [pc, #696]	; (800f27c <_dtoa_r+0x2ec>)
 800efc4:	f7ff ff3e 	bl	800ee44 <__assert_func>
 800efc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800efcc:	6005      	str	r5, [r0, #0]
 800efce:	60c5      	str	r5, [r0, #12]
 800efd0:	69e3      	ldr	r3, [r4, #28]
 800efd2:	6819      	ldr	r1, [r3, #0]
 800efd4:	b151      	cbz	r1, 800efec <_dtoa_r+0x5c>
 800efd6:	685a      	ldr	r2, [r3, #4]
 800efd8:	604a      	str	r2, [r1, #4]
 800efda:	2301      	movs	r3, #1
 800efdc:	4093      	lsls	r3, r2
 800efde:	608b      	str	r3, [r1, #8]
 800efe0:	4620      	mov	r0, r4
 800efe2:	f001 fcf7 	bl	80109d4 <_Bfree>
 800efe6:	69e3      	ldr	r3, [r4, #28]
 800efe8:	2200      	movs	r2, #0
 800efea:	601a      	str	r2, [r3, #0]
 800efec:	1e3b      	subs	r3, r7, #0
 800efee:	bfbb      	ittet	lt
 800eff0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eff4:	9303      	strlt	r3, [sp, #12]
 800eff6:	2300      	movge	r3, #0
 800eff8:	2201      	movlt	r2, #1
 800effa:	bfac      	ite	ge
 800effc:	f8c8 3000 	strge.w	r3, [r8]
 800f000:	f8c8 2000 	strlt.w	r2, [r8]
 800f004:	4b9e      	ldr	r3, [pc, #632]	; (800f280 <_dtoa_r+0x2f0>)
 800f006:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f00a:	ea33 0308 	bics.w	r3, r3, r8
 800f00e:	d11b      	bne.n	800f048 <_dtoa_r+0xb8>
 800f010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f012:	f242 730f 	movw	r3, #9999	; 0x270f
 800f016:	6013      	str	r3, [r2, #0]
 800f018:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f01c:	4333      	orrs	r3, r6
 800f01e:	f000 8593 	beq.w	800fb48 <_dtoa_r+0xbb8>
 800f022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f024:	b963      	cbnz	r3, 800f040 <_dtoa_r+0xb0>
 800f026:	4b97      	ldr	r3, [pc, #604]	; (800f284 <_dtoa_r+0x2f4>)
 800f028:	e027      	b.n	800f07a <_dtoa_r+0xea>
 800f02a:	4b97      	ldr	r3, [pc, #604]	; (800f288 <_dtoa_r+0x2f8>)
 800f02c:	9300      	str	r3, [sp, #0]
 800f02e:	3308      	adds	r3, #8
 800f030:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f032:	6013      	str	r3, [r2, #0]
 800f034:	9800      	ldr	r0, [sp, #0]
 800f036:	b013      	add	sp, #76	; 0x4c
 800f038:	ecbd 8b04 	vpop	{d8-d9}
 800f03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f040:	4b90      	ldr	r3, [pc, #576]	; (800f284 <_dtoa_r+0x2f4>)
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	3303      	adds	r3, #3
 800f046:	e7f3      	b.n	800f030 <_dtoa_r+0xa0>
 800f048:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f04c:	2200      	movs	r2, #0
 800f04e:	ec51 0b17 	vmov	r0, r1, d7
 800f052:	eeb0 8a47 	vmov.f32	s16, s14
 800f056:	eef0 8a67 	vmov.f32	s17, s15
 800f05a:	2300      	movs	r3, #0
 800f05c:	f7f1 fd54 	bl	8000b08 <__aeabi_dcmpeq>
 800f060:	4681      	mov	r9, r0
 800f062:	b160      	cbz	r0, 800f07e <_dtoa_r+0xee>
 800f064:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f066:	2301      	movs	r3, #1
 800f068:	6013      	str	r3, [r2, #0]
 800f06a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	f000 8568 	beq.w	800fb42 <_dtoa_r+0xbb2>
 800f072:	4b86      	ldr	r3, [pc, #536]	; (800f28c <_dtoa_r+0x2fc>)
 800f074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f076:	6013      	str	r3, [r2, #0]
 800f078:	3b01      	subs	r3, #1
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	e7da      	b.n	800f034 <_dtoa_r+0xa4>
 800f07e:	aa10      	add	r2, sp, #64	; 0x40
 800f080:	a911      	add	r1, sp, #68	; 0x44
 800f082:	4620      	mov	r0, r4
 800f084:	eeb0 0a48 	vmov.f32	s0, s16
 800f088:	eef0 0a68 	vmov.f32	s1, s17
 800f08c:	f001 ff84 	bl	8010f98 <__d2b>
 800f090:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f094:	4682      	mov	sl, r0
 800f096:	2d00      	cmp	r5, #0
 800f098:	d07f      	beq.n	800f19a <_dtoa_r+0x20a>
 800f09a:	ee18 3a90 	vmov	r3, s17
 800f09e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f0a6:	ec51 0b18 	vmov	r0, r1, d8
 800f0aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f0ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f0b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f0b6:	4619      	mov	r1, r3
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	4b75      	ldr	r3, [pc, #468]	; (800f290 <_dtoa_r+0x300>)
 800f0bc:	f7f1 f904 	bl	80002c8 <__aeabi_dsub>
 800f0c0:	a367      	add	r3, pc, #412	; (adr r3, 800f260 <_dtoa_r+0x2d0>)
 800f0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c6:	f7f1 fab7 	bl	8000638 <__aeabi_dmul>
 800f0ca:	a367      	add	r3, pc, #412	; (adr r3, 800f268 <_dtoa_r+0x2d8>)
 800f0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d0:	f7f1 f8fc 	bl	80002cc <__adddf3>
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	460f      	mov	r7, r1
 800f0da:	f7f1 fa43 	bl	8000564 <__aeabi_i2d>
 800f0de:	a364      	add	r3, pc, #400	; (adr r3, 800f270 <_dtoa_r+0x2e0>)
 800f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e4:	f7f1 faa8 	bl	8000638 <__aeabi_dmul>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	4639      	mov	r1, r7
 800f0f0:	f7f1 f8ec 	bl	80002cc <__adddf3>
 800f0f4:	4606      	mov	r6, r0
 800f0f6:	460f      	mov	r7, r1
 800f0f8:	f7f1 fd4e 	bl	8000b98 <__aeabi_d2iz>
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	4683      	mov	fp, r0
 800f100:	2300      	movs	r3, #0
 800f102:	4630      	mov	r0, r6
 800f104:	4639      	mov	r1, r7
 800f106:	f7f1 fd09 	bl	8000b1c <__aeabi_dcmplt>
 800f10a:	b148      	cbz	r0, 800f120 <_dtoa_r+0x190>
 800f10c:	4658      	mov	r0, fp
 800f10e:	f7f1 fa29 	bl	8000564 <__aeabi_i2d>
 800f112:	4632      	mov	r2, r6
 800f114:	463b      	mov	r3, r7
 800f116:	f7f1 fcf7 	bl	8000b08 <__aeabi_dcmpeq>
 800f11a:	b908      	cbnz	r0, 800f120 <_dtoa_r+0x190>
 800f11c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f120:	f1bb 0f16 	cmp.w	fp, #22
 800f124:	d857      	bhi.n	800f1d6 <_dtoa_r+0x246>
 800f126:	4b5b      	ldr	r3, [pc, #364]	; (800f294 <_dtoa_r+0x304>)
 800f128:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f130:	ec51 0b18 	vmov	r0, r1, d8
 800f134:	f7f1 fcf2 	bl	8000b1c <__aeabi_dcmplt>
 800f138:	2800      	cmp	r0, #0
 800f13a:	d04e      	beq.n	800f1da <_dtoa_r+0x24a>
 800f13c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f140:	2300      	movs	r3, #0
 800f142:	930c      	str	r3, [sp, #48]	; 0x30
 800f144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f146:	1b5b      	subs	r3, r3, r5
 800f148:	1e5a      	subs	r2, r3, #1
 800f14a:	bf45      	ittet	mi
 800f14c:	f1c3 0301 	rsbmi	r3, r3, #1
 800f150:	9305      	strmi	r3, [sp, #20]
 800f152:	2300      	movpl	r3, #0
 800f154:	2300      	movmi	r3, #0
 800f156:	9206      	str	r2, [sp, #24]
 800f158:	bf54      	ite	pl
 800f15a:	9305      	strpl	r3, [sp, #20]
 800f15c:	9306      	strmi	r3, [sp, #24]
 800f15e:	f1bb 0f00 	cmp.w	fp, #0
 800f162:	db3c      	blt.n	800f1de <_dtoa_r+0x24e>
 800f164:	9b06      	ldr	r3, [sp, #24]
 800f166:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f16a:	445b      	add	r3, fp
 800f16c:	9306      	str	r3, [sp, #24]
 800f16e:	2300      	movs	r3, #0
 800f170:	9308      	str	r3, [sp, #32]
 800f172:	9b07      	ldr	r3, [sp, #28]
 800f174:	2b09      	cmp	r3, #9
 800f176:	d868      	bhi.n	800f24a <_dtoa_r+0x2ba>
 800f178:	2b05      	cmp	r3, #5
 800f17a:	bfc4      	itt	gt
 800f17c:	3b04      	subgt	r3, #4
 800f17e:	9307      	strgt	r3, [sp, #28]
 800f180:	9b07      	ldr	r3, [sp, #28]
 800f182:	f1a3 0302 	sub.w	r3, r3, #2
 800f186:	bfcc      	ite	gt
 800f188:	2500      	movgt	r5, #0
 800f18a:	2501      	movle	r5, #1
 800f18c:	2b03      	cmp	r3, #3
 800f18e:	f200 8085 	bhi.w	800f29c <_dtoa_r+0x30c>
 800f192:	e8df f003 	tbb	[pc, r3]
 800f196:	3b2e      	.short	0x3b2e
 800f198:	5839      	.short	0x5839
 800f19a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f19e:	441d      	add	r5, r3
 800f1a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f1a4:	2b20      	cmp	r3, #32
 800f1a6:	bfc1      	itttt	gt
 800f1a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f1ac:	fa08 f803 	lslgt.w	r8, r8, r3
 800f1b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f1b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f1b8:	bfd6      	itet	le
 800f1ba:	f1c3 0320 	rsble	r3, r3, #32
 800f1be:	ea48 0003 	orrgt.w	r0, r8, r3
 800f1c2:	fa06 f003 	lslle.w	r0, r6, r3
 800f1c6:	f7f1 f9bd 	bl	8000544 <__aeabi_ui2d>
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f1d0:	3d01      	subs	r5, #1
 800f1d2:	920e      	str	r2, [sp, #56]	; 0x38
 800f1d4:	e76f      	b.n	800f0b6 <_dtoa_r+0x126>
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	e7b3      	b.n	800f142 <_dtoa_r+0x1b2>
 800f1da:	900c      	str	r0, [sp, #48]	; 0x30
 800f1dc:	e7b2      	b.n	800f144 <_dtoa_r+0x1b4>
 800f1de:	9b05      	ldr	r3, [sp, #20]
 800f1e0:	eba3 030b 	sub.w	r3, r3, fp
 800f1e4:	9305      	str	r3, [sp, #20]
 800f1e6:	f1cb 0300 	rsb	r3, fp, #0
 800f1ea:	9308      	str	r3, [sp, #32]
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1f0:	e7bf      	b.n	800f172 <_dtoa_r+0x1e2>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	dc52      	bgt.n	800f2a2 <_dtoa_r+0x312>
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	9301      	str	r3, [sp, #4]
 800f200:	9304      	str	r3, [sp, #16]
 800f202:	461a      	mov	r2, r3
 800f204:	920a      	str	r2, [sp, #40]	; 0x28
 800f206:	e00b      	b.n	800f220 <_dtoa_r+0x290>
 800f208:	2301      	movs	r3, #1
 800f20a:	e7f3      	b.n	800f1f4 <_dtoa_r+0x264>
 800f20c:	2300      	movs	r3, #0
 800f20e:	9309      	str	r3, [sp, #36]	; 0x24
 800f210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f212:	445b      	add	r3, fp
 800f214:	9301      	str	r3, [sp, #4]
 800f216:	3301      	adds	r3, #1
 800f218:	2b01      	cmp	r3, #1
 800f21a:	9304      	str	r3, [sp, #16]
 800f21c:	bfb8      	it	lt
 800f21e:	2301      	movlt	r3, #1
 800f220:	69e0      	ldr	r0, [r4, #28]
 800f222:	2100      	movs	r1, #0
 800f224:	2204      	movs	r2, #4
 800f226:	f102 0614 	add.w	r6, r2, #20
 800f22a:	429e      	cmp	r6, r3
 800f22c:	d93d      	bls.n	800f2aa <_dtoa_r+0x31a>
 800f22e:	6041      	str	r1, [r0, #4]
 800f230:	4620      	mov	r0, r4
 800f232:	f001 fb8f 	bl	8010954 <_Balloc>
 800f236:	9000      	str	r0, [sp, #0]
 800f238:	2800      	cmp	r0, #0
 800f23a:	d139      	bne.n	800f2b0 <_dtoa_r+0x320>
 800f23c:	4b16      	ldr	r3, [pc, #88]	; (800f298 <_dtoa_r+0x308>)
 800f23e:	4602      	mov	r2, r0
 800f240:	f240 11af 	movw	r1, #431	; 0x1af
 800f244:	e6bd      	b.n	800efc2 <_dtoa_r+0x32>
 800f246:	2301      	movs	r3, #1
 800f248:	e7e1      	b.n	800f20e <_dtoa_r+0x27e>
 800f24a:	2501      	movs	r5, #1
 800f24c:	2300      	movs	r3, #0
 800f24e:	9307      	str	r3, [sp, #28]
 800f250:	9509      	str	r5, [sp, #36]	; 0x24
 800f252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f256:	9301      	str	r3, [sp, #4]
 800f258:	9304      	str	r3, [sp, #16]
 800f25a:	2200      	movs	r2, #0
 800f25c:	2312      	movs	r3, #18
 800f25e:	e7d1      	b.n	800f204 <_dtoa_r+0x274>
 800f260:	636f4361 	.word	0x636f4361
 800f264:	3fd287a7 	.word	0x3fd287a7
 800f268:	8b60c8b3 	.word	0x8b60c8b3
 800f26c:	3fc68a28 	.word	0x3fc68a28
 800f270:	509f79fb 	.word	0x509f79fb
 800f274:	3fd34413 	.word	0x3fd34413
 800f278:	08016784 	.word	0x08016784
 800f27c:	0801679b 	.word	0x0801679b
 800f280:	7ff00000 	.word	0x7ff00000
 800f284:	08016780 	.word	0x08016780
 800f288:	08016777 	.word	0x08016777
 800f28c:	0801682c 	.word	0x0801682c
 800f290:	3ff80000 	.word	0x3ff80000
 800f294:	080168b8 	.word	0x080168b8
 800f298:	080167f3 	.word	0x080167f3
 800f29c:	2301      	movs	r3, #1
 800f29e:	9309      	str	r3, [sp, #36]	; 0x24
 800f2a0:	e7d7      	b.n	800f252 <_dtoa_r+0x2c2>
 800f2a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2a4:	9301      	str	r3, [sp, #4]
 800f2a6:	9304      	str	r3, [sp, #16]
 800f2a8:	e7ba      	b.n	800f220 <_dtoa_r+0x290>
 800f2aa:	3101      	adds	r1, #1
 800f2ac:	0052      	lsls	r2, r2, #1
 800f2ae:	e7ba      	b.n	800f226 <_dtoa_r+0x296>
 800f2b0:	69e3      	ldr	r3, [r4, #28]
 800f2b2:	9a00      	ldr	r2, [sp, #0]
 800f2b4:	601a      	str	r2, [r3, #0]
 800f2b6:	9b04      	ldr	r3, [sp, #16]
 800f2b8:	2b0e      	cmp	r3, #14
 800f2ba:	f200 80a8 	bhi.w	800f40e <_dtoa_r+0x47e>
 800f2be:	2d00      	cmp	r5, #0
 800f2c0:	f000 80a5 	beq.w	800f40e <_dtoa_r+0x47e>
 800f2c4:	f1bb 0f00 	cmp.w	fp, #0
 800f2c8:	dd38      	ble.n	800f33c <_dtoa_r+0x3ac>
 800f2ca:	4bc0      	ldr	r3, [pc, #768]	; (800f5cc <_dtoa_r+0x63c>)
 800f2cc:	f00b 020f 	and.w	r2, fp, #15
 800f2d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f2d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f2dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f2e0:	d019      	beq.n	800f316 <_dtoa_r+0x386>
 800f2e2:	4bbb      	ldr	r3, [pc, #748]	; (800f5d0 <_dtoa_r+0x640>)
 800f2e4:	ec51 0b18 	vmov	r0, r1, d8
 800f2e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f2ec:	f7f1 face 	bl	800088c <__aeabi_ddiv>
 800f2f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2f4:	f008 080f 	and.w	r8, r8, #15
 800f2f8:	2503      	movs	r5, #3
 800f2fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f5d0 <_dtoa_r+0x640>
 800f2fe:	f1b8 0f00 	cmp.w	r8, #0
 800f302:	d10a      	bne.n	800f31a <_dtoa_r+0x38a>
 800f304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f308:	4632      	mov	r2, r6
 800f30a:	463b      	mov	r3, r7
 800f30c:	f7f1 fabe 	bl	800088c <__aeabi_ddiv>
 800f310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f314:	e02b      	b.n	800f36e <_dtoa_r+0x3de>
 800f316:	2502      	movs	r5, #2
 800f318:	e7ef      	b.n	800f2fa <_dtoa_r+0x36a>
 800f31a:	f018 0f01 	tst.w	r8, #1
 800f31e:	d008      	beq.n	800f332 <_dtoa_r+0x3a2>
 800f320:	4630      	mov	r0, r6
 800f322:	4639      	mov	r1, r7
 800f324:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f328:	f7f1 f986 	bl	8000638 <__aeabi_dmul>
 800f32c:	3501      	adds	r5, #1
 800f32e:	4606      	mov	r6, r0
 800f330:	460f      	mov	r7, r1
 800f332:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f336:	f109 0908 	add.w	r9, r9, #8
 800f33a:	e7e0      	b.n	800f2fe <_dtoa_r+0x36e>
 800f33c:	f000 809f 	beq.w	800f47e <_dtoa_r+0x4ee>
 800f340:	f1cb 0600 	rsb	r6, fp, #0
 800f344:	4ba1      	ldr	r3, [pc, #644]	; (800f5cc <_dtoa_r+0x63c>)
 800f346:	4fa2      	ldr	r7, [pc, #648]	; (800f5d0 <_dtoa_r+0x640>)
 800f348:	f006 020f 	and.w	r2, r6, #15
 800f34c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f354:	ec51 0b18 	vmov	r0, r1, d8
 800f358:	f7f1 f96e 	bl	8000638 <__aeabi_dmul>
 800f35c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f360:	1136      	asrs	r6, r6, #4
 800f362:	2300      	movs	r3, #0
 800f364:	2502      	movs	r5, #2
 800f366:	2e00      	cmp	r6, #0
 800f368:	d17e      	bne.n	800f468 <_dtoa_r+0x4d8>
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1d0      	bne.n	800f310 <_dtoa_r+0x380>
 800f36e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f370:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f374:	2b00      	cmp	r3, #0
 800f376:	f000 8084 	beq.w	800f482 <_dtoa_r+0x4f2>
 800f37a:	4b96      	ldr	r3, [pc, #600]	; (800f5d4 <_dtoa_r+0x644>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	4640      	mov	r0, r8
 800f380:	4649      	mov	r1, r9
 800f382:	f7f1 fbcb 	bl	8000b1c <__aeabi_dcmplt>
 800f386:	2800      	cmp	r0, #0
 800f388:	d07b      	beq.n	800f482 <_dtoa_r+0x4f2>
 800f38a:	9b04      	ldr	r3, [sp, #16]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d078      	beq.n	800f482 <_dtoa_r+0x4f2>
 800f390:	9b01      	ldr	r3, [sp, #4]
 800f392:	2b00      	cmp	r3, #0
 800f394:	dd39      	ble.n	800f40a <_dtoa_r+0x47a>
 800f396:	4b90      	ldr	r3, [pc, #576]	; (800f5d8 <_dtoa_r+0x648>)
 800f398:	2200      	movs	r2, #0
 800f39a:	4640      	mov	r0, r8
 800f39c:	4649      	mov	r1, r9
 800f39e:	f7f1 f94b 	bl	8000638 <__aeabi_dmul>
 800f3a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3a6:	9e01      	ldr	r6, [sp, #4]
 800f3a8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800f3ac:	3501      	adds	r5, #1
 800f3ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	f7f1 f8d6 	bl	8000564 <__aeabi_i2d>
 800f3b8:	4642      	mov	r2, r8
 800f3ba:	464b      	mov	r3, r9
 800f3bc:	f7f1 f93c 	bl	8000638 <__aeabi_dmul>
 800f3c0:	4b86      	ldr	r3, [pc, #536]	; (800f5dc <_dtoa_r+0x64c>)
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f7f0 ff82 	bl	80002cc <__adddf3>
 800f3c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3d0:	9303      	str	r3, [sp, #12]
 800f3d2:	2e00      	cmp	r6, #0
 800f3d4:	d158      	bne.n	800f488 <_dtoa_r+0x4f8>
 800f3d6:	4b82      	ldr	r3, [pc, #520]	; (800f5e0 <_dtoa_r+0x650>)
 800f3d8:	2200      	movs	r2, #0
 800f3da:	4640      	mov	r0, r8
 800f3dc:	4649      	mov	r1, r9
 800f3de:	f7f0 ff73 	bl	80002c8 <__aeabi_dsub>
 800f3e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3e6:	4680      	mov	r8, r0
 800f3e8:	4689      	mov	r9, r1
 800f3ea:	f7f1 fbb5 	bl	8000b58 <__aeabi_dcmpgt>
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	f040 8296 	bne.w	800f920 <_dtoa_r+0x990>
 800f3f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f3f8:	4640      	mov	r0, r8
 800f3fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3fe:	4649      	mov	r1, r9
 800f400:	f7f1 fb8c 	bl	8000b1c <__aeabi_dcmplt>
 800f404:	2800      	cmp	r0, #0
 800f406:	f040 8289 	bne.w	800f91c <_dtoa_r+0x98c>
 800f40a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f40e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f410:	2b00      	cmp	r3, #0
 800f412:	f2c0 814e 	blt.w	800f6b2 <_dtoa_r+0x722>
 800f416:	f1bb 0f0e 	cmp.w	fp, #14
 800f41a:	f300 814a 	bgt.w	800f6b2 <_dtoa_r+0x722>
 800f41e:	4b6b      	ldr	r3, [pc, #428]	; (800f5cc <_dtoa_r+0x63c>)
 800f420:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f424:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	f280 80dc 	bge.w	800f5e8 <_dtoa_r+0x658>
 800f430:	9b04      	ldr	r3, [sp, #16]
 800f432:	2b00      	cmp	r3, #0
 800f434:	f300 80d8 	bgt.w	800f5e8 <_dtoa_r+0x658>
 800f438:	f040 826f 	bne.w	800f91a <_dtoa_r+0x98a>
 800f43c:	4b68      	ldr	r3, [pc, #416]	; (800f5e0 <_dtoa_r+0x650>)
 800f43e:	2200      	movs	r2, #0
 800f440:	4640      	mov	r0, r8
 800f442:	4649      	mov	r1, r9
 800f444:	f7f1 f8f8 	bl	8000638 <__aeabi_dmul>
 800f448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f44c:	f7f1 fb7a 	bl	8000b44 <__aeabi_dcmpge>
 800f450:	9e04      	ldr	r6, [sp, #16]
 800f452:	4637      	mov	r7, r6
 800f454:	2800      	cmp	r0, #0
 800f456:	f040 8245 	bne.w	800f8e4 <_dtoa_r+0x954>
 800f45a:	9d00      	ldr	r5, [sp, #0]
 800f45c:	2331      	movs	r3, #49	; 0x31
 800f45e:	f805 3b01 	strb.w	r3, [r5], #1
 800f462:	f10b 0b01 	add.w	fp, fp, #1
 800f466:	e241      	b.n	800f8ec <_dtoa_r+0x95c>
 800f468:	07f2      	lsls	r2, r6, #31
 800f46a:	d505      	bpl.n	800f478 <_dtoa_r+0x4e8>
 800f46c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f470:	f7f1 f8e2 	bl	8000638 <__aeabi_dmul>
 800f474:	3501      	adds	r5, #1
 800f476:	2301      	movs	r3, #1
 800f478:	1076      	asrs	r6, r6, #1
 800f47a:	3708      	adds	r7, #8
 800f47c:	e773      	b.n	800f366 <_dtoa_r+0x3d6>
 800f47e:	2502      	movs	r5, #2
 800f480:	e775      	b.n	800f36e <_dtoa_r+0x3de>
 800f482:	9e04      	ldr	r6, [sp, #16]
 800f484:	465f      	mov	r7, fp
 800f486:	e792      	b.n	800f3ae <_dtoa_r+0x41e>
 800f488:	9900      	ldr	r1, [sp, #0]
 800f48a:	4b50      	ldr	r3, [pc, #320]	; (800f5cc <_dtoa_r+0x63c>)
 800f48c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f490:	4431      	add	r1, r6
 800f492:	9102      	str	r1, [sp, #8]
 800f494:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f496:	eeb0 9a47 	vmov.f32	s18, s14
 800f49a:	eef0 9a67 	vmov.f32	s19, s15
 800f49e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f4a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f4a6:	2900      	cmp	r1, #0
 800f4a8:	d044      	beq.n	800f534 <_dtoa_r+0x5a4>
 800f4aa:	494e      	ldr	r1, [pc, #312]	; (800f5e4 <_dtoa_r+0x654>)
 800f4ac:	2000      	movs	r0, #0
 800f4ae:	f7f1 f9ed 	bl	800088c <__aeabi_ddiv>
 800f4b2:	ec53 2b19 	vmov	r2, r3, d9
 800f4b6:	f7f0 ff07 	bl	80002c8 <__aeabi_dsub>
 800f4ba:	9d00      	ldr	r5, [sp, #0]
 800f4bc:	ec41 0b19 	vmov	d9, r0, r1
 800f4c0:	4649      	mov	r1, r9
 800f4c2:	4640      	mov	r0, r8
 800f4c4:	f7f1 fb68 	bl	8000b98 <__aeabi_d2iz>
 800f4c8:	4606      	mov	r6, r0
 800f4ca:	f7f1 f84b 	bl	8000564 <__aeabi_i2d>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	4640      	mov	r0, r8
 800f4d4:	4649      	mov	r1, r9
 800f4d6:	f7f0 fef7 	bl	80002c8 <__aeabi_dsub>
 800f4da:	3630      	adds	r6, #48	; 0x30
 800f4dc:	f805 6b01 	strb.w	r6, [r5], #1
 800f4e0:	ec53 2b19 	vmov	r2, r3, d9
 800f4e4:	4680      	mov	r8, r0
 800f4e6:	4689      	mov	r9, r1
 800f4e8:	f7f1 fb18 	bl	8000b1c <__aeabi_dcmplt>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d164      	bne.n	800f5ba <_dtoa_r+0x62a>
 800f4f0:	4642      	mov	r2, r8
 800f4f2:	464b      	mov	r3, r9
 800f4f4:	4937      	ldr	r1, [pc, #220]	; (800f5d4 <_dtoa_r+0x644>)
 800f4f6:	2000      	movs	r0, #0
 800f4f8:	f7f0 fee6 	bl	80002c8 <__aeabi_dsub>
 800f4fc:	ec53 2b19 	vmov	r2, r3, d9
 800f500:	f7f1 fb0c 	bl	8000b1c <__aeabi_dcmplt>
 800f504:	2800      	cmp	r0, #0
 800f506:	f040 80b6 	bne.w	800f676 <_dtoa_r+0x6e6>
 800f50a:	9b02      	ldr	r3, [sp, #8]
 800f50c:	429d      	cmp	r5, r3
 800f50e:	f43f af7c 	beq.w	800f40a <_dtoa_r+0x47a>
 800f512:	4b31      	ldr	r3, [pc, #196]	; (800f5d8 <_dtoa_r+0x648>)
 800f514:	ec51 0b19 	vmov	r0, r1, d9
 800f518:	2200      	movs	r2, #0
 800f51a:	f7f1 f88d 	bl	8000638 <__aeabi_dmul>
 800f51e:	4b2e      	ldr	r3, [pc, #184]	; (800f5d8 <_dtoa_r+0x648>)
 800f520:	ec41 0b19 	vmov	d9, r0, r1
 800f524:	2200      	movs	r2, #0
 800f526:	4640      	mov	r0, r8
 800f528:	4649      	mov	r1, r9
 800f52a:	f7f1 f885 	bl	8000638 <__aeabi_dmul>
 800f52e:	4680      	mov	r8, r0
 800f530:	4689      	mov	r9, r1
 800f532:	e7c5      	b.n	800f4c0 <_dtoa_r+0x530>
 800f534:	ec51 0b17 	vmov	r0, r1, d7
 800f538:	f7f1 f87e 	bl	8000638 <__aeabi_dmul>
 800f53c:	9b02      	ldr	r3, [sp, #8]
 800f53e:	9d00      	ldr	r5, [sp, #0]
 800f540:	930f      	str	r3, [sp, #60]	; 0x3c
 800f542:	ec41 0b19 	vmov	d9, r0, r1
 800f546:	4649      	mov	r1, r9
 800f548:	4640      	mov	r0, r8
 800f54a:	f7f1 fb25 	bl	8000b98 <__aeabi_d2iz>
 800f54e:	4606      	mov	r6, r0
 800f550:	f7f1 f808 	bl	8000564 <__aeabi_i2d>
 800f554:	3630      	adds	r6, #48	; 0x30
 800f556:	4602      	mov	r2, r0
 800f558:	460b      	mov	r3, r1
 800f55a:	4640      	mov	r0, r8
 800f55c:	4649      	mov	r1, r9
 800f55e:	f7f0 feb3 	bl	80002c8 <__aeabi_dsub>
 800f562:	f805 6b01 	strb.w	r6, [r5], #1
 800f566:	9b02      	ldr	r3, [sp, #8]
 800f568:	429d      	cmp	r5, r3
 800f56a:	4680      	mov	r8, r0
 800f56c:	4689      	mov	r9, r1
 800f56e:	f04f 0200 	mov.w	r2, #0
 800f572:	d124      	bne.n	800f5be <_dtoa_r+0x62e>
 800f574:	4b1b      	ldr	r3, [pc, #108]	; (800f5e4 <_dtoa_r+0x654>)
 800f576:	ec51 0b19 	vmov	r0, r1, d9
 800f57a:	f7f0 fea7 	bl	80002cc <__adddf3>
 800f57e:	4602      	mov	r2, r0
 800f580:	460b      	mov	r3, r1
 800f582:	4640      	mov	r0, r8
 800f584:	4649      	mov	r1, r9
 800f586:	f7f1 fae7 	bl	8000b58 <__aeabi_dcmpgt>
 800f58a:	2800      	cmp	r0, #0
 800f58c:	d173      	bne.n	800f676 <_dtoa_r+0x6e6>
 800f58e:	ec53 2b19 	vmov	r2, r3, d9
 800f592:	4914      	ldr	r1, [pc, #80]	; (800f5e4 <_dtoa_r+0x654>)
 800f594:	2000      	movs	r0, #0
 800f596:	f7f0 fe97 	bl	80002c8 <__aeabi_dsub>
 800f59a:	4602      	mov	r2, r0
 800f59c:	460b      	mov	r3, r1
 800f59e:	4640      	mov	r0, r8
 800f5a0:	4649      	mov	r1, r9
 800f5a2:	f7f1 fabb 	bl	8000b1c <__aeabi_dcmplt>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	f43f af2f 	beq.w	800f40a <_dtoa_r+0x47a>
 800f5ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f5ae:	1e6b      	subs	r3, r5, #1
 800f5b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f5b6:	2b30      	cmp	r3, #48	; 0x30
 800f5b8:	d0f8      	beq.n	800f5ac <_dtoa_r+0x61c>
 800f5ba:	46bb      	mov	fp, r7
 800f5bc:	e04a      	b.n	800f654 <_dtoa_r+0x6c4>
 800f5be:	4b06      	ldr	r3, [pc, #24]	; (800f5d8 <_dtoa_r+0x648>)
 800f5c0:	f7f1 f83a 	bl	8000638 <__aeabi_dmul>
 800f5c4:	4680      	mov	r8, r0
 800f5c6:	4689      	mov	r9, r1
 800f5c8:	e7bd      	b.n	800f546 <_dtoa_r+0x5b6>
 800f5ca:	bf00      	nop
 800f5cc:	080168b8 	.word	0x080168b8
 800f5d0:	08016890 	.word	0x08016890
 800f5d4:	3ff00000 	.word	0x3ff00000
 800f5d8:	40240000 	.word	0x40240000
 800f5dc:	401c0000 	.word	0x401c0000
 800f5e0:	40140000 	.word	0x40140000
 800f5e4:	3fe00000 	.word	0x3fe00000
 800f5e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f5ec:	9d00      	ldr	r5, [sp, #0]
 800f5ee:	4642      	mov	r2, r8
 800f5f0:	464b      	mov	r3, r9
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	4639      	mov	r1, r7
 800f5f6:	f7f1 f949 	bl	800088c <__aeabi_ddiv>
 800f5fa:	f7f1 facd 	bl	8000b98 <__aeabi_d2iz>
 800f5fe:	9001      	str	r0, [sp, #4]
 800f600:	f7f0 ffb0 	bl	8000564 <__aeabi_i2d>
 800f604:	4642      	mov	r2, r8
 800f606:	464b      	mov	r3, r9
 800f608:	f7f1 f816 	bl	8000638 <__aeabi_dmul>
 800f60c:	4602      	mov	r2, r0
 800f60e:	460b      	mov	r3, r1
 800f610:	4630      	mov	r0, r6
 800f612:	4639      	mov	r1, r7
 800f614:	f7f0 fe58 	bl	80002c8 <__aeabi_dsub>
 800f618:	9e01      	ldr	r6, [sp, #4]
 800f61a:	9f04      	ldr	r7, [sp, #16]
 800f61c:	3630      	adds	r6, #48	; 0x30
 800f61e:	f805 6b01 	strb.w	r6, [r5], #1
 800f622:	9e00      	ldr	r6, [sp, #0]
 800f624:	1bae      	subs	r6, r5, r6
 800f626:	42b7      	cmp	r7, r6
 800f628:	4602      	mov	r2, r0
 800f62a:	460b      	mov	r3, r1
 800f62c:	d134      	bne.n	800f698 <_dtoa_r+0x708>
 800f62e:	f7f0 fe4d 	bl	80002cc <__adddf3>
 800f632:	4642      	mov	r2, r8
 800f634:	464b      	mov	r3, r9
 800f636:	4606      	mov	r6, r0
 800f638:	460f      	mov	r7, r1
 800f63a:	f7f1 fa8d 	bl	8000b58 <__aeabi_dcmpgt>
 800f63e:	b9c8      	cbnz	r0, 800f674 <_dtoa_r+0x6e4>
 800f640:	4642      	mov	r2, r8
 800f642:	464b      	mov	r3, r9
 800f644:	4630      	mov	r0, r6
 800f646:	4639      	mov	r1, r7
 800f648:	f7f1 fa5e 	bl	8000b08 <__aeabi_dcmpeq>
 800f64c:	b110      	cbz	r0, 800f654 <_dtoa_r+0x6c4>
 800f64e:	9b01      	ldr	r3, [sp, #4]
 800f650:	07db      	lsls	r3, r3, #31
 800f652:	d40f      	bmi.n	800f674 <_dtoa_r+0x6e4>
 800f654:	4651      	mov	r1, sl
 800f656:	4620      	mov	r0, r4
 800f658:	f001 f9bc 	bl	80109d4 <_Bfree>
 800f65c:	2300      	movs	r3, #0
 800f65e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f660:	702b      	strb	r3, [r5, #0]
 800f662:	f10b 0301 	add.w	r3, fp, #1
 800f666:	6013      	str	r3, [r2, #0]
 800f668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	f43f ace2 	beq.w	800f034 <_dtoa_r+0xa4>
 800f670:	601d      	str	r5, [r3, #0]
 800f672:	e4df      	b.n	800f034 <_dtoa_r+0xa4>
 800f674:	465f      	mov	r7, fp
 800f676:	462b      	mov	r3, r5
 800f678:	461d      	mov	r5, r3
 800f67a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f67e:	2a39      	cmp	r2, #57	; 0x39
 800f680:	d106      	bne.n	800f690 <_dtoa_r+0x700>
 800f682:	9a00      	ldr	r2, [sp, #0]
 800f684:	429a      	cmp	r2, r3
 800f686:	d1f7      	bne.n	800f678 <_dtoa_r+0x6e8>
 800f688:	9900      	ldr	r1, [sp, #0]
 800f68a:	2230      	movs	r2, #48	; 0x30
 800f68c:	3701      	adds	r7, #1
 800f68e:	700a      	strb	r2, [r1, #0]
 800f690:	781a      	ldrb	r2, [r3, #0]
 800f692:	3201      	adds	r2, #1
 800f694:	701a      	strb	r2, [r3, #0]
 800f696:	e790      	b.n	800f5ba <_dtoa_r+0x62a>
 800f698:	4ba3      	ldr	r3, [pc, #652]	; (800f928 <_dtoa_r+0x998>)
 800f69a:	2200      	movs	r2, #0
 800f69c:	f7f0 ffcc 	bl	8000638 <__aeabi_dmul>
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	4606      	mov	r6, r0
 800f6a6:	460f      	mov	r7, r1
 800f6a8:	f7f1 fa2e 	bl	8000b08 <__aeabi_dcmpeq>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	d09e      	beq.n	800f5ee <_dtoa_r+0x65e>
 800f6b0:	e7d0      	b.n	800f654 <_dtoa_r+0x6c4>
 800f6b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6b4:	2a00      	cmp	r2, #0
 800f6b6:	f000 80ca 	beq.w	800f84e <_dtoa_r+0x8be>
 800f6ba:	9a07      	ldr	r2, [sp, #28]
 800f6bc:	2a01      	cmp	r2, #1
 800f6be:	f300 80ad 	bgt.w	800f81c <_dtoa_r+0x88c>
 800f6c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6c4:	2a00      	cmp	r2, #0
 800f6c6:	f000 80a5 	beq.w	800f814 <_dtoa_r+0x884>
 800f6ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f6ce:	9e08      	ldr	r6, [sp, #32]
 800f6d0:	9d05      	ldr	r5, [sp, #20]
 800f6d2:	9a05      	ldr	r2, [sp, #20]
 800f6d4:	441a      	add	r2, r3
 800f6d6:	9205      	str	r2, [sp, #20]
 800f6d8:	9a06      	ldr	r2, [sp, #24]
 800f6da:	2101      	movs	r1, #1
 800f6dc:	441a      	add	r2, r3
 800f6de:	4620      	mov	r0, r4
 800f6e0:	9206      	str	r2, [sp, #24]
 800f6e2:	f001 fa2d 	bl	8010b40 <__i2b>
 800f6e6:	4607      	mov	r7, r0
 800f6e8:	b165      	cbz	r5, 800f704 <_dtoa_r+0x774>
 800f6ea:	9b06      	ldr	r3, [sp, #24]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	dd09      	ble.n	800f704 <_dtoa_r+0x774>
 800f6f0:	42ab      	cmp	r3, r5
 800f6f2:	9a05      	ldr	r2, [sp, #20]
 800f6f4:	bfa8      	it	ge
 800f6f6:	462b      	movge	r3, r5
 800f6f8:	1ad2      	subs	r2, r2, r3
 800f6fa:	9205      	str	r2, [sp, #20]
 800f6fc:	9a06      	ldr	r2, [sp, #24]
 800f6fe:	1aed      	subs	r5, r5, r3
 800f700:	1ad3      	subs	r3, r2, r3
 800f702:	9306      	str	r3, [sp, #24]
 800f704:	9b08      	ldr	r3, [sp, #32]
 800f706:	b1f3      	cbz	r3, 800f746 <_dtoa_r+0x7b6>
 800f708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	f000 80a3 	beq.w	800f856 <_dtoa_r+0x8c6>
 800f710:	2e00      	cmp	r6, #0
 800f712:	dd10      	ble.n	800f736 <_dtoa_r+0x7a6>
 800f714:	4639      	mov	r1, r7
 800f716:	4632      	mov	r2, r6
 800f718:	4620      	mov	r0, r4
 800f71a:	f001 fad1 	bl	8010cc0 <__pow5mult>
 800f71e:	4652      	mov	r2, sl
 800f720:	4601      	mov	r1, r0
 800f722:	4607      	mov	r7, r0
 800f724:	4620      	mov	r0, r4
 800f726:	f001 fa21 	bl	8010b6c <__multiply>
 800f72a:	4651      	mov	r1, sl
 800f72c:	4680      	mov	r8, r0
 800f72e:	4620      	mov	r0, r4
 800f730:	f001 f950 	bl	80109d4 <_Bfree>
 800f734:	46c2      	mov	sl, r8
 800f736:	9b08      	ldr	r3, [sp, #32]
 800f738:	1b9a      	subs	r2, r3, r6
 800f73a:	d004      	beq.n	800f746 <_dtoa_r+0x7b6>
 800f73c:	4651      	mov	r1, sl
 800f73e:	4620      	mov	r0, r4
 800f740:	f001 fabe 	bl	8010cc0 <__pow5mult>
 800f744:	4682      	mov	sl, r0
 800f746:	2101      	movs	r1, #1
 800f748:	4620      	mov	r0, r4
 800f74a:	f001 f9f9 	bl	8010b40 <__i2b>
 800f74e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f750:	2b00      	cmp	r3, #0
 800f752:	4606      	mov	r6, r0
 800f754:	f340 8081 	ble.w	800f85a <_dtoa_r+0x8ca>
 800f758:	461a      	mov	r2, r3
 800f75a:	4601      	mov	r1, r0
 800f75c:	4620      	mov	r0, r4
 800f75e:	f001 faaf 	bl	8010cc0 <__pow5mult>
 800f762:	9b07      	ldr	r3, [sp, #28]
 800f764:	2b01      	cmp	r3, #1
 800f766:	4606      	mov	r6, r0
 800f768:	dd7a      	ble.n	800f860 <_dtoa_r+0x8d0>
 800f76a:	f04f 0800 	mov.w	r8, #0
 800f76e:	6933      	ldr	r3, [r6, #16]
 800f770:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f774:	6918      	ldr	r0, [r3, #16]
 800f776:	f001 f995 	bl	8010aa4 <__hi0bits>
 800f77a:	f1c0 0020 	rsb	r0, r0, #32
 800f77e:	9b06      	ldr	r3, [sp, #24]
 800f780:	4418      	add	r0, r3
 800f782:	f010 001f 	ands.w	r0, r0, #31
 800f786:	f000 8094 	beq.w	800f8b2 <_dtoa_r+0x922>
 800f78a:	f1c0 0320 	rsb	r3, r0, #32
 800f78e:	2b04      	cmp	r3, #4
 800f790:	f340 8085 	ble.w	800f89e <_dtoa_r+0x90e>
 800f794:	9b05      	ldr	r3, [sp, #20]
 800f796:	f1c0 001c 	rsb	r0, r0, #28
 800f79a:	4403      	add	r3, r0
 800f79c:	9305      	str	r3, [sp, #20]
 800f79e:	9b06      	ldr	r3, [sp, #24]
 800f7a0:	4403      	add	r3, r0
 800f7a2:	4405      	add	r5, r0
 800f7a4:	9306      	str	r3, [sp, #24]
 800f7a6:	9b05      	ldr	r3, [sp, #20]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	dd05      	ble.n	800f7b8 <_dtoa_r+0x828>
 800f7ac:	4651      	mov	r1, sl
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f001 fadf 	bl	8010d74 <__lshift>
 800f7b6:	4682      	mov	sl, r0
 800f7b8:	9b06      	ldr	r3, [sp, #24]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	dd05      	ble.n	800f7ca <_dtoa_r+0x83a>
 800f7be:	4631      	mov	r1, r6
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	f001 fad6 	bl	8010d74 <__lshift>
 800f7c8:	4606      	mov	r6, r0
 800f7ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d072      	beq.n	800f8b6 <_dtoa_r+0x926>
 800f7d0:	4631      	mov	r1, r6
 800f7d2:	4650      	mov	r0, sl
 800f7d4:	f001 fb3a 	bl	8010e4c <__mcmp>
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	da6c      	bge.n	800f8b6 <_dtoa_r+0x926>
 800f7dc:	2300      	movs	r3, #0
 800f7de:	4651      	mov	r1, sl
 800f7e0:	220a      	movs	r2, #10
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f001 f918 	bl	8010a18 <__multadd>
 800f7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7ea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f7ee:	4682      	mov	sl, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f000 81b0 	beq.w	800fb56 <_dtoa_r+0xbc6>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	4639      	mov	r1, r7
 800f7fa:	220a      	movs	r2, #10
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f001 f90b 	bl	8010a18 <__multadd>
 800f802:	9b01      	ldr	r3, [sp, #4]
 800f804:	2b00      	cmp	r3, #0
 800f806:	4607      	mov	r7, r0
 800f808:	f300 8096 	bgt.w	800f938 <_dtoa_r+0x9a8>
 800f80c:	9b07      	ldr	r3, [sp, #28]
 800f80e:	2b02      	cmp	r3, #2
 800f810:	dc59      	bgt.n	800f8c6 <_dtoa_r+0x936>
 800f812:	e091      	b.n	800f938 <_dtoa_r+0x9a8>
 800f814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f81a:	e758      	b.n	800f6ce <_dtoa_r+0x73e>
 800f81c:	9b04      	ldr	r3, [sp, #16]
 800f81e:	1e5e      	subs	r6, r3, #1
 800f820:	9b08      	ldr	r3, [sp, #32]
 800f822:	42b3      	cmp	r3, r6
 800f824:	bfbf      	itttt	lt
 800f826:	9b08      	ldrlt	r3, [sp, #32]
 800f828:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f82a:	9608      	strlt	r6, [sp, #32]
 800f82c:	1af3      	sublt	r3, r6, r3
 800f82e:	bfb4      	ite	lt
 800f830:	18d2      	addlt	r2, r2, r3
 800f832:	1b9e      	subge	r6, r3, r6
 800f834:	9b04      	ldr	r3, [sp, #16]
 800f836:	bfbc      	itt	lt
 800f838:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f83a:	2600      	movlt	r6, #0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	bfb7      	itett	lt
 800f840:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f844:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f848:	1a9d      	sublt	r5, r3, r2
 800f84a:	2300      	movlt	r3, #0
 800f84c:	e741      	b.n	800f6d2 <_dtoa_r+0x742>
 800f84e:	9e08      	ldr	r6, [sp, #32]
 800f850:	9d05      	ldr	r5, [sp, #20]
 800f852:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f854:	e748      	b.n	800f6e8 <_dtoa_r+0x758>
 800f856:	9a08      	ldr	r2, [sp, #32]
 800f858:	e770      	b.n	800f73c <_dtoa_r+0x7ac>
 800f85a:	9b07      	ldr	r3, [sp, #28]
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	dc19      	bgt.n	800f894 <_dtoa_r+0x904>
 800f860:	9b02      	ldr	r3, [sp, #8]
 800f862:	b9bb      	cbnz	r3, 800f894 <_dtoa_r+0x904>
 800f864:	9b03      	ldr	r3, [sp, #12]
 800f866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f86a:	b99b      	cbnz	r3, 800f894 <_dtoa_r+0x904>
 800f86c:	9b03      	ldr	r3, [sp, #12]
 800f86e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f872:	0d1b      	lsrs	r3, r3, #20
 800f874:	051b      	lsls	r3, r3, #20
 800f876:	b183      	cbz	r3, 800f89a <_dtoa_r+0x90a>
 800f878:	9b05      	ldr	r3, [sp, #20]
 800f87a:	3301      	adds	r3, #1
 800f87c:	9305      	str	r3, [sp, #20]
 800f87e:	9b06      	ldr	r3, [sp, #24]
 800f880:	3301      	adds	r3, #1
 800f882:	9306      	str	r3, [sp, #24]
 800f884:	f04f 0801 	mov.w	r8, #1
 800f888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	f47f af6f 	bne.w	800f76e <_dtoa_r+0x7de>
 800f890:	2001      	movs	r0, #1
 800f892:	e774      	b.n	800f77e <_dtoa_r+0x7ee>
 800f894:	f04f 0800 	mov.w	r8, #0
 800f898:	e7f6      	b.n	800f888 <_dtoa_r+0x8f8>
 800f89a:	4698      	mov	r8, r3
 800f89c:	e7f4      	b.n	800f888 <_dtoa_r+0x8f8>
 800f89e:	d082      	beq.n	800f7a6 <_dtoa_r+0x816>
 800f8a0:	9a05      	ldr	r2, [sp, #20]
 800f8a2:	331c      	adds	r3, #28
 800f8a4:	441a      	add	r2, r3
 800f8a6:	9205      	str	r2, [sp, #20]
 800f8a8:	9a06      	ldr	r2, [sp, #24]
 800f8aa:	441a      	add	r2, r3
 800f8ac:	441d      	add	r5, r3
 800f8ae:	9206      	str	r2, [sp, #24]
 800f8b0:	e779      	b.n	800f7a6 <_dtoa_r+0x816>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	e7f4      	b.n	800f8a0 <_dtoa_r+0x910>
 800f8b6:	9b04      	ldr	r3, [sp, #16]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	dc37      	bgt.n	800f92c <_dtoa_r+0x99c>
 800f8bc:	9b07      	ldr	r3, [sp, #28]
 800f8be:	2b02      	cmp	r3, #2
 800f8c0:	dd34      	ble.n	800f92c <_dtoa_r+0x99c>
 800f8c2:	9b04      	ldr	r3, [sp, #16]
 800f8c4:	9301      	str	r3, [sp, #4]
 800f8c6:	9b01      	ldr	r3, [sp, #4]
 800f8c8:	b963      	cbnz	r3, 800f8e4 <_dtoa_r+0x954>
 800f8ca:	4631      	mov	r1, r6
 800f8cc:	2205      	movs	r2, #5
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f001 f8a2 	bl	8010a18 <__multadd>
 800f8d4:	4601      	mov	r1, r0
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	4650      	mov	r0, sl
 800f8da:	f001 fab7 	bl	8010e4c <__mcmp>
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	f73f adbb 	bgt.w	800f45a <_dtoa_r+0x4ca>
 800f8e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8e6:	9d00      	ldr	r5, [sp, #0]
 800f8e8:	ea6f 0b03 	mvn.w	fp, r3
 800f8ec:	f04f 0800 	mov.w	r8, #0
 800f8f0:	4631      	mov	r1, r6
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	f001 f86e 	bl	80109d4 <_Bfree>
 800f8f8:	2f00      	cmp	r7, #0
 800f8fa:	f43f aeab 	beq.w	800f654 <_dtoa_r+0x6c4>
 800f8fe:	f1b8 0f00 	cmp.w	r8, #0
 800f902:	d005      	beq.n	800f910 <_dtoa_r+0x980>
 800f904:	45b8      	cmp	r8, r7
 800f906:	d003      	beq.n	800f910 <_dtoa_r+0x980>
 800f908:	4641      	mov	r1, r8
 800f90a:	4620      	mov	r0, r4
 800f90c:	f001 f862 	bl	80109d4 <_Bfree>
 800f910:	4639      	mov	r1, r7
 800f912:	4620      	mov	r0, r4
 800f914:	f001 f85e 	bl	80109d4 <_Bfree>
 800f918:	e69c      	b.n	800f654 <_dtoa_r+0x6c4>
 800f91a:	2600      	movs	r6, #0
 800f91c:	4637      	mov	r7, r6
 800f91e:	e7e1      	b.n	800f8e4 <_dtoa_r+0x954>
 800f920:	46bb      	mov	fp, r7
 800f922:	4637      	mov	r7, r6
 800f924:	e599      	b.n	800f45a <_dtoa_r+0x4ca>
 800f926:	bf00      	nop
 800f928:	40240000 	.word	0x40240000
 800f92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f92e:	2b00      	cmp	r3, #0
 800f930:	f000 80c8 	beq.w	800fac4 <_dtoa_r+0xb34>
 800f934:	9b04      	ldr	r3, [sp, #16]
 800f936:	9301      	str	r3, [sp, #4]
 800f938:	2d00      	cmp	r5, #0
 800f93a:	dd05      	ble.n	800f948 <_dtoa_r+0x9b8>
 800f93c:	4639      	mov	r1, r7
 800f93e:	462a      	mov	r2, r5
 800f940:	4620      	mov	r0, r4
 800f942:	f001 fa17 	bl	8010d74 <__lshift>
 800f946:	4607      	mov	r7, r0
 800f948:	f1b8 0f00 	cmp.w	r8, #0
 800f94c:	d05b      	beq.n	800fa06 <_dtoa_r+0xa76>
 800f94e:	6879      	ldr	r1, [r7, #4]
 800f950:	4620      	mov	r0, r4
 800f952:	f000 ffff 	bl	8010954 <_Balloc>
 800f956:	4605      	mov	r5, r0
 800f958:	b928      	cbnz	r0, 800f966 <_dtoa_r+0x9d6>
 800f95a:	4b83      	ldr	r3, [pc, #524]	; (800fb68 <_dtoa_r+0xbd8>)
 800f95c:	4602      	mov	r2, r0
 800f95e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f962:	f7ff bb2e 	b.w	800efc2 <_dtoa_r+0x32>
 800f966:	693a      	ldr	r2, [r7, #16]
 800f968:	3202      	adds	r2, #2
 800f96a:	0092      	lsls	r2, r2, #2
 800f96c:	f107 010c 	add.w	r1, r7, #12
 800f970:	300c      	adds	r0, #12
 800f972:	f7ff fa58 	bl	800ee26 <memcpy>
 800f976:	2201      	movs	r2, #1
 800f978:	4629      	mov	r1, r5
 800f97a:	4620      	mov	r0, r4
 800f97c:	f001 f9fa 	bl	8010d74 <__lshift>
 800f980:	9b00      	ldr	r3, [sp, #0]
 800f982:	3301      	adds	r3, #1
 800f984:	9304      	str	r3, [sp, #16]
 800f986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f98a:	4413      	add	r3, r2
 800f98c:	9308      	str	r3, [sp, #32]
 800f98e:	9b02      	ldr	r3, [sp, #8]
 800f990:	f003 0301 	and.w	r3, r3, #1
 800f994:	46b8      	mov	r8, r7
 800f996:	9306      	str	r3, [sp, #24]
 800f998:	4607      	mov	r7, r0
 800f99a:	9b04      	ldr	r3, [sp, #16]
 800f99c:	4631      	mov	r1, r6
 800f99e:	3b01      	subs	r3, #1
 800f9a0:	4650      	mov	r0, sl
 800f9a2:	9301      	str	r3, [sp, #4]
 800f9a4:	f7ff fa6c 	bl	800ee80 <quorem>
 800f9a8:	4641      	mov	r1, r8
 800f9aa:	9002      	str	r0, [sp, #8]
 800f9ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f9b0:	4650      	mov	r0, sl
 800f9b2:	f001 fa4b 	bl	8010e4c <__mcmp>
 800f9b6:	463a      	mov	r2, r7
 800f9b8:	9005      	str	r0, [sp, #20]
 800f9ba:	4631      	mov	r1, r6
 800f9bc:	4620      	mov	r0, r4
 800f9be:	f001 fa61 	bl	8010e84 <__mdiff>
 800f9c2:	68c2      	ldr	r2, [r0, #12]
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	bb02      	cbnz	r2, 800fa0a <_dtoa_r+0xa7a>
 800f9c8:	4601      	mov	r1, r0
 800f9ca:	4650      	mov	r0, sl
 800f9cc:	f001 fa3e 	bl	8010e4c <__mcmp>
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	4629      	mov	r1, r5
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	9209      	str	r2, [sp, #36]	; 0x24
 800f9d8:	f000 fffc 	bl	80109d4 <_Bfree>
 800f9dc:	9b07      	ldr	r3, [sp, #28]
 800f9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9e0:	9d04      	ldr	r5, [sp, #16]
 800f9e2:	ea43 0102 	orr.w	r1, r3, r2
 800f9e6:	9b06      	ldr	r3, [sp, #24]
 800f9e8:	4319      	orrs	r1, r3
 800f9ea:	d110      	bne.n	800fa0e <_dtoa_r+0xa7e>
 800f9ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f9f0:	d029      	beq.n	800fa46 <_dtoa_r+0xab6>
 800f9f2:	9b05      	ldr	r3, [sp, #20]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	dd02      	ble.n	800f9fe <_dtoa_r+0xa6e>
 800f9f8:	9b02      	ldr	r3, [sp, #8]
 800f9fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f9fe:	9b01      	ldr	r3, [sp, #4]
 800fa00:	f883 9000 	strb.w	r9, [r3]
 800fa04:	e774      	b.n	800f8f0 <_dtoa_r+0x960>
 800fa06:	4638      	mov	r0, r7
 800fa08:	e7ba      	b.n	800f980 <_dtoa_r+0x9f0>
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	e7e1      	b.n	800f9d2 <_dtoa_r+0xa42>
 800fa0e:	9b05      	ldr	r3, [sp, #20]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	db04      	blt.n	800fa1e <_dtoa_r+0xa8e>
 800fa14:	9907      	ldr	r1, [sp, #28]
 800fa16:	430b      	orrs	r3, r1
 800fa18:	9906      	ldr	r1, [sp, #24]
 800fa1a:	430b      	orrs	r3, r1
 800fa1c:	d120      	bne.n	800fa60 <_dtoa_r+0xad0>
 800fa1e:	2a00      	cmp	r2, #0
 800fa20:	dded      	ble.n	800f9fe <_dtoa_r+0xa6e>
 800fa22:	4651      	mov	r1, sl
 800fa24:	2201      	movs	r2, #1
 800fa26:	4620      	mov	r0, r4
 800fa28:	f001 f9a4 	bl	8010d74 <__lshift>
 800fa2c:	4631      	mov	r1, r6
 800fa2e:	4682      	mov	sl, r0
 800fa30:	f001 fa0c 	bl	8010e4c <__mcmp>
 800fa34:	2800      	cmp	r0, #0
 800fa36:	dc03      	bgt.n	800fa40 <_dtoa_r+0xab0>
 800fa38:	d1e1      	bne.n	800f9fe <_dtoa_r+0xa6e>
 800fa3a:	f019 0f01 	tst.w	r9, #1
 800fa3e:	d0de      	beq.n	800f9fe <_dtoa_r+0xa6e>
 800fa40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fa44:	d1d8      	bne.n	800f9f8 <_dtoa_r+0xa68>
 800fa46:	9a01      	ldr	r2, [sp, #4]
 800fa48:	2339      	movs	r3, #57	; 0x39
 800fa4a:	7013      	strb	r3, [r2, #0]
 800fa4c:	462b      	mov	r3, r5
 800fa4e:	461d      	mov	r5, r3
 800fa50:	3b01      	subs	r3, #1
 800fa52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fa56:	2a39      	cmp	r2, #57	; 0x39
 800fa58:	d06c      	beq.n	800fb34 <_dtoa_r+0xba4>
 800fa5a:	3201      	adds	r2, #1
 800fa5c:	701a      	strb	r2, [r3, #0]
 800fa5e:	e747      	b.n	800f8f0 <_dtoa_r+0x960>
 800fa60:	2a00      	cmp	r2, #0
 800fa62:	dd07      	ble.n	800fa74 <_dtoa_r+0xae4>
 800fa64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fa68:	d0ed      	beq.n	800fa46 <_dtoa_r+0xab6>
 800fa6a:	9a01      	ldr	r2, [sp, #4]
 800fa6c:	f109 0301 	add.w	r3, r9, #1
 800fa70:	7013      	strb	r3, [r2, #0]
 800fa72:	e73d      	b.n	800f8f0 <_dtoa_r+0x960>
 800fa74:	9b04      	ldr	r3, [sp, #16]
 800fa76:	9a08      	ldr	r2, [sp, #32]
 800fa78:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d043      	beq.n	800fb08 <_dtoa_r+0xb78>
 800fa80:	4651      	mov	r1, sl
 800fa82:	2300      	movs	r3, #0
 800fa84:	220a      	movs	r2, #10
 800fa86:	4620      	mov	r0, r4
 800fa88:	f000 ffc6 	bl	8010a18 <__multadd>
 800fa8c:	45b8      	cmp	r8, r7
 800fa8e:	4682      	mov	sl, r0
 800fa90:	f04f 0300 	mov.w	r3, #0
 800fa94:	f04f 020a 	mov.w	r2, #10
 800fa98:	4641      	mov	r1, r8
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	d107      	bne.n	800faae <_dtoa_r+0xb1e>
 800fa9e:	f000 ffbb 	bl	8010a18 <__multadd>
 800faa2:	4680      	mov	r8, r0
 800faa4:	4607      	mov	r7, r0
 800faa6:	9b04      	ldr	r3, [sp, #16]
 800faa8:	3301      	adds	r3, #1
 800faaa:	9304      	str	r3, [sp, #16]
 800faac:	e775      	b.n	800f99a <_dtoa_r+0xa0a>
 800faae:	f000 ffb3 	bl	8010a18 <__multadd>
 800fab2:	4639      	mov	r1, r7
 800fab4:	4680      	mov	r8, r0
 800fab6:	2300      	movs	r3, #0
 800fab8:	220a      	movs	r2, #10
 800faba:	4620      	mov	r0, r4
 800fabc:	f000 ffac 	bl	8010a18 <__multadd>
 800fac0:	4607      	mov	r7, r0
 800fac2:	e7f0      	b.n	800faa6 <_dtoa_r+0xb16>
 800fac4:	9b04      	ldr	r3, [sp, #16]
 800fac6:	9301      	str	r3, [sp, #4]
 800fac8:	9d00      	ldr	r5, [sp, #0]
 800faca:	4631      	mov	r1, r6
 800facc:	4650      	mov	r0, sl
 800face:	f7ff f9d7 	bl	800ee80 <quorem>
 800fad2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fad6:	9b00      	ldr	r3, [sp, #0]
 800fad8:	f805 9b01 	strb.w	r9, [r5], #1
 800fadc:	1aea      	subs	r2, r5, r3
 800fade:	9b01      	ldr	r3, [sp, #4]
 800fae0:	4293      	cmp	r3, r2
 800fae2:	dd07      	ble.n	800faf4 <_dtoa_r+0xb64>
 800fae4:	4651      	mov	r1, sl
 800fae6:	2300      	movs	r3, #0
 800fae8:	220a      	movs	r2, #10
 800faea:	4620      	mov	r0, r4
 800faec:	f000 ff94 	bl	8010a18 <__multadd>
 800faf0:	4682      	mov	sl, r0
 800faf2:	e7ea      	b.n	800faca <_dtoa_r+0xb3a>
 800faf4:	9b01      	ldr	r3, [sp, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	bfc8      	it	gt
 800fafa:	461d      	movgt	r5, r3
 800fafc:	9b00      	ldr	r3, [sp, #0]
 800fafe:	bfd8      	it	le
 800fb00:	2501      	movle	r5, #1
 800fb02:	441d      	add	r5, r3
 800fb04:	f04f 0800 	mov.w	r8, #0
 800fb08:	4651      	mov	r1, sl
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	f001 f931 	bl	8010d74 <__lshift>
 800fb12:	4631      	mov	r1, r6
 800fb14:	4682      	mov	sl, r0
 800fb16:	f001 f999 	bl	8010e4c <__mcmp>
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	dc96      	bgt.n	800fa4c <_dtoa_r+0xabc>
 800fb1e:	d102      	bne.n	800fb26 <_dtoa_r+0xb96>
 800fb20:	f019 0f01 	tst.w	r9, #1
 800fb24:	d192      	bne.n	800fa4c <_dtoa_r+0xabc>
 800fb26:	462b      	mov	r3, r5
 800fb28:	461d      	mov	r5, r3
 800fb2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb2e:	2a30      	cmp	r2, #48	; 0x30
 800fb30:	d0fa      	beq.n	800fb28 <_dtoa_r+0xb98>
 800fb32:	e6dd      	b.n	800f8f0 <_dtoa_r+0x960>
 800fb34:	9a00      	ldr	r2, [sp, #0]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d189      	bne.n	800fa4e <_dtoa_r+0xabe>
 800fb3a:	f10b 0b01 	add.w	fp, fp, #1
 800fb3e:	2331      	movs	r3, #49	; 0x31
 800fb40:	e796      	b.n	800fa70 <_dtoa_r+0xae0>
 800fb42:	4b0a      	ldr	r3, [pc, #40]	; (800fb6c <_dtoa_r+0xbdc>)
 800fb44:	f7ff ba99 	b.w	800f07a <_dtoa_r+0xea>
 800fb48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f47f aa6d 	bne.w	800f02a <_dtoa_r+0x9a>
 800fb50:	4b07      	ldr	r3, [pc, #28]	; (800fb70 <_dtoa_r+0xbe0>)
 800fb52:	f7ff ba92 	b.w	800f07a <_dtoa_r+0xea>
 800fb56:	9b01      	ldr	r3, [sp, #4]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	dcb5      	bgt.n	800fac8 <_dtoa_r+0xb38>
 800fb5c:	9b07      	ldr	r3, [sp, #28]
 800fb5e:	2b02      	cmp	r3, #2
 800fb60:	f73f aeb1 	bgt.w	800f8c6 <_dtoa_r+0x936>
 800fb64:	e7b0      	b.n	800fac8 <_dtoa_r+0xb38>
 800fb66:	bf00      	nop
 800fb68:	080167f3 	.word	0x080167f3
 800fb6c:	0801682b 	.word	0x0801682b
 800fb70:	08016777 	.word	0x08016777

0800fb74 <_free_r>:
 800fb74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb76:	2900      	cmp	r1, #0
 800fb78:	d044      	beq.n	800fc04 <_free_r+0x90>
 800fb7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb7e:	9001      	str	r0, [sp, #4]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	f1a1 0404 	sub.w	r4, r1, #4
 800fb86:	bfb8      	it	lt
 800fb88:	18e4      	addlt	r4, r4, r3
 800fb8a:	f7fe fe8d 	bl	800e8a8 <__malloc_lock>
 800fb8e:	4a1e      	ldr	r2, [pc, #120]	; (800fc08 <_free_r+0x94>)
 800fb90:	9801      	ldr	r0, [sp, #4]
 800fb92:	6813      	ldr	r3, [r2, #0]
 800fb94:	b933      	cbnz	r3, 800fba4 <_free_r+0x30>
 800fb96:	6063      	str	r3, [r4, #4]
 800fb98:	6014      	str	r4, [r2, #0]
 800fb9a:	b003      	add	sp, #12
 800fb9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fba0:	f7fe be88 	b.w	800e8b4 <__malloc_unlock>
 800fba4:	42a3      	cmp	r3, r4
 800fba6:	d908      	bls.n	800fbba <_free_r+0x46>
 800fba8:	6825      	ldr	r5, [r4, #0]
 800fbaa:	1961      	adds	r1, r4, r5
 800fbac:	428b      	cmp	r3, r1
 800fbae:	bf01      	itttt	eq
 800fbb0:	6819      	ldreq	r1, [r3, #0]
 800fbb2:	685b      	ldreq	r3, [r3, #4]
 800fbb4:	1949      	addeq	r1, r1, r5
 800fbb6:	6021      	streq	r1, [r4, #0]
 800fbb8:	e7ed      	b.n	800fb96 <_free_r+0x22>
 800fbba:	461a      	mov	r2, r3
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	b10b      	cbz	r3, 800fbc4 <_free_r+0x50>
 800fbc0:	42a3      	cmp	r3, r4
 800fbc2:	d9fa      	bls.n	800fbba <_free_r+0x46>
 800fbc4:	6811      	ldr	r1, [r2, #0]
 800fbc6:	1855      	adds	r5, r2, r1
 800fbc8:	42a5      	cmp	r5, r4
 800fbca:	d10b      	bne.n	800fbe4 <_free_r+0x70>
 800fbcc:	6824      	ldr	r4, [r4, #0]
 800fbce:	4421      	add	r1, r4
 800fbd0:	1854      	adds	r4, r2, r1
 800fbd2:	42a3      	cmp	r3, r4
 800fbd4:	6011      	str	r1, [r2, #0]
 800fbd6:	d1e0      	bne.n	800fb9a <_free_r+0x26>
 800fbd8:	681c      	ldr	r4, [r3, #0]
 800fbda:	685b      	ldr	r3, [r3, #4]
 800fbdc:	6053      	str	r3, [r2, #4]
 800fbde:	440c      	add	r4, r1
 800fbe0:	6014      	str	r4, [r2, #0]
 800fbe2:	e7da      	b.n	800fb9a <_free_r+0x26>
 800fbe4:	d902      	bls.n	800fbec <_free_r+0x78>
 800fbe6:	230c      	movs	r3, #12
 800fbe8:	6003      	str	r3, [r0, #0]
 800fbea:	e7d6      	b.n	800fb9a <_free_r+0x26>
 800fbec:	6825      	ldr	r5, [r4, #0]
 800fbee:	1961      	adds	r1, r4, r5
 800fbf0:	428b      	cmp	r3, r1
 800fbf2:	bf04      	itt	eq
 800fbf4:	6819      	ldreq	r1, [r3, #0]
 800fbf6:	685b      	ldreq	r3, [r3, #4]
 800fbf8:	6063      	str	r3, [r4, #4]
 800fbfa:	bf04      	itt	eq
 800fbfc:	1949      	addeq	r1, r1, r5
 800fbfe:	6021      	streq	r1, [r4, #0]
 800fc00:	6054      	str	r4, [r2, #4]
 800fc02:	e7ca      	b.n	800fb9a <_free_r+0x26>
 800fc04:	b003      	add	sp, #12
 800fc06:	bd30      	pop	{r4, r5, pc}
 800fc08:	2000967c 	.word	0x2000967c

0800fc0c <__ssputs_r>:
 800fc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc10:	688e      	ldr	r6, [r1, #8]
 800fc12:	461f      	mov	r7, r3
 800fc14:	42be      	cmp	r6, r7
 800fc16:	680b      	ldr	r3, [r1, #0]
 800fc18:	4682      	mov	sl, r0
 800fc1a:	460c      	mov	r4, r1
 800fc1c:	4690      	mov	r8, r2
 800fc1e:	d82c      	bhi.n	800fc7a <__ssputs_r+0x6e>
 800fc20:	898a      	ldrh	r2, [r1, #12]
 800fc22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc26:	d026      	beq.n	800fc76 <__ssputs_r+0x6a>
 800fc28:	6965      	ldr	r5, [r4, #20]
 800fc2a:	6909      	ldr	r1, [r1, #16]
 800fc2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc30:	eba3 0901 	sub.w	r9, r3, r1
 800fc34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc38:	1c7b      	adds	r3, r7, #1
 800fc3a:	444b      	add	r3, r9
 800fc3c:	106d      	asrs	r5, r5, #1
 800fc3e:	429d      	cmp	r5, r3
 800fc40:	bf38      	it	cc
 800fc42:	461d      	movcc	r5, r3
 800fc44:	0553      	lsls	r3, r2, #21
 800fc46:	d527      	bpl.n	800fc98 <__ssputs_r+0x8c>
 800fc48:	4629      	mov	r1, r5
 800fc4a:	f7fe fbe9 	bl	800e420 <_malloc_r>
 800fc4e:	4606      	mov	r6, r0
 800fc50:	b360      	cbz	r0, 800fcac <__ssputs_r+0xa0>
 800fc52:	6921      	ldr	r1, [r4, #16]
 800fc54:	464a      	mov	r2, r9
 800fc56:	f7ff f8e6 	bl	800ee26 <memcpy>
 800fc5a:	89a3      	ldrh	r3, [r4, #12]
 800fc5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc64:	81a3      	strh	r3, [r4, #12]
 800fc66:	6126      	str	r6, [r4, #16]
 800fc68:	6165      	str	r5, [r4, #20]
 800fc6a:	444e      	add	r6, r9
 800fc6c:	eba5 0509 	sub.w	r5, r5, r9
 800fc70:	6026      	str	r6, [r4, #0]
 800fc72:	60a5      	str	r5, [r4, #8]
 800fc74:	463e      	mov	r6, r7
 800fc76:	42be      	cmp	r6, r7
 800fc78:	d900      	bls.n	800fc7c <__ssputs_r+0x70>
 800fc7a:	463e      	mov	r6, r7
 800fc7c:	6820      	ldr	r0, [r4, #0]
 800fc7e:	4632      	mov	r2, r6
 800fc80:	4641      	mov	r1, r8
 800fc82:	f001 fbcb 	bl	801141c <memmove>
 800fc86:	68a3      	ldr	r3, [r4, #8]
 800fc88:	1b9b      	subs	r3, r3, r6
 800fc8a:	60a3      	str	r3, [r4, #8]
 800fc8c:	6823      	ldr	r3, [r4, #0]
 800fc8e:	4433      	add	r3, r6
 800fc90:	6023      	str	r3, [r4, #0]
 800fc92:	2000      	movs	r0, #0
 800fc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc98:	462a      	mov	r2, r5
 800fc9a:	f001 fa23 	bl	80110e4 <_realloc_r>
 800fc9e:	4606      	mov	r6, r0
 800fca0:	2800      	cmp	r0, #0
 800fca2:	d1e0      	bne.n	800fc66 <__ssputs_r+0x5a>
 800fca4:	6921      	ldr	r1, [r4, #16]
 800fca6:	4650      	mov	r0, sl
 800fca8:	f7ff ff64 	bl	800fb74 <_free_r>
 800fcac:	230c      	movs	r3, #12
 800fcae:	f8ca 3000 	str.w	r3, [sl]
 800fcb2:	89a3      	ldrh	r3, [r4, #12]
 800fcb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcb8:	81a3      	strh	r3, [r4, #12]
 800fcba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcbe:	e7e9      	b.n	800fc94 <__ssputs_r+0x88>

0800fcc0 <_svfiprintf_r>:
 800fcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc4:	4698      	mov	r8, r3
 800fcc6:	898b      	ldrh	r3, [r1, #12]
 800fcc8:	061b      	lsls	r3, r3, #24
 800fcca:	b09d      	sub	sp, #116	; 0x74
 800fccc:	4607      	mov	r7, r0
 800fcce:	460d      	mov	r5, r1
 800fcd0:	4614      	mov	r4, r2
 800fcd2:	d50e      	bpl.n	800fcf2 <_svfiprintf_r+0x32>
 800fcd4:	690b      	ldr	r3, [r1, #16]
 800fcd6:	b963      	cbnz	r3, 800fcf2 <_svfiprintf_r+0x32>
 800fcd8:	2140      	movs	r1, #64	; 0x40
 800fcda:	f7fe fba1 	bl	800e420 <_malloc_r>
 800fcde:	6028      	str	r0, [r5, #0]
 800fce0:	6128      	str	r0, [r5, #16]
 800fce2:	b920      	cbnz	r0, 800fcee <_svfiprintf_r+0x2e>
 800fce4:	230c      	movs	r3, #12
 800fce6:	603b      	str	r3, [r7, #0]
 800fce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcec:	e0d0      	b.n	800fe90 <_svfiprintf_r+0x1d0>
 800fcee:	2340      	movs	r3, #64	; 0x40
 800fcf0:	616b      	str	r3, [r5, #20]
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	9309      	str	r3, [sp, #36]	; 0x24
 800fcf6:	2320      	movs	r3, #32
 800fcf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd00:	2330      	movs	r3, #48	; 0x30
 800fd02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fea8 <_svfiprintf_r+0x1e8>
 800fd06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd0a:	f04f 0901 	mov.w	r9, #1
 800fd0e:	4623      	mov	r3, r4
 800fd10:	469a      	mov	sl, r3
 800fd12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd16:	b10a      	cbz	r2, 800fd1c <_svfiprintf_r+0x5c>
 800fd18:	2a25      	cmp	r2, #37	; 0x25
 800fd1a:	d1f9      	bne.n	800fd10 <_svfiprintf_r+0x50>
 800fd1c:	ebba 0b04 	subs.w	fp, sl, r4
 800fd20:	d00b      	beq.n	800fd3a <_svfiprintf_r+0x7a>
 800fd22:	465b      	mov	r3, fp
 800fd24:	4622      	mov	r2, r4
 800fd26:	4629      	mov	r1, r5
 800fd28:	4638      	mov	r0, r7
 800fd2a:	f7ff ff6f 	bl	800fc0c <__ssputs_r>
 800fd2e:	3001      	adds	r0, #1
 800fd30:	f000 80a9 	beq.w	800fe86 <_svfiprintf_r+0x1c6>
 800fd34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd36:	445a      	add	r2, fp
 800fd38:	9209      	str	r2, [sp, #36]	; 0x24
 800fd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	f000 80a1 	beq.w	800fe86 <_svfiprintf_r+0x1c6>
 800fd44:	2300      	movs	r3, #0
 800fd46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd4e:	f10a 0a01 	add.w	sl, sl, #1
 800fd52:	9304      	str	r3, [sp, #16]
 800fd54:	9307      	str	r3, [sp, #28]
 800fd56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd5a:	931a      	str	r3, [sp, #104]	; 0x68
 800fd5c:	4654      	mov	r4, sl
 800fd5e:	2205      	movs	r2, #5
 800fd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd64:	4850      	ldr	r0, [pc, #320]	; (800fea8 <_svfiprintf_r+0x1e8>)
 800fd66:	f7f0 fa53 	bl	8000210 <memchr>
 800fd6a:	9a04      	ldr	r2, [sp, #16]
 800fd6c:	b9d8      	cbnz	r0, 800fda6 <_svfiprintf_r+0xe6>
 800fd6e:	06d0      	lsls	r0, r2, #27
 800fd70:	bf44      	itt	mi
 800fd72:	2320      	movmi	r3, #32
 800fd74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd78:	0711      	lsls	r1, r2, #28
 800fd7a:	bf44      	itt	mi
 800fd7c:	232b      	movmi	r3, #43	; 0x2b
 800fd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd82:	f89a 3000 	ldrb.w	r3, [sl]
 800fd86:	2b2a      	cmp	r3, #42	; 0x2a
 800fd88:	d015      	beq.n	800fdb6 <_svfiprintf_r+0xf6>
 800fd8a:	9a07      	ldr	r2, [sp, #28]
 800fd8c:	4654      	mov	r4, sl
 800fd8e:	2000      	movs	r0, #0
 800fd90:	f04f 0c0a 	mov.w	ip, #10
 800fd94:	4621      	mov	r1, r4
 800fd96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd9a:	3b30      	subs	r3, #48	; 0x30
 800fd9c:	2b09      	cmp	r3, #9
 800fd9e:	d94d      	bls.n	800fe3c <_svfiprintf_r+0x17c>
 800fda0:	b1b0      	cbz	r0, 800fdd0 <_svfiprintf_r+0x110>
 800fda2:	9207      	str	r2, [sp, #28]
 800fda4:	e014      	b.n	800fdd0 <_svfiprintf_r+0x110>
 800fda6:	eba0 0308 	sub.w	r3, r0, r8
 800fdaa:	fa09 f303 	lsl.w	r3, r9, r3
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	9304      	str	r3, [sp, #16]
 800fdb2:	46a2      	mov	sl, r4
 800fdb4:	e7d2      	b.n	800fd5c <_svfiprintf_r+0x9c>
 800fdb6:	9b03      	ldr	r3, [sp, #12]
 800fdb8:	1d19      	adds	r1, r3, #4
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	9103      	str	r1, [sp, #12]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	bfbb      	ittet	lt
 800fdc2:	425b      	neglt	r3, r3
 800fdc4:	f042 0202 	orrlt.w	r2, r2, #2
 800fdc8:	9307      	strge	r3, [sp, #28]
 800fdca:	9307      	strlt	r3, [sp, #28]
 800fdcc:	bfb8      	it	lt
 800fdce:	9204      	strlt	r2, [sp, #16]
 800fdd0:	7823      	ldrb	r3, [r4, #0]
 800fdd2:	2b2e      	cmp	r3, #46	; 0x2e
 800fdd4:	d10c      	bne.n	800fdf0 <_svfiprintf_r+0x130>
 800fdd6:	7863      	ldrb	r3, [r4, #1]
 800fdd8:	2b2a      	cmp	r3, #42	; 0x2a
 800fdda:	d134      	bne.n	800fe46 <_svfiprintf_r+0x186>
 800fddc:	9b03      	ldr	r3, [sp, #12]
 800fdde:	1d1a      	adds	r2, r3, #4
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	9203      	str	r2, [sp, #12]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	bfb8      	it	lt
 800fde8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fdec:	3402      	adds	r4, #2
 800fdee:	9305      	str	r3, [sp, #20]
 800fdf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800feb8 <_svfiprintf_r+0x1f8>
 800fdf4:	7821      	ldrb	r1, [r4, #0]
 800fdf6:	2203      	movs	r2, #3
 800fdf8:	4650      	mov	r0, sl
 800fdfa:	f7f0 fa09 	bl	8000210 <memchr>
 800fdfe:	b138      	cbz	r0, 800fe10 <_svfiprintf_r+0x150>
 800fe00:	9b04      	ldr	r3, [sp, #16]
 800fe02:	eba0 000a 	sub.w	r0, r0, sl
 800fe06:	2240      	movs	r2, #64	; 0x40
 800fe08:	4082      	lsls	r2, r0
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	3401      	adds	r4, #1
 800fe0e:	9304      	str	r3, [sp, #16]
 800fe10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe14:	4825      	ldr	r0, [pc, #148]	; (800feac <_svfiprintf_r+0x1ec>)
 800fe16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe1a:	2206      	movs	r2, #6
 800fe1c:	f7f0 f9f8 	bl	8000210 <memchr>
 800fe20:	2800      	cmp	r0, #0
 800fe22:	d038      	beq.n	800fe96 <_svfiprintf_r+0x1d6>
 800fe24:	4b22      	ldr	r3, [pc, #136]	; (800feb0 <_svfiprintf_r+0x1f0>)
 800fe26:	bb1b      	cbnz	r3, 800fe70 <_svfiprintf_r+0x1b0>
 800fe28:	9b03      	ldr	r3, [sp, #12]
 800fe2a:	3307      	adds	r3, #7
 800fe2c:	f023 0307 	bic.w	r3, r3, #7
 800fe30:	3308      	adds	r3, #8
 800fe32:	9303      	str	r3, [sp, #12]
 800fe34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe36:	4433      	add	r3, r6
 800fe38:	9309      	str	r3, [sp, #36]	; 0x24
 800fe3a:	e768      	b.n	800fd0e <_svfiprintf_r+0x4e>
 800fe3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe40:	460c      	mov	r4, r1
 800fe42:	2001      	movs	r0, #1
 800fe44:	e7a6      	b.n	800fd94 <_svfiprintf_r+0xd4>
 800fe46:	2300      	movs	r3, #0
 800fe48:	3401      	adds	r4, #1
 800fe4a:	9305      	str	r3, [sp, #20]
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	f04f 0c0a 	mov.w	ip, #10
 800fe52:	4620      	mov	r0, r4
 800fe54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe58:	3a30      	subs	r2, #48	; 0x30
 800fe5a:	2a09      	cmp	r2, #9
 800fe5c:	d903      	bls.n	800fe66 <_svfiprintf_r+0x1a6>
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d0c6      	beq.n	800fdf0 <_svfiprintf_r+0x130>
 800fe62:	9105      	str	r1, [sp, #20]
 800fe64:	e7c4      	b.n	800fdf0 <_svfiprintf_r+0x130>
 800fe66:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	e7f0      	b.n	800fe52 <_svfiprintf_r+0x192>
 800fe70:	ab03      	add	r3, sp, #12
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	462a      	mov	r2, r5
 800fe76:	4b0f      	ldr	r3, [pc, #60]	; (800feb4 <_svfiprintf_r+0x1f4>)
 800fe78:	a904      	add	r1, sp, #16
 800fe7a:	4638      	mov	r0, r7
 800fe7c:	f7fe f872 	bl	800df64 <_printf_float>
 800fe80:	1c42      	adds	r2, r0, #1
 800fe82:	4606      	mov	r6, r0
 800fe84:	d1d6      	bne.n	800fe34 <_svfiprintf_r+0x174>
 800fe86:	89ab      	ldrh	r3, [r5, #12]
 800fe88:	065b      	lsls	r3, r3, #25
 800fe8a:	f53f af2d 	bmi.w	800fce8 <_svfiprintf_r+0x28>
 800fe8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe90:	b01d      	add	sp, #116	; 0x74
 800fe92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe96:	ab03      	add	r3, sp, #12
 800fe98:	9300      	str	r3, [sp, #0]
 800fe9a:	462a      	mov	r2, r5
 800fe9c:	4b05      	ldr	r3, [pc, #20]	; (800feb4 <_svfiprintf_r+0x1f4>)
 800fe9e:	a904      	add	r1, sp, #16
 800fea0:	4638      	mov	r0, r7
 800fea2:	f7fe fbab 	bl	800e5fc <_printf_i>
 800fea6:	e7eb      	b.n	800fe80 <_svfiprintf_r+0x1c0>
 800fea8:	08016804 	.word	0x08016804
 800feac:	0801680e 	.word	0x0801680e
 800feb0:	0800df65 	.word	0x0800df65
 800feb4:	0800fc0d 	.word	0x0800fc0d
 800feb8:	0801680a 	.word	0x0801680a

0800febc <_sungetc_r>:
 800febc:	b538      	push	{r3, r4, r5, lr}
 800febe:	1c4b      	adds	r3, r1, #1
 800fec0:	4614      	mov	r4, r2
 800fec2:	d103      	bne.n	800fecc <_sungetc_r+0x10>
 800fec4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fec8:	4628      	mov	r0, r5
 800feca:	bd38      	pop	{r3, r4, r5, pc}
 800fecc:	8993      	ldrh	r3, [r2, #12]
 800fece:	f023 0320 	bic.w	r3, r3, #32
 800fed2:	8193      	strh	r3, [r2, #12]
 800fed4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fed6:	6852      	ldr	r2, [r2, #4]
 800fed8:	b2cd      	uxtb	r5, r1
 800feda:	b18b      	cbz	r3, 800ff00 <_sungetc_r+0x44>
 800fedc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fede:	4293      	cmp	r3, r2
 800fee0:	dd08      	ble.n	800fef4 <_sungetc_r+0x38>
 800fee2:	6823      	ldr	r3, [r4, #0]
 800fee4:	1e5a      	subs	r2, r3, #1
 800fee6:	6022      	str	r2, [r4, #0]
 800fee8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800feec:	6863      	ldr	r3, [r4, #4]
 800feee:	3301      	adds	r3, #1
 800fef0:	6063      	str	r3, [r4, #4]
 800fef2:	e7e9      	b.n	800fec8 <_sungetc_r+0xc>
 800fef4:	4621      	mov	r1, r4
 800fef6:	f001 f8bb 	bl	8011070 <__submore>
 800fefa:	2800      	cmp	r0, #0
 800fefc:	d0f1      	beq.n	800fee2 <_sungetc_r+0x26>
 800fefe:	e7e1      	b.n	800fec4 <_sungetc_r+0x8>
 800ff00:	6921      	ldr	r1, [r4, #16]
 800ff02:	6823      	ldr	r3, [r4, #0]
 800ff04:	b151      	cbz	r1, 800ff1c <_sungetc_r+0x60>
 800ff06:	4299      	cmp	r1, r3
 800ff08:	d208      	bcs.n	800ff1c <_sungetc_r+0x60>
 800ff0a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ff0e:	42a9      	cmp	r1, r5
 800ff10:	d104      	bne.n	800ff1c <_sungetc_r+0x60>
 800ff12:	3b01      	subs	r3, #1
 800ff14:	3201      	adds	r2, #1
 800ff16:	6023      	str	r3, [r4, #0]
 800ff18:	6062      	str	r2, [r4, #4]
 800ff1a:	e7d5      	b.n	800fec8 <_sungetc_r+0xc>
 800ff1c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ff20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff24:	6363      	str	r3, [r4, #52]	; 0x34
 800ff26:	2303      	movs	r3, #3
 800ff28:	63a3      	str	r3, [r4, #56]	; 0x38
 800ff2a:	4623      	mov	r3, r4
 800ff2c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ff30:	6023      	str	r3, [r4, #0]
 800ff32:	2301      	movs	r3, #1
 800ff34:	e7dc      	b.n	800fef0 <_sungetc_r+0x34>

0800ff36 <__ssrefill_r>:
 800ff36:	b510      	push	{r4, lr}
 800ff38:	460c      	mov	r4, r1
 800ff3a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ff3c:	b169      	cbz	r1, 800ff5a <__ssrefill_r+0x24>
 800ff3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff42:	4299      	cmp	r1, r3
 800ff44:	d001      	beq.n	800ff4a <__ssrefill_r+0x14>
 800ff46:	f7ff fe15 	bl	800fb74 <_free_r>
 800ff4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff4c:	6063      	str	r3, [r4, #4]
 800ff4e:	2000      	movs	r0, #0
 800ff50:	6360      	str	r0, [r4, #52]	; 0x34
 800ff52:	b113      	cbz	r3, 800ff5a <__ssrefill_r+0x24>
 800ff54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ff56:	6023      	str	r3, [r4, #0]
 800ff58:	bd10      	pop	{r4, pc}
 800ff5a:	6923      	ldr	r3, [r4, #16]
 800ff5c:	6023      	str	r3, [r4, #0]
 800ff5e:	2300      	movs	r3, #0
 800ff60:	6063      	str	r3, [r4, #4]
 800ff62:	89a3      	ldrh	r3, [r4, #12]
 800ff64:	f043 0320 	orr.w	r3, r3, #32
 800ff68:	81a3      	strh	r3, [r4, #12]
 800ff6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff6e:	e7f3      	b.n	800ff58 <__ssrefill_r+0x22>

0800ff70 <__ssvfiscanf_r>:
 800ff70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff74:	460c      	mov	r4, r1
 800ff76:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ff7a:	2100      	movs	r1, #0
 800ff7c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ff80:	49a6      	ldr	r1, [pc, #664]	; (801021c <__ssvfiscanf_r+0x2ac>)
 800ff82:	91a0      	str	r1, [sp, #640]	; 0x280
 800ff84:	f10d 0804 	add.w	r8, sp, #4
 800ff88:	49a5      	ldr	r1, [pc, #660]	; (8010220 <__ssvfiscanf_r+0x2b0>)
 800ff8a:	4fa6      	ldr	r7, [pc, #664]	; (8010224 <__ssvfiscanf_r+0x2b4>)
 800ff8c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010228 <__ssvfiscanf_r+0x2b8>
 800ff90:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ff94:	4606      	mov	r6, r0
 800ff96:	91a1      	str	r1, [sp, #644]	; 0x284
 800ff98:	9300      	str	r3, [sp, #0]
 800ff9a:	7813      	ldrb	r3, [r2, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	f000 815a 	beq.w	8010256 <__ssvfiscanf_r+0x2e6>
 800ffa2:	5cf9      	ldrb	r1, [r7, r3]
 800ffa4:	f011 0108 	ands.w	r1, r1, #8
 800ffa8:	f102 0501 	add.w	r5, r2, #1
 800ffac:	d019      	beq.n	800ffe2 <__ssvfiscanf_r+0x72>
 800ffae:	6863      	ldr	r3, [r4, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	dd0f      	ble.n	800ffd4 <__ssvfiscanf_r+0x64>
 800ffb4:	6823      	ldr	r3, [r4, #0]
 800ffb6:	781a      	ldrb	r2, [r3, #0]
 800ffb8:	5cba      	ldrb	r2, [r7, r2]
 800ffba:	0712      	lsls	r2, r2, #28
 800ffbc:	d401      	bmi.n	800ffc2 <__ssvfiscanf_r+0x52>
 800ffbe:	462a      	mov	r2, r5
 800ffc0:	e7eb      	b.n	800ff9a <__ssvfiscanf_r+0x2a>
 800ffc2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ffc4:	3201      	adds	r2, #1
 800ffc6:	9245      	str	r2, [sp, #276]	; 0x114
 800ffc8:	6862      	ldr	r2, [r4, #4]
 800ffca:	3301      	adds	r3, #1
 800ffcc:	3a01      	subs	r2, #1
 800ffce:	6062      	str	r2, [r4, #4]
 800ffd0:	6023      	str	r3, [r4, #0]
 800ffd2:	e7ec      	b.n	800ffae <__ssvfiscanf_r+0x3e>
 800ffd4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ffd6:	4621      	mov	r1, r4
 800ffd8:	4630      	mov	r0, r6
 800ffda:	4798      	blx	r3
 800ffdc:	2800      	cmp	r0, #0
 800ffde:	d0e9      	beq.n	800ffb4 <__ssvfiscanf_r+0x44>
 800ffe0:	e7ed      	b.n	800ffbe <__ssvfiscanf_r+0x4e>
 800ffe2:	2b25      	cmp	r3, #37	; 0x25
 800ffe4:	d012      	beq.n	801000c <__ssvfiscanf_r+0x9c>
 800ffe6:	469a      	mov	sl, r3
 800ffe8:	6863      	ldr	r3, [r4, #4]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f340 8091 	ble.w	8010112 <__ssvfiscanf_r+0x1a2>
 800fff0:	6822      	ldr	r2, [r4, #0]
 800fff2:	7813      	ldrb	r3, [r2, #0]
 800fff4:	4553      	cmp	r3, sl
 800fff6:	f040 812e 	bne.w	8010256 <__ssvfiscanf_r+0x2e6>
 800fffa:	6863      	ldr	r3, [r4, #4]
 800fffc:	3b01      	subs	r3, #1
 800fffe:	6063      	str	r3, [r4, #4]
 8010000:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010002:	3201      	adds	r2, #1
 8010004:	3301      	adds	r3, #1
 8010006:	6022      	str	r2, [r4, #0]
 8010008:	9345      	str	r3, [sp, #276]	; 0x114
 801000a:	e7d8      	b.n	800ffbe <__ssvfiscanf_r+0x4e>
 801000c:	9141      	str	r1, [sp, #260]	; 0x104
 801000e:	9143      	str	r1, [sp, #268]	; 0x10c
 8010010:	7853      	ldrb	r3, [r2, #1]
 8010012:	2b2a      	cmp	r3, #42	; 0x2a
 8010014:	bf02      	ittt	eq
 8010016:	2310      	moveq	r3, #16
 8010018:	1c95      	addeq	r5, r2, #2
 801001a:	9341      	streq	r3, [sp, #260]	; 0x104
 801001c:	220a      	movs	r2, #10
 801001e:	46aa      	mov	sl, r5
 8010020:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010024:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010028:	2b09      	cmp	r3, #9
 801002a:	d91c      	bls.n	8010066 <__ssvfiscanf_r+0xf6>
 801002c:	487e      	ldr	r0, [pc, #504]	; (8010228 <__ssvfiscanf_r+0x2b8>)
 801002e:	2203      	movs	r2, #3
 8010030:	f7f0 f8ee 	bl	8000210 <memchr>
 8010034:	b138      	cbz	r0, 8010046 <__ssvfiscanf_r+0xd6>
 8010036:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010038:	eba0 0009 	sub.w	r0, r0, r9
 801003c:	2301      	movs	r3, #1
 801003e:	4083      	lsls	r3, r0
 8010040:	4313      	orrs	r3, r2
 8010042:	9341      	str	r3, [sp, #260]	; 0x104
 8010044:	4655      	mov	r5, sl
 8010046:	f815 3b01 	ldrb.w	r3, [r5], #1
 801004a:	2b78      	cmp	r3, #120	; 0x78
 801004c:	d806      	bhi.n	801005c <__ssvfiscanf_r+0xec>
 801004e:	2b57      	cmp	r3, #87	; 0x57
 8010050:	d810      	bhi.n	8010074 <__ssvfiscanf_r+0x104>
 8010052:	2b25      	cmp	r3, #37	; 0x25
 8010054:	d0c7      	beq.n	800ffe6 <__ssvfiscanf_r+0x76>
 8010056:	d857      	bhi.n	8010108 <__ssvfiscanf_r+0x198>
 8010058:	2b00      	cmp	r3, #0
 801005a:	d065      	beq.n	8010128 <__ssvfiscanf_r+0x1b8>
 801005c:	2303      	movs	r3, #3
 801005e:	9347      	str	r3, [sp, #284]	; 0x11c
 8010060:	230a      	movs	r3, #10
 8010062:	9342      	str	r3, [sp, #264]	; 0x108
 8010064:	e076      	b.n	8010154 <__ssvfiscanf_r+0x1e4>
 8010066:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010068:	fb02 1103 	mla	r1, r2, r3, r1
 801006c:	3930      	subs	r1, #48	; 0x30
 801006e:	9143      	str	r1, [sp, #268]	; 0x10c
 8010070:	4655      	mov	r5, sl
 8010072:	e7d4      	b.n	801001e <__ssvfiscanf_r+0xae>
 8010074:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010078:	2a20      	cmp	r2, #32
 801007a:	d8ef      	bhi.n	801005c <__ssvfiscanf_r+0xec>
 801007c:	a101      	add	r1, pc, #4	; (adr r1, 8010084 <__ssvfiscanf_r+0x114>)
 801007e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010082:	bf00      	nop
 8010084:	08010137 	.word	0x08010137
 8010088:	0801005d 	.word	0x0801005d
 801008c:	0801005d 	.word	0x0801005d
 8010090:	08010195 	.word	0x08010195
 8010094:	0801005d 	.word	0x0801005d
 8010098:	0801005d 	.word	0x0801005d
 801009c:	0801005d 	.word	0x0801005d
 80100a0:	0801005d 	.word	0x0801005d
 80100a4:	0801005d 	.word	0x0801005d
 80100a8:	0801005d 	.word	0x0801005d
 80100ac:	0801005d 	.word	0x0801005d
 80100b0:	080101ab 	.word	0x080101ab
 80100b4:	08010191 	.word	0x08010191
 80100b8:	0801010f 	.word	0x0801010f
 80100bc:	0801010f 	.word	0x0801010f
 80100c0:	0801010f 	.word	0x0801010f
 80100c4:	0801005d 	.word	0x0801005d
 80100c8:	0801014d 	.word	0x0801014d
 80100cc:	0801005d 	.word	0x0801005d
 80100d0:	0801005d 	.word	0x0801005d
 80100d4:	0801005d 	.word	0x0801005d
 80100d8:	0801005d 	.word	0x0801005d
 80100dc:	080101bb 	.word	0x080101bb
 80100e0:	08010189 	.word	0x08010189
 80100e4:	0801012f 	.word	0x0801012f
 80100e8:	0801005d 	.word	0x0801005d
 80100ec:	0801005d 	.word	0x0801005d
 80100f0:	080101b7 	.word	0x080101b7
 80100f4:	0801005d 	.word	0x0801005d
 80100f8:	08010191 	.word	0x08010191
 80100fc:	0801005d 	.word	0x0801005d
 8010100:	0801005d 	.word	0x0801005d
 8010104:	08010137 	.word	0x08010137
 8010108:	3b45      	subs	r3, #69	; 0x45
 801010a:	2b02      	cmp	r3, #2
 801010c:	d8a6      	bhi.n	801005c <__ssvfiscanf_r+0xec>
 801010e:	2305      	movs	r3, #5
 8010110:	e01f      	b.n	8010152 <__ssvfiscanf_r+0x1e2>
 8010112:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010114:	4621      	mov	r1, r4
 8010116:	4630      	mov	r0, r6
 8010118:	4798      	blx	r3
 801011a:	2800      	cmp	r0, #0
 801011c:	f43f af68 	beq.w	800fff0 <__ssvfiscanf_r+0x80>
 8010120:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010122:	2800      	cmp	r0, #0
 8010124:	f040 808d 	bne.w	8010242 <__ssvfiscanf_r+0x2d2>
 8010128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801012c:	e08f      	b.n	801024e <__ssvfiscanf_r+0x2de>
 801012e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010130:	f042 0220 	orr.w	r2, r2, #32
 8010134:	9241      	str	r2, [sp, #260]	; 0x104
 8010136:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801013c:	9241      	str	r2, [sp, #260]	; 0x104
 801013e:	2210      	movs	r2, #16
 8010140:	2b6f      	cmp	r3, #111	; 0x6f
 8010142:	9242      	str	r2, [sp, #264]	; 0x108
 8010144:	bf34      	ite	cc
 8010146:	2303      	movcc	r3, #3
 8010148:	2304      	movcs	r3, #4
 801014a:	e002      	b.n	8010152 <__ssvfiscanf_r+0x1e2>
 801014c:	2300      	movs	r3, #0
 801014e:	9342      	str	r3, [sp, #264]	; 0x108
 8010150:	2303      	movs	r3, #3
 8010152:	9347      	str	r3, [sp, #284]	; 0x11c
 8010154:	6863      	ldr	r3, [r4, #4]
 8010156:	2b00      	cmp	r3, #0
 8010158:	dd3d      	ble.n	80101d6 <__ssvfiscanf_r+0x266>
 801015a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801015c:	0659      	lsls	r1, r3, #25
 801015e:	d404      	bmi.n	801016a <__ssvfiscanf_r+0x1fa>
 8010160:	6823      	ldr	r3, [r4, #0]
 8010162:	781a      	ldrb	r2, [r3, #0]
 8010164:	5cba      	ldrb	r2, [r7, r2]
 8010166:	0712      	lsls	r2, r2, #28
 8010168:	d43c      	bmi.n	80101e4 <__ssvfiscanf_r+0x274>
 801016a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801016c:	2b02      	cmp	r3, #2
 801016e:	dc4b      	bgt.n	8010208 <__ssvfiscanf_r+0x298>
 8010170:	466b      	mov	r3, sp
 8010172:	4622      	mov	r2, r4
 8010174:	a941      	add	r1, sp, #260	; 0x104
 8010176:	4630      	mov	r0, r6
 8010178:	f000 f9b6 	bl	80104e8 <_scanf_chars>
 801017c:	2801      	cmp	r0, #1
 801017e:	d06a      	beq.n	8010256 <__ssvfiscanf_r+0x2e6>
 8010180:	2802      	cmp	r0, #2
 8010182:	f47f af1c 	bne.w	800ffbe <__ssvfiscanf_r+0x4e>
 8010186:	e7cb      	b.n	8010120 <__ssvfiscanf_r+0x1b0>
 8010188:	2308      	movs	r3, #8
 801018a:	9342      	str	r3, [sp, #264]	; 0x108
 801018c:	2304      	movs	r3, #4
 801018e:	e7e0      	b.n	8010152 <__ssvfiscanf_r+0x1e2>
 8010190:	220a      	movs	r2, #10
 8010192:	e7d5      	b.n	8010140 <__ssvfiscanf_r+0x1d0>
 8010194:	4629      	mov	r1, r5
 8010196:	4640      	mov	r0, r8
 8010198:	f000 faf4 	bl	8010784 <__sccl>
 801019c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801019e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101a2:	9341      	str	r3, [sp, #260]	; 0x104
 80101a4:	4605      	mov	r5, r0
 80101a6:	2301      	movs	r3, #1
 80101a8:	e7d3      	b.n	8010152 <__ssvfiscanf_r+0x1e2>
 80101aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80101ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101b0:	9341      	str	r3, [sp, #260]	; 0x104
 80101b2:	2300      	movs	r3, #0
 80101b4:	e7cd      	b.n	8010152 <__ssvfiscanf_r+0x1e2>
 80101b6:	2302      	movs	r3, #2
 80101b8:	e7cb      	b.n	8010152 <__ssvfiscanf_r+0x1e2>
 80101ba:	9841      	ldr	r0, [sp, #260]	; 0x104
 80101bc:	06c3      	lsls	r3, r0, #27
 80101be:	f53f aefe 	bmi.w	800ffbe <__ssvfiscanf_r+0x4e>
 80101c2:	9b00      	ldr	r3, [sp, #0]
 80101c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80101c6:	1d19      	adds	r1, r3, #4
 80101c8:	9100      	str	r1, [sp, #0]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	07c0      	lsls	r0, r0, #31
 80101ce:	bf4c      	ite	mi
 80101d0:	801a      	strhmi	r2, [r3, #0]
 80101d2:	601a      	strpl	r2, [r3, #0]
 80101d4:	e6f3      	b.n	800ffbe <__ssvfiscanf_r+0x4e>
 80101d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80101d8:	4621      	mov	r1, r4
 80101da:	4630      	mov	r0, r6
 80101dc:	4798      	blx	r3
 80101de:	2800      	cmp	r0, #0
 80101e0:	d0bb      	beq.n	801015a <__ssvfiscanf_r+0x1ea>
 80101e2:	e79d      	b.n	8010120 <__ssvfiscanf_r+0x1b0>
 80101e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80101e6:	3201      	adds	r2, #1
 80101e8:	9245      	str	r2, [sp, #276]	; 0x114
 80101ea:	6862      	ldr	r2, [r4, #4]
 80101ec:	3a01      	subs	r2, #1
 80101ee:	2a00      	cmp	r2, #0
 80101f0:	6062      	str	r2, [r4, #4]
 80101f2:	dd02      	ble.n	80101fa <__ssvfiscanf_r+0x28a>
 80101f4:	3301      	adds	r3, #1
 80101f6:	6023      	str	r3, [r4, #0]
 80101f8:	e7b2      	b.n	8010160 <__ssvfiscanf_r+0x1f0>
 80101fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80101fc:	4621      	mov	r1, r4
 80101fe:	4630      	mov	r0, r6
 8010200:	4798      	blx	r3
 8010202:	2800      	cmp	r0, #0
 8010204:	d0ac      	beq.n	8010160 <__ssvfiscanf_r+0x1f0>
 8010206:	e78b      	b.n	8010120 <__ssvfiscanf_r+0x1b0>
 8010208:	2b04      	cmp	r3, #4
 801020a:	dc0f      	bgt.n	801022c <__ssvfiscanf_r+0x2bc>
 801020c:	466b      	mov	r3, sp
 801020e:	4622      	mov	r2, r4
 8010210:	a941      	add	r1, sp, #260	; 0x104
 8010212:	4630      	mov	r0, r6
 8010214:	f000 f9c2 	bl	801059c <_scanf_i>
 8010218:	e7b0      	b.n	801017c <__ssvfiscanf_r+0x20c>
 801021a:	bf00      	nop
 801021c:	0800febd 	.word	0x0800febd
 8010220:	0800ff37 	.word	0x0800ff37
 8010224:	0801663b 	.word	0x0801663b
 8010228:	0801680a 	.word	0x0801680a
 801022c:	4b0b      	ldr	r3, [pc, #44]	; (801025c <__ssvfiscanf_r+0x2ec>)
 801022e:	2b00      	cmp	r3, #0
 8010230:	f43f aec5 	beq.w	800ffbe <__ssvfiscanf_r+0x4e>
 8010234:	466b      	mov	r3, sp
 8010236:	4622      	mov	r2, r4
 8010238:	a941      	add	r1, sp, #260	; 0x104
 801023a:	4630      	mov	r0, r6
 801023c:	f3af 8000 	nop.w
 8010240:	e79c      	b.n	801017c <__ssvfiscanf_r+0x20c>
 8010242:	89a3      	ldrh	r3, [r4, #12]
 8010244:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010248:	bf18      	it	ne
 801024a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801024e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010256:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010258:	e7f9      	b.n	801024e <__ssvfiscanf_r+0x2de>
 801025a:	bf00      	nop
 801025c:	00000000 	.word	0x00000000

08010260 <__sfputc_r>:
 8010260:	6893      	ldr	r3, [r2, #8]
 8010262:	3b01      	subs	r3, #1
 8010264:	2b00      	cmp	r3, #0
 8010266:	b410      	push	{r4}
 8010268:	6093      	str	r3, [r2, #8]
 801026a:	da08      	bge.n	801027e <__sfputc_r+0x1e>
 801026c:	6994      	ldr	r4, [r2, #24]
 801026e:	42a3      	cmp	r3, r4
 8010270:	db01      	blt.n	8010276 <__sfputc_r+0x16>
 8010272:	290a      	cmp	r1, #10
 8010274:	d103      	bne.n	801027e <__sfputc_r+0x1e>
 8010276:	f85d 4b04 	ldr.w	r4, [sp], #4
 801027a:	f000 bfd7 	b.w	801122c <__swbuf_r>
 801027e:	6813      	ldr	r3, [r2, #0]
 8010280:	1c58      	adds	r0, r3, #1
 8010282:	6010      	str	r0, [r2, #0]
 8010284:	7019      	strb	r1, [r3, #0]
 8010286:	4608      	mov	r0, r1
 8010288:	f85d 4b04 	ldr.w	r4, [sp], #4
 801028c:	4770      	bx	lr

0801028e <__sfputs_r>:
 801028e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010290:	4606      	mov	r6, r0
 8010292:	460f      	mov	r7, r1
 8010294:	4614      	mov	r4, r2
 8010296:	18d5      	adds	r5, r2, r3
 8010298:	42ac      	cmp	r4, r5
 801029a:	d101      	bne.n	80102a0 <__sfputs_r+0x12>
 801029c:	2000      	movs	r0, #0
 801029e:	e007      	b.n	80102b0 <__sfputs_r+0x22>
 80102a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102a4:	463a      	mov	r2, r7
 80102a6:	4630      	mov	r0, r6
 80102a8:	f7ff ffda 	bl	8010260 <__sfputc_r>
 80102ac:	1c43      	adds	r3, r0, #1
 80102ae:	d1f3      	bne.n	8010298 <__sfputs_r+0xa>
 80102b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080102b4 <_vfiprintf_r>:
 80102b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b8:	460d      	mov	r5, r1
 80102ba:	b09d      	sub	sp, #116	; 0x74
 80102bc:	4614      	mov	r4, r2
 80102be:	4698      	mov	r8, r3
 80102c0:	4606      	mov	r6, r0
 80102c2:	b118      	cbz	r0, 80102cc <_vfiprintf_r+0x18>
 80102c4:	6a03      	ldr	r3, [r0, #32]
 80102c6:	b90b      	cbnz	r3, 80102cc <_vfiprintf_r+0x18>
 80102c8:	f7fe fc18 	bl	800eafc <__sinit>
 80102cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102ce:	07d9      	lsls	r1, r3, #31
 80102d0:	d405      	bmi.n	80102de <_vfiprintf_r+0x2a>
 80102d2:	89ab      	ldrh	r3, [r5, #12]
 80102d4:	059a      	lsls	r2, r3, #22
 80102d6:	d402      	bmi.n	80102de <_vfiprintf_r+0x2a>
 80102d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102da:	f7fe fda2 	bl	800ee22 <__retarget_lock_acquire_recursive>
 80102de:	89ab      	ldrh	r3, [r5, #12]
 80102e0:	071b      	lsls	r3, r3, #28
 80102e2:	d501      	bpl.n	80102e8 <_vfiprintf_r+0x34>
 80102e4:	692b      	ldr	r3, [r5, #16]
 80102e6:	b99b      	cbnz	r3, 8010310 <_vfiprintf_r+0x5c>
 80102e8:	4629      	mov	r1, r5
 80102ea:	4630      	mov	r0, r6
 80102ec:	f000 ffdc 	bl	80112a8 <__swsetup_r>
 80102f0:	b170      	cbz	r0, 8010310 <_vfiprintf_r+0x5c>
 80102f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102f4:	07dc      	lsls	r4, r3, #31
 80102f6:	d504      	bpl.n	8010302 <_vfiprintf_r+0x4e>
 80102f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102fc:	b01d      	add	sp, #116	; 0x74
 80102fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010302:	89ab      	ldrh	r3, [r5, #12]
 8010304:	0598      	lsls	r0, r3, #22
 8010306:	d4f7      	bmi.n	80102f8 <_vfiprintf_r+0x44>
 8010308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801030a:	f7fe fd8b 	bl	800ee24 <__retarget_lock_release_recursive>
 801030e:	e7f3      	b.n	80102f8 <_vfiprintf_r+0x44>
 8010310:	2300      	movs	r3, #0
 8010312:	9309      	str	r3, [sp, #36]	; 0x24
 8010314:	2320      	movs	r3, #32
 8010316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801031a:	f8cd 800c 	str.w	r8, [sp, #12]
 801031e:	2330      	movs	r3, #48	; 0x30
 8010320:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80104d4 <_vfiprintf_r+0x220>
 8010324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010328:	f04f 0901 	mov.w	r9, #1
 801032c:	4623      	mov	r3, r4
 801032e:	469a      	mov	sl, r3
 8010330:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010334:	b10a      	cbz	r2, 801033a <_vfiprintf_r+0x86>
 8010336:	2a25      	cmp	r2, #37	; 0x25
 8010338:	d1f9      	bne.n	801032e <_vfiprintf_r+0x7a>
 801033a:	ebba 0b04 	subs.w	fp, sl, r4
 801033e:	d00b      	beq.n	8010358 <_vfiprintf_r+0xa4>
 8010340:	465b      	mov	r3, fp
 8010342:	4622      	mov	r2, r4
 8010344:	4629      	mov	r1, r5
 8010346:	4630      	mov	r0, r6
 8010348:	f7ff ffa1 	bl	801028e <__sfputs_r>
 801034c:	3001      	adds	r0, #1
 801034e:	f000 80a9 	beq.w	80104a4 <_vfiprintf_r+0x1f0>
 8010352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010354:	445a      	add	r2, fp
 8010356:	9209      	str	r2, [sp, #36]	; 0x24
 8010358:	f89a 3000 	ldrb.w	r3, [sl]
 801035c:	2b00      	cmp	r3, #0
 801035e:	f000 80a1 	beq.w	80104a4 <_vfiprintf_r+0x1f0>
 8010362:	2300      	movs	r3, #0
 8010364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801036c:	f10a 0a01 	add.w	sl, sl, #1
 8010370:	9304      	str	r3, [sp, #16]
 8010372:	9307      	str	r3, [sp, #28]
 8010374:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010378:	931a      	str	r3, [sp, #104]	; 0x68
 801037a:	4654      	mov	r4, sl
 801037c:	2205      	movs	r2, #5
 801037e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010382:	4854      	ldr	r0, [pc, #336]	; (80104d4 <_vfiprintf_r+0x220>)
 8010384:	f7ef ff44 	bl	8000210 <memchr>
 8010388:	9a04      	ldr	r2, [sp, #16]
 801038a:	b9d8      	cbnz	r0, 80103c4 <_vfiprintf_r+0x110>
 801038c:	06d1      	lsls	r1, r2, #27
 801038e:	bf44      	itt	mi
 8010390:	2320      	movmi	r3, #32
 8010392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010396:	0713      	lsls	r3, r2, #28
 8010398:	bf44      	itt	mi
 801039a:	232b      	movmi	r3, #43	; 0x2b
 801039c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103a0:	f89a 3000 	ldrb.w	r3, [sl]
 80103a4:	2b2a      	cmp	r3, #42	; 0x2a
 80103a6:	d015      	beq.n	80103d4 <_vfiprintf_r+0x120>
 80103a8:	9a07      	ldr	r2, [sp, #28]
 80103aa:	4654      	mov	r4, sl
 80103ac:	2000      	movs	r0, #0
 80103ae:	f04f 0c0a 	mov.w	ip, #10
 80103b2:	4621      	mov	r1, r4
 80103b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103b8:	3b30      	subs	r3, #48	; 0x30
 80103ba:	2b09      	cmp	r3, #9
 80103bc:	d94d      	bls.n	801045a <_vfiprintf_r+0x1a6>
 80103be:	b1b0      	cbz	r0, 80103ee <_vfiprintf_r+0x13a>
 80103c0:	9207      	str	r2, [sp, #28]
 80103c2:	e014      	b.n	80103ee <_vfiprintf_r+0x13a>
 80103c4:	eba0 0308 	sub.w	r3, r0, r8
 80103c8:	fa09 f303 	lsl.w	r3, r9, r3
 80103cc:	4313      	orrs	r3, r2
 80103ce:	9304      	str	r3, [sp, #16]
 80103d0:	46a2      	mov	sl, r4
 80103d2:	e7d2      	b.n	801037a <_vfiprintf_r+0xc6>
 80103d4:	9b03      	ldr	r3, [sp, #12]
 80103d6:	1d19      	adds	r1, r3, #4
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	9103      	str	r1, [sp, #12]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	bfbb      	ittet	lt
 80103e0:	425b      	neglt	r3, r3
 80103e2:	f042 0202 	orrlt.w	r2, r2, #2
 80103e6:	9307      	strge	r3, [sp, #28]
 80103e8:	9307      	strlt	r3, [sp, #28]
 80103ea:	bfb8      	it	lt
 80103ec:	9204      	strlt	r2, [sp, #16]
 80103ee:	7823      	ldrb	r3, [r4, #0]
 80103f0:	2b2e      	cmp	r3, #46	; 0x2e
 80103f2:	d10c      	bne.n	801040e <_vfiprintf_r+0x15a>
 80103f4:	7863      	ldrb	r3, [r4, #1]
 80103f6:	2b2a      	cmp	r3, #42	; 0x2a
 80103f8:	d134      	bne.n	8010464 <_vfiprintf_r+0x1b0>
 80103fa:	9b03      	ldr	r3, [sp, #12]
 80103fc:	1d1a      	adds	r2, r3, #4
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	9203      	str	r2, [sp, #12]
 8010402:	2b00      	cmp	r3, #0
 8010404:	bfb8      	it	lt
 8010406:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801040a:	3402      	adds	r4, #2
 801040c:	9305      	str	r3, [sp, #20]
 801040e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80104e4 <_vfiprintf_r+0x230>
 8010412:	7821      	ldrb	r1, [r4, #0]
 8010414:	2203      	movs	r2, #3
 8010416:	4650      	mov	r0, sl
 8010418:	f7ef fefa 	bl	8000210 <memchr>
 801041c:	b138      	cbz	r0, 801042e <_vfiprintf_r+0x17a>
 801041e:	9b04      	ldr	r3, [sp, #16]
 8010420:	eba0 000a 	sub.w	r0, r0, sl
 8010424:	2240      	movs	r2, #64	; 0x40
 8010426:	4082      	lsls	r2, r0
 8010428:	4313      	orrs	r3, r2
 801042a:	3401      	adds	r4, #1
 801042c:	9304      	str	r3, [sp, #16]
 801042e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010432:	4829      	ldr	r0, [pc, #164]	; (80104d8 <_vfiprintf_r+0x224>)
 8010434:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010438:	2206      	movs	r2, #6
 801043a:	f7ef fee9 	bl	8000210 <memchr>
 801043e:	2800      	cmp	r0, #0
 8010440:	d03f      	beq.n	80104c2 <_vfiprintf_r+0x20e>
 8010442:	4b26      	ldr	r3, [pc, #152]	; (80104dc <_vfiprintf_r+0x228>)
 8010444:	bb1b      	cbnz	r3, 801048e <_vfiprintf_r+0x1da>
 8010446:	9b03      	ldr	r3, [sp, #12]
 8010448:	3307      	adds	r3, #7
 801044a:	f023 0307 	bic.w	r3, r3, #7
 801044e:	3308      	adds	r3, #8
 8010450:	9303      	str	r3, [sp, #12]
 8010452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010454:	443b      	add	r3, r7
 8010456:	9309      	str	r3, [sp, #36]	; 0x24
 8010458:	e768      	b.n	801032c <_vfiprintf_r+0x78>
 801045a:	fb0c 3202 	mla	r2, ip, r2, r3
 801045e:	460c      	mov	r4, r1
 8010460:	2001      	movs	r0, #1
 8010462:	e7a6      	b.n	80103b2 <_vfiprintf_r+0xfe>
 8010464:	2300      	movs	r3, #0
 8010466:	3401      	adds	r4, #1
 8010468:	9305      	str	r3, [sp, #20]
 801046a:	4619      	mov	r1, r3
 801046c:	f04f 0c0a 	mov.w	ip, #10
 8010470:	4620      	mov	r0, r4
 8010472:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010476:	3a30      	subs	r2, #48	; 0x30
 8010478:	2a09      	cmp	r2, #9
 801047a:	d903      	bls.n	8010484 <_vfiprintf_r+0x1d0>
 801047c:	2b00      	cmp	r3, #0
 801047e:	d0c6      	beq.n	801040e <_vfiprintf_r+0x15a>
 8010480:	9105      	str	r1, [sp, #20]
 8010482:	e7c4      	b.n	801040e <_vfiprintf_r+0x15a>
 8010484:	fb0c 2101 	mla	r1, ip, r1, r2
 8010488:	4604      	mov	r4, r0
 801048a:	2301      	movs	r3, #1
 801048c:	e7f0      	b.n	8010470 <_vfiprintf_r+0x1bc>
 801048e:	ab03      	add	r3, sp, #12
 8010490:	9300      	str	r3, [sp, #0]
 8010492:	462a      	mov	r2, r5
 8010494:	4b12      	ldr	r3, [pc, #72]	; (80104e0 <_vfiprintf_r+0x22c>)
 8010496:	a904      	add	r1, sp, #16
 8010498:	4630      	mov	r0, r6
 801049a:	f7fd fd63 	bl	800df64 <_printf_float>
 801049e:	4607      	mov	r7, r0
 80104a0:	1c78      	adds	r0, r7, #1
 80104a2:	d1d6      	bne.n	8010452 <_vfiprintf_r+0x19e>
 80104a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104a6:	07d9      	lsls	r1, r3, #31
 80104a8:	d405      	bmi.n	80104b6 <_vfiprintf_r+0x202>
 80104aa:	89ab      	ldrh	r3, [r5, #12]
 80104ac:	059a      	lsls	r2, r3, #22
 80104ae:	d402      	bmi.n	80104b6 <_vfiprintf_r+0x202>
 80104b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104b2:	f7fe fcb7 	bl	800ee24 <__retarget_lock_release_recursive>
 80104b6:	89ab      	ldrh	r3, [r5, #12]
 80104b8:	065b      	lsls	r3, r3, #25
 80104ba:	f53f af1d 	bmi.w	80102f8 <_vfiprintf_r+0x44>
 80104be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80104c0:	e71c      	b.n	80102fc <_vfiprintf_r+0x48>
 80104c2:	ab03      	add	r3, sp, #12
 80104c4:	9300      	str	r3, [sp, #0]
 80104c6:	462a      	mov	r2, r5
 80104c8:	4b05      	ldr	r3, [pc, #20]	; (80104e0 <_vfiprintf_r+0x22c>)
 80104ca:	a904      	add	r1, sp, #16
 80104cc:	4630      	mov	r0, r6
 80104ce:	f7fe f895 	bl	800e5fc <_printf_i>
 80104d2:	e7e4      	b.n	801049e <_vfiprintf_r+0x1ea>
 80104d4:	08016804 	.word	0x08016804
 80104d8:	0801680e 	.word	0x0801680e
 80104dc:	0800df65 	.word	0x0800df65
 80104e0:	0801028f 	.word	0x0801028f
 80104e4:	0801680a 	.word	0x0801680a

080104e8 <_scanf_chars>:
 80104e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104ec:	4615      	mov	r5, r2
 80104ee:	688a      	ldr	r2, [r1, #8]
 80104f0:	4680      	mov	r8, r0
 80104f2:	460c      	mov	r4, r1
 80104f4:	b932      	cbnz	r2, 8010504 <_scanf_chars+0x1c>
 80104f6:	698a      	ldr	r2, [r1, #24]
 80104f8:	2a00      	cmp	r2, #0
 80104fa:	bf0c      	ite	eq
 80104fc:	2201      	moveq	r2, #1
 80104fe:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8010502:	608a      	str	r2, [r1, #8]
 8010504:	6822      	ldr	r2, [r4, #0]
 8010506:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010598 <_scanf_chars+0xb0>
 801050a:	06d1      	lsls	r1, r2, #27
 801050c:	bf5f      	itttt	pl
 801050e:	681a      	ldrpl	r2, [r3, #0]
 8010510:	1d11      	addpl	r1, r2, #4
 8010512:	6019      	strpl	r1, [r3, #0]
 8010514:	6816      	ldrpl	r6, [r2, #0]
 8010516:	2700      	movs	r7, #0
 8010518:	69a0      	ldr	r0, [r4, #24]
 801051a:	b188      	cbz	r0, 8010540 <_scanf_chars+0x58>
 801051c:	2801      	cmp	r0, #1
 801051e:	d107      	bne.n	8010530 <_scanf_chars+0x48>
 8010520:	682a      	ldr	r2, [r5, #0]
 8010522:	7811      	ldrb	r1, [r2, #0]
 8010524:	6962      	ldr	r2, [r4, #20]
 8010526:	5c52      	ldrb	r2, [r2, r1]
 8010528:	b952      	cbnz	r2, 8010540 <_scanf_chars+0x58>
 801052a:	2f00      	cmp	r7, #0
 801052c:	d031      	beq.n	8010592 <_scanf_chars+0xaa>
 801052e:	e022      	b.n	8010576 <_scanf_chars+0x8e>
 8010530:	2802      	cmp	r0, #2
 8010532:	d120      	bne.n	8010576 <_scanf_chars+0x8e>
 8010534:	682b      	ldr	r3, [r5, #0]
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	f819 3003 	ldrb.w	r3, [r9, r3]
 801053c:	071b      	lsls	r3, r3, #28
 801053e:	d41a      	bmi.n	8010576 <_scanf_chars+0x8e>
 8010540:	6823      	ldr	r3, [r4, #0]
 8010542:	06da      	lsls	r2, r3, #27
 8010544:	bf5e      	ittt	pl
 8010546:	682b      	ldrpl	r3, [r5, #0]
 8010548:	781b      	ldrbpl	r3, [r3, #0]
 801054a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801054e:	682a      	ldr	r2, [r5, #0]
 8010550:	686b      	ldr	r3, [r5, #4]
 8010552:	3201      	adds	r2, #1
 8010554:	602a      	str	r2, [r5, #0]
 8010556:	68a2      	ldr	r2, [r4, #8]
 8010558:	3b01      	subs	r3, #1
 801055a:	3a01      	subs	r2, #1
 801055c:	606b      	str	r3, [r5, #4]
 801055e:	3701      	adds	r7, #1
 8010560:	60a2      	str	r2, [r4, #8]
 8010562:	b142      	cbz	r2, 8010576 <_scanf_chars+0x8e>
 8010564:	2b00      	cmp	r3, #0
 8010566:	dcd7      	bgt.n	8010518 <_scanf_chars+0x30>
 8010568:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801056c:	4629      	mov	r1, r5
 801056e:	4640      	mov	r0, r8
 8010570:	4798      	blx	r3
 8010572:	2800      	cmp	r0, #0
 8010574:	d0d0      	beq.n	8010518 <_scanf_chars+0x30>
 8010576:	6823      	ldr	r3, [r4, #0]
 8010578:	f013 0310 	ands.w	r3, r3, #16
 801057c:	d105      	bne.n	801058a <_scanf_chars+0xa2>
 801057e:	68e2      	ldr	r2, [r4, #12]
 8010580:	3201      	adds	r2, #1
 8010582:	60e2      	str	r2, [r4, #12]
 8010584:	69a2      	ldr	r2, [r4, #24]
 8010586:	b102      	cbz	r2, 801058a <_scanf_chars+0xa2>
 8010588:	7033      	strb	r3, [r6, #0]
 801058a:	6923      	ldr	r3, [r4, #16]
 801058c:	443b      	add	r3, r7
 801058e:	6123      	str	r3, [r4, #16]
 8010590:	2000      	movs	r0, #0
 8010592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010596:	bf00      	nop
 8010598:	0801663b 	.word	0x0801663b

0801059c <_scanf_i>:
 801059c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a0:	4698      	mov	r8, r3
 80105a2:	4b74      	ldr	r3, [pc, #464]	; (8010774 <_scanf_i+0x1d8>)
 80105a4:	460c      	mov	r4, r1
 80105a6:	4682      	mov	sl, r0
 80105a8:	4616      	mov	r6, r2
 80105aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80105ae:	b087      	sub	sp, #28
 80105b0:	ab03      	add	r3, sp, #12
 80105b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80105b6:	4b70      	ldr	r3, [pc, #448]	; (8010778 <_scanf_i+0x1dc>)
 80105b8:	69a1      	ldr	r1, [r4, #24]
 80105ba:	4a70      	ldr	r2, [pc, #448]	; (801077c <_scanf_i+0x1e0>)
 80105bc:	2903      	cmp	r1, #3
 80105be:	bf18      	it	ne
 80105c0:	461a      	movne	r2, r3
 80105c2:	68a3      	ldr	r3, [r4, #8]
 80105c4:	9201      	str	r2, [sp, #4]
 80105c6:	1e5a      	subs	r2, r3, #1
 80105c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80105cc:	bf88      	it	hi
 80105ce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80105d2:	4627      	mov	r7, r4
 80105d4:	bf82      	ittt	hi
 80105d6:	eb03 0905 	addhi.w	r9, r3, r5
 80105da:	f240 135d 	movwhi	r3, #349	; 0x15d
 80105de:	60a3      	strhi	r3, [r4, #8]
 80105e0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80105e4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80105e8:	bf98      	it	ls
 80105ea:	f04f 0900 	movls.w	r9, #0
 80105ee:	6023      	str	r3, [r4, #0]
 80105f0:	463d      	mov	r5, r7
 80105f2:	f04f 0b00 	mov.w	fp, #0
 80105f6:	6831      	ldr	r1, [r6, #0]
 80105f8:	ab03      	add	r3, sp, #12
 80105fa:	7809      	ldrb	r1, [r1, #0]
 80105fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010600:	2202      	movs	r2, #2
 8010602:	f7ef fe05 	bl	8000210 <memchr>
 8010606:	b328      	cbz	r0, 8010654 <_scanf_i+0xb8>
 8010608:	f1bb 0f01 	cmp.w	fp, #1
 801060c:	d159      	bne.n	80106c2 <_scanf_i+0x126>
 801060e:	6862      	ldr	r2, [r4, #4]
 8010610:	b92a      	cbnz	r2, 801061e <_scanf_i+0x82>
 8010612:	6822      	ldr	r2, [r4, #0]
 8010614:	2308      	movs	r3, #8
 8010616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801061a:	6063      	str	r3, [r4, #4]
 801061c:	6022      	str	r2, [r4, #0]
 801061e:	6822      	ldr	r2, [r4, #0]
 8010620:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010624:	6022      	str	r2, [r4, #0]
 8010626:	68a2      	ldr	r2, [r4, #8]
 8010628:	1e51      	subs	r1, r2, #1
 801062a:	60a1      	str	r1, [r4, #8]
 801062c:	b192      	cbz	r2, 8010654 <_scanf_i+0xb8>
 801062e:	6832      	ldr	r2, [r6, #0]
 8010630:	1c51      	adds	r1, r2, #1
 8010632:	6031      	str	r1, [r6, #0]
 8010634:	7812      	ldrb	r2, [r2, #0]
 8010636:	f805 2b01 	strb.w	r2, [r5], #1
 801063a:	6872      	ldr	r2, [r6, #4]
 801063c:	3a01      	subs	r2, #1
 801063e:	2a00      	cmp	r2, #0
 8010640:	6072      	str	r2, [r6, #4]
 8010642:	dc07      	bgt.n	8010654 <_scanf_i+0xb8>
 8010644:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010648:	4631      	mov	r1, r6
 801064a:	4650      	mov	r0, sl
 801064c:	4790      	blx	r2
 801064e:	2800      	cmp	r0, #0
 8010650:	f040 8085 	bne.w	801075e <_scanf_i+0x1c2>
 8010654:	f10b 0b01 	add.w	fp, fp, #1
 8010658:	f1bb 0f03 	cmp.w	fp, #3
 801065c:	d1cb      	bne.n	80105f6 <_scanf_i+0x5a>
 801065e:	6863      	ldr	r3, [r4, #4]
 8010660:	b90b      	cbnz	r3, 8010666 <_scanf_i+0xca>
 8010662:	230a      	movs	r3, #10
 8010664:	6063      	str	r3, [r4, #4]
 8010666:	6863      	ldr	r3, [r4, #4]
 8010668:	4945      	ldr	r1, [pc, #276]	; (8010780 <_scanf_i+0x1e4>)
 801066a:	6960      	ldr	r0, [r4, #20]
 801066c:	1ac9      	subs	r1, r1, r3
 801066e:	f000 f889 	bl	8010784 <__sccl>
 8010672:	f04f 0b00 	mov.w	fp, #0
 8010676:	68a3      	ldr	r3, [r4, #8]
 8010678:	6822      	ldr	r2, [r4, #0]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d03d      	beq.n	80106fa <_scanf_i+0x15e>
 801067e:	6831      	ldr	r1, [r6, #0]
 8010680:	6960      	ldr	r0, [r4, #20]
 8010682:	f891 c000 	ldrb.w	ip, [r1]
 8010686:	f810 000c 	ldrb.w	r0, [r0, ip]
 801068a:	2800      	cmp	r0, #0
 801068c:	d035      	beq.n	80106fa <_scanf_i+0x15e>
 801068e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010692:	d124      	bne.n	80106de <_scanf_i+0x142>
 8010694:	0510      	lsls	r0, r2, #20
 8010696:	d522      	bpl.n	80106de <_scanf_i+0x142>
 8010698:	f10b 0b01 	add.w	fp, fp, #1
 801069c:	f1b9 0f00 	cmp.w	r9, #0
 80106a0:	d003      	beq.n	80106aa <_scanf_i+0x10e>
 80106a2:	3301      	adds	r3, #1
 80106a4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80106a8:	60a3      	str	r3, [r4, #8]
 80106aa:	6873      	ldr	r3, [r6, #4]
 80106ac:	3b01      	subs	r3, #1
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	6073      	str	r3, [r6, #4]
 80106b2:	dd1b      	ble.n	80106ec <_scanf_i+0x150>
 80106b4:	6833      	ldr	r3, [r6, #0]
 80106b6:	3301      	adds	r3, #1
 80106b8:	6033      	str	r3, [r6, #0]
 80106ba:	68a3      	ldr	r3, [r4, #8]
 80106bc:	3b01      	subs	r3, #1
 80106be:	60a3      	str	r3, [r4, #8]
 80106c0:	e7d9      	b.n	8010676 <_scanf_i+0xda>
 80106c2:	f1bb 0f02 	cmp.w	fp, #2
 80106c6:	d1ae      	bne.n	8010626 <_scanf_i+0x8a>
 80106c8:	6822      	ldr	r2, [r4, #0]
 80106ca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80106ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80106d2:	d1bf      	bne.n	8010654 <_scanf_i+0xb8>
 80106d4:	2310      	movs	r3, #16
 80106d6:	6063      	str	r3, [r4, #4]
 80106d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80106dc:	e7a2      	b.n	8010624 <_scanf_i+0x88>
 80106de:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80106e2:	6022      	str	r2, [r4, #0]
 80106e4:	780b      	ldrb	r3, [r1, #0]
 80106e6:	f805 3b01 	strb.w	r3, [r5], #1
 80106ea:	e7de      	b.n	80106aa <_scanf_i+0x10e>
 80106ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80106f0:	4631      	mov	r1, r6
 80106f2:	4650      	mov	r0, sl
 80106f4:	4798      	blx	r3
 80106f6:	2800      	cmp	r0, #0
 80106f8:	d0df      	beq.n	80106ba <_scanf_i+0x11e>
 80106fa:	6823      	ldr	r3, [r4, #0]
 80106fc:	05d9      	lsls	r1, r3, #23
 80106fe:	d50d      	bpl.n	801071c <_scanf_i+0x180>
 8010700:	42bd      	cmp	r5, r7
 8010702:	d909      	bls.n	8010718 <_scanf_i+0x17c>
 8010704:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010708:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801070c:	4632      	mov	r2, r6
 801070e:	4650      	mov	r0, sl
 8010710:	4798      	blx	r3
 8010712:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8010716:	464d      	mov	r5, r9
 8010718:	42bd      	cmp	r5, r7
 801071a:	d028      	beq.n	801076e <_scanf_i+0x1d2>
 801071c:	6822      	ldr	r2, [r4, #0]
 801071e:	f012 0210 	ands.w	r2, r2, #16
 8010722:	d113      	bne.n	801074c <_scanf_i+0x1b0>
 8010724:	702a      	strb	r2, [r5, #0]
 8010726:	6863      	ldr	r3, [r4, #4]
 8010728:	9e01      	ldr	r6, [sp, #4]
 801072a:	4639      	mov	r1, r7
 801072c:	4650      	mov	r0, sl
 801072e:	47b0      	blx	r6
 8010730:	f8d8 3000 	ldr.w	r3, [r8]
 8010734:	6821      	ldr	r1, [r4, #0]
 8010736:	1d1a      	adds	r2, r3, #4
 8010738:	f8c8 2000 	str.w	r2, [r8]
 801073c:	f011 0f20 	tst.w	r1, #32
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	d00f      	beq.n	8010764 <_scanf_i+0x1c8>
 8010744:	6018      	str	r0, [r3, #0]
 8010746:	68e3      	ldr	r3, [r4, #12]
 8010748:	3301      	adds	r3, #1
 801074a:	60e3      	str	r3, [r4, #12]
 801074c:	6923      	ldr	r3, [r4, #16]
 801074e:	1bed      	subs	r5, r5, r7
 8010750:	445d      	add	r5, fp
 8010752:	442b      	add	r3, r5
 8010754:	6123      	str	r3, [r4, #16]
 8010756:	2000      	movs	r0, #0
 8010758:	b007      	add	sp, #28
 801075a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801075e:	f04f 0b00 	mov.w	fp, #0
 8010762:	e7ca      	b.n	80106fa <_scanf_i+0x15e>
 8010764:	07ca      	lsls	r2, r1, #31
 8010766:	bf4c      	ite	mi
 8010768:	8018      	strhmi	r0, [r3, #0]
 801076a:	6018      	strpl	r0, [r3, #0]
 801076c:	e7eb      	b.n	8010746 <_scanf_i+0x1aa>
 801076e:	2001      	movs	r0, #1
 8010770:	e7f2      	b.n	8010758 <_scanf_i+0x1bc>
 8010772:	bf00      	nop
 8010774:	08012528 	.word	0x08012528
 8010778:	08011229 	.word	0x08011229
 801077c:	0800ec31 	.word	0x0800ec31
 8010780:	08016825 	.word	0x08016825

08010784 <__sccl>:
 8010784:	b570      	push	{r4, r5, r6, lr}
 8010786:	780b      	ldrb	r3, [r1, #0]
 8010788:	4604      	mov	r4, r0
 801078a:	2b5e      	cmp	r3, #94	; 0x5e
 801078c:	bf0b      	itete	eq
 801078e:	784b      	ldrbeq	r3, [r1, #1]
 8010790:	1c4a      	addne	r2, r1, #1
 8010792:	1c8a      	addeq	r2, r1, #2
 8010794:	2100      	movne	r1, #0
 8010796:	bf08      	it	eq
 8010798:	2101      	moveq	r1, #1
 801079a:	3801      	subs	r0, #1
 801079c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80107a0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80107a4:	42a8      	cmp	r0, r5
 80107a6:	d1fb      	bne.n	80107a0 <__sccl+0x1c>
 80107a8:	b90b      	cbnz	r3, 80107ae <__sccl+0x2a>
 80107aa:	1e50      	subs	r0, r2, #1
 80107ac:	bd70      	pop	{r4, r5, r6, pc}
 80107ae:	f081 0101 	eor.w	r1, r1, #1
 80107b2:	54e1      	strb	r1, [r4, r3]
 80107b4:	4610      	mov	r0, r2
 80107b6:	4602      	mov	r2, r0
 80107b8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80107bc:	2d2d      	cmp	r5, #45	; 0x2d
 80107be:	d005      	beq.n	80107cc <__sccl+0x48>
 80107c0:	2d5d      	cmp	r5, #93	; 0x5d
 80107c2:	d016      	beq.n	80107f2 <__sccl+0x6e>
 80107c4:	2d00      	cmp	r5, #0
 80107c6:	d0f1      	beq.n	80107ac <__sccl+0x28>
 80107c8:	462b      	mov	r3, r5
 80107ca:	e7f2      	b.n	80107b2 <__sccl+0x2e>
 80107cc:	7846      	ldrb	r6, [r0, #1]
 80107ce:	2e5d      	cmp	r6, #93	; 0x5d
 80107d0:	d0fa      	beq.n	80107c8 <__sccl+0x44>
 80107d2:	42b3      	cmp	r3, r6
 80107d4:	dcf8      	bgt.n	80107c8 <__sccl+0x44>
 80107d6:	3002      	adds	r0, #2
 80107d8:	461a      	mov	r2, r3
 80107da:	3201      	adds	r2, #1
 80107dc:	4296      	cmp	r6, r2
 80107de:	54a1      	strb	r1, [r4, r2]
 80107e0:	dcfb      	bgt.n	80107da <__sccl+0x56>
 80107e2:	1af2      	subs	r2, r6, r3
 80107e4:	3a01      	subs	r2, #1
 80107e6:	1c5d      	adds	r5, r3, #1
 80107e8:	42b3      	cmp	r3, r6
 80107ea:	bfa8      	it	ge
 80107ec:	2200      	movge	r2, #0
 80107ee:	18ab      	adds	r3, r5, r2
 80107f0:	e7e1      	b.n	80107b6 <__sccl+0x32>
 80107f2:	4610      	mov	r0, r2
 80107f4:	e7da      	b.n	80107ac <__sccl+0x28>
	...

080107f8 <__sflush_r>:
 80107f8:	898a      	ldrh	r2, [r1, #12]
 80107fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107fe:	4605      	mov	r5, r0
 8010800:	0710      	lsls	r0, r2, #28
 8010802:	460c      	mov	r4, r1
 8010804:	d458      	bmi.n	80108b8 <__sflush_r+0xc0>
 8010806:	684b      	ldr	r3, [r1, #4]
 8010808:	2b00      	cmp	r3, #0
 801080a:	dc05      	bgt.n	8010818 <__sflush_r+0x20>
 801080c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801080e:	2b00      	cmp	r3, #0
 8010810:	dc02      	bgt.n	8010818 <__sflush_r+0x20>
 8010812:	2000      	movs	r0, #0
 8010814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801081a:	2e00      	cmp	r6, #0
 801081c:	d0f9      	beq.n	8010812 <__sflush_r+0x1a>
 801081e:	2300      	movs	r3, #0
 8010820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010824:	682f      	ldr	r7, [r5, #0]
 8010826:	6a21      	ldr	r1, [r4, #32]
 8010828:	602b      	str	r3, [r5, #0]
 801082a:	d032      	beq.n	8010892 <__sflush_r+0x9a>
 801082c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801082e:	89a3      	ldrh	r3, [r4, #12]
 8010830:	075a      	lsls	r2, r3, #29
 8010832:	d505      	bpl.n	8010840 <__sflush_r+0x48>
 8010834:	6863      	ldr	r3, [r4, #4]
 8010836:	1ac0      	subs	r0, r0, r3
 8010838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801083a:	b10b      	cbz	r3, 8010840 <__sflush_r+0x48>
 801083c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801083e:	1ac0      	subs	r0, r0, r3
 8010840:	2300      	movs	r3, #0
 8010842:	4602      	mov	r2, r0
 8010844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010846:	6a21      	ldr	r1, [r4, #32]
 8010848:	4628      	mov	r0, r5
 801084a:	47b0      	blx	r6
 801084c:	1c43      	adds	r3, r0, #1
 801084e:	89a3      	ldrh	r3, [r4, #12]
 8010850:	d106      	bne.n	8010860 <__sflush_r+0x68>
 8010852:	6829      	ldr	r1, [r5, #0]
 8010854:	291d      	cmp	r1, #29
 8010856:	d82b      	bhi.n	80108b0 <__sflush_r+0xb8>
 8010858:	4a29      	ldr	r2, [pc, #164]	; (8010900 <__sflush_r+0x108>)
 801085a:	410a      	asrs	r2, r1
 801085c:	07d6      	lsls	r6, r2, #31
 801085e:	d427      	bmi.n	80108b0 <__sflush_r+0xb8>
 8010860:	2200      	movs	r2, #0
 8010862:	6062      	str	r2, [r4, #4]
 8010864:	04d9      	lsls	r1, r3, #19
 8010866:	6922      	ldr	r2, [r4, #16]
 8010868:	6022      	str	r2, [r4, #0]
 801086a:	d504      	bpl.n	8010876 <__sflush_r+0x7e>
 801086c:	1c42      	adds	r2, r0, #1
 801086e:	d101      	bne.n	8010874 <__sflush_r+0x7c>
 8010870:	682b      	ldr	r3, [r5, #0]
 8010872:	b903      	cbnz	r3, 8010876 <__sflush_r+0x7e>
 8010874:	6560      	str	r0, [r4, #84]	; 0x54
 8010876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010878:	602f      	str	r7, [r5, #0]
 801087a:	2900      	cmp	r1, #0
 801087c:	d0c9      	beq.n	8010812 <__sflush_r+0x1a>
 801087e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010882:	4299      	cmp	r1, r3
 8010884:	d002      	beq.n	801088c <__sflush_r+0x94>
 8010886:	4628      	mov	r0, r5
 8010888:	f7ff f974 	bl	800fb74 <_free_r>
 801088c:	2000      	movs	r0, #0
 801088e:	6360      	str	r0, [r4, #52]	; 0x34
 8010890:	e7c0      	b.n	8010814 <__sflush_r+0x1c>
 8010892:	2301      	movs	r3, #1
 8010894:	4628      	mov	r0, r5
 8010896:	47b0      	blx	r6
 8010898:	1c41      	adds	r1, r0, #1
 801089a:	d1c8      	bne.n	801082e <__sflush_r+0x36>
 801089c:	682b      	ldr	r3, [r5, #0]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d0c5      	beq.n	801082e <__sflush_r+0x36>
 80108a2:	2b1d      	cmp	r3, #29
 80108a4:	d001      	beq.n	80108aa <__sflush_r+0xb2>
 80108a6:	2b16      	cmp	r3, #22
 80108a8:	d101      	bne.n	80108ae <__sflush_r+0xb6>
 80108aa:	602f      	str	r7, [r5, #0]
 80108ac:	e7b1      	b.n	8010812 <__sflush_r+0x1a>
 80108ae:	89a3      	ldrh	r3, [r4, #12]
 80108b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108b4:	81a3      	strh	r3, [r4, #12]
 80108b6:	e7ad      	b.n	8010814 <__sflush_r+0x1c>
 80108b8:	690f      	ldr	r7, [r1, #16]
 80108ba:	2f00      	cmp	r7, #0
 80108bc:	d0a9      	beq.n	8010812 <__sflush_r+0x1a>
 80108be:	0793      	lsls	r3, r2, #30
 80108c0:	680e      	ldr	r6, [r1, #0]
 80108c2:	bf08      	it	eq
 80108c4:	694b      	ldreq	r3, [r1, #20]
 80108c6:	600f      	str	r7, [r1, #0]
 80108c8:	bf18      	it	ne
 80108ca:	2300      	movne	r3, #0
 80108cc:	eba6 0807 	sub.w	r8, r6, r7
 80108d0:	608b      	str	r3, [r1, #8]
 80108d2:	f1b8 0f00 	cmp.w	r8, #0
 80108d6:	dd9c      	ble.n	8010812 <__sflush_r+0x1a>
 80108d8:	6a21      	ldr	r1, [r4, #32]
 80108da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80108dc:	4643      	mov	r3, r8
 80108de:	463a      	mov	r2, r7
 80108e0:	4628      	mov	r0, r5
 80108e2:	47b0      	blx	r6
 80108e4:	2800      	cmp	r0, #0
 80108e6:	dc06      	bgt.n	80108f6 <__sflush_r+0xfe>
 80108e8:	89a3      	ldrh	r3, [r4, #12]
 80108ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108ee:	81a3      	strh	r3, [r4, #12]
 80108f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108f4:	e78e      	b.n	8010814 <__sflush_r+0x1c>
 80108f6:	4407      	add	r7, r0
 80108f8:	eba8 0800 	sub.w	r8, r8, r0
 80108fc:	e7e9      	b.n	80108d2 <__sflush_r+0xda>
 80108fe:	bf00      	nop
 8010900:	dfbffffe 	.word	0xdfbffffe

08010904 <_fflush_r>:
 8010904:	b538      	push	{r3, r4, r5, lr}
 8010906:	690b      	ldr	r3, [r1, #16]
 8010908:	4605      	mov	r5, r0
 801090a:	460c      	mov	r4, r1
 801090c:	b913      	cbnz	r3, 8010914 <_fflush_r+0x10>
 801090e:	2500      	movs	r5, #0
 8010910:	4628      	mov	r0, r5
 8010912:	bd38      	pop	{r3, r4, r5, pc}
 8010914:	b118      	cbz	r0, 801091e <_fflush_r+0x1a>
 8010916:	6a03      	ldr	r3, [r0, #32]
 8010918:	b90b      	cbnz	r3, 801091e <_fflush_r+0x1a>
 801091a:	f7fe f8ef 	bl	800eafc <__sinit>
 801091e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d0f3      	beq.n	801090e <_fflush_r+0xa>
 8010926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010928:	07d0      	lsls	r0, r2, #31
 801092a:	d404      	bmi.n	8010936 <_fflush_r+0x32>
 801092c:	0599      	lsls	r1, r3, #22
 801092e:	d402      	bmi.n	8010936 <_fflush_r+0x32>
 8010930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010932:	f7fe fa76 	bl	800ee22 <__retarget_lock_acquire_recursive>
 8010936:	4628      	mov	r0, r5
 8010938:	4621      	mov	r1, r4
 801093a:	f7ff ff5d 	bl	80107f8 <__sflush_r>
 801093e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010940:	07da      	lsls	r2, r3, #31
 8010942:	4605      	mov	r5, r0
 8010944:	d4e4      	bmi.n	8010910 <_fflush_r+0xc>
 8010946:	89a3      	ldrh	r3, [r4, #12]
 8010948:	059b      	lsls	r3, r3, #22
 801094a:	d4e1      	bmi.n	8010910 <_fflush_r+0xc>
 801094c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801094e:	f7fe fa69 	bl	800ee24 <__retarget_lock_release_recursive>
 8010952:	e7dd      	b.n	8010910 <_fflush_r+0xc>

08010954 <_Balloc>:
 8010954:	b570      	push	{r4, r5, r6, lr}
 8010956:	69c6      	ldr	r6, [r0, #28]
 8010958:	4604      	mov	r4, r0
 801095a:	460d      	mov	r5, r1
 801095c:	b976      	cbnz	r6, 801097c <_Balloc+0x28>
 801095e:	2010      	movs	r0, #16
 8010960:	f7fd fd36 	bl	800e3d0 <malloc>
 8010964:	4602      	mov	r2, r0
 8010966:	61e0      	str	r0, [r4, #28]
 8010968:	b920      	cbnz	r0, 8010974 <_Balloc+0x20>
 801096a:	4b18      	ldr	r3, [pc, #96]	; (80109cc <_Balloc+0x78>)
 801096c:	4818      	ldr	r0, [pc, #96]	; (80109d0 <_Balloc+0x7c>)
 801096e:	216b      	movs	r1, #107	; 0x6b
 8010970:	f7fe fa68 	bl	800ee44 <__assert_func>
 8010974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010978:	6006      	str	r6, [r0, #0]
 801097a:	60c6      	str	r6, [r0, #12]
 801097c:	69e6      	ldr	r6, [r4, #28]
 801097e:	68f3      	ldr	r3, [r6, #12]
 8010980:	b183      	cbz	r3, 80109a4 <_Balloc+0x50>
 8010982:	69e3      	ldr	r3, [r4, #28]
 8010984:	68db      	ldr	r3, [r3, #12]
 8010986:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801098a:	b9b8      	cbnz	r0, 80109bc <_Balloc+0x68>
 801098c:	2101      	movs	r1, #1
 801098e:	fa01 f605 	lsl.w	r6, r1, r5
 8010992:	1d72      	adds	r2, r6, #5
 8010994:	0092      	lsls	r2, r2, #2
 8010996:	4620      	mov	r0, r4
 8010998:	f000 fd83 	bl	80114a2 <_calloc_r>
 801099c:	b160      	cbz	r0, 80109b8 <_Balloc+0x64>
 801099e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80109a2:	e00e      	b.n	80109c2 <_Balloc+0x6e>
 80109a4:	2221      	movs	r2, #33	; 0x21
 80109a6:	2104      	movs	r1, #4
 80109a8:	4620      	mov	r0, r4
 80109aa:	f000 fd7a 	bl	80114a2 <_calloc_r>
 80109ae:	69e3      	ldr	r3, [r4, #28]
 80109b0:	60f0      	str	r0, [r6, #12]
 80109b2:	68db      	ldr	r3, [r3, #12]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d1e4      	bne.n	8010982 <_Balloc+0x2e>
 80109b8:	2000      	movs	r0, #0
 80109ba:	bd70      	pop	{r4, r5, r6, pc}
 80109bc:	6802      	ldr	r2, [r0, #0]
 80109be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80109c2:	2300      	movs	r3, #0
 80109c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80109c8:	e7f7      	b.n	80109ba <_Balloc+0x66>
 80109ca:	bf00      	nop
 80109cc:	08016784 	.word	0x08016784
 80109d0:	08016830 	.word	0x08016830

080109d4 <_Bfree>:
 80109d4:	b570      	push	{r4, r5, r6, lr}
 80109d6:	69c6      	ldr	r6, [r0, #28]
 80109d8:	4605      	mov	r5, r0
 80109da:	460c      	mov	r4, r1
 80109dc:	b976      	cbnz	r6, 80109fc <_Bfree+0x28>
 80109de:	2010      	movs	r0, #16
 80109e0:	f7fd fcf6 	bl	800e3d0 <malloc>
 80109e4:	4602      	mov	r2, r0
 80109e6:	61e8      	str	r0, [r5, #28]
 80109e8:	b920      	cbnz	r0, 80109f4 <_Bfree+0x20>
 80109ea:	4b09      	ldr	r3, [pc, #36]	; (8010a10 <_Bfree+0x3c>)
 80109ec:	4809      	ldr	r0, [pc, #36]	; (8010a14 <_Bfree+0x40>)
 80109ee:	218f      	movs	r1, #143	; 0x8f
 80109f0:	f7fe fa28 	bl	800ee44 <__assert_func>
 80109f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80109f8:	6006      	str	r6, [r0, #0]
 80109fa:	60c6      	str	r6, [r0, #12]
 80109fc:	b13c      	cbz	r4, 8010a0e <_Bfree+0x3a>
 80109fe:	69eb      	ldr	r3, [r5, #28]
 8010a00:	6862      	ldr	r2, [r4, #4]
 8010a02:	68db      	ldr	r3, [r3, #12]
 8010a04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010a08:	6021      	str	r1, [r4, #0]
 8010a0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010a0e:	bd70      	pop	{r4, r5, r6, pc}
 8010a10:	08016784 	.word	0x08016784
 8010a14:	08016830 	.word	0x08016830

08010a18 <__multadd>:
 8010a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a1c:	690d      	ldr	r5, [r1, #16]
 8010a1e:	4607      	mov	r7, r0
 8010a20:	460c      	mov	r4, r1
 8010a22:	461e      	mov	r6, r3
 8010a24:	f101 0c14 	add.w	ip, r1, #20
 8010a28:	2000      	movs	r0, #0
 8010a2a:	f8dc 3000 	ldr.w	r3, [ip]
 8010a2e:	b299      	uxth	r1, r3
 8010a30:	fb02 6101 	mla	r1, r2, r1, r6
 8010a34:	0c1e      	lsrs	r6, r3, #16
 8010a36:	0c0b      	lsrs	r3, r1, #16
 8010a38:	fb02 3306 	mla	r3, r2, r6, r3
 8010a3c:	b289      	uxth	r1, r1
 8010a3e:	3001      	adds	r0, #1
 8010a40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010a44:	4285      	cmp	r5, r0
 8010a46:	f84c 1b04 	str.w	r1, [ip], #4
 8010a4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010a4e:	dcec      	bgt.n	8010a2a <__multadd+0x12>
 8010a50:	b30e      	cbz	r6, 8010a96 <__multadd+0x7e>
 8010a52:	68a3      	ldr	r3, [r4, #8]
 8010a54:	42ab      	cmp	r3, r5
 8010a56:	dc19      	bgt.n	8010a8c <__multadd+0x74>
 8010a58:	6861      	ldr	r1, [r4, #4]
 8010a5a:	4638      	mov	r0, r7
 8010a5c:	3101      	adds	r1, #1
 8010a5e:	f7ff ff79 	bl	8010954 <_Balloc>
 8010a62:	4680      	mov	r8, r0
 8010a64:	b928      	cbnz	r0, 8010a72 <__multadd+0x5a>
 8010a66:	4602      	mov	r2, r0
 8010a68:	4b0c      	ldr	r3, [pc, #48]	; (8010a9c <__multadd+0x84>)
 8010a6a:	480d      	ldr	r0, [pc, #52]	; (8010aa0 <__multadd+0x88>)
 8010a6c:	21ba      	movs	r1, #186	; 0xba
 8010a6e:	f7fe f9e9 	bl	800ee44 <__assert_func>
 8010a72:	6922      	ldr	r2, [r4, #16]
 8010a74:	3202      	adds	r2, #2
 8010a76:	f104 010c 	add.w	r1, r4, #12
 8010a7a:	0092      	lsls	r2, r2, #2
 8010a7c:	300c      	adds	r0, #12
 8010a7e:	f7fe f9d2 	bl	800ee26 <memcpy>
 8010a82:	4621      	mov	r1, r4
 8010a84:	4638      	mov	r0, r7
 8010a86:	f7ff ffa5 	bl	80109d4 <_Bfree>
 8010a8a:	4644      	mov	r4, r8
 8010a8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010a90:	3501      	adds	r5, #1
 8010a92:	615e      	str	r6, [r3, #20]
 8010a94:	6125      	str	r5, [r4, #16]
 8010a96:	4620      	mov	r0, r4
 8010a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a9c:	080167f3 	.word	0x080167f3
 8010aa0:	08016830 	.word	0x08016830

08010aa4 <__hi0bits>:
 8010aa4:	0c03      	lsrs	r3, r0, #16
 8010aa6:	041b      	lsls	r3, r3, #16
 8010aa8:	b9d3      	cbnz	r3, 8010ae0 <__hi0bits+0x3c>
 8010aaa:	0400      	lsls	r0, r0, #16
 8010aac:	2310      	movs	r3, #16
 8010aae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010ab2:	bf04      	itt	eq
 8010ab4:	0200      	lsleq	r0, r0, #8
 8010ab6:	3308      	addeq	r3, #8
 8010ab8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010abc:	bf04      	itt	eq
 8010abe:	0100      	lsleq	r0, r0, #4
 8010ac0:	3304      	addeq	r3, #4
 8010ac2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010ac6:	bf04      	itt	eq
 8010ac8:	0080      	lsleq	r0, r0, #2
 8010aca:	3302      	addeq	r3, #2
 8010acc:	2800      	cmp	r0, #0
 8010ace:	db05      	blt.n	8010adc <__hi0bits+0x38>
 8010ad0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010ad4:	f103 0301 	add.w	r3, r3, #1
 8010ad8:	bf08      	it	eq
 8010ada:	2320      	moveq	r3, #32
 8010adc:	4618      	mov	r0, r3
 8010ade:	4770      	bx	lr
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	e7e4      	b.n	8010aae <__hi0bits+0xa>

08010ae4 <__lo0bits>:
 8010ae4:	6803      	ldr	r3, [r0, #0]
 8010ae6:	f013 0207 	ands.w	r2, r3, #7
 8010aea:	d00c      	beq.n	8010b06 <__lo0bits+0x22>
 8010aec:	07d9      	lsls	r1, r3, #31
 8010aee:	d422      	bmi.n	8010b36 <__lo0bits+0x52>
 8010af0:	079a      	lsls	r2, r3, #30
 8010af2:	bf49      	itett	mi
 8010af4:	085b      	lsrmi	r3, r3, #1
 8010af6:	089b      	lsrpl	r3, r3, #2
 8010af8:	6003      	strmi	r3, [r0, #0]
 8010afa:	2201      	movmi	r2, #1
 8010afc:	bf5c      	itt	pl
 8010afe:	6003      	strpl	r3, [r0, #0]
 8010b00:	2202      	movpl	r2, #2
 8010b02:	4610      	mov	r0, r2
 8010b04:	4770      	bx	lr
 8010b06:	b299      	uxth	r1, r3
 8010b08:	b909      	cbnz	r1, 8010b0e <__lo0bits+0x2a>
 8010b0a:	0c1b      	lsrs	r3, r3, #16
 8010b0c:	2210      	movs	r2, #16
 8010b0e:	b2d9      	uxtb	r1, r3
 8010b10:	b909      	cbnz	r1, 8010b16 <__lo0bits+0x32>
 8010b12:	3208      	adds	r2, #8
 8010b14:	0a1b      	lsrs	r3, r3, #8
 8010b16:	0719      	lsls	r1, r3, #28
 8010b18:	bf04      	itt	eq
 8010b1a:	091b      	lsreq	r3, r3, #4
 8010b1c:	3204      	addeq	r2, #4
 8010b1e:	0799      	lsls	r1, r3, #30
 8010b20:	bf04      	itt	eq
 8010b22:	089b      	lsreq	r3, r3, #2
 8010b24:	3202      	addeq	r2, #2
 8010b26:	07d9      	lsls	r1, r3, #31
 8010b28:	d403      	bmi.n	8010b32 <__lo0bits+0x4e>
 8010b2a:	085b      	lsrs	r3, r3, #1
 8010b2c:	f102 0201 	add.w	r2, r2, #1
 8010b30:	d003      	beq.n	8010b3a <__lo0bits+0x56>
 8010b32:	6003      	str	r3, [r0, #0]
 8010b34:	e7e5      	b.n	8010b02 <__lo0bits+0x1e>
 8010b36:	2200      	movs	r2, #0
 8010b38:	e7e3      	b.n	8010b02 <__lo0bits+0x1e>
 8010b3a:	2220      	movs	r2, #32
 8010b3c:	e7e1      	b.n	8010b02 <__lo0bits+0x1e>
	...

08010b40 <__i2b>:
 8010b40:	b510      	push	{r4, lr}
 8010b42:	460c      	mov	r4, r1
 8010b44:	2101      	movs	r1, #1
 8010b46:	f7ff ff05 	bl	8010954 <_Balloc>
 8010b4a:	4602      	mov	r2, r0
 8010b4c:	b928      	cbnz	r0, 8010b5a <__i2b+0x1a>
 8010b4e:	4b05      	ldr	r3, [pc, #20]	; (8010b64 <__i2b+0x24>)
 8010b50:	4805      	ldr	r0, [pc, #20]	; (8010b68 <__i2b+0x28>)
 8010b52:	f240 1145 	movw	r1, #325	; 0x145
 8010b56:	f7fe f975 	bl	800ee44 <__assert_func>
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	6144      	str	r4, [r0, #20]
 8010b5e:	6103      	str	r3, [r0, #16]
 8010b60:	bd10      	pop	{r4, pc}
 8010b62:	bf00      	nop
 8010b64:	080167f3 	.word	0x080167f3
 8010b68:	08016830 	.word	0x08016830

08010b6c <__multiply>:
 8010b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b70:	4691      	mov	r9, r2
 8010b72:	690a      	ldr	r2, [r1, #16]
 8010b74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	bfb8      	it	lt
 8010b7c:	460b      	movlt	r3, r1
 8010b7e:	460c      	mov	r4, r1
 8010b80:	bfbc      	itt	lt
 8010b82:	464c      	movlt	r4, r9
 8010b84:	4699      	movlt	r9, r3
 8010b86:	6927      	ldr	r7, [r4, #16]
 8010b88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010b8c:	68a3      	ldr	r3, [r4, #8]
 8010b8e:	6861      	ldr	r1, [r4, #4]
 8010b90:	eb07 060a 	add.w	r6, r7, sl
 8010b94:	42b3      	cmp	r3, r6
 8010b96:	b085      	sub	sp, #20
 8010b98:	bfb8      	it	lt
 8010b9a:	3101      	addlt	r1, #1
 8010b9c:	f7ff feda 	bl	8010954 <_Balloc>
 8010ba0:	b930      	cbnz	r0, 8010bb0 <__multiply+0x44>
 8010ba2:	4602      	mov	r2, r0
 8010ba4:	4b44      	ldr	r3, [pc, #272]	; (8010cb8 <__multiply+0x14c>)
 8010ba6:	4845      	ldr	r0, [pc, #276]	; (8010cbc <__multiply+0x150>)
 8010ba8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010bac:	f7fe f94a 	bl	800ee44 <__assert_func>
 8010bb0:	f100 0514 	add.w	r5, r0, #20
 8010bb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010bb8:	462b      	mov	r3, r5
 8010bba:	2200      	movs	r2, #0
 8010bbc:	4543      	cmp	r3, r8
 8010bbe:	d321      	bcc.n	8010c04 <__multiply+0x98>
 8010bc0:	f104 0314 	add.w	r3, r4, #20
 8010bc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010bc8:	f109 0314 	add.w	r3, r9, #20
 8010bcc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010bd0:	9202      	str	r2, [sp, #8]
 8010bd2:	1b3a      	subs	r2, r7, r4
 8010bd4:	3a15      	subs	r2, #21
 8010bd6:	f022 0203 	bic.w	r2, r2, #3
 8010bda:	3204      	adds	r2, #4
 8010bdc:	f104 0115 	add.w	r1, r4, #21
 8010be0:	428f      	cmp	r7, r1
 8010be2:	bf38      	it	cc
 8010be4:	2204      	movcc	r2, #4
 8010be6:	9201      	str	r2, [sp, #4]
 8010be8:	9a02      	ldr	r2, [sp, #8]
 8010bea:	9303      	str	r3, [sp, #12]
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d80c      	bhi.n	8010c0a <__multiply+0x9e>
 8010bf0:	2e00      	cmp	r6, #0
 8010bf2:	dd03      	ble.n	8010bfc <__multiply+0x90>
 8010bf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d05b      	beq.n	8010cb4 <__multiply+0x148>
 8010bfc:	6106      	str	r6, [r0, #16]
 8010bfe:	b005      	add	sp, #20
 8010c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c04:	f843 2b04 	str.w	r2, [r3], #4
 8010c08:	e7d8      	b.n	8010bbc <__multiply+0x50>
 8010c0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8010c0e:	f1ba 0f00 	cmp.w	sl, #0
 8010c12:	d024      	beq.n	8010c5e <__multiply+0xf2>
 8010c14:	f104 0e14 	add.w	lr, r4, #20
 8010c18:	46a9      	mov	r9, r5
 8010c1a:	f04f 0c00 	mov.w	ip, #0
 8010c1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010c22:	f8d9 1000 	ldr.w	r1, [r9]
 8010c26:	fa1f fb82 	uxth.w	fp, r2
 8010c2a:	b289      	uxth	r1, r1
 8010c2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010c30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010c34:	f8d9 2000 	ldr.w	r2, [r9]
 8010c38:	4461      	add	r1, ip
 8010c3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010c3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010c42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010c46:	b289      	uxth	r1, r1
 8010c48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010c4c:	4577      	cmp	r7, lr
 8010c4e:	f849 1b04 	str.w	r1, [r9], #4
 8010c52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010c56:	d8e2      	bhi.n	8010c1e <__multiply+0xb2>
 8010c58:	9a01      	ldr	r2, [sp, #4]
 8010c5a:	f845 c002 	str.w	ip, [r5, r2]
 8010c5e:	9a03      	ldr	r2, [sp, #12]
 8010c60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010c64:	3304      	adds	r3, #4
 8010c66:	f1b9 0f00 	cmp.w	r9, #0
 8010c6a:	d021      	beq.n	8010cb0 <__multiply+0x144>
 8010c6c:	6829      	ldr	r1, [r5, #0]
 8010c6e:	f104 0c14 	add.w	ip, r4, #20
 8010c72:	46ae      	mov	lr, r5
 8010c74:	f04f 0a00 	mov.w	sl, #0
 8010c78:	f8bc b000 	ldrh.w	fp, [ip]
 8010c7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010c80:	fb09 220b 	mla	r2, r9, fp, r2
 8010c84:	4452      	add	r2, sl
 8010c86:	b289      	uxth	r1, r1
 8010c88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010c8c:	f84e 1b04 	str.w	r1, [lr], #4
 8010c90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010c94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010c98:	f8be 1000 	ldrh.w	r1, [lr]
 8010c9c:	fb09 110a 	mla	r1, r9, sl, r1
 8010ca0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010ca4:	4567      	cmp	r7, ip
 8010ca6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010caa:	d8e5      	bhi.n	8010c78 <__multiply+0x10c>
 8010cac:	9a01      	ldr	r2, [sp, #4]
 8010cae:	50a9      	str	r1, [r5, r2]
 8010cb0:	3504      	adds	r5, #4
 8010cb2:	e799      	b.n	8010be8 <__multiply+0x7c>
 8010cb4:	3e01      	subs	r6, #1
 8010cb6:	e79b      	b.n	8010bf0 <__multiply+0x84>
 8010cb8:	080167f3 	.word	0x080167f3
 8010cbc:	08016830 	.word	0x08016830

08010cc0 <__pow5mult>:
 8010cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cc4:	4615      	mov	r5, r2
 8010cc6:	f012 0203 	ands.w	r2, r2, #3
 8010cca:	4606      	mov	r6, r0
 8010ccc:	460f      	mov	r7, r1
 8010cce:	d007      	beq.n	8010ce0 <__pow5mult+0x20>
 8010cd0:	4c25      	ldr	r4, [pc, #148]	; (8010d68 <__pow5mult+0xa8>)
 8010cd2:	3a01      	subs	r2, #1
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010cda:	f7ff fe9d 	bl	8010a18 <__multadd>
 8010cde:	4607      	mov	r7, r0
 8010ce0:	10ad      	asrs	r5, r5, #2
 8010ce2:	d03d      	beq.n	8010d60 <__pow5mult+0xa0>
 8010ce4:	69f4      	ldr	r4, [r6, #28]
 8010ce6:	b97c      	cbnz	r4, 8010d08 <__pow5mult+0x48>
 8010ce8:	2010      	movs	r0, #16
 8010cea:	f7fd fb71 	bl	800e3d0 <malloc>
 8010cee:	4602      	mov	r2, r0
 8010cf0:	61f0      	str	r0, [r6, #28]
 8010cf2:	b928      	cbnz	r0, 8010d00 <__pow5mult+0x40>
 8010cf4:	4b1d      	ldr	r3, [pc, #116]	; (8010d6c <__pow5mult+0xac>)
 8010cf6:	481e      	ldr	r0, [pc, #120]	; (8010d70 <__pow5mult+0xb0>)
 8010cf8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010cfc:	f7fe f8a2 	bl	800ee44 <__assert_func>
 8010d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d04:	6004      	str	r4, [r0, #0]
 8010d06:	60c4      	str	r4, [r0, #12]
 8010d08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d10:	b94c      	cbnz	r4, 8010d26 <__pow5mult+0x66>
 8010d12:	f240 2171 	movw	r1, #625	; 0x271
 8010d16:	4630      	mov	r0, r6
 8010d18:	f7ff ff12 	bl	8010b40 <__i2b>
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010d22:	4604      	mov	r4, r0
 8010d24:	6003      	str	r3, [r0, #0]
 8010d26:	f04f 0900 	mov.w	r9, #0
 8010d2a:	07eb      	lsls	r3, r5, #31
 8010d2c:	d50a      	bpl.n	8010d44 <__pow5mult+0x84>
 8010d2e:	4639      	mov	r1, r7
 8010d30:	4622      	mov	r2, r4
 8010d32:	4630      	mov	r0, r6
 8010d34:	f7ff ff1a 	bl	8010b6c <__multiply>
 8010d38:	4639      	mov	r1, r7
 8010d3a:	4680      	mov	r8, r0
 8010d3c:	4630      	mov	r0, r6
 8010d3e:	f7ff fe49 	bl	80109d4 <_Bfree>
 8010d42:	4647      	mov	r7, r8
 8010d44:	106d      	asrs	r5, r5, #1
 8010d46:	d00b      	beq.n	8010d60 <__pow5mult+0xa0>
 8010d48:	6820      	ldr	r0, [r4, #0]
 8010d4a:	b938      	cbnz	r0, 8010d5c <__pow5mult+0x9c>
 8010d4c:	4622      	mov	r2, r4
 8010d4e:	4621      	mov	r1, r4
 8010d50:	4630      	mov	r0, r6
 8010d52:	f7ff ff0b 	bl	8010b6c <__multiply>
 8010d56:	6020      	str	r0, [r4, #0]
 8010d58:	f8c0 9000 	str.w	r9, [r0]
 8010d5c:	4604      	mov	r4, r0
 8010d5e:	e7e4      	b.n	8010d2a <__pow5mult+0x6a>
 8010d60:	4638      	mov	r0, r7
 8010d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d66:	bf00      	nop
 8010d68:	08016980 	.word	0x08016980
 8010d6c:	08016784 	.word	0x08016784
 8010d70:	08016830 	.word	0x08016830

08010d74 <__lshift>:
 8010d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d78:	460c      	mov	r4, r1
 8010d7a:	6849      	ldr	r1, [r1, #4]
 8010d7c:	6923      	ldr	r3, [r4, #16]
 8010d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010d82:	68a3      	ldr	r3, [r4, #8]
 8010d84:	4607      	mov	r7, r0
 8010d86:	4691      	mov	r9, r2
 8010d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d8c:	f108 0601 	add.w	r6, r8, #1
 8010d90:	42b3      	cmp	r3, r6
 8010d92:	db0b      	blt.n	8010dac <__lshift+0x38>
 8010d94:	4638      	mov	r0, r7
 8010d96:	f7ff fddd 	bl	8010954 <_Balloc>
 8010d9a:	4605      	mov	r5, r0
 8010d9c:	b948      	cbnz	r0, 8010db2 <__lshift+0x3e>
 8010d9e:	4602      	mov	r2, r0
 8010da0:	4b28      	ldr	r3, [pc, #160]	; (8010e44 <__lshift+0xd0>)
 8010da2:	4829      	ldr	r0, [pc, #164]	; (8010e48 <__lshift+0xd4>)
 8010da4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010da8:	f7fe f84c 	bl	800ee44 <__assert_func>
 8010dac:	3101      	adds	r1, #1
 8010dae:	005b      	lsls	r3, r3, #1
 8010db0:	e7ee      	b.n	8010d90 <__lshift+0x1c>
 8010db2:	2300      	movs	r3, #0
 8010db4:	f100 0114 	add.w	r1, r0, #20
 8010db8:	f100 0210 	add.w	r2, r0, #16
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	4553      	cmp	r3, sl
 8010dc0:	db33      	blt.n	8010e2a <__lshift+0xb6>
 8010dc2:	6920      	ldr	r0, [r4, #16]
 8010dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010dc8:	f104 0314 	add.w	r3, r4, #20
 8010dcc:	f019 091f 	ands.w	r9, r9, #31
 8010dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010dd8:	d02b      	beq.n	8010e32 <__lshift+0xbe>
 8010dda:	f1c9 0e20 	rsb	lr, r9, #32
 8010dde:	468a      	mov	sl, r1
 8010de0:	2200      	movs	r2, #0
 8010de2:	6818      	ldr	r0, [r3, #0]
 8010de4:	fa00 f009 	lsl.w	r0, r0, r9
 8010de8:	4310      	orrs	r0, r2
 8010dea:	f84a 0b04 	str.w	r0, [sl], #4
 8010dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8010df2:	459c      	cmp	ip, r3
 8010df4:	fa22 f20e 	lsr.w	r2, r2, lr
 8010df8:	d8f3      	bhi.n	8010de2 <__lshift+0x6e>
 8010dfa:	ebac 0304 	sub.w	r3, ip, r4
 8010dfe:	3b15      	subs	r3, #21
 8010e00:	f023 0303 	bic.w	r3, r3, #3
 8010e04:	3304      	adds	r3, #4
 8010e06:	f104 0015 	add.w	r0, r4, #21
 8010e0a:	4584      	cmp	ip, r0
 8010e0c:	bf38      	it	cc
 8010e0e:	2304      	movcc	r3, #4
 8010e10:	50ca      	str	r2, [r1, r3]
 8010e12:	b10a      	cbz	r2, 8010e18 <__lshift+0xa4>
 8010e14:	f108 0602 	add.w	r6, r8, #2
 8010e18:	3e01      	subs	r6, #1
 8010e1a:	4638      	mov	r0, r7
 8010e1c:	612e      	str	r6, [r5, #16]
 8010e1e:	4621      	mov	r1, r4
 8010e20:	f7ff fdd8 	bl	80109d4 <_Bfree>
 8010e24:	4628      	mov	r0, r5
 8010e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010e2e:	3301      	adds	r3, #1
 8010e30:	e7c5      	b.n	8010dbe <__lshift+0x4a>
 8010e32:	3904      	subs	r1, #4
 8010e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e38:	f841 2f04 	str.w	r2, [r1, #4]!
 8010e3c:	459c      	cmp	ip, r3
 8010e3e:	d8f9      	bhi.n	8010e34 <__lshift+0xc0>
 8010e40:	e7ea      	b.n	8010e18 <__lshift+0xa4>
 8010e42:	bf00      	nop
 8010e44:	080167f3 	.word	0x080167f3
 8010e48:	08016830 	.word	0x08016830

08010e4c <__mcmp>:
 8010e4c:	b530      	push	{r4, r5, lr}
 8010e4e:	6902      	ldr	r2, [r0, #16]
 8010e50:	690c      	ldr	r4, [r1, #16]
 8010e52:	1b12      	subs	r2, r2, r4
 8010e54:	d10e      	bne.n	8010e74 <__mcmp+0x28>
 8010e56:	f100 0314 	add.w	r3, r0, #20
 8010e5a:	3114      	adds	r1, #20
 8010e5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010e60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010e64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010e68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010e6c:	42a5      	cmp	r5, r4
 8010e6e:	d003      	beq.n	8010e78 <__mcmp+0x2c>
 8010e70:	d305      	bcc.n	8010e7e <__mcmp+0x32>
 8010e72:	2201      	movs	r2, #1
 8010e74:	4610      	mov	r0, r2
 8010e76:	bd30      	pop	{r4, r5, pc}
 8010e78:	4283      	cmp	r3, r0
 8010e7a:	d3f3      	bcc.n	8010e64 <__mcmp+0x18>
 8010e7c:	e7fa      	b.n	8010e74 <__mcmp+0x28>
 8010e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e82:	e7f7      	b.n	8010e74 <__mcmp+0x28>

08010e84 <__mdiff>:
 8010e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e88:	460c      	mov	r4, r1
 8010e8a:	4606      	mov	r6, r0
 8010e8c:	4611      	mov	r1, r2
 8010e8e:	4620      	mov	r0, r4
 8010e90:	4690      	mov	r8, r2
 8010e92:	f7ff ffdb 	bl	8010e4c <__mcmp>
 8010e96:	1e05      	subs	r5, r0, #0
 8010e98:	d110      	bne.n	8010ebc <__mdiff+0x38>
 8010e9a:	4629      	mov	r1, r5
 8010e9c:	4630      	mov	r0, r6
 8010e9e:	f7ff fd59 	bl	8010954 <_Balloc>
 8010ea2:	b930      	cbnz	r0, 8010eb2 <__mdiff+0x2e>
 8010ea4:	4b3a      	ldr	r3, [pc, #232]	; (8010f90 <__mdiff+0x10c>)
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	f240 2137 	movw	r1, #567	; 0x237
 8010eac:	4839      	ldr	r0, [pc, #228]	; (8010f94 <__mdiff+0x110>)
 8010eae:	f7fd ffc9 	bl	800ee44 <__assert_func>
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010eb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ebc:	bfa4      	itt	ge
 8010ebe:	4643      	movge	r3, r8
 8010ec0:	46a0      	movge	r8, r4
 8010ec2:	4630      	mov	r0, r6
 8010ec4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010ec8:	bfa6      	itte	ge
 8010eca:	461c      	movge	r4, r3
 8010ecc:	2500      	movge	r5, #0
 8010ece:	2501      	movlt	r5, #1
 8010ed0:	f7ff fd40 	bl	8010954 <_Balloc>
 8010ed4:	b920      	cbnz	r0, 8010ee0 <__mdiff+0x5c>
 8010ed6:	4b2e      	ldr	r3, [pc, #184]	; (8010f90 <__mdiff+0x10c>)
 8010ed8:	4602      	mov	r2, r0
 8010eda:	f240 2145 	movw	r1, #581	; 0x245
 8010ede:	e7e5      	b.n	8010eac <__mdiff+0x28>
 8010ee0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ee4:	6926      	ldr	r6, [r4, #16]
 8010ee6:	60c5      	str	r5, [r0, #12]
 8010ee8:	f104 0914 	add.w	r9, r4, #20
 8010eec:	f108 0514 	add.w	r5, r8, #20
 8010ef0:	f100 0e14 	add.w	lr, r0, #20
 8010ef4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010ef8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010efc:	f108 0210 	add.w	r2, r8, #16
 8010f00:	46f2      	mov	sl, lr
 8010f02:	2100      	movs	r1, #0
 8010f04:	f859 3b04 	ldr.w	r3, [r9], #4
 8010f08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010f0c:	fa11 f88b 	uxtah	r8, r1, fp
 8010f10:	b299      	uxth	r1, r3
 8010f12:	0c1b      	lsrs	r3, r3, #16
 8010f14:	eba8 0801 	sub.w	r8, r8, r1
 8010f18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010f1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010f20:	fa1f f888 	uxth.w	r8, r8
 8010f24:	1419      	asrs	r1, r3, #16
 8010f26:	454e      	cmp	r6, r9
 8010f28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010f2c:	f84a 3b04 	str.w	r3, [sl], #4
 8010f30:	d8e8      	bhi.n	8010f04 <__mdiff+0x80>
 8010f32:	1b33      	subs	r3, r6, r4
 8010f34:	3b15      	subs	r3, #21
 8010f36:	f023 0303 	bic.w	r3, r3, #3
 8010f3a:	3304      	adds	r3, #4
 8010f3c:	3415      	adds	r4, #21
 8010f3e:	42a6      	cmp	r6, r4
 8010f40:	bf38      	it	cc
 8010f42:	2304      	movcc	r3, #4
 8010f44:	441d      	add	r5, r3
 8010f46:	4473      	add	r3, lr
 8010f48:	469e      	mov	lr, r3
 8010f4a:	462e      	mov	r6, r5
 8010f4c:	4566      	cmp	r6, ip
 8010f4e:	d30e      	bcc.n	8010f6e <__mdiff+0xea>
 8010f50:	f10c 0203 	add.w	r2, ip, #3
 8010f54:	1b52      	subs	r2, r2, r5
 8010f56:	f022 0203 	bic.w	r2, r2, #3
 8010f5a:	3d03      	subs	r5, #3
 8010f5c:	45ac      	cmp	ip, r5
 8010f5e:	bf38      	it	cc
 8010f60:	2200      	movcc	r2, #0
 8010f62:	4413      	add	r3, r2
 8010f64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010f68:	b17a      	cbz	r2, 8010f8a <__mdiff+0x106>
 8010f6a:	6107      	str	r7, [r0, #16]
 8010f6c:	e7a4      	b.n	8010eb8 <__mdiff+0x34>
 8010f6e:	f856 8b04 	ldr.w	r8, [r6], #4
 8010f72:	fa11 f288 	uxtah	r2, r1, r8
 8010f76:	1414      	asrs	r4, r2, #16
 8010f78:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010f7c:	b292      	uxth	r2, r2
 8010f7e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010f82:	f84e 2b04 	str.w	r2, [lr], #4
 8010f86:	1421      	asrs	r1, r4, #16
 8010f88:	e7e0      	b.n	8010f4c <__mdiff+0xc8>
 8010f8a:	3f01      	subs	r7, #1
 8010f8c:	e7ea      	b.n	8010f64 <__mdiff+0xe0>
 8010f8e:	bf00      	nop
 8010f90:	080167f3 	.word	0x080167f3
 8010f94:	08016830 	.word	0x08016830

08010f98 <__d2b>:
 8010f98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f9c:	460f      	mov	r7, r1
 8010f9e:	2101      	movs	r1, #1
 8010fa0:	ec59 8b10 	vmov	r8, r9, d0
 8010fa4:	4616      	mov	r6, r2
 8010fa6:	f7ff fcd5 	bl	8010954 <_Balloc>
 8010faa:	4604      	mov	r4, r0
 8010fac:	b930      	cbnz	r0, 8010fbc <__d2b+0x24>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	4b24      	ldr	r3, [pc, #144]	; (8011044 <__d2b+0xac>)
 8010fb2:	4825      	ldr	r0, [pc, #148]	; (8011048 <__d2b+0xb0>)
 8010fb4:	f240 310f 	movw	r1, #783	; 0x30f
 8010fb8:	f7fd ff44 	bl	800ee44 <__assert_func>
 8010fbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010fc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010fc4:	bb2d      	cbnz	r5, 8011012 <__d2b+0x7a>
 8010fc6:	9301      	str	r3, [sp, #4]
 8010fc8:	f1b8 0300 	subs.w	r3, r8, #0
 8010fcc:	d026      	beq.n	801101c <__d2b+0x84>
 8010fce:	4668      	mov	r0, sp
 8010fd0:	9300      	str	r3, [sp, #0]
 8010fd2:	f7ff fd87 	bl	8010ae4 <__lo0bits>
 8010fd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010fda:	b1e8      	cbz	r0, 8011018 <__d2b+0x80>
 8010fdc:	f1c0 0320 	rsb	r3, r0, #32
 8010fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8010fe4:	430b      	orrs	r3, r1
 8010fe6:	40c2      	lsrs	r2, r0
 8010fe8:	6163      	str	r3, [r4, #20]
 8010fea:	9201      	str	r2, [sp, #4]
 8010fec:	9b01      	ldr	r3, [sp, #4]
 8010fee:	61a3      	str	r3, [r4, #24]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	bf14      	ite	ne
 8010ff4:	2202      	movne	r2, #2
 8010ff6:	2201      	moveq	r2, #1
 8010ff8:	6122      	str	r2, [r4, #16]
 8010ffa:	b1bd      	cbz	r5, 801102c <__d2b+0x94>
 8010ffc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011000:	4405      	add	r5, r0
 8011002:	603d      	str	r5, [r7, #0]
 8011004:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011008:	6030      	str	r0, [r6, #0]
 801100a:	4620      	mov	r0, r4
 801100c:	b003      	add	sp, #12
 801100e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011016:	e7d6      	b.n	8010fc6 <__d2b+0x2e>
 8011018:	6161      	str	r1, [r4, #20]
 801101a:	e7e7      	b.n	8010fec <__d2b+0x54>
 801101c:	a801      	add	r0, sp, #4
 801101e:	f7ff fd61 	bl	8010ae4 <__lo0bits>
 8011022:	9b01      	ldr	r3, [sp, #4]
 8011024:	6163      	str	r3, [r4, #20]
 8011026:	3020      	adds	r0, #32
 8011028:	2201      	movs	r2, #1
 801102a:	e7e5      	b.n	8010ff8 <__d2b+0x60>
 801102c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011030:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011034:	6038      	str	r0, [r7, #0]
 8011036:	6918      	ldr	r0, [r3, #16]
 8011038:	f7ff fd34 	bl	8010aa4 <__hi0bits>
 801103c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011040:	e7e2      	b.n	8011008 <__d2b+0x70>
 8011042:	bf00      	nop
 8011044:	080167f3 	.word	0x080167f3
 8011048:	08016830 	.word	0x08016830

0801104c <fiprintf>:
 801104c:	b40e      	push	{r1, r2, r3}
 801104e:	b503      	push	{r0, r1, lr}
 8011050:	4601      	mov	r1, r0
 8011052:	ab03      	add	r3, sp, #12
 8011054:	4805      	ldr	r0, [pc, #20]	; (801106c <fiprintf+0x20>)
 8011056:	f853 2b04 	ldr.w	r2, [r3], #4
 801105a:	6800      	ldr	r0, [r0, #0]
 801105c:	9301      	str	r3, [sp, #4]
 801105e:	f7ff f929 	bl	80102b4 <_vfiprintf_r>
 8011062:	b002      	add	sp, #8
 8011064:	f85d eb04 	ldr.w	lr, [sp], #4
 8011068:	b003      	add	sp, #12
 801106a:	4770      	bx	lr
 801106c:	2000009c 	.word	0x2000009c

08011070 <__submore>:
 8011070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011074:	460c      	mov	r4, r1
 8011076:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801107c:	4299      	cmp	r1, r3
 801107e:	d11d      	bne.n	80110bc <__submore+0x4c>
 8011080:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011084:	f7fd f9cc 	bl	800e420 <_malloc_r>
 8011088:	b918      	cbnz	r0, 8011092 <__submore+0x22>
 801108a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801108e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011096:	63a3      	str	r3, [r4, #56]	; 0x38
 8011098:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801109c:	6360      	str	r0, [r4, #52]	; 0x34
 801109e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80110a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80110a6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80110aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80110ae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80110b2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80110b6:	6020      	str	r0, [r4, #0]
 80110b8:	2000      	movs	r0, #0
 80110ba:	e7e8      	b.n	801108e <__submore+0x1e>
 80110bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80110be:	0077      	lsls	r7, r6, #1
 80110c0:	463a      	mov	r2, r7
 80110c2:	f000 f80f 	bl	80110e4 <_realloc_r>
 80110c6:	4605      	mov	r5, r0
 80110c8:	2800      	cmp	r0, #0
 80110ca:	d0de      	beq.n	801108a <__submore+0x1a>
 80110cc:	eb00 0806 	add.w	r8, r0, r6
 80110d0:	4601      	mov	r1, r0
 80110d2:	4632      	mov	r2, r6
 80110d4:	4640      	mov	r0, r8
 80110d6:	f7fd fea6 	bl	800ee26 <memcpy>
 80110da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80110de:	f8c4 8000 	str.w	r8, [r4]
 80110e2:	e7e9      	b.n	80110b8 <__submore+0x48>

080110e4 <_realloc_r>:
 80110e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110e8:	4680      	mov	r8, r0
 80110ea:	4614      	mov	r4, r2
 80110ec:	460e      	mov	r6, r1
 80110ee:	b921      	cbnz	r1, 80110fa <_realloc_r+0x16>
 80110f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110f4:	4611      	mov	r1, r2
 80110f6:	f7fd b993 	b.w	800e420 <_malloc_r>
 80110fa:	b92a      	cbnz	r2, 8011108 <_realloc_r+0x24>
 80110fc:	f7fe fd3a 	bl	800fb74 <_free_r>
 8011100:	4625      	mov	r5, r4
 8011102:	4628      	mov	r0, r5
 8011104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011108:	f000 f9f3 	bl	80114f2 <_malloc_usable_size_r>
 801110c:	4284      	cmp	r4, r0
 801110e:	4607      	mov	r7, r0
 8011110:	d802      	bhi.n	8011118 <_realloc_r+0x34>
 8011112:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011116:	d812      	bhi.n	801113e <_realloc_r+0x5a>
 8011118:	4621      	mov	r1, r4
 801111a:	4640      	mov	r0, r8
 801111c:	f7fd f980 	bl	800e420 <_malloc_r>
 8011120:	4605      	mov	r5, r0
 8011122:	2800      	cmp	r0, #0
 8011124:	d0ed      	beq.n	8011102 <_realloc_r+0x1e>
 8011126:	42bc      	cmp	r4, r7
 8011128:	4622      	mov	r2, r4
 801112a:	4631      	mov	r1, r6
 801112c:	bf28      	it	cs
 801112e:	463a      	movcs	r2, r7
 8011130:	f7fd fe79 	bl	800ee26 <memcpy>
 8011134:	4631      	mov	r1, r6
 8011136:	4640      	mov	r0, r8
 8011138:	f7fe fd1c 	bl	800fb74 <_free_r>
 801113c:	e7e1      	b.n	8011102 <_realloc_r+0x1e>
 801113e:	4635      	mov	r5, r6
 8011140:	e7df      	b.n	8011102 <_realloc_r+0x1e>
	...

08011144 <_strtoul_l.constprop.0>:
 8011144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011148:	4f36      	ldr	r7, [pc, #216]	; (8011224 <_strtoul_l.constprop.0+0xe0>)
 801114a:	4686      	mov	lr, r0
 801114c:	460d      	mov	r5, r1
 801114e:	4628      	mov	r0, r5
 8011150:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011154:	5d3e      	ldrb	r6, [r7, r4]
 8011156:	f016 0608 	ands.w	r6, r6, #8
 801115a:	d1f8      	bne.n	801114e <_strtoul_l.constprop.0+0xa>
 801115c:	2c2d      	cmp	r4, #45	; 0x2d
 801115e:	d130      	bne.n	80111c2 <_strtoul_l.constprop.0+0x7e>
 8011160:	782c      	ldrb	r4, [r5, #0]
 8011162:	2601      	movs	r6, #1
 8011164:	1c85      	adds	r5, r0, #2
 8011166:	2b00      	cmp	r3, #0
 8011168:	d057      	beq.n	801121a <_strtoul_l.constprop.0+0xd6>
 801116a:	2b10      	cmp	r3, #16
 801116c:	d109      	bne.n	8011182 <_strtoul_l.constprop.0+0x3e>
 801116e:	2c30      	cmp	r4, #48	; 0x30
 8011170:	d107      	bne.n	8011182 <_strtoul_l.constprop.0+0x3e>
 8011172:	7828      	ldrb	r0, [r5, #0]
 8011174:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011178:	2858      	cmp	r0, #88	; 0x58
 801117a:	d149      	bne.n	8011210 <_strtoul_l.constprop.0+0xcc>
 801117c:	786c      	ldrb	r4, [r5, #1]
 801117e:	2310      	movs	r3, #16
 8011180:	3502      	adds	r5, #2
 8011182:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011186:	2700      	movs	r7, #0
 8011188:	fbb8 f8f3 	udiv	r8, r8, r3
 801118c:	fb03 f908 	mul.w	r9, r3, r8
 8011190:	ea6f 0909 	mvn.w	r9, r9
 8011194:	4638      	mov	r0, r7
 8011196:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801119a:	f1bc 0f09 	cmp.w	ip, #9
 801119e:	d815      	bhi.n	80111cc <_strtoul_l.constprop.0+0x88>
 80111a0:	4664      	mov	r4, ip
 80111a2:	42a3      	cmp	r3, r4
 80111a4:	dd23      	ble.n	80111ee <_strtoul_l.constprop.0+0xaa>
 80111a6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80111aa:	d007      	beq.n	80111bc <_strtoul_l.constprop.0+0x78>
 80111ac:	4580      	cmp	r8, r0
 80111ae:	d31b      	bcc.n	80111e8 <_strtoul_l.constprop.0+0xa4>
 80111b0:	d101      	bne.n	80111b6 <_strtoul_l.constprop.0+0x72>
 80111b2:	45a1      	cmp	r9, r4
 80111b4:	db18      	blt.n	80111e8 <_strtoul_l.constprop.0+0xa4>
 80111b6:	fb00 4003 	mla	r0, r0, r3, r4
 80111ba:	2701      	movs	r7, #1
 80111bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111c0:	e7e9      	b.n	8011196 <_strtoul_l.constprop.0+0x52>
 80111c2:	2c2b      	cmp	r4, #43	; 0x2b
 80111c4:	bf04      	itt	eq
 80111c6:	782c      	ldrbeq	r4, [r5, #0]
 80111c8:	1c85      	addeq	r5, r0, #2
 80111ca:	e7cc      	b.n	8011166 <_strtoul_l.constprop.0+0x22>
 80111cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80111d0:	f1bc 0f19 	cmp.w	ip, #25
 80111d4:	d801      	bhi.n	80111da <_strtoul_l.constprop.0+0x96>
 80111d6:	3c37      	subs	r4, #55	; 0x37
 80111d8:	e7e3      	b.n	80111a2 <_strtoul_l.constprop.0+0x5e>
 80111da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80111de:	f1bc 0f19 	cmp.w	ip, #25
 80111e2:	d804      	bhi.n	80111ee <_strtoul_l.constprop.0+0xaa>
 80111e4:	3c57      	subs	r4, #87	; 0x57
 80111e6:	e7dc      	b.n	80111a2 <_strtoul_l.constprop.0+0x5e>
 80111e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80111ec:	e7e6      	b.n	80111bc <_strtoul_l.constprop.0+0x78>
 80111ee:	1c7b      	adds	r3, r7, #1
 80111f0:	d106      	bne.n	8011200 <_strtoul_l.constprop.0+0xbc>
 80111f2:	2322      	movs	r3, #34	; 0x22
 80111f4:	f8ce 3000 	str.w	r3, [lr]
 80111f8:	4638      	mov	r0, r7
 80111fa:	b932      	cbnz	r2, 801120a <_strtoul_l.constprop.0+0xc6>
 80111fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011200:	b106      	cbz	r6, 8011204 <_strtoul_l.constprop.0+0xc0>
 8011202:	4240      	negs	r0, r0
 8011204:	2a00      	cmp	r2, #0
 8011206:	d0f9      	beq.n	80111fc <_strtoul_l.constprop.0+0xb8>
 8011208:	b107      	cbz	r7, 801120c <_strtoul_l.constprop.0+0xc8>
 801120a:	1e69      	subs	r1, r5, #1
 801120c:	6011      	str	r1, [r2, #0]
 801120e:	e7f5      	b.n	80111fc <_strtoul_l.constprop.0+0xb8>
 8011210:	2430      	movs	r4, #48	; 0x30
 8011212:	2b00      	cmp	r3, #0
 8011214:	d1b5      	bne.n	8011182 <_strtoul_l.constprop.0+0x3e>
 8011216:	2308      	movs	r3, #8
 8011218:	e7b3      	b.n	8011182 <_strtoul_l.constprop.0+0x3e>
 801121a:	2c30      	cmp	r4, #48	; 0x30
 801121c:	d0a9      	beq.n	8011172 <_strtoul_l.constprop.0+0x2e>
 801121e:	230a      	movs	r3, #10
 8011220:	e7af      	b.n	8011182 <_strtoul_l.constprop.0+0x3e>
 8011222:	bf00      	nop
 8011224:	0801663b 	.word	0x0801663b

08011228 <_strtoul_r>:
 8011228:	f7ff bf8c 	b.w	8011144 <_strtoul_l.constprop.0>

0801122c <__swbuf_r>:
 801122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801122e:	460e      	mov	r6, r1
 8011230:	4614      	mov	r4, r2
 8011232:	4605      	mov	r5, r0
 8011234:	b118      	cbz	r0, 801123e <__swbuf_r+0x12>
 8011236:	6a03      	ldr	r3, [r0, #32]
 8011238:	b90b      	cbnz	r3, 801123e <__swbuf_r+0x12>
 801123a:	f7fd fc5f 	bl	800eafc <__sinit>
 801123e:	69a3      	ldr	r3, [r4, #24]
 8011240:	60a3      	str	r3, [r4, #8]
 8011242:	89a3      	ldrh	r3, [r4, #12]
 8011244:	071a      	lsls	r2, r3, #28
 8011246:	d525      	bpl.n	8011294 <__swbuf_r+0x68>
 8011248:	6923      	ldr	r3, [r4, #16]
 801124a:	b31b      	cbz	r3, 8011294 <__swbuf_r+0x68>
 801124c:	6823      	ldr	r3, [r4, #0]
 801124e:	6922      	ldr	r2, [r4, #16]
 8011250:	1a98      	subs	r0, r3, r2
 8011252:	6963      	ldr	r3, [r4, #20]
 8011254:	b2f6      	uxtb	r6, r6
 8011256:	4283      	cmp	r3, r0
 8011258:	4637      	mov	r7, r6
 801125a:	dc04      	bgt.n	8011266 <__swbuf_r+0x3a>
 801125c:	4621      	mov	r1, r4
 801125e:	4628      	mov	r0, r5
 8011260:	f7ff fb50 	bl	8010904 <_fflush_r>
 8011264:	b9e0      	cbnz	r0, 80112a0 <__swbuf_r+0x74>
 8011266:	68a3      	ldr	r3, [r4, #8]
 8011268:	3b01      	subs	r3, #1
 801126a:	60a3      	str	r3, [r4, #8]
 801126c:	6823      	ldr	r3, [r4, #0]
 801126e:	1c5a      	adds	r2, r3, #1
 8011270:	6022      	str	r2, [r4, #0]
 8011272:	701e      	strb	r6, [r3, #0]
 8011274:	6962      	ldr	r2, [r4, #20]
 8011276:	1c43      	adds	r3, r0, #1
 8011278:	429a      	cmp	r2, r3
 801127a:	d004      	beq.n	8011286 <__swbuf_r+0x5a>
 801127c:	89a3      	ldrh	r3, [r4, #12]
 801127e:	07db      	lsls	r3, r3, #31
 8011280:	d506      	bpl.n	8011290 <__swbuf_r+0x64>
 8011282:	2e0a      	cmp	r6, #10
 8011284:	d104      	bne.n	8011290 <__swbuf_r+0x64>
 8011286:	4621      	mov	r1, r4
 8011288:	4628      	mov	r0, r5
 801128a:	f7ff fb3b 	bl	8010904 <_fflush_r>
 801128e:	b938      	cbnz	r0, 80112a0 <__swbuf_r+0x74>
 8011290:	4638      	mov	r0, r7
 8011292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011294:	4621      	mov	r1, r4
 8011296:	4628      	mov	r0, r5
 8011298:	f000 f806 	bl	80112a8 <__swsetup_r>
 801129c:	2800      	cmp	r0, #0
 801129e:	d0d5      	beq.n	801124c <__swbuf_r+0x20>
 80112a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80112a4:	e7f4      	b.n	8011290 <__swbuf_r+0x64>
	...

080112a8 <__swsetup_r>:
 80112a8:	b538      	push	{r3, r4, r5, lr}
 80112aa:	4b2a      	ldr	r3, [pc, #168]	; (8011354 <__swsetup_r+0xac>)
 80112ac:	4605      	mov	r5, r0
 80112ae:	6818      	ldr	r0, [r3, #0]
 80112b0:	460c      	mov	r4, r1
 80112b2:	b118      	cbz	r0, 80112bc <__swsetup_r+0x14>
 80112b4:	6a03      	ldr	r3, [r0, #32]
 80112b6:	b90b      	cbnz	r3, 80112bc <__swsetup_r+0x14>
 80112b8:	f7fd fc20 	bl	800eafc <__sinit>
 80112bc:	89a3      	ldrh	r3, [r4, #12]
 80112be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112c2:	0718      	lsls	r0, r3, #28
 80112c4:	d422      	bmi.n	801130c <__swsetup_r+0x64>
 80112c6:	06d9      	lsls	r1, r3, #27
 80112c8:	d407      	bmi.n	80112da <__swsetup_r+0x32>
 80112ca:	2309      	movs	r3, #9
 80112cc:	602b      	str	r3, [r5, #0]
 80112ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80112d2:	81a3      	strh	r3, [r4, #12]
 80112d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112d8:	e034      	b.n	8011344 <__swsetup_r+0x9c>
 80112da:	0758      	lsls	r0, r3, #29
 80112dc:	d512      	bpl.n	8011304 <__swsetup_r+0x5c>
 80112de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112e0:	b141      	cbz	r1, 80112f4 <__swsetup_r+0x4c>
 80112e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112e6:	4299      	cmp	r1, r3
 80112e8:	d002      	beq.n	80112f0 <__swsetup_r+0x48>
 80112ea:	4628      	mov	r0, r5
 80112ec:	f7fe fc42 	bl	800fb74 <_free_r>
 80112f0:	2300      	movs	r3, #0
 80112f2:	6363      	str	r3, [r4, #52]	; 0x34
 80112f4:	89a3      	ldrh	r3, [r4, #12]
 80112f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80112fa:	81a3      	strh	r3, [r4, #12]
 80112fc:	2300      	movs	r3, #0
 80112fe:	6063      	str	r3, [r4, #4]
 8011300:	6923      	ldr	r3, [r4, #16]
 8011302:	6023      	str	r3, [r4, #0]
 8011304:	89a3      	ldrh	r3, [r4, #12]
 8011306:	f043 0308 	orr.w	r3, r3, #8
 801130a:	81a3      	strh	r3, [r4, #12]
 801130c:	6923      	ldr	r3, [r4, #16]
 801130e:	b94b      	cbnz	r3, 8011324 <__swsetup_r+0x7c>
 8011310:	89a3      	ldrh	r3, [r4, #12]
 8011312:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801131a:	d003      	beq.n	8011324 <__swsetup_r+0x7c>
 801131c:	4621      	mov	r1, r4
 801131e:	4628      	mov	r0, r5
 8011320:	f000 f840 	bl	80113a4 <__smakebuf_r>
 8011324:	89a0      	ldrh	r0, [r4, #12]
 8011326:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801132a:	f010 0301 	ands.w	r3, r0, #1
 801132e:	d00a      	beq.n	8011346 <__swsetup_r+0x9e>
 8011330:	2300      	movs	r3, #0
 8011332:	60a3      	str	r3, [r4, #8]
 8011334:	6963      	ldr	r3, [r4, #20]
 8011336:	425b      	negs	r3, r3
 8011338:	61a3      	str	r3, [r4, #24]
 801133a:	6923      	ldr	r3, [r4, #16]
 801133c:	b943      	cbnz	r3, 8011350 <__swsetup_r+0xa8>
 801133e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011342:	d1c4      	bne.n	80112ce <__swsetup_r+0x26>
 8011344:	bd38      	pop	{r3, r4, r5, pc}
 8011346:	0781      	lsls	r1, r0, #30
 8011348:	bf58      	it	pl
 801134a:	6963      	ldrpl	r3, [r4, #20]
 801134c:	60a3      	str	r3, [r4, #8]
 801134e:	e7f4      	b.n	801133a <__swsetup_r+0x92>
 8011350:	2000      	movs	r0, #0
 8011352:	e7f7      	b.n	8011344 <__swsetup_r+0x9c>
 8011354:	2000009c 	.word	0x2000009c

08011358 <__swhatbuf_r>:
 8011358:	b570      	push	{r4, r5, r6, lr}
 801135a:	460c      	mov	r4, r1
 801135c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011360:	2900      	cmp	r1, #0
 8011362:	b096      	sub	sp, #88	; 0x58
 8011364:	4615      	mov	r5, r2
 8011366:	461e      	mov	r6, r3
 8011368:	da0d      	bge.n	8011386 <__swhatbuf_r+0x2e>
 801136a:	89a3      	ldrh	r3, [r4, #12]
 801136c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011370:	f04f 0100 	mov.w	r1, #0
 8011374:	bf0c      	ite	eq
 8011376:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801137a:	2340      	movne	r3, #64	; 0x40
 801137c:	2000      	movs	r0, #0
 801137e:	6031      	str	r1, [r6, #0]
 8011380:	602b      	str	r3, [r5, #0]
 8011382:	b016      	add	sp, #88	; 0x58
 8011384:	bd70      	pop	{r4, r5, r6, pc}
 8011386:	466a      	mov	r2, sp
 8011388:	f000 f862 	bl	8011450 <_fstat_r>
 801138c:	2800      	cmp	r0, #0
 801138e:	dbec      	blt.n	801136a <__swhatbuf_r+0x12>
 8011390:	9901      	ldr	r1, [sp, #4]
 8011392:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011396:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801139a:	4259      	negs	r1, r3
 801139c:	4159      	adcs	r1, r3
 801139e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113a2:	e7eb      	b.n	801137c <__swhatbuf_r+0x24>

080113a4 <__smakebuf_r>:
 80113a4:	898b      	ldrh	r3, [r1, #12]
 80113a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113a8:	079d      	lsls	r5, r3, #30
 80113aa:	4606      	mov	r6, r0
 80113ac:	460c      	mov	r4, r1
 80113ae:	d507      	bpl.n	80113c0 <__smakebuf_r+0x1c>
 80113b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113b4:	6023      	str	r3, [r4, #0]
 80113b6:	6123      	str	r3, [r4, #16]
 80113b8:	2301      	movs	r3, #1
 80113ba:	6163      	str	r3, [r4, #20]
 80113bc:	b002      	add	sp, #8
 80113be:	bd70      	pop	{r4, r5, r6, pc}
 80113c0:	ab01      	add	r3, sp, #4
 80113c2:	466a      	mov	r2, sp
 80113c4:	f7ff ffc8 	bl	8011358 <__swhatbuf_r>
 80113c8:	9900      	ldr	r1, [sp, #0]
 80113ca:	4605      	mov	r5, r0
 80113cc:	4630      	mov	r0, r6
 80113ce:	f7fd f827 	bl	800e420 <_malloc_r>
 80113d2:	b948      	cbnz	r0, 80113e8 <__smakebuf_r+0x44>
 80113d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113d8:	059a      	lsls	r2, r3, #22
 80113da:	d4ef      	bmi.n	80113bc <__smakebuf_r+0x18>
 80113dc:	f023 0303 	bic.w	r3, r3, #3
 80113e0:	f043 0302 	orr.w	r3, r3, #2
 80113e4:	81a3      	strh	r3, [r4, #12]
 80113e6:	e7e3      	b.n	80113b0 <__smakebuf_r+0xc>
 80113e8:	89a3      	ldrh	r3, [r4, #12]
 80113ea:	6020      	str	r0, [r4, #0]
 80113ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113f0:	81a3      	strh	r3, [r4, #12]
 80113f2:	9b00      	ldr	r3, [sp, #0]
 80113f4:	6163      	str	r3, [r4, #20]
 80113f6:	9b01      	ldr	r3, [sp, #4]
 80113f8:	6120      	str	r0, [r4, #16]
 80113fa:	b15b      	cbz	r3, 8011414 <__smakebuf_r+0x70>
 80113fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011400:	4630      	mov	r0, r6
 8011402:	f000 f837 	bl	8011474 <_isatty_r>
 8011406:	b128      	cbz	r0, 8011414 <__smakebuf_r+0x70>
 8011408:	89a3      	ldrh	r3, [r4, #12]
 801140a:	f023 0303 	bic.w	r3, r3, #3
 801140e:	f043 0301 	orr.w	r3, r3, #1
 8011412:	81a3      	strh	r3, [r4, #12]
 8011414:	89a3      	ldrh	r3, [r4, #12]
 8011416:	431d      	orrs	r5, r3
 8011418:	81a5      	strh	r5, [r4, #12]
 801141a:	e7cf      	b.n	80113bc <__smakebuf_r+0x18>

0801141c <memmove>:
 801141c:	4288      	cmp	r0, r1
 801141e:	b510      	push	{r4, lr}
 8011420:	eb01 0402 	add.w	r4, r1, r2
 8011424:	d902      	bls.n	801142c <memmove+0x10>
 8011426:	4284      	cmp	r4, r0
 8011428:	4623      	mov	r3, r4
 801142a:	d807      	bhi.n	801143c <memmove+0x20>
 801142c:	1e43      	subs	r3, r0, #1
 801142e:	42a1      	cmp	r1, r4
 8011430:	d008      	beq.n	8011444 <memmove+0x28>
 8011432:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011436:	f803 2f01 	strb.w	r2, [r3, #1]!
 801143a:	e7f8      	b.n	801142e <memmove+0x12>
 801143c:	4402      	add	r2, r0
 801143e:	4601      	mov	r1, r0
 8011440:	428a      	cmp	r2, r1
 8011442:	d100      	bne.n	8011446 <memmove+0x2a>
 8011444:	bd10      	pop	{r4, pc}
 8011446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801144a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801144e:	e7f7      	b.n	8011440 <memmove+0x24>

08011450 <_fstat_r>:
 8011450:	b538      	push	{r3, r4, r5, lr}
 8011452:	4d07      	ldr	r5, [pc, #28]	; (8011470 <_fstat_r+0x20>)
 8011454:	2300      	movs	r3, #0
 8011456:	4604      	mov	r4, r0
 8011458:	4608      	mov	r0, r1
 801145a:	4611      	mov	r1, r2
 801145c:	602b      	str	r3, [r5, #0]
 801145e:	f7f4 fd1a 	bl	8005e96 <_fstat>
 8011462:	1c43      	adds	r3, r0, #1
 8011464:	d102      	bne.n	801146c <_fstat_r+0x1c>
 8011466:	682b      	ldr	r3, [r5, #0]
 8011468:	b103      	cbz	r3, 801146c <_fstat_r+0x1c>
 801146a:	6023      	str	r3, [r4, #0]
 801146c:	bd38      	pop	{r3, r4, r5, pc}
 801146e:	bf00      	nop
 8011470:	200097c0 	.word	0x200097c0

08011474 <_isatty_r>:
 8011474:	b538      	push	{r3, r4, r5, lr}
 8011476:	4d06      	ldr	r5, [pc, #24]	; (8011490 <_isatty_r+0x1c>)
 8011478:	2300      	movs	r3, #0
 801147a:	4604      	mov	r4, r0
 801147c:	4608      	mov	r0, r1
 801147e:	602b      	str	r3, [r5, #0]
 8011480:	f7f4 fd19 	bl	8005eb6 <_isatty>
 8011484:	1c43      	adds	r3, r0, #1
 8011486:	d102      	bne.n	801148e <_isatty_r+0x1a>
 8011488:	682b      	ldr	r3, [r5, #0]
 801148a:	b103      	cbz	r3, 801148e <_isatty_r+0x1a>
 801148c:	6023      	str	r3, [r4, #0]
 801148e:	bd38      	pop	{r3, r4, r5, pc}
 8011490:	200097c0 	.word	0x200097c0

08011494 <abort>:
 8011494:	b508      	push	{r3, lr}
 8011496:	2006      	movs	r0, #6
 8011498:	f000 f868 	bl	801156c <raise>
 801149c:	2001      	movs	r0, #1
 801149e:	f7f4 fcab 	bl	8005df8 <_exit>

080114a2 <_calloc_r>:
 80114a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114a4:	fba1 2402 	umull	r2, r4, r1, r2
 80114a8:	b94c      	cbnz	r4, 80114be <_calloc_r+0x1c>
 80114aa:	4611      	mov	r1, r2
 80114ac:	9201      	str	r2, [sp, #4]
 80114ae:	f7fc ffb7 	bl	800e420 <_malloc_r>
 80114b2:	9a01      	ldr	r2, [sp, #4]
 80114b4:	4605      	mov	r5, r0
 80114b6:	b930      	cbnz	r0, 80114c6 <_calloc_r+0x24>
 80114b8:	4628      	mov	r0, r5
 80114ba:	b003      	add	sp, #12
 80114bc:	bd30      	pop	{r4, r5, pc}
 80114be:	220c      	movs	r2, #12
 80114c0:	6002      	str	r2, [r0, #0]
 80114c2:	2500      	movs	r5, #0
 80114c4:	e7f8      	b.n	80114b8 <_calloc_r+0x16>
 80114c6:	4621      	mov	r1, r4
 80114c8:	f7fd fc1e 	bl	800ed08 <memset>
 80114cc:	e7f4      	b.n	80114b8 <_calloc_r+0x16>

080114ce <__ascii_mbtowc>:
 80114ce:	b082      	sub	sp, #8
 80114d0:	b901      	cbnz	r1, 80114d4 <__ascii_mbtowc+0x6>
 80114d2:	a901      	add	r1, sp, #4
 80114d4:	b142      	cbz	r2, 80114e8 <__ascii_mbtowc+0x1a>
 80114d6:	b14b      	cbz	r3, 80114ec <__ascii_mbtowc+0x1e>
 80114d8:	7813      	ldrb	r3, [r2, #0]
 80114da:	600b      	str	r3, [r1, #0]
 80114dc:	7812      	ldrb	r2, [r2, #0]
 80114de:	1e10      	subs	r0, r2, #0
 80114e0:	bf18      	it	ne
 80114e2:	2001      	movne	r0, #1
 80114e4:	b002      	add	sp, #8
 80114e6:	4770      	bx	lr
 80114e8:	4610      	mov	r0, r2
 80114ea:	e7fb      	b.n	80114e4 <__ascii_mbtowc+0x16>
 80114ec:	f06f 0001 	mvn.w	r0, #1
 80114f0:	e7f8      	b.n	80114e4 <__ascii_mbtowc+0x16>

080114f2 <_malloc_usable_size_r>:
 80114f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114f6:	1f18      	subs	r0, r3, #4
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	bfbc      	itt	lt
 80114fc:	580b      	ldrlt	r3, [r1, r0]
 80114fe:	18c0      	addlt	r0, r0, r3
 8011500:	4770      	bx	lr

08011502 <__ascii_wctomb>:
 8011502:	b149      	cbz	r1, 8011518 <__ascii_wctomb+0x16>
 8011504:	2aff      	cmp	r2, #255	; 0xff
 8011506:	bf85      	ittet	hi
 8011508:	238a      	movhi	r3, #138	; 0x8a
 801150a:	6003      	strhi	r3, [r0, #0]
 801150c:	700a      	strbls	r2, [r1, #0]
 801150e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011512:	bf98      	it	ls
 8011514:	2001      	movls	r0, #1
 8011516:	4770      	bx	lr
 8011518:	4608      	mov	r0, r1
 801151a:	4770      	bx	lr

0801151c <_raise_r>:
 801151c:	291f      	cmp	r1, #31
 801151e:	b538      	push	{r3, r4, r5, lr}
 8011520:	4604      	mov	r4, r0
 8011522:	460d      	mov	r5, r1
 8011524:	d904      	bls.n	8011530 <_raise_r+0x14>
 8011526:	2316      	movs	r3, #22
 8011528:	6003      	str	r3, [r0, #0]
 801152a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801152e:	bd38      	pop	{r3, r4, r5, pc}
 8011530:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011532:	b112      	cbz	r2, 801153a <_raise_r+0x1e>
 8011534:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011538:	b94b      	cbnz	r3, 801154e <_raise_r+0x32>
 801153a:	4620      	mov	r0, r4
 801153c:	f000 f830 	bl	80115a0 <_getpid_r>
 8011540:	462a      	mov	r2, r5
 8011542:	4601      	mov	r1, r0
 8011544:	4620      	mov	r0, r4
 8011546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801154a:	f000 b817 	b.w	801157c <_kill_r>
 801154e:	2b01      	cmp	r3, #1
 8011550:	d00a      	beq.n	8011568 <_raise_r+0x4c>
 8011552:	1c59      	adds	r1, r3, #1
 8011554:	d103      	bne.n	801155e <_raise_r+0x42>
 8011556:	2316      	movs	r3, #22
 8011558:	6003      	str	r3, [r0, #0]
 801155a:	2001      	movs	r0, #1
 801155c:	e7e7      	b.n	801152e <_raise_r+0x12>
 801155e:	2400      	movs	r4, #0
 8011560:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011564:	4628      	mov	r0, r5
 8011566:	4798      	blx	r3
 8011568:	2000      	movs	r0, #0
 801156a:	e7e0      	b.n	801152e <_raise_r+0x12>

0801156c <raise>:
 801156c:	4b02      	ldr	r3, [pc, #8]	; (8011578 <raise+0xc>)
 801156e:	4601      	mov	r1, r0
 8011570:	6818      	ldr	r0, [r3, #0]
 8011572:	f7ff bfd3 	b.w	801151c <_raise_r>
 8011576:	bf00      	nop
 8011578:	2000009c 	.word	0x2000009c

0801157c <_kill_r>:
 801157c:	b538      	push	{r3, r4, r5, lr}
 801157e:	4d07      	ldr	r5, [pc, #28]	; (801159c <_kill_r+0x20>)
 8011580:	2300      	movs	r3, #0
 8011582:	4604      	mov	r4, r0
 8011584:	4608      	mov	r0, r1
 8011586:	4611      	mov	r1, r2
 8011588:	602b      	str	r3, [r5, #0]
 801158a:	f7f4 fc25 	bl	8005dd8 <_kill>
 801158e:	1c43      	adds	r3, r0, #1
 8011590:	d102      	bne.n	8011598 <_kill_r+0x1c>
 8011592:	682b      	ldr	r3, [r5, #0]
 8011594:	b103      	cbz	r3, 8011598 <_kill_r+0x1c>
 8011596:	6023      	str	r3, [r4, #0]
 8011598:	bd38      	pop	{r3, r4, r5, pc}
 801159a:	bf00      	nop
 801159c:	200097c0 	.word	0x200097c0

080115a0 <_getpid_r>:
 80115a0:	f7f4 bc12 	b.w	8005dc8 <_getpid>

080115a4 <acos>:
 80115a4:	b538      	push	{r3, r4, r5, lr}
 80115a6:	ed2d 8b02 	vpush	{d8}
 80115aa:	ec55 4b10 	vmov	r4, r5, d0
 80115ae:	f000 f82f 	bl	8011610 <__ieee754_acos>
 80115b2:	4622      	mov	r2, r4
 80115b4:	462b      	mov	r3, r5
 80115b6:	4620      	mov	r0, r4
 80115b8:	4629      	mov	r1, r5
 80115ba:	eeb0 8a40 	vmov.f32	s16, s0
 80115be:	eef0 8a60 	vmov.f32	s17, s1
 80115c2:	f7ef fad3 	bl	8000b6c <__aeabi_dcmpun>
 80115c6:	b9a8      	cbnz	r0, 80115f4 <acos+0x50>
 80115c8:	ec45 4b10 	vmov	d0, r4, r5
 80115cc:	f000 faac 	bl	8011b28 <fabs>
 80115d0:	4b0c      	ldr	r3, [pc, #48]	; (8011604 <acos+0x60>)
 80115d2:	ec51 0b10 	vmov	r0, r1, d0
 80115d6:	2200      	movs	r2, #0
 80115d8:	f7ef fabe 	bl	8000b58 <__aeabi_dcmpgt>
 80115dc:	b150      	cbz	r0, 80115f4 <acos+0x50>
 80115de:	f7fd fbf5 	bl	800edcc <__errno>
 80115e2:	ecbd 8b02 	vpop	{d8}
 80115e6:	2321      	movs	r3, #33	; 0x21
 80115e8:	6003      	str	r3, [r0, #0]
 80115ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115ee:	4806      	ldr	r0, [pc, #24]	; (8011608 <acos+0x64>)
 80115f0:	f000 bc02 	b.w	8011df8 <nan>
 80115f4:	eeb0 0a48 	vmov.f32	s0, s16
 80115f8:	eef0 0a68 	vmov.f32	s1, s17
 80115fc:	ecbd 8b02 	vpop	{d8}
 8011600:	bd38      	pop	{r3, r4, r5, pc}
 8011602:	bf00      	nop
 8011604:	3ff00000 	.word	0x3ff00000
 8011608:	08016776 	.word	0x08016776
 801160c:	00000000 	.word	0x00000000

08011610 <__ieee754_acos>:
 8011610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011614:	ec55 4b10 	vmov	r4, r5, d0
 8011618:	49b7      	ldr	r1, [pc, #732]	; (80118f8 <__ieee754_acos+0x2e8>)
 801161a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801161e:	428b      	cmp	r3, r1
 8011620:	dd1b      	ble.n	801165a <__ieee754_acos+0x4a>
 8011622:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8011626:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801162a:	4323      	orrs	r3, r4
 801162c:	d106      	bne.n	801163c <__ieee754_acos+0x2c>
 801162e:	2d00      	cmp	r5, #0
 8011630:	f300 8211 	bgt.w	8011a56 <__ieee754_acos+0x446>
 8011634:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8011890 <__ieee754_acos+0x280>
 8011638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801163c:	ee10 2a10 	vmov	r2, s0
 8011640:	462b      	mov	r3, r5
 8011642:	ee10 0a10 	vmov	r0, s0
 8011646:	4629      	mov	r1, r5
 8011648:	f7ee fe3e 	bl	80002c8 <__aeabi_dsub>
 801164c:	4602      	mov	r2, r0
 801164e:	460b      	mov	r3, r1
 8011650:	f7ef f91c 	bl	800088c <__aeabi_ddiv>
 8011654:	ec41 0b10 	vmov	d0, r0, r1
 8011658:	e7ee      	b.n	8011638 <__ieee754_acos+0x28>
 801165a:	49a8      	ldr	r1, [pc, #672]	; (80118fc <__ieee754_acos+0x2ec>)
 801165c:	428b      	cmp	r3, r1
 801165e:	f300 8087 	bgt.w	8011770 <__ieee754_acos+0x160>
 8011662:	4aa7      	ldr	r2, [pc, #668]	; (8011900 <__ieee754_acos+0x2f0>)
 8011664:	4293      	cmp	r3, r2
 8011666:	f340 81f9 	ble.w	8011a5c <__ieee754_acos+0x44c>
 801166a:	ee10 2a10 	vmov	r2, s0
 801166e:	ee10 0a10 	vmov	r0, s0
 8011672:	462b      	mov	r3, r5
 8011674:	4629      	mov	r1, r5
 8011676:	f7ee ffdf 	bl	8000638 <__aeabi_dmul>
 801167a:	a387      	add	r3, pc, #540	; (adr r3, 8011898 <__ieee754_acos+0x288>)
 801167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011680:	4606      	mov	r6, r0
 8011682:	460f      	mov	r7, r1
 8011684:	f7ee ffd8 	bl	8000638 <__aeabi_dmul>
 8011688:	a385      	add	r3, pc, #532	; (adr r3, 80118a0 <__ieee754_acos+0x290>)
 801168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168e:	f7ee fe1d 	bl	80002cc <__adddf3>
 8011692:	4632      	mov	r2, r6
 8011694:	463b      	mov	r3, r7
 8011696:	f7ee ffcf 	bl	8000638 <__aeabi_dmul>
 801169a:	a383      	add	r3, pc, #524	; (adr r3, 80118a8 <__ieee754_acos+0x298>)
 801169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a0:	f7ee fe12 	bl	80002c8 <__aeabi_dsub>
 80116a4:	4632      	mov	r2, r6
 80116a6:	463b      	mov	r3, r7
 80116a8:	f7ee ffc6 	bl	8000638 <__aeabi_dmul>
 80116ac:	a380      	add	r3, pc, #512	; (adr r3, 80118b0 <__ieee754_acos+0x2a0>)
 80116ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b2:	f7ee fe0b 	bl	80002cc <__adddf3>
 80116b6:	4632      	mov	r2, r6
 80116b8:	463b      	mov	r3, r7
 80116ba:	f7ee ffbd 	bl	8000638 <__aeabi_dmul>
 80116be:	a37e      	add	r3, pc, #504	; (adr r3, 80118b8 <__ieee754_acos+0x2a8>)
 80116c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c4:	f7ee fe00 	bl	80002c8 <__aeabi_dsub>
 80116c8:	4632      	mov	r2, r6
 80116ca:	463b      	mov	r3, r7
 80116cc:	f7ee ffb4 	bl	8000638 <__aeabi_dmul>
 80116d0:	a37b      	add	r3, pc, #492	; (adr r3, 80118c0 <__ieee754_acos+0x2b0>)
 80116d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d6:	f7ee fdf9 	bl	80002cc <__adddf3>
 80116da:	4632      	mov	r2, r6
 80116dc:	463b      	mov	r3, r7
 80116de:	f7ee ffab 	bl	8000638 <__aeabi_dmul>
 80116e2:	a379      	add	r3, pc, #484	; (adr r3, 80118c8 <__ieee754_acos+0x2b8>)
 80116e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e8:	4680      	mov	r8, r0
 80116ea:	4689      	mov	r9, r1
 80116ec:	4630      	mov	r0, r6
 80116ee:	4639      	mov	r1, r7
 80116f0:	f7ee ffa2 	bl	8000638 <__aeabi_dmul>
 80116f4:	a376      	add	r3, pc, #472	; (adr r3, 80118d0 <__ieee754_acos+0x2c0>)
 80116f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116fa:	f7ee fde5 	bl	80002c8 <__aeabi_dsub>
 80116fe:	4632      	mov	r2, r6
 8011700:	463b      	mov	r3, r7
 8011702:	f7ee ff99 	bl	8000638 <__aeabi_dmul>
 8011706:	a374      	add	r3, pc, #464	; (adr r3, 80118d8 <__ieee754_acos+0x2c8>)
 8011708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801170c:	f7ee fdde 	bl	80002cc <__adddf3>
 8011710:	4632      	mov	r2, r6
 8011712:	463b      	mov	r3, r7
 8011714:	f7ee ff90 	bl	8000638 <__aeabi_dmul>
 8011718:	a371      	add	r3, pc, #452	; (adr r3, 80118e0 <__ieee754_acos+0x2d0>)
 801171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801171e:	f7ee fdd3 	bl	80002c8 <__aeabi_dsub>
 8011722:	4632      	mov	r2, r6
 8011724:	463b      	mov	r3, r7
 8011726:	f7ee ff87 	bl	8000638 <__aeabi_dmul>
 801172a:	4b76      	ldr	r3, [pc, #472]	; (8011904 <__ieee754_acos+0x2f4>)
 801172c:	2200      	movs	r2, #0
 801172e:	f7ee fdcd 	bl	80002cc <__adddf3>
 8011732:	4602      	mov	r2, r0
 8011734:	460b      	mov	r3, r1
 8011736:	4640      	mov	r0, r8
 8011738:	4649      	mov	r1, r9
 801173a:	f7ef f8a7 	bl	800088c <__aeabi_ddiv>
 801173e:	4622      	mov	r2, r4
 8011740:	462b      	mov	r3, r5
 8011742:	f7ee ff79 	bl	8000638 <__aeabi_dmul>
 8011746:	4602      	mov	r2, r0
 8011748:	460b      	mov	r3, r1
 801174a:	a167      	add	r1, pc, #412	; (adr r1, 80118e8 <__ieee754_acos+0x2d8>)
 801174c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011750:	f7ee fdba 	bl	80002c8 <__aeabi_dsub>
 8011754:	4602      	mov	r2, r0
 8011756:	460b      	mov	r3, r1
 8011758:	4620      	mov	r0, r4
 801175a:	4629      	mov	r1, r5
 801175c:	f7ee fdb4 	bl	80002c8 <__aeabi_dsub>
 8011760:	4602      	mov	r2, r0
 8011762:	460b      	mov	r3, r1
 8011764:	a162      	add	r1, pc, #392	; (adr r1, 80118f0 <__ieee754_acos+0x2e0>)
 8011766:	e9d1 0100 	ldrd	r0, r1, [r1]
 801176a:	f7ee fdad 	bl	80002c8 <__aeabi_dsub>
 801176e:	e771      	b.n	8011654 <__ieee754_acos+0x44>
 8011770:	2d00      	cmp	r5, #0
 8011772:	f280 80cb 	bge.w	801190c <__ieee754_acos+0x2fc>
 8011776:	ee10 0a10 	vmov	r0, s0
 801177a:	4b62      	ldr	r3, [pc, #392]	; (8011904 <__ieee754_acos+0x2f4>)
 801177c:	2200      	movs	r2, #0
 801177e:	4629      	mov	r1, r5
 8011780:	f7ee fda4 	bl	80002cc <__adddf3>
 8011784:	4b60      	ldr	r3, [pc, #384]	; (8011908 <__ieee754_acos+0x2f8>)
 8011786:	2200      	movs	r2, #0
 8011788:	f7ee ff56 	bl	8000638 <__aeabi_dmul>
 801178c:	a342      	add	r3, pc, #264	; (adr r3, 8011898 <__ieee754_acos+0x288>)
 801178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011792:	4604      	mov	r4, r0
 8011794:	460d      	mov	r5, r1
 8011796:	f7ee ff4f 	bl	8000638 <__aeabi_dmul>
 801179a:	a341      	add	r3, pc, #260	; (adr r3, 80118a0 <__ieee754_acos+0x290>)
 801179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a0:	f7ee fd94 	bl	80002cc <__adddf3>
 80117a4:	4622      	mov	r2, r4
 80117a6:	462b      	mov	r3, r5
 80117a8:	f7ee ff46 	bl	8000638 <__aeabi_dmul>
 80117ac:	a33e      	add	r3, pc, #248	; (adr r3, 80118a8 <__ieee754_acos+0x298>)
 80117ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b2:	f7ee fd89 	bl	80002c8 <__aeabi_dsub>
 80117b6:	4622      	mov	r2, r4
 80117b8:	462b      	mov	r3, r5
 80117ba:	f7ee ff3d 	bl	8000638 <__aeabi_dmul>
 80117be:	a33c      	add	r3, pc, #240	; (adr r3, 80118b0 <__ieee754_acos+0x2a0>)
 80117c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c4:	f7ee fd82 	bl	80002cc <__adddf3>
 80117c8:	4622      	mov	r2, r4
 80117ca:	462b      	mov	r3, r5
 80117cc:	f7ee ff34 	bl	8000638 <__aeabi_dmul>
 80117d0:	a339      	add	r3, pc, #228	; (adr r3, 80118b8 <__ieee754_acos+0x2a8>)
 80117d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d6:	f7ee fd77 	bl	80002c8 <__aeabi_dsub>
 80117da:	4622      	mov	r2, r4
 80117dc:	462b      	mov	r3, r5
 80117de:	f7ee ff2b 	bl	8000638 <__aeabi_dmul>
 80117e2:	a337      	add	r3, pc, #220	; (adr r3, 80118c0 <__ieee754_acos+0x2b0>)
 80117e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e8:	f7ee fd70 	bl	80002cc <__adddf3>
 80117ec:	4622      	mov	r2, r4
 80117ee:	462b      	mov	r3, r5
 80117f0:	f7ee ff22 	bl	8000638 <__aeabi_dmul>
 80117f4:	ec45 4b10 	vmov	d0, r4, r5
 80117f8:	4680      	mov	r8, r0
 80117fa:	4689      	mov	r9, r1
 80117fc:	f000 f99e 	bl	8011b3c <__ieee754_sqrt>
 8011800:	a331      	add	r3, pc, #196	; (adr r3, 80118c8 <__ieee754_acos+0x2b8>)
 8011802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011806:	4620      	mov	r0, r4
 8011808:	4629      	mov	r1, r5
 801180a:	ec57 6b10 	vmov	r6, r7, d0
 801180e:	f7ee ff13 	bl	8000638 <__aeabi_dmul>
 8011812:	a32f      	add	r3, pc, #188	; (adr r3, 80118d0 <__ieee754_acos+0x2c0>)
 8011814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011818:	f7ee fd56 	bl	80002c8 <__aeabi_dsub>
 801181c:	4622      	mov	r2, r4
 801181e:	462b      	mov	r3, r5
 8011820:	f7ee ff0a 	bl	8000638 <__aeabi_dmul>
 8011824:	a32c      	add	r3, pc, #176	; (adr r3, 80118d8 <__ieee754_acos+0x2c8>)
 8011826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182a:	f7ee fd4f 	bl	80002cc <__adddf3>
 801182e:	4622      	mov	r2, r4
 8011830:	462b      	mov	r3, r5
 8011832:	f7ee ff01 	bl	8000638 <__aeabi_dmul>
 8011836:	a32a      	add	r3, pc, #168	; (adr r3, 80118e0 <__ieee754_acos+0x2d0>)
 8011838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801183c:	f7ee fd44 	bl	80002c8 <__aeabi_dsub>
 8011840:	4622      	mov	r2, r4
 8011842:	462b      	mov	r3, r5
 8011844:	f7ee fef8 	bl	8000638 <__aeabi_dmul>
 8011848:	4b2e      	ldr	r3, [pc, #184]	; (8011904 <__ieee754_acos+0x2f4>)
 801184a:	2200      	movs	r2, #0
 801184c:	f7ee fd3e 	bl	80002cc <__adddf3>
 8011850:	4602      	mov	r2, r0
 8011852:	460b      	mov	r3, r1
 8011854:	4640      	mov	r0, r8
 8011856:	4649      	mov	r1, r9
 8011858:	f7ef f818 	bl	800088c <__aeabi_ddiv>
 801185c:	4632      	mov	r2, r6
 801185e:	463b      	mov	r3, r7
 8011860:	f7ee feea 	bl	8000638 <__aeabi_dmul>
 8011864:	a320      	add	r3, pc, #128	; (adr r3, 80118e8 <__ieee754_acos+0x2d8>)
 8011866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801186a:	f7ee fd2d 	bl	80002c8 <__aeabi_dsub>
 801186e:	4632      	mov	r2, r6
 8011870:	463b      	mov	r3, r7
 8011872:	f7ee fd2b 	bl	80002cc <__adddf3>
 8011876:	4602      	mov	r2, r0
 8011878:	460b      	mov	r3, r1
 801187a:	f7ee fd27 	bl	80002cc <__adddf3>
 801187e:	4602      	mov	r2, r0
 8011880:	460b      	mov	r3, r1
 8011882:	a103      	add	r1, pc, #12	; (adr r1, 8011890 <__ieee754_acos+0x280>)
 8011884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011888:	e76f      	b.n	801176a <__ieee754_acos+0x15a>
 801188a:	bf00      	nop
 801188c:	f3af 8000 	nop.w
 8011890:	54442d18 	.word	0x54442d18
 8011894:	400921fb 	.word	0x400921fb
 8011898:	0dfdf709 	.word	0x0dfdf709
 801189c:	3f023de1 	.word	0x3f023de1
 80118a0:	7501b288 	.word	0x7501b288
 80118a4:	3f49efe0 	.word	0x3f49efe0
 80118a8:	b5688f3b 	.word	0xb5688f3b
 80118ac:	3fa48228 	.word	0x3fa48228
 80118b0:	0e884455 	.word	0x0e884455
 80118b4:	3fc9c155 	.word	0x3fc9c155
 80118b8:	03eb6f7d 	.word	0x03eb6f7d
 80118bc:	3fd4d612 	.word	0x3fd4d612
 80118c0:	55555555 	.word	0x55555555
 80118c4:	3fc55555 	.word	0x3fc55555
 80118c8:	b12e9282 	.word	0xb12e9282
 80118cc:	3fb3b8c5 	.word	0x3fb3b8c5
 80118d0:	1b8d0159 	.word	0x1b8d0159
 80118d4:	3fe6066c 	.word	0x3fe6066c
 80118d8:	9c598ac8 	.word	0x9c598ac8
 80118dc:	40002ae5 	.word	0x40002ae5
 80118e0:	1c8a2d4b 	.word	0x1c8a2d4b
 80118e4:	40033a27 	.word	0x40033a27
 80118e8:	33145c07 	.word	0x33145c07
 80118ec:	3c91a626 	.word	0x3c91a626
 80118f0:	54442d18 	.word	0x54442d18
 80118f4:	3ff921fb 	.word	0x3ff921fb
 80118f8:	3fefffff 	.word	0x3fefffff
 80118fc:	3fdfffff 	.word	0x3fdfffff
 8011900:	3c600000 	.word	0x3c600000
 8011904:	3ff00000 	.word	0x3ff00000
 8011908:	3fe00000 	.word	0x3fe00000
 801190c:	ee10 2a10 	vmov	r2, s0
 8011910:	462b      	mov	r3, r5
 8011912:	496d      	ldr	r1, [pc, #436]	; (8011ac8 <__ieee754_acos+0x4b8>)
 8011914:	2000      	movs	r0, #0
 8011916:	f7ee fcd7 	bl	80002c8 <__aeabi_dsub>
 801191a:	4b6c      	ldr	r3, [pc, #432]	; (8011acc <__ieee754_acos+0x4bc>)
 801191c:	2200      	movs	r2, #0
 801191e:	f7ee fe8b 	bl	8000638 <__aeabi_dmul>
 8011922:	4604      	mov	r4, r0
 8011924:	460d      	mov	r5, r1
 8011926:	ec45 4b10 	vmov	d0, r4, r5
 801192a:	f000 f907 	bl	8011b3c <__ieee754_sqrt>
 801192e:	a34e      	add	r3, pc, #312	; (adr r3, 8011a68 <__ieee754_acos+0x458>)
 8011930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011934:	4620      	mov	r0, r4
 8011936:	4629      	mov	r1, r5
 8011938:	ec59 8b10 	vmov	r8, r9, d0
 801193c:	f7ee fe7c 	bl	8000638 <__aeabi_dmul>
 8011940:	a34b      	add	r3, pc, #300	; (adr r3, 8011a70 <__ieee754_acos+0x460>)
 8011942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011946:	f7ee fcc1 	bl	80002cc <__adddf3>
 801194a:	4622      	mov	r2, r4
 801194c:	462b      	mov	r3, r5
 801194e:	f7ee fe73 	bl	8000638 <__aeabi_dmul>
 8011952:	a349      	add	r3, pc, #292	; (adr r3, 8011a78 <__ieee754_acos+0x468>)
 8011954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011958:	f7ee fcb6 	bl	80002c8 <__aeabi_dsub>
 801195c:	4622      	mov	r2, r4
 801195e:	462b      	mov	r3, r5
 8011960:	f7ee fe6a 	bl	8000638 <__aeabi_dmul>
 8011964:	a346      	add	r3, pc, #280	; (adr r3, 8011a80 <__ieee754_acos+0x470>)
 8011966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196a:	f7ee fcaf 	bl	80002cc <__adddf3>
 801196e:	4622      	mov	r2, r4
 8011970:	462b      	mov	r3, r5
 8011972:	f7ee fe61 	bl	8000638 <__aeabi_dmul>
 8011976:	a344      	add	r3, pc, #272	; (adr r3, 8011a88 <__ieee754_acos+0x478>)
 8011978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801197c:	f7ee fca4 	bl	80002c8 <__aeabi_dsub>
 8011980:	4622      	mov	r2, r4
 8011982:	462b      	mov	r3, r5
 8011984:	f7ee fe58 	bl	8000638 <__aeabi_dmul>
 8011988:	a341      	add	r3, pc, #260	; (adr r3, 8011a90 <__ieee754_acos+0x480>)
 801198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801198e:	f7ee fc9d 	bl	80002cc <__adddf3>
 8011992:	4622      	mov	r2, r4
 8011994:	462b      	mov	r3, r5
 8011996:	f7ee fe4f 	bl	8000638 <__aeabi_dmul>
 801199a:	a33f      	add	r3, pc, #252	; (adr r3, 8011a98 <__ieee754_acos+0x488>)
 801199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a0:	4682      	mov	sl, r0
 80119a2:	468b      	mov	fp, r1
 80119a4:	4620      	mov	r0, r4
 80119a6:	4629      	mov	r1, r5
 80119a8:	f7ee fe46 	bl	8000638 <__aeabi_dmul>
 80119ac:	a33c      	add	r3, pc, #240	; (adr r3, 8011aa0 <__ieee754_acos+0x490>)
 80119ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b2:	f7ee fc89 	bl	80002c8 <__aeabi_dsub>
 80119b6:	4622      	mov	r2, r4
 80119b8:	462b      	mov	r3, r5
 80119ba:	f7ee fe3d 	bl	8000638 <__aeabi_dmul>
 80119be:	a33a      	add	r3, pc, #232	; (adr r3, 8011aa8 <__ieee754_acos+0x498>)
 80119c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c4:	f7ee fc82 	bl	80002cc <__adddf3>
 80119c8:	4622      	mov	r2, r4
 80119ca:	462b      	mov	r3, r5
 80119cc:	f7ee fe34 	bl	8000638 <__aeabi_dmul>
 80119d0:	a337      	add	r3, pc, #220	; (adr r3, 8011ab0 <__ieee754_acos+0x4a0>)
 80119d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d6:	f7ee fc77 	bl	80002c8 <__aeabi_dsub>
 80119da:	4622      	mov	r2, r4
 80119dc:	462b      	mov	r3, r5
 80119de:	f7ee fe2b 	bl	8000638 <__aeabi_dmul>
 80119e2:	4b39      	ldr	r3, [pc, #228]	; (8011ac8 <__ieee754_acos+0x4b8>)
 80119e4:	2200      	movs	r2, #0
 80119e6:	f7ee fc71 	bl	80002cc <__adddf3>
 80119ea:	4602      	mov	r2, r0
 80119ec:	460b      	mov	r3, r1
 80119ee:	4650      	mov	r0, sl
 80119f0:	4659      	mov	r1, fp
 80119f2:	f7ee ff4b 	bl	800088c <__aeabi_ddiv>
 80119f6:	4642      	mov	r2, r8
 80119f8:	464b      	mov	r3, r9
 80119fa:	f7ee fe1d 	bl	8000638 <__aeabi_dmul>
 80119fe:	2600      	movs	r6, #0
 8011a00:	4682      	mov	sl, r0
 8011a02:	468b      	mov	fp, r1
 8011a04:	4632      	mov	r2, r6
 8011a06:	464b      	mov	r3, r9
 8011a08:	4630      	mov	r0, r6
 8011a0a:	4649      	mov	r1, r9
 8011a0c:	f7ee fe14 	bl	8000638 <__aeabi_dmul>
 8011a10:	4602      	mov	r2, r0
 8011a12:	460b      	mov	r3, r1
 8011a14:	4620      	mov	r0, r4
 8011a16:	4629      	mov	r1, r5
 8011a18:	f7ee fc56 	bl	80002c8 <__aeabi_dsub>
 8011a1c:	4632      	mov	r2, r6
 8011a1e:	4604      	mov	r4, r0
 8011a20:	460d      	mov	r5, r1
 8011a22:	464b      	mov	r3, r9
 8011a24:	4640      	mov	r0, r8
 8011a26:	4649      	mov	r1, r9
 8011a28:	f7ee fc50 	bl	80002cc <__adddf3>
 8011a2c:	4602      	mov	r2, r0
 8011a2e:	460b      	mov	r3, r1
 8011a30:	4620      	mov	r0, r4
 8011a32:	4629      	mov	r1, r5
 8011a34:	f7ee ff2a 	bl	800088c <__aeabi_ddiv>
 8011a38:	4602      	mov	r2, r0
 8011a3a:	460b      	mov	r3, r1
 8011a3c:	4650      	mov	r0, sl
 8011a3e:	4659      	mov	r1, fp
 8011a40:	f7ee fc44 	bl	80002cc <__adddf3>
 8011a44:	4632      	mov	r2, r6
 8011a46:	464b      	mov	r3, r9
 8011a48:	f7ee fc40 	bl	80002cc <__adddf3>
 8011a4c:	4602      	mov	r2, r0
 8011a4e:	460b      	mov	r3, r1
 8011a50:	f7ee fc3c 	bl	80002cc <__adddf3>
 8011a54:	e5fe      	b.n	8011654 <__ieee754_acos+0x44>
 8011a56:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011ab8 <__ieee754_acos+0x4a8>
 8011a5a:	e5ed      	b.n	8011638 <__ieee754_acos+0x28>
 8011a5c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011ac0 <__ieee754_acos+0x4b0>
 8011a60:	e5ea      	b.n	8011638 <__ieee754_acos+0x28>
 8011a62:	bf00      	nop
 8011a64:	f3af 8000 	nop.w
 8011a68:	0dfdf709 	.word	0x0dfdf709
 8011a6c:	3f023de1 	.word	0x3f023de1
 8011a70:	7501b288 	.word	0x7501b288
 8011a74:	3f49efe0 	.word	0x3f49efe0
 8011a78:	b5688f3b 	.word	0xb5688f3b
 8011a7c:	3fa48228 	.word	0x3fa48228
 8011a80:	0e884455 	.word	0x0e884455
 8011a84:	3fc9c155 	.word	0x3fc9c155
 8011a88:	03eb6f7d 	.word	0x03eb6f7d
 8011a8c:	3fd4d612 	.word	0x3fd4d612
 8011a90:	55555555 	.word	0x55555555
 8011a94:	3fc55555 	.word	0x3fc55555
 8011a98:	b12e9282 	.word	0xb12e9282
 8011a9c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011aa0:	1b8d0159 	.word	0x1b8d0159
 8011aa4:	3fe6066c 	.word	0x3fe6066c
 8011aa8:	9c598ac8 	.word	0x9c598ac8
 8011aac:	40002ae5 	.word	0x40002ae5
 8011ab0:	1c8a2d4b 	.word	0x1c8a2d4b
 8011ab4:	40033a27 	.word	0x40033a27
	...
 8011ac0:	54442d18 	.word	0x54442d18
 8011ac4:	3ff921fb 	.word	0x3ff921fb
 8011ac8:	3ff00000 	.word	0x3ff00000
 8011acc:	3fe00000 	.word	0x3fe00000

08011ad0 <sqrt>:
 8011ad0:	b538      	push	{r3, r4, r5, lr}
 8011ad2:	ed2d 8b02 	vpush	{d8}
 8011ad6:	ec55 4b10 	vmov	r4, r5, d0
 8011ada:	f000 f82f 	bl	8011b3c <__ieee754_sqrt>
 8011ade:	4622      	mov	r2, r4
 8011ae0:	462b      	mov	r3, r5
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	4629      	mov	r1, r5
 8011ae6:	eeb0 8a40 	vmov.f32	s16, s0
 8011aea:	eef0 8a60 	vmov.f32	s17, s1
 8011aee:	f7ef f83d 	bl	8000b6c <__aeabi_dcmpun>
 8011af2:	b990      	cbnz	r0, 8011b1a <sqrt+0x4a>
 8011af4:	2200      	movs	r2, #0
 8011af6:	2300      	movs	r3, #0
 8011af8:	4620      	mov	r0, r4
 8011afa:	4629      	mov	r1, r5
 8011afc:	f7ef f80e 	bl	8000b1c <__aeabi_dcmplt>
 8011b00:	b158      	cbz	r0, 8011b1a <sqrt+0x4a>
 8011b02:	f7fd f963 	bl	800edcc <__errno>
 8011b06:	2321      	movs	r3, #33	; 0x21
 8011b08:	6003      	str	r3, [r0, #0]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	4610      	mov	r0, r2
 8011b10:	4619      	mov	r1, r3
 8011b12:	f7ee febb 	bl	800088c <__aeabi_ddiv>
 8011b16:	ec41 0b18 	vmov	d8, r0, r1
 8011b1a:	eeb0 0a48 	vmov.f32	s0, s16
 8011b1e:	eef0 0a68 	vmov.f32	s1, s17
 8011b22:	ecbd 8b02 	vpop	{d8}
 8011b26:	bd38      	pop	{r3, r4, r5, pc}

08011b28 <fabs>:
 8011b28:	ec51 0b10 	vmov	r0, r1, d0
 8011b2c:	ee10 2a10 	vmov	r2, s0
 8011b30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b34:	ec43 2b10 	vmov	d0, r2, r3
 8011b38:	4770      	bx	lr
	...

08011b3c <__ieee754_sqrt>:
 8011b3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b40:	ec55 4b10 	vmov	r4, r5, d0
 8011b44:	4e67      	ldr	r6, [pc, #412]	; (8011ce4 <__ieee754_sqrt+0x1a8>)
 8011b46:	43ae      	bics	r6, r5
 8011b48:	ee10 0a10 	vmov	r0, s0
 8011b4c:	ee10 2a10 	vmov	r2, s0
 8011b50:	4629      	mov	r1, r5
 8011b52:	462b      	mov	r3, r5
 8011b54:	d10d      	bne.n	8011b72 <__ieee754_sqrt+0x36>
 8011b56:	f7ee fd6f 	bl	8000638 <__aeabi_dmul>
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	4620      	mov	r0, r4
 8011b60:	4629      	mov	r1, r5
 8011b62:	f7ee fbb3 	bl	80002cc <__adddf3>
 8011b66:	4604      	mov	r4, r0
 8011b68:	460d      	mov	r5, r1
 8011b6a:	ec45 4b10 	vmov	d0, r4, r5
 8011b6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b72:	2d00      	cmp	r5, #0
 8011b74:	dc0b      	bgt.n	8011b8e <__ieee754_sqrt+0x52>
 8011b76:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011b7a:	4326      	orrs	r6, r4
 8011b7c:	d0f5      	beq.n	8011b6a <__ieee754_sqrt+0x2e>
 8011b7e:	b135      	cbz	r5, 8011b8e <__ieee754_sqrt+0x52>
 8011b80:	f7ee fba2 	bl	80002c8 <__aeabi_dsub>
 8011b84:	4602      	mov	r2, r0
 8011b86:	460b      	mov	r3, r1
 8011b88:	f7ee fe80 	bl	800088c <__aeabi_ddiv>
 8011b8c:	e7eb      	b.n	8011b66 <__ieee754_sqrt+0x2a>
 8011b8e:	1509      	asrs	r1, r1, #20
 8011b90:	f000 808d 	beq.w	8011cae <__ieee754_sqrt+0x172>
 8011b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b98:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ba0:	07c9      	lsls	r1, r1, #31
 8011ba2:	bf5c      	itt	pl
 8011ba4:	005b      	lslpl	r3, r3, #1
 8011ba6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011baa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011bae:	bf58      	it	pl
 8011bb0:	0052      	lslpl	r2, r2, #1
 8011bb2:	2500      	movs	r5, #0
 8011bb4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011bb8:	1076      	asrs	r6, r6, #1
 8011bba:	0052      	lsls	r2, r2, #1
 8011bbc:	f04f 0e16 	mov.w	lr, #22
 8011bc0:	46ac      	mov	ip, r5
 8011bc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011bc6:	eb0c 0001 	add.w	r0, ip, r1
 8011bca:	4298      	cmp	r0, r3
 8011bcc:	bfde      	ittt	le
 8011bce:	1a1b      	suble	r3, r3, r0
 8011bd0:	eb00 0c01 	addle.w	ip, r0, r1
 8011bd4:	186d      	addle	r5, r5, r1
 8011bd6:	005b      	lsls	r3, r3, #1
 8011bd8:	f1be 0e01 	subs.w	lr, lr, #1
 8011bdc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011be0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011be4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011be8:	d1ed      	bne.n	8011bc6 <__ieee754_sqrt+0x8a>
 8011bea:	4674      	mov	r4, lr
 8011bec:	2720      	movs	r7, #32
 8011bee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011bf2:	4563      	cmp	r3, ip
 8011bf4:	eb01 000e 	add.w	r0, r1, lr
 8011bf8:	dc02      	bgt.n	8011c00 <__ieee754_sqrt+0xc4>
 8011bfa:	d113      	bne.n	8011c24 <__ieee754_sqrt+0xe8>
 8011bfc:	4290      	cmp	r0, r2
 8011bfe:	d811      	bhi.n	8011c24 <__ieee754_sqrt+0xe8>
 8011c00:	2800      	cmp	r0, #0
 8011c02:	eb00 0e01 	add.w	lr, r0, r1
 8011c06:	da57      	bge.n	8011cb8 <__ieee754_sqrt+0x17c>
 8011c08:	f1be 0f00 	cmp.w	lr, #0
 8011c0c:	db54      	blt.n	8011cb8 <__ieee754_sqrt+0x17c>
 8011c0e:	f10c 0801 	add.w	r8, ip, #1
 8011c12:	eba3 030c 	sub.w	r3, r3, ip
 8011c16:	4290      	cmp	r0, r2
 8011c18:	bf88      	it	hi
 8011c1a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8011c1e:	1a12      	subs	r2, r2, r0
 8011c20:	440c      	add	r4, r1
 8011c22:	46c4      	mov	ip, r8
 8011c24:	005b      	lsls	r3, r3, #1
 8011c26:	3f01      	subs	r7, #1
 8011c28:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011c2c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011c30:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011c34:	d1dd      	bne.n	8011bf2 <__ieee754_sqrt+0xb6>
 8011c36:	4313      	orrs	r3, r2
 8011c38:	d01b      	beq.n	8011c72 <__ieee754_sqrt+0x136>
 8011c3a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011ce8 <__ieee754_sqrt+0x1ac>
 8011c3e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011cec <__ieee754_sqrt+0x1b0>
 8011c42:	e9da 0100 	ldrd	r0, r1, [sl]
 8011c46:	e9db 2300 	ldrd	r2, r3, [fp]
 8011c4a:	f7ee fb3d 	bl	80002c8 <__aeabi_dsub>
 8011c4e:	e9da 8900 	ldrd	r8, r9, [sl]
 8011c52:	4602      	mov	r2, r0
 8011c54:	460b      	mov	r3, r1
 8011c56:	4640      	mov	r0, r8
 8011c58:	4649      	mov	r1, r9
 8011c5a:	f7ee ff69 	bl	8000b30 <__aeabi_dcmple>
 8011c5e:	b140      	cbz	r0, 8011c72 <__ieee754_sqrt+0x136>
 8011c60:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8011c64:	e9da 0100 	ldrd	r0, r1, [sl]
 8011c68:	e9db 2300 	ldrd	r2, r3, [fp]
 8011c6c:	d126      	bne.n	8011cbc <__ieee754_sqrt+0x180>
 8011c6e:	3501      	adds	r5, #1
 8011c70:	463c      	mov	r4, r7
 8011c72:	106a      	asrs	r2, r5, #1
 8011c74:	0863      	lsrs	r3, r4, #1
 8011c76:	07e9      	lsls	r1, r5, #31
 8011c78:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011c7c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011c80:	bf48      	it	mi
 8011c82:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011c86:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011c8a:	461c      	mov	r4, r3
 8011c8c:	e76d      	b.n	8011b6a <__ieee754_sqrt+0x2e>
 8011c8e:	0ad3      	lsrs	r3, r2, #11
 8011c90:	3815      	subs	r0, #21
 8011c92:	0552      	lsls	r2, r2, #21
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d0fa      	beq.n	8011c8e <__ieee754_sqrt+0x152>
 8011c98:	02dc      	lsls	r4, r3, #11
 8011c9a:	d50a      	bpl.n	8011cb2 <__ieee754_sqrt+0x176>
 8011c9c:	f1c1 0420 	rsb	r4, r1, #32
 8011ca0:	fa22 f404 	lsr.w	r4, r2, r4
 8011ca4:	1e4d      	subs	r5, r1, #1
 8011ca6:	408a      	lsls	r2, r1
 8011ca8:	4323      	orrs	r3, r4
 8011caa:	1b41      	subs	r1, r0, r5
 8011cac:	e772      	b.n	8011b94 <__ieee754_sqrt+0x58>
 8011cae:	4608      	mov	r0, r1
 8011cb0:	e7f0      	b.n	8011c94 <__ieee754_sqrt+0x158>
 8011cb2:	005b      	lsls	r3, r3, #1
 8011cb4:	3101      	adds	r1, #1
 8011cb6:	e7ef      	b.n	8011c98 <__ieee754_sqrt+0x15c>
 8011cb8:	46e0      	mov	r8, ip
 8011cba:	e7aa      	b.n	8011c12 <__ieee754_sqrt+0xd6>
 8011cbc:	f7ee fb06 	bl	80002cc <__adddf3>
 8011cc0:	e9da 8900 	ldrd	r8, r9, [sl]
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	4640      	mov	r0, r8
 8011cca:	4649      	mov	r1, r9
 8011ccc:	f7ee ff26 	bl	8000b1c <__aeabi_dcmplt>
 8011cd0:	b120      	cbz	r0, 8011cdc <__ieee754_sqrt+0x1a0>
 8011cd2:	1ca0      	adds	r0, r4, #2
 8011cd4:	bf08      	it	eq
 8011cd6:	3501      	addeq	r5, #1
 8011cd8:	3402      	adds	r4, #2
 8011cda:	e7ca      	b.n	8011c72 <__ieee754_sqrt+0x136>
 8011cdc:	3401      	adds	r4, #1
 8011cde:	f024 0401 	bic.w	r4, r4, #1
 8011ce2:	e7c6      	b.n	8011c72 <__ieee754_sqrt+0x136>
 8011ce4:	7ff00000 	.word	0x7ff00000
 8011ce8:	20000210 	.word	0x20000210
 8011cec:	20000218 	.word	0x20000218

08011cf0 <round>:
 8011cf0:	ec53 2b10 	vmov	r2, r3, d0
 8011cf4:	b570      	push	{r4, r5, r6, lr}
 8011cf6:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8011cfa:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8011cfe:	2813      	cmp	r0, #19
 8011d00:	ee10 5a10 	vmov	r5, s0
 8011d04:	4619      	mov	r1, r3
 8011d06:	dc18      	bgt.n	8011d3a <round+0x4a>
 8011d08:	2800      	cmp	r0, #0
 8011d0a:	da09      	bge.n	8011d20 <round+0x30>
 8011d0c:	3001      	adds	r0, #1
 8011d0e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8011d12:	d103      	bne.n	8011d1c <round+0x2c>
 8011d14:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8011d18:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	e02a      	b.n	8011d76 <round+0x86>
 8011d20:	4c16      	ldr	r4, [pc, #88]	; (8011d7c <round+0x8c>)
 8011d22:	4104      	asrs	r4, r0
 8011d24:	ea03 0604 	and.w	r6, r3, r4
 8011d28:	4316      	orrs	r6, r2
 8011d2a:	d011      	beq.n	8011d50 <round+0x60>
 8011d2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011d30:	4103      	asrs	r3, r0
 8011d32:	440b      	add	r3, r1
 8011d34:	ea23 0104 	bic.w	r1, r3, r4
 8011d38:	e7f0      	b.n	8011d1c <round+0x2c>
 8011d3a:	2833      	cmp	r0, #51	; 0x33
 8011d3c:	dd0b      	ble.n	8011d56 <round+0x66>
 8011d3e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8011d42:	d105      	bne.n	8011d50 <round+0x60>
 8011d44:	ee10 0a10 	vmov	r0, s0
 8011d48:	f7ee fac0 	bl	80002cc <__adddf3>
 8011d4c:	4602      	mov	r2, r0
 8011d4e:	460b      	mov	r3, r1
 8011d50:	ec43 2b10 	vmov	d0, r2, r3
 8011d54:	bd70      	pop	{r4, r5, r6, pc}
 8011d56:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8011d5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011d5e:	40f4      	lsrs	r4, r6
 8011d60:	4214      	tst	r4, r2
 8011d62:	d0f5      	beq.n	8011d50 <round+0x60>
 8011d64:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8011d68:	2301      	movs	r3, #1
 8011d6a:	4083      	lsls	r3, r0
 8011d6c:	195b      	adds	r3, r3, r5
 8011d6e:	bf28      	it	cs
 8011d70:	3101      	addcs	r1, #1
 8011d72:	ea23 0304 	bic.w	r3, r3, r4
 8011d76:	461a      	mov	r2, r3
 8011d78:	460b      	mov	r3, r1
 8011d7a:	e7e9      	b.n	8011d50 <round+0x60>
 8011d7c:	000fffff 	.word	0x000fffff

08011d80 <trunc>:
 8011d80:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8011d84:	ec5c bb10 	vmov	fp, ip, d0
 8011d88:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8011d8c:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8011d90:	2913      	cmp	r1, #19
 8011d92:	4664      	mov	r4, ip
 8011d94:	dc11      	bgt.n	8011dba <trunc+0x3a>
 8011d96:	2900      	cmp	r1, #0
 8011d98:	bfa7      	ittee	ge
 8011d9a:	4b15      	ldrge	r3, [pc, #84]	; (8011df0 <trunc+0x70>)
 8011d9c:	fa43 f101 	asrge.w	r1, r3, r1
 8011da0:	2200      	movlt	r2, #0
 8011da2:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8011da6:	bfa4      	itt	ge
 8011da8:	2200      	movge	r2, #0
 8011daa:	ea01 030c 	andge.w	r3, r1, ip
 8011dae:	4693      	mov	fp, r2
 8011db0:	469c      	mov	ip, r3
 8011db2:	ec4c bb10 	vmov	d0, fp, ip
 8011db6:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8011dba:	2933      	cmp	r1, #51	; 0x33
 8011dbc:	dd0d      	ble.n	8011dda <trunc+0x5a>
 8011dbe:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011dc2:	d1f6      	bne.n	8011db2 <trunc+0x32>
 8011dc4:	4663      	mov	r3, ip
 8011dc6:	ee10 2a10 	vmov	r2, s0
 8011dca:	ee10 0a10 	vmov	r0, s0
 8011dce:	4621      	mov	r1, r4
 8011dd0:	f7ee fa7c 	bl	80002cc <__adddf3>
 8011dd4:	4683      	mov	fp, r0
 8011dd6:	468c      	mov	ip, r1
 8011dd8:	e7eb      	b.n	8011db2 <trunc+0x32>
 8011dda:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8011dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011de2:	40c3      	lsrs	r3, r0
 8011de4:	ea2b 0603 	bic.w	r6, fp, r3
 8011de8:	46b3      	mov	fp, r6
 8011dea:	46a4      	mov	ip, r4
 8011dec:	e7e1      	b.n	8011db2 <trunc+0x32>
 8011dee:	bf00      	nop
 8011df0:	fff00000 	.word	0xfff00000
 8011df4:	00000000 	.word	0x00000000

08011df8 <nan>:
 8011df8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011e00 <nan+0x8>
 8011dfc:	4770      	bx	lr
 8011dfe:	bf00      	nop
 8011e00:	00000000 	.word	0x00000000
 8011e04:	7ff80000 	.word	0x7ff80000

08011e08 <_init>:
 8011e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e0a:	bf00      	nop
 8011e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e0e:	bc08      	pop	{r3}
 8011e10:	469e      	mov	lr, r3
 8011e12:	4770      	bx	lr

08011e14 <_fini>:
 8011e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e16:	bf00      	nop
 8011e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e1a:	bc08      	pop	{r3}
 8011e1c:	469e      	mov	lr, r3
 8011e1e:	4770      	bx	lr
