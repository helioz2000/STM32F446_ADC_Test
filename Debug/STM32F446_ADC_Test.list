
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08006298  08006298  00016298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006500  08006500  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006508  08006508  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006508  08006508  00016508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800650c  0800650c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e7c  2000007c  0800658c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ef8  0800658c  00024ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001029e  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002732  00000000  00000000  0003038d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  00032ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be5  00000000  00000000  00033a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024671  00000000  00000000  000345ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d08  00000000  00000000  00058c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df3d2  00000000  00000000  0006b966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000472c  00000000  00000000  0014ad38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0014f464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006280 	.word	0x08006280

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006280 	.word	0x08006280

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <calc_display_buffer>:
		*ch0_bufptr++ = dma_bufptr[i];
		*ch1_bufptr++ = dma_bufptr[i+1];
	}
}

void calc_display_buffer(uint8_t buf_num) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
	if (buf_num > 3) { return; }
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d823      	bhi.n	8000618 <calc_display_buffer+0x5c>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	e01b      	b.n	800060e <calc_display_buffer+0x52>
		printf("%04u ", adc_buf[buf_num][i]);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4911      	ldr	r1, [pc, #68]	; (8000620 <calc_display_buffer+0x64>)
 80005da:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005de:	fb03 f202 	mul.w	r2, r3, r2
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4413      	add	r3, r2
 80005e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005ea:	4619      	mov	r1, r3
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <calc_display_buffer+0x68>)
 80005ee:	f004 ff79 	bl	80054e4 <iprintf>
		count++;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	3301      	adds	r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
		if (count > 10) {
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2b0a      	cmp	r3, #10
 80005fc:	dd04      	ble.n	8000608 <calc_display_buffer+0x4c>
			count =0;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
			printf("\r\n");
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <calc_display_buffer+0x6c>)
 8000604:	f004 ffd4 	bl	80055b0 <puts>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	3301      	adds	r3, #1
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000614:	d3df      	bcc.n	80005d6 <calc_display_buffer+0x1a>
 8000616:	e000      	b.n	800061a <calc_display_buffer+0x5e>
	if (buf_num > 3) { return; }
 8000618:	bf00      	nop
		}
	}


}
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000098 	.word	0x20000098
 8000624:	08006298 	.word	0x08006298
 8000628:	080062a0 	.word	0x080062a0

0800062c <cmd_error>:
extern uint8_t adc_restart;
extern uint8_t display_buffer;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	printf("Error in command <%s>\r\n", cmd_str);
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <cmd_error+0x18>)
 8000638:	f004 ff54 	bl	80054e4 <iprintf>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	080062a4 	.word	0x080062a4

08000648 <cmd_L>:

int cmd_L(uint8_t* cmd_str) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3301      	adds	r3, #1
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b30      	cmp	r3, #48	; 0x30
 8000658:	d002      	beq.n	8000660 <cmd_L+0x18>
 800065a:	2b31      	cmp	r3, #49	; 0x31
 800065c:	d005      	beq.n	800066a <cmd_L+0x22>
 800065e:	e009      	b.n	8000674 <cmd_L+0x2c>
	case '0':
		printf("-LED OFF-\r\n");
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <cmd_L+0x38>)
 8000662:	f004 ffa5 	bl	80055b0 <puts>
		return 0;
 8000666:	2300      	movs	r3, #0
 8000668:	e006      	b.n	8000678 <cmd_L+0x30>
		break;
	case '1':
		printf("-LED ON-\r\n");
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <cmd_L+0x3c>)
 800066c:	f004 ffa0 	bl	80055b0 <puts>
		return 0;
 8000670:	2300      	movs	r3, #0
 8000672:	e001      	b.n	8000678 <cmd_L+0x30>
		break;
	}
	return -1;
 8000674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	080062bc 	.word	0x080062bc
 8000684:	080062c8 	.word	0x080062c8

08000688 <cmd_help>:

int cmd_help(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	printf("\r\nCommand Help:\r\n");
 800068c:	4807      	ldr	r0, [pc, #28]	; (80006ac <cmd_help+0x24>)
 800068e:	f004 ff8f 	bl	80055b0 <puts>
	printf("D[1..4]: Display ADC channel 1 - 4 buffer content\r\n");
 8000692:	4807      	ldr	r0, [pc, #28]	; (80006b0 <cmd_help+0x28>)
 8000694:	f004 ff8c 	bl	80055b0 <puts>
	printf("R: Restart ADC conversion\r\n");
 8000698:	4806      	ldr	r0, [pc, #24]	; (80006b4 <cmd_help+0x2c>)
 800069a:	f004 ff89 	bl	80055b0 <puts>
	printf("L[0,1]: LED on / off\r\n");
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <cmd_help+0x30>)
 80006a0:	f004 ff86 	bl	80055b0 <puts>
	return 0;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	080062d4 	.word	0x080062d4
 80006b0:	080062e8 	.word	0x080062e8
 80006b4:	0800631c 	.word	0x0800631c
 80006b8:	08006338 	.word	0x08006338

080006bc <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	int retval = -1;
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c8:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	3b3f      	subs	r3, #63	; 0x3f
 80006d0:	2b33      	cmp	r3, #51	; 0x33
 80006d2:	f200 8083 	bhi.w	80007dc <cmd_process+0x120>
 80006d6:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <cmd_process+0x20>)
 80006d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006dc:	080007d7 	.word	0x080007d7
 80006e0:	080007dd 	.word	0x080007dd
 80006e4:	080007dd 	.word	0x080007dd
 80006e8:	080007dd 	.word	0x080007dd
 80006ec:	080007dd 	.word	0x080007dd
 80006f0:	080007ad 	.word	0x080007ad
 80006f4:	080007dd 	.word	0x080007dd
 80006f8:	080007dd 	.word	0x080007dd
 80006fc:	080007dd 	.word	0x080007dd
 8000700:	080007d7 	.word	0x080007d7
 8000704:	080007dd 	.word	0x080007dd
 8000708:	080007dd 	.word	0x080007dd
 800070c:	080007dd 	.word	0x080007dd
 8000710:	080007c1 	.word	0x080007c1
 8000714:	080007dd 	.word	0x080007dd
 8000718:	080007dd 	.word	0x080007dd
 800071c:	080007dd 	.word	0x080007dd
 8000720:	080007dd 	.word	0x080007dd
 8000724:	080007dd 	.word	0x080007dd
 8000728:	080007cb 	.word	0x080007cb
 800072c:	080007dd 	.word	0x080007dd
 8000730:	080007dd 	.word	0x080007dd
 8000734:	080007dd 	.word	0x080007dd
 8000738:	080007dd 	.word	0x080007dd
 800073c:	080007dd 	.word	0x080007dd
 8000740:	080007dd 	.word	0x080007dd
 8000744:	080007dd 	.word	0x080007dd
 8000748:	080007dd 	.word	0x080007dd
 800074c:	080007dd 	.word	0x080007dd
 8000750:	080007dd 	.word	0x080007dd
 8000754:	080007dd 	.word	0x080007dd
 8000758:	080007dd 	.word	0x080007dd
 800075c:	080007dd 	.word	0x080007dd
 8000760:	080007dd 	.word	0x080007dd
 8000764:	080007dd 	.word	0x080007dd
 8000768:	080007dd 	.word	0x080007dd
 800076c:	080007dd 	.word	0x080007dd
 8000770:	080007ad 	.word	0x080007ad
 8000774:	080007dd 	.word	0x080007dd
 8000778:	080007dd 	.word	0x080007dd
 800077c:	080007dd 	.word	0x080007dd
 8000780:	080007d7 	.word	0x080007d7
 8000784:	080007dd 	.word	0x080007dd
 8000788:	080007dd 	.word	0x080007dd
 800078c:	080007dd 	.word	0x080007dd
 8000790:	080007c1 	.word	0x080007c1
 8000794:	080007dd 	.word	0x080007dd
 8000798:	080007dd 	.word	0x080007dd
 800079c:	080007dd 	.word	0x080007dd
 80007a0:	080007dd 	.word	0x080007dd
 80007a4:	080007dd 	.word	0x080007dd
 80007a8:	080007cb 	.word	0x080007cb
	case 'D':
	case 'd':
		display_buffer = cmd_str[1] - 0x31;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3301      	adds	r3, #1
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	3b31      	subs	r3, #49	; 0x31
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <cmd_process+0x12c>)
 80007b8:	701a      	strb	r2, [r3, #0]
		retval = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
		break;
 80007be:	e00d      	b.n	80007dc <cmd_process+0x120>
	case 'L':
	case 'l':
		retval = cmd_L(cmd_str);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff41 	bl	8000648 <cmd_L>
 80007c6:	60f8      	str	r0, [r7, #12]
		break;
 80007c8:	e008      	b.n	80007dc <cmd_process+0x120>
	case 'R':
	case 'r':
		adc_restart = 1;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <cmd_process+0x130>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
		retval = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
		break;
 80007d4:	e002      	b.n	80007dc <cmd_process+0x120>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 80007d6:	f7ff ff57 	bl	8000688 <cmd_help>
 80007da:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 80007dc:	68fb      	ldr	r3, [r7, #12]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20001b92 	.word	0x20001b92
 80007ec:	20001b91 	.word	0x20001b91

080007f0 <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff fd09 	bl	8000210 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <CMD_Handler+0x3c>)
 8000804:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <CMD_Handler+0x3c>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d105      	bne.n	800081a <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ff0c 	bl	800062c <cmd_error>
		return -1;
 8000814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000818:	e003      	b.n	8000822 <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ff4e 	bl	80006bc <cmd_process>
 8000820:	4603      	mov	r3, r0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20001998 	.word	0x20001998

08000830 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000838:	1d39      	adds	r1, r7, #4
 800083a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800083e:	2201      	movs	r2, #1
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <__io_putchar+0x20>)
 8000842:	f003 fd62 	bl	800430a <HAL_UART_Transmit>
  return ch;
 8000846:	687b      	ldr	r3, [r7, #4]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20001b34 	.word	0x20001b34

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f000 fef4 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f8e2 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f000 fab0 	bl	8000dc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000864:	f000 fa86 	bl	8000d74 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000868:	f000 fa5a 	bl	8000d20 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800086c:	f000 fa0c 	bl	8000c88 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000870:	f000 f94a 	bl	8000b08 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000874:	f000 f9a8 	bl	8000bc8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8000878:	4854      	ldr	r0, [pc, #336]	; (80009cc <main+0x178>)
 800087a:	f003 f8bd 	bl	80039f8 <HAL_TIM_Base_Start_IT>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <main+0x34>
    Error_Handler();
 8000884:	f000 fbea 	bl	800105c <Error_Handler>
  }

  // Start UART receive via interrupt
  if (HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) != HAL_OK) {
 8000888:	2201      	movs	r2, #1
 800088a:	4951      	ldr	r1, [pc, #324]	; (80009d0 <main+0x17c>)
 800088c:	4851      	ldr	r0, [pc, #324]	; (80009d4 <main+0x180>)
 800088e:	f003 fdce 	bl	800442e <HAL_UART_Receive_IT>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <main+0x48>
    Error_Handler();
 8000898:	f000 fbe0 	bl	800105c <Error_Handler>
  }

  // Start ADC1 - keeps running via TIM2
  if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_dma_buf, ADC_DMA_BUF_SIZE) != HAL_OK) {
 800089c:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80008a0:	494d      	ldr	r1, [pc, #308]	; (80009d8 <main+0x184>)
 80008a2:	484e      	ldr	r0, [pc, #312]	; (80009dc <main+0x188>)
 80008a4:	f000 ff84 	bl	80017b0 <HAL_ADC_Start_DMA>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d004      	beq.n	80008b8 <main+0x64>
  	printf("Error starting ADC1 DMA\r\n");
 80008ae:	484c      	ldr	r0, [pc, #304]	; (80009e0 <main+0x18c>)
 80008b0:	f004 fe7e 	bl	80055b0 <puts>
  	Error_Handler();
 80008b4:	f000 fbd2 	bl	800105c <Error_Handler>
  }
  //Start ADC2 - keeps running via TIM2
  if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_dma_buf, ADC_DMA_BUF_SIZE) != HAL_OK) {
 80008b8:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80008bc:	4949      	ldr	r1, [pc, #292]	; (80009e4 <main+0x190>)
 80008be:	484a      	ldr	r0, [pc, #296]	; (80009e8 <main+0x194>)
 80008c0:	f000 ff76 	bl	80017b0 <HAL_ADC_Start_DMA>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d004      	beq.n	80008d4 <main+0x80>
   	printf("Error starting ADC2 DMA\r\n");
 80008ca:	4848      	ldr	r0, [pc, #288]	; (80009ec <main+0x198>)
 80008cc:	f004 fe70 	bl	80055b0 <puts>
   	Error_Handler();
 80008d0:	f000 fbc4 	bl	800105c <Error_Handler>
  }

  // Startup success message
   if (HAL_UART_Transmit(&huart2, startup_msg, sizeof(startup_msg), 1000) != HAL_OK) {
 80008d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d8:	2212      	movs	r2, #18
 80008da:	4945      	ldr	r1, [pc, #276]	; (80009f0 <main+0x19c>)
 80008dc:	483d      	ldr	r0, [pc, #244]	; (80009d4 <main+0x180>)
 80008de:	f003 fd14 	bl	800430a <HAL_UART_Transmit>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <main+0x98>
    Error_Handler();
 80008e8:	f000 fbb8 	bl	800105c <Error_Handler>
    /* USER CODE BEGIN 3 */

	  //HAL_GPIO_TogglePin (LED2_PORT, LED2_PIN);

	  // Handle UART communication
	  if (rx_cmd_ready) {
 80008ec:	4b41      	ldr	r3, [pc, #260]	; (80009f4 <main+0x1a0>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d008      	beq.n	8000906 <main+0xb2>
		  CMD_Handler((uint8_t*)rx_buff);
 80008f4:	4840      	ldr	r0, [pc, #256]	; (80009f8 <main+0x1a4>)
 80008f6:	f7ff ff7b 	bl	80007f0 <CMD_Handler>
		  rx_count = 0;
 80008fa:	4b40      	ldr	r3, [pc, #256]	; (80009fc <main+0x1a8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	801a      	strh	r2, [r3, #0]
		  rx_cmd_ready = 0;
 8000900:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <main+0x1a0>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
	  }

	  if (adc_restart) {
 8000906:	4b3e      	ldr	r3, [pc, #248]	; (8000a00 <main+0x1ac>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d01a      	beq.n	8000944 <main+0xf0>
		  adc_restart = 0;
 800090e:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <main+0x1ac>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
		  //HAL_ADC_Start_IT (&hadc1);
		  if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_dma_buf, ADC_DMA_BUF_SIZE) != HAL_OK) {
 8000914:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000918:	492f      	ldr	r1, [pc, #188]	; (80009d8 <main+0x184>)
 800091a:	4830      	ldr	r0, [pc, #192]	; (80009dc <main+0x188>)
 800091c:	f000 ff48 	bl	80017b0 <HAL_ADC_Start_DMA>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d002      	beq.n	800092c <main+0xd8>
			printf("Error re-starting ADC1 DMA\r\n");
 8000926:	4837      	ldr	r0, [pc, #220]	; (8000a04 <main+0x1b0>)
 8000928:	f004 fe42 	bl	80055b0 <puts>
		  }
		  if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_dma_buf, ADC_DMA_BUF_SIZE) != HAL_OK) {
 800092c:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000930:	492c      	ldr	r1, [pc, #176]	; (80009e4 <main+0x190>)
 8000932:	482d      	ldr	r0, [pc, #180]	; (80009e8 <main+0x194>)
 8000934:	f000 ff3c 	bl	80017b0 <HAL_ADC_Start_DMA>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d002      	beq.n	8000944 <main+0xf0>
		  	printf("Error re-starting ADC2 DMA\r\n");
 800093e:	4832      	ldr	r0, [pc, #200]	; (8000a08 <main+0x1b4>)
 8000940:	f004 fe36 	bl	80055b0 <puts>
		  }
	  }

	  if (display_buffer) {
 8000944:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <main+0x1b8>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d007      	beq.n	800095c <main+0x108>
		  calc_display_buffer(display_buffer);
 800094c:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <main+0x1b8>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fe33 	bl	80005bc <calc_display_buffer>
		  display_buffer = 0;
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <main+0x1b8>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]

	  //HAL_Delay(800);


	  // Check every dma data set is processed
	  if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 800095c:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <main+0x1bc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	dc0b      	bgt.n	800097c <main+0x128>
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <main+0x1c0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	dc07      	bgt.n	800097c <main+0x128>
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <main+0x1c4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	dc03      	bgt.n	800097c <main+0x128>
 8000974:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <main+0x1c8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b01      	cmp	r3, #1
 800097a:	dd02      	ble.n	8000982 <main+0x12e>
		  printf("Data Processing to slow\r\n");
 800097c:	4828      	ldr	r0, [pc, #160]	; (8000a20 <main+0x1cc>)
 800097e:	f004 fe17 	bl	80055b0 <puts>
	  }
	  // Process DMA buffers
	  if (adc1_dma_l_count > 0) {
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <main+0x1bc>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	dd04      	ble.n	8000994 <main+0x140>
		  //calc_process_dma_buffer(0,1);
		  adc1_dma_l_count--;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <main+0x1bc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	3b01      	subs	r3, #1
 8000990:	4a1f      	ldr	r2, [pc, #124]	; (8000a10 <main+0x1bc>)
 8000992:	6013      	str	r3, [r2, #0]
	  }
	  if (adc1_dma_h_count > 0) {
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <main+0x1c0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	dd04      	ble.n	80009a6 <main+0x152>
	  	  //calc_process_dma_buffer(1,1);
	  	  adc1_dma_h_count--;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <main+0x1c0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <main+0x1c0>)
 80009a4:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_l_count > 0) {
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <main+0x1c4>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	dd04      	ble.n	80009b8 <main+0x164>
	  	  //calc_process_dma_buffer(0,2);
	  	  adc2_dma_l_count--;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <main+0x1c4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <main+0x1c4>)
 80009b6:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_h_count > 0) {
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <main+0x1c8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	dd95      	ble.n	80008ec <main+0x98>
	  	  //calc_process_dma_buffer(1,2);
	   	  adc2_dma_h_count--;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <main+0x1c8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <main+0x1c8>)
 80009c8:	6013      	str	r3, [r2, #0]
	  if (rx_cmd_ready) {
 80009ca:	e78f      	b.n	80008ec <main+0x98>
 80009cc:	20001aec 	.word	0x20001aec
 80009d0:	20001b7a 	.word	0x20001b7a
 80009d4:	20001b34 	.word	0x20001b34
 80009d8:	20001ba4 	.word	0x20001ba4
 80009dc:	2000199c 	.word	0x2000199c
 80009e0:	08006350 	.word	0x08006350
 80009e4:	200034a4 	.word	0x200034a4
 80009e8:	200019e4 	.word	0x200019e4
 80009ec:	0800636c 	.word	0x0800636c
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20001b90 	.word	0x20001b90
 80009f8:	20001b7c 	.word	0x20001b7c
 80009fc:	20001b78 	.word	0x20001b78
 8000a00:	20001b91 	.word	0x20001b91
 8000a04:	08006388 	.word	0x08006388
 8000a08:	080063a4 	.word	0x080063a4
 8000a0c:	20001b92 	.word	0x20001b92
 8000a10:	20001b94 	.word	0x20001b94
 8000a14:	20001b98 	.word	0x20001b98
 8000a18:	20001b9c 	.word	0x20001b9c
 8000a1c:	20001ba0 	.word	0x20001ba0
 8000a20:	080063c0 	.word	0x080063c0

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	; 0x50
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2234      	movs	r2, #52	; 0x34
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f004 fdc4 	bl	80055c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <SystemClock_Config+0xdc>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a2b      	ldr	r2, [pc, #172]	; (8000b00 <SystemClock_Config+0xdc>)
 8000a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
 8000a58:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <SystemClock_Config+0xdc>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a64:	2300      	movs	r3, #0
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <SystemClock_Config+0xe0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a25      	ldr	r2, [pc, #148]	; (8000b04 <SystemClock_Config+0xe0>)
 8000a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <SystemClock_Config+0xe0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a84:	2301      	movs	r3, #1
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a88:	2310      	movs	r3, #16
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a90:	2300      	movs	r3, #0
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a94:	2308      	movs	r3, #8
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a98:	23b4      	movs	r3, #180	; 0xb4
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4618      	mov	r0, r3
 8000aae:	f002 fcb5 	bl	800341c <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ab8:	f000 fad0 	bl	800105c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000abc:	f002 f914 	bl	8002ce8 <HAL_PWREx_EnableOverDrive>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ac6:	f000 fac9 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ad6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	2105      	movs	r1, #5
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 f94d 	bl	8002d88 <HAL_RCC_ClockConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000af4:	f000 fab2 	bl	800105c <Error_Handler>
  }
}
 8000af8:	bf00      	nop
 8000afa:	3750      	adds	r7, #80	; 0x50
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000

08000b08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b1a:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b1c:	4a29      	ldr	r2, [pc, #164]	; (8000bc4 <MX_ADC1_Init+0xbc>)
 8000b1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b2e:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b4c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b6c:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b6e:	f000 fddb 	bl	8001728 <HAL_ADC_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000b78:	f000 fa70 	bl	800105c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000b84:	2301      	movs	r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000b8e:	f000 ff1f 	bl	80019d0 <HAL_ADC_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000b98:	f000 fa60 	bl	800105c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_ADC1_Init+0xb8>)
 8000baa:	f000 ff11 	bl	80019d0 <HAL_ADC_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000bb4:	f000 fa52 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000199c 	.word	0x2000199c
 8000bc4:	40012000 	.word	0x40012000

08000bc8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000bdc:	4a29      	ldr	r2, [pc, #164]	; (8000c84 <MX_ADC2_Init+0xbc>)
 8000bde:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000be2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000be6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000be8:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bf4:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000c0c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c2c:	4814      	ldr	r0, [pc, #80]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000c2e:	f000 fd7b 	bl	8001728 <HAL_ADC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000c38:	f000 fa10 	bl	800105c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000c44:	2301      	movs	r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000c4e:	f000 febf 	bl	80019d0 <HAL_ADC_ConfigChannel>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000c58:	f000 fa00 	bl	800105c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c5c:	230b      	movs	r3, #11
 8000c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_ADC2_Init+0xb8>)
 8000c6a:	f000 feb1 	bl	80019d0 <HAL_ADC_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000c74:	f000 f9f2 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200019e4 	.word	0x200019e4
 8000c84:	40012100 	.word	0x40012100

08000c88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_TIM2_Init+0x94>)
 8000ca6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000caa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_TIM2_Init+0x94>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_TIM2_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_TIM2_Init+0x94>)
 8000cba:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8000cbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_TIM2_Init+0x94>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_TIM2_Init+0x94>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ccc:	4813      	ldr	r0, [pc, #76]	; (8000d1c <MX_TIM2_Init+0x94>)
 8000cce:	f002 fe43 	bl	8003958 <HAL_TIM_Base_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cd8:	f000 f9c0 	bl	800105c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_TIM2_Init+0x94>)
 8000cea:	f002 fffd 	bl	8003ce8 <HAL_TIM_ConfigClockSource>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cf4:	f000 f9b2 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cf8:	2320      	movs	r3, #32
 8000cfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_TIM2_Init+0x94>)
 8000d06:	f003 fa23 	bl	8004150 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d10:	f000 f9a4 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20001aec 	.word	0x20001aec

08000d20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <MX_USART2_UART_Init+0x50>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d58:	f003 fa8a 	bl	8004270 <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d62:	f000 f97b 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20001b34 	.word	0x20001b34
 8000d70:	40004400 	.word	0x40004400

08000d74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_DMA_Init+0x4c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <MX_DMA_Init+0x4c>)
 8000d84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <MX_DMA_Init+0x4c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2038      	movs	r0, #56	; 0x38
 8000d9c:	f001 f9a3 	bl	80020e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000da0:	2038      	movs	r0, #56	; 0x38
 8000da2:	f001 f9bc 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	203a      	movs	r0, #58	; 0x3a
 8000dac:	f001 f99b 	bl	80020e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000db0:	203a      	movs	r0, #58	; 0x3a
 8000db2:	f001 f9b4 	bl	800211e <HAL_NVIC_EnableIRQ>

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a2d      	ldr	r2, [pc, #180]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_GPIO_Init+0xd4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000e50:	4812      	ldr	r0, [pc, #72]	; (8000e9c <MX_GPIO_Init+0xd8>)
 8000e52:	f001 ff15 	bl	8002c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e5c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <MX_GPIO_Init+0xdc>)
 8000e6e:	f001 fd73 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8000e72:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_GPIO_Init+0xd8>)
 8000e8c:	f001 fd64 	bl	8002958 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	; 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020800 	.word	0x40020800

08000ea4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x34>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d105      	bne.n	8000ec0 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_ADC_ConvCpltCallback+0x38>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_ADC_ConvCpltCallback+0x38>)
 8000ebc:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 8000ebe:	e004      	b.n	8000eca <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000ec8:	6013      	str	r3, [r2, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000199c 	.word	0x2000199c
 8000edc:	20001b98 	.word	0x20001b98
 8000ee0:	20001ba0 	.word	0x20001ba0

08000ee4 <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d105      	bne.n	8000f00 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000efc:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 8000efe:	e004      	b.n	8000f0a <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000f08:	6013      	str	r3, [r2, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	2000199c 	.word	0x2000199c
 8000f1c:	20001b94 	.word	0x20001b94
 8000f20:	20001b9c 	.word	0x20001b9c

08000f24 <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a22      	ldr	r2, [pc, #136]	; (8000fb8 <HAL_ADC_ErrorCallback+0x94>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d102      	bne.n	8000f3a <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	e001      	b.n	8000f3e <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	d82c      	bhi.n	8000fa0 <HAL_ADC_ErrorCallback+0x7c>
 8000f46:	a201      	add	r2, pc, #4	; (adr r2, 8000f4c <HAL_ADC_ErrorCallback+0x28>)
 8000f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4c:	08000f61 	.word	0x08000f61
 8000f50:	08000f71 	.word	0x08000f71
 8000f54:	08000f81 	.word	0x08000f81
 8000f58:	08000fa1 	.word	0x08000fa1
 8000f5c:	08000f91 	.word	0x08000f91
	case HAL_ADC_ERROR_NONE:
		printf("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f64:	461a      	mov	r2, r3
 8000f66:	68f9      	ldr	r1, [r7, #12]
 8000f68:	4814      	ldr	r0, [pc, #80]	; (8000fbc <HAL_ADC_ErrorCallback+0x98>)
 8000f6a:	f004 fabb 	bl	80054e4 <iprintf>
		break;
 8000f6e:	e01e      	b.n	8000fae <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		printf("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f74:	461a      	mov	r2, r3
 8000f76:	68f9      	ldr	r1, [r7, #12]
 8000f78:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <HAL_ADC_ErrorCallback+0x9c>)
 8000f7a:	f004 fab3 	bl	80054e4 <iprintf>
		break;
 8000f7e:	e016      	b.n	8000fae <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		printf("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f84:	461a      	mov	r2, r3
 8000f86:	68f9      	ldr	r1, [r7, #12]
 8000f88:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <HAL_ADC_ErrorCallback+0xa0>)
 8000f8a:	f004 faab 	bl	80054e4 <iprintf>
		break;
 8000f8e:	e00e      	b.n	8000fae <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		printf("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f94:	461a      	mov	r2, r3
 8000f96:	68f9      	ldr	r1, [r7, #12]
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <HAL_ADC_ErrorCallback+0xa4>)
 8000f9a:	f004 faa3 	bl	80054e4 <iprintf>
		break;
 8000f9e:	e006      	b.n	8000fae <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		printf("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		printf("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4809      	ldr	r0, [pc, #36]	; (8000fcc <HAL_ADC_ErrorCallback+0xa8>)
 8000fa8:	f004 fa9c 	bl	80054e4 <iprintf>
	}
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000199c 	.word	0x2000199c
 8000fbc:	080063dc 	.word	0x080063dc
 8000fc0:	080063f8 	.word	0x080063f8
 8000fc4:	0800641c 	.word	0x0800641c
 8000fc8:	0800643c 	.word	0x0800643c
 8000fcc:	08006458 	.word	0x08006458

08000fd0 <HAL_UART_RxCpltCallback>:

// UART has received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	if (rx_count >= sizeof(rx_buff)) {
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <HAL_UART_RxCpltCallback+0x78>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	2b13      	cmp	r3, #19
 8000fde:	d902      	bls.n	8000fe6 <HAL_UART_RxCpltCallback+0x16>
		rx_count = 0;		// wrap back to start
 8000fe0:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_UART_RxCpltCallback+0x78>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	801a      	strh	r2, [r3, #0]
	}
	if ( HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4918      	ldr	r1, [pc, #96]	; (800104c <HAL_UART_RxCpltCallback+0x7c>)
 8000fea:	4819      	ldr	r0, [pc, #100]	; (8001050 <HAL_UART_RxCpltCallback+0x80>)
 8000fec:	f003 fa1f 	bl	800442e <HAL_UART_Receive_IT>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d124      	bne.n	8001040 <HAL_UART_RxCpltCallback+0x70>
		// check for End of input (CR or LF)
		if ( (rx_byte != 0x0A) && (rx_byte !=  0x0D) ) {
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_UART_RxCpltCallback+0x7c>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b0a      	cmp	r3, #10
 8000ffc:	d00f      	beq.n	800101e <HAL_UART_RxCpltCallback+0x4e>
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_UART_RxCpltCallback+0x7c>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b0d      	cmp	r3, #13
 8001004:	d00b      	beq.n	800101e <HAL_UART_RxCpltCallback+0x4e>
			rx_buff[rx_count++] = rx_byte;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_UART_RxCpltCallback+0x78>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	b291      	uxth	r1, r2
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_UART_RxCpltCallback+0x78>)
 8001010:	8011      	strh	r1, [r2, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_UART_RxCpltCallback+0x7c>)
 8001016:	7819      	ldrb	r1, [r3, #0]
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_UART_RxCpltCallback+0x84>)
 800101a:	5499      	strb	r1, [r3, r2]
				rx_cmd_ready = 1;
				rx_buff[rx_count++] = 0;	// end of string
			}
		}
	} // else { rx_error_count++; } // this should never happen
}
 800101c:	e010      	b.n	8001040 <HAL_UART_RxCpltCallback+0x70>
			if (rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_UART_RxCpltCallback+0x78>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00c      	beq.n	8001040 <HAL_UART_RxCpltCallback+0x70>
				rx_cmd_ready = 1;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_UART_RxCpltCallback+0x88>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
				rx_buff[rx_count++] = 0;	// end of string
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_UART_RxCpltCallback+0x78>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	b291      	uxth	r1, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_UART_RxCpltCallback+0x78>)
 8001036:	8011      	strh	r1, [r2, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_UART_RxCpltCallback+0x84>)
 800103c:	2100      	movs	r1, #0
 800103e:	5499      	strb	r1, [r3, r2]
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20001b78 	.word	0x20001b78
 800104c:	20001b7a 	.word	0x20001b7a
 8001050:	20001b34 	.word	0x20001b34
 8001054:	20001b7c 	.word	0x20001b7c
 8001058:	20001b90 	.word	0x20001b90

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <Error_Handler+0x10>)
 8001062:	f004 fa3f 	bl	80054e4 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001066:	b672      	cpsid	i
}
 8001068:	bf00      	nop
    __disable_irq();
    while (1)
 800106a:	e7fe      	b.n	800106a <Error_Handler+0xe>
 800106c:	08006478 	.word	0x08006478

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <HAL_MspInit+0x4c>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_MspInit+0x4c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ae:	2007      	movs	r0, #7
 80010b0:	f001 f80e 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800

080010c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08e      	sub	sp, #56	; 0x38
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a79      	ldr	r2, [pc, #484]	; (80012c4 <HAL_ADC_MspInit+0x204>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d173      	bne.n	80011ca <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
 80010e6:	4b78      	ldr	r3, [pc, #480]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a77      	ldr	r2, [pc, #476]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b75      	ldr	r3, [pc, #468]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fa:	623b      	str	r3, [r7, #32]
 80010fc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	4b71      	ldr	r3, [pc, #452]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a70      	ldr	r2, [pc, #448]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b6e      	ldr	r3, [pc, #440]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	4b6a      	ldr	r3, [pc, #424]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a69      	ldr	r2, [pc, #420]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b67      	ldr	r3, [pc, #412]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001136:	2301      	movs	r3, #1
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	4860      	ldr	r0, [pc, #384]	; (80012cc <HAL_ADC_MspInit+0x20c>)
 800114a:	f001 fc05 	bl	8002958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800114e:	2301      	movs	r3, #1
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001152:	2303      	movs	r3, #3
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	485b      	ldr	r0, [pc, #364]	; (80012d0 <HAL_ADC_MspInit+0x210>)
 8001162:	f001 fbf9 	bl	8002958 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001166:	4b5b      	ldr	r3, [pc, #364]	; (80012d4 <HAL_ADC_MspInit+0x214>)
 8001168:	4a5b      	ldr	r2, [pc, #364]	; (80012d8 <HAL_ADC_MspInit+0x218>)
 800116a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800116c:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <HAL_ADC_MspInit+0x214>)
 800116e:	2200      	movs	r2, #0
 8001170:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001172:	4b58      	ldr	r3, [pc, #352]	; (80012d4 <HAL_ADC_MspInit+0x214>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001178:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <HAL_ADC_MspInit+0x214>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800117e:	4b55      	ldr	r3, [pc, #340]	; (80012d4 <HAL_ADC_MspInit+0x214>)
 8001180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001184:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001186:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <HAL_ADC_MspInit+0x214>)
 8001188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800118c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118e:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <HAL_ADC_MspInit+0x214>)
 8001190:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001194:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001196:	4b4f      	ldr	r3, [pc, #316]	; (80012d4 <HAL_ADC_MspInit+0x214>)
 8001198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800119e:	4b4d      	ldr	r3, [pc, #308]	; (80012d4 <HAL_ADC_MspInit+0x214>)
 80011a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011a4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a6:	4b4b      	ldr	r3, [pc, #300]	; (80012d4 <HAL_ADC_MspInit+0x214>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ac:	4849      	ldr	r0, [pc, #292]	; (80012d4 <HAL_ADC_MspInit+0x214>)
 80011ae:	f000 ffd1 	bl	8002154 <HAL_DMA_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80011b8:	f7ff ff50 	bl	800105c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a45      	ldr	r2, [pc, #276]	; (80012d4 <HAL_ADC_MspInit+0x214>)
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38
 80011c2:	4a44      	ldr	r2, [pc, #272]	; (80012d4 <HAL_ADC_MspInit+0x214>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80011c8:	e078      	b.n	80012bc <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a43      	ldr	r2, [pc, #268]	; (80012dc <HAL_ADC_MspInit+0x21c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d173      	bne.n	80012bc <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	4a3a      	ldr	r2, [pc, #232]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 80011de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e2:	6453      	str	r3, [r2, #68]	; 0x44
 80011e4:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	4a33      	ldr	r2, [pc, #204]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001200:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	4a2c      	ldr	r2, [pc, #176]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6313      	str	r3, [r2, #48]	; 0x30
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <HAL_ADC_MspInit+0x208>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001228:	2302      	movs	r3, #2
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122c:	2303      	movs	r3, #3
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001238:	4619      	mov	r1, r3
 800123a:	4824      	ldr	r0, [pc, #144]	; (80012cc <HAL_ADC_MspInit+0x20c>)
 800123c:	f001 fb8c 	bl	8002958 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001240:	2302      	movs	r3, #2
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001244:	2303      	movs	r3, #3
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	481f      	ldr	r0, [pc, #124]	; (80012d0 <HAL_ADC_MspInit+0x210>)
 8001254:	f001 fb80 	bl	8002958 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <HAL_ADC_MspInit+0x220>)
 800125a:	4a22      	ldr	r2, [pc, #136]	; (80012e4 <HAL_ADC_MspInit+0x224>)
 800125c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <HAL_ADC_MspInit+0x220>)
 8001260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001264:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <HAL_ADC_MspInit+0x220>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_ADC_MspInit+0x220>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <HAL_ADC_MspInit+0x220>)
 8001274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001278:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_ADC_MspInit+0x220>)
 800127c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001280:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_ADC_MspInit+0x220>)
 8001284:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001288:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_ADC_MspInit+0x220>)
 800128c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001290:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_ADC_MspInit+0x220>)
 8001294:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001298:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_ADC_MspInit+0x220>)
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012a0:	480f      	ldr	r0, [pc, #60]	; (80012e0 <HAL_ADC_MspInit+0x220>)
 80012a2:	f000 ff57 	bl	8002154 <HAL_DMA_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 80012ac:	f7ff fed6 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <HAL_ADC_MspInit+0x220>)
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <HAL_ADC_MspInit+0x220>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012bc:	bf00      	nop
 80012be:	3738      	adds	r7, #56	; 0x38
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40012000 	.word	0x40012000
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	20001a2c 	.word	0x20001a2c
 80012d8:	40026410 	.word	0x40026410
 80012dc:	40012100 	.word	0x40012100
 80012e0:	20001a8c 	.word	0x20001a8c
 80012e4:	40026440 	.word	0x40026440

080012e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f8:	d115      	bne.n	8001326 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_TIM_Base_MspInit+0x48>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_TIM_Base_MspInit+0x48>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_TIM_Base_MspInit+0x48>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	201c      	movs	r0, #28
 800131c:	f000 fee3 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001320:	201c      	movs	r0, #28
 8001322:	f000 fefc 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_UART_MspInit+0x94>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d133      	bne.n	80013be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_UART_MspInit+0x98>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <HAL_UART_MspInit+0x98>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_UART_MspInit+0x98>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_UART_MspInit+0x98>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a14      	ldr	r2, [pc, #80]	; (80013cc <HAL_UART_MspInit+0x98>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_UART_MspInit+0x98>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800138e:	230c      	movs	r3, #12
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800139e:	2307      	movs	r3, #7
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <HAL_UART_MspInit+0x9c>)
 80013aa:	f001 fad5 	bl	8002958 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2026      	movs	r0, #38	; 0x26
 80013b4:	f000 fe97 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013b8:	2026      	movs	r0, #38	; 0x26
 80013ba:	f000 feb0 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40004400 	.word	0x40004400
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 f962 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <TIM2_IRQHandler+0x18>)
 800142e:	f002 fb53 	bl	8003ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (ADC_DEBUG_PORT, ADC_DEBUG_PIN);
 8001432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001436:	4803      	ldr	r0, [pc, #12]	; (8001444 <TIM2_IRQHandler+0x1c>)
 8001438:	f001 fc3b 	bl	8002cb2 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20001aec 	.word	0x20001aec
 8001444:	40020000 	.word	0x40020000

08001448 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <USART2_IRQHandler+0x10>)
 800144e:	f003 f81f 	bl	8004490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20001b34 	.word	0x20001b34

0800145c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <DMA2_Stream0_IRQHandler+0x10>)
 8001462:	f001 f80f 	bl	8002484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20001a2c 	.word	0x20001a2c

08001470 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <DMA2_Stream2_IRQHandler+0x10>)
 8001476:	f001 f805 	bl	8002484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20001a8c 	.word	0x20001a8c

08001484 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	e00a      	b.n	80014ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001496:	f3af 8000 	nop.w
 800149a:	4601      	mov	r1, r0
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	b2ca      	uxtb	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf0      	blt.n	8001496 <_read+0x12>
  }

  return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	e009      	b.n	80014e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	60ba      	str	r2, [r7, #8]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f9a9 	bl	8000830 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dbf1      	blt.n	80014d0 <_write+0x12>
  }
  return len;
 80014ec:	687b      	ldr	r3, [r7, #4]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_close>:

int _close(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151e:	605a      	str	r2, [r3, #4]
  return 0;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <_isatty>:

int _isatty(int file)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001568:	4a14      	ldr	r2, [pc, #80]	; (80015bc <_sbrk+0x5c>)
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <_sbrk+0x60>)
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <_sbrk+0x64>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <_sbrk+0x68>)
 8001580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	429a      	cmp	r2, r3
 800158e:	d207      	bcs.n	80015a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001590:	f004 f81e 	bl	80055d0 <__errno>
 8001594:	4603      	mov	r3, r0
 8001596:	220c      	movs	r2, #12
 8001598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800159e:	e009      	b.n	80015b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <_sbrk+0x64>)
 80015b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20020000 	.word	0x20020000
 80015c0:	00000400 	.word	0x00000400
 80015c4:	20004da4 	.word	0x20004da4
 80015c8:	20004ef8 	.word	0x20004ef8

080015cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <SystemInit+0x20>)
 80015d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <SystemInit+0x20>)
 80015d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015f6:	490e      	ldr	r1, [pc, #56]	; (8001630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f8:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800160c:	4c0b      	ldr	r4, [pc, #44]	; (800163c <LoopFillZerobss+0x26>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800161a:	f7ff ffd7 	bl	80015cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161e:	f003 ffdd 	bl	80055dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7ff f917 	bl	8000854 <main>
  bx  lr    
 8001626:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001634:	08006510 	.word	0x08006510
  ldr r2, =_sbss
 8001638:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800163c:	20004ef8 	.word	0x20004ef8

08001640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_Init+0x40>)
 800164e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_Init+0x40>)
 800165a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x40>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 fd2f 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fcfa 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fd47 	bl	800213a <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016c4:	f000 fd0f 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000014 	.word	0x20000014
 80016e0:	2000001c 	.word	0x2000001c
 80016e4:	20000018 	.word	0x20000018

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	2000001c 	.word	0x2000001c
 800170c:	20004da8 	.word	0x20004da8

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20004da8 	.word	0x20004da8

08001728 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e033      	b.n	80017a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fcba 	bl	80010c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b00      	cmp	r3, #0
 8001764:	d118      	bne.n	8001798 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800176e:	f023 0302 	bic.w	r3, r3, #2
 8001772:	f043 0202 	orr.w	r2, r3, #2
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fa5a 	bl	8001c34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f023 0303 	bic.w	r3, r3, #3
 800178e:	f043 0201 	orr.w	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
 8001796:	e001      	b.n	800179c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_ADC_Start_DMA+0x1e>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e0e9      	b.n	80019a2 <HAL_ADC_Start_DMA+0x1f2>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d018      	beq.n	8001816 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017f4:	4b6d      	ldr	r3, [pc, #436]	; (80019ac <HAL_ADC_Start_DMA+0x1fc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a6d      	ldr	r2, [pc, #436]	; (80019b0 <HAL_ADC_Start_DMA+0x200>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0c9a      	lsrs	r2, r3, #18
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001808:	e002      	b.n	8001810 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	3b01      	subs	r3, #1
 800180e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f9      	bne.n	800180a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001824:	d107      	bne.n	8001836 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001834:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	f040 80a1 	bne.w	8001988 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001870:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001884:	d106      	bne.n	8001894 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f023 0206 	bic.w	r2, r3, #6
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
 8001892:	e002      	b.n	800189a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a2:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <HAL_ADC_Start_DMA+0x204>)
 80018a4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018aa:	4a43      	ldr	r2, [pc, #268]	; (80019b8 <HAL_ADC_Start_DMA+0x208>)
 80018ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b2:	4a42      	ldr	r2, [pc, #264]	; (80019bc <HAL_ADC_Start_DMA+0x20c>)
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ba:	4a41      	ldr	r2, [pc, #260]	; (80019c0 <HAL_ADC_Start_DMA+0x210>)
 80018bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80018d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	334c      	adds	r3, #76	; 0x4c
 80018f2:	4619      	mov	r1, r3
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f000 fcda 	bl	80022b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	2b00      	cmp	r3, #0
 8001906:	d12a      	bne.n	800195e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a2d      	ldr	r2, [pc, #180]	; (80019c4 <HAL_ADC_Start_DMA+0x214>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d015      	beq.n	800193e <HAL_ADC_Start_DMA+0x18e>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a2c      	ldr	r2, [pc, #176]	; (80019c8 <HAL_ADC_Start_DMA+0x218>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d105      	bne.n	8001928 <HAL_ADC_Start_DMA+0x178>
 800191c:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <HAL_ADC_Start_DMA+0x204>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 031f 	and.w	r3, r3, #31
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00a      	beq.n	800193e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a27      	ldr	r2, [pc, #156]	; (80019cc <HAL_ADC_Start_DMA+0x21c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d136      	bne.n	80019a0 <HAL_ADC_Start_DMA+0x1f0>
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <HAL_ADC_Start_DMA+0x204>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	d130      	bne.n	80019a0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d129      	bne.n	80019a0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	e020      	b.n	80019a0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <HAL_ADC_Start_DMA+0x214>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d11b      	bne.n	80019a0 <HAL_ADC_Start_DMA+0x1f0>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d114      	bne.n	80019a0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	e00b      	b.n	80019a0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	f043 0210 	orr.w	r2, r3, #16
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001998:	f043 0201 	orr.w	r2, r3, #1
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000014 	.word	0x20000014
 80019b0:	431bde83 	.word	0x431bde83
 80019b4:	40012300 	.word	0x40012300
 80019b8:	08001e2d 	.word	0x08001e2d
 80019bc:	08001ee7 	.word	0x08001ee7
 80019c0:	08001f03 	.word	0x08001f03
 80019c4:	40012000 	.word	0x40012000
 80019c8:	40012100 	.word	0x40012100
 80019cc:	40012200 	.word	0x40012200

080019d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x1c>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e113      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x244>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b09      	cmp	r3, #9
 80019fa:	d925      	bls.n	8001a48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68d9      	ldr	r1, [r3, #12]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	3b1e      	subs	r3, #30
 8001a12:	2207      	movs	r2, #7
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43da      	mvns	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	400a      	ands	r2, r1
 8001a20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68d9      	ldr	r1, [r3, #12]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	4603      	mov	r3, r0
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4403      	add	r3, r0
 8001a3a:	3b1e      	subs	r3, #30
 8001a3c:	409a      	lsls	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	e022      	b.n	8001a8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6919      	ldr	r1, [r3, #16]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	400a      	ands	r2, r1
 8001a6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6919      	ldr	r1, [r3, #16]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4403      	add	r3, r0
 8001a84:	409a      	lsls	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d824      	bhi.n	8001ae0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b05      	subs	r3, #5
 8001aa8:	221f      	movs	r2, #31
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	3b05      	subs	r3, #5
 8001ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ade:	e04c      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b0c      	cmp	r3, #12
 8001ae6:	d824      	bhi.n	8001b32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	3b23      	subs	r3, #35	; 0x23
 8001afa:	221f      	movs	r2, #31
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43da      	mvns	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	400a      	ands	r2, r1
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	3b23      	subs	r3, #35	; 0x23
 8001b24:	fa00 f203 	lsl.w	r2, r0, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b30:	e023      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	3b41      	subs	r3, #65	; 0x41
 8001b44:	221f      	movs	r2, #31
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	400a      	ands	r2, r1
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b41      	subs	r3, #65	; 0x41
 8001b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b7a:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <HAL_ADC_ConfigChannel+0x250>)
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a28      	ldr	r2, [pc, #160]	; (8001c24 <HAL_ADC_ConfigChannel+0x254>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d10f      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1d8>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b12      	cmp	r3, #18
 8001b8e:	d10b      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1d      	ldr	r2, [pc, #116]	; (8001c24 <HAL_ADC_ConfigChannel+0x254>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d12b      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x23a>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_ADC_ConfigChannel+0x258>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d003      	beq.n	8001bc4 <HAL_ADC_ConfigChannel+0x1f4>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b11      	cmp	r3, #17
 8001bc2:	d122      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <HAL_ADC_ConfigChannel+0x258>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d111      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_ADC_ConfigChannel+0x25c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a11      	ldr	r2, [pc, #68]	; (8001c30 <HAL_ADC_ConfigChannel+0x260>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	0c9a      	lsrs	r2, r3, #18
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bfc:	e002      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f9      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40012300 	.word	0x40012300
 8001c24:	40012000 	.word	0x40012000
 8001c28:	10000012 	.word	0x10000012
 8001c2c:	20000014 	.word	0x20000014
 8001c30:	431bde83 	.word	0x431bde83

08001c34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c3c:	4b79      	ldr	r3, [pc, #484]	; (8001e24 <ADC_Init+0x1f0>)
 8001c3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	021a      	lsls	r2, r3, #8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6899      	ldr	r1, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <ADC_Init+0x1f4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d022      	beq.n	8001d12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6899      	ldr	r1, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6899      	ldr	r1, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	e00f      	b.n	8001d32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0202 	bic.w	r2, r2, #2
 8001d40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6899      	ldr	r1, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7e1b      	ldrb	r3, [r3, #24]
 8001d4c:	005a      	lsls	r2, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01b      	beq.n	8001d98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6859      	ldr	r1, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	035a      	lsls	r2, r3, #13
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	e007      	b.n	8001da8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001da6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	051a      	lsls	r2, r3, #20
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6899      	ldr	r1, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dea:	025a      	lsls	r2, r3, #9
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6899      	ldr	r1, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	029a      	lsls	r2, r3, #10
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	609a      	str	r2, [r3, #8]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40012300 	.word	0x40012300
 8001e28:	0f000001 	.word	0x0f000001

08001e2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d13c      	bne.n	8001ec0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d12b      	bne.n	8001eb8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d127      	bne.n	8001eb8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d006      	beq.n	8001e84 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d119      	bne.n	8001eb8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0220 	bic.w	r2, r2, #32
 8001e92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f7fe fff3 	bl	8000ea4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ebe:	e00e      	b.n	8001ede <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7ff f829 	bl	8000f24 <HAL_ADC_ErrorCallback>
}
 8001ed2:	e004      	b.n	8001ede <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	4798      	blx	r3
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f7fe fff5 	bl	8000ee4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2240      	movs	r2, #64	; 0x40
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f043 0204 	orr.w	r2, r3, #4
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7fe fffe 	bl	8000f24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <__NVIC_EnableIRQ+0x38>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020b0:	f7ff ff8e 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff29 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff3e 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff8e 	bl	8002024 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5d 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff31 	bl	8001f94 <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffa2 	bl	800208c <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff fad6 	bl	8001710 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e099      	b.n	80022a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002190:	e00f      	b.n	80021b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002192:	f7ff fabd 	bl	8001710 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b05      	cmp	r3, #5
 800219e:	d908      	bls.n	80021b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2203      	movs	r2, #3
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e078      	b.n	80022a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e8      	bne.n	8002192 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4b38      	ldr	r3, [pc, #224]	; (80022ac <HAL_DMA_Init+0x158>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	2b04      	cmp	r3, #4
 800220a:	d107      	bne.n	800221c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	4313      	orrs	r3, r2
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f023 0307 	bic.w	r3, r3, #7
 8002232:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	2b04      	cmp	r3, #4
 8002244:	d117      	bne.n	8002276 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00e      	beq.n	8002276 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fb01 	bl	8002860 <DMA_CheckFifoParam>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2240      	movs	r2, #64	; 0x40
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002272:	2301      	movs	r3, #1
 8002274:	e016      	b.n	80022a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fab8 	bl	80027f4 <DMA_CalcBaseAndBitshift>
 8002284:	4603      	mov	r3, r0
 8002286:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	223f      	movs	r2, #63	; 0x3f
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	f010803f 	.word	0xf010803f

080022b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_DMA_Start_IT+0x26>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e040      	b.n	8002358 <HAL_DMA_Start_IT+0xa8>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d12f      	bne.n	800234a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fa4a 	bl	8002798 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	223f      	movs	r2, #63	; 0x3f
 800230a:	409a      	lsls	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0216 	orr.w	r2, r2, #22
 800231e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0208 	orr.w	r2, r2, #8
 8002336:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e005      	b.n	8002356 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002352:	2302      	movs	r3, #2
 8002354:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002356:	7dfb      	ldrb	r3, [r7, #23]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800236e:	f7ff f9cf 	bl	8001710 <HAL_GetTick>
 8002372:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d008      	beq.n	8002392 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e052      	b.n	8002438 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0216 	bic.w	r2, r2, #22
 80023a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d103      	bne.n	80023c2 <HAL_DMA_Abort+0x62>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0208 	bic.w	r2, r2, #8
 80023d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e2:	e013      	b.n	800240c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e4:	f7ff f994 	bl	8001710 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	d90c      	bls.n	800240c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2220      	movs	r2, #32
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2203      	movs	r2, #3
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e015      	b.n	8002438 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1e4      	bne.n	80023e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	223f      	movs	r2, #63	; 0x3f
 8002420:	409a      	lsls	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d004      	beq.n	800245e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2280      	movs	r2, #128	; 0x80
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00c      	b.n	8002478 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2205      	movs	r2, #5
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002490:	4b8e      	ldr	r3, [pc, #568]	; (80026cc <HAL_DMA_IRQHandler+0x248>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a8e      	ldr	r2, [pc, #568]	; (80026d0 <HAL_DMA_IRQHandler+0x24c>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0a9b      	lsrs	r3, r3, #10
 800249c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	2208      	movs	r2, #8
 80024b0:	409a      	lsls	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01a      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0204 	bic.w	r2, r2, #4
 80024d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	2208      	movs	r2, #8
 80024de:	409a      	lsls	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	f043 0201 	orr.w	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	2201      	movs	r2, #1
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	2201      	movs	r2, #1
 8002514:	409a      	lsls	r2, r3
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f043 0202 	orr.w	r2, r3, #2
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	2204      	movs	r2, #4
 800252c:	409a      	lsls	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d012      	beq.n	800255c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00b      	beq.n	800255c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002548:	2204      	movs	r2, #4
 800254a:	409a      	lsls	r2, r3
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	f043 0204 	orr.w	r2, r3, #4
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	2210      	movs	r2, #16
 8002562:	409a      	lsls	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d043      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d03c      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	2210      	movs	r2, #16
 8002580:	409a      	lsls	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d018      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d108      	bne.n	80025b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d024      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
 80025b2:	e01f      	b.n	80025f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01b      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
 80025c4:	e016      	b.n	80025f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0208 	bic.w	r2, r2, #8
 80025e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	2220      	movs	r2, #32
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 808f 	beq.w	8002724 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8087 	beq.w	8002724 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	2220      	movs	r2, #32
 800261c:	409a      	lsls	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b05      	cmp	r3, #5
 800262c:	d136      	bne.n	800269c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0216 	bic.w	r2, r2, #22
 800263c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800264c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d103      	bne.n	800265e <HAL_DMA_IRQHandler+0x1da>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0208 	bic.w	r2, r2, #8
 800266c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	223f      	movs	r2, #63	; 0x3f
 8002674:	409a      	lsls	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268e:	2b00      	cmp	r3, #0
 8002690:	d07e      	beq.n	8002790 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4798      	blx	r3
        }
        return;
 800269a:	e079      	b.n	8002790 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01d      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10d      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d031      	beq.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
 80026c8:	e02c      	b.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
 80026ca:	bf00      	nop
 80026cc:	20000014 	.word	0x20000014
 80026d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d023      	beq.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
 80026e4:	e01e      	b.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10f      	bne.n	8002714 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0210 	bic.w	r2, r2, #16
 8002702:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	2b00      	cmp	r3, #0
 800272a:	d032      	beq.n	8002792 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d022      	beq.n	800277e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2205      	movs	r2, #5
 800273c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	3301      	adds	r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	429a      	cmp	r2, r3
 800275a:	d307      	bcc.n	800276c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f2      	bne.n	8002750 <HAL_DMA_IRQHandler+0x2cc>
 800276a:	e000      	b.n	800276e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800276c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	4798      	blx	r3
 800278e:	e000      	b.n	8002792 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002790:	bf00      	nop
    }
  }
}
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d108      	bne.n	80027d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027d6:	e007      	b.n	80027e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3b10      	subs	r3, #16
 8002804:	4a14      	ldr	r2, [pc, #80]	; (8002858 <DMA_CalcBaseAndBitshift+0x64>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800280e:	4a13      	ldr	r2, [pc, #76]	; (800285c <DMA_CalcBaseAndBitshift+0x68>)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d909      	bls.n	8002836 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	1d1a      	adds	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	659a      	str	r2, [r3, #88]	; 0x58
 8002834:	e007      	b.n	8002846 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	aaaaaaab 	.word	0xaaaaaaab
 800285c:	080064c4 	.word	0x080064c4

08002860 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11f      	bne.n	80028ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d856      	bhi.n	800292e <DMA_CheckFifoParam+0xce>
 8002880:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <DMA_CheckFifoParam+0x28>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	08002899 	.word	0x08002899
 800288c:	080028ab 	.word	0x080028ab
 8002890:	08002899 	.word	0x08002899
 8002894:	0800292f 	.word	0x0800292f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d046      	beq.n	8002932 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a8:	e043      	b.n	8002932 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028b2:	d140      	bne.n	8002936 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b8:	e03d      	b.n	8002936 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c2:	d121      	bne.n	8002908 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d837      	bhi.n	800293a <DMA_CheckFifoParam+0xda>
 80028ca:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <DMA_CheckFifoParam+0x70>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	080028e1 	.word	0x080028e1
 80028d4:	080028e7 	.word	0x080028e7
 80028d8:	080028e1 	.word	0x080028e1
 80028dc:	080028f9 	.word	0x080028f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      break;
 80028e4:	e030      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d025      	beq.n	800293e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f6:	e022      	b.n	800293e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002900:	d11f      	bne.n	8002942 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002906:	e01c      	b.n	8002942 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d903      	bls.n	8002916 <DMA_CheckFifoParam+0xb6>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d003      	beq.n	800291c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002914:	e018      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
      break;
 800291a:	e015      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00e      	beq.n	8002946 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e00b      	b.n	8002946 <DMA_CheckFifoParam+0xe6>
      break;
 800292e:	bf00      	nop
 8002930:	e00a      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002932:	bf00      	nop
 8002934:	e008      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002936:	bf00      	nop
 8002938:	e006      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
 800293c:	e004      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 800293e:	bf00      	nop
 8002940:	e002      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;   
 8002942:	bf00      	nop
 8002944:	e000      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002946:	bf00      	nop
    }
  } 
  
  return status; 
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop

08002958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	e165      	b.n	8002c40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	f040 8154 	bne.w	8002c3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d005      	beq.n	80029aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d130      	bne.n	8002a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	2203      	movs	r2, #3
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e0:	2201      	movs	r2, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 0201 	and.w	r2, r3, #1
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d017      	beq.n	8002a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d123      	bne.n	8002a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	08da      	lsrs	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3208      	adds	r2, #8
 8002a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	08da      	lsrs	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3208      	adds	r2, #8
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0203 	and.w	r2, r3, #3
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80ae 	beq.w	8002c3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	; (8002c58 <HAL_GPIO_Init+0x300>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4a5c      	ldr	r2, [pc, #368]	; (8002c58 <HAL_GPIO_Init+0x300>)
 8002ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aec:	6453      	str	r3, [r2, #68]	; 0x44
 8002aee:	4b5a      	ldr	r3, [pc, #360]	; (8002c58 <HAL_GPIO_Init+0x300>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afa:	4a58      	ldr	r2, [pc, #352]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	3302      	adds	r3, #2
 8002b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	220f      	movs	r2, #15
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4f      	ldr	r2, [pc, #316]	; (8002c60 <HAL_GPIO_Init+0x308>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d025      	beq.n	8002b72 <HAL_GPIO_Init+0x21a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4e      	ldr	r2, [pc, #312]	; (8002c64 <HAL_GPIO_Init+0x30c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01f      	beq.n	8002b6e <HAL_GPIO_Init+0x216>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4d      	ldr	r2, [pc, #308]	; (8002c68 <HAL_GPIO_Init+0x310>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d019      	beq.n	8002b6a <HAL_GPIO_Init+0x212>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4c      	ldr	r2, [pc, #304]	; (8002c6c <HAL_GPIO_Init+0x314>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <HAL_GPIO_Init+0x20e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4b      	ldr	r2, [pc, #300]	; (8002c70 <HAL_GPIO_Init+0x318>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00d      	beq.n	8002b62 <HAL_GPIO_Init+0x20a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4a      	ldr	r2, [pc, #296]	; (8002c74 <HAL_GPIO_Init+0x31c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <HAL_GPIO_Init+0x206>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a49      	ldr	r2, [pc, #292]	; (8002c78 <HAL_GPIO_Init+0x320>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_GPIO_Init+0x202>
 8002b56:	2306      	movs	r3, #6
 8002b58:	e00c      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	e00a      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b5e:	2305      	movs	r3, #5
 8002b60:	e008      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b62:	2304      	movs	r3, #4
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e004      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b72:	2300      	movs	r3, #0
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f002 0203 	and.w	r2, r2, #3
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	4093      	lsls	r3, r2
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b84:	4935      	ldr	r1, [pc, #212]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b92:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bb6:	4a31      	ldr	r2, [pc, #196]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bbc:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be0:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002be6:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c34:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	f67f ae96 	bls.w	8002974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40013800 	.word	0x40013800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	40020400 	.word	0x40020400
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020c00 	.word	0x40020c00
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40021400 	.word	0x40021400
 8002c78:	40021800 	.word	0x40021800
 8002c7c:	40013c00 	.word	0x40013c00

08002c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c90:	787b      	ldrb	r3, [r7, #1]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c96:	887a      	ldrh	r2, [r7, #2]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c9c:	e003      	b.n	8002ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	041a      	lsls	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	619a      	str	r2, [r3, #24]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cc4:	887a      	ldrh	r2, [r7, #2]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	041a      	lsls	r2, r3, #16
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	887b      	ldrh	r3, [r7, #2]
 8002cd2:	400b      	ands	r3, r1
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a1f      	ldr	r2, [pc, #124]	; (8002d78 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_PWREx_EnableOverDrive+0x90>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_PWREx_EnableOverDrive+0x94>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d14:	f7fe fcfc 	bl	8001710 <HAL_GetTick>
 8002d18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d1a:	e009      	b.n	8002d30 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d1c:	f7fe fcf8 	bl	8001710 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d2a:	d901      	bls.n	8002d30 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e01f      	b.n	8002d70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d30:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3c:	d1ee      	bne.n	8002d1c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d44:	f7fe fce4 	bl	8001710 <HAL_GetTick>
 8002d48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d4a:	e009      	b.n	8002d60 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d4c:	f7fe fce0 	bl	8001710 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d5a:	d901      	bls.n	8002d60 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e007      	b.n	8002d70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d6c:	d1ee      	bne.n	8002d4c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	420e0040 	.word	0x420e0040
 8002d80:	40007000 	.word	0x40007000
 8002d84:	420e0044 	.word	0x420e0044

08002d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0cc      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d90c      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0b8      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ddc:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df4:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	494d      	ldr	r1, [pc, #308]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d044      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d119      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e067      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4934      	ldr	r1, [pc, #208]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7fe fc4a 	bl	8001710 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fe fc46 	bl	8001710 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e04f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d20c      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e032      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4916      	ldr	r1, [pc, #88]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	490e      	ldr	r1, [pc, #56]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0e:	f000 f855 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	490a      	ldr	r1, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	5ccb      	ldrb	r3, [r1, r3]
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fbaa 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00
 8002f44:	40023800 	.word	0x40023800
 8002f48:	080064ac 	.word	0x080064ac
 8002f4c:	20000014 	.word	0x20000014
 8002f50:	20000018 	.word	0x20000018

08002f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000014 	.word	0x20000014

08002f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f70:	f7ff fff0 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	0a9b      	lsrs	r3, r3, #10
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4903      	ldr	r1, [pc, #12]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	080064bc 	.word	0x080064bc

08002f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f98:	f7ff ffdc 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0b5b      	lsrs	r3, r3, #13
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	080064bc 	.word	0x080064bc

08002fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc0:	b0ae      	sub	sp, #184	; 0xb8
 8002fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe2:	4bcb      	ldr	r3, [pc, #812]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	f200 8206 	bhi.w	80033fc <HAL_RCC_GetSysClockFreq+0x440>
 8002ff0:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff6:	bf00      	nop
 8002ff8:	0800302d 	.word	0x0800302d
 8002ffc:	080033fd 	.word	0x080033fd
 8003000:	080033fd 	.word	0x080033fd
 8003004:	080033fd 	.word	0x080033fd
 8003008:	08003035 	.word	0x08003035
 800300c:	080033fd 	.word	0x080033fd
 8003010:	080033fd 	.word	0x080033fd
 8003014:	080033fd 	.word	0x080033fd
 8003018:	0800303d 	.word	0x0800303d
 800301c:	080033fd 	.word	0x080033fd
 8003020:	080033fd 	.word	0x080033fd
 8003024:	080033fd 	.word	0x080033fd
 8003028:	0800322d 	.word	0x0800322d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800302c:	4bb9      	ldr	r3, [pc, #740]	; (8003314 <HAL_RCC_GetSysClockFreq+0x358>)
 800302e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003032:	e1e7      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003034:	4bb8      	ldr	r3, [pc, #736]	; (8003318 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800303a:	e1e3      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800303c:	4bb4      	ldr	r3, [pc, #720]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003048:	4bb1      	ldr	r3, [pc, #708]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d071      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003054:	4bae      	ldr	r3, [pc, #696]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	099b      	lsrs	r3, r3, #6
 800305a:	2200      	movs	r2, #0
 800305c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003060:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003064:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800307a:	4622      	mov	r2, r4
 800307c:	462b      	mov	r3, r5
 800307e:	f04f 0000 	mov.w	r0, #0
 8003082:	f04f 0100 	mov.w	r1, #0
 8003086:	0159      	lsls	r1, r3, #5
 8003088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800308c:	0150      	lsls	r0, r2, #5
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4621      	mov	r1, r4
 8003094:	1a51      	subs	r1, r2, r1
 8003096:	6439      	str	r1, [r7, #64]	; 0x40
 8003098:	4629      	mov	r1, r5
 800309a:	eb63 0301 	sbc.w	r3, r3, r1
 800309e:	647b      	str	r3, [r7, #68]	; 0x44
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80030ac:	4649      	mov	r1, r9
 80030ae:	018b      	lsls	r3, r1, #6
 80030b0:	4641      	mov	r1, r8
 80030b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030b6:	4641      	mov	r1, r8
 80030b8:	018a      	lsls	r2, r1, #6
 80030ba:	4641      	mov	r1, r8
 80030bc:	1a51      	subs	r1, r2, r1
 80030be:	63b9      	str	r1, [r7, #56]	; 0x38
 80030c0:	4649      	mov	r1, r9
 80030c2:	eb63 0301 	sbc.w	r3, r3, r1
 80030c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80030d4:	4649      	mov	r1, r9
 80030d6:	00cb      	lsls	r3, r1, #3
 80030d8:	4641      	mov	r1, r8
 80030da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030de:	4641      	mov	r1, r8
 80030e0:	00ca      	lsls	r2, r1, #3
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	4622      	mov	r2, r4
 80030ea:	189b      	adds	r3, r3, r2
 80030ec:	633b      	str	r3, [r7, #48]	; 0x30
 80030ee:	462b      	mov	r3, r5
 80030f0:	460a      	mov	r2, r1
 80030f2:	eb42 0303 	adc.w	r3, r2, r3
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003104:	4629      	mov	r1, r5
 8003106:	024b      	lsls	r3, r1, #9
 8003108:	4621      	mov	r1, r4
 800310a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800310e:	4621      	mov	r1, r4
 8003110:	024a      	lsls	r2, r1, #9
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003120:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003124:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003128:	f7fd f8ca 	bl	80002c0 <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4613      	mov	r3, r2
 8003132:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003136:	e067      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003138:	4b75      	ldr	r3, [pc, #468]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	2200      	movs	r2, #0
 8003140:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003144:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003148:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800314c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003150:	67bb      	str	r3, [r7, #120]	; 0x78
 8003152:	2300      	movs	r3, #0
 8003154:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003156:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800315a:	4622      	mov	r2, r4
 800315c:	462b      	mov	r3, r5
 800315e:	f04f 0000 	mov.w	r0, #0
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	0159      	lsls	r1, r3, #5
 8003168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316c:	0150      	lsls	r0, r2, #5
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4621      	mov	r1, r4
 8003174:	1a51      	subs	r1, r2, r1
 8003176:	62b9      	str	r1, [r7, #40]	; 0x28
 8003178:	4629      	mov	r1, r5
 800317a:	eb63 0301 	sbc.w	r3, r3, r1
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800318c:	4649      	mov	r1, r9
 800318e:	018b      	lsls	r3, r1, #6
 8003190:	4641      	mov	r1, r8
 8003192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003196:	4641      	mov	r1, r8
 8003198:	018a      	lsls	r2, r1, #6
 800319a:	4641      	mov	r1, r8
 800319c:	ebb2 0a01 	subs.w	sl, r2, r1
 80031a0:	4649      	mov	r1, r9
 80031a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ba:	4692      	mov	sl, r2
 80031bc:	469b      	mov	fp, r3
 80031be:	4623      	mov	r3, r4
 80031c0:	eb1a 0303 	adds.w	r3, sl, r3
 80031c4:	623b      	str	r3, [r7, #32]
 80031c6:	462b      	mov	r3, r5
 80031c8:	eb4b 0303 	adc.w	r3, fp, r3
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80031da:	4629      	mov	r1, r5
 80031dc:	028b      	lsls	r3, r1, #10
 80031de:	4621      	mov	r1, r4
 80031e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031e4:	4621      	mov	r1, r4
 80031e6:	028a      	lsls	r2, r1, #10
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031f0:	2200      	movs	r2, #0
 80031f2:	673b      	str	r3, [r7, #112]	; 0x70
 80031f4:	677a      	str	r2, [r7, #116]	; 0x74
 80031f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80031fa:	f7fd f861 	bl	80002c0 <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4613      	mov	r3, r2
 8003204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003208:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	3301      	adds	r3, #1
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800321a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800321e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800322a:	e0eb      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800322c:	4b38      	ldr	r3, [pc, #224]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003238:	4b35      	ldr	r3, [pc, #212]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d06b      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	099b      	lsrs	r3, r3, #6
 800324a:	2200      	movs	r2, #0
 800324c:	66bb      	str	r3, [r7, #104]	; 0x68
 800324e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003256:	663b      	str	r3, [r7, #96]	; 0x60
 8003258:	2300      	movs	r3, #0
 800325a:	667b      	str	r3, [r7, #100]	; 0x64
 800325c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003260:	4622      	mov	r2, r4
 8003262:	462b      	mov	r3, r5
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	0159      	lsls	r1, r3, #5
 800326e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003272:	0150      	lsls	r0, r2, #5
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4621      	mov	r1, r4
 800327a:	1a51      	subs	r1, r2, r1
 800327c:	61b9      	str	r1, [r7, #24]
 800327e:	4629      	mov	r1, r5
 8003280:	eb63 0301 	sbc.w	r3, r3, r1
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003292:	4659      	mov	r1, fp
 8003294:	018b      	lsls	r3, r1, #6
 8003296:	4651      	mov	r1, sl
 8003298:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800329c:	4651      	mov	r1, sl
 800329e:	018a      	lsls	r2, r1, #6
 80032a0:	4651      	mov	r1, sl
 80032a2:	ebb2 0801 	subs.w	r8, r2, r1
 80032a6:	4659      	mov	r1, fp
 80032a8:	eb63 0901 	sbc.w	r9, r3, r1
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032c0:	4690      	mov	r8, r2
 80032c2:	4699      	mov	r9, r3
 80032c4:	4623      	mov	r3, r4
 80032c6:	eb18 0303 	adds.w	r3, r8, r3
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	462b      	mov	r3, r5
 80032ce:	eb49 0303 	adc.w	r3, r9, r3
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80032e0:	4629      	mov	r1, r5
 80032e2:	024b      	lsls	r3, r1, #9
 80032e4:	4621      	mov	r1, r4
 80032e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032ea:	4621      	mov	r1, r4
 80032ec:	024a      	lsls	r2, r1, #9
 80032ee:	4610      	mov	r0, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032f6:	2200      	movs	r2, #0
 80032f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80032fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80032fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003300:	f7fc ffde 	bl	80002c0 <__aeabi_uldivmod>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4613      	mov	r3, r2
 800330a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800330e:	e065      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x420>
 8003310:	40023800 	.word	0x40023800
 8003314:	00f42400 	.word	0x00f42400
 8003318:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331c:	4b3d      	ldr	r3, [pc, #244]	; (8003414 <HAL_RCC_GetSysClockFreq+0x458>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	2200      	movs	r2, #0
 8003324:	4618      	mov	r0, r3
 8003326:	4611      	mov	r1, r2
 8003328:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800332c:	653b      	str	r3, [r7, #80]	; 0x50
 800332e:	2300      	movs	r3, #0
 8003330:	657b      	str	r3, [r7, #84]	; 0x54
 8003332:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003336:	4642      	mov	r2, r8
 8003338:	464b      	mov	r3, r9
 800333a:	f04f 0000 	mov.w	r0, #0
 800333e:	f04f 0100 	mov.w	r1, #0
 8003342:	0159      	lsls	r1, r3, #5
 8003344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003348:	0150      	lsls	r0, r2, #5
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4641      	mov	r1, r8
 8003350:	1a51      	subs	r1, r2, r1
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	4649      	mov	r1, r9
 8003356:	eb63 0301 	sbc.w	r3, r3, r1
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003368:	4659      	mov	r1, fp
 800336a:	018b      	lsls	r3, r1, #6
 800336c:	4651      	mov	r1, sl
 800336e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003372:	4651      	mov	r1, sl
 8003374:	018a      	lsls	r2, r1, #6
 8003376:	4651      	mov	r1, sl
 8003378:	1a54      	subs	r4, r2, r1
 800337a:	4659      	mov	r1, fp
 800337c:	eb63 0501 	sbc.w	r5, r3, r1
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	00eb      	lsls	r3, r5, #3
 800338a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800338e:	00e2      	lsls	r2, r4, #3
 8003390:	4614      	mov	r4, r2
 8003392:	461d      	mov	r5, r3
 8003394:	4643      	mov	r3, r8
 8003396:	18e3      	adds	r3, r4, r3
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	464b      	mov	r3, r9
 800339c:	eb45 0303 	adc.w	r3, r5, r3
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ae:	4629      	mov	r1, r5
 80033b0:	028b      	lsls	r3, r1, #10
 80033b2:	4621      	mov	r1, r4
 80033b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b8:	4621      	mov	r1, r4
 80033ba:	028a      	lsls	r2, r1, #10
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033c4:	2200      	movs	r2, #0
 80033c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80033c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80033ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033ce:	f7fc ff77 	bl	80002c0 <__aeabi_uldivmod>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4613      	mov	r3, r2
 80033d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033dc:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <HAL_RCC_GetSysClockFreq+0x458>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	0f1b      	lsrs	r3, r3, #28
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80033ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033fa:	e003      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_RCC_GetSysClockFreq+0x45c>)
 80033fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003402:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003408:	4618      	mov	r0, r3
 800340a:	37b8      	adds	r7, #184	; 0xb8
 800340c:	46bd      	mov	sp, r7
 800340e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	00f42400 	.word	0x00f42400

0800341c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e28d      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8083 	beq.w	8003542 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800343c:	4b94      	ldr	r3, [pc, #592]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b04      	cmp	r3, #4
 8003446:	d019      	beq.n	800347c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003448:	4b91      	ldr	r3, [pc, #580]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003450:	2b08      	cmp	r3, #8
 8003452:	d106      	bne.n	8003462 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003454:	4b8e      	ldr	r3, [pc, #568]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003460:	d00c      	beq.n	800347c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003462:	4b8b      	ldr	r3, [pc, #556]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800346a:	2b0c      	cmp	r3, #12
 800346c:	d112      	bne.n	8003494 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346e:	4b88      	ldr	r3, [pc, #544]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347a:	d10b      	bne.n	8003494 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	4b84      	ldr	r3, [pc, #528]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d05b      	beq.n	8003540 <HAL_RCC_OscConfig+0x124>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d157      	bne.n	8003540 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e25a      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349c:	d106      	bne.n	80034ac <HAL_RCC_OscConfig+0x90>
 800349e:	4b7c      	ldr	r3, [pc, #496]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a7b      	ldr	r2, [pc, #492]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e01d      	b.n	80034e8 <HAL_RCC_OscConfig+0xcc>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0xb4>
 80034b6:	4b76      	ldr	r3, [pc, #472]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a75      	ldr	r2, [pc, #468]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b73      	ldr	r3, [pc, #460]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a72      	ldr	r2, [pc, #456]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e00b      	b.n	80034e8 <HAL_RCC_OscConfig+0xcc>
 80034d0:	4b6f      	ldr	r3, [pc, #444]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a6e      	ldr	r2, [pc, #440]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b6c      	ldr	r3, [pc, #432]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a6b      	ldr	r2, [pc, #428]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe f90e 	bl	8001710 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f8:	f7fe f90a 	bl	8001710 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e21f      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	4b61      	ldr	r3, [pc, #388]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0xdc>
 8003516:	e014      	b.n	8003542 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe f8fa 	bl	8001710 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003520:	f7fe f8f6 	bl	8001710 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e20b      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003532:	4b57      	ldr	r3, [pc, #348]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x104>
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d06f      	beq.n	800362e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800354e:	4b50      	ldr	r3, [pc, #320]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b00      	cmp	r3, #0
 8003558:	d017      	beq.n	800358a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800355a:	4b4d      	ldr	r3, [pc, #308]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003562:	2b08      	cmp	r3, #8
 8003564:	d105      	bne.n	8003572 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003566:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003572:	4b47      	ldr	r3, [pc, #284]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800357a:	2b0c      	cmp	r3, #12
 800357c:	d11c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800357e:	4b44      	ldr	r3, [pc, #272]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d116      	bne.n	80035b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358a:	4b41      	ldr	r3, [pc, #260]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_RCC_OscConfig+0x186>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e1d3      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a2:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4937      	ldr	r1, [pc, #220]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	e03a      	b.n	800362e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c0:	4b34      	ldr	r3, [pc, #208]	; (8003694 <HAL_RCC_OscConfig+0x278>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c6:	f7fe f8a3 	bl	8001710 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ce:	f7fe f89f 	bl	8001710 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e1b4      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e0:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4925      	ldr	r1, [pc, #148]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
 8003600:	e015      	b.n	800362e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003602:	4b24      	ldr	r3, [pc, #144]	; (8003694 <HAL_RCC_OscConfig+0x278>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fe f882 	bl	8001710 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003610:	f7fe f87e 	bl	8001710 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e193      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d036      	beq.n	80036a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d016      	beq.n	8003670 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_RCC_OscConfig+0x27c>)
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fe f862 	bl	8001710 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003650:	f7fe f85e 	bl	8001710 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e173      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x234>
 800366e:	e01b      	b.n	80036a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_RCC_OscConfig+0x27c>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003676:	f7fe f84b 	bl	8001710 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367c:	e00e      	b.n	800369c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800367e:	f7fe f847 	bl	8001710 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d907      	bls.n	800369c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e15c      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
 8003690:	40023800 	.word	0x40023800
 8003694:	42470000 	.word	0x42470000
 8003698:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800369c:	4b8a      	ldr	r3, [pc, #552]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800369e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ea      	bne.n	800367e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8097 	beq.w	80037e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b6:	2300      	movs	r3, #0
 80036b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ba:	4b83      	ldr	r3, [pc, #524]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10f      	bne.n	80036e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	4b7f      	ldr	r3, [pc, #508]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a7e      	ldr	r2, [pc, #504]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b7c      	ldr	r3, [pc, #496]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	4b79      	ldr	r3, [pc, #484]	; (80038cc <HAL_RCC_OscConfig+0x4b0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d118      	bne.n	8003724 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f2:	4b76      	ldr	r3, [pc, #472]	; (80038cc <HAL_RCC_OscConfig+0x4b0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a75      	ldr	r2, [pc, #468]	; (80038cc <HAL_RCC_OscConfig+0x4b0>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fe:	f7fe f807 	bl	8001710 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003706:	f7fe f803 	bl	8001710 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e118      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	4b6c      	ldr	r3, [pc, #432]	; (80038cc <HAL_RCC_OscConfig+0x4b0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x31e>
 800372c:	4b66      	ldr	r3, [pc, #408]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a65      	ldr	r2, [pc, #404]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	e01c      	b.n	8003774 <HAL_RCC_OscConfig+0x358>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b05      	cmp	r3, #5
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x340>
 8003742:	4b61      	ldr	r3, [pc, #388]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a60      	ldr	r2, [pc, #384]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003748:	f043 0304 	orr.w	r3, r3, #4
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	4b5e      	ldr	r3, [pc, #376]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a5d      	ldr	r2, [pc, #372]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0x358>
 800375c:	4b5a      	ldr	r3, [pc, #360]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	4a59      	ldr	r2, [pc, #356]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
 8003768:	4b57      	ldr	r3, [pc, #348]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376c:	4a56      	ldr	r2, [pc, #344]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800376e:	f023 0304 	bic.w	r3, r3, #4
 8003772:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d015      	beq.n	80037a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fd ffc8 	bl	8001710 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003782:	e00a      	b.n	800379a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003784:	f7fd ffc4 	bl	8001710 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e0d7      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379a:	4b4b      	ldr	r3, [pc, #300]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0ee      	beq.n	8003784 <HAL_RCC_OscConfig+0x368>
 80037a6:	e014      	b.n	80037d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fd ffb2 	bl	8001710 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b0:	f7fd ffae 	bl	8001710 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e0c1      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c6:	4b40      	ldr	r3, [pc, #256]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1ee      	bne.n	80037b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d105      	bne.n	80037e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d8:	4b3b      	ldr	r3, [pc, #236]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	4a3a      	ldr	r2, [pc, #232]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80037de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80ad 	beq.w	8003948 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ee:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d060      	beq.n	80038bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d145      	bne.n	800388e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <HAL_RCC_OscConfig+0x4b4>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fd ff82 	bl	8001710 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003810:	f7fd ff7e 	bl	8001710 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e093      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	019b      	lsls	r3, r3, #6
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	3b01      	subs	r3, #1
 8003848:	041b      	lsls	r3, r3, #16
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	071b      	lsls	r3, r3, #28
 800385a:	491b      	ldr	r1, [pc, #108]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x4b4>)
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003866:	f7fd ff53 	bl	8001710 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386e:	f7fd ff4f 	bl	8001710 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e064      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x452>
 800388c:	e05c      	b.n	8003948 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <HAL_RCC_OscConfig+0x4b4>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fd ff3c 	bl	8001710 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389c:	f7fd ff38 	bl	8001710 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e04d      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x480>
 80038ba:	e045      	b.n	8003948 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d107      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e040      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40007000 	.word	0x40007000
 80038d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038d4:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <HAL_RCC_OscConfig+0x538>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d030      	beq.n	8003944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d129      	bne.n	8003944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d122      	bne.n	8003944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003904:	4013      	ands	r3, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800390a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800390c:	4293      	cmp	r3, r2
 800390e:	d119      	bne.n	8003944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	3b01      	subs	r3, #1
 800391e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d10f      	bne.n	8003944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d107      	bne.n	8003944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800

08003958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e041      	b.n	80039ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd fcb2 	bl	80012e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	4619      	mov	r1, r3
 8003996:	4610      	mov	r0, r2
 8003998:	f000 faa0 	bl	8003edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d001      	beq.n	8003a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e04e      	b.n	8003aae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a23      	ldr	r2, [pc, #140]	; (8003abc <HAL_TIM_Base_Start_IT+0xc4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d022      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3a:	d01d      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d018      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1c      	ldr	r2, [pc, #112]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00e      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1b      	ldr	r2, [pc, #108]	; (8003acc <HAL_TIM_Base_Start_IT+0xd4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d009      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a19      	ldr	r2, [pc, #100]	; (8003ad0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d111      	bne.n	8003a9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b06      	cmp	r3, #6
 8003a88:	d010      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0201 	orr.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9a:	e007      	b.n	8003aac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800
 8003ac8:	40000c00 	.word	0x40000c00
 8003acc:	40010400 	.word	0x40010400
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40001800 	.word	0x40001800

08003ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d122      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d11b      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0202 	mvn.w	r2, #2
 8003b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f9bf 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 8003b20:	e005      	b.n	8003b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f9b1 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f9c2 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d122      	bne.n	8003b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d11b      	bne.n	8003b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0204 	mvn.w	r2, #4
 8003b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f995 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 8003b74:	e005      	b.n	8003b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f987 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f998 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d122      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d11b      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0208 	mvn.w	r2, #8
 8003bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f96b 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 8003bc8:	e005      	b.n	8003bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f95d 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f96e 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	2b10      	cmp	r3, #16
 8003be8:	d122      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d11b      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0210 	mvn.w	r2, #16
 8003c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2208      	movs	r2, #8
 8003c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f941 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 8003c1c:	e005      	b.n	8003c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f933 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f944 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0201 	mvn.w	r2, #1
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f90d 	bl	8003e76 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	2b80      	cmp	r3, #128	; 0x80
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	2b80      	cmp	r3, #128	; 0x80
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 faea 	bl	800425c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	d10e      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	d107      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f909 	bl	8003ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d107      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0220 	mvn.w	r2, #32
 8003cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fab4 	bl	8004248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_TIM_ConfigClockSource+0x1c>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e0b4      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x186>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3c:	d03e      	beq.n	8003dbc <HAL_TIM_ConfigClockSource+0xd4>
 8003d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d42:	f200 8087 	bhi.w	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4a:	f000 8086 	beq.w	8003e5a <HAL_TIM_ConfigClockSource+0x172>
 8003d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d52:	d87f      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d54:	2b70      	cmp	r3, #112	; 0x70
 8003d56:	d01a      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0xa6>
 8003d58:	2b70      	cmp	r3, #112	; 0x70
 8003d5a:	d87b      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d5c:	2b60      	cmp	r3, #96	; 0x60
 8003d5e:	d050      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x11a>
 8003d60:	2b60      	cmp	r3, #96	; 0x60
 8003d62:	d877      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d64:	2b50      	cmp	r3, #80	; 0x50
 8003d66:	d03c      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0xfa>
 8003d68:	2b50      	cmp	r3, #80	; 0x50
 8003d6a:	d873      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d058      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x13a>
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d86f      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d74:	2b30      	cmp	r3, #48	; 0x30
 8003d76:	d064      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x15a>
 8003d78:	2b30      	cmp	r3, #48	; 0x30
 8003d7a:	d86b      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d060      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x15a>
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d867      	bhi.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d05c      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x15a>
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d05a      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x15a>
 8003d8c:	e062      	b.n	8003e54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6899      	ldr	r1, [r3, #8]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f000 f9b7 	bl	8004110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003db0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	609a      	str	r2, [r3, #8]
      break;
 8003dba:	e04f      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6899      	ldr	r1, [r3, #8]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f000 f9a0 	bl	8004110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dde:	609a      	str	r2, [r3, #8]
      break;
 8003de0:	e03c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f000 f914 	bl	800401c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2150      	movs	r1, #80	; 0x50
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f96d 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003e00:	e02c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f000 f933 	bl	800407a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2160      	movs	r1, #96	; 0x60
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f95d 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003e20:	e01c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f000 f8f4 	bl	800401c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2140      	movs	r1, #64	; 0x40
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f94d 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003e40:	e00c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f000 f944 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003e52:	e003      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
      break;
 8003e58:	e000      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a40      	ldr	r2, [pc, #256]	; (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d00f      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3d      	ldr	r2, [pc, #244]	; (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a3c      	ldr	r2, [pc, #240]	; (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a3b      	ldr	r2, [pc, #236]	; (8003ffc <TIM_Base_SetConfig+0x120>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a3a      	ldr	r2, [pc, #232]	; (8004000 <TIM_Base_SetConfig+0x124>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d108      	bne.n	8003f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a2f      	ldr	r2, [pc, #188]	; (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d02b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d027      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a2c      	ldr	r2, [pc, #176]	; (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d023      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2b      	ldr	r2, [pc, #172]	; (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01f      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a2a      	ldr	r2, [pc, #168]	; (8003ffc <TIM_Base_SetConfig+0x120>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a29      	ldr	r2, [pc, #164]	; (8004000 <TIM_Base_SetConfig+0x124>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d017      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a28      	ldr	r2, [pc, #160]	; (8004004 <TIM_Base_SetConfig+0x128>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a27      	ldr	r2, [pc, #156]	; (8004008 <TIM_Base_SetConfig+0x12c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00f      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a26      	ldr	r2, [pc, #152]	; (800400c <TIM_Base_SetConfig+0x130>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a25      	ldr	r2, [pc, #148]	; (8004010 <TIM_Base_SetConfig+0x134>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a24      	ldr	r2, [pc, #144]	; (8004014 <TIM_Base_SetConfig+0x138>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d003      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a23      	ldr	r2, [pc, #140]	; (8004018 <TIM_Base_SetConfig+0x13c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d108      	bne.n	8003fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0xf8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a0c      	ldr	r2, [pc, #48]	; (8004000 <TIM_Base_SetConfig+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d103      	bne.n	8003fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	615a      	str	r2, [r3, #20]
}
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40010400 	.word	0x40010400
 8004004:	40014000 	.word	0x40014000
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800
 8004010:	40001800 	.word	0x40001800
 8004014:	40001c00 	.word	0x40001c00
 8004018:	40002000 	.word	0x40002000

0800401c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f023 0201 	bic.w	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f023 030a 	bic.w	r3, r3, #10
 8004058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800407a:	b480      	push	{r7}
 800407c:	b087      	sub	sp, #28
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f023 0210 	bic.w	r2, r3, #16
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	031b      	lsls	r3, r3, #12
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f043 0307 	orr.w	r3, r3, #7
 80040fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800412a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	021a      	lsls	r2, r3, #8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	431a      	orrs	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4313      	orrs	r3, r2
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	609a      	str	r2, [r3, #8]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004164:	2302      	movs	r3, #2
 8004166:	e05a      	b.n	800421e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a21      	ldr	r2, [pc, #132]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b4:	d01d      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d018      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00e      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d009      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a17      	ldr	r2, [pc, #92]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a15      	ldr	r2, [pc, #84]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d10c      	bne.n	800420c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	4313      	orrs	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40010000 	.word	0x40010000
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800
 8004238:	40000c00 	.word	0x40000c00
 800423c:	40010400 	.word	0x40010400
 8004240:	40014000 	.word	0x40014000
 8004244:	40001800 	.word	0x40001800

08004248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e03f      	b.n	8004302 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd f84c 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	; 0x24
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fddf 	bl	8004e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b08a      	sub	sp, #40	; 0x28
 800430e:	af02      	add	r7, sp, #8
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	603b      	str	r3, [r7, #0]
 8004316:	4613      	mov	r3, r2
 8004318:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	d17c      	bne.n	8004424 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_UART_Transmit+0x2c>
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e075      	b.n	8004426 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_UART_Transmit+0x3e>
 8004344:	2302      	movs	r3, #2
 8004346:	e06e      	b.n	8004426 <HAL_UART_Transmit+0x11c>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2221      	movs	r2, #33	; 0x21
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800435e:	f7fd f9d7 	bl	8001710 <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	88fa      	ldrh	r2, [r7, #6]
 8004368:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	88fa      	ldrh	r2, [r7, #6]
 800436e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004378:	d108      	bne.n	800438c <HAL_UART_Transmit+0x82>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d104      	bne.n	800438c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	e003      	b.n	8004394 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800439c:	e02a      	b.n	80043f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2180      	movs	r1, #128	; 0x80
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fb1f 	bl	80049ec <UART_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e036      	b.n	8004426 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10b      	bne.n	80043d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	3302      	adds	r3, #2
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	e007      	b.n	80043e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	3301      	adds	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1cf      	bne.n	800439e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2200      	movs	r2, #0
 8004406:	2140      	movs	r1, #64	; 0x40
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 faef 	bl	80049ec <UART_WaitOnFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e006      	b.n	8004426 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004424:	2302      	movs	r3, #2
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	4613      	mov	r3, r2
 800443a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b20      	cmp	r3, #32
 8004446:	d11d      	bne.n	8004484 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_UART_Receive_IT+0x26>
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e016      	b.n	8004486 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_UART_Receive_IT+0x38>
 8004462:	2302      	movs	r3, #2
 8004464:	e00f      	b.n	8004486 <HAL_UART_Receive_IT+0x58>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	461a      	mov	r2, r3
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fb24 	bl	8004ac8 <UART_Start_Receive_IT>
 8004480:	4603      	mov	r3, r0
 8004482:	e000      	b.n	8004486 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b0ba      	sub	sp, #232	; 0xe8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044bc:	2300      	movs	r3, #0
 80044be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10f      	bne.n	80044f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <HAL_UART_IRQHandler+0x66>
 80044e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fc07 	bl	8004d02 <UART_Receive_IT>
      return;
 80044f4:	e256      	b.n	80049a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 80de 	beq.w	80046bc <HAL_UART_IRQHandler+0x22c>
 8004500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800450c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004510:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80d1 	beq.w	80046bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800451a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00b      	beq.n	800453e <HAL_UART_IRQHandler+0xae>
 8004526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d005      	beq.n	800453e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f043 0201 	orr.w	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800453e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00b      	beq.n	8004562 <HAL_UART_IRQHandler+0xd2>
 800454a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f043 0202 	orr.w	r2, r3, #2
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <HAL_UART_IRQHandler+0xf6>
 800456e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f043 0204 	orr.w	r2, r3, #4
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d011      	beq.n	80045b6 <HAL_UART_IRQHandler+0x126>
 8004592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d105      	bne.n	80045aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800459e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f043 0208 	orr.w	r2, r3, #8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 81ed 	beq.w	800499a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_UART_IRQHandler+0x14e>
 80045cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fb92 	bl	8004d02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b40      	cmp	r3, #64	; 0x40
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d103      	bne.n	800460a <HAL_UART_IRQHandler+0x17a>
 8004602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004606:	2b00      	cmp	r3, #0
 8004608:	d04f      	beq.n	80046aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fa9a 	bl	8004b44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d141      	bne.n	80046a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3314      	adds	r3, #20
 8004624:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3314      	adds	r3, #20
 8004646:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800464a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800464e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1d9      	bne.n	800461e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	2b00      	cmp	r3, #0
 8004670:	d013      	beq.n	800469a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	4a7d      	ldr	r2, [pc, #500]	; (800486c <HAL_UART_IRQHandler+0x3dc>)
 8004678:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467e:	4618      	mov	r0, r3
 8004680:	f7fd fede 	bl	8002440 <HAL_DMA_Abort_IT>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d016      	beq.n	80046b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004694:	4610      	mov	r0, r2
 8004696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004698:	e00e      	b.n	80046b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f990 	bl	80049c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a0:	e00a      	b.n	80046b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f98c 	bl	80049c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a8:	e006      	b.n	80046b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f988 	bl	80049c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80046b6:	e170      	b.n	800499a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b8:	bf00      	nop
    return;
 80046ba:	e16e      	b.n	800499a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	f040 814a 	bne.w	800495a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8143 	beq.w	800495a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 813c 	beq.w	800495a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046e2:	2300      	movs	r3, #0
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	f040 80b4 	bne.w	8004870 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004714:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 8140 	beq.w	800499e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004726:	429a      	cmp	r2, r3
 8004728:	f080 8139 	bcs.w	800499e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004732:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473e:	f000 8088 	beq.w	8004852 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	330c      	adds	r3, #12
 8004748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800475c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	330c      	adds	r3, #12
 800476a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800476e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800477a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1d9      	bne.n	8004742 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3314      	adds	r3, #20
 8004794:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800479e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3314      	adds	r3, #20
 80047ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e1      	bne.n	800478e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3314      	adds	r3, #20
 80047d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3314      	adds	r3, #20
 80047ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e3      	bne.n	80047ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	330c      	adds	r3, #12
 8004816:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481a:	e853 3f00 	ldrex	r3, [r3]
 800481e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004822:	f023 0310 	bic.w	r3, r3, #16
 8004826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	330c      	adds	r3, #12
 8004830:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004834:	65ba      	str	r2, [r7, #88]	; 0x58
 8004836:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800483a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e3      	bne.n	8004810 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	4618      	mov	r0, r3
 800484e:	f7fd fd87 	bl	8002360 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800485a:	b29b      	uxth	r3, r3
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	4619      	mov	r1, r3
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f8b6 	bl	80049d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004868:	e099      	b.n	800499e <HAL_UART_IRQHandler+0x50e>
 800486a:	bf00      	nop
 800486c:	08004c0b 	.word	0x08004c0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004878:	b29b      	uxth	r3, r3
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 808b 	beq.w	80049a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800488c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8086 	beq.w	80049a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	330c      	adds	r3, #12
 800489c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048ba:	647a      	str	r2, [r7, #68]	; 0x44
 80048bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e3      	bne.n	8004896 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3314      	adds	r3, #20
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	623b      	str	r3, [r7, #32]
   return(result);
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3314      	adds	r3, #20
 80048ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048f2:	633a      	str	r2, [r7, #48]	; 0x30
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e3      	bne.n	80048ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	330c      	adds	r3, #12
 800491a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	60fb      	str	r3, [r7, #12]
   return(result);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0310 	bic.w	r3, r3, #16
 800492a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004938:	61fa      	str	r2, [r7, #28]
 800493a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	69b9      	ldr	r1, [r7, #24]
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	617b      	str	r3, [r7, #20]
   return(result);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e3      	bne.n	8004914 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800494c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f83e 	bl	80049d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004958:	e023      	b.n	80049a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800495a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b00      	cmp	r3, #0
 8004964:	d009      	beq.n	800497a <HAL_UART_IRQHandler+0x4ea>
 8004966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f95d 	bl	8004c32 <UART_Transmit_IT>
    return;
 8004978:	e014      	b.n	80049a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800497a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00e      	beq.n	80049a4 <HAL_UART_IRQHandler+0x514>
 8004986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800498a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f99d 	bl	8004cd2 <UART_EndTransmit_IT>
    return;
 8004998:	e004      	b.n	80049a4 <HAL_UART_IRQHandler+0x514>
    return;
 800499a:	bf00      	nop
 800499c:	e002      	b.n	80049a4 <HAL_UART_IRQHandler+0x514>
      return;
 800499e:	bf00      	nop
 80049a0:	e000      	b.n	80049a4 <HAL_UART_IRQHandler+0x514>
      return;
 80049a2:	bf00      	nop
  }
}
 80049a4:	37e8      	adds	r7, #232	; 0xe8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop

080049ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b090      	sub	sp, #64	; 0x40
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fc:	e050      	b.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a04:	d04c      	beq.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d007      	beq.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a0c:	f7fc fe80 	bl	8001710 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d241      	bcs.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	330c      	adds	r3, #12
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	330c      	adds	r3, #12
 8004a3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a3c:	637a      	str	r2, [r7, #52]	; 0x34
 8004a3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e5      	bne.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3314      	adds	r3, #20
 8004a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f023 0301 	bic.w	r3, r3, #1
 8004a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3314      	adds	r3, #20
 8004a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a70:	623a      	str	r2, [r7, #32]
 8004a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	69f9      	ldr	r1, [r7, #28]
 8004a76:	6a3a      	ldr	r2, [r7, #32]
 8004a78:	e841 2300 	strex	r3, r2, [r1]
 8004a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e5      	bne.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e00f      	b.n	8004ac0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	bf0c      	ite	eq
 8004ab0:	2301      	moveq	r3, #1
 8004ab2:	2300      	movne	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d09f      	beq.n	80049fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3740      	adds	r7, #64	; 0x40
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2222      	movs	r2, #34	; 0x22
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0220 	orr.w	r2, r2, #32
 8004b34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b095      	sub	sp, #84	; 0x54
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	330c      	adds	r3, #12
 8004b52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	330c      	adds	r3, #12
 8004b6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b6c:	643a      	str	r2, [r7, #64]	; 0x40
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e5      	bne.n	8004b4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3314      	adds	r3, #20
 8004b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3314      	adds	r3, #20
 8004b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ba0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e5      	bne.n	8004b80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d119      	bne.n	8004bf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f023 0310 	bic.w	r3, r3, #16
 8004bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bdc:	61ba      	str	r2, [r7, #24]
 8004bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6979      	ldr	r1, [r7, #20]
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e5      	bne.n	8004bbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bfe:	bf00      	nop
 8004c00:	3754      	adds	r7, #84	; 0x54
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff fecb 	bl	80049c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c2a:	bf00      	nop
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b21      	cmp	r3, #33	; 0x21
 8004c44:	d13e      	bne.n	8004cc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4e:	d114      	bne.n	8004c7a <UART_Transmit_IT+0x48>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d110      	bne.n	8004c7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	1c9a      	adds	r2, r3, #2
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	621a      	str	r2, [r3, #32]
 8004c78:	e008      	b.n	8004c8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	1c59      	adds	r1, r3, #1
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6211      	str	r1, [r2, #32]
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10f      	bne.n	8004cc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e000      	b.n	8004cc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cc4:	2302      	movs	r3, #2
  }
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff fe5a 	bl	80049ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b08c      	sub	sp, #48	; 0x30
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b22      	cmp	r3, #34	; 0x22
 8004d14:	f040 80ab 	bne.w	8004e6e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d20:	d117      	bne.n	8004d52 <UART_Receive_IT+0x50>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d113      	bne.n	8004d52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	1c9a      	adds	r2, r3, #2
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d50:	e026      	b.n	8004da0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d64:	d007      	beq.n	8004d76 <UART_Receive_IT+0x74>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10a      	bne.n	8004d84 <UART_Receive_IT+0x82>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	e008      	b.n	8004d96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	4619      	mov	r1, r3
 8004dae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d15a      	bne.n	8004e6a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0220 	bic.w	r2, r2, #32
 8004dc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0201 	bic.w	r2, r2, #1
 8004de2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d135      	bne.n	8004e60 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f023 0310 	bic.w	r3, r3, #16
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1a:	623a      	str	r2, [r7, #32]
 8004e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	69f9      	ldr	r1, [r7, #28]
 8004e20:	6a3a      	ldr	r2, [r7, #32]
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e5      	bne.n	8004dfa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d10a      	bne.n	8004e52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff fdbb 	bl	80049d4 <HAL_UARTEx_RxEventCallback>
 8004e5e:	e002      	b.n	8004e66 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7fc f8b5 	bl	8000fd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e002      	b.n	8004e70 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e000      	b.n	8004e70 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e6e:	2302      	movs	r3, #2
  }
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3730      	adds	r7, #48	; 0x30
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e7c:	b0c0      	sub	sp, #256	; 0x100
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	68d9      	ldr	r1, [r3, #12]
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	ea40 0301 	orr.w	r3, r0, r1
 8004ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ed0:	f021 010c 	bic.w	r1, r1, #12
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef2:	6999      	ldr	r1, [r3, #24]
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	ea40 0301 	orr.w	r3, r0, r1
 8004efe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4b8f      	ldr	r3, [pc, #572]	; (8005144 <UART_SetConfig+0x2cc>)
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d005      	beq.n	8004f18 <UART_SetConfig+0xa0>
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b8d      	ldr	r3, [pc, #564]	; (8005148 <UART_SetConfig+0x2d0>)
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d104      	bne.n	8004f22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f18:	f7fe f83c 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 8004f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f20:	e003      	b.n	8004f2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f22:	f7fe f823 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 8004f26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f34:	f040 810c 	bne.w	8005150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	462b      	mov	r3, r5
 8004f4e:	1891      	adds	r1, r2, r2
 8004f50:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f52:	415b      	adcs	r3, r3
 8004f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	eb12 0801 	adds.w	r8, r2, r1
 8004f60:	4629      	mov	r1, r5
 8004f62:	eb43 0901 	adc.w	r9, r3, r1
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f7a:	4690      	mov	r8, r2
 8004f7c:	4699      	mov	r9, r3
 8004f7e:	4623      	mov	r3, r4
 8004f80:	eb18 0303 	adds.w	r3, r8, r3
 8004f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f88:	462b      	mov	r3, r5
 8004f8a:	eb49 0303 	adc.w	r3, r9, r3
 8004f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	18db      	adds	r3, r3, r3
 8004faa:	653b      	str	r3, [r7, #80]	; 0x50
 8004fac:	4613      	mov	r3, r2
 8004fae:	eb42 0303 	adc.w	r3, r2, r3
 8004fb2:	657b      	str	r3, [r7, #84]	; 0x54
 8004fb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fbc:	f7fb f980 	bl	80002c0 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4b61      	ldr	r3, [pc, #388]	; (800514c <UART_SetConfig+0x2d4>)
 8004fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	011c      	lsls	r4, r3, #4
 8004fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	1891      	adds	r1, r2, r2
 8004fe6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fe8:	415b      	adcs	r3, r3
 8004fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	eb43 0b01 	adc.w	fp, r3, r1
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800500c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005010:	4692      	mov	sl, r2
 8005012:	469b      	mov	fp, r3
 8005014:	4643      	mov	r3, r8
 8005016:	eb1a 0303 	adds.w	r3, sl, r3
 800501a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800501e:	464b      	mov	r3, r9
 8005020:	eb4b 0303 	adc.w	r3, fp, r3
 8005024:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005034:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800503c:	460b      	mov	r3, r1
 800503e:	18db      	adds	r3, r3, r3
 8005040:	643b      	str	r3, [r7, #64]	; 0x40
 8005042:	4613      	mov	r3, r2
 8005044:	eb42 0303 	adc.w	r3, r2, r3
 8005048:	647b      	str	r3, [r7, #68]	; 0x44
 800504a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800504e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005052:	f7fb f935 	bl	80002c0 <__aeabi_uldivmod>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4611      	mov	r1, r2
 800505c:	4b3b      	ldr	r3, [pc, #236]	; (800514c <UART_SetConfig+0x2d4>)
 800505e:	fba3 2301 	umull	r2, r3, r3, r1
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	2264      	movs	r2, #100	; 0x64
 8005066:	fb02 f303 	mul.w	r3, r2, r3
 800506a:	1acb      	subs	r3, r1, r3
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005072:	4b36      	ldr	r3, [pc, #216]	; (800514c <UART_SetConfig+0x2d4>)
 8005074:	fba3 2302 	umull	r2, r3, r3, r2
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005080:	441c      	add	r4, r3
 8005082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005086:	2200      	movs	r2, #0
 8005088:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800508c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005094:	4642      	mov	r2, r8
 8005096:	464b      	mov	r3, r9
 8005098:	1891      	adds	r1, r2, r2
 800509a:	63b9      	str	r1, [r7, #56]	; 0x38
 800509c:	415b      	adcs	r3, r3
 800509e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050a4:	4641      	mov	r1, r8
 80050a6:	1851      	adds	r1, r2, r1
 80050a8:	6339      	str	r1, [r7, #48]	; 0x30
 80050aa:	4649      	mov	r1, r9
 80050ac:	414b      	adcs	r3, r1
 80050ae:	637b      	str	r3, [r7, #52]	; 0x34
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050bc:	4659      	mov	r1, fp
 80050be:	00cb      	lsls	r3, r1, #3
 80050c0:	4651      	mov	r1, sl
 80050c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050c6:	4651      	mov	r1, sl
 80050c8:	00ca      	lsls	r2, r1, #3
 80050ca:	4610      	mov	r0, r2
 80050cc:	4619      	mov	r1, r3
 80050ce:	4603      	mov	r3, r0
 80050d0:	4642      	mov	r2, r8
 80050d2:	189b      	adds	r3, r3, r2
 80050d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050d8:	464b      	mov	r3, r9
 80050da:	460a      	mov	r2, r1
 80050dc:	eb42 0303 	adc.w	r3, r2, r3
 80050e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050f8:	460b      	mov	r3, r1
 80050fa:	18db      	adds	r3, r3, r3
 80050fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050fe:	4613      	mov	r3, r2
 8005100:	eb42 0303 	adc.w	r3, r2, r3
 8005104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800510a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800510e:	f7fb f8d7 	bl	80002c0 <__aeabi_uldivmod>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4b0d      	ldr	r3, [pc, #52]	; (800514c <UART_SetConfig+0x2d4>)
 8005118:	fba3 1302 	umull	r1, r3, r3, r2
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	2164      	movs	r1, #100	; 0x64
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	3332      	adds	r3, #50	; 0x32
 800512a:	4a08      	ldr	r2, [pc, #32]	; (800514c <UART_SetConfig+0x2d4>)
 800512c:	fba2 2303 	umull	r2, r3, r2, r3
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	f003 0207 	and.w	r2, r3, #7
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4422      	add	r2, r4
 800513e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005140:	e106      	b.n	8005350 <UART_SetConfig+0x4d8>
 8005142:	bf00      	nop
 8005144:	40011000 	.word	0x40011000
 8005148:	40011400 	.word	0x40011400
 800514c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005154:	2200      	movs	r2, #0
 8005156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800515a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800515e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005162:	4642      	mov	r2, r8
 8005164:	464b      	mov	r3, r9
 8005166:	1891      	adds	r1, r2, r2
 8005168:	6239      	str	r1, [r7, #32]
 800516a:	415b      	adcs	r3, r3
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
 800516e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005172:	4641      	mov	r1, r8
 8005174:	1854      	adds	r4, r2, r1
 8005176:	4649      	mov	r1, r9
 8005178:	eb43 0501 	adc.w	r5, r3, r1
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	00eb      	lsls	r3, r5, #3
 8005186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800518a:	00e2      	lsls	r2, r4, #3
 800518c:	4614      	mov	r4, r2
 800518e:	461d      	mov	r5, r3
 8005190:	4643      	mov	r3, r8
 8005192:	18e3      	adds	r3, r4, r3
 8005194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005198:	464b      	mov	r3, r9
 800519a:	eb45 0303 	adc.w	r3, r5, r3
 800519e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051be:	4629      	mov	r1, r5
 80051c0:	008b      	lsls	r3, r1, #2
 80051c2:	4621      	mov	r1, r4
 80051c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c8:	4621      	mov	r1, r4
 80051ca:	008a      	lsls	r2, r1, #2
 80051cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051d0:	f7fb f876 	bl	80002c0 <__aeabi_uldivmod>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4b60      	ldr	r3, [pc, #384]	; (800535c <UART_SetConfig+0x4e4>)
 80051da:	fba3 2302 	umull	r2, r3, r3, r2
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	011c      	lsls	r4, r3, #4
 80051e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051f4:	4642      	mov	r2, r8
 80051f6:	464b      	mov	r3, r9
 80051f8:	1891      	adds	r1, r2, r2
 80051fa:	61b9      	str	r1, [r7, #24]
 80051fc:	415b      	adcs	r3, r3
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005204:	4641      	mov	r1, r8
 8005206:	1851      	adds	r1, r2, r1
 8005208:	6139      	str	r1, [r7, #16]
 800520a:	4649      	mov	r1, r9
 800520c:	414b      	adcs	r3, r1
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800521c:	4659      	mov	r1, fp
 800521e:	00cb      	lsls	r3, r1, #3
 8005220:	4651      	mov	r1, sl
 8005222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005226:	4651      	mov	r1, sl
 8005228:	00ca      	lsls	r2, r1, #3
 800522a:	4610      	mov	r0, r2
 800522c:	4619      	mov	r1, r3
 800522e:	4603      	mov	r3, r0
 8005230:	4642      	mov	r2, r8
 8005232:	189b      	adds	r3, r3, r2
 8005234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005238:	464b      	mov	r3, r9
 800523a:	460a      	mov	r2, r1
 800523c:	eb42 0303 	adc.w	r3, r2, r3
 8005240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	67bb      	str	r3, [r7, #120]	; 0x78
 800524e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800525c:	4649      	mov	r1, r9
 800525e:	008b      	lsls	r3, r1, #2
 8005260:	4641      	mov	r1, r8
 8005262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005266:	4641      	mov	r1, r8
 8005268:	008a      	lsls	r2, r1, #2
 800526a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800526e:	f7fb f827 	bl	80002c0 <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4611      	mov	r1, r2
 8005278:	4b38      	ldr	r3, [pc, #224]	; (800535c <UART_SetConfig+0x4e4>)
 800527a:	fba3 2301 	umull	r2, r3, r3, r1
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	2264      	movs	r2, #100	; 0x64
 8005282:	fb02 f303 	mul.w	r3, r2, r3
 8005286:	1acb      	subs	r3, r1, r3
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	3332      	adds	r3, #50	; 0x32
 800528c:	4a33      	ldr	r2, [pc, #204]	; (800535c <UART_SetConfig+0x4e4>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005298:	441c      	add	r4, r3
 800529a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800529e:	2200      	movs	r2, #0
 80052a0:	673b      	str	r3, [r7, #112]	; 0x70
 80052a2:	677a      	str	r2, [r7, #116]	; 0x74
 80052a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052a8:	4642      	mov	r2, r8
 80052aa:	464b      	mov	r3, r9
 80052ac:	1891      	adds	r1, r2, r2
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	415b      	adcs	r3, r3
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b8:	4641      	mov	r1, r8
 80052ba:	1851      	adds	r1, r2, r1
 80052bc:	6039      	str	r1, [r7, #0]
 80052be:	4649      	mov	r1, r9
 80052c0:	414b      	adcs	r3, r1
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052d0:	4659      	mov	r1, fp
 80052d2:	00cb      	lsls	r3, r1, #3
 80052d4:	4651      	mov	r1, sl
 80052d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052da:	4651      	mov	r1, sl
 80052dc:	00ca      	lsls	r2, r1, #3
 80052de:	4610      	mov	r0, r2
 80052e0:	4619      	mov	r1, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	4642      	mov	r2, r8
 80052e6:	189b      	adds	r3, r3, r2
 80052e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052ea:	464b      	mov	r3, r9
 80052ec:	460a      	mov	r2, r1
 80052ee:	eb42 0303 	adc.w	r3, r2, r3
 80052f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	663b      	str	r3, [r7, #96]	; 0x60
 80052fe:	667a      	str	r2, [r7, #100]	; 0x64
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800530c:	4649      	mov	r1, r9
 800530e:	008b      	lsls	r3, r1, #2
 8005310:	4641      	mov	r1, r8
 8005312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005316:	4641      	mov	r1, r8
 8005318:	008a      	lsls	r2, r1, #2
 800531a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800531e:	f7fa ffcf 	bl	80002c0 <__aeabi_uldivmod>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <UART_SetConfig+0x4e4>)
 8005328:	fba3 1302 	umull	r1, r3, r3, r2
 800532c:	095b      	lsrs	r3, r3, #5
 800532e:	2164      	movs	r1, #100	; 0x64
 8005330:	fb01 f303 	mul.w	r3, r1, r3
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	3332      	adds	r3, #50	; 0x32
 800533a:	4a08      	ldr	r2, [pc, #32]	; (800535c <UART_SetConfig+0x4e4>)
 800533c:	fba2 2303 	umull	r2, r3, r2, r3
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	f003 020f 	and.w	r2, r3, #15
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4422      	add	r2, r4
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	bf00      	nop
 8005352:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005356:	46bd      	mov	sp, r7
 8005358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800535c:	51eb851f 	.word	0x51eb851f

08005360 <std>:
 8005360:	2300      	movs	r3, #0
 8005362:	b510      	push	{r4, lr}
 8005364:	4604      	mov	r4, r0
 8005366:	e9c0 3300 	strd	r3, r3, [r0]
 800536a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800536e:	6083      	str	r3, [r0, #8]
 8005370:	8181      	strh	r1, [r0, #12]
 8005372:	6643      	str	r3, [r0, #100]	; 0x64
 8005374:	81c2      	strh	r2, [r0, #14]
 8005376:	6183      	str	r3, [r0, #24]
 8005378:	4619      	mov	r1, r3
 800537a:	2208      	movs	r2, #8
 800537c:	305c      	adds	r0, #92	; 0x5c
 800537e:	f000 f91f 	bl	80055c0 <memset>
 8005382:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <std+0x58>)
 8005384:	6263      	str	r3, [r4, #36]	; 0x24
 8005386:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <std+0x5c>)
 8005388:	62a3      	str	r3, [r4, #40]	; 0x28
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <std+0x60>)
 800538c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800538e:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <std+0x64>)
 8005390:	6323      	str	r3, [r4, #48]	; 0x30
 8005392:	4b0d      	ldr	r3, [pc, #52]	; (80053c8 <std+0x68>)
 8005394:	6224      	str	r4, [r4, #32]
 8005396:	429c      	cmp	r4, r3
 8005398:	d006      	beq.n	80053a8 <std+0x48>
 800539a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800539e:	4294      	cmp	r4, r2
 80053a0:	d002      	beq.n	80053a8 <std+0x48>
 80053a2:	33d0      	adds	r3, #208	; 0xd0
 80053a4:	429c      	cmp	r4, r3
 80053a6:	d105      	bne.n	80053b4 <std+0x54>
 80053a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b0:	f000 b938 	b.w	8005624 <__retarget_lock_init_recursive>
 80053b4:	bd10      	pop	{r4, pc}
 80053b6:	bf00      	nop
 80053b8:	08005e85 	.word	0x08005e85
 80053bc:	08005ea7 	.word	0x08005ea7
 80053c0:	08005edf 	.word	0x08005edf
 80053c4:	08005f03 	.word	0x08005f03
 80053c8:	20004dac 	.word	0x20004dac

080053cc <stdio_exit_handler>:
 80053cc:	4a02      	ldr	r2, [pc, #8]	; (80053d8 <stdio_exit_handler+0xc>)
 80053ce:	4903      	ldr	r1, [pc, #12]	; (80053dc <stdio_exit_handler+0x10>)
 80053d0:	4803      	ldr	r0, [pc, #12]	; (80053e0 <stdio_exit_handler+0x14>)
 80053d2:	f000 b869 	b.w	80054a8 <_fwalk_sglue>
 80053d6:	bf00      	nop
 80053d8:	20000020 	.word	0x20000020
 80053dc:	08005e1d 	.word	0x08005e1d
 80053e0:	2000002c 	.word	0x2000002c

080053e4 <cleanup_stdio>:
 80053e4:	6841      	ldr	r1, [r0, #4]
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <cleanup_stdio+0x34>)
 80053e8:	4299      	cmp	r1, r3
 80053ea:	b510      	push	{r4, lr}
 80053ec:	4604      	mov	r4, r0
 80053ee:	d001      	beq.n	80053f4 <cleanup_stdio+0x10>
 80053f0:	f000 fd14 	bl	8005e1c <_fflush_r>
 80053f4:	68a1      	ldr	r1, [r4, #8]
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <cleanup_stdio+0x38>)
 80053f8:	4299      	cmp	r1, r3
 80053fa:	d002      	beq.n	8005402 <cleanup_stdio+0x1e>
 80053fc:	4620      	mov	r0, r4
 80053fe:	f000 fd0d 	bl	8005e1c <_fflush_r>
 8005402:	68e1      	ldr	r1, [r4, #12]
 8005404:	4b06      	ldr	r3, [pc, #24]	; (8005420 <cleanup_stdio+0x3c>)
 8005406:	4299      	cmp	r1, r3
 8005408:	d004      	beq.n	8005414 <cleanup_stdio+0x30>
 800540a:	4620      	mov	r0, r4
 800540c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005410:	f000 bd04 	b.w	8005e1c <_fflush_r>
 8005414:	bd10      	pop	{r4, pc}
 8005416:	bf00      	nop
 8005418:	20004dac 	.word	0x20004dac
 800541c:	20004e14 	.word	0x20004e14
 8005420:	20004e7c 	.word	0x20004e7c

08005424 <global_stdio_init.part.0>:
 8005424:	b510      	push	{r4, lr}
 8005426:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <global_stdio_init.part.0+0x30>)
 8005428:	4c0b      	ldr	r4, [pc, #44]	; (8005458 <global_stdio_init.part.0+0x34>)
 800542a:	4a0c      	ldr	r2, [pc, #48]	; (800545c <global_stdio_init.part.0+0x38>)
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	4620      	mov	r0, r4
 8005430:	2200      	movs	r2, #0
 8005432:	2104      	movs	r1, #4
 8005434:	f7ff ff94 	bl	8005360 <std>
 8005438:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800543c:	2201      	movs	r2, #1
 800543e:	2109      	movs	r1, #9
 8005440:	f7ff ff8e 	bl	8005360 <std>
 8005444:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005448:	2202      	movs	r2, #2
 800544a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800544e:	2112      	movs	r1, #18
 8005450:	f7ff bf86 	b.w	8005360 <std>
 8005454:	20004ee4 	.word	0x20004ee4
 8005458:	20004dac 	.word	0x20004dac
 800545c:	080053cd 	.word	0x080053cd

08005460 <__sfp_lock_acquire>:
 8005460:	4801      	ldr	r0, [pc, #4]	; (8005468 <__sfp_lock_acquire+0x8>)
 8005462:	f000 b8e0 	b.w	8005626 <__retarget_lock_acquire_recursive>
 8005466:	bf00      	nop
 8005468:	20004ee9 	.word	0x20004ee9

0800546c <__sfp_lock_release>:
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <__sfp_lock_release+0x8>)
 800546e:	f000 b8db 	b.w	8005628 <__retarget_lock_release_recursive>
 8005472:	bf00      	nop
 8005474:	20004ee9 	.word	0x20004ee9

08005478 <__sinit>:
 8005478:	b510      	push	{r4, lr}
 800547a:	4604      	mov	r4, r0
 800547c:	f7ff fff0 	bl	8005460 <__sfp_lock_acquire>
 8005480:	6a23      	ldr	r3, [r4, #32]
 8005482:	b11b      	cbz	r3, 800548c <__sinit+0x14>
 8005484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005488:	f7ff bff0 	b.w	800546c <__sfp_lock_release>
 800548c:	4b04      	ldr	r3, [pc, #16]	; (80054a0 <__sinit+0x28>)
 800548e:	6223      	str	r3, [r4, #32]
 8005490:	4b04      	ldr	r3, [pc, #16]	; (80054a4 <__sinit+0x2c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1f5      	bne.n	8005484 <__sinit+0xc>
 8005498:	f7ff ffc4 	bl	8005424 <global_stdio_init.part.0>
 800549c:	e7f2      	b.n	8005484 <__sinit+0xc>
 800549e:	bf00      	nop
 80054a0:	080053e5 	.word	0x080053e5
 80054a4:	20004ee4 	.word	0x20004ee4

080054a8 <_fwalk_sglue>:
 80054a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054ac:	4607      	mov	r7, r0
 80054ae:	4688      	mov	r8, r1
 80054b0:	4614      	mov	r4, r2
 80054b2:	2600      	movs	r6, #0
 80054b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054b8:	f1b9 0901 	subs.w	r9, r9, #1
 80054bc:	d505      	bpl.n	80054ca <_fwalk_sglue+0x22>
 80054be:	6824      	ldr	r4, [r4, #0]
 80054c0:	2c00      	cmp	r4, #0
 80054c2:	d1f7      	bne.n	80054b4 <_fwalk_sglue+0xc>
 80054c4:	4630      	mov	r0, r6
 80054c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ca:	89ab      	ldrh	r3, [r5, #12]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d907      	bls.n	80054e0 <_fwalk_sglue+0x38>
 80054d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054d4:	3301      	adds	r3, #1
 80054d6:	d003      	beq.n	80054e0 <_fwalk_sglue+0x38>
 80054d8:	4629      	mov	r1, r5
 80054da:	4638      	mov	r0, r7
 80054dc:	47c0      	blx	r8
 80054de:	4306      	orrs	r6, r0
 80054e0:	3568      	adds	r5, #104	; 0x68
 80054e2:	e7e9      	b.n	80054b8 <_fwalk_sglue+0x10>

080054e4 <iprintf>:
 80054e4:	b40f      	push	{r0, r1, r2, r3}
 80054e6:	b507      	push	{r0, r1, r2, lr}
 80054e8:	4906      	ldr	r1, [pc, #24]	; (8005504 <iprintf+0x20>)
 80054ea:	ab04      	add	r3, sp, #16
 80054ec:	6808      	ldr	r0, [r1, #0]
 80054ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f2:	6881      	ldr	r1, [r0, #8]
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	f000 f8c1 	bl	800567c <_vfiprintf_r>
 80054fa:	b003      	add	sp, #12
 80054fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005500:	b004      	add	sp, #16
 8005502:	4770      	bx	lr
 8005504:	20000078 	.word	0x20000078

08005508 <_puts_r>:
 8005508:	6a03      	ldr	r3, [r0, #32]
 800550a:	b570      	push	{r4, r5, r6, lr}
 800550c:	6884      	ldr	r4, [r0, #8]
 800550e:	4605      	mov	r5, r0
 8005510:	460e      	mov	r6, r1
 8005512:	b90b      	cbnz	r3, 8005518 <_puts_r+0x10>
 8005514:	f7ff ffb0 	bl	8005478 <__sinit>
 8005518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800551a:	07db      	lsls	r3, r3, #31
 800551c:	d405      	bmi.n	800552a <_puts_r+0x22>
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	0598      	lsls	r0, r3, #22
 8005522:	d402      	bmi.n	800552a <_puts_r+0x22>
 8005524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005526:	f000 f87e 	bl	8005626 <__retarget_lock_acquire_recursive>
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	0719      	lsls	r1, r3, #28
 800552e:	d513      	bpl.n	8005558 <_puts_r+0x50>
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	b18b      	cbz	r3, 8005558 <_puts_r+0x50>
 8005534:	3e01      	subs	r6, #1
 8005536:	68a3      	ldr	r3, [r4, #8]
 8005538:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800553c:	3b01      	subs	r3, #1
 800553e:	60a3      	str	r3, [r4, #8]
 8005540:	b9e9      	cbnz	r1, 800557e <_puts_r+0x76>
 8005542:	2b00      	cmp	r3, #0
 8005544:	da2e      	bge.n	80055a4 <_puts_r+0x9c>
 8005546:	4622      	mov	r2, r4
 8005548:	210a      	movs	r1, #10
 800554a:	4628      	mov	r0, r5
 800554c:	f000 fcdd 	bl	8005f0a <__swbuf_r>
 8005550:	3001      	adds	r0, #1
 8005552:	d007      	beq.n	8005564 <_puts_r+0x5c>
 8005554:	250a      	movs	r5, #10
 8005556:	e007      	b.n	8005568 <_puts_r+0x60>
 8005558:	4621      	mov	r1, r4
 800555a:	4628      	mov	r0, r5
 800555c:	f000 fd12 	bl	8005f84 <__swsetup_r>
 8005560:	2800      	cmp	r0, #0
 8005562:	d0e7      	beq.n	8005534 <_puts_r+0x2c>
 8005564:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005568:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800556a:	07da      	lsls	r2, r3, #31
 800556c:	d405      	bmi.n	800557a <_puts_r+0x72>
 800556e:	89a3      	ldrh	r3, [r4, #12]
 8005570:	059b      	lsls	r3, r3, #22
 8005572:	d402      	bmi.n	800557a <_puts_r+0x72>
 8005574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005576:	f000 f857 	bl	8005628 <__retarget_lock_release_recursive>
 800557a:	4628      	mov	r0, r5
 800557c:	bd70      	pop	{r4, r5, r6, pc}
 800557e:	2b00      	cmp	r3, #0
 8005580:	da04      	bge.n	800558c <_puts_r+0x84>
 8005582:	69a2      	ldr	r2, [r4, #24]
 8005584:	429a      	cmp	r2, r3
 8005586:	dc06      	bgt.n	8005596 <_puts_r+0x8e>
 8005588:	290a      	cmp	r1, #10
 800558a:	d004      	beq.n	8005596 <_puts_r+0x8e>
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	6022      	str	r2, [r4, #0]
 8005592:	7019      	strb	r1, [r3, #0]
 8005594:	e7cf      	b.n	8005536 <_puts_r+0x2e>
 8005596:	4622      	mov	r2, r4
 8005598:	4628      	mov	r0, r5
 800559a:	f000 fcb6 	bl	8005f0a <__swbuf_r>
 800559e:	3001      	adds	r0, #1
 80055a0:	d1c9      	bne.n	8005536 <_puts_r+0x2e>
 80055a2:	e7df      	b.n	8005564 <_puts_r+0x5c>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	250a      	movs	r5, #10
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	6022      	str	r2, [r4, #0]
 80055ac:	701d      	strb	r5, [r3, #0]
 80055ae:	e7db      	b.n	8005568 <_puts_r+0x60>

080055b0 <puts>:
 80055b0:	4b02      	ldr	r3, [pc, #8]	; (80055bc <puts+0xc>)
 80055b2:	4601      	mov	r1, r0
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	f7ff bfa7 	b.w	8005508 <_puts_r>
 80055ba:	bf00      	nop
 80055bc:	20000078 	.word	0x20000078

080055c0 <memset>:
 80055c0:	4402      	add	r2, r0
 80055c2:	4603      	mov	r3, r0
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d100      	bne.n	80055ca <memset+0xa>
 80055c8:	4770      	bx	lr
 80055ca:	f803 1b01 	strb.w	r1, [r3], #1
 80055ce:	e7f9      	b.n	80055c4 <memset+0x4>

080055d0 <__errno>:
 80055d0:	4b01      	ldr	r3, [pc, #4]	; (80055d8 <__errno+0x8>)
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	20000078 	.word	0x20000078

080055dc <__libc_init_array>:
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	4d0d      	ldr	r5, [pc, #52]	; (8005614 <__libc_init_array+0x38>)
 80055e0:	4c0d      	ldr	r4, [pc, #52]	; (8005618 <__libc_init_array+0x3c>)
 80055e2:	1b64      	subs	r4, r4, r5
 80055e4:	10a4      	asrs	r4, r4, #2
 80055e6:	2600      	movs	r6, #0
 80055e8:	42a6      	cmp	r6, r4
 80055ea:	d109      	bne.n	8005600 <__libc_init_array+0x24>
 80055ec:	4d0b      	ldr	r5, [pc, #44]	; (800561c <__libc_init_array+0x40>)
 80055ee:	4c0c      	ldr	r4, [pc, #48]	; (8005620 <__libc_init_array+0x44>)
 80055f0:	f000 fe46 	bl	8006280 <_init>
 80055f4:	1b64      	subs	r4, r4, r5
 80055f6:	10a4      	asrs	r4, r4, #2
 80055f8:	2600      	movs	r6, #0
 80055fa:	42a6      	cmp	r6, r4
 80055fc:	d105      	bne.n	800560a <__libc_init_array+0x2e>
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
 8005600:	f855 3b04 	ldr.w	r3, [r5], #4
 8005604:	4798      	blx	r3
 8005606:	3601      	adds	r6, #1
 8005608:	e7ee      	b.n	80055e8 <__libc_init_array+0xc>
 800560a:	f855 3b04 	ldr.w	r3, [r5], #4
 800560e:	4798      	blx	r3
 8005610:	3601      	adds	r6, #1
 8005612:	e7f2      	b.n	80055fa <__libc_init_array+0x1e>
 8005614:	08006508 	.word	0x08006508
 8005618:	08006508 	.word	0x08006508
 800561c:	08006508 	.word	0x08006508
 8005620:	0800650c 	.word	0x0800650c

08005624 <__retarget_lock_init_recursive>:
 8005624:	4770      	bx	lr

08005626 <__retarget_lock_acquire_recursive>:
 8005626:	4770      	bx	lr

08005628 <__retarget_lock_release_recursive>:
 8005628:	4770      	bx	lr

0800562a <__sfputc_r>:
 800562a:	6893      	ldr	r3, [r2, #8]
 800562c:	3b01      	subs	r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	b410      	push	{r4}
 8005632:	6093      	str	r3, [r2, #8]
 8005634:	da08      	bge.n	8005648 <__sfputc_r+0x1e>
 8005636:	6994      	ldr	r4, [r2, #24]
 8005638:	42a3      	cmp	r3, r4
 800563a:	db01      	blt.n	8005640 <__sfputc_r+0x16>
 800563c:	290a      	cmp	r1, #10
 800563e:	d103      	bne.n	8005648 <__sfputc_r+0x1e>
 8005640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005644:	f000 bc61 	b.w	8005f0a <__swbuf_r>
 8005648:	6813      	ldr	r3, [r2, #0]
 800564a:	1c58      	adds	r0, r3, #1
 800564c:	6010      	str	r0, [r2, #0]
 800564e:	7019      	strb	r1, [r3, #0]
 8005650:	4608      	mov	r0, r1
 8005652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005656:	4770      	bx	lr

08005658 <__sfputs_r>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	4606      	mov	r6, r0
 800565c:	460f      	mov	r7, r1
 800565e:	4614      	mov	r4, r2
 8005660:	18d5      	adds	r5, r2, r3
 8005662:	42ac      	cmp	r4, r5
 8005664:	d101      	bne.n	800566a <__sfputs_r+0x12>
 8005666:	2000      	movs	r0, #0
 8005668:	e007      	b.n	800567a <__sfputs_r+0x22>
 800566a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800566e:	463a      	mov	r2, r7
 8005670:	4630      	mov	r0, r6
 8005672:	f7ff ffda 	bl	800562a <__sfputc_r>
 8005676:	1c43      	adds	r3, r0, #1
 8005678:	d1f3      	bne.n	8005662 <__sfputs_r+0xa>
 800567a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800567c <_vfiprintf_r>:
 800567c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005680:	460d      	mov	r5, r1
 8005682:	b09d      	sub	sp, #116	; 0x74
 8005684:	4614      	mov	r4, r2
 8005686:	4698      	mov	r8, r3
 8005688:	4606      	mov	r6, r0
 800568a:	b118      	cbz	r0, 8005694 <_vfiprintf_r+0x18>
 800568c:	6a03      	ldr	r3, [r0, #32]
 800568e:	b90b      	cbnz	r3, 8005694 <_vfiprintf_r+0x18>
 8005690:	f7ff fef2 	bl	8005478 <__sinit>
 8005694:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005696:	07d9      	lsls	r1, r3, #31
 8005698:	d405      	bmi.n	80056a6 <_vfiprintf_r+0x2a>
 800569a:	89ab      	ldrh	r3, [r5, #12]
 800569c:	059a      	lsls	r2, r3, #22
 800569e:	d402      	bmi.n	80056a6 <_vfiprintf_r+0x2a>
 80056a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056a2:	f7ff ffc0 	bl	8005626 <__retarget_lock_acquire_recursive>
 80056a6:	89ab      	ldrh	r3, [r5, #12]
 80056a8:	071b      	lsls	r3, r3, #28
 80056aa:	d501      	bpl.n	80056b0 <_vfiprintf_r+0x34>
 80056ac:	692b      	ldr	r3, [r5, #16]
 80056ae:	b99b      	cbnz	r3, 80056d8 <_vfiprintf_r+0x5c>
 80056b0:	4629      	mov	r1, r5
 80056b2:	4630      	mov	r0, r6
 80056b4:	f000 fc66 	bl	8005f84 <__swsetup_r>
 80056b8:	b170      	cbz	r0, 80056d8 <_vfiprintf_r+0x5c>
 80056ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056bc:	07dc      	lsls	r4, r3, #31
 80056be:	d504      	bpl.n	80056ca <_vfiprintf_r+0x4e>
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056c4:	b01d      	add	sp, #116	; 0x74
 80056c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ca:	89ab      	ldrh	r3, [r5, #12]
 80056cc:	0598      	lsls	r0, r3, #22
 80056ce:	d4f7      	bmi.n	80056c0 <_vfiprintf_r+0x44>
 80056d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056d2:	f7ff ffa9 	bl	8005628 <__retarget_lock_release_recursive>
 80056d6:	e7f3      	b.n	80056c0 <_vfiprintf_r+0x44>
 80056d8:	2300      	movs	r3, #0
 80056da:	9309      	str	r3, [sp, #36]	; 0x24
 80056dc:	2320      	movs	r3, #32
 80056de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80056e6:	2330      	movs	r3, #48	; 0x30
 80056e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800589c <_vfiprintf_r+0x220>
 80056ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056f0:	f04f 0901 	mov.w	r9, #1
 80056f4:	4623      	mov	r3, r4
 80056f6:	469a      	mov	sl, r3
 80056f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056fc:	b10a      	cbz	r2, 8005702 <_vfiprintf_r+0x86>
 80056fe:	2a25      	cmp	r2, #37	; 0x25
 8005700:	d1f9      	bne.n	80056f6 <_vfiprintf_r+0x7a>
 8005702:	ebba 0b04 	subs.w	fp, sl, r4
 8005706:	d00b      	beq.n	8005720 <_vfiprintf_r+0xa4>
 8005708:	465b      	mov	r3, fp
 800570a:	4622      	mov	r2, r4
 800570c:	4629      	mov	r1, r5
 800570e:	4630      	mov	r0, r6
 8005710:	f7ff ffa2 	bl	8005658 <__sfputs_r>
 8005714:	3001      	adds	r0, #1
 8005716:	f000 80a9 	beq.w	800586c <_vfiprintf_r+0x1f0>
 800571a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800571c:	445a      	add	r2, fp
 800571e:	9209      	str	r2, [sp, #36]	; 0x24
 8005720:	f89a 3000 	ldrb.w	r3, [sl]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 80a1 	beq.w	800586c <_vfiprintf_r+0x1f0>
 800572a:	2300      	movs	r3, #0
 800572c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005734:	f10a 0a01 	add.w	sl, sl, #1
 8005738:	9304      	str	r3, [sp, #16]
 800573a:	9307      	str	r3, [sp, #28]
 800573c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005740:	931a      	str	r3, [sp, #104]	; 0x68
 8005742:	4654      	mov	r4, sl
 8005744:	2205      	movs	r2, #5
 8005746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800574a:	4854      	ldr	r0, [pc, #336]	; (800589c <_vfiprintf_r+0x220>)
 800574c:	f7fa fd68 	bl	8000220 <memchr>
 8005750:	9a04      	ldr	r2, [sp, #16]
 8005752:	b9d8      	cbnz	r0, 800578c <_vfiprintf_r+0x110>
 8005754:	06d1      	lsls	r1, r2, #27
 8005756:	bf44      	itt	mi
 8005758:	2320      	movmi	r3, #32
 800575a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800575e:	0713      	lsls	r3, r2, #28
 8005760:	bf44      	itt	mi
 8005762:	232b      	movmi	r3, #43	; 0x2b
 8005764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005768:	f89a 3000 	ldrb.w	r3, [sl]
 800576c:	2b2a      	cmp	r3, #42	; 0x2a
 800576e:	d015      	beq.n	800579c <_vfiprintf_r+0x120>
 8005770:	9a07      	ldr	r2, [sp, #28]
 8005772:	4654      	mov	r4, sl
 8005774:	2000      	movs	r0, #0
 8005776:	f04f 0c0a 	mov.w	ip, #10
 800577a:	4621      	mov	r1, r4
 800577c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005780:	3b30      	subs	r3, #48	; 0x30
 8005782:	2b09      	cmp	r3, #9
 8005784:	d94d      	bls.n	8005822 <_vfiprintf_r+0x1a6>
 8005786:	b1b0      	cbz	r0, 80057b6 <_vfiprintf_r+0x13a>
 8005788:	9207      	str	r2, [sp, #28]
 800578a:	e014      	b.n	80057b6 <_vfiprintf_r+0x13a>
 800578c:	eba0 0308 	sub.w	r3, r0, r8
 8005790:	fa09 f303 	lsl.w	r3, r9, r3
 8005794:	4313      	orrs	r3, r2
 8005796:	9304      	str	r3, [sp, #16]
 8005798:	46a2      	mov	sl, r4
 800579a:	e7d2      	b.n	8005742 <_vfiprintf_r+0xc6>
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	1d19      	adds	r1, r3, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	9103      	str	r1, [sp, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bfbb      	ittet	lt
 80057a8:	425b      	neglt	r3, r3
 80057aa:	f042 0202 	orrlt.w	r2, r2, #2
 80057ae:	9307      	strge	r3, [sp, #28]
 80057b0:	9307      	strlt	r3, [sp, #28]
 80057b2:	bfb8      	it	lt
 80057b4:	9204      	strlt	r2, [sp, #16]
 80057b6:	7823      	ldrb	r3, [r4, #0]
 80057b8:	2b2e      	cmp	r3, #46	; 0x2e
 80057ba:	d10c      	bne.n	80057d6 <_vfiprintf_r+0x15a>
 80057bc:	7863      	ldrb	r3, [r4, #1]
 80057be:	2b2a      	cmp	r3, #42	; 0x2a
 80057c0:	d134      	bne.n	800582c <_vfiprintf_r+0x1b0>
 80057c2:	9b03      	ldr	r3, [sp, #12]
 80057c4:	1d1a      	adds	r2, r3, #4
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	9203      	str	r2, [sp, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bfb8      	it	lt
 80057ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80057d2:	3402      	adds	r4, #2
 80057d4:	9305      	str	r3, [sp, #20]
 80057d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80058ac <_vfiprintf_r+0x230>
 80057da:	7821      	ldrb	r1, [r4, #0]
 80057dc:	2203      	movs	r2, #3
 80057de:	4650      	mov	r0, sl
 80057e0:	f7fa fd1e 	bl	8000220 <memchr>
 80057e4:	b138      	cbz	r0, 80057f6 <_vfiprintf_r+0x17a>
 80057e6:	9b04      	ldr	r3, [sp, #16]
 80057e8:	eba0 000a 	sub.w	r0, r0, sl
 80057ec:	2240      	movs	r2, #64	; 0x40
 80057ee:	4082      	lsls	r2, r0
 80057f0:	4313      	orrs	r3, r2
 80057f2:	3401      	adds	r4, #1
 80057f4:	9304      	str	r3, [sp, #16]
 80057f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fa:	4829      	ldr	r0, [pc, #164]	; (80058a0 <_vfiprintf_r+0x224>)
 80057fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005800:	2206      	movs	r2, #6
 8005802:	f7fa fd0d 	bl	8000220 <memchr>
 8005806:	2800      	cmp	r0, #0
 8005808:	d03f      	beq.n	800588a <_vfiprintf_r+0x20e>
 800580a:	4b26      	ldr	r3, [pc, #152]	; (80058a4 <_vfiprintf_r+0x228>)
 800580c:	bb1b      	cbnz	r3, 8005856 <_vfiprintf_r+0x1da>
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	3307      	adds	r3, #7
 8005812:	f023 0307 	bic.w	r3, r3, #7
 8005816:	3308      	adds	r3, #8
 8005818:	9303      	str	r3, [sp, #12]
 800581a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581c:	443b      	add	r3, r7
 800581e:	9309      	str	r3, [sp, #36]	; 0x24
 8005820:	e768      	b.n	80056f4 <_vfiprintf_r+0x78>
 8005822:	fb0c 3202 	mla	r2, ip, r2, r3
 8005826:	460c      	mov	r4, r1
 8005828:	2001      	movs	r0, #1
 800582a:	e7a6      	b.n	800577a <_vfiprintf_r+0xfe>
 800582c:	2300      	movs	r3, #0
 800582e:	3401      	adds	r4, #1
 8005830:	9305      	str	r3, [sp, #20]
 8005832:	4619      	mov	r1, r3
 8005834:	f04f 0c0a 	mov.w	ip, #10
 8005838:	4620      	mov	r0, r4
 800583a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800583e:	3a30      	subs	r2, #48	; 0x30
 8005840:	2a09      	cmp	r2, #9
 8005842:	d903      	bls.n	800584c <_vfiprintf_r+0x1d0>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0c6      	beq.n	80057d6 <_vfiprintf_r+0x15a>
 8005848:	9105      	str	r1, [sp, #20]
 800584a:	e7c4      	b.n	80057d6 <_vfiprintf_r+0x15a>
 800584c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005850:	4604      	mov	r4, r0
 8005852:	2301      	movs	r3, #1
 8005854:	e7f0      	b.n	8005838 <_vfiprintf_r+0x1bc>
 8005856:	ab03      	add	r3, sp, #12
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	462a      	mov	r2, r5
 800585c:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <_vfiprintf_r+0x22c>)
 800585e:	a904      	add	r1, sp, #16
 8005860:	4630      	mov	r0, r6
 8005862:	f3af 8000 	nop.w
 8005866:	4607      	mov	r7, r0
 8005868:	1c78      	adds	r0, r7, #1
 800586a:	d1d6      	bne.n	800581a <_vfiprintf_r+0x19e>
 800586c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800586e:	07d9      	lsls	r1, r3, #31
 8005870:	d405      	bmi.n	800587e <_vfiprintf_r+0x202>
 8005872:	89ab      	ldrh	r3, [r5, #12]
 8005874:	059a      	lsls	r2, r3, #22
 8005876:	d402      	bmi.n	800587e <_vfiprintf_r+0x202>
 8005878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800587a:	f7ff fed5 	bl	8005628 <__retarget_lock_release_recursive>
 800587e:	89ab      	ldrh	r3, [r5, #12]
 8005880:	065b      	lsls	r3, r3, #25
 8005882:	f53f af1d 	bmi.w	80056c0 <_vfiprintf_r+0x44>
 8005886:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005888:	e71c      	b.n	80056c4 <_vfiprintf_r+0x48>
 800588a:	ab03      	add	r3, sp, #12
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	462a      	mov	r2, r5
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <_vfiprintf_r+0x22c>)
 8005892:	a904      	add	r1, sp, #16
 8005894:	4630      	mov	r0, r6
 8005896:	f000 f919 	bl	8005acc <_printf_i>
 800589a:	e7e4      	b.n	8005866 <_vfiprintf_r+0x1ea>
 800589c:	080064cc 	.word	0x080064cc
 80058a0:	080064d6 	.word	0x080064d6
 80058a4:	00000000 	.word	0x00000000
 80058a8:	08005659 	.word	0x08005659
 80058ac:	080064d2 	.word	0x080064d2

080058b0 <sbrk_aligned>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	4e0e      	ldr	r6, [pc, #56]	; (80058ec <sbrk_aligned+0x3c>)
 80058b4:	460c      	mov	r4, r1
 80058b6:	6831      	ldr	r1, [r6, #0]
 80058b8:	4605      	mov	r5, r0
 80058ba:	b911      	cbnz	r1, 80058c2 <sbrk_aligned+0x12>
 80058bc:	f000 fc72 	bl	80061a4 <_sbrk_r>
 80058c0:	6030      	str	r0, [r6, #0]
 80058c2:	4621      	mov	r1, r4
 80058c4:	4628      	mov	r0, r5
 80058c6:	f000 fc6d 	bl	80061a4 <_sbrk_r>
 80058ca:	1c43      	adds	r3, r0, #1
 80058cc:	d00a      	beq.n	80058e4 <sbrk_aligned+0x34>
 80058ce:	1cc4      	adds	r4, r0, #3
 80058d0:	f024 0403 	bic.w	r4, r4, #3
 80058d4:	42a0      	cmp	r0, r4
 80058d6:	d007      	beq.n	80058e8 <sbrk_aligned+0x38>
 80058d8:	1a21      	subs	r1, r4, r0
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 fc62 	bl	80061a4 <_sbrk_r>
 80058e0:	3001      	adds	r0, #1
 80058e2:	d101      	bne.n	80058e8 <sbrk_aligned+0x38>
 80058e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80058e8:	4620      	mov	r0, r4
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	20004ef0 	.word	0x20004ef0

080058f0 <_malloc_r>:
 80058f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f4:	1ccd      	adds	r5, r1, #3
 80058f6:	f025 0503 	bic.w	r5, r5, #3
 80058fa:	3508      	adds	r5, #8
 80058fc:	2d0c      	cmp	r5, #12
 80058fe:	bf38      	it	cc
 8005900:	250c      	movcc	r5, #12
 8005902:	2d00      	cmp	r5, #0
 8005904:	4607      	mov	r7, r0
 8005906:	db01      	blt.n	800590c <_malloc_r+0x1c>
 8005908:	42a9      	cmp	r1, r5
 800590a:	d905      	bls.n	8005918 <_malloc_r+0x28>
 800590c:	230c      	movs	r3, #12
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	2600      	movs	r6, #0
 8005912:	4630      	mov	r0, r6
 8005914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005918:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80059ec <_malloc_r+0xfc>
 800591c:	f000 faa6 	bl	8005e6c <__malloc_lock>
 8005920:	f8d8 3000 	ldr.w	r3, [r8]
 8005924:	461c      	mov	r4, r3
 8005926:	bb5c      	cbnz	r4, 8005980 <_malloc_r+0x90>
 8005928:	4629      	mov	r1, r5
 800592a:	4638      	mov	r0, r7
 800592c:	f7ff ffc0 	bl	80058b0 <sbrk_aligned>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	4604      	mov	r4, r0
 8005934:	d155      	bne.n	80059e2 <_malloc_r+0xf2>
 8005936:	f8d8 4000 	ldr.w	r4, [r8]
 800593a:	4626      	mov	r6, r4
 800593c:	2e00      	cmp	r6, #0
 800593e:	d145      	bne.n	80059cc <_malloc_r+0xdc>
 8005940:	2c00      	cmp	r4, #0
 8005942:	d048      	beq.n	80059d6 <_malloc_r+0xe6>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	4631      	mov	r1, r6
 8005948:	4638      	mov	r0, r7
 800594a:	eb04 0903 	add.w	r9, r4, r3
 800594e:	f000 fc29 	bl	80061a4 <_sbrk_r>
 8005952:	4581      	cmp	r9, r0
 8005954:	d13f      	bne.n	80059d6 <_malloc_r+0xe6>
 8005956:	6821      	ldr	r1, [r4, #0]
 8005958:	1a6d      	subs	r5, r5, r1
 800595a:	4629      	mov	r1, r5
 800595c:	4638      	mov	r0, r7
 800595e:	f7ff ffa7 	bl	80058b0 <sbrk_aligned>
 8005962:	3001      	adds	r0, #1
 8005964:	d037      	beq.n	80059d6 <_malloc_r+0xe6>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	442b      	add	r3, r5
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	f8d8 3000 	ldr.w	r3, [r8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d038      	beq.n	80059e6 <_malloc_r+0xf6>
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	42a2      	cmp	r2, r4
 8005978:	d12b      	bne.n	80059d2 <_malloc_r+0xe2>
 800597a:	2200      	movs	r2, #0
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	e00f      	b.n	80059a0 <_malloc_r+0xb0>
 8005980:	6822      	ldr	r2, [r4, #0]
 8005982:	1b52      	subs	r2, r2, r5
 8005984:	d41f      	bmi.n	80059c6 <_malloc_r+0xd6>
 8005986:	2a0b      	cmp	r2, #11
 8005988:	d917      	bls.n	80059ba <_malloc_r+0xca>
 800598a:	1961      	adds	r1, r4, r5
 800598c:	42a3      	cmp	r3, r4
 800598e:	6025      	str	r5, [r4, #0]
 8005990:	bf18      	it	ne
 8005992:	6059      	strne	r1, [r3, #4]
 8005994:	6863      	ldr	r3, [r4, #4]
 8005996:	bf08      	it	eq
 8005998:	f8c8 1000 	streq.w	r1, [r8]
 800599c:	5162      	str	r2, [r4, r5]
 800599e:	604b      	str	r3, [r1, #4]
 80059a0:	4638      	mov	r0, r7
 80059a2:	f104 060b 	add.w	r6, r4, #11
 80059a6:	f000 fa67 	bl	8005e78 <__malloc_unlock>
 80059aa:	f026 0607 	bic.w	r6, r6, #7
 80059ae:	1d23      	adds	r3, r4, #4
 80059b0:	1af2      	subs	r2, r6, r3
 80059b2:	d0ae      	beq.n	8005912 <_malloc_r+0x22>
 80059b4:	1b9b      	subs	r3, r3, r6
 80059b6:	50a3      	str	r3, [r4, r2]
 80059b8:	e7ab      	b.n	8005912 <_malloc_r+0x22>
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	6862      	ldr	r2, [r4, #4]
 80059be:	d1dd      	bne.n	800597c <_malloc_r+0x8c>
 80059c0:	f8c8 2000 	str.w	r2, [r8]
 80059c4:	e7ec      	b.n	80059a0 <_malloc_r+0xb0>
 80059c6:	4623      	mov	r3, r4
 80059c8:	6864      	ldr	r4, [r4, #4]
 80059ca:	e7ac      	b.n	8005926 <_malloc_r+0x36>
 80059cc:	4634      	mov	r4, r6
 80059ce:	6876      	ldr	r6, [r6, #4]
 80059d0:	e7b4      	b.n	800593c <_malloc_r+0x4c>
 80059d2:	4613      	mov	r3, r2
 80059d4:	e7cc      	b.n	8005970 <_malloc_r+0x80>
 80059d6:	230c      	movs	r3, #12
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	4638      	mov	r0, r7
 80059dc:	f000 fa4c 	bl	8005e78 <__malloc_unlock>
 80059e0:	e797      	b.n	8005912 <_malloc_r+0x22>
 80059e2:	6025      	str	r5, [r4, #0]
 80059e4:	e7dc      	b.n	80059a0 <_malloc_r+0xb0>
 80059e6:	605b      	str	r3, [r3, #4]
 80059e8:	deff      	udf	#255	; 0xff
 80059ea:	bf00      	nop
 80059ec:	20004eec 	.word	0x20004eec

080059f0 <_printf_common>:
 80059f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f4:	4616      	mov	r6, r2
 80059f6:	4699      	mov	r9, r3
 80059f8:	688a      	ldr	r2, [r1, #8]
 80059fa:	690b      	ldr	r3, [r1, #16]
 80059fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a00:	4293      	cmp	r3, r2
 8005a02:	bfb8      	it	lt
 8005a04:	4613      	movlt	r3, r2
 8005a06:	6033      	str	r3, [r6, #0]
 8005a08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	460c      	mov	r4, r1
 8005a10:	b10a      	cbz	r2, 8005a16 <_printf_common+0x26>
 8005a12:	3301      	adds	r3, #1
 8005a14:	6033      	str	r3, [r6, #0]
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	0699      	lsls	r1, r3, #26
 8005a1a:	bf42      	ittt	mi
 8005a1c:	6833      	ldrmi	r3, [r6, #0]
 8005a1e:	3302      	addmi	r3, #2
 8005a20:	6033      	strmi	r3, [r6, #0]
 8005a22:	6825      	ldr	r5, [r4, #0]
 8005a24:	f015 0506 	ands.w	r5, r5, #6
 8005a28:	d106      	bne.n	8005a38 <_printf_common+0x48>
 8005a2a:	f104 0a19 	add.w	sl, r4, #25
 8005a2e:	68e3      	ldr	r3, [r4, #12]
 8005a30:	6832      	ldr	r2, [r6, #0]
 8005a32:	1a9b      	subs	r3, r3, r2
 8005a34:	42ab      	cmp	r3, r5
 8005a36:	dc26      	bgt.n	8005a86 <_printf_common+0x96>
 8005a38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a3c:	1e13      	subs	r3, r2, #0
 8005a3e:	6822      	ldr	r2, [r4, #0]
 8005a40:	bf18      	it	ne
 8005a42:	2301      	movne	r3, #1
 8005a44:	0692      	lsls	r2, r2, #26
 8005a46:	d42b      	bmi.n	8005aa0 <_printf_common+0xb0>
 8005a48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	4638      	mov	r0, r7
 8005a50:	47c0      	blx	r8
 8005a52:	3001      	adds	r0, #1
 8005a54:	d01e      	beq.n	8005a94 <_printf_common+0xa4>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	6922      	ldr	r2, [r4, #16]
 8005a5a:	f003 0306 	and.w	r3, r3, #6
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	bf02      	ittt	eq
 8005a62:	68e5      	ldreq	r5, [r4, #12]
 8005a64:	6833      	ldreq	r3, [r6, #0]
 8005a66:	1aed      	subeq	r5, r5, r3
 8005a68:	68a3      	ldr	r3, [r4, #8]
 8005a6a:	bf0c      	ite	eq
 8005a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a70:	2500      	movne	r5, #0
 8005a72:	4293      	cmp	r3, r2
 8005a74:	bfc4      	itt	gt
 8005a76:	1a9b      	subgt	r3, r3, r2
 8005a78:	18ed      	addgt	r5, r5, r3
 8005a7a:	2600      	movs	r6, #0
 8005a7c:	341a      	adds	r4, #26
 8005a7e:	42b5      	cmp	r5, r6
 8005a80:	d11a      	bne.n	8005ab8 <_printf_common+0xc8>
 8005a82:	2000      	movs	r0, #0
 8005a84:	e008      	b.n	8005a98 <_printf_common+0xa8>
 8005a86:	2301      	movs	r3, #1
 8005a88:	4652      	mov	r2, sl
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	47c0      	blx	r8
 8005a90:	3001      	adds	r0, #1
 8005a92:	d103      	bne.n	8005a9c <_printf_common+0xac>
 8005a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a9c:	3501      	adds	r5, #1
 8005a9e:	e7c6      	b.n	8005a2e <_printf_common+0x3e>
 8005aa0:	18e1      	adds	r1, r4, r3
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	2030      	movs	r0, #48	; 0x30
 8005aa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aaa:	4422      	add	r2, r4
 8005aac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ab0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ab4:	3302      	adds	r3, #2
 8005ab6:	e7c7      	b.n	8005a48 <_printf_common+0x58>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	4622      	mov	r2, r4
 8005abc:	4649      	mov	r1, r9
 8005abe:	4638      	mov	r0, r7
 8005ac0:	47c0      	blx	r8
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	d0e6      	beq.n	8005a94 <_printf_common+0xa4>
 8005ac6:	3601      	adds	r6, #1
 8005ac8:	e7d9      	b.n	8005a7e <_printf_common+0x8e>
	...

08005acc <_printf_i>:
 8005acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad0:	7e0f      	ldrb	r7, [r1, #24]
 8005ad2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ad4:	2f78      	cmp	r7, #120	; 0x78
 8005ad6:	4691      	mov	r9, r2
 8005ad8:	4680      	mov	r8, r0
 8005ada:	460c      	mov	r4, r1
 8005adc:	469a      	mov	sl, r3
 8005ade:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ae2:	d807      	bhi.n	8005af4 <_printf_i+0x28>
 8005ae4:	2f62      	cmp	r7, #98	; 0x62
 8005ae6:	d80a      	bhi.n	8005afe <_printf_i+0x32>
 8005ae8:	2f00      	cmp	r7, #0
 8005aea:	f000 80d4 	beq.w	8005c96 <_printf_i+0x1ca>
 8005aee:	2f58      	cmp	r7, #88	; 0x58
 8005af0:	f000 80c0 	beq.w	8005c74 <_printf_i+0x1a8>
 8005af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005af8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005afc:	e03a      	b.n	8005b74 <_printf_i+0xa8>
 8005afe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b02:	2b15      	cmp	r3, #21
 8005b04:	d8f6      	bhi.n	8005af4 <_printf_i+0x28>
 8005b06:	a101      	add	r1, pc, #4	; (adr r1, 8005b0c <_printf_i+0x40>)
 8005b08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b0c:	08005b65 	.word	0x08005b65
 8005b10:	08005b79 	.word	0x08005b79
 8005b14:	08005af5 	.word	0x08005af5
 8005b18:	08005af5 	.word	0x08005af5
 8005b1c:	08005af5 	.word	0x08005af5
 8005b20:	08005af5 	.word	0x08005af5
 8005b24:	08005b79 	.word	0x08005b79
 8005b28:	08005af5 	.word	0x08005af5
 8005b2c:	08005af5 	.word	0x08005af5
 8005b30:	08005af5 	.word	0x08005af5
 8005b34:	08005af5 	.word	0x08005af5
 8005b38:	08005c7d 	.word	0x08005c7d
 8005b3c:	08005ba5 	.word	0x08005ba5
 8005b40:	08005c37 	.word	0x08005c37
 8005b44:	08005af5 	.word	0x08005af5
 8005b48:	08005af5 	.word	0x08005af5
 8005b4c:	08005c9f 	.word	0x08005c9f
 8005b50:	08005af5 	.word	0x08005af5
 8005b54:	08005ba5 	.word	0x08005ba5
 8005b58:	08005af5 	.word	0x08005af5
 8005b5c:	08005af5 	.word	0x08005af5
 8005b60:	08005c3f 	.word	0x08005c3f
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	1d1a      	adds	r2, r3, #4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	602a      	str	r2, [r5, #0]
 8005b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b74:	2301      	movs	r3, #1
 8005b76:	e09f      	b.n	8005cb8 <_printf_i+0x1ec>
 8005b78:	6820      	ldr	r0, [r4, #0]
 8005b7a:	682b      	ldr	r3, [r5, #0]
 8005b7c:	0607      	lsls	r7, r0, #24
 8005b7e:	f103 0104 	add.w	r1, r3, #4
 8005b82:	6029      	str	r1, [r5, #0]
 8005b84:	d501      	bpl.n	8005b8a <_printf_i+0xbe>
 8005b86:	681e      	ldr	r6, [r3, #0]
 8005b88:	e003      	b.n	8005b92 <_printf_i+0xc6>
 8005b8a:	0646      	lsls	r6, r0, #25
 8005b8c:	d5fb      	bpl.n	8005b86 <_printf_i+0xba>
 8005b8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b92:	2e00      	cmp	r6, #0
 8005b94:	da03      	bge.n	8005b9e <_printf_i+0xd2>
 8005b96:	232d      	movs	r3, #45	; 0x2d
 8005b98:	4276      	negs	r6, r6
 8005b9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b9e:	485a      	ldr	r0, [pc, #360]	; (8005d08 <_printf_i+0x23c>)
 8005ba0:	230a      	movs	r3, #10
 8005ba2:	e012      	b.n	8005bca <_printf_i+0xfe>
 8005ba4:	682b      	ldr	r3, [r5, #0]
 8005ba6:	6820      	ldr	r0, [r4, #0]
 8005ba8:	1d19      	adds	r1, r3, #4
 8005baa:	6029      	str	r1, [r5, #0]
 8005bac:	0605      	lsls	r5, r0, #24
 8005bae:	d501      	bpl.n	8005bb4 <_printf_i+0xe8>
 8005bb0:	681e      	ldr	r6, [r3, #0]
 8005bb2:	e002      	b.n	8005bba <_printf_i+0xee>
 8005bb4:	0641      	lsls	r1, r0, #25
 8005bb6:	d5fb      	bpl.n	8005bb0 <_printf_i+0xe4>
 8005bb8:	881e      	ldrh	r6, [r3, #0]
 8005bba:	4853      	ldr	r0, [pc, #332]	; (8005d08 <_printf_i+0x23c>)
 8005bbc:	2f6f      	cmp	r7, #111	; 0x6f
 8005bbe:	bf0c      	ite	eq
 8005bc0:	2308      	moveq	r3, #8
 8005bc2:	230a      	movne	r3, #10
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bca:	6865      	ldr	r5, [r4, #4]
 8005bcc:	60a5      	str	r5, [r4, #8]
 8005bce:	2d00      	cmp	r5, #0
 8005bd0:	bfa2      	ittt	ge
 8005bd2:	6821      	ldrge	r1, [r4, #0]
 8005bd4:	f021 0104 	bicge.w	r1, r1, #4
 8005bd8:	6021      	strge	r1, [r4, #0]
 8005bda:	b90e      	cbnz	r6, 8005be0 <_printf_i+0x114>
 8005bdc:	2d00      	cmp	r5, #0
 8005bde:	d04b      	beq.n	8005c78 <_printf_i+0x1ac>
 8005be0:	4615      	mov	r5, r2
 8005be2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005be6:	fb03 6711 	mls	r7, r3, r1, r6
 8005bea:	5dc7      	ldrb	r7, [r0, r7]
 8005bec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bf0:	4637      	mov	r7, r6
 8005bf2:	42bb      	cmp	r3, r7
 8005bf4:	460e      	mov	r6, r1
 8005bf6:	d9f4      	bls.n	8005be2 <_printf_i+0x116>
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d10b      	bne.n	8005c14 <_printf_i+0x148>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	07de      	lsls	r6, r3, #31
 8005c00:	d508      	bpl.n	8005c14 <_printf_i+0x148>
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	6861      	ldr	r1, [r4, #4]
 8005c06:	4299      	cmp	r1, r3
 8005c08:	bfde      	ittt	le
 8005c0a:	2330      	movle	r3, #48	; 0x30
 8005c0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005c14:	1b52      	subs	r2, r2, r5
 8005c16:	6122      	str	r2, [r4, #16]
 8005c18:	f8cd a000 	str.w	sl, [sp]
 8005c1c:	464b      	mov	r3, r9
 8005c1e:	aa03      	add	r2, sp, #12
 8005c20:	4621      	mov	r1, r4
 8005c22:	4640      	mov	r0, r8
 8005c24:	f7ff fee4 	bl	80059f0 <_printf_common>
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d14a      	bne.n	8005cc2 <_printf_i+0x1f6>
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c30:	b004      	add	sp, #16
 8005c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	f043 0320 	orr.w	r3, r3, #32
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	4833      	ldr	r0, [pc, #204]	; (8005d0c <_printf_i+0x240>)
 8005c40:	2778      	movs	r7, #120	; 0x78
 8005c42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	6829      	ldr	r1, [r5, #0]
 8005c4a:	061f      	lsls	r7, r3, #24
 8005c4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c50:	d402      	bmi.n	8005c58 <_printf_i+0x18c>
 8005c52:	065f      	lsls	r7, r3, #25
 8005c54:	bf48      	it	mi
 8005c56:	b2b6      	uxthmi	r6, r6
 8005c58:	07df      	lsls	r7, r3, #31
 8005c5a:	bf48      	it	mi
 8005c5c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c60:	6029      	str	r1, [r5, #0]
 8005c62:	bf48      	it	mi
 8005c64:	6023      	strmi	r3, [r4, #0]
 8005c66:	b91e      	cbnz	r6, 8005c70 <_printf_i+0x1a4>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	f023 0320 	bic.w	r3, r3, #32
 8005c6e:	6023      	str	r3, [r4, #0]
 8005c70:	2310      	movs	r3, #16
 8005c72:	e7a7      	b.n	8005bc4 <_printf_i+0xf8>
 8005c74:	4824      	ldr	r0, [pc, #144]	; (8005d08 <_printf_i+0x23c>)
 8005c76:	e7e4      	b.n	8005c42 <_printf_i+0x176>
 8005c78:	4615      	mov	r5, r2
 8005c7a:	e7bd      	b.n	8005bf8 <_printf_i+0x12c>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	6826      	ldr	r6, [r4, #0]
 8005c80:	6961      	ldr	r1, [r4, #20]
 8005c82:	1d18      	adds	r0, r3, #4
 8005c84:	6028      	str	r0, [r5, #0]
 8005c86:	0635      	lsls	r5, r6, #24
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	d501      	bpl.n	8005c90 <_printf_i+0x1c4>
 8005c8c:	6019      	str	r1, [r3, #0]
 8005c8e:	e002      	b.n	8005c96 <_printf_i+0x1ca>
 8005c90:	0670      	lsls	r0, r6, #25
 8005c92:	d5fb      	bpl.n	8005c8c <_printf_i+0x1c0>
 8005c94:	8019      	strh	r1, [r3, #0]
 8005c96:	2300      	movs	r3, #0
 8005c98:	6123      	str	r3, [r4, #16]
 8005c9a:	4615      	mov	r5, r2
 8005c9c:	e7bc      	b.n	8005c18 <_printf_i+0x14c>
 8005c9e:	682b      	ldr	r3, [r5, #0]
 8005ca0:	1d1a      	adds	r2, r3, #4
 8005ca2:	602a      	str	r2, [r5, #0]
 8005ca4:	681d      	ldr	r5, [r3, #0]
 8005ca6:	6862      	ldr	r2, [r4, #4]
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4628      	mov	r0, r5
 8005cac:	f7fa fab8 	bl	8000220 <memchr>
 8005cb0:	b108      	cbz	r0, 8005cb6 <_printf_i+0x1ea>
 8005cb2:	1b40      	subs	r0, r0, r5
 8005cb4:	6060      	str	r0, [r4, #4]
 8005cb6:	6863      	ldr	r3, [r4, #4]
 8005cb8:	6123      	str	r3, [r4, #16]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc0:	e7aa      	b.n	8005c18 <_printf_i+0x14c>
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	462a      	mov	r2, r5
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	4640      	mov	r0, r8
 8005cca:	47d0      	blx	sl
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d0ad      	beq.n	8005c2c <_printf_i+0x160>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	079b      	lsls	r3, r3, #30
 8005cd4:	d413      	bmi.n	8005cfe <_printf_i+0x232>
 8005cd6:	68e0      	ldr	r0, [r4, #12]
 8005cd8:	9b03      	ldr	r3, [sp, #12]
 8005cda:	4298      	cmp	r0, r3
 8005cdc:	bfb8      	it	lt
 8005cde:	4618      	movlt	r0, r3
 8005ce0:	e7a6      	b.n	8005c30 <_printf_i+0x164>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	4640      	mov	r0, r8
 8005cea:	47d0      	blx	sl
 8005cec:	3001      	adds	r0, #1
 8005cee:	d09d      	beq.n	8005c2c <_printf_i+0x160>
 8005cf0:	3501      	adds	r5, #1
 8005cf2:	68e3      	ldr	r3, [r4, #12]
 8005cf4:	9903      	ldr	r1, [sp, #12]
 8005cf6:	1a5b      	subs	r3, r3, r1
 8005cf8:	42ab      	cmp	r3, r5
 8005cfa:	dcf2      	bgt.n	8005ce2 <_printf_i+0x216>
 8005cfc:	e7eb      	b.n	8005cd6 <_printf_i+0x20a>
 8005cfe:	2500      	movs	r5, #0
 8005d00:	f104 0619 	add.w	r6, r4, #25
 8005d04:	e7f5      	b.n	8005cf2 <_printf_i+0x226>
 8005d06:	bf00      	nop
 8005d08:	080064dd 	.word	0x080064dd
 8005d0c:	080064ee 	.word	0x080064ee

08005d10 <__sflush_r>:
 8005d10:	898a      	ldrh	r2, [r1, #12]
 8005d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d16:	4605      	mov	r5, r0
 8005d18:	0710      	lsls	r0, r2, #28
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	d458      	bmi.n	8005dd0 <__sflush_r+0xc0>
 8005d1e:	684b      	ldr	r3, [r1, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	dc05      	bgt.n	8005d30 <__sflush_r+0x20>
 8005d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dc02      	bgt.n	8005d30 <__sflush_r+0x20>
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d32:	2e00      	cmp	r6, #0
 8005d34:	d0f9      	beq.n	8005d2a <__sflush_r+0x1a>
 8005d36:	2300      	movs	r3, #0
 8005d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d3c:	682f      	ldr	r7, [r5, #0]
 8005d3e:	6a21      	ldr	r1, [r4, #32]
 8005d40:	602b      	str	r3, [r5, #0]
 8005d42:	d032      	beq.n	8005daa <__sflush_r+0x9a>
 8005d44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d46:	89a3      	ldrh	r3, [r4, #12]
 8005d48:	075a      	lsls	r2, r3, #29
 8005d4a:	d505      	bpl.n	8005d58 <__sflush_r+0x48>
 8005d4c:	6863      	ldr	r3, [r4, #4]
 8005d4e:	1ac0      	subs	r0, r0, r3
 8005d50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d52:	b10b      	cbz	r3, 8005d58 <__sflush_r+0x48>
 8005d54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d56:	1ac0      	subs	r0, r0, r3
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d5e:	6a21      	ldr	r1, [r4, #32]
 8005d60:	4628      	mov	r0, r5
 8005d62:	47b0      	blx	r6
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	d106      	bne.n	8005d78 <__sflush_r+0x68>
 8005d6a:	6829      	ldr	r1, [r5, #0]
 8005d6c:	291d      	cmp	r1, #29
 8005d6e:	d82b      	bhi.n	8005dc8 <__sflush_r+0xb8>
 8005d70:	4a29      	ldr	r2, [pc, #164]	; (8005e18 <__sflush_r+0x108>)
 8005d72:	410a      	asrs	r2, r1
 8005d74:	07d6      	lsls	r6, r2, #31
 8005d76:	d427      	bmi.n	8005dc8 <__sflush_r+0xb8>
 8005d78:	2200      	movs	r2, #0
 8005d7a:	6062      	str	r2, [r4, #4]
 8005d7c:	04d9      	lsls	r1, r3, #19
 8005d7e:	6922      	ldr	r2, [r4, #16]
 8005d80:	6022      	str	r2, [r4, #0]
 8005d82:	d504      	bpl.n	8005d8e <__sflush_r+0x7e>
 8005d84:	1c42      	adds	r2, r0, #1
 8005d86:	d101      	bne.n	8005d8c <__sflush_r+0x7c>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b903      	cbnz	r3, 8005d8e <__sflush_r+0x7e>
 8005d8c:	6560      	str	r0, [r4, #84]	; 0x54
 8005d8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d90:	602f      	str	r7, [r5, #0]
 8005d92:	2900      	cmp	r1, #0
 8005d94:	d0c9      	beq.n	8005d2a <__sflush_r+0x1a>
 8005d96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d9a:	4299      	cmp	r1, r3
 8005d9c:	d002      	beq.n	8005da4 <__sflush_r+0x94>
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 fa22 	bl	80061e8 <_free_r>
 8005da4:	2000      	movs	r0, #0
 8005da6:	6360      	str	r0, [r4, #52]	; 0x34
 8005da8:	e7c0      	b.n	8005d2c <__sflush_r+0x1c>
 8005daa:	2301      	movs	r3, #1
 8005dac:	4628      	mov	r0, r5
 8005dae:	47b0      	blx	r6
 8005db0:	1c41      	adds	r1, r0, #1
 8005db2:	d1c8      	bne.n	8005d46 <__sflush_r+0x36>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0c5      	beq.n	8005d46 <__sflush_r+0x36>
 8005dba:	2b1d      	cmp	r3, #29
 8005dbc:	d001      	beq.n	8005dc2 <__sflush_r+0xb2>
 8005dbe:	2b16      	cmp	r3, #22
 8005dc0:	d101      	bne.n	8005dc6 <__sflush_r+0xb6>
 8005dc2:	602f      	str	r7, [r5, #0]
 8005dc4:	e7b1      	b.n	8005d2a <__sflush_r+0x1a>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dcc:	81a3      	strh	r3, [r4, #12]
 8005dce:	e7ad      	b.n	8005d2c <__sflush_r+0x1c>
 8005dd0:	690f      	ldr	r7, [r1, #16]
 8005dd2:	2f00      	cmp	r7, #0
 8005dd4:	d0a9      	beq.n	8005d2a <__sflush_r+0x1a>
 8005dd6:	0793      	lsls	r3, r2, #30
 8005dd8:	680e      	ldr	r6, [r1, #0]
 8005dda:	bf08      	it	eq
 8005ddc:	694b      	ldreq	r3, [r1, #20]
 8005dde:	600f      	str	r7, [r1, #0]
 8005de0:	bf18      	it	ne
 8005de2:	2300      	movne	r3, #0
 8005de4:	eba6 0807 	sub.w	r8, r6, r7
 8005de8:	608b      	str	r3, [r1, #8]
 8005dea:	f1b8 0f00 	cmp.w	r8, #0
 8005dee:	dd9c      	ble.n	8005d2a <__sflush_r+0x1a>
 8005df0:	6a21      	ldr	r1, [r4, #32]
 8005df2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005df4:	4643      	mov	r3, r8
 8005df6:	463a      	mov	r2, r7
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b0      	blx	r6
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	dc06      	bgt.n	8005e0e <__sflush_r+0xfe>
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e06:	81a3      	strh	r3, [r4, #12]
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e0c:	e78e      	b.n	8005d2c <__sflush_r+0x1c>
 8005e0e:	4407      	add	r7, r0
 8005e10:	eba8 0800 	sub.w	r8, r8, r0
 8005e14:	e7e9      	b.n	8005dea <__sflush_r+0xda>
 8005e16:	bf00      	nop
 8005e18:	dfbffffe 	.word	0xdfbffffe

08005e1c <_fflush_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	690b      	ldr	r3, [r1, #16]
 8005e20:	4605      	mov	r5, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	b913      	cbnz	r3, 8005e2c <_fflush_r+0x10>
 8005e26:	2500      	movs	r5, #0
 8005e28:	4628      	mov	r0, r5
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	b118      	cbz	r0, 8005e36 <_fflush_r+0x1a>
 8005e2e:	6a03      	ldr	r3, [r0, #32]
 8005e30:	b90b      	cbnz	r3, 8005e36 <_fflush_r+0x1a>
 8005e32:	f7ff fb21 	bl	8005478 <__sinit>
 8005e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0f3      	beq.n	8005e26 <_fflush_r+0xa>
 8005e3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e40:	07d0      	lsls	r0, r2, #31
 8005e42:	d404      	bmi.n	8005e4e <_fflush_r+0x32>
 8005e44:	0599      	lsls	r1, r3, #22
 8005e46:	d402      	bmi.n	8005e4e <_fflush_r+0x32>
 8005e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e4a:	f7ff fbec 	bl	8005626 <__retarget_lock_acquire_recursive>
 8005e4e:	4628      	mov	r0, r5
 8005e50:	4621      	mov	r1, r4
 8005e52:	f7ff ff5d 	bl	8005d10 <__sflush_r>
 8005e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e58:	07da      	lsls	r2, r3, #31
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	d4e4      	bmi.n	8005e28 <_fflush_r+0xc>
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	059b      	lsls	r3, r3, #22
 8005e62:	d4e1      	bmi.n	8005e28 <_fflush_r+0xc>
 8005e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e66:	f7ff fbdf 	bl	8005628 <__retarget_lock_release_recursive>
 8005e6a:	e7dd      	b.n	8005e28 <_fflush_r+0xc>

08005e6c <__malloc_lock>:
 8005e6c:	4801      	ldr	r0, [pc, #4]	; (8005e74 <__malloc_lock+0x8>)
 8005e6e:	f7ff bbda 	b.w	8005626 <__retarget_lock_acquire_recursive>
 8005e72:	bf00      	nop
 8005e74:	20004ee8 	.word	0x20004ee8

08005e78 <__malloc_unlock>:
 8005e78:	4801      	ldr	r0, [pc, #4]	; (8005e80 <__malloc_unlock+0x8>)
 8005e7a:	f7ff bbd5 	b.w	8005628 <__retarget_lock_release_recursive>
 8005e7e:	bf00      	nop
 8005e80:	20004ee8 	.word	0x20004ee8

08005e84 <__sread>:
 8005e84:	b510      	push	{r4, lr}
 8005e86:	460c      	mov	r4, r1
 8005e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e8c:	f000 f978 	bl	8006180 <_read_r>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	bfab      	itete	ge
 8005e94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e96:	89a3      	ldrhlt	r3, [r4, #12]
 8005e98:	181b      	addge	r3, r3, r0
 8005e9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e9e:	bfac      	ite	ge
 8005ea0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ea2:	81a3      	strhlt	r3, [r4, #12]
 8005ea4:	bd10      	pop	{r4, pc}

08005ea6 <__swrite>:
 8005ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eaa:	461f      	mov	r7, r3
 8005eac:	898b      	ldrh	r3, [r1, #12]
 8005eae:	05db      	lsls	r3, r3, #23
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	d505      	bpl.n	8005ec4 <__swrite+0x1e>
 8005eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f000 f94c 	bl	800615c <_lseek_r>
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eda:	f000 b973 	b.w	80061c4 <_write_r>

08005ede <__sseek>:
 8005ede:	b510      	push	{r4, lr}
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee6:	f000 f939 	bl	800615c <_lseek_r>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	bf15      	itete	ne
 8005ef0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005efa:	81a3      	strheq	r3, [r4, #12]
 8005efc:	bf18      	it	ne
 8005efe:	81a3      	strhne	r3, [r4, #12]
 8005f00:	bd10      	pop	{r4, pc}

08005f02 <__sclose>:
 8005f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f06:	f000 b8f7 	b.w	80060f8 <_close_r>

08005f0a <__swbuf_r>:
 8005f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0c:	460e      	mov	r6, r1
 8005f0e:	4614      	mov	r4, r2
 8005f10:	4605      	mov	r5, r0
 8005f12:	b118      	cbz	r0, 8005f1c <__swbuf_r+0x12>
 8005f14:	6a03      	ldr	r3, [r0, #32]
 8005f16:	b90b      	cbnz	r3, 8005f1c <__swbuf_r+0x12>
 8005f18:	f7ff faae 	bl	8005478 <__sinit>
 8005f1c:	69a3      	ldr	r3, [r4, #24]
 8005f1e:	60a3      	str	r3, [r4, #8]
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	071a      	lsls	r2, r3, #28
 8005f24:	d525      	bpl.n	8005f72 <__swbuf_r+0x68>
 8005f26:	6923      	ldr	r3, [r4, #16]
 8005f28:	b31b      	cbz	r3, 8005f72 <__swbuf_r+0x68>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	6922      	ldr	r2, [r4, #16]
 8005f2e:	1a98      	subs	r0, r3, r2
 8005f30:	6963      	ldr	r3, [r4, #20]
 8005f32:	b2f6      	uxtb	r6, r6
 8005f34:	4283      	cmp	r3, r0
 8005f36:	4637      	mov	r7, r6
 8005f38:	dc04      	bgt.n	8005f44 <__swbuf_r+0x3a>
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f7ff ff6d 	bl	8005e1c <_fflush_r>
 8005f42:	b9e0      	cbnz	r0, 8005f7e <__swbuf_r+0x74>
 8005f44:	68a3      	ldr	r3, [r4, #8]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	60a3      	str	r3, [r4, #8]
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	6022      	str	r2, [r4, #0]
 8005f50:	701e      	strb	r6, [r3, #0]
 8005f52:	6962      	ldr	r2, [r4, #20]
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d004      	beq.n	8005f64 <__swbuf_r+0x5a>
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	07db      	lsls	r3, r3, #31
 8005f5e:	d506      	bpl.n	8005f6e <__swbuf_r+0x64>
 8005f60:	2e0a      	cmp	r6, #10
 8005f62:	d104      	bne.n	8005f6e <__swbuf_r+0x64>
 8005f64:	4621      	mov	r1, r4
 8005f66:	4628      	mov	r0, r5
 8005f68:	f7ff ff58 	bl	8005e1c <_fflush_r>
 8005f6c:	b938      	cbnz	r0, 8005f7e <__swbuf_r+0x74>
 8005f6e:	4638      	mov	r0, r7
 8005f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f72:	4621      	mov	r1, r4
 8005f74:	4628      	mov	r0, r5
 8005f76:	f000 f805 	bl	8005f84 <__swsetup_r>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d0d5      	beq.n	8005f2a <__swbuf_r+0x20>
 8005f7e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f82:	e7f4      	b.n	8005f6e <__swbuf_r+0x64>

08005f84 <__swsetup_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <__swsetup_r+0xac>)
 8005f88:	4605      	mov	r5, r0
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	b118      	cbz	r0, 8005f98 <__swsetup_r+0x14>
 8005f90:	6a03      	ldr	r3, [r0, #32]
 8005f92:	b90b      	cbnz	r3, 8005f98 <__swsetup_r+0x14>
 8005f94:	f7ff fa70 	bl	8005478 <__sinit>
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f9e:	0718      	lsls	r0, r3, #28
 8005fa0:	d422      	bmi.n	8005fe8 <__swsetup_r+0x64>
 8005fa2:	06d9      	lsls	r1, r3, #27
 8005fa4:	d407      	bmi.n	8005fb6 <__swsetup_r+0x32>
 8005fa6:	2309      	movs	r3, #9
 8005fa8:	602b      	str	r3, [r5, #0]
 8005faa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fae:	81a3      	strh	r3, [r4, #12]
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fb4:	e034      	b.n	8006020 <__swsetup_r+0x9c>
 8005fb6:	0758      	lsls	r0, r3, #29
 8005fb8:	d512      	bpl.n	8005fe0 <__swsetup_r+0x5c>
 8005fba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fbc:	b141      	cbz	r1, 8005fd0 <__swsetup_r+0x4c>
 8005fbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fc2:	4299      	cmp	r1, r3
 8005fc4:	d002      	beq.n	8005fcc <__swsetup_r+0x48>
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f000 f90e 	bl	80061e8 <_free_r>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	6363      	str	r3, [r4, #52]	; 0x34
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fd6:	81a3      	strh	r3, [r4, #12]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6063      	str	r3, [r4, #4]
 8005fdc:	6923      	ldr	r3, [r4, #16]
 8005fde:	6023      	str	r3, [r4, #0]
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	f043 0308 	orr.w	r3, r3, #8
 8005fe6:	81a3      	strh	r3, [r4, #12]
 8005fe8:	6923      	ldr	r3, [r4, #16]
 8005fea:	b94b      	cbnz	r3, 8006000 <__swsetup_r+0x7c>
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ff6:	d003      	beq.n	8006000 <__swsetup_r+0x7c>
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 f840 	bl	8006080 <__smakebuf_r>
 8006000:	89a0      	ldrh	r0, [r4, #12]
 8006002:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006006:	f010 0301 	ands.w	r3, r0, #1
 800600a:	d00a      	beq.n	8006022 <__swsetup_r+0x9e>
 800600c:	2300      	movs	r3, #0
 800600e:	60a3      	str	r3, [r4, #8]
 8006010:	6963      	ldr	r3, [r4, #20]
 8006012:	425b      	negs	r3, r3
 8006014:	61a3      	str	r3, [r4, #24]
 8006016:	6923      	ldr	r3, [r4, #16]
 8006018:	b943      	cbnz	r3, 800602c <__swsetup_r+0xa8>
 800601a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800601e:	d1c4      	bne.n	8005faa <__swsetup_r+0x26>
 8006020:	bd38      	pop	{r3, r4, r5, pc}
 8006022:	0781      	lsls	r1, r0, #30
 8006024:	bf58      	it	pl
 8006026:	6963      	ldrpl	r3, [r4, #20]
 8006028:	60a3      	str	r3, [r4, #8]
 800602a:	e7f4      	b.n	8006016 <__swsetup_r+0x92>
 800602c:	2000      	movs	r0, #0
 800602e:	e7f7      	b.n	8006020 <__swsetup_r+0x9c>
 8006030:	20000078 	.word	0x20000078

08006034 <__swhatbuf_r>:
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	460c      	mov	r4, r1
 8006038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800603c:	2900      	cmp	r1, #0
 800603e:	b096      	sub	sp, #88	; 0x58
 8006040:	4615      	mov	r5, r2
 8006042:	461e      	mov	r6, r3
 8006044:	da0d      	bge.n	8006062 <__swhatbuf_r+0x2e>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	f013 0f80 	tst.w	r3, #128	; 0x80
 800604c:	f04f 0100 	mov.w	r1, #0
 8006050:	bf0c      	ite	eq
 8006052:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006056:	2340      	movne	r3, #64	; 0x40
 8006058:	2000      	movs	r0, #0
 800605a:	6031      	str	r1, [r6, #0]
 800605c:	602b      	str	r3, [r5, #0]
 800605e:	b016      	add	sp, #88	; 0x58
 8006060:	bd70      	pop	{r4, r5, r6, pc}
 8006062:	466a      	mov	r2, sp
 8006064:	f000 f858 	bl	8006118 <_fstat_r>
 8006068:	2800      	cmp	r0, #0
 800606a:	dbec      	blt.n	8006046 <__swhatbuf_r+0x12>
 800606c:	9901      	ldr	r1, [sp, #4]
 800606e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006072:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006076:	4259      	negs	r1, r3
 8006078:	4159      	adcs	r1, r3
 800607a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800607e:	e7eb      	b.n	8006058 <__swhatbuf_r+0x24>

08006080 <__smakebuf_r>:
 8006080:	898b      	ldrh	r3, [r1, #12]
 8006082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006084:	079d      	lsls	r5, r3, #30
 8006086:	4606      	mov	r6, r0
 8006088:	460c      	mov	r4, r1
 800608a:	d507      	bpl.n	800609c <__smakebuf_r+0x1c>
 800608c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	6123      	str	r3, [r4, #16]
 8006094:	2301      	movs	r3, #1
 8006096:	6163      	str	r3, [r4, #20]
 8006098:	b002      	add	sp, #8
 800609a:	bd70      	pop	{r4, r5, r6, pc}
 800609c:	ab01      	add	r3, sp, #4
 800609e:	466a      	mov	r2, sp
 80060a0:	f7ff ffc8 	bl	8006034 <__swhatbuf_r>
 80060a4:	9900      	ldr	r1, [sp, #0]
 80060a6:	4605      	mov	r5, r0
 80060a8:	4630      	mov	r0, r6
 80060aa:	f7ff fc21 	bl	80058f0 <_malloc_r>
 80060ae:	b948      	cbnz	r0, 80060c4 <__smakebuf_r+0x44>
 80060b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060b4:	059a      	lsls	r2, r3, #22
 80060b6:	d4ef      	bmi.n	8006098 <__smakebuf_r+0x18>
 80060b8:	f023 0303 	bic.w	r3, r3, #3
 80060bc:	f043 0302 	orr.w	r3, r3, #2
 80060c0:	81a3      	strh	r3, [r4, #12]
 80060c2:	e7e3      	b.n	800608c <__smakebuf_r+0xc>
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	6020      	str	r0, [r4, #0]
 80060c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060cc:	81a3      	strh	r3, [r4, #12]
 80060ce:	9b00      	ldr	r3, [sp, #0]
 80060d0:	6163      	str	r3, [r4, #20]
 80060d2:	9b01      	ldr	r3, [sp, #4]
 80060d4:	6120      	str	r0, [r4, #16]
 80060d6:	b15b      	cbz	r3, 80060f0 <__smakebuf_r+0x70>
 80060d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060dc:	4630      	mov	r0, r6
 80060de:	f000 f82d 	bl	800613c <_isatty_r>
 80060e2:	b128      	cbz	r0, 80060f0 <__smakebuf_r+0x70>
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	f023 0303 	bic.w	r3, r3, #3
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	81a3      	strh	r3, [r4, #12]
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	431d      	orrs	r5, r3
 80060f4:	81a5      	strh	r5, [r4, #12]
 80060f6:	e7cf      	b.n	8006098 <__smakebuf_r+0x18>

080060f8 <_close_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4d06      	ldr	r5, [pc, #24]	; (8006114 <_close_r+0x1c>)
 80060fc:	2300      	movs	r3, #0
 80060fe:	4604      	mov	r4, r0
 8006100:	4608      	mov	r0, r1
 8006102:	602b      	str	r3, [r5, #0]
 8006104:	f7fb f9f7 	bl	80014f6 <_close>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d102      	bne.n	8006112 <_close_r+0x1a>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	b103      	cbz	r3, 8006112 <_close_r+0x1a>
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	20004ef4 	.word	0x20004ef4

08006118 <_fstat_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4d07      	ldr	r5, [pc, #28]	; (8006138 <_fstat_r+0x20>)
 800611c:	2300      	movs	r3, #0
 800611e:	4604      	mov	r4, r0
 8006120:	4608      	mov	r0, r1
 8006122:	4611      	mov	r1, r2
 8006124:	602b      	str	r3, [r5, #0]
 8006126:	f7fb f9f2 	bl	800150e <_fstat>
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	d102      	bne.n	8006134 <_fstat_r+0x1c>
 800612e:	682b      	ldr	r3, [r5, #0]
 8006130:	b103      	cbz	r3, 8006134 <_fstat_r+0x1c>
 8006132:	6023      	str	r3, [r4, #0]
 8006134:	bd38      	pop	{r3, r4, r5, pc}
 8006136:	bf00      	nop
 8006138:	20004ef4 	.word	0x20004ef4

0800613c <_isatty_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4d06      	ldr	r5, [pc, #24]	; (8006158 <_isatty_r+0x1c>)
 8006140:	2300      	movs	r3, #0
 8006142:	4604      	mov	r4, r0
 8006144:	4608      	mov	r0, r1
 8006146:	602b      	str	r3, [r5, #0]
 8006148:	f7fb f9f1 	bl	800152e <_isatty>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_isatty_r+0x1a>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_isatty_r+0x1a>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	20004ef4 	.word	0x20004ef4

0800615c <_lseek_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4d07      	ldr	r5, [pc, #28]	; (800617c <_lseek_r+0x20>)
 8006160:	4604      	mov	r4, r0
 8006162:	4608      	mov	r0, r1
 8006164:	4611      	mov	r1, r2
 8006166:	2200      	movs	r2, #0
 8006168:	602a      	str	r2, [r5, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	f7fb f9ea 	bl	8001544 <_lseek>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_lseek_r+0x1e>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_lseek_r+0x1e>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20004ef4 	.word	0x20004ef4

08006180 <_read_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4d07      	ldr	r5, [pc, #28]	; (80061a0 <_read_r+0x20>)
 8006184:	4604      	mov	r4, r0
 8006186:	4608      	mov	r0, r1
 8006188:	4611      	mov	r1, r2
 800618a:	2200      	movs	r2, #0
 800618c:	602a      	str	r2, [r5, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	f7fb f978 	bl	8001484 <_read>
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	d102      	bne.n	800619e <_read_r+0x1e>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	b103      	cbz	r3, 800619e <_read_r+0x1e>
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	bd38      	pop	{r3, r4, r5, pc}
 80061a0:	20004ef4 	.word	0x20004ef4

080061a4 <_sbrk_r>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	4d06      	ldr	r5, [pc, #24]	; (80061c0 <_sbrk_r+0x1c>)
 80061a8:	2300      	movs	r3, #0
 80061aa:	4604      	mov	r4, r0
 80061ac:	4608      	mov	r0, r1
 80061ae:	602b      	str	r3, [r5, #0]
 80061b0:	f7fb f9d6 	bl	8001560 <_sbrk>
 80061b4:	1c43      	adds	r3, r0, #1
 80061b6:	d102      	bne.n	80061be <_sbrk_r+0x1a>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	b103      	cbz	r3, 80061be <_sbrk_r+0x1a>
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	bd38      	pop	{r3, r4, r5, pc}
 80061c0:	20004ef4 	.word	0x20004ef4

080061c4 <_write_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4d07      	ldr	r5, [pc, #28]	; (80061e4 <_write_r+0x20>)
 80061c8:	4604      	mov	r4, r0
 80061ca:	4608      	mov	r0, r1
 80061cc:	4611      	mov	r1, r2
 80061ce:	2200      	movs	r2, #0
 80061d0:	602a      	str	r2, [r5, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f7fb f973 	bl	80014be <_write>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_write_r+0x1e>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_write_r+0x1e>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	20004ef4 	.word	0x20004ef4

080061e8 <_free_r>:
 80061e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061ea:	2900      	cmp	r1, #0
 80061ec:	d044      	beq.n	8006278 <_free_r+0x90>
 80061ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f2:	9001      	str	r0, [sp, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f1a1 0404 	sub.w	r4, r1, #4
 80061fa:	bfb8      	it	lt
 80061fc:	18e4      	addlt	r4, r4, r3
 80061fe:	f7ff fe35 	bl	8005e6c <__malloc_lock>
 8006202:	4a1e      	ldr	r2, [pc, #120]	; (800627c <_free_r+0x94>)
 8006204:	9801      	ldr	r0, [sp, #4]
 8006206:	6813      	ldr	r3, [r2, #0]
 8006208:	b933      	cbnz	r3, 8006218 <_free_r+0x30>
 800620a:	6063      	str	r3, [r4, #4]
 800620c:	6014      	str	r4, [r2, #0]
 800620e:	b003      	add	sp, #12
 8006210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006214:	f7ff be30 	b.w	8005e78 <__malloc_unlock>
 8006218:	42a3      	cmp	r3, r4
 800621a:	d908      	bls.n	800622e <_free_r+0x46>
 800621c:	6825      	ldr	r5, [r4, #0]
 800621e:	1961      	adds	r1, r4, r5
 8006220:	428b      	cmp	r3, r1
 8006222:	bf01      	itttt	eq
 8006224:	6819      	ldreq	r1, [r3, #0]
 8006226:	685b      	ldreq	r3, [r3, #4]
 8006228:	1949      	addeq	r1, r1, r5
 800622a:	6021      	streq	r1, [r4, #0]
 800622c:	e7ed      	b.n	800620a <_free_r+0x22>
 800622e:	461a      	mov	r2, r3
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	b10b      	cbz	r3, 8006238 <_free_r+0x50>
 8006234:	42a3      	cmp	r3, r4
 8006236:	d9fa      	bls.n	800622e <_free_r+0x46>
 8006238:	6811      	ldr	r1, [r2, #0]
 800623a:	1855      	adds	r5, r2, r1
 800623c:	42a5      	cmp	r5, r4
 800623e:	d10b      	bne.n	8006258 <_free_r+0x70>
 8006240:	6824      	ldr	r4, [r4, #0]
 8006242:	4421      	add	r1, r4
 8006244:	1854      	adds	r4, r2, r1
 8006246:	42a3      	cmp	r3, r4
 8006248:	6011      	str	r1, [r2, #0]
 800624a:	d1e0      	bne.n	800620e <_free_r+0x26>
 800624c:	681c      	ldr	r4, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	6053      	str	r3, [r2, #4]
 8006252:	440c      	add	r4, r1
 8006254:	6014      	str	r4, [r2, #0]
 8006256:	e7da      	b.n	800620e <_free_r+0x26>
 8006258:	d902      	bls.n	8006260 <_free_r+0x78>
 800625a:	230c      	movs	r3, #12
 800625c:	6003      	str	r3, [r0, #0]
 800625e:	e7d6      	b.n	800620e <_free_r+0x26>
 8006260:	6825      	ldr	r5, [r4, #0]
 8006262:	1961      	adds	r1, r4, r5
 8006264:	428b      	cmp	r3, r1
 8006266:	bf04      	itt	eq
 8006268:	6819      	ldreq	r1, [r3, #0]
 800626a:	685b      	ldreq	r3, [r3, #4]
 800626c:	6063      	str	r3, [r4, #4]
 800626e:	bf04      	itt	eq
 8006270:	1949      	addeq	r1, r1, r5
 8006272:	6021      	streq	r1, [r4, #0]
 8006274:	6054      	str	r4, [r2, #4]
 8006276:	e7ca      	b.n	800620e <_free_r+0x26>
 8006278:	b003      	add	sp, #12
 800627a:	bd30      	pop	{r4, r5, pc}
 800627c:	20004eec 	.word	0x20004eec

08006280 <_init>:
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006282:	bf00      	nop
 8006284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006286:	bc08      	pop	{r3}
 8006288:	469e      	mov	lr, r3
 800628a:	4770      	bx	lr

0800628c <_fini>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	bf00      	nop
 8006290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006292:	bc08      	pop	{r3}
 8006294:	469e      	mov	lr, r3
 8006296:	4770      	bx	lr
