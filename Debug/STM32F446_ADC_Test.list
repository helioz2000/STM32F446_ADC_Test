
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e450  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002880  0800e620  0800e620  0001e620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ea0  08010ea0  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08010ea0  08010ea0  00020ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ea8  08010ea8  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ea8  08010ea8  00020ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010eac  08010eac  00020eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08010eb0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007634  20000220  080110d0  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007854  080110d0  00037854  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e34  00000000  00000000  00030293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000378c  00000000  00000000  000460c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  00049858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f7f  00000000  00000000  0004ac80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026aae  00000000  00000000  0004bbff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a8c4  00000000  00000000  000726ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2e64  00000000  00000000  0008cf71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a2c  00000000  00000000  0016fdd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00176804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e608 	.word	0x0800e608

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800e608 	.word	0x0800e608

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9bb 	b.w	8001020 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b970 	b.w	8001020 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0xe2>
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	b143      	cbz	r3, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d82:	4317      	orrs	r7, r2
 8000d84:	409c      	lsls	r4, r3
 8000d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8a:	fa1f f58c 	uxth.w	r5, ip
 8000d8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d92:	0c22      	lsrs	r2, r4, #16
 8000d94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d9c:	fb01 f005 	mul.w	r0, r1, r5
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dac:	f080 811c 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000db0:	4290      	cmp	r0, r2
 8000db2:	f240 8119 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4462      	add	r2, ip
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	b2a4      	uxth	r4, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dca:	fb00 f505 	mul.w	r5, r0, r5
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x90>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x294>
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x294>
 8000de4:	4464      	add	r4, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11e      	cbz	r6, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40dc      	lsrs	r4, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0xbc>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80ed 	beq.w	8000fe2 <__udivmoddi4+0x28a>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	fab3 f183 	clz	r1, r3
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d149      	bne.n	8000eb0 <__udivmoddi4+0x158>
 8000e1c:	42ab      	cmp	r3, r5
 8000e1e:	d302      	bcc.n	8000e26 <__udivmoddi4+0xce>
 8000e20:	4282      	cmp	r2, r0
 8000e22:	f200 80f8 	bhi.w	8001016 <__udivmoddi4+0x2be>
 8000e26:	1a84      	subs	r4, r0, r2
 8000e28:	eb65 0203 	sbc.w	r2, r5, r3
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d0e2      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	e9c6 4700 	strd	r4, r7, [r6]
 8000e38:	e7df      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xe6>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	2101      	movs	r1, #1
 8000e54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e58:	fb07 2015 	mls	r0, r7, r5, r2
 8000e5c:	0c22      	lsrs	r2, r4, #16
 8000e5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e62:	fb0e f005 	mul.w	r0, lr, r5
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f200 80cb 	bhi.w	8001010 <__udivmoddi4+0x2b8>
 8000e7a:	4645      	mov	r5, r8
 8000e7c:	1a12      	subs	r2, r2, r0
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e84:	fb07 2210 	mls	r2, r7, r0, r2
 8000e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x14e>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e9c:	d202      	bcs.n	8000ea4 <__udivmoddi4+0x14c>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f200 80bb 	bhi.w	800101a <__udivmoddi4+0x2c2>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eae:	e79f      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb0:	f1c1 0720 	rsb	r7, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ebe:	fa05 f401 	lsl.w	r4, r5, r1
 8000ec2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec6:	40fd      	lsrs	r5, r7
 8000ec8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ee0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eea:	fa00 f001 	lsl.w	r0, r0, r1
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef8:	f080 8088 	bcs.w	800100c <__udivmoddi4+0x2b4>
 8000efc:	42a5      	cmp	r5, r4
 8000efe:	f240 8085 	bls.w	800100c <__udivmoddi4+0x2b4>
 8000f02:	f1a8 0802 	sub.w	r8, r8, #2
 8000f06:	4464      	add	r4, ip
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	b29d      	uxth	r5, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f28:	d26c      	bcs.n	8001004 <__udivmoddi4+0x2ac>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	d96a      	bls.n	8001004 <__udivmoddi4+0x2ac>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	fba3 9502 	umull	r9, r5, r3, r2
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	46c8      	mov	r8, r9
 8000f42:	46ae      	mov	lr, r5
 8000f44:	d356      	bcc.n	8000ff4 <__udivmoddi4+0x29c>
 8000f46:	d053      	beq.n	8000ff0 <__udivmoddi4+0x298>
 8000f48:	b156      	cbz	r6, 8000f60 <__udivmoddi4+0x208>
 8000f4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f52:	fa04 f707 	lsl.w	r7, r4, r7
 8000f56:	40ca      	lsrs	r2, r1
 8000f58:	40cc      	lsrs	r4, r1
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	f1c3 0120 	rsb	r1, r3, #32
 8000f6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f70:	fa20 f201 	lsr.w	r2, r0, r1
 8000f74:	fa25 f101 	lsr.w	r1, r5, r1
 8000f78:	409d      	lsls	r5, r3
 8000f7a:	432a      	orrs	r2, r5
 8000f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f80:	fa1f fe8c 	uxth.w	lr, ip
 8000f84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f88:	fb07 1510 	mls	r5, r7, r0, r1
 8000f8c:	0c11      	lsrs	r1, r2, #16
 8000f8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f92:	fb00 f50e 	mul.w	r5, r0, lr
 8000f96:	428d      	cmp	r5, r1
 8000f98:	fa04 f403 	lsl.w	r4, r4, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x258>
 8000f9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa6:	d22f      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fa8:	428d      	cmp	r5, r1
 8000faa:	d92d      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x282>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fd0:	d216      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d914      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000fd6:	3d02      	subs	r5, #2
 8000fd8:	4462      	add	r2, ip
 8000fda:	1a52      	subs	r2, r2, r1
 8000fdc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fe0:	e738      	b.n	8000e54 <__udivmoddi4+0xfc>
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e708      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	e6e6      	b.n	8000dba <__udivmoddi4+0x62>
 8000fec:	4610      	mov	r0, r2
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x90>
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	d2a9      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	e7a3      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8001000:	4645      	mov	r5, r8
 8001002:	e7ea      	b.n	8000fda <__udivmoddi4+0x282>
 8001004:	462b      	mov	r3, r5
 8001006:	e794      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001008:	4640      	mov	r0, r8
 800100a:	e7d1      	b.n	8000fb0 <__udivmoddi4+0x258>
 800100c:	46d0      	mov	r8, sl
 800100e:	e77b      	b.n	8000f08 <__udivmoddi4+0x1b0>
 8001010:	3d02      	subs	r5, #2
 8001012:	4462      	add	r2, ip
 8001014:	e732      	b.n	8000e7c <__udivmoddi4+0x124>
 8001016:	4608      	mov	r0, r1
 8001018:	e70a      	b.n	8000e30 <__udivmoddi4+0xd8>
 800101a:	4464      	add	r4, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e742      	b.n	8000ea6 <__udivmoddi4+0x14e>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <calc_process_dma_buffer+0x24>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d002      	beq.n	8001048 <calc_process_dma_buffer+0x24>
		return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	e0bc      	b.n	80011c2 <calc_process_dma_buffer+0x19e>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8001050:	7c7b      	ldrb	r3, [r7, #17]
 8001052:	3301      	adds	r3, #1
 8001054:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 800105c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8001060:	82bb      	strh	r3, [r7, #20]
 8001062:	e001      	b.n	8001068 <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 8001064:	2300      	movs	r3, #0
 8001066:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8001068:	8abb      	ldrh	r3, [r7, #20]
 800106a:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 800106e:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 8001070:	7c7a      	ldrb	r2, [r7, #17]
 8001072:	4956      	ldr	r1, [pc, #344]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001082:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 8001084:	7c7a      	ldrb	r2, [r7, #17]
 8001086:	4951      	ldr	r1, [pc, #324]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	3302      	adds	r3, #2
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 8001098:	7c3a      	ldrb	r2, [r7, #16]
 800109a:	494c      	ldr	r1, [pc, #304]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010aa:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 80010ac:	7c3a      	ldrb	r2, [r7, #16]
 80010ae:	4947      	ldr	r1, [pc, #284]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3302      	adds	r3, #2
 80010bc:	2200      	movs	r2, #0
 80010be:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 80010c0:	7c7a      	ldrb	r2, [r7, #17]
 80010c2:	4942      	ldr	r1, [pc, #264]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	3304      	adds	r3, #4
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d4:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 80010d6:	7c7a      	ldrb	r2, [r7, #17]
 80010d8:	493c      	ldr	r1, [pc, #240]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ea:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 80010ec:	7c3a      	ldrb	r2, [r7, #16]
 80010ee:	4937      	ldr	r1, [pc, #220]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3304      	adds	r3, #4
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001100:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8001102:	7c3a      	ldrb	r2, [r7, #16]
 8001104:	4931      	ldr	r1, [pc, #196]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3308      	adds	r3, #8
 8001112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001116:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].measurements_valid = 0;
 8001118:	7c7a      	ldrb	r2, [r7, #17]
 800111a:	492c      	ldr	r1, [pc, #176]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	330c      	adds	r3, #12
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].measurements_valid = 0;
 800112c:	7c3a      	ldrb	r2, [r7, #16]
 800112e:	4927      	ldr	r1, [pc, #156]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	330c      	adds	r3, #12
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001140:	8abb      	ldrh	r3, [r7, #20]
 8001142:	82fb      	strh	r3, [r7, #22]
 8001144:	e030      	b.n	80011a8 <calc_process_dma_buffer+0x184>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 8001146:	8af9      	ldrh	r1, [r7, #22]
 8001148:	7c7a      	ldrb	r2, [r7, #17]
 800114a:	8a7b      	ldrh	r3, [r7, #18]
 800114c:	4c20      	ldr	r4, [pc, #128]	; (80011d0 <calc_process_dma_buffer+0x1ac>)
 800114e:	6838      	ldr	r0, [r7, #0]
 8001150:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 8001154:	fb05 f000 	mul.w	r0, r5, r0
 8001158:	4401      	add	r1, r0
 800115a:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800115e:	491d      	ldr	r1, [pc, #116]	; (80011d4 <calc_process_dma_buffer+0x1b0>)
 8001160:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001164:	fb00 f202 	mul.w	r2, r0, r2
 8001168:	4413      	add	r3, r2
 800116a:	4622      	mov	r2, r4
 800116c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 8001170:	8afb      	ldrh	r3, [r7, #22]
 8001172:	1c59      	adds	r1, r3, #1
 8001174:	7c3a      	ldrb	r2, [r7, #16]
 8001176:	8a7b      	ldrh	r3, [r7, #18]
 8001178:	1c58      	adds	r0, r3, #1
 800117a:	8278      	strh	r0, [r7, #18]
 800117c:	461d      	mov	r5, r3
 800117e:	4814      	ldr	r0, [pc, #80]	; (80011d0 <calc_process_dma_buffer+0x1ac>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 8001186:	fb04 f303 	mul.w	r3, r4, r3
 800118a:	440b      	add	r3, r1
 800118c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8001190:	4910      	ldr	r1, [pc, #64]	; (80011d4 <calc_process_dma_buffer+0x1b0>)
 8001192:	f44f 7352 	mov.w	r3, #840	; 0x348
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	442b      	add	r3, r5
 800119c:	4602      	mov	r2, r0
 800119e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 80011a2:	8afb      	ldrh	r3, [r7, #22]
 80011a4:	3302      	adds	r3, #2
 80011a6:	82fb      	strh	r3, [r7, #22]
 80011a8:	8afa      	ldrh	r2, [r7, #22]
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d9ca      	bls.n	8001146 <calc_process_dma_buffer+0x122>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 80011b0:	7c7b      	ldrb	r3, [r7, #17]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f93c 	bl	8001430 <calc_downsample>
	calc_downsample(raw_buf_second);
 80011b8:	7c3b      	ldrb	r3, [r7, #16]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f938 	bl	8001430 <calc_downsample>
	return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000023c 	.word	0x2000023c
 80011d0:	2000127c 	.word	0x2000127c
 80011d4:	200046fc 	.word	0x200046fc

080011d8 <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	f200 8117 	bhi.w	800141c <calc_zero_detector+0x244>
	uint8_t detected = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	0fda      	lsrs	r2, r3, #31
 80011fa:	4413      	add	r3, r2
 80011fc:	105b      	asrs	r3, r3, #1
 80011fe:	461a      	mov	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0fda      	lsrs	r2, r3, #31
 800120a:	4413      	add	r3, r2
 800120c:	105b      	asrs	r3, r3, #1
 800120e:	425b      	negs	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	4413      	add	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	e0df      	b.n	80013de <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	4981      	ldr	r1, [pc, #516]	; (8001428 <calc_zero_detector+0x250>)
 8001222:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001226:	fb03 f202 	mul.w	r2, r3, r2
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4413      	add	r3, r2
 800122e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001232:	461a      	mov	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4293      	cmp	r3, r2
 8001238:	f300 80ce 	bgt.w	80013d8 <calc_zero_detector+0x200>
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	497a      	ldr	r1, [pc, #488]	; (8001428 <calc_zero_detector+0x250>)
 8001240:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	4413      	add	r3, r2
 800124c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001250:	461a      	mov	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	4293      	cmp	r3, r2
 8001256:	f2c0 80bf 	blt.w	80013d8 <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4972      	ldr	r1, [pc, #456]	; (8001428 <calc_zero_detector+0x250>)
 800125e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001262:	fb03 f202 	mul.w	r2, r3, r2
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4413      	add	r3, r2
 800126a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800126e:	461a      	mov	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4293      	cmp	r3, r2
 8001274:	da3d      	bge.n	80012f2 <calc_zero_detector+0x11a>
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	3b01      	subs	r3, #1
 800127c:	496a      	ldr	r1, [pc, #424]	; (8001428 <calc_zero_detector+0x250>)
 800127e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001282:	fb00 f202 	mul.w	r2, r0, r2
 8001286:	4413      	add	r3, r2
 8001288:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800128c:	461a      	mov	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4293      	cmp	r3, r2
 8001292:	db2e      	blt.n	80012f2 <calc_zero_detector+0x11a>
				detected++;
 8001294:	7ffb      	ldrb	r3, [r7, #31]
 8001296:	3301      	adds	r3, #1
 8001298:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b01      	cmp	r3, #1
 800129e:	dd11      	ble.n	80012c4 <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	3b02      	subs	r3, #2
 80012a6:	4960      	ldr	r1, [pc, #384]	; (8001428 <calc_zero_detector+0x250>)
 80012a8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012ac:	fb00 f202 	mul.w	r2, r0, r2
 80012b0:	4413      	add	r3, r2
 80012b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4293      	cmp	r3, r2
 80012bc:	dd02      	ble.n	80012c4 <calc_zero_detector+0xec>
						detected++;
 80012be:	7ffb      	ldrb	r3, [r7, #31]
 80012c0:	3301      	adds	r3, #1
 80012c2:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	3302      	adds	r3, #2
 80012c8:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80012cc:	d211      	bcs.n	80012f2 <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	3302      	adds	r3, #2
 80012d4:	4954      	ldr	r1, [pc, #336]	; (8001428 <calc_zero_detector+0x250>)
 80012d6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012da:	fb00 f202 	mul.w	r2, r0, r2
 80012de:	4413      	add	r3, r2
 80012e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012e4:	461a      	mov	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4293      	cmp	r3, r2
 80012ea:	da02      	bge.n	80012f2 <calc_zero_detector+0x11a>
						detected++;
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	3301      	adds	r3, #1
 80012f0:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d90f      	bls.n	8001318 <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	494c      	ldr	r1, [pc, #304]	; (800142c <calc_zero_detector+0x254>)
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	3304      	adds	r3, #4
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]
				detected = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 8001310:	7fbb      	ldrb	r3, [r7, #30]
 8001312:	3301      	adds	r3, #1
 8001314:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 8001316:	e05f      	b.n	80013d8 <calc_zero_detector+0x200>
			}
			detected = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	4942      	ldr	r1, [pc, #264]	; (8001428 <calc_zero_detector+0x250>)
 8001320:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001324:	fb03 f202 	mul.w	r2, r3, r2
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	4413      	add	r3, r2
 800132c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001330:	461a      	mov	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4293      	cmp	r3, r2
 8001336:	dd4f      	ble.n	80013d8 <calc_zero_detector+0x200>
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	3b01      	subs	r3, #1
 800133e:	493a      	ldr	r1, [pc, #232]	; (8001428 <calc_zero_detector+0x250>)
 8001340:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001344:	fb00 f202 	mul.w	r2, r0, r2
 8001348:	4413      	add	r3, r2
 800134a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800134e:	461a      	mov	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4293      	cmp	r3, r2
 8001354:	dc40      	bgt.n	80013d8 <calc_zero_detector+0x200>
				detected++;
 8001356:	7ffb      	ldrb	r3, [r7, #31]
 8001358:	3301      	adds	r3, #1
 800135a:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b01      	cmp	r3, #1
 8001360:	dd11      	ble.n	8001386 <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	3b02      	subs	r3, #2
 8001368:	492f      	ldr	r1, [pc, #188]	; (8001428 <calc_zero_detector+0x250>)
 800136a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800136e:	fb00 f202 	mul.w	r2, r0, r2
 8001372:	4413      	add	r3, r2
 8001374:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001378:	461a      	mov	r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4293      	cmp	r3, r2
 800137e:	dc02      	bgt.n	8001386 <calc_zero_detector+0x1ae>
						detected++;
 8001380:	7ffb      	ldrb	r3, [r7, #31]
 8001382:	3301      	adds	r3, #1
 8001384:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	3302      	adds	r3, #2
 800138a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800138e:	d211      	bcs.n	80013b4 <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	3302      	adds	r3, #2
 8001396:	4924      	ldr	r1, [pc, #144]	; (8001428 <calc_zero_detector+0x250>)
 8001398:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800139c:	fb00 f202 	mul.w	r2, r0, r2
 80013a0:	4413      	add	r3, r2
 80013a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013a6:	461a      	mov	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4293      	cmp	r3, r2
 80013ac:	dd02      	ble.n	80013b4 <calc_zero_detector+0x1dc>
						detected++;
 80013ae:	7ffb      	ldrb	r3, [r7, #31]
 80013b0:	3301      	adds	r3, #1
 80013b2:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d90c      	bls.n	80013d4 <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	491b      	ldr	r1, [pc, #108]	; (800142c <calc_zero_detector+0x254>)
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3308      	adds	r3, #8
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	601a      	str	r2, [r3, #0]
					detect_count++;
 80013ce:	7fbb      	ldrb	r3, [r7, #30]
 80013d0:	3301      	adds	r3, #1
 80013d2:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	3301      	adds	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80013e4:	f4ff af1b 	bcc.w	800121e <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected, we could have up to 3
	if (detect_count > 3) {
 80013e8:	7fbb      	ldrb	r3, [r7, #30]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d917      	bls.n	800141e <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	490e      	ldr	r1, [pc, #56]	; (800142c <calc_zero_detector+0x254>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3308      	adds	r3, #8
 80013fe:	f06f 0208 	mvn.w	r2, #8
 8001402:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	4909      	ldr	r1, [pc, #36]	; (800142c <calc_zero_detector+0x254>)
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3304      	adds	r3, #4
 8001414:	f06f 0208 	mvn.w	r2, #8
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e000      	b.n	800141e <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800141c:	bf00      	nop
	}
}
 800141e:	3724      	adds	r7, #36	; 0x24
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	2000613c 	.word	0x2000613c
 800142c:	2000023c 	.word	0x2000023c

08001430 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing) for both channel
 */
void calc_downsample(uint8_t bufnum) {
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 800143a:	2300      	movs	r3, #0
 800143c:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b03      	cmp	r3, #3
 8001442:	f200 80f1 	bhi.w	8001628 <calc_downsample+0x1f8>
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	e083      	b.n	8001554 <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	4978      	ldr	r1, [pc, #480]	; (8001630 <calc_downsample+0x200>)
 8001450:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001454:	fb03 f202 	mul.w	r2, r3, r2
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	4413      	add	r3, r2
 800145c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001460:	461c      	mov	r4, r3
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	3b01      	subs	r3, #1
 8001468:	4971      	ldr	r1, [pc, #452]	; (8001630 <calc_downsample+0x200>)
 800146a:	f44f 7052 	mov.w	r0, #840	; 0x348
 800146e:	fb00 f202 	mul.w	r2, r0, r2
 8001472:	4413      	add	r3, r2
 8001474:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001478:	4423      	add	r3, r4
 800147a:	79f9      	ldrb	r1, [r7, #7]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	3201      	adds	r2, #1
 8001480:	486b      	ldr	r0, [pc, #428]	; (8001630 <calc_downsample+0x200>)
 8001482:	f44f 7452 	mov.w	r4, #840	; 0x348
 8001486:	fb04 f101 	mul.w	r1, r4, r1
 800148a:	440a      	add	r2, r1
 800148c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001490:	4413      	add	r3, r2
 8001492:	4a68      	ldr	r2, [pc, #416]	; (8001634 <calc_downsample+0x204>)
 8001494:	fb82 1203 	smull	r1, r2, r2, r3
 8001498:	17db      	asrs	r3, r3, #31
 800149a:	1ad1      	subs	r1, r2, r3
 800149c:	79fa      	ldrb	r2, [r7, #7]
 800149e:	8bfb      	ldrh	r3, [r7, #30]
 80014a0:	b28c      	uxth	r4, r1
 80014a2:	4965      	ldr	r1, [pc, #404]	; (8001638 <calc_downsample+0x208>)
 80014a4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014a8:	fb00 f202 	mul.w	r2, r0, r2
 80014ac:	4413      	add	r3, r2
 80014ae:	4622      	mov	r2, r4
 80014b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 80014b4:	79fa      	ldrb	r2, [r7, #7]
 80014b6:	4961      	ldr	r1, [pc, #388]	; (800163c <calc_downsample+0x20c>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	82bb      	strh	r3, [r7, #20]
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	8bfb      	ldrh	r3, [r7, #30]
 80014ca:	495b      	ldr	r1, [pc, #364]	; (8001638 <calc_downsample+0x208>)
 80014cc:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014d0:	fb00 f202 	mul.w	r2, r0, r2
 80014d4:	4413      	add	r3, r2
 80014d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014da:	827b      	strh	r3, [r7, #18]
 80014dc:	8a7a      	ldrh	r2, [r7, #18]
 80014de:	8abb      	ldrh	r3, [r7, #20]
 80014e0:	4293      	cmp	r3, r2
 80014e2:	bf28      	it	cs
 80014e4:	4613      	movcs	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	b298      	uxth	r0, r3
 80014ec:	4953      	ldr	r1, [pc, #332]	; (800163c <calc_downsample+0x20c>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	4602      	mov	r2, r0
 80014fa:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	494f      	ldr	r1, [pc, #316]	; (800163c <calc_downsample+0x20c>)
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3302      	adds	r3, #2
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	823b      	strh	r3, [r7, #16]
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	8bfb      	ldrh	r3, [r7, #30]
 8001514:	4948      	ldr	r1, [pc, #288]	; (8001638 <calc_downsample+0x208>)
 8001516:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800151a:	fb00 f202 	mul.w	r2, r0, r2
 800151e:	4413      	add	r3, r2
 8001520:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001524:	81fb      	strh	r3, [r7, #14]
 8001526:	89fa      	ldrh	r2, [r7, #14]
 8001528:	8a3b      	ldrh	r3, [r7, #16]
 800152a:	4293      	cmp	r3, r2
 800152c:	bf38      	it	cc
 800152e:	4613      	movcc	r3, r2
 8001530:	b29b      	uxth	r3, r3
 8001532:	79fa      	ldrb	r2, [r7, #7]
 8001534:	b298      	uxth	r0, r3
 8001536:	4941      	ldr	r1, [pc, #260]	; (800163c <calc_downsample+0x20c>)
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	3302      	adds	r3, #2
 8001544:	4602      	mov	r2, r0
 8001546:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 8001548:	8bfb      	ldrh	r3, [r7, #30]
 800154a:	3301      	adds	r3, #1
 800154c:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	3302      	adds	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f240 3245 	movw	r2, #837	; 0x345
 800155a:	4293      	cmp	r3, r2
 800155c:	f67f af76 	bls.w	800144c <calc_downsample+0x1c>
	}
	// Last sample in the buffer (we only have 2 raw readings available for averaging)
	sample_buf[bufnum][dest_idx++] = (adc_raw_buf[bufnum][ADC_NUM_DATA-1] + adc_raw_buf[bufnum][ADC_NUM_DATA-2]) / 2;
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <calc_downsample+0x200>)
 8001564:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <calc_downsample+0x200>)
 800157a:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4413      	add	r3, r2
 8001584:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	4403      	add	r3, r0
 800158c:	0fda      	lsrs	r2, r3, #31
 800158e:	4413      	add	r3, r2
 8001590:	105b      	asrs	r3, r3, #1
 8001592:	4618      	mov	r0, r3
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	8bfb      	ldrh	r3, [r7, #30]
 8001598:	1c59      	adds	r1, r3, #1
 800159a:	83f9      	strh	r1, [r7, #30]
 800159c:	461c      	mov	r4, r3
 800159e:	b280      	uxth	r0, r0
 80015a0:	4925      	ldr	r1, [pc, #148]	; (8001638 <calc_downsample+0x208>)
 80015a2:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4423      	add	r3, r4
 80015ac:	4602      	mov	r2, r0
 80015ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// test if the last value is not assigned
	if (dest_idx < SAMPLE_BUF_SIZE) {
 80015b2:	8bfb      	ldrh	r3, [r7, #30]
 80015b4:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80015b8:	d20a      	bcs.n	80015d0 <calc_downsample+0x1a0>
		sample_buf[bufnum][dest_idx] = 0;
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	8bfb      	ldrh	r3, [r7, #30]
 80015be:	491e      	ldr	r1, [pc, #120]	; (8001638 <calc_downsample+0x208>)
 80015c0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80015c4:	fb00 f202 	mul.w	r2, r0, r2
 80015c8:	4413      	add	r3, r2
 80015ca:	2200      	movs	r2, #0
 80015cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80015d0:	79fa      	ldrb	r2, [r7, #7]
 80015d2:	491a      	ldr	r1, [pc, #104]	; (800163c <calc_downsample+0x20c>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3302      	adds	r3, #2
 80015e0:	8819      	ldrh	r1, [r3, #0]
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	4815      	ldr	r0, [pc, #84]	; (800163c <calc_downsample+0x20c>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4403      	add	r3, r0
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	1acb      	subs	r3, r1, r3
 80015f4:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 80015f6:	8afb      	ldrh	r3, [r7, #22]
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	79fa      	ldrb	r2, [r7, #7]
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <calc_downsample+0x20c>)
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	18c1      	adds	r1, r0, r3
 8001610:	8afb      	ldrh	r3, [r7, #22]
 8001612:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <calc_downsample+0x210>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fdd9 	bl	80011d8 <calc_zero_detector>
 8001626:	e000      	b.n	800162a <calc_downsample+0x1fa>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001628:	bf00      	nop
}
 800162a:	3724      	adds	r7, #36	; 0x24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	200046fc 	.word	0x200046fc
 8001634:	55555556 	.word	0x55555556
 8001638:	2000613c 	.word	0x2000613c
 800163c:	2000023c 	.word	0x2000023c
 8001640:	cccccccd 	.word	0xcccccccd

08001644 <calc_measurements>:

/*
 * Calculate all measurements
 *
 */
int calc_measurements(void) {
 8001644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001648:	ed2d 8b02 	vpush	{d8}
 800164c:	b0a8      	sub	sp, #160	; 0xa0
 800164e:	af00      	add	r7, sp, #0
	int i;
	int64_t v_sq_acc = 0;		// accumulating the squared voltage values
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	int64_t i1_sq_acc = 0;		// accumulating the squared I1 values
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	double i1_va_acc = 0;
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double i1_w_acc = 0;			// accumulating I1 values where I > 0 (for W calculation)
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	uint16_t num_readings = 0;		// number of squared readings for v, i and va
 8001680:	2300      	movs	r3, #0
 8001682:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	//uint16_t num_w_readings = 0;	// number of squared readings for kw
	int16_t v_reading;			// always positive, we are using the positive half wave
	int16_t i_reading;			// could be negative if current is leading or lagging
	double va_instant;			// instant VA value
	uint16_t v_zero = (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) / 2;
 8001686:	4bab      	ldr	r3, [pc, #684]	; (8001934 <calc_measurements+0x2f0>)
 8001688:	885b      	ldrh	r3, [r3, #2]
 800168a:	461a      	mov	r2, r3
 800168c:	4ba9      	ldr	r3, [pc, #676]	; (8001934 <calc_measurements+0x2f0>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	1ad2      	subs	r2, r2, r3
 8001692:	0fd3      	lsrs	r3, r2, #31
 8001694:	4413      	add	r3, r2
 8001696:	105b      	asrs	r3, r3, #1
 8001698:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	uint16_t i1_zero = (sample_buf_meta[ADC_CH_I1].max - sample_buf_meta[ADC_CH_I1].min) / 2;
 800169c:	4ba5      	ldr	r3, [pc, #660]	; (8001934 <calc_measurements+0x2f0>)
 800169e:	8adb      	ldrh	r3, [r3, #22]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4ba4      	ldr	r3, [pc, #656]	; (8001934 <calc_measurements+0x2f0>)
 80016a4:	8a9b      	ldrh	r3, [r3, #20]
 80016a6:	1ad2      	subs	r2, r2, r3
 80016a8:	0fd3      	lsrs	r3, r2, #31
 80016aa:	4413      	add	r3, r2
 80016ac:	105b      	asrs	r3, r3, #1
 80016ae:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	float w=0, va=0;
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	673b      	str	r3, [r7, #112]	; 0x70
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	66fb      	str	r3, [r7, #108]	; 0x6c


	// Calculate values using the positive half of the sine wave

	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) { return -1; }	// do we have zero crossing?
 80016be:	4b9d      	ldr	r3, [pc, #628]	; (8001934 <calc_measurements+0x2f0>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	da02      	bge.n	80016cc <calc_measurements+0x88>
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ca:	e280      	b.n	8001bce <calc_measurements+0x58a>
	// add up squared measurements
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < sample_buf_meta[ADC_CH_V].zero_cross_neg) {
 80016cc:	4b99      	ldr	r3, [pc, #612]	; (8001934 <calc_measurements+0x2f0>)
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4b98      	ldr	r3, [pc, #608]	; (8001934 <calc_measurements+0x2f0>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f280 8091 	bge.w	80017fc <calc_measurements+0x1b8>
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 80016da:	4b96      	ldr	r3, [pc, #600]	; (8001934 <calc_measurements+0x2f0>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80016e2:	e083      	b.n	80017ec <calc_measurements+0x1a8>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 80016e4:	4a94      	ldr	r2, [pc, #592]	; (8001938 <calc_measurements+0x2f4>)
 80016e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016ea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016ee:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 80016fa:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80016fe:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	17da      	asrs	r2, r3, #31
 8001708:	461c      	mov	r4, r3
 800170a:	4615      	mov	r5, r2
 800170c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001710:	eb12 0a04 	adds.w	sl, r2, r4
 8001714:	eb43 0b05 	adc.w	fp, r3, r5
 8001718:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 800171c:	4a86      	ldr	r2, [pc, #536]	; (8001938 <calc_measurements+0x2f4>)
 800171e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001722:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001726:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800172a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	b29b      	uxth	r3, r3
 8001732:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001736:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 800173a:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	17da      	asrs	r2, r3, #31
 8001744:	4698      	mov	r8, r3
 8001746:	4691      	mov	r9, r2
 8001748:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800174c:	eb12 0108 	adds.w	r1, r2, r8
 8001750:	6239      	str	r1, [r7, #32]
 8001752:	eb43 0309 	adc.w	r3, r3, r9
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
 8001758:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800175c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			num_readings++;
 8001760:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001764:	3301      	adds	r3, #1
 8001766:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 800176a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fbc0 	bl	8001ef4 <calc_adc_raw_to_V>
 8001774:	eeb0 8a40 	vmov.f32	s16, s0
 8001778:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fbd7 	bl	8001f30 <calc_adc_raw_to_A>
 8001782:	eef0 7a40 	vmov.f32	s15, s0
 8001786:	ee68 7a27 	vmul.f32	s15, s16, s15
 800178a:	ee17 0a90 	vmov	r0, s15
 800178e:	f7fe fefb 	bl	8000588 <__aeabi_f2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 800179a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db0a      	blt.n	80017b8 <calc_measurements+0x174>
				i1_va_acc += va_instant;
 80017a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80017aa:	f7fe fd8f 	bl	80002cc <__adddf3>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 80017b6:	e014      	b.n	80017e2 <calc_measurements+0x19e>
			} else {
				i1_w_acc += abs(va_instant);
 80017b8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80017bc:	f7ff f9ec 	bl	8000b98 <__aeabi_d2iz>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	bfb8      	it	lt
 80017c6:	425b      	neglt	r3, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fecb 	bl	8000564 <__aeabi_i2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80017d6:	f7fe fd79 	bl	80002cc <__adddf3>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 80017e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017e6:	3301      	adds	r3, #1
 80017e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80017ec:	4b51      	ldr	r3, [pc, #324]	; (8001934 <calc_measurements+0x2f0>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80017f4:	429a      	cmp	r2, r3
 80017f6:	f6ff af75 	blt.w	80016e4 <calc_measurements+0xa0>
 80017fa:	e132      	b.n	8001a62 <calc_measurements+0x41e>
				//num_w_readings++;
			}
		}
	} else {
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 80017fc:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <calc_measurements+0x2f0>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001804:	e08b      	b.n	800191e <calc_measurements+0x2da>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001806:	4a4c      	ldr	r2, [pc, #304]	; (8001938 <calc_measurements+0x2f4>)
 8001808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800180c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001810:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	b29b      	uxth	r3, r3
 8001818:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 800181c:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001820:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001824:	fb02 f303 	mul.w	r3, r2, r3
 8001828:	17da      	asrs	r2, r3, #31
 800182a:	653b      	str	r3, [r7, #80]	; 0x50
 800182c:	657a      	str	r2, [r7, #84]	; 0x54
 800182e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001832:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001836:	4621      	mov	r1, r4
 8001838:	1851      	adds	r1, r2, r1
 800183a:	61b9      	str	r1, [r7, #24]
 800183c:	4629      	mov	r1, r5
 800183e:	414b      	adcs	r3, r1
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001846:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 800184a:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <calc_measurements+0x2f4>)
 800184c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001850:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001854:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001858:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b29b      	uxth	r3, r3
 8001860:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001864:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001868:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 800186c:	fb02 f303 	mul.w	r3, r2, r3
 8001870:	17da      	asrs	r2, r3, #31
 8001872:	64bb      	str	r3, [r7, #72]	; 0x48
 8001874:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001876:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800187a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800187e:	4621      	mov	r1, r4
 8001880:	1851      	adds	r1, r2, r1
 8001882:	6139      	str	r1, [r7, #16]
 8001884:	4629      	mov	r1, r5
 8001886:	414b      	adcs	r3, r1
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800188e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001892:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001896:	3301      	adds	r3, #1
 8001898:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 800189c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fb27 	bl	8001ef4 <calc_adc_raw_to_V>
 80018a6:	eeb0 8a40 	vmov.f32	s16, s0
 80018aa:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fb3e 	bl	8001f30 <calc_adc_raw_to_A>
 80018b4:	eef0 7a40 	vmov.f32	s15, s0
 80018b8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80018bc:	ee17 0a90 	vmov	r0, s15
 80018c0:	f7fe fe62 	bl	8000588 <__aeabi_f2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 80018cc:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <calc_measurements+0x2a6>
				i1_va_acc += va_instant;
 80018d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018d8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80018dc:	f7fe fcf6 	bl	80002cc <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 80018e8:	e014      	b.n	8001914 <calc_measurements+0x2d0>
			} else {
				i1_w_acc += abs(va_instant);
 80018ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80018ee:	f7ff f953 	bl	8000b98 <__aeabi_d2iz>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bfb8      	it	lt
 80018f8:	425b      	neglt	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe32 	bl	8000564 <__aeabi_i2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001908:	f7fe fce0 	bl	80002cc <__adddf3>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001918:	3301      	adds	r3, #1
 800191a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800191e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001922:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001926:	f4ff af6e 	bcc.w	8001806 <calc_measurements+0x1c2>
				//num_w_readings++;
			}
		}
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 800192a:	2314      	movs	r3, #20
 800192c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001930:	e090      	b.n	8001a54 <calc_measurements+0x410>
 8001932:	bf00      	nop
 8001934:	2000023c 	.word	0x2000023c
 8001938:	2000613c 	.word	0x2000613c
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 800193c:	4aa7      	ldr	r2, [pc, #668]	; (8001bdc <calc_measurements+0x598>)
 800193e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001942:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001946:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001952:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001956:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	17da      	asrs	r2, r3, #31
 8001960:	643b      	str	r3, [r7, #64]	; 0x40
 8001962:	647a      	str	r2, [r7, #68]	; 0x44
 8001964:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001968:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800196c:	4621      	mov	r1, r4
 800196e:	1851      	adds	r1, r2, r1
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	4629      	mov	r1, r5
 8001974:	414b      	adcs	r3, r1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800197c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001980:	4a96      	ldr	r2, [pc, #600]	; (8001bdc <calc_measurements+0x598>)
 8001982:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001986:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800198a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800198e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
 8001996:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 800199a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 800199e:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	17da      	asrs	r2, r3, #31
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80019aa:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80019b0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80019b4:	4621      	mov	r1, r4
 80019b6:	1851      	adds	r1, r2, r1
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	4629      	mov	r1, r5
 80019bc:	414b      	adcs	r3, r1
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019c4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 80019c8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80019cc:	3301      	adds	r3, #1
 80019ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 80019d2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fa8c 	bl	8001ef4 <calc_adc_raw_to_V>
 80019dc:	eeb0 8a40 	vmov.f32	s16, s0
 80019e0:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 faa3 	bl	8001f30 <calc_adc_raw_to_A>
 80019ea:	eef0 7a40 	vmov.f32	s15, s0
 80019ee:	ee68 7a27 	vmul.f32	s15, s16, s15
 80019f2:	ee17 0a90 	vmov	r0, s15
 80019f6:	f7fe fdc7 	bl	8000588 <__aeabi_f2d>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

			if (i_reading >= 0) {
 8001a02:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db0a      	blt.n	8001a20 <calc_measurements+0x3dc>
				i1_va_acc += va_instant;
 8001a0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001a12:	f7fe fc5b 	bl	80002cc <__adddf3>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001a1e:	e014      	b.n	8001a4a <calc_measurements+0x406>
			} else {
				i1_w_acc += abs(va_instant);
 8001a20:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a24:	f7ff f8b8 	bl	8000b98 <__aeabi_d2iz>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bfb8      	it	lt
 8001a2e:	425b      	neglt	r3, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fd97 	bl	8000564 <__aeabi_i2d>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001a3e:	f7fe fc45 	bl	80002cc <__adddf3>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001a4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a54:	4b62      	ldr	r3, [pc, #392]	; (8001be0 <calc_measurements+0x59c>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f6ff af6d 	blt.w	800193c <calc_measurements+0x2f8>
				//num_w_readings++;
			}
		}
	}

	metervalue_v = calc_adc_raw_to_V (sqrt((v_sq_acc / num_readings)));		// RMS voltage
 8001a62:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001a66:	2200      	movs	r2, #0
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
 8001a6a:	637a      	str	r2, [r7, #52]	; 0x34
 8001a6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a70:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001a74:	f7ff f908 	bl	8000c88 <__aeabi_ldivmod>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7fe fdac 	bl	80005dc <__aeabi_l2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	ec43 2b10 	vmov	d0, r2, r3
 8001a8c:	f00c fc34 	bl	800e2f8 <sqrt>
 8001a90:	ec53 2b10 	vmov	r2, r3, d0
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7ff f87e 	bl	8000b98 <__aeabi_d2iz>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 fa27 	bl	8001ef4 <calc_adc_raw_to_V>
 8001aa6:	eef0 7a40 	vmov.f32	s15, s0
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	; (8001be4 <calc_measurements+0x5a0>)
 8001aac:	edc3 7a00 	vstr	s15, [r3]
	metervalue_i1 = calc_adc_raw_to_A (sqrt((i1_sq_acc / num_readings)));	// RMS current
 8001ab0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001aba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001abe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001ac2:	f7ff f8e1 	bl	8000c88 <__aeabi_ldivmod>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7fe fd85 	bl	80005dc <__aeabi_l2d>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	ec43 2b10 	vmov	d0, r2, r3
 8001ada:	f00c fc0d 	bl	800e2f8 <sqrt>
 8001ade:	ec53 2b10 	vmov	r2, r3, d0
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f857 	bl	8000b98 <__aeabi_d2iz>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fa1e 	bl	8001f30 <calc_adc_raw_to_A>
 8001af4:	eef0 7a40 	vmov.f32	s15, s0
 8001af8:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <calc_measurements+0x5a4>)
 8001afa:	edc3 7a00 	vstr	s15, [r3]
	if (i1_va_acc > 0) { va = i1_va_acc / num_readings; }
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001b0a:	f7ff f825 	bl	8000b58 <__aeabi_dcmpgt>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d012      	beq.n	8001b3a <calc_measurements+0x4f6>
 8001b14:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd23 	bl	8000564 <__aeabi_i2d>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001b26:	f7fe feb1 	bl	800088c <__aeabi_ddiv>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7ff f859 	bl	8000be8 <__aeabi_d2f>
 8001b36:	4603      	mov	r3, r0
 8001b38:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (i1_w_acc > 0) { w = i1_w_acc / num_readings; }
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b46:	f7ff f807 	bl	8000b58 <__aeabi_dcmpgt>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d012      	beq.n	8001b76 <calc_measurements+0x532>
 8001b50:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fd05 	bl	8000564 <__aeabi_i2d>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b62:	f7fe fe93 	bl	800088c <__aeabi_ddiv>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7ff f83b 	bl	8000be8 <__aeabi_d2f>
 8001b72:	4603      	mov	r3, r0
 8001b74:	673b      	str	r3, [r7, #112]	; 0x70
	metervalue_va1 = metervalue_v * metervalue_i1;
 8001b76:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <calc_measurements+0x5a0>)
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <calc_measurements+0x5a4>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <calc_measurements+0x5a8>)
 8001b88:	edc3 7a00 	vstr	s15, [r3]
	if (w > 0) {
 8001b8c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001b90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b98:	dd09      	ble.n	8001bae <calc_measurements+0x56a>
		metervalue_w1 = va - w;
 8001b9a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001b9e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <calc_measurements+0x5ac>)
 8001ba8:	edc3 7a00 	vstr	s15, [r3]
 8001bac:	e003      	b.n	8001bb6 <calc_measurements+0x572>
	} else {
		metervalue_w1 = metervalue_va1;
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <calc_measurements+0x5a8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a0f      	ldr	r2, [pc, #60]	; (8001bf0 <calc_measurements+0x5ac>)
 8001bb4:	6013      	str	r3, [r2, #0]
	}
	metervalue_pf1 = metervalue_w1 / metervalue_va1;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <calc_measurements+0x5ac>)
 8001bb8:	edd3 6a00 	vldr	s13, [r3]
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <calc_measurements+0x5a8>)
 8001bbe:	ed93 7a00 	vldr	s14, [r3]
 8001bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <calc_measurements+0x5b0>)
 8001bc8:	edc3 7a00 	vstr	s15, [r3]

	//term_print("%.1fVA - %.1fW = %.1f (%d/%d readings)\r\n", va, w, va-w, num_w_readings, num_readings ) ;
	//term_print("Vrms x Irms = %.1fVA\r\n", metervalue_v * metervalue_i1) ;
	//term_print("Meter: %.1fVA %.1fW PF=%.2f (%.1fDeg)f\r\n", metervalue_va1, metervalue_kw1, metervalue_pf1, acos(metervalue_pf1) * (180.0 / 3.14159265)) ;
	return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	37a0      	adds	r7, #160	; 0xa0
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	ecbd 8b02 	vpop	{d8}
 8001bd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bdc:	2000613c 	.word	0x2000613c
 8001be0:	2000023c 	.word	0x2000023c
 8001be4:	20006e5c 	.word	0x20006e5c
 8001be8:	20006e60 	.word	0x20006e60
 8001bec:	20006e64 	.word	0x20006e64
 8001bf0:	20006e68 	.word	0x20006e68
 8001bf4:	20006e6c 	.word	0x20006e6c

08001bf8 <calc_channel>:
 * The RMS value is calculated from readings between the positive and negative zero crossing
 * that is, the positive half of the sine wave.
 * The RMS value is calculate by adding the square of each reading to an accumulator and then
 * diving the accumulator by the number of readings.
 */
int calc_channel(uint8_t bufnum) {
 8001bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bfc:	b090      	sub	sp, #64	; 0x40
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int i;
	uint64_t squared_acc = 0;		// accumulating the squared values
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint16_t num_readings = 0;		// number of squared readings
 8001c12:	2300      	movs	r3, #0
 8001c14:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t reading = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t zero_value = (sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min) / 2;
 8001c1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001c1e:	4994      	ldr	r1, [pc, #592]	; (8001e70 <calc_channel+0x278>)
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001c34:	498e      	ldr	r1, [pc, #568]	; (8001e70 <calc_channel+0x278>)
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	1ac2      	subs	r2, r0, r3
 8001c44:	0fd3      	lsrs	r3, r2, #31
 8001c46:	4413      	add	r3, r2
 8001c48:	105b      	asrs	r3, r3, #1
 8001c4a:	857b      	strh	r3, [r7, #42]	; 0x2a

	if (bufnum >= ADC_NUM_BUFFERS) { return -1; }		// check valid buffer number
 8001c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d902      	bls.n	8001c5a <calc_channel+0x62>
 8001c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c58:	e104      	b.n	8001e64 <calc_channel+0x26c>

	// Calculate the RMS value using the positive half of the sinewave

	if (sample_buf_meta[bufnum].zero_cross_pos < 0) { return -1; }	// do we have zero crossing?
 8001c5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001c5e:	4984      	ldr	r1, [pc, #528]	; (8001e70 <calc_channel+0x278>)
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	da02      	bge.n	8001c78 <calc_channel+0x80>
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c76:	e0f5      	b.n	8001e64 <calc_channel+0x26c>
	if (sample_buf_meta[bufnum].zero_cross_pos < sample_buf_meta[bufnum].zero_cross_neg) {
 8001c78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001c7c:	497c      	ldr	r1, [pc, #496]	; (8001e70 <calc_channel+0x278>)
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	3304      	adds	r3, #4
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001c90:	4977      	ldr	r1, [pc, #476]	; (8001e70 <calc_channel+0x278>)
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3308      	adds	r3, #8
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4298      	cmp	r0, r3
 8001ca2:	da40      	bge.n	8001d26 <calc_channel+0x12e>
		for (i=sample_buf_meta[bufnum].zero_cross_pos; i<sample_buf_meta[bufnum].zero_cross_neg; i++ ) {
 8001ca4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ca8:	4971      	ldr	r1, [pc, #452]	; (8001e70 <calc_channel+0x278>)
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cba:	e026      	b.n	8001d0a <calc_channel+0x112>
			reading = sample_buf[bufnum][i] - zero_value;
 8001cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cc0:	496c      	ldr	r1, [pc, #432]	; (8001e74 <calc_channel+0x27c>)
 8001cc2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001cc6:	fb03 f202 	mul.w	r2, r3, r2
 8001cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ccc:	4413      	add	r3, r2
 8001cce:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001cd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
			squared_acc += reading * reading;
 8001cd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001cda:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001cdc:	fb02 f303 	mul.w	r3, r2, r3
 8001ce0:	17da      	asrs	r2, r3, #31
 8001ce2:	469a      	mov	sl, r3
 8001ce4:	4693      	mov	fp, r2
 8001ce6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cea:	eb12 010a 	adds.w	r1, r2, sl
 8001cee:	6139      	str	r1, [r7, #16]
 8001cf0:	eb43 030b 	adc.w	r3, r3, fp
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001cfa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			num_readings++;
 8001cfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d00:	3301      	adds	r3, #1
 8001d02:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for (i=sample_buf_meta[bufnum].zero_cross_pos; i<sample_buf_meta[bufnum].zero_cross_neg; i++ ) {
 8001d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d06:	3301      	adds	r3, #1
 8001d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001d0e:	4958      	ldr	r1, [pc, #352]	; (8001e70 <calc_channel+0x278>)
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbcb      	blt.n	8001cbc <calc_channel+0xc4>
 8001d24:	e06b      	b.n	8001dfe <calc_channel+0x206>
		}
	} else {
		for (i=sample_buf_meta[bufnum].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001d26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001d2a:	4951      	ldr	r1, [pc, #324]	; (8001e70 <calc_channel+0x278>)
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	3304      	adds	r3, #4
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d3c:	e026      	b.n	8001d8c <calc_channel+0x194>
			reading = sample_buf[bufnum][i] - zero_value;
 8001d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d42:	494c      	ldr	r1, [pc, #304]	; (8001e74 <calc_channel+0x27c>)
 8001d44:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001d48:	fb03 f202 	mul.w	r2, r3, r2
 8001d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d4e:	4413      	add	r3, r2
 8001d50:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001d54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	85bb      	strh	r3, [r7, #44]	; 0x2c
			squared_acc += reading * reading;
 8001d5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001d5c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	17da      	asrs	r2, r3, #31
 8001d64:	4698      	mov	r8, r3
 8001d66:	4691      	mov	r9, r2
 8001d68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d6c:	eb12 0108 	adds.w	r1, r2, r8
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	eb43 0309 	adc.w	r3, r3, r9
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d7c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			num_readings++;
 8001d80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d82:	3301      	adds	r3, #1
 8001d84:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for (i=sample_buf_meta[bufnum].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d88:	3301      	adds	r3, #1
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001d92:	d3d4      	bcc.n	8001d3e <calc_channel+0x146>
		}
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[bufnum].zero_cross_neg; i++ ) {
 8001d94:	2314      	movs	r3, #20
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d98:	e024      	b.n	8001de4 <calc_channel+0x1ec>
			reading = sample_buf[bufnum][i] - zero_value;
 8001d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d9e:	4935      	ldr	r1, [pc, #212]	; (8001e74 <calc_channel+0x27c>)
 8001da0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001da4:	fb03 f202 	mul.w	r2, r3, r2
 8001da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001daa:	4413      	add	r3, r2
 8001dac:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001db0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	85bb      	strh	r3, [r7, #44]	; 0x2c
			squared_acc += reading * reading;
 8001db6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001db8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	17da      	asrs	r2, r3, #31
 8001dc0:	461c      	mov	r4, r3
 8001dc2:	4615      	mov	r5, r2
 8001dc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001dc8:	1911      	adds	r1, r2, r4
 8001dca:	6039      	str	r1, [r7, #0]
 8001dcc:	416b      	adcs	r3, r5
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dd4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			num_readings++;
 8001dd8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dda:	3301      	adds	r3, #1
 8001ddc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[bufnum].zero_cross_neg; i++ ) {
 8001dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de0:	3301      	adds	r3, #1
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001de8:	4921      	ldr	r1, [pc, #132]	; (8001e70 <calc_channel+0x278>)
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	3308      	adds	r3, #8
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dbcd      	blt.n	8001d9a <calc_channel+0x1a2>
		}
	}
	sample_buf_meta[bufnum].rms_value = sqrt((squared_acc / num_readings));
 8001dfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e00:	2200      	movs	r2, #0
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	61fa      	str	r2, [r7, #28]
 8001e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e0a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e0e:	f7fe ff8b 	bl	8000d28 <__aeabi_uldivmod>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f7fe fbd7 	bl	80005cc <__aeabi_ul2d>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	ec43 2b10 	vmov	d0, r2, r3
 8001e26:	f00c fa67 	bl	800e2f8 <sqrt>
 8001e2a:	ec53 2b10 	vmov	r2, r3, d0
 8001e2e:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe feaf 	bl	8000b98 <__aeabi_d2iz>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	490c      	ldr	r1, [pc, #48]	; (8001e70 <calc_channel+0x278>)
 8001e3e:	4623      	mov	r3, r4
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4423      	add	r3, r4
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	3310      	adds	r3, #16
 8001e4a:	601a      	str	r2, [r3, #0]
	sample_buf_meta[bufnum].measurements_valid = 1;
 8001e4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e50:	4907      	ldr	r1, [pc, #28]	; (8001e70 <calc_channel+0x278>)
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
	return 0;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3740      	adds	r7, #64	; 0x40
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000023c 	.word	0x2000023c
 8001e74:	2000613c 	.word	0x2000613c

08001e78 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns mv as int
 */
int calc_adc_raw_to_mv_int(int16_t adc_raw) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 8001e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f816 	bl	8001eb8 <calc_adc_raw_to_mv_float>
 8001e8c:	ee10 3a10 	vmov	r3, s0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fb79 	bl	8000588 <__aeabi_f2d>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	ec43 2b10 	vmov	d0, r2, r3
 8001e9e:	f00c fb31 	bl	800e504 <round>
 8001ea2:	ec53 2b10 	vmov	r2, r3, d0
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7fe fe75 	bl	8000b98 <__aeabi_d2iz>
 8001eae:	4603      	mov	r3, r0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(int16_t adc_raw) {
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 8001ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ece:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001eec <calc_adc_raw_to_mv_float+0x34>
 8001ed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ef0 <calc_adc_raw_to_mv_float+0x38>
 8001eda:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001ede:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	457ff000 	.word	0x457ff000
 8001ef0:	454e4000 	.word	0x454e4000

08001ef4 <calc_adc_raw_to_V>:

float calc_adc_raw_to_V(int16_t adc_raw) {
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_V;
 8001efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001f28 <calc_adc_raw_to_V+0x34>
 8001f0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f12:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f2c <calc_adc_raw_to_V+0x38>
 8001f16:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	457ff000 	.word	0x457ff000
 8001f2c:	44480000 	.word	0x44480000

08001f30 <calc_adc_raw_to_A>:

float calc_adc_raw_to_A(int16_t adc_raw) {
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_I;
 8001f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f46:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001f64 <calc_adc_raw_to_A+0x34>
 8001f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f4e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f68 <calc_adc_raw_to_A+0x38>
 8001f52:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001f56:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	457ff000 	.word	0x457ff000
 8001f68:	43480000 	.word	0x43480000

08001f6c <cmd_error>:
extern uint8_t tft_display;
extern uint16_t new_time_period;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4803      	ldr	r0, [pc, #12]	; (8001f84 <cmd_error+0x18>)
 8001f78:	f002 f848 	bl	800400c <term_print>
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	0800e620 	.word	0x0800e620

08001f88 <cmd_t>:

int cmd_t(uint8_t* cmd_str) {
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3301      	adds	r3, #1
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b74      	cmp	r3, #116	; 0x74
 8001f98:	d014      	beq.n	8001fc4 <cmd_t+0x3c>
 8001f9a:	2b74      	cmp	r3, #116	; 0x74
 8001f9c:	dc17      	bgt.n	8001fce <cmd_t+0x46>
 8001f9e:	2b54      	cmp	r3, #84	; 0x54
 8001fa0:	d010      	beq.n	8001fc4 <cmd_t+0x3c>
 8001fa2:	2b54      	cmp	r3, #84	; 0x54
 8001fa4:	dc13      	bgt.n	8001fce <cmd_t+0x46>
 8001fa6:	2b30      	cmp	r3, #48	; 0x30
 8001fa8:	d002      	beq.n	8001fb0 <cmd_t+0x28>
 8001faa:	2b31      	cmp	r3, #49	; 0x31
 8001fac:	d005      	beq.n	8001fba <cmd_t+0x32>
 8001fae:	e00e      	b.n	8001fce <cmd_t+0x46>
	case '0':
		tft_display = 1;
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <cmd_t+0x58>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
		return 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e00b      	b.n	8001fd2 <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <cmd_t+0x58>)
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	701a      	strb	r2, [r3, #0]
		return 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e006      	b.n	8001fd2 <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <cmd_t+0x58>)
 8001fc6:	2209      	movs	r2, #9
 8001fc8:	701a      	strb	r2, [r3, #0]
		return 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e001      	b.n	8001fd2 <cmd_t+0x4a>
	}
	return -1;
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20001266 	.word	0x20001266

08001fe4 <cmd_p>:

// adjust timer period
int cmd_p(uint8_t* cmd_str) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f107 0208 	add.w	r2, r7, #8
 8001ff4:	4909      	ldr	r1, [pc, #36]	; (800201c <cmd_p+0x38>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f009 fa76 	bl	800b4e8 <siscanf>
 8001ffc:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d002      	beq.n	800200a <cmd_p+0x26>
 8002004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002008:	e004      	b.n	8002014 <cmd_p+0x30>
	new_time_period = value;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	b29a      	uxth	r2, r3
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <cmd_p+0x3c>)
 8002010:	801a      	strh	r2, [r3, #0]
	return 0;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	0800e638 	.word	0x0800e638
 8002020:	20001268 	.word	0x20001268

08002024 <cmd_led>:

int cmd_led(int cmd) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	if (cmd > 1) {
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b01      	cmp	r3, #1
 8002030:	dd05      	ble.n	800203e <cmd_led+0x1a>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002032:	2201      	movs	r2, #1
 8002034:	2120      	movs	r1, #32
 8002036:	4807      	ldr	r0, [pc, #28]	; (8002054 <cmd_led+0x30>)
 8002038:	f005 fd2e 	bl	8007a98 <HAL_GPIO_WritePin>
 800203c:	e004      	b.n	8002048 <cmd_led+0x24>
	} else {
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	2120      	movs	r1, #32
 8002042:	4804      	ldr	r0, [pc, #16]	; (8002054 <cmd_led+0x30>)
 8002044:	f005 fd28 	bl	8007a98 <HAL_GPIO_WritePin>
	}
	return(0);
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40020000 	.word	0x40020000

08002058 <cmd_help>:


int cmd_help(void) {
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 800205c:	4810      	ldr	r0, [pc, #64]	; (80020a0 <cmd_help+0x48>)
 800205e:	f001 ffd5 	bl	800400c <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 8002062:	4810      	ldr	r0, [pc, #64]	; (80020a4 <cmd_help+0x4c>)
 8002064:	f001 ffd2 	bl	800400c <term_print>
#ifdef USE_DISPLAY
	term_print("D[1..4]: Display ADC channel 1 - 4 on TFT display\r\n");
 8002068:	480f      	ldr	r0, [pc, #60]	; (80020a8 <cmd_help+0x50>)
 800206a:	f001 ffcf 	bl	800400c <term_print>
#endif
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 800206e:	480f      	ldr	r0, [pc, #60]	; (80020ac <cmd_help+0x54>)
 8002070:	f001 ffcc 	bl	800400c <term_print>
	term_print("M show measurements using all channels");
 8002074:	480e      	ldr	r0, [pc, #56]	; (80020b0 <cmd_help+0x58>)
 8002076:	f001 ffc9 	bl	800400c <term_print>
	term_print("M[1..4]: Show measurements for ADC channel 1 - 4 buffer in terminal \r\n");
 800207a:	480e      	ldr	r0, [pc, #56]	; (80020b4 <cmd_help+0x5c>)
 800207c:	f001 ffc6 	bl	800400c <term_print>
	term_print("P[2000..2500]: adjust timer value for sample time\r\n");
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <cmd_help+0x60>)
 8002082:	f001 ffc3 	bl	800400c <term_print>
	term_print("R: Restart ADC conversion\r\n");
 8002086:	480d      	ldr	r0, [pc, #52]	; (80020bc <cmd_help+0x64>)
 8002088:	f001 ffc0 	bl	800400c <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <cmd_help+0x68>)
 800208e:	f001 ffbd 	bl	800400c <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 8002092:	480c      	ldr	r0, [pc, #48]	; (80020c4 <cmd_help+0x6c>)
 8002094:	f001 ffba 	bl	800400c <term_print>
	return 0;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	0800e63c 	.word	0x0800e63c
 80020a4:	0800e650 	.word	0x0800e650
 80020a8:	0800e688 	.word	0x0800e688
 80020ac:	0800e6bc 	.word	0x0800e6bc
 80020b0:	0800e6d8 	.word	0x0800e6d8
 80020b4:	0800e700 	.word	0x0800e700
 80020b8:	0800e748 	.word	0x0800e748
 80020bc:	0800e77c 	.word	0x0800e77c
 80020c0:	0800e798 	.word	0x0800e798
 80020c4:	0800e7d8 	.word	0x0800e7d8

080020c8 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	int retval = -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020d4:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	3b3f      	subs	r3, #63	; 0x3f
 80020dc:	2b35      	cmp	r3, #53	; 0x35
 80020de:	f200 80c9 	bhi.w	8002274 <cmd_process+0x1ac>
 80020e2:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <cmd_process+0x20>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	0800226f 	.word	0x0800226f
 80020ec:	08002275 	.word	0x08002275
 80020f0:	08002275 	.word	0x08002275
 80020f4:	08002275 	.word	0x08002275
 80020f8:	080021c1 	.word	0x080021c1
 80020fc:	080021d7 	.word	0x080021d7
 8002100:	08002275 	.word	0x08002275
 8002104:	08002275 	.word	0x08002275
 8002108:	08002275 	.word	0x08002275
 800210c:	0800226f 	.word	0x0800226f
 8002110:	08002275 	.word	0x08002275
 8002114:	08002275 	.word	0x08002275
 8002118:	08002275 	.word	0x08002275
 800211c:	080021ff 	.word	0x080021ff
 8002120:	08002211 	.word	0x08002211
 8002124:	08002275 	.word	0x08002275
 8002128:	08002275 	.word	0x08002275
 800212c:	08002239 	.word	0x08002239
 8002130:	08002275 	.word	0x08002275
 8002134:	08002243 	.word	0x08002243
 8002138:	0800224f 	.word	0x0800224f
 800213c:	08002265 	.word	0x08002265
 8002140:	08002275 	.word	0x08002275
 8002144:	08002275 	.word	0x08002275
 8002148:	08002275 	.word	0x08002275
 800214c:	08002275 	.word	0x08002275
 8002150:	08002275 	.word	0x08002275
 8002154:	08002275 	.word	0x08002275
 8002158:	08002275 	.word	0x08002275
 800215c:	08002275 	.word	0x08002275
 8002160:	08002275 	.word	0x08002275
 8002164:	08002275 	.word	0x08002275
 8002168:	08002275 	.word	0x08002275
 800216c:	08002275 	.word	0x08002275
 8002170:	08002275 	.word	0x08002275
 8002174:	08002275 	.word	0x08002275
 8002178:	080021c1 	.word	0x080021c1
 800217c:	080021d7 	.word	0x080021d7
 8002180:	08002275 	.word	0x08002275
 8002184:	08002275 	.word	0x08002275
 8002188:	08002275 	.word	0x08002275
 800218c:	0800226f 	.word	0x0800226f
 8002190:	08002275 	.word	0x08002275
 8002194:	08002275 	.word	0x08002275
 8002198:	08002275 	.word	0x08002275
 800219c:	080021ff 	.word	0x080021ff
 80021a0:	08002211 	.word	0x08002211
 80021a4:	08002275 	.word	0x08002275
 80021a8:	08002275 	.word	0x08002275
 80021ac:	08002239 	.word	0x08002239
 80021b0:	08002275 	.word	0x08002275
 80021b4:	08002243 	.word	0x08002243
 80021b8:	0800224f 	.word	0x0800224f
 80021bc:	08002265 	.word	0x08002265
	case 'C':
	case 'c':
		term_csv_buffer(cmd_str[1] - 0x31);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3301      	adds	r3, #1
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	3b31      	subs	r3, #49	; 0x31
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	4618      	mov	r0, r3
 80021cc:	f002 f892 	bl	80042f4 <term_csv_buffer>
		retval = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
		break;
 80021d4:	e04e      	b.n	8002274 <cmd_process+0x1ac>
#ifdef USE_DISPLAY
	case 'D':
	case 'd':
		if (strlen((char*)cmd_str) > 1) {
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe f86a 	bl	80002b0 <strlen>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d908      	bls.n	80021f4 <cmd_process+0x12c>
			display_show_curve(cmd_str[1] - 0x31);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3301      	adds	r3, #1
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	3b31      	subs	r3, #49	; 0x31
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fb71 	bl	80028d4 <display_show_curve>
 80021f2:	e001      	b.n	80021f8 <cmd_process+0x130>
		} else {
			display_show_curves();
 80021f4:	f000 fa58 	bl	80026a8 <display_show_curves>
		}
		retval = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
		break;
 80021fc:	e03a      	b.n	8002274 <cmd_process+0x1ac>
#endif
	case 'L':
	case 'l':
		retval = cmd_led(cmd_str[1] - 0x30 + 1);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3301      	adds	r3, #1
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	3b2f      	subs	r3, #47	; 0x2f
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff0c 	bl	8002024 <cmd_led>
 800220c:	60f8      	str	r0, [r7, #12]
		break;
 800220e:	e031      	b.n	8002274 <cmd_process+0x1ac>
	case 'M':
	case 'm':
		if (strlen((char*)cmd_str) > 1) {
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7fe f84d 	bl	80002b0 <strlen>
 8002216:	4603      	mov	r3, r0
 8002218:	2b01      	cmp	r3, #1
 800221a:	d908      	bls.n	800222e <cmd_process+0x166>
		    term_show_channel(cmd_str[1] - 0x31);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3301      	adds	r3, #1
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	3b31      	subs	r3, #49	; 0x31
 8002224:	b2db      	uxtb	r3, r3
 8002226:	4618      	mov	r0, r3
 8002228:	f001 ffc0 	bl	80041ac <term_show_channel>
 800222c:	e001      	b.n	8002232 <cmd_process+0x16a>
		} else {
			term_show_measurements();
 800222e:	f001 ff67 	bl	8004100 <term_show_measurements>
		}
		retval = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
		break;
 8002236:	e01d      	b.n	8002274 <cmd_process+0x1ac>
	case 'P':
	case 'p':
		retval = cmd_p(cmd_str);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fed3 	bl	8001fe4 <cmd_p>
 800223e:	60f8      	str	r0, [r7, #12]
		break;
 8002240:	e018      	b.n	8002274 <cmd_process+0x1ac>
	case 'R':
	case 'r':
		adc_restart = 1;
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <cmd_process+0x1b8>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
		break;
 800224c:	e012      	b.n	8002274 <cmd_process+0x1ac>
	case 'S':
	case 's':
		term_show_buffer(cmd_str[1] - 0x31);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3301      	adds	r3, #1
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3b31      	subs	r3, #49	; 0x31
 8002256:	b2db      	uxtb	r3, r3
 8002258:	4618      	mov	r0, r3
 800225a:	f001 fefb 	bl	8004054 <term_show_buffer>
		retval = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
		break;
 8002262:	e007      	b.n	8002274 <cmd_process+0x1ac>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff fe8f 	bl	8001f88 <cmd_t>
 800226a:	60f8      	str	r0, [r7, #12]
		break;
 800226c:	e002      	b.n	8002274 <cmd_process+0x1ac>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 800226e:	f7ff fef3 	bl	8002058 <cmd_help>
 8002272:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 8002274:	68fb      	ldr	r3, [r7, #12]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20001265 	.word	0x20001265

08002284 <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7fe f80f 	bl	80002b0 <strlen>
 8002292:	4603      	mov	r3, r0
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <CMD_Handler+0x3c>)
 8002298:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <CMD_Handler+0x3c>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d105      	bne.n	80022ae <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff fe62 	bl	8001f6c <cmd_error>
		return -1;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ac:	e003      	b.n	80022b6 <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ff0a 	bl	80020c8 <cmd_process>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000028c 	.word	0x2000028c

080022c4 <display_start_screen>:
uint16_t aligned_curve[ADC_NUM_BUFFERS][DISPLAY_X];	// raw samples reduced to one full cycle (around 400 samples)
uint16_t curve_len = 0;
char str[32];
uint8_t lastbuf = 9;

void display_start_screen() {
 80022c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af06      	add	r7, sp, #24
	// Draw initial TFT Display
	  Displ_CLS(BLACK);			// after initialization (above) and before turning on backlight (below), you can draw the initial display appearance.
 80022ca:	2000      	movs	r0, #0
 80022cc:	f002 fbce 	bl	8004a6c <Displ_CLS>
	  Displ_Line(0, 0, 20, 0, BLUE);
 80022d0:	231f      	movs	r3, #31
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2300      	movs	r3, #0
 80022d6:	2214      	movs	r2, #20
 80022d8:	2100      	movs	r1, #0
 80022da:	2000      	movs	r0, #0
 80022dc:	f002 fdaf 	bl	8004e3e <Displ_Line>
	  Displ_Line(0, 0, 0, 20, BLUE);
 80022e0:	231f      	movs	r3, #31
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2314      	movs	r3, #20
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2000      	movs	r0, #0
 80022ec:	f002 fda7 	bl	8004e3e <Displ_Line>
	  //Displ_Line(0, 140, 240, 140, RED);
	  Displ_WString(10, 10, "10,10" , Font12, 1, BLUE, WHITE);
 80022f0:	4b6a      	ldr	r3, [pc, #424]	; (800249c <display_start_screen+0x1d8>)
 80022f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f6:	9204      	str	r2, [sp, #16]
 80022f8:	221f      	movs	r2, #31
 80022fa:	9203      	str	r2, [sp, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	9202      	str	r2, [sp, #8]
 8002300:	466c      	mov	r4, sp
 8002302:	1d1a      	adds	r2, r3, #4
 8002304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002308:	e884 0003 	stmia.w	r4, {r0, r1}
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a64      	ldr	r2, [pc, #400]	; (80024a0 <display_start_screen+0x1dc>)
 8002310:	210a      	movs	r1, #10
 8002312:	200a      	movs	r0, #10
 8002314:	f003 fb06 	bl	8005924 <Displ_WString>
	  Displ_Line(DISPLAY_X-1, 0, DISPLAY_X-1, 20, RED);
 8002318:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2314      	movs	r3, #20
 8002320:	f240 123f 	movw	r2, #319	; 0x13f
 8002324:	2100      	movs	r1, #0
 8002326:	f240 103f 	movw	r0, #319	; 0x13f
 800232a:	f002 fd88 	bl	8004e3e <Displ_Line>
	  Displ_Line(DISPLAY_X-1, 0, DISPLAY_X-1-20, 0, RED);
 800232e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	2300      	movs	r3, #0
 8002336:	f240 122b 	movw	r2, #299	; 0x12b
 800233a:	2100      	movs	r1, #0
 800233c:	f240 103f 	movw	r0, #319	; 0x13f
 8002340:	f002 fd7d 	bl	8004e3e <Displ_Line>
	  snprintf(str,32,"%d,%d",DISPLAY_X-10, 10);
 8002344:	230a      	movs	r3, #10
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	f44f 739b 	mov.w	r3, #310	; 0x136
 800234c:	4a55      	ldr	r2, [pc, #340]	; (80024a4 <display_start_screen+0x1e0>)
 800234e:	2120      	movs	r1, #32
 8002350:	4855      	ldr	r0, [pc, #340]	; (80024a8 <display_start_screen+0x1e4>)
 8002352:	f009 f875 	bl	800b440 <sniprintf>
	  Displ_WString(DISPLAY_X-1-10-strlen(str)*Font12.Width, 10, str, Font12, 1, RED, WHITE);
 8002356:	4854      	ldr	r0, [pc, #336]	; (80024a8 <display_start_screen+0x1e4>)
 8002358:	f7fd ffaa 	bl	80002b0 <strlen>
 800235c:	4603      	mov	r3, r0
 800235e:	b29a      	uxth	r2, r3
 8002360:	4b4e      	ldr	r3, [pc, #312]	; (800249c <display_start_screen+0x1d8>)
 8002362:	889b      	ldrh	r3, [r3, #4]
 8002364:	fb12 f303 	smulbb	r3, r2, r3
 8002368:	b29b      	uxth	r3, r3
 800236a:	f5c3 739a 	rsb	r3, r3, #308	; 0x134
 800236e:	3301      	adds	r3, #1
 8002370:	b29c      	uxth	r4, r3
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <display_start_screen+0x1d8>)
 8002374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002378:	9204      	str	r2, [sp, #16]
 800237a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800237e:	9203      	str	r2, [sp, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	9202      	str	r2, [sp, #8]
 8002384:	466d      	mov	r5, sp
 8002386:	1d1a      	adds	r2, r3, #4
 8002388:	e892 0003 	ldmia.w	r2, {r0, r1}
 800238c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a45      	ldr	r2, [pc, #276]	; (80024a8 <display_start_screen+0x1e4>)
 8002394:	210a      	movs	r1, #10
 8002396:	4620      	mov	r0, r4
 8002398:	f003 fac4 	bl	8005924 <Displ_WString>

	  //Displ_Line(0, 0, 0, 20, BLUE);
	  Displ_Line(0, DISPLAY_Y-1, 0, DISPLAY_Y-1-20, GREEN);
 800239c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	23db      	movs	r3, #219	; 0xdb
 80023a4:	2200      	movs	r2, #0
 80023a6:	21ef      	movs	r1, #239	; 0xef
 80023a8:	2000      	movs	r0, #0
 80023aa:	f002 fd48 	bl	8004e3e <Displ_Line>
	  Displ_Line(0, DISPLAY_Y-1, 20, DISPLAY_Y-1, GREEN);
 80023ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	23ef      	movs	r3, #239	; 0xef
 80023b6:	2214      	movs	r2, #20
 80023b8:	21ef      	movs	r1, #239	; 0xef
 80023ba:	2000      	movs	r0, #0
 80023bc:	f002 fd3f 	bl	8004e3e <Displ_Line>
	  snprintf(str,32,"%d,%d",10,DISPLAY_Y-10);
 80023c0:	23e6      	movs	r3, #230	; 0xe6
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	230a      	movs	r3, #10
 80023c6:	4a37      	ldr	r2, [pc, #220]	; (80024a4 <display_start_screen+0x1e0>)
 80023c8:	2120      	movs	r1, #32
 80023ca:	4837      	ldr	r0, [pc, #220]	; (80024a8 <display_start_screen+0x1e4>)
 80023cc:	f009 f838 	bl	800b440 <sniprintf>
	  Displ_WString(10, DISPLAY_Y-10-Font12.Height, str, Font12, 1, BLACK, WHITE);
 80023d0:	4b32      	ldr	r3, [pc, #200]	; (800249c <display_start_screen+0x1d8>)
 80023d2:	88db      	ldrh	r3, [r3, #6]
 80023d4:	f1c3 03e6 	rsb	r3, r3, #230	; 0xe6
 80023d8:	b29c      	uxth	r4, r3
 80023da:	4b30      	ldr	r3, [pc, #192]	; (800249c <display_start_screen+0x1d8>)
 80023dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e0:	9204      	str	r2, [sp, #16]
 80023e2:	2200      	movs	r2, #0
 80023e4:	9203      	str	r2, [sp, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	9202      	str	r2, [sp, #8]
 80023ea:	466d      	mov	r5, sp
 80023ec:	1d1a      	adds	r2, r3, #4
 80023ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a2b      	ldr	r2, [pc, #172]	; (80024a8 <display_start_screen+0x1e4>)
 80023fa:	4621      	mov	r1, r4
 80023fc:	200a      	movs	r0, #10
 80023fe:	f003 fa91 	bl	8005924 <Displ_WString>

	  Displ_Line(DISPLAY_X-1, DISPLAY_Y-1, DISPLAY_X-1-20, DISPLAY_Y-1, YELLOW);
 8002402:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	23ef      	movs	r3, #239	; 0xef
 800240a:	f240 122b 	movw	r2, #299	; 0x12b
 800240e:	21ef      	movs	r1, #239	; 0xef
 8002410:	f240 103f 	movw	r0, #319	; 0x13f
 8002414:	f002 fd13 	bl	8004e3e <Displ_Line>
	  Displ_Line(DISPLAY_X-1, DISPLAY_Y-1, DISPLAY_X-1, DISPLAY_Y-1-20, YELLOW);
 8002418:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	23db      	movs	r3, #219	; 0xdb
 8002420:	f240 123f 	movw	r2, #319	; 0x13f
 8002424:	21ef      	movs	r1, #239	; 0xef
 8002426:	f240 103f 	movw	r0, #319	; 0x13f
 800242a:	f002 fd08 	bl	8004e3e <Displ_Line>
	  snprintf(str,32,"%d,%d",DISPLAY_X-10,DISPLAY_Y-10);
 800242e:	23e6      	movs	r3, #230	; 0xe6
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002436:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <display_start_screen+0x1e0>)
 8002438:	2120      	movs	r1, #32
 800243a:	481b      	ldr	r0, [pc, #108]	; (80024a8 <display_start_screen+0x1e4>)
 800243c:	f009 f800 	bl	800b440 <sniprintf>
	  Displ_WString(DISPLAY_X-1-10-strlen(str)*Font12.Width, DISPLAY_Y-10-Font12.Height, str, Font12, 1, BLACK, WHITE);
 8002440:	4819      	ldr	r0, [pc, #100]	; (80024a8 <display_start_screen+0x1e4>)
 8002442:	f7fd ff35 	bl	80002b0 <strlen>
 8002446:	4603      	mov	r3, r0
 8002448:	b29a      	uxth	r2, r3
 800244a:	4b14      	ldr	r3, [pc, #80]	; (800249c <display_start_screen+0x1d8>)
 800244c:	889b      	ldrh	r3, [r3, #4]
 800244e:	fb12 f303 	smulbb	r3, r2, r3
 8002452:	b29b      	uxth	r3, r3
 8002454:	f5c3 739a 	rsb	r3, r3, #308	; 0x134
 8002458:	3301      	adds	r3, #1
 800245a:	b29c      	uxth	r4, r3
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <display_start_screen+0x1d8>)
 800245e:	88db      	ldrh	r3, [r3, #6]
 8002460:	f1c3 03e6 	rsb	r3, r3, #230	; 0xe6
 8002464:	b29d      	uxth	r5, r3
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <display_start_screen+0x1d8>)
 8002468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800246c:	9204      	str	r2, [sp, #16]
 800246e:	2200      	movs	r2, #0
 8002470:	9203      	str	r2, [sp, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	9202      	str	r2, [sp, #8]
 8002476:	466e      	mov	r6, sp
 8002478:	1d1a      	adds	r2, r3, #4
 800247a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800247e:	e886 0003 	stmia.w	r6, {r0, r1}
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <display_start_screen+0x1e4>)
 8002486:	4629      	mov	r1, r5
 8002488:	4620      	mov	r0, r4
 800248a:	f003 fa4b 	bl	8005924 <Displ_WString>

	  //Displ_WString(380, 10, "380,10" , Font12, 1, RED, WHITE);
	  //Displ_WString(10, 300, "10,300" , Font12, 1, RED, WHITE);
	  Displ_BackLight('1');
 800248e:	2031      	movs	r0, #49	; 0x31
 8002490:	f003 fa88 	bl	80059a4 <Displ_BackLight>
}
 8002494:	bf00      	nop
 8002496:	3704      	adds	r7, #4
 8002498:	46bd      	mov	sp, r7
 800249a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800249c:	2000000c 	.word	0x2000000c
 80024a0:	0800e80c 	.word	0x0800e80c
 80024a4:	0800e814 	.word	0x0800e814
 80024a8:	20000f14 	.word	0x20000f14

080024ac <draw_curve>:

void draw_curve(uint16_t colour) {
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	4603      	mov	r3, r0
 80024b4:	80fb      	strh	r3, [r7, #6]
	for (int x=1; x<curve_len; x++) {
 80024b6:	2301      	movs	r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	e019      	b.n	80024f0 <draw_curve+0x44>
		Displ_Line(x-1, curve_y[x-1], x, curve_y[x], colour);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	b218      	sxth	r0, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	4a0f      	ldr	r2, [pc, #60]	; (8002508 <draw_curve+0x5c>)
 80024cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024d0:	b219      	sxth	r1, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	b21a      	sxth	r2, r3
 80024d6:	4c0c      	ldr	r4, [pc, #48]	; (8002508 <draw_curve+0x5c>)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80024de:	b21c      	sxth	r4, r3
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	4623      	mov	r3, r4
 80024e6:	f002 fcaa 	bl	8004e3e <Displ_Line>
	for (int x=1; x<curve_len; x++) {
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3301      	adds	r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <draw_curve+0x60>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4293      	cmp	r3, r2
 80024fa:	dbdf      	blt.n	80024bc <draw_curve+0x10>
	}
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	bd90      	pop	{r4, r7, pc}
 8002506:	bf00      	nop
 8002508:	20000290 	.word	0x20000290
 800250c:	20000f10 	.word	0x20000f10

08002510 <display_align_curves>:
/*
 * Aligns curve to start at positive zero crossing and reduces it to cuts one full cycle
 * parameter bufnum: buffer to use for curve display
 * returns: number of points in the aligned curve or -1 if alignment failed
 */
int display_align_curves() {
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
	int dest_idx = -1;
 8002516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800251a:	60fb      	str	r3, [r7, #12]
	int i, continue_at = -1;
 800251c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002520:	607b      	str	r3, [r7, #4]

	// if we don't have a zero crossing use the sample_buf curve entries
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8002522:	4b5e      	ldr	r3, [pc, #376]	; (800269c <display_align_curves+0x18c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	da38      	bge.n	800259c <display_align_curves+0x8c>
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	e02e      	b.n	800258e <display_align_curves+0x7e>
			aligned_curve[ADC_CH_V][i] = sample_buf[ADC_CH_V][i];
 8002530:	4a5b      	ldr	r2, [pc, #364]	; (80026a0 <display_align_curves+0x190>)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002538:	4a5a      	ldr	r2, [pc, #360]	; (80026a4 <display_align_curves+0x194>)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[ADC_CH_I1][i] = sample_buf[ADC_CH_I1][i];
 8002540:	4a57      	ldr	r2, [pc, #348]	; (80026a0 <display_align_curves+0x190>)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002548:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800254c:	4a55      	ldr	r2, [pc, #340]	; (80026a4 <display_align_curves+0x194>)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002554:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[ADC_CH_I2][i] = sample_buf[ADC_CH_I2][i];
 8002558:	4a51      	ldr	r2, [pc, #324]	; (80026a0 <display_align_curves+0x190>)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8002560:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002564:	4a4f      	ldr	r2, [pc, #316]	; (80026a4 <display_align_curves+0x194>)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800256c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[ADC_CH_I3][i] = sample_buf[ADC_CH_I3][i];
 8002570:	4a4b      	ldr	r2, [pc, #300]	; (80026a0 <display_align_curves+0x190>)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8002578:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800257c:	4a49      	ldr	r2, [pc, #292]	; (80026a4 <display_align_curves+0x194>)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8002584:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	3301      	adds	r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002594:	d3cc      	bcc.n	8002530 <display_align_curves+0x20>
		}
		return SAMPLE_BUF_SIZE;
 8002596:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800259a:	e079      	b.n	8002690 <display_align_curves+0x180>
	}

	// start at zero crossing and use every reading up to the end of the sample buffer
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 800259c:	4b3f      	ldr	r3, [pc, #252]	; (800269c <display_align_curves+0x18c>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	e031      	b.n	8002608 <display_align_curves+0xf8>
		dest_idx++;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3301      	adds	r3, #1
 80025a8:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 80025aa:	4a3d      	ldr	r2, [pc, #244]	; (80026a0 <display_align_curves+0x190>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80025b2:	4a3c      	ldr	r2, [pc, #240]	; (80026a4 <display_align_curves+0x194>)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 80025ba:	4a39      	ldr	r2, [pc, #228]	; (80026a0 <display_align_curves+0x190>)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80025c2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80025c6:	4a37      	ldr	r2, [pc, #220]	; (80026a4 <display_align_curves+0x194>)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80025ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I2][dest_idx] = sample_buf[ADC_CH_I2][i];
 80025d2:	4a33      	ldr	r2, [pc, #204]	; (80026a0 <display_align_curves+0x190>)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80025da:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80025de:	4a31      	ldr	r2, [pc, #196]	; (80026a4 <display_align_curves+0x194>)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I3][dest_idx] = sample_buf[ADC_CH_I3][i];
 80025ea:	4a2d      	ldr	r2, [pc, #180]	; (80026a0 <display_align_curves+0x190>)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 80025f2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80025f6:	4a2b      	ldr	r2, [pc, #172]	; (80026a4 <display_align_curves+0x194>)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80025fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	3301      	adds	r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800260e:	d3c9      	bcc.n	80025a4 <display_align_curves+0x94>
			}
		}
	}
	*/

	continue_at = SAMPLE_BUF_OVERLAP;
 8002610:	2314      	movs	r3, #20
 8002612:	607b      	str	r3, [r7, #4]

	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	e031      	b.n	800267e <display_align_curves+0x16e>
		dest_idx++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3301      	adds	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002620:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <display_align_curves+0x190>)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002628:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <display_align_curves+0x194>)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002630:	4a1b      	ldr	r2, [pc, #108]	; (80026a0 <display_align_curves+0x190>)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002638:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800263c:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <display_align_curves+0x194>)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002644:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I2][dest_idx] = sample_buf[ADC_CH_I2][i];
 8002648:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <display_align_curves+0x190>)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8002650:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <display_align_curves+0x194>)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800265c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I3][dest_idx] = sample_buf[ADC_CH_I3][i];
 8002660:	4a0f      	ldr	r2, [pc, #60]	; (80026a0 <display_align_curves+0x190>)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8002668:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800266c:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <display_align_curves+0x194>)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8002674:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	3301      	adds	r3, #1
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	4b07      	ldr	r3, [pc, #28]	; (800269c <display_align_curves+0x18c>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	429a      	cmp	r2, r3
 8002686:	dbc8      	blt.n	800261a <display_align_curves+0x10a>
	}
	return ++dest_idx;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3301      	adds	r3, #1
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	2000023c 	.word	0x2000023c
 80026a0:	2000613c 	.word	0x2000613c
 80026a4:	20000510 	.word	0x20000510

080026a8 <display_show_curves>:

void display_show_curves(void) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af02      	add	r7, sp, #8

	int y_offset = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
	int y_max = DISPLAY_Y -1;		// max Y pixel position
 80026b2:	23ef      	movs	r3, #239	; 0xef
 80026b4:	60bb      	str	r3, [r7, #8]
	int x_max = ADC_NUM_DATA / 2;	// we have twice as many readings as pixels on the display
 80026b6:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80026ba:	607b      	str	r3, [r7, #4]
	/*int value = 0;
	int y_grid_100 = 0;
	int y_grid_50 = 0;
	int y_grid_25 = 0;
*/
	int scale_factor = 1;
 80026bc:	2301      	movs	r3, #1
 80026be:	61fb      	str	r3, [r7, #28]
	float fScale;

	Displ_CLS(BLACK);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f002 f9d3 	bl	8004a6c <Displ_CLS>
	// zero line
	Displ_Line(0, DISPLAY_Y/2, x_max, DISPLAY_Y/2, WHITE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2378      	movs	r3, #120	; 0x78
 80026d2:	2178      	movs	r1, #120	; 0x78
 80026d4:	2000      	movs	r0, #0
 80026d6:	f002 fbb2 	bl	8004e3e <Displ_Line>
	Displ_WString(x_max, DISPLAY_Y-Font16.Height, "0" , Font16, 1, BLACK, WHITE);

	Displ_WString(x_max, y_grid_25 - Font20.Height/2, "mV" , Font20, 1, WHITE, BLACK);
*/

	curve_len = display_align_curves();
 80026da:	f7ff ff19 	bl	8002510 <display_align_curves>
 80026de:	4603      	mov	r3, r0
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	4b75      	ldr	r3, [pc, #468]	; (80028b8 <display_show_curves+0x210>)
 80026e4:	801a      	strh	r2, [r3, #0]


	for (int i=0; i<4; i++) {
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e0dc      	b.n	80028a6 <display_show_curves+0x1fe>
		fScale = (float)DISPLAY_Y / (float)sample_buf_meta[i].max;
 80026ec:	4973      	ldr	r1, [pc, #460]	; (80028bc <display_show_curves+0x214>)
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	3302      	adds	r3, #2
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	ee07 3a90 	vmov	s15, r3
 8002702:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002706:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80028c0 <display_show_curves+0x218>
 800270a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800270e:	edc7 7a00 	vstr	s15, [r7]
		if (fScale < 1) {
 8002712:	edd7 7a00 	vldr	s15, [r7]
 8002716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800271a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	d51f      	bpl.n	8002764 <display_show_curves+0xbc>
			scale_factor = trunc(1/fScale)+1; // divisor
 8002724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002728:	edd7 7a00 	vldr	s15, [r7]
 800272c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002730:	ee16 0a90 	vmov	r0, s13
 8002734:	f7fd ff28 	bl	8000588 <__aeabi_f2d>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	ec43 2b10 	vmov	d0, r2, r3
 8002740:	f00b ff28 	bl	800e594 <trunc>
 8002744:	ec51 0b10 	vmov	r0, r1, d0
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <display_show_curves+0x21c>)
 800274e:	f7fd fdbd 	bl	80002cc <__adddf3>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	f7fe fa1d 	bl	8000b98 <__aeabi_d2iz>
 800275e:	4603      	mov	r3, r0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	e010      	b.n	8002786 <display_show_curves+0xde>
			//value = sample_buf_meta[i].max / scale_factor;
		} else {
			scale_factor = trunc(fScale);	// multiplier
 8002764:	6838      	ldr	r0, [r7, #0]
 8002766:	f7fd ff0f 	bl	8000588 <__aeabi_f2d>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	ec43 2b10 	vmov	d0, r2, r3
 8002772:	f00b ff0f 	bl	800e594 <trunc>
 8002776:	ec53 2b10 	vmov	r2, r3, d0
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	f7fe fa0b 	bl	8000b98 <__aeabi_d2iz>
 8002782:	4603      	mov	r3, r0
 8002784:	61fb      	str	r3, [r7, #28]
			//value = sample_buf_meta[i].max * scale_factor;
		}

		// calculate the new curve
		// set multiplier and divider to ensure the function can handle a wide range of values
		if (fScale < 1) {
 8002786:	edd7 7a00 	vldr	s15, [r7]
 800278a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800278e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002796:	d53e      	bpl.n	8002816 <display_show_curves+0x16e>
			// calculate start of first line
			curve_y[0] = y_max - (aligned_curve[i][0] / scale_factor + y_offset) ;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	b299      	uxth	r1, r3
 800279c:	484a      	ldr	r0, [pc, #296]	; (80028c8 <display_show_curves+0x220>)
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	01db      	lsls	r3, r3, #7
 80027a8:	4403      	add	r3, r0
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	b29b      	uxth	r3, r3
 80027be:	1acb      	subs	r3, r1, r3
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	4b42      	ldr	r3, [pc, #264]	; (80028cc <display_show_curves+0x224>)
 80027c4:	801a      	strh	r2, [r3, #0]
			for (int pos_x=1; pos_x < curve_len; pos_x++) {
 80027c6:	2301      	movs	r3, #1
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	e01d      	b.n	8002808 <display_show_curves+0x160>
				// calculate reading pixel on display using the scale value
				curve_y[pos_x] = y_max - (aligned_curve[i][pos_x] / scale_factor + y_offset);
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	b299      	uxth	r1, r3
 80027d0:	483d      	ldr	r0, [pc, #244]	; (80028c8 <display_show_curves+0x220>)
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	019b      	lsls	r3, r3, #6
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4413      	add	r3, r2
 80027e0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80027e4:	461a      	mov	r2, r3
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	1acb      	subs	r3, r1, r3
 80027f8:	b299      	uxth	r1, r3
 80027fa:	4a34      	ldr	r2, [pc, #208]	; (80028cc <display_show_curves+0x224>)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3301      	adds	r3, #1
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <display_show_curves+0x210>)
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	4293      	cmp	r3, r2
 8002812:	dbdb      	blt.n	80027cc <display_show_curves+0x124>
 8002814:	e03d      	b.n	8002892 <display_show_curves+0x1ea>
			}
		} else {
			// calculate start of first line
			curve_y[0] = y_max - (aligned_curve[i][0] * scale_factor + y_offset) ;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	b299      	uxth	r1, r3
 800281a:	482b      	ldr	r0, [pc, #172]	; (80028c8 <display_show_curves+0x220>)
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	01db      	lsls	r3, r3, #7
 8002826:	4403      	add	r3, r0
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	b29b      	uxth	r3, r3
 800282e:	fb12 f303 	smulbb	r3, r2, r3
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4413      	add	r3, r2
 800283a:	b29b      	uxth	r3, r3
 800283c:	1acb      	subs	r3, r1, r3
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b22      	ldr	r3, [pc, #136]	; (80028cc <display_show_curves+0x224>)
 8002842:	801a      	strh	r2, [r3, #0]
			for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8002844:	2301      	movs	r3, #1
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	e01d      	b.n	8002886 <display_show_curves+0x1de>
				// calculate reading pixel on display using the scale value
				curve_y[pos_x] = y_max - aligned_curve[i][pos_x] * scale_factor + y_offset;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	b299      	uxth	r1, r3
 800284e:	481e      	ldr	r0, [pc, #120]	; (80028c8 <display_show_curves+0x220>)
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	019b      	lsls	r3, r3, #6
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	b29b      	uxth	r3, r3
 8002866:	fb12 f303 	smulbb	r3, r2, r3
 800286a:	b29b      	uxth	r3, r3
 800286c:	1acb      	subs	r3, r1, r3
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	b29b      	uxth	r3, r3
 8002874:	4413      	add	r3, r2
 8002876:	b299      	uxth	r1, r3
 8002878:	4a14      	ldr	r2, [pc, #80]	; (80028cc <display_show_curves+0x224>)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	3301      	adds	r3, #1
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <display_show_curves+0x210>)
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4293      	cmp	r3, r2
 8002890:	dbdb      	blt.n	800284a <display_show_curves+0x1a2>
			}
		}

		draw_curve(channel_colour[i]);
 8002892:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <display_show_curves+0x228>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fe06 	bl	80024ac <draw_curve>
	for (int i=0; i<4; i++) {
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	3301      	adds	r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	f77f af1f 	ble.w	80026ec <display_show_curves+0x44>
	}
}
 80028ae:	bf00      	nop
 80028b0:	bf00      	nop
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000f10 	.word	0x20000f10
 80028bc:	2000023c 	.word	0x2000023c
 80028c0:	43700000 	.word	0x43700000
 80028c4:	3ff00000 	.word	0x3ff00000
 80028c8:	20000510 	.word	0x20000510
 80028cc:	20000290 	.word	0x20000290
 80028d0:	20000000 	.word	0x20000000

080028d4 <display_show_curve>:
/*
 * Show a ADC channel curve on TFT display
 * parameter bufnum: adc_raw_buf index to ADC channel
 * Disp_CLS() takes a long time to run so we draw the previous curve in black to remove it
 */
void display_show_curve(uint8_t bufnum) {
 80028d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028d6:	b095      	sub	sp, #84	; 0x54
 80028d8:	af06      	add	r7, sp, #24
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	f200 8218 	bhi.w	8002d16 <display_show_curve+0x442>

	int y_offset = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
	int y_max = DISPLAY_Y -1;		// max Y pixel position
 80028ea:	23ef      	movs	r3, #239	; 0xef
 80028ec:	623b      	str	r3, [r7, #32]
	int x_max = ADC_NUM_DATA / 2;	// we have twice as many readings as pixels on the display
 80028ee:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80028f2:	61fb      	str	r3, [r7, #28]
	int value = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
	//int buf_index = 1;
	int y_grid_100 = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]
	int y_grid_50 = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
	int y_grid_25 = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]

	int scale_factor = 1;
 8002904:	2301      	movs	r3, #1
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
	float fScale = (float)DISPLAY_Y / (float)sample_buf_meta[bufnum].max;
 8002908:	79fa      	ldrb	r2, [r7, #7]
 800290a:	4924      	ldr	r1, [pc, #144]	; (800299c <display_show_curve+0xc8>)
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	3302      	adds	r3, #2
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002922:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80029a0 <display_show_curve+0xcc>
 8002926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800292a:	edc7 7a03 	vstr	s15, [r7, #12]
	if (fScale < 1) {
 800292e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293e:	d533      	bpl.n	80029a8 <display_show_curve+0xd4>
		scale_factor = trunc(1/fScale)+1; // divisor
 8002940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002944:	edd7 7a03 	vldr	s15, [r7, #12]
 8002948:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800294c:	ee16 0a90 	vmov	r0, s13
 8002950:	f7fd fe1a 	bl	8000588 <__aeabi_f2d>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	ec43 2b10 	vmov	d0, r2, r3
 800295c:	f00b fe1a 	bl	800e594 <trunc>
 8002960:	ec51 0b10 	vmov	r0, r1, d0
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <display_show_curve+0xd0>)
 800296a:	f7fd fcaf 	bl	80002cc <__adddf3>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
 8002976:	f7fe f90f 	bl	8000b98 <__aeabi_d2iz>
 800297a:	4603      	mov	r3, r0
 800297c:	633b      	str	r3, [r7, #48]	; 0x30
		value = sample_buf_meta[bufnum].max / scale_factor;
 800297e:	79fa      	ldrb	r2, [r7, #7]
 8002980:	4906      	ldr	r1, [pc, #24]	; (800299c <display_show_curve+0xc8>)
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	3302      	adds	r3, #2
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	fb92 f3f3 	sdiv	r3, r2, r3
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
 800299a:	e024      	b.n	80029e6 <display_show_curve+0x112>
 800299c:	2000023c 	.word	0x2000023c
 80029a0:	43700000 	.word	0x43700000
 80029a4:	3ff00000 	.word	0x3ff00000
	} else {
		scale_factor = trunc(fScale);	// multiplier
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7fd fded 	bl	8000588 <__aeabi_f2d>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	ec43 2b10 	vmov	d0, r2, r3
 80029b6:	f00b fded 	bl	800e594 <trunc>
 80029ba:	ec53 2b10 	vmov	r2, r3, d0
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f7fe f8e9 	bl	8000b98 <__aeabi_d2iz>
 80029c6:	4603      	mov	r3, r0
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
		value = sample_buf_meta[bufnum].max * scale_factor;
 80029ca:	79fa      	ldrb	r2, [r7, #7]
 80029cc:	49a3      	ldr	r1, [pc, #652]	; (8002c5c <display_show_curve+0x388>)
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3302      	adds	r3, #2
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
	}
	y_grid_100 = y_max - value + y_offset;
 80029e6:	6a3a      	ldr	r2, [r7, #32]
 80029e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ee:	4413      	add	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
	y_grid_50 = y_max - value/2 + y_offset;
 80029f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f4:	0fda      	lsrs	r2, r3, #31
 80029f6:	4413      	add	r3, r2
 80029f8:	105b      	asrs	r3, r3, #1
 80029fa:	425b      	negs	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	4413      	add	r3, r2
 8002a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a04:	4413      	add	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
	y_grid_25 = y_max - value/4 + y_offset;
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da00      	bge.n	8002a10 <display_show_curve+0x13c>
 8002a0e:	3303      	adds	r3, #3
 8002a10:	109b      	asrs	r3, r3, #2
 8002a12:	425b      	negs	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	4413      	add	r3, r2
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	4413      	add	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

	Displ_CLS(BLACK);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f002 f823 	bl	8004a6c <Displ_CLS>

	// Draw grid lines
	Displ_Line(0, y_grid_100, x_max, y_grid_100, WHITE);	// 100%
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	b219      	sxth	r1, r3
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	b21a      	sxth	r2, r3
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a36:	9000      	str	r0, [sp, #0]
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f002 fa00 	bl	8004e3e <Displ_Line>
	Displ_Line(0, y_grid_50, x_max, y_grid_50, WHITE);	// 50%
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	b219      	sxth	r1, r3
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	b21a      	sxth	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	b21b      	sxth	r3, r3
 8002a4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a4e:	9000      	str	r0, [sp, #0]
 8002a50:	2000      	movs	r0, #0
 8002a52:	f002 f9f4 	bl	8004e3e <Displ_Line>
	Displ_Line(0, DISPLAY_Y-1, x_max, DISPLAY_Y-1, WHITE);	// Zero
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	b21a      	sxth	r2, r3
 8002a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	23ef      	movs	r3, #239	; 0xef
 8002a62:	21ef      	movs	r1, #239	; 0xef
 8002a64:	2000      	movs	r0, #0
 8002a66:	f002 f9ea 	bl	8004e3e <Displ_Line>

	// Display grid values
	snprintf(str,32,"%d",calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max));
 8002a6a:	79fa      	ldrb	r2, [r7, #7]
 8002a6c:	497b      	ldr	r1, [pc, #492]	; (8002c5c <display_show_curve+0x388>)
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3302      	adds	r3, #2
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f9fa 	bl	8001e78 <calc_adc_raw_to_mv_int>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4a76      	ldr	r2, [pc, #472]	; (8002c60 <display_show_curve+0x38c>)
 8002a88:	2120      	movs	r1, #32
 8002a8a:	4876      	ldr	r0, [pc, #472]	; (8002c64 <display_show_curve+0x390>)
 8002a8c:	f008 fcd8 	bl	800b440 <sniprintf>
	value = Font16.Width * strlen(str);
 8002a90:	4b75      	ldr	r3, [pc, #468]	; (8002c68 <display_show_curve+0x394>)
 8002a92:	889b      	ldrh	r3, [r3, #4]
 8002a94:	461c      	mov	r4, r3
 8002a96:	4873      	ldr	r0, [pc, #460]	; (8002c64 <display_show_curve+0x390>)
 8002a98:	f7fd fc0a 	bl	80002b0 <strlen>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	fb04 f303 	mul.w	r3, r4, r3
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
	Displ_WString(x_max, y_grid_100, str , Font16, 1, BLACK, WHITE);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	b29c      	uxth	r4, r3
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	b29d      	uxth	r5, r3
 8002aac:	4b6e      	ldr	r3, [pc, #440]	; (8002c68 <display_show_curve+0x394>)
 8002aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ab2:	9204      	str	r2, [sp, #16]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	9203      	str	r2, [sp, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	9202      	str	r2, [sp, #8]
 8002abc:	466e      	mov	r6, sp
 8002abe:	1d1a      	adds	r2, r3, #4
 8002ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ac4:	e886 0003 	stmia.w	r6, {r0, r1}
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a66      	ldr	r2, [pc, #408]	; (8002c64 <display_show_curve+0x390>)
 8002acc:	4629      	mov	r1, r5
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f002 ff28 	bl	8005924 <Displ_WString>
	snprintf(str,32,"%d",calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max/2));
 8002ad4:	79fa      	ldrb	r2, [r7, #7]
 8002ad6:	4961      	ldr	r1, [pc, #388]	; (8002c5c <display_show_curve+0x388>)
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	b21b      	sxth	r3, r3
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff f9c3 	bl	8001e78 <calc_adc_raw_to_mv_int>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4a5a      	ldr	r2, [pc, #360]	; (8002c60 <display_show_curve+0x38c>)
 8002af6:	2120      	movs	r1, #32
 8002af8:	485a      	ldr	r0, [pc, #360]	; (8002c64 <display_show_curve+0x390>)
 8002afa:	f008 fca1 	bl	800b440 <sniprintf>
	value = Font16.Width * strlen(str);
 8002afe:	4b5a      	ldr	r3, [pc, #360]	; (8002c68 <display_show_curve+0x394>)
 8002b00:	889b      	ldrh	r3, [r3, #4]
 8002b02:	461c      	mov	r4, r3
 8002b04:	4857      	ldr	r0, [pc, #348]	; (8002c64 <display_show_curve+0x390>)
 8002b06:	f7fd fbd3 	bl	80002b0 <strlen>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	fb04 f303 	mul.w	r3, r4, r3
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
	Displ_WString(x_max, y_grid_50-Font16.Height/2, str , Font16, 1, BLACK, WHITE);
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	b29c      	uxth	r4, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <display_show_curve+0x394>)
 8002b1c:	88db      	ldrh	r3, [r3, #6]
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	b29d      	uxth	r5, r3
 8002b26:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <display_show_curve+0x394>)
 8002b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b2c:	9204      	str	r2, [sp, #16]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	9203      	str	r2, [sp, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	9202      	str	r2, [sp, #8]
 8002b36:	466e      	mov	r6, sp
 8002b38:	1d1a      	adds	r2, r3, #4
 8002b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b3e:	e886 0003 	stmia.w	r6, {r0, r1}
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a47      	ldr	r2, [pc, #284]	; (8002c64 <display_show_curve+0x390>)
 8002b46:	4629      	mov	r1, r5
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f002 feeb 	bl	8005924 <Displ_WString>
	Displ_WString(x_max, DISPLAY_Y-Font16.Height, "0" , Font16, 1, BLACK, WHITE);
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	b29c      	uxth	r4, r3
 8002b52:	4b45      	ldr	r3, [pc, #276]	; (8002c68 <display_show_curve+0x394>)
 8002b54:	88db      	ldrh	r3, [r3, #6]
 8002b56:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002b5a:	b29d      	uxth	r5, r3
 8002b5c:	4b42      	ldr	r3, [pc, #264]	; (8002c68 <display_show_curve+0x394>)
 8002b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b62:	9204      	str	r2, [sp, #16]
 8002b64:	2200      	movs	r2, #0
 8002b66:	9203      	str	r2, [sp, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	9202      	str	r2, [sp, #8]
 8002b6c:	466e      	mov	r6, sp
 8002b6e:	1d1a      	adds	r2, r3, #4
 8002b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b74:	e886 0003 	stmia.w	r6, {r0, r1}
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a3c      	ldr	r2, [pc, #240]	; (8002c6c <display_show_curve+0x398>)
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f002 fed0 	bl	8005924 <Displ_WString>

	Displ_WString(x_max, y_grid_25 - Font20.Height/2, "mV" , Font20, 1, WHITE, BLACK);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	b29c      	uxth	r4, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	4b38      	ldr	r3, [pc, #224]	; (8002c70 <display_show_curve+0x39c>)
 8002b8e:	88db      	ldrh	r3, [r3, #6]
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	b29d      	uxth	r5, r3
 8002b98:	4b35      	ldr	r3, [pc, #212]	; (8002c70 <display_show_curve+0x39c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	9204      	str	r2, [sp, #16]
 8002b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ba2:	9203      	str	r2, [sp, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	9202      	str	r2, [sp, #8]
 8002ba8:	466e      	mov	r6, sp
 8002baa:	1d1a      	adds	r2, r3, #4
 8002bac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bb0:	e886 0003 	stmia.w	r6, {r0, r1}
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2f      	ldr	r2, [pc, #188]	; (8002c74 <display_show_curve+0x3a0>)
 8002bb8:	4629      	mov	r1, r5
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f002 feb2 	bl	8005924 <Displ_WString>

	curve_len = display_align_curves();
 8002bc0:	f7ff fca6 	bl	8002510 <display_align_curves>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <display_show_curve+0x3a4>)
 8002bca:	801a      	strh	r2, [r3, #0]

	// calculate the new curve
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 8002bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bdc:	d552      	bpl.n	8002c84 <display_show_curve+0x3b0>
		// calculate start of first line
		curve_y[0] = y_max - (aligned_curve[bufnum][0] / scale_factor + y_offset) ;
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	b299      	uxth	r1, r3
 8002be2:	79fa      	ldrb	r2, [r7, #7]
 8002be4:	4825      	ldr	r0, [pc, #148]	; (8002c7c <display_show_curve+0x3a8>)
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	01db      	lsls	r3, r3, #7
 8002bee:	4403      	add	r3, r0
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	1acb      	subs	r3, r1, r3
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <display_show_curve+0x3ac>)
 8002c0a:	801a      	strh	r2, [r3, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c10:	e01d      	b.n	8002c4e <display_show_curve+0x37a>
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = y_max - (aligned_curve[bufnum][pos_x] / scale_factor + y_offset);
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	b299      	uxth	r1, r3
 8002c16:	79fa      	ldrb	r2, [r7, #7]
 8002c18:	4818      	ldr	r0, [pc, #96]	; (8002c7c <display_show_curve+0x3a8>)
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c24:	4413      	add	r3, r2
 8002c26:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	1acb      	subs	r3, r1, r3
 8002c3e:	b299      	uxth	r1, r3
 8002c40:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <display_show_curve+0x3ac>)
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <display_show_curve+0x3a4>)
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	4293      	cmp	r3, r2
 8002c58:	dbdb      	blt.n	8002c12 <display_show_curve+0x33e>
 8002c5a:	e051      	b.n	8002d00 <display_show_curve+0x42c>
 8002c5c:	2000023c 	.word	0x2000023c
 8002c60:	0800e81c 	.word	0x0800e81c
 8002c64:	20000f14 	.word	0x20000f14
 8002c68:	20000018 	.word	0x20000018
 8002c6c:	0800e820 	.word	0x0800e820
 8002c70:	20000024 	.word	0x20000024
 8002c74:	0800e824 	.word	0x0800e824
 8002c78:	20000f10 	.word	0x20000f10
 8002c7c:	20000510 	.word	0x20000510
 8002c80:	20000290 	.word	0x20000290
		}
	} else {
		// calculate start of first line
		curve_y[0] = y_max - (aligned_curve[bufnum][0] * scale_factor + y_offset) ;
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	b299      	uxth	r1, r3
 8002c88:	79fa      	ldrb	r2, [r7, #7]
 8002c8a:	4825      	ldr	r0, [pc, #148]	; (8002d20 <display_show_curve+0x44c>)
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	01db      	lsls	r3, r3, #7
 8002c94:	4403      	add	r3, r0
 8002c96:	881a      	ldrh	r2, [r3, #0]
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	fb12 f303 	smulbb	r3, r2, r3
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	1acb      	subs	r3, r1, r3
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <display_show_curve+0x450>)
 8002cb0:	801a      	strh	r2, [r3, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb6:	e01d      	b.n	8002cf4 <display_show_curve+0x420>
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = y_max - aligned_curve[bufnum][pos_x] * scale_factor + y_offset;
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	b299      	uxth	r1, r3
 8002cbc:	79fa      	ldrb	r2, [r7, #7]
 8002cbe:	4818      	ldr	r0, [pc, #96]	; (8002d20 <display_show_curve+0x44c>)
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	019b      	lsls	r3, r3, #6
 8002cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cca:	4413      	add	r3, r2
 8002ccc:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	fb12 f303 	smulbb	r3, r2, r3
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	1acb      	subs	r3, r1, r3
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	b299      	uxth	r1, r3
 8002ce6:	4a0f      	ldr	r2, [pc, #60]	; (8002d24 <display_show_curve+0x450>)
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <display_show_curve+0x454>)
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	dbdb      	blt.n	8002cb8 <display_show_curve+0x3e4>
		}
	}

	draw_curve(channel_colour[bufnum]);
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <display_show_curve+0x458>)
 8002d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fbcf 	bl	80024ac <draw_curve>

	lastbuf = bufnum;
 8002d0e:	4a08      	ldr	r2, [pc, #32]	; (8002d30 <display_show_curve+0x45c>)
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	7013      	strb	r3, [r2, #0]
 8002d14:	e000      	b.n	8002d18 <display_show_curve+0x444>
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 8002d16:	bf00      	nop
}
 8002d18:	373c      	adds	r7, #60	; 0x3c
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000510 	.word	0x20000510
 8002d24:	20000290 	.word	0x20000290
 8002d28:	20000f10 	.word	0x20000f10
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	20000008 	.word	0x20000008

08002d34 <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8002d38:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8002d3c:	490d      	ldr	r1, [pc, #52]	; (8002d74 <start_adcs+0x40>)
 8002d3e:	480e      	ldr	r0, [pc, #56]	; (8002d78 <start_adcs+0x44>)
 8002d40:	f003 fc2a 	bl	8006598 <HAL_ADC_Start_DMA>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <start_adcs+0x20>
	  term_print("Error starting ADC1 DMA\r\n");
 8002d4a:	480c      	ldr	r0, [pc, #48]	; (8002d7c <start_adcs+0x48>)
 8002d4c:	f001 f95e 	bl	800400c <term_print>
  	  Error_Handler();
 8002d50:	f000 fd7c 	bl	800384c <Error_Handler>
	}
	//Start ADC2 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8002d54:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8002d58:	4909      	ldr	r1, [pc, #36]	; (8002d80 <start_adcs+0x4c>)
 8002d5a:	480a      	ldr	r0, [pc, #40]	; (8002d84 <start_adcs+0x50>)
 8002d5c:	f003 fc1c 	bl	8006598 <HAL_ADC_Start_DMA>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d004      	beq.n	8002d70 <start_adcs+0x3c>
	  term_print("Error starting ADC2 DMA\r\n");
 8002d66:	4808      	ldr	r0, [pc, #32]	; (8002d88 <start_adcs+0x54>)
 8002d68:	f001 f950 	bl	800400c <term_print>
 	  Error_Handler();
 8002d6c:	f000 fd6e 	bl	800384c <Error_Handler>
	}
}
 8002d70:	bf00      	nop
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	2000127c 	.word	0x2000127c
 8002d78:	20000f34 	.word	0x20000f34
 8002d7c:	0800e828 	.word	0x0800e828
 8002d80:	20002cbc 	.word	0x20002cbc
 8002d84:	20000f7c 	.word	0x20000f7c
 8002d88:	0800e844 	.word	0x0800e844

08002d8c <adjust_TIM2_period>:
 * This function is used in conjunction with the debug GPIO to tune each individual
 * board to produce 25us signal which is shown on the oscilloscope
 * as a 20kHz square wave (period 50us) as the signal changes
 * with every TIM2 call
 */
void adjust_TIM2_period(uint16_t newPeriod, uint8_t store) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	460a      	mov	r2, r1
 8002d96:	80fb      	strh	r3, [r7, #6]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 2500) || (newPeriod < 2000) ) {
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d803      	bhi.n	8002dae <adjust_TIM2_period+0x22>
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dac:	d205      	bcs.n	8002dba <adjust_TIM2_period+0x2e>
		term_print("Invalid period for TIM (%u)\r\n", newPeriod);
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	4619      	mov	r1, r3
 8002db2:	4808      	ldr	r0, [pc, #32]	; (8002dd4 <adjust_TIM2_period+0x48>)
 8002db4:	f001 f92a 	bl	800400c <term_print>
		return;
 8002db8:	e008      	b.n	8002dcc <adjust_TIM2_period+0x40>
	}
	TIM2->ARR = (uint32_t) newPeriod;	// change register directly
 8002dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM2 ARR = %u\r\n", newPeriod);
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <adjust_TIM2_period+0x4c>)
 8002dc8:	f001 f920 	bl	800400c <term_print>
			term_print("EEPROM write failed\r\n");
		} else {
			term_print("EEPROM write %u\r\n", newPeriod);
		}
	}*/
}
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	0800e860 	.word	0x0800e860
 8002dd8:	0800e880 	.word	0x0800e880

08002ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002de2:	f003 faff 	bl	80063e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002de6:	f000 f94b 	bl	8003080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dea:	f000 fb8f 	bl	800350c <MX_GPIO_Init>
  MX_DMA_Init();
 8002dee:	f000 fb4f 	bl	8003490 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002df2:	f000 faf9 	bl	80033e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002df6:	f000 faab 	bl	8003350 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002dfa:	f000 f9b3 	bl	8003164 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002dfe:	f000 fa11 	bl	8003224 <MX_ADC2_Init>
  MX_SPI2_Init();
 8002e02:	f000 fa6f 	bl	80032e4 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8002e06:	f000 fb19 	bl	800343c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

#ifdef USE_DISPLAY
  // TFT Display
  Displ_Init(Displ_Orientat_90); // initialize the display and set the initial display orientation (90°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	f001 fbd8 	bl	80045c0 <Displ_Init>
#endif

  // Start UART receive via interrupt
  if (HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) != HAL_OK) {
 8002e10:	2201      	movs	r2, #1
 8002e12:	4982      	ldr	r1, [pc, #520]	; (800301c <main+0x240>)
 8002e14:	4882      	ldr	r0, [pc, #520]	; (8003020 <main+0x244>)
 8002e16:	f006 ff14 	bl	8009c42 <HAL_UART_Receive_IT>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <main+0x48>
    Error_Handler();
 8002e20:	f000 fd14 	bl	800384c <Error_Handler>
  }

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8002e24:	487f      	ldr	r0, [pc, #508]	; (8003024 <main+0x248>)
 8002e26:	f006 f9f1 	bl	800920c <HAL_TIM_Base_Start_IT>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <main+0x58>
     Error_Handler();
 8002e30:	f000 fd0c 	bl	800384c <Error_Handler>
  }

  // Start ADCs
  start_adcs();
 8002e34:	f7ff ff7e 	bl	8002d34 <start_adcs>

#ifdef USE_DISPLAY
  display_start_screen();
 8002e38:	f7ff fa44 	bl	80022c4 <display_start_screen>
#endif

  // Startup message
  sprintf(msg_buf, "\r\n%s V%d.%02d\r\n%s\r\n",  product_msg ,VERSION_MAJOR, VERSION_MINOR, copyright_msg);
 8002e3c:	4b7a      	ldr	r3, [pc, #488]	; (8003028 <main+0x24c>)
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	2301      	movs	r3, #1
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2300      	movs	r3, #0
 8002e46:	4a79      	ldr	r2, [pc, #484]	; (800302c <main+0x250>)
 8002e48:	4979      	ldr	r1, [pc, #484]	; (8003030 <main+0x254>)
 8002e4a:	487a      	ldr	r0, [pc, #488]	; (8003034 <main+0x258>)
 8002e4c:	f008 fb2c 	bl	800b4a8 <siprintf>
  if (HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 8002e50:	4878      	ldr	r0, [pc, #480]	; (8003034 <main+0x258>)
 8002e52:	f7fd fa2d 	bl	80002b0 <strlen>
 8002e56:	4603      	mov	r3, r0
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5e:	4975      	ldr	r1, [pc, #468]	; (8003034 <main+0x258>)
 8002e60:	486f      	ldr	r0, [pc, #444]	; (8003020 <main+0x244>)
 8002e62:	f006 fe5c 	bl	8009b1e <HAL_UART_Transmit>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <main+0x94>
    Error_Handler();
 8002e6c:	f000 fcee 	bl	800384c <Error_Handler>
  }
  // Show active TIM2 configuration (for 25us ADC trigger)
  term_print("TIM2 ARR = %d\r\n",TIM2->ARR);
 8002e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	4619      	mov	r1, r3
 8002e78:	486f      	ldr	r0, [pc, #444]	; (8003038 <main+0x25c>)
 8002e7a:	f001 f8c7 	bl	800400c <term_print>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Handle UART communication
	  if (rx_cmd_ready) {
 8002e7e:	4b6f      	ldr	r3, [pc, #444]	; (800303c <main+0x260>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <main+0xbc>
		  CMD_Handler((uint8_t*)rx_buff);
 8002e86:	486e      	ldr	r0, [pc, #440]	; (8003040 <main+0x264>)
 8002e88:	f7ff f9fc 	bl	8002284 <CMD_Handler>
		  rx_count = 0;
 8002e8c:	4b6d      	ldr	r3, [pc, #436]	; (8003044 <main+0x268>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	801a      	strh	r2, [r3, #0]
		  rx_cmd_ready = 0;
 8002e92:	4b6a      	ldr	r3, [pc, #424]	; (800303c <main+0x260>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
	  }

	  if (adc_restart) {
 8002e98:	4b6b      	ldr	r3, [pc, #428]	; (8003048 <main+0x26c>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <main+0xce>
		  adc_restart = 0;
 8002ea0:	4b69      	ldr	r3, [pc, #420]	; (8003048 <main+0x26c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
		  start_adcs();
 8002ea6:	f7ff ff45 	bl	8002d34 <start_adcs>
	  }

	  if (new_time_period) {
 8002eaa:	4b68      	ldr	r3, [pc, #416]	; (800304c <main+0x270>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <main+0xe8>
		  // change timer period to new value
		  adjust_TIM2_period(new_time_period, 1);
 8002eb2:	4b66      	ldr	r3, [pc, #408]	; (800304c <main+0x270>)
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff67 	bl	8002d8c <adjust_TIM2_period>
		  new_time_period = 0;
 8002ebe:	4b63      	ldr	r3, [pc, #396]	; (800304c <main+0x270>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	801a      	strh	r2, [r3, #0]
	  }

#ifdef USE_DISPLAY

	  if (tft_display) {
 8002ec4:	4b62      	ldr	r3, [pc, #392]	; (8003050 <main+0x274>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <main+0x132>
		  if (tft_display == 9) {
 8002ecc:	4b60      	ldr	r3, [pc, #384]	; (8003050 <main+0x274>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b09      	cmp	r3, #9
 8002ed2:	d10e      	bne.n	8002ef2 <main+0x116>
			  term_print("Running TFT performance test ...\r\n");
 8002ed4:	485f      	ldr	r0, [pc, #380]	; (8003054 <main+0x278>)
 8002ed6:	f001 f899 	bl	800400c <term_print>
			  Displ_BackLight('1');
 8002eda:	2031      	movs	r0, #49	; 0x31
 8002edc:	f002 fd62 	bl	80059a4 <Displ_BackLight>
			  //Displ_PerfTest();
			  Displ_TestAll();
 8002ee0:	f003 fa2a 	bl	8006338 <Displ_TestAll>
			  Displ_BackLight('0');
 8002ee4:	2030      	movs	r0, #48	; 0x30
 8002ee6:	f002 fd5d 	bl	80059a4 <Displ_BackLight>
			  term_print("....completed\r\n");
 8002eea:	485b      	ldr	r0, [pc, #364]	; (8003058 <main+0x27c>)
 8002eec:	f001 f88e 	bl	800400c <term_print>
 8002ef0:	e00a      	b.n	8002f08 <main+0x12c>
		  } else {
			  if (tft_display == 1) {
 8002ef2:	4b57      	ldr	r3, [pc, #348]	; (8003050 <main+0x274>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d103      	bne.n	8002f02 <main+0x126>
				  Displ_BackLight('0');
 8002efa:	2030      	movs	r0, #48	; 0x30
 8002efc:	f002 fd52 	bl	80059a4 <Displ_BackLight>
 8002f00:	e002      	b.n	8002f08 <main+0x12c>
			  } else {
				  Displ_BackLight('1');
 8002f02:	2031      	movs	r0, #49	; 0x31
 8002f04:	f002 fd4e 	bl	80059a4 <Displ_BackLight>
			  }
		  }
		  tft_display = 0;
 8002f08:	4b51      	ldr	r3, [pc, #324]	; (8003050 <main+0x274>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]

	  //HAL_Delay(800);

	  // Check if we have missed processing DMA data sets
	  // This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
	  if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 8002f0e:	4b53      	ldr	r3, [pc, #332]	; (800305c <main+0x280>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	dc0b      	bgt.n	8002f2e <main+0x152>
 8002f16:	4b52      	ldr	r3, [pc, #328]	; (8003060 <main+0x284>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	dc07      	bgt.n	8002f2e <main+0x152>
 8002f1e:	4b51      	ldr	r3, [pc, #324]	; (8003064 <main+0x288>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	dc03      	bgt.n	8002f2e <main+0x152>
 8002f26:	4b50      	ldr	r3, [pc, #320]	; (8003068 <main+0x28c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	dd28      	ble.n	8002f80 <main+0x1a4>
		  term_print("Processing missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
 8002f2e:	4b4b      	ldr	r3, [pc, #300]	; (800305c <main+0x280>)
 8002f30:	6819      	ldr	r1, [r3, #0]
 8002f32:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <main+0x284>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4b4b      	ldr	r3, [pc, #300]	; (8003064 <main+0x288>)
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	4b4b      	ldr	r3, [pc, #300]	; (8003068 <main+0x28c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	4603      	mov	r3, r0
 8002f42:	484a      	ldr	r0, [pc, #296]	; (800306c <main+0x290>)
 8002f44:	f001 f862 	bl	800400c <term_print>
		  if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 8002f48:	4b44      	ldr	r3, [pc, #272]	; (800305c <main+0x280>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	dd02      	ble.n	8002f56 <main+0x17a>
 8002f50:	4b42      	ldr	r3, [pc, #264]	; (800305c <main+0x280>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
		  if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 8002f56:	4b42      	ldr	r3, [pc, #264]	; (8003060 <main+0x284>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	dd02      	ble.n	8002f64 <main+0x188>
 8002f5e:	4b40      	ldr	r3, [pc, #256]	; (8003060 <main+0x284>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 8002f64:	4b3f      	ldr	r3, [pc, #252]	; (8003064 <main+0x288>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	dd02      	ble.n	8002f72 <main+0x196>
 8002f6c:	4b3d      	ldr	r3, [pc, #244]	; (8003064 <main+0x288>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 8002f72:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <main+0x28c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	dd02      	ble.n	8002f80 <main+0x1a4>
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <main+0x28c>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
	  }

	  // Process DMA buffers
	  if (adc1_dma_l_count > 0) {
 8002f80:	4b36      	ldr	r3, [pc, #216]	; (800305c <main+0x280>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	dd0e      	ble.n	8002fa6 <main+0x1ca>
		  if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 8002f88:	2100      	movs	r1, #0
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7fe f84a 	bl	8001024 <calc_process_dma_buffer>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <main+0x1c0>
			  term_print("Processing ADC1 DMA 1st half failed\r\n");
 8002f96:	4836      	ldr	r0, [pc, #216]	; (8003070 <main+0x294>)
 8002f98:	f001 f838 	bl	800400c <term_print>
		  }
		  adc1_dma_l_count--;
 8002f9c:	4b2f      	ldr	r3, [pc, #188]	; (800305c <main+0x280>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	4a2e      	ldr	r2, [pc, #184]	; (800305c <main+0x280>)
 8002fa4:	6013      	str	r3, [r2, #0]
	  }
	  if (adc1_dma_h_count > 0) {
 8002fa6:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <main+0x284>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	dd0e      	ble.n	8002fcc <main+0x1f0>
	  	  if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 8002fae:	2100      	movs	r1, #0
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	f7fe f837 	bl	8001024 <calc_process_dma_buffer>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <main+0x1e6>
	  		term_print("Processing ADC1 DMA 2nd half failed\r\n");
 8002fbc:	482d      	ldr	r0, [pc, #180]	; (8003074 <main+0x298>)
 8002fbe:	f001 f825 	bl	800400c <term_print>
	  	  }
	  	  adc1_dma_h_count--;
 8002fc2:	4b27      	ldr	r3, [pc, #156]	; (8003060 <main+0x284>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	4a25      	ldr	r2, [pc, #148]	; (8003060 <main+0x284>)
 8002fca:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_l_count > 0) {
 8002fcc:	4b25      	ldr	r3, [pc, #148]	; (8003064 <main+0x288>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	dd0e      	ble.n	8002ff2 <main+0x216>
	  	  if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7fe f824 	bl	8001024 <calc_process_dma_buffer>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <main+0x20c>
	  		term_print("Processing ADC2 DMA 1st half failed\r\n");
 8002fe2:	4825      	ldr	r0, [pc, #148]	; (8003078 <main+0x29c>)
 8002fe4:	f001 f812 	bl	800400c <term_print>
	  	  }
	  	  adc2_dma_l_count--;
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <main+0x288>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <main+0x288>)
 8002ff0:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_h_count > 0) {
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <main+0x28c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f77f af41 	ble.w	8002e7e <main+0xa2>
	  	  if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	2001      	movs	r0, #1
 8003000:	f7fe f810 	bl	8001024 <calc_process_dma_buffer>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <main+0x234>
	  		term_print("Processing ADC2 DMA 2nd half failed\r\n");
 800300a:	481c      	ldr	r0, [pc, #112]	; (800307c <main+0x2a0>)
 800300c:	f000 fffe 	bl	800400c <term_print>
	  	  }
	   	  adc2_dma_h_count--;
 8003010:	4b15      	ldr	r3, [pc, #84]	; (8003068 <main+0x28c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3b01      	subs	r3, #1
 8003016:	4a14      	ldr	r2, [pc, #80]	; (8003068 <main+0x28c>)
 8003018:	6013      	str	r3, [r2, #0]
	  if (rx_cmd_ready) {
 800301a:	e730      	b.n	8002e7e <main+0xa2>
 800301c:	2000124e 	.word	0x2000124e
 8003020:	20001184 	.word	0x20001184
 8003024:	2000113c 	.word	0x2000113c
 8003028:	08010ad0 	.word	0x08010ad0
 800302c:	08010acc 	.word	0x08010acc
 8003030:	0800e890 	.word	0x0800e890
 8003034:	2000120c 	.word	0x2000120c
 8003038:	0800e8a4 	.word	0x0800e8a4
 800303c:	20001264 	.word	0x20001264
 8003040:	20001250 	.word	0x20001250
 8003044:	2000124c 	.word	0x2000124c
 8003048:	20001265 	.word	0x20001265
 800304c:	20001268 	.word	0x20001268
 8003050:	20001266 	.word	0x20001266
 8003054:	0800e8b4 	.word	0x0800e8b4
 8003058:	0800e8d8 	.word	0x0800e8d8
 800305c:	2000126c 	.word	0x2000126c
 8003060:	20001270 	.word	0x20001270
 8003064:	20001274 	.word	0x20001274
 8003068:	20001278 	.word	0x20001278
 800306c:	0800e8e8 	.word	0x0800e8e8
 8003070:	0800e914 	.word	0x0800e914
 8003074:	0800e93c 	.word	0x0800e93c
 8003078:	0800e964 	.word	0x0800e964
 800307c:	0800e98c 	.word	0x0800e98c

08003080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b094      	sub	sp, #80	; 0x50
 8003084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003086:	f107 031c 	add.w	r3, r7, #28
 800308a:	2234      	movs	r2, #52	; 0x34
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f008 fbaa 	bl	800b7e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003094:	f107 0308 	add.w	r3, r7, #8
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030a4:	2300      	movs	r3, #0
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	4b2c      	ldr	r3, [pc, #176]	; (800315c <SystemClock_Config+0xdc>)
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	4a2b      	ldr	r2, [pc, #172]	; (800315c <SystemClock_Config+0xdc>)
 80030ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b2:	6413      	str	r3, [r2, #64]	; 0x40
 80030b4:	4b29      	ldr	r3, [pc, #164]	; (800315c <SystemClock_Config+0xdc>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030c0:	2300      	movs	r3, #0
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	4b26      	ldr	r3, [pc, #152]	; (8003160 <SystemClock_Config+0xe0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a25      	ldr	r2, [pc, #148]	; (8003160 <SystemClock_Config+0xe0>)
 80030ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	4b23      	ldr	r3, [pc, #140]	; (8003160 <SystemClock_Config+0xe0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030dc:	2302      	movs	r3, #2
 80030de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030e0:	2301      	movs	r3, #1
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030e4:	2310      	movs	r3, #16
 80030e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030e8:	2302      	movs	r3, #2
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030ec:	2300      	movs	r3, #0
 80030ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030f0:	2308      	movs	r3, #8
 80030f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80030f4:	23b4      	movs	r3, #180	; 0xb4
 80030f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030f8:	2302      	movs	r3, #2
 80030fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80030fc:	2302      	movs	r3, #2
 80030fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003100:	2302      	movs	r3, #2
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003104:	f107 031c 	add.w	r3, r7, #28
 8003108:	4618      	mov	r0, r3
 800310a:	f005 f8b7 	bl	800827c <HAL_RCC_OscConfig>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003114:	f000 fb9a 	bl	800384c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003118:	f004 fd16 	bl	8007b48 <HAL_PWREx_EnableOverDrive>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003122:	f000 fb93 	bl	800384c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003126:	230f      	movs	r3, #15
 8003128:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800312a:	2302      	movs	r3, #2
 800312c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003132:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800313c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800313e:	f107 0308 	add.w	r3, r7, #8
 8003142:	2105      	movs	r1, #5
 8003144:	4618      	mov	r0, r3
 8003146:	f004 fd4f 	bl	8007be8 <HAL_RCC_ClockConfig>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003150:	f000 fb7c 	bl	800384c <Error_Handler>
  }
}
 8003154:	bf00      	nop
 8003156:	3750      	adds	r7, #80	; 0x50
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40023800 	.word	0x40023800
 8003160:	40007000 	.word	0x40007000

08003164 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800316a:	463b      	mov	r3, r7
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003176:	4b29      	ldr	r3, [pc, #164]	; (800321c <MX_ADC1_Init+0xb8>)
 8003178:	4a29      	ldr	r2, [pc, #164]	; (8003220 <MX_ADC1_Init+0xbc>)
 800317a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800317c:	4b27      	ldr	r3, [pc, #156]	; (800321c <MX_ADC1_Init+0xb8>)
 800317e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003182:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003184:	4b25      	ldr	r3, [pc, #148]	; (800321c <MX_ADC1_Init+0xb8>)
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800318a:	4b24      	ldr	r3, [pc, #144]	; (800321c <MX_ADC1_Init+0xb8>)
 800318c:	2201      	movs	r2, #1
 800318e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003190:	4b22      	ldr	r3, [pc, #136]	; (800321c <MX_ADC1_Init+0xb8>)
 8003192:	2200      	movs	r2, #0
 8003194:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003196:	4b21      	ldr	r3, [pc, #132]	; (800321c <MX_ADC1_Init+0xb8>)
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800319e:	4b1f      	ldr	r3, [pc, #124]	; (800321c <MX_ADC1_Init+0xb8>)
 80031a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <MX_ADC1_Init+0xb8>)
 80031a8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80031ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031ae:	4b1b      	ldr	r3, [pc, #108]	; (800321c <MX_ADC1_Init+0xb8>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <MX_ADC1_Init+0xb8>)
 80031b6:	2202      	movs	r2, #2
 80031b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80031ba:	4b18      	ldr	r3, [pc, #96]	; (800321c <MX_ADC1_Init+0xb8>)
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80031c2:	4b16      	ldr	r3, [pc, #88]	; (800321c <MX_ADC1_Init+0xb8>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031c8:	4814      	ldr	r0, [pc, #80]	; (800321c <MX_ADC1_Init+0xb8>)
 80031ca:	f003 f9a1 	bl	8006510 <HAL_ADC_Init>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80031d4:	f000 fb3a 	bl	800384c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80031d8:	2300      	movs	r3, #0
 80031da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80031dc:	2301      	movs	r3, #1
 80031de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80031e0:	2303      	movs	r3, #3
 80031e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031e4:	463b      	mov	r3, r7
 80031e6:	4619      	mov	r1, r3
 80031e8:	480c      	ldr	r0, [pc, #48]	; (800321c <MX_ADC1_Init+0xb8>)
 80031ea:	f003 fae5 	bl	80067b8 <HAL_ADC_ConfigChannel>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80031f4:	f000 fb2a 	bl	800384c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80031f8:	230a      	movs	r3, #10
 80031fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80031fc:	2302      	movs	r3, #2
 80031fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003200:	463b      	mov	r3, r7
 8003202:	4619      	mov	r1, r3
 8003204:	4805      	ldr	r0, [pc, #20]	; (800321c <MX_ADC1_Init+0xb8>)
 8003206:	f003 fad7 	bl	80067b8 <HAL_ADC_ConfigChannel>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003210:	f000 fb1c 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000f34 	.word	0x20000f34
 8003220:	40012000 	.word	0x40012000

08003224 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800322a:	463b      	mov	r3, r7
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003236:	4b29      	ldr	r3, [pc, #164]	; (80032dc <MX_ADC2_Init+0xb8>)
 8003238:	4a29      	ldr	r2, [pc, #164]	; (80032e0 <MX_ADC2_Init+0xbc>)
 800323a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800323c:	4b27      	ldr	r3, [pc, #156]	; (80032dc <MX_ADC2_Init+0xb8>)
 800323e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003242:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003244:	4b25      	ldr	r3, [pc, #148]	; (80032dc <MX_ADC2_Init+0xb8>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <MX_ADC2_Init+0xb8>)
 800324c:	2201      	movs	r2, #1
 800324e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003250:	4b22      	ldr	r3, [pc, #136]	; (80032dc <MX_ADC2_Init+0xb8>)
 8003252:	2200      	movs	r2, #0
 8003254:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003256:	4b21      	ldr	r3, [pc, #132]	; (80032dc <MX_ADC2_Init+0xb8>)
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800325e:	4b1f      	ldr	r3, [pc, #124]	; (80032dc <MX_ADC2_Init+0xb8>)
 8003260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003264:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <MX_ADC2_Init+0xb8>)
 8003268:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <MX_ADC2_Init+0xb8>)
 8003270:	2200      	movs	r2, #0
 8003272:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <MX_ADC2_Init+0xb8>)
 8003276:	2202      	movs	r2, #2
 8003278:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800327a:	4b18      	ldr	r3, [pc, #96]	; (80032dc <MX_ADC2_Init+0xb8>)
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003282:	4b16      	ldr	r3, [pc, #88]	; (80032dc <MX_ADC2_Init+0xb8>)
 8003284:	2200      	movs	r2, #0
 8003286:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003288:	4814      	ldr	r0, [pc, #80]	; (80032dc <MX_ADC2_Init+0xb8>)
 800328a:	f003 f941 	bl	8006510 <HAL_ADC_Init>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8003294:	f000 fada 	bl	800384c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003298:	2301      	movs	r3, #1
 800329a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800329c:	2301      	movs	r3, #1
 800329e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80032a0:	2303      	movs	r3, #3
 80032a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032a4:	463b      	mov	r3, r7
 80032a6:	4619      	mov	r1, r3
 80032a8:	480c      	ldr	r0, [pc, #48]	; (80032dc <MX_ADC2_Init+0xb8>)
 80032aa:	f003 fa85 	bl	80067b8 <HAL_ADC_ConfigChannel>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80032b4:	f000 faca 	bl	800384c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80032b8:	230b      	movs	r3, #11
 80032ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80032bc:	2302      	movs	r3, #2
 80032be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032c0:	463b      	mov	r3, r7
 80032c2:	4619      	mov	r1, r3
 80032c4:	4805      	ldr	r0, [pc, #20]	; (80032dc <MX_ADC2_Init+0xb8>)
 80032c6:	f003 fa77 	bl	80067b8 <HAL_ADC_ConfigChannel>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80032d0:	f000 fabc 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000f7c 	.word	0x20000f7c
 80032e0:	40012100 	.word	0x40012100

080032e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80032e8:	4b17      	ldr	r3, [pc, #92]	; (8003348 <MX_SPI2_Init+0x64>)
 80032ea:	4a18      	ldr	r2, [pc, #96]	; (800334c <MX_SPI2_Init+0x68>)
 80032ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <MX_SPI2_Init+0x64>)
 80032f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <MX_SPI2_Init+0x64>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <MX_SPI2_Init+0x64>)
 80032fe:	2200      	movs	r2, #0
 8003300:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <MX_SPI2_Init+0x64>)
 8003304:	2200      	movs	r2, #0
 8003306:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003308:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <MX_SPI2_Init+0x64>)
 800330a:	2200      	movs	r2, #0
 800330c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800330e:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <MX_SPI2_Init+0x64>)
 8003310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003314:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <MX_SPI2_Init+0x64>)
 8003318:	2200      	movs	r2, #0
 800331a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <MX_SPI2_Init+0x64>)
 800331e:	2200      	movs	r2, #0
 8003320:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003322:	4b09      	ldr	r3, [pc, #36]	; (8003348 <MX_SPI2_Init+0x64>)
 8003324:	2200      	movs	r2, #0
 8003326:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003328:	4b07      	ldr	r3, [pc, #28]	; (8003348 <MX_SPI2_Init+0x64>)
 800332a:	2200      	movs	r2, #0
 800332c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <MX_SPI2_Init+0x64>)
 8003330:	220a      	movs	r2, #10
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003334:	4804      	ldr	r0, [pc, #16]	; (8003348 <MX_SPI2_Init+0x64>)
 8003336:	f005 fa3f 	bl	80087b8 <HAL_SPI_Init>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003340:	f000 fa84 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20001084 	.word	0x20001084
 800334c:	40003800 	.word	0x40003800

08003350 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003356:	f107 0308 	add.w	r3, r7, #8
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003364:	463b      	mov	r3, r7
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <MX_TIM2_Init+0x94>)
 800336e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003372:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <MX_TIM2_Init+0x94>)
 8003376:	2200      	movs	r2, #0
 8003378:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800337a:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <MX_TIM2_Init+0x94>)
 800337c:	2200      	movs	r2, #0
 800337e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8003380:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <MX_TIM2_Init+0x94>)
 8003382:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8003386:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003388:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <MX_TIM2_Init+0x94>)
 800338a:	2200      	movs	r2, #0
 800338c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800338e:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <MX_TIM2_Init+0x94>)
 8003390:	2200      	movs	r2, #0
 8003392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003394:	4813      	ldr	r0, [pc, #76]	; (80033e4 <MX_TIM2_Init+0x94>)
 8003396:	f005 fee9 	bl	800916c <HAL_TIM_Base_Init>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80033a0:	f000 fa54 	bl	800384c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033aa:	f107 0308 	add.w	r3, r7, #8
 80033ae:	4619      	mov	r1, r3
 80033b0:	480c      	ldr	r0, [pc, #48]	; (80033e4 <MX_TIM2_Init+0x94>)
 80033b2:	f006 f8a3 	bl	80094fc <HAL_TIM_ConfigClockSource>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80033bc:	f000 fa46 	bl	800384c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80033c0:	2320      	movs	r3, #32
 80033c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033c8:	463b      	mov	r3, r7
 80033ca:	4619      	mov	r1, r3
 80033cc:	4805      	ldr	r0, [pc, #20]	; (80033e4 <MX_TIM2_Init+0x94>)
 80033ce:	f006 fac9 	bl	8009964 <HAL_TIMEx_MasterConfigSynchronization>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80033d8:	f000 fa38 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033dc:	bf00      	nop
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	2000113c 	.word	0x2000113c

080033e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <MX_USART2_UART_Init+0x4c>)
 80033ee:	4a12      	ldr	r2, [pc, #72]	; (8003438 <MX_USART2_UART_Init+0x50>)
 80033f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <MX_USART2_UART_Init+0x4c>)
 80033f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033fa:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <MX_USART2_UART_Init+0x4c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <MX_USART2_UART_Init+0x4c>)
 8003402:	2200      	movs	r2, #0
 8003404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003406:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <MX_USART2_UART_Init+0x4c>)
 8003408:	2200      	movs	r2, #0
 800340a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <MX_USART2_UART_Init+0x4c>)
 800340e:	220c      	movs	r2, #12
 8003410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <MX_USART2_UART_Init+0x4c>)
 8003414:	2200      	movs	r2, #0
 8003416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <MX_USART2_UART_Init+0x4c>)
 800341a:	2200      	movs	r2, #0
 800341c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800341e:	4805      	ldr	r0, [pc, #20]	; (8003434 <MX_USART2_UART_Init+0x4c>)
 8003420:	f006 fb30 	bl	8009a84 <HAL_UART_Init>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800342a:	f000 fa0f 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20001184 	.word	0x20001184
 8003438:	40004400 	.word	0x40004400

0800343c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <MX_USART3_UART_Init+0x4c>)
 8003442:	4a12      	ldr	r2, [pc, #72]	; (800348c <MX_USART3_UART_Init+0x50>)
 8003444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <MX_USART3_UART_Init+0x4c>)
 8003448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800344c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <MX_USART3_UART_Init+0x4c>)
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <MX_USART3_UART_Init+0x4c>)
 8003456:	2200      	movs	r2, #0
 8003458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <MX_USART3_UART_Init+0x4c>)
 800345c:	2200      	movs	r2, #0
 800345e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <MX_USART3_UART_Init+0x4c>)
 8003462:	220c      	movs	r2, #12
 8003464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <MX_USART3_UART_Init+0x4c>)
 8003468:	2200      	movs	r2, #0
 800346a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <MX_USART3_UART_Init+0x4c>)
 800346e:	2200      	movs	r2, #0
 8003470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003472:	4805      	ldr	r0, [pc, #20]	; (8003488 <MX_USART3_UART_Init+0x4c>)
 8003474:	f006 fb06 	bl	8009a84 <HAL_UART_Init>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800347e:	f000 f9e5 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200011c8 	.word	0x200011c8
 800348c:	40004800 	.word	0x40004800

08003490 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <MX_DMA_Init+0x78>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a1a      	ldr	r2, [pc, #104]	; (8003508 <MX_DMA_Init+0x78>)
 80034a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b18      	ldr	r3, [pc, #96]	; (8003508 <MX_DMA_Init+0x78>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <MX_DMA_Init+0x78>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a13      	ldr	r2, [pc, #76]	; (8003508 <MX_DMA_Init+0x78>)
 80034bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <MX_DMA_Init+0x78>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80034ce:	2200      	movs	r2, #0
 80034d0:	2100      	movs	r1, #0
 80034d2:	200f      	movs	r0, #15
 80034d4:	f003 fcfb 	bl	8006ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80034d8:	200f      	movs	r0, #15
 80034da:	f003 fd14 	bl	8006f06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	2038      	movs	r0, #56	; 0x38
 80034e4:	f003 fcf3 	bl	8006ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80034e8:	2038      	movs	r0, #56	; 0x38
 80034ea:	f003 fd0c 	bl	8006f06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2100      	movs	r1, #0
 80034f2:	203a      	movs	r0, #58	; 0x3a
 80034f4:	f003 fceb 	bl	8006ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80034f8:	203a      	movs	r0, #58	; 0x3a
 80034fa:	f003 fd04 	bl	8006f06 <HAL_NVIC_EnableIRQ>

}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800

0800350c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	60da      	str	r2, [r3, #12]
 8003520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	4b57      	ldr	r3, [pc, #348]	; (8003684 <MX_GPIO_Init+0x178>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a56      	ldr	r2, [pc, #344]	; (8003684 <MX_GPIO_Init+0x178>)
 800352c:	f043 0304 	orr.w	r3, r3, #4
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b54      	ldr	r3, [pc, #336]	; (8003684 <MX_GPIO_Init+0x178>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	4b50      	ldr	r3, [pc, #320]	; (8003684 <MX_GPIO_Init+0x178>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a4f      	ldr	r2, [pc, #316]	; (8003684 <MX_GPIO_Init+0x178>)
 8003548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <MX_GPIO_Init+0x178>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	4b49      	ldr	r3, [pc, #292]	; (8003684 <MX_GPIO_Init+0x178>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a48      	ldr	r2, [pc, #288]	; (8003684 <MX_GPIO_Init+0x178>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b46      	ldr	r3, [pc, #280]	; (8003684 <MX_GPIO_Init+0x178>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	4b42      	ldr	r3, [pc, #264]	; (8003684 <MX_GPIO_Init+0x178>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a41      	ldr	r2, [pc, #260]	; (8003684 <MX_GPIO_Init+0x178>)
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b3f      	ldr	r3, [pc, #252]	; (8003684 <MX_GPIO_Init+0x178>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	607b      	str	r3, [r7, #4]
 8003590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin
 8003592:	2200      	movs	r2, #0
 8003594:	f248 41e0 	movw	r1, #34016	; 0x84e0
 8003598:	483b      	ldr	r0, [pc, #236]	; (8003688 <MX_GPIO_Init+0x17c>)
 800359a:	f004 fa7d 	bl	8007a98 <HAL_GPIO_WritePin>
                          |ESP01_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 800359e:	2201      	movs	r2, #1
 80035a0:	2180      	movs	r1, #128	; 0x80
 80035a2:	483a      	ldr	r0, [pc, #232]	; (800368c <MX_GPIO_Init+0x180>)
 80035a4:	f004 fa78 	bl	8007a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 80035a8:	2201      	movs	r2, #1
 80035aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035ae:	4836      	ldr	r0, [pc, #216]	; (8003688 <MX_GPIO_Init+0x17c>)
 80035b0:	f004 fa72 	bl	8007a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPL_RST_Pin|ESP01_RST_Pin, GPIO_PIN_RESET);
 80035b4:	2200      	movs	r2, #0
 80035b6:	21c0      	movs	r1, #192	; 0xc0
 80035b8:	4835      	ldr	r0, [pc, #212]	; (8003690 <MX_GPIO_Init+0x184>)
 80035ba:	f004 fa6d 	bl	8007a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80035be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80035c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4619      	mov	r1, r3
 80035d4:	482d      	ldr	r0, [pc, #180]	; (800368c <MX_GPIO_Init+0x180>)
 80035d6:	f004 f8b3 	bl	8007740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin ESP01_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin|ESP01_EN_Pin;
 80035da:	f248 4360 	movw	r3, #33888	; 0x8460
 80035de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e0:	2301      	movs	r3, #1
 80035e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e8:	2300      	movs	r3, #0
 80035ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	4619      	mov	r1, r3
 80035f2:	4825      	ldr	r0, [pc, #148]	; (8003688 <MX_GPIO_Init+0x17c>)
 80035f4:	f004 f8a4 	bl	8007740 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035fc:	2301      	movs	r3, #1
 80035fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003604:	2302      	movs	r3, #2
 8003606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	4619      	mov	r1, r3
 800360e:	481e      	ldr	r0, [pc, #120]	; (8003688 <MX_GPIO_Init+0x17c>)
 8003610:	f004 f896 	bl	8007740 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003618:	2301      	movs	r3, #1
 800361a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003620:	2303      	movs	r3, #3
 8003622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	4619      	mov	r1, r3
 800362a:	4818      	ldr	r0, [pc, #96]	; (800368c <MX_GPIO_Init+0x180>)
 800362c:	f004 f888 	bl	8007740 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8003630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003636:	2301      	movs	r3, #1
 8003638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363e:	2303      	movs	r3, #3
 8003640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	480f      	ldr	r0, [pc, #60]	; (8003688 <MX_GPIO_Init+0x17c>)
 800364a:	f004 f879 	bl	8007740 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin ESP01_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|ESP01_RST_Pin;
 800364e:	23c0      	movs	r3, #192	; 0xc0
 8003650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003652:	2301      	movs	r3, #1
 8003654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365a:	2300      	movs	r3, #0
 800365c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365e:	f107 0314 	add.w	r3, r7, #20
 8003662:	4619      	mov	r1, r3
 8003664:	480a      	ldr	r0, [pc, #40]	; (8003690 <MX_GPIO_Init+0x184>)
 8003666:	f004 f86b 	bl	8007740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800366a:	2200      	movs	r2, #0
 800366c:	2100      	movs	r1, #0
 800366e:	2028      	movs	r0, #40	; 0x28
 8003670:	f003 fc2d 	bl	8006ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003674:	2028      	movs	r0, #40	; 0x28
 8003676:	f003 fc46 	bl	8006f06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800367a:	bf00      	nop
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800
 8003688:	40020000 	.word	0x40020000
 800368c:	40020800 	.word	0x40020800
 8003690:	40020400 	.word	0x40020400

08003694 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <HAL_ADC_ConvCpltCallback+0x34>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d105      	bne.n	80036b0 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <HAL_ADC_ConvCpltCallback+0x38>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3301      	adds	r3, #1
 80036aa:	4a08      	ldr	r2, [pc, #32]	; (80036cc <HAL_ADC_ConvCpltCallback+0x38>)
 80036ac:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 80036ae:	e004      	b.n	80036ba <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 80036b0:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	4a06      	ldr	r2, [pc, #24]	; (80036d0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80036b8:	6013      	str	r3, [r2, #0]
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000f34 	.word	0x20000f34
 80036cc:	20001270 	.word	0x20001270
 80036d0:	20001278 	.word	0x20001278

080036d4 <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d105      	bne.n	80036f0 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	4a08      	ldr	r2, [pc, #32]	; (800370c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80036ec:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 80036ee:	e004      	b.n	80036fa <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	4a06      	ldr	r2, [pc, #24]	; (8003710 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80036f8:	6013      	str	r3, [r2, #0]
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20000f34 	.word	0x20000f34
 800370c:	2000126c 	.word	0x2000126c
 8003710:	20001274 	.word	0x20001274

08003714 <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <HAL_ADC_ErrorCallback+0x94>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d102      	bne.n	800372a <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 8003724:	2301      	movs	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e001      	b.n	800372e <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 800372a:	2302      	movs	r3, #2
 800372c:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	2b04      	cmp	r3, #4
 8003734:	d82c      	bhi.n	8003790 <HAL_ADC_ErrorCallback+0x7c>
 8003736:	a201      	add	r2, pc, #4	; (adr r2, 800373c <HAL_ADC_ErrorCallback+0x28>)
 8003738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373c:	08003751 	.word	0x08003751
 8003740:	08003761 	.word	0x08003761
 8003744:	08003771 	.word	0x08003771
 8003748:	08003791 	.word	0x08003791
 800374c:	08003781 	.word	0x08003781
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	461a      	mov	r2, r3
 8003756:	68f9      	ldr	r1, [r7, #12]
 8003758:	4814      	ldr	r0, [pc, #80]	; (80037ac <HAL_ADC_ErrorCallback+0x98>)
 800375a:	f000 fc57 	bl	800400c <term_print>
		break;
 800375e:	e01e      	b.n	800379e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003764:	461a      	mov	r2, r3
 8003766:	68f9      	ldr	r1, [r7, #12]
 8003768:	4811      	ldr	r0, [pc, #68]	; (80037b0 <HAL_ADC_ErrorCallback+0x9c>)
 800376a:	f000 fc4f 	bl	800400c <term_print>
		break;
 800376e:	e016      	b.n	800379e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	461a      	mov	r2, r3
 8003776:	68f9      	ldr	r1, [r7, #12]
 8003778:	480e      	ldr	r0, [pc, #56]	; (80037b4 <HAL_ADC_ErrorCallback+0xa0>)
 800377a:	f000 fc47 	bl	800400c <term_print>
		break;
 800377e:	e00e      	b.n	800379e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	461a      	mov	r2, r3
 8003786:	68f9      	ldr	r1, [r7, #12]
 8003788:	480b      	ldr	r0, [pc, #44]	; (80037b8 <HAL_ADC_ErrorCallback+0xa4>)
 800378a:	f000 fc3f 	bl	800400c <term_print>
		break;
 800378e:	e006      	b.n	800379e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	4619      	mov	r1, r3
 8003796:	4809      	ldr	r0, [pc, #36]	; (80037bc <HAL_ADC_ErrorCallback+0xa8>)
 8003798:	f000 fc38 	bl	800400c <term_print>
	}
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000f34 	.word	0x20000f34
 80037ac:	0800e9b4 	.word	0x0800e9b4
 80037b0:	0800e9d0 	.word	0x0800e9d0
 80037b4:	0800e9f4 	.word	0x0800e9f4
 80037b8:	0800ea14 	.word	0x0800ea14
 80037bc:	0800ea30 	.word	0x0800ea30

080037c0 <HAL_UART_RxCpltCallback>:

// UART has received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	if (rx_count >= sizeof(rx_buff)) {
 80037c8:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_UART_RxCpltCallback+0x78>)
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	2b13      	cmp	r3, #19
 80037ce:	d902      	bls.n	80037d6 <HAL_UART_RxCpltCallback+0x16>
		rx_count = 0;		// wrap back to start
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_UART_RxCpltCallback+0x78>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	801a      	strh	r2, [r3, #0]
	}
	if ( HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) == HAL_UART_ERROR_NONE) {
 80037d6:	2201      	movs	r2, #1
 80037d8:	4918      	ldr	r1, [pc, #96]	; (800383c <HAL_UART_RxCpltCallback+0x7c>)
 80037da:	4819      	ldr	r0, [pc, #100]	; (8003840 <HAL_UART_RxCpltCallback+0x80>)
 80037dc:	f006 fa31 	bl	8009c42 <HAL_UART_Receive_IT>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d124      	bne.n	8003830 <HAL_UART_RxCpltCallback+0x70>
		// check for End of input (CR or LF)
		if ( (rx_byte != 0x0A) && (rx_byte !=  0x0D) ) {
 80037e6:	4b15      	ldr	r3, [pc, #84]	; (800383c <HAL_UART_RxCpltCallback+0x7c>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b0a      	cmp	r3, #10
 80037ec:	d00f      	beq.n	800380e <HAL_UART_RxCpltCallback+0x4e>
 80037ee:	4b13      	ldr	r3, [pc, #76]	; (800383c <HAL_UART_RxCpltCallback+0x7c>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b0d      	cmp	r3, #13
 80037f4:	d00b      	beq.n	800380e <HAL_UART_RxCpltCallback+0x4e>
			rx_buff[rx_count++] = rx_byte;
 80037f6:	4b10      	ldr	r3, [pc, #64]	; (8003838 <HAL_UART_RxCpltCallback+0x78>)
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	b291      	uxth	r1, r2
 80037fe:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <HAL_UART_RxCpltCallback+0x78>)
 8003800:	8011      	strh	r1, [r2, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <HAL_UART_RxCpltCallback+0x7c>)
 8003806:	7819      	ldrb	r1, [r3, #0]
 8003808:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_UART_RxCpltCallback+0x84>)
 800380a:	5499      	strb	r1, [r3, r2]
				rx_cmd_ready = 1;
				rx_buff[rx_count++] = 0;	// end of string
			}
		}
	} // else { rx_error_count++; } // this should never happen
}
 800380c:	e010      	b.n	8003830 <HAL_UART_RxCpltCallback+0x70>
			if (rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 800380e:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <HAL_UART_RxCpltCallback+0x78>)
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00c      	beq.n	8003830 <HAL_UART_RxCpltCallback+0x70>
				rx_cmd_ready = 1;
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <HAL_UART_RxCpltCallback+0x88>)
 8003818:	2201      	movs	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]
				rx_buff[rx_count++] = 0;	// end of string
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_UART_RxCpltCallback+0x78>)
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	b291      	uxth	r1, r2
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HAL_UART_RxCpltCallback+0x78>)
 8003826:	8011      	strh	r1, [r2, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_UART_RxCpltCallback+0x84>)
 800382c:	2100      	movs	r1, #0
 800382e:	5499      	strb	r1, [r3, r2]
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	2000124c 	.word	0x2000124c
 800383c:	2000124e 	.word	0x2000124e
 8003840:	20001184 	.word	0x20001184
 8003844:	20001250 	.word	0x20001250
 8003848:	20001264 	.word	0x20001264

0800384c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8003850:	4802      	ldr	r0, [pc, #8]	; (800385c <Error_Handler+0x10>)
 8003852:	f007 ffb7 	bl	800b7c4 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003856:	b672      	cpsid	i
}
 8003858:	bf00      	nop
    __disable_irq();
    while (1)
 800385a:	e7fe      	b.n	800385a <Error_Handler+0xe>
 800385c:	0800ea50 	.word	0x0800ea50

08003860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <HAL_MspInit+0x4c>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4a0f      	ldr	r2, [pc, #60]	; (80038ac <HAL_MspInit+0x4c>)
 8003870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003874:	6453      	str	r3, [r2, #68]	; 0x44
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <HAL_MspInit+0x4c>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_MspInit+0x4c>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	4a08      	ldr	r2, [pc, #32]	; (80038ac <HAL_MspInit+0x4c>)
 800388c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003890:	6413      	str	r3, [r2, #64]	; 0x40
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_MspInit+0x4c>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800389e:	2007      	movs	r0, #7
 80038a0:	f003 fb0a 	bl	8006eb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800

080038b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08e      	sub	sp, #56	; 0x38
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a79      	ldr	r2, [pc, #484]	; (8003ab4 <HAL_ADC_MspInit+0x204>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d173      	bne.n	80039ba <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	623b      	str	r3, [r7, #32]
 80038d6:	4b78      	ldr	r3, [pc, #480]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	4a77      	ldr	r2, [pc, #476]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e0:	6453      	str	r3, [r2, #68]	; 0x44
 80038e2:	4b75      	ldr	r3, [pc, #468]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	623b      	str	r3, [r7, #32]
 80038ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	4b71      	ldr	r3, [pc, #452]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	4a70      	ldr	r2, [pc, #448]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 80038f8:	f043 0304 	orr.w	r3, r3, #4
 80038fc:	6313      	str	r3, [r2, #48]	; 0x30
 80038fe:	4b6e      	ldr	r3, [pc, #440]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	4b6a      	ldr	r3, [pc, #424]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	4a69      	ldr	r2, [pc, #420]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	6313      	str	r3, [r2, #48]	; 0x30
 800391a:	4b67      	ldr	r3, [pc, #412]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003926:	2301      	movs	r3, #1
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800392a:	2303      	movs	r3, #3
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003936:	4619      	mov	r1, r3
 8003938:	4860      	ldr	r0, [pc, #384]	; (8003abc <HAL_ADC_MspInit+0x20c>)
 800393a:	f003 ff01 	bl	8007740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800393e:	2301      	movs	r3, #1
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003942:	2303      	movs	r3, #3
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800394e:	4619      	mov	r1, r3
 8003950:	485b      	ldr	r0, [pc, #364]	; (8003ac0 <HAL_ADC_MspInit+0x210>)
 8003952:	f003 fef5 	bl	8007740 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003956:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <HAL_ADC_MspInit+0x214>)
 8003958:	4a5b      	ldr	r2, [pc, #364]	; (8003ac8 <HAL_ADC_MspInit+0x218>)
 800395a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800395c:	4b59      	ldr	r3, [pc, #356]	; (8003ac4 <HAL_ADC_MspInit+0x214>)
 800395e:	2200      	movs	r2, #0
 8003960:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003962:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <HAL_ADC_MspInit+0x214>)
 8003964:	2200      	movs	r2, #0
 8003966:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003968:	4b56      	ldr	r3, [pc, #344]	; (8003ac4 <HAL_ADC_MspInit+0x214>)
 800396a:	2200      	movs	r2, #0
 800396c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800396e:	4b55      	ldr	r3, [pc, #340]	; (8003ac4 <HAL_ADC_MspInit+0x214>)
 8003970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003974:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003976:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <HAL_ADC_MspInit+0x214>)
 8003978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800397c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800397e:	4b51      	ldr	r3, [pc, #324]	; (8003ac4 <HAL_ADC_MspInit+0x214>)
 8003980:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003984:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003986:	4b4f      	ldr	r3, [pc, #316]	; (8003ac4 <HAL_ADC_MspInit+0x214>)
 8003988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800398c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800398e:	4b4d      	ldr	r3, [pc, #308]	; (8003ac4 <HAL_ADC_MspInit+0x214>)
 8003990:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003994:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003996:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <HAL_ADC_MspInit+0x214>)
 8003998:	2200      	movs	r2, #0
 800399a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800399c:	4849      	ldr	r0, [pc, #292]	; (8003ac4 <HAL_ADC_MspInit+0x214>)
 800399e:	f003 facd 	bl	8006f3c <HAL_DMA_Init>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80039a8:	f7ff ff50 	bl	800384c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a45      	ldr	r2, [pc, #276]	; (8003ac4 <HAL_ADC_MspInit+0x214>)
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
 80039b2:	4a44      	ldr	r2, [pc, #272]	; (8003ac4 <HAL_ADC_MspInit+0x214>)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80039b8:	e078      	b.n	8003aac <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a43      	ldr	r2, [pc, #268]	; (8003acc <HAL_ADC_MspInit+0x21c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d173      	bne.n	8003aac <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	4b3b      	ldr	r3, [pc, #236]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	4a3a      	ldr	r2, [pc, #232]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 80039ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d2:	6453      	str	r3, [r2, #68]	; 0x44
 80039d4:	4b38      	ldr	r3, [pc, #224]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 80039d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	4b34      	ldr	r3, [pc, #208]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	4a33      	ldr	r2, [pc, #204]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 80039ea:	f043 0304 	orr.w	r3, r3, #4
 80039ee:	6313      	str	r3, [r2, #48]	; 0x30
 80039f0:	4b31      	ldr	r3, [pc, #196]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	4b2d      	ldr	r3, [pc, #180]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	4a2c      	ldr	r2, [pc, #176]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0c:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <HAL_ADC_MspInit+0x208>)
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4824      	ldr	r0, [pc, #144]	; (8003abc <HAL_ADC_MspInit+0x20c>)
 8003a2c:	f003 fe88 	bl	8007740 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a30:	2302      	movs	r3, #2
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a34:	2303      	movs	r3, #3
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a40:	4619      	mov	r1, r3
 8003a42:	481f      	ldr	r0, [pc, #124]	; (8003ac0 <HAL_ADC_MspInit+0x210>)
 8003a44:	f003 fe7c 	bl	8007740 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003a48:	4b21      	ldr	r3, [pc, #132]	; (8003ad0 <HAL_ADC_MspInit+0x220>)
 8003a4a:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <HAL_ADC_MspInit+0x224>)
 8003a4c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_ADC_MspInit+0x220>)
 8003a50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a54:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <HAL_ADC_MspInit+0x220>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a5c:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <HAL_ADC_MspInit+0x220>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003a62:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_ADC_MspInit+0x220>)
 8003a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a68:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a6a:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_ADC_MspInit+0x220>)
 8003a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a70:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a72:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <HAL_ADC_MspInit+0x220>)
 8003a74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a78:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003a7a:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <HAL_ADC_MspInit+0x220>)
 8003a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a80:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003a82:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <HAL_ADC_MspInit+0x220>)
 8003a84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a88:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a8a:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <HAL_ADC_MspInit+0x220>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003a90:	480f      	ldr	r0, [pc, #60]	; (8003ad0 <HAL_ADC_MspInit+0x220>)
 8003a92:	f003 fa53 	bl	8006f3c <HAL_DMA_Init>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 8003a9c:	f7ff fed6 	bl	800384c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a0b      	ldr	r2, [pc, #44]	; (8003ad0 <HAL_ADC_MspInit+0x220>)
 8003aa4:	639a      	str	r2, [r3, #56]	; 0x38
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <HAL_ADC_MspInit+0x220>)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003aac:	bf00      	nop
 8003aae:	3738      	adds	r7, #56	; 0x38
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40012000 	.word	0x40012000
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40020800 	.word	0x40020800
 8003ac0:	40020000 	.word	0x40020000
 8003ac4:	20000fc4 	.word	0x20000fc4
 8003ac8:	40026410 	.word	0x40026410
 8003acc:	40012100 	.word	0x40012100
 8003ad0:	20001024 	.word	0x20001024
 8003ad4:	40026440 	.word	0x40026440

08003ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	; 0x28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae0:	f107 0314 	add.w	r3, r7, #20
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	60da      	str	r2, [r3, #12]
 8003aee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a43      	ldr	r2, [pc, #268]	; (8003c04 <HAL_SPI_MspInit+0x12c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d17f      	bne.n	8003bfa <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	4b42      	ldr	r3, [pc, #264]	; (8003c08 <HAL_SPI_MspInit+0x130>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	4a41      	ldr	r2, [pc, #260]	; (8003c08 <HAL_SPI_MspInit+0x130>)
 8003b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b08:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0a:	4b3f      	ldr	r3, [pc, #252]	; (8003c08 <HAL_SPI_MspInit+0x130>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <HAL_SPI_MspInit+0x130>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	4a3a      	ldr	r2, [pc, #232]	; (8003c08 <HAL_SPI_MspInit+0x130>)
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	6313      	str	r3, [r2, #48]	; 0x30
 8003b26:	4b38      	ldr	r3, [pc, #224]	; (8003c08 <HAL_SPI_MspInit+0x130>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	4b34      	ldr	r3, [pc, #208]	; (8003c08 <HAL_SPI_MspInit+0x130>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a33      	ldr	r2, [pc, #204]	; (8003c08 <HAL_SPI_MspInit+0x130>)
 8003b3c:	f043 0302 	orr.w	r3, r3, #2
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <HAL_SPI_MspInit+0x130>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8003b4e:	230c      	movs	r3, #12
 8003b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b52:	2302      	movs	r3, #2
 8003b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b5e:	2305      	movs	r3, #5
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b62:	f107 0314 	add.w	r3, r7, #20
 8003b66:	4619      	mov	r1, r3
 8003b68:	4828      	ldr	r0, [pc, #160]	; (8003c0c <HAL_SPI_MspInit+0x134>)
 8003b6a:	f003 fde9 	bl	8007740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 8003b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b74:	2302      	movs	r3, #2
 8003b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b80:	2305      	movs	r3, #5
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4821      	ldr	r0, [pc, #132]	; (8003c10 <HAL_SPI_MspInit+0x138>)
 8003b8c:	f003 fdd8 	bl	8007740 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003b90:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <HAL_SPI_MspInit+0x13c>)
 8003b92:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <HAL_SPI_MspInit+0x140>)
 8003b94:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003b96:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <HAL_SPI_MspInit+0x13c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <HAL_SPI_MspInit+0x13c>)
 8003b9e:	2240      	movs	r2, #64	; 0x40
 8003ba0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <HAL_SPI_MspInit+0x13c>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ba8:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <HAL_SPI_MspInit+0x13c>)
 8003baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bae:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bb0:	4b18      	ldr	r3, [pc, #96]	; (8003c14 <HAL_SPI_MspInit+0x13c>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bb6:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <HAL_SPI_MspInit+0x13c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003bbc:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <HAL_SPI_MspInit+0x13c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <HAL_SPI_MspInit+0x13c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bc8:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <HAL_SPI_MspInit+0x13c>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003bce:	4811      	ldr	r0, [pc, #68]	; (8003c14 <HAL_SPI_MspInit+0x13c>)
 8003bd0:	f003 f9b4 	bl	8006f3c <HAL_DMA_Init>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8003bda:	f7ff fe37 	bl	800384c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a0c      	ldr	r2, [pc, #48]	; (8003c14 <HAL_SPI_MspInit+0x13c>)
 8003be2:	649a      	str	r2, [r3, #72]	; 0x48
 8003be4:	4a0b      	ldr	r2, [pc, #44]	; (8003c14 <HAL_SPI_MspInit+0x13c>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003bea:	2200      	movs	r2, #0
 8003bec:	2100      	movs	r1, #0
 8003bee:	2024      	movs	r0, #36	; 0x24
 8003bf0:	f003 f96d 	bl	8006ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003bf4:	2024      	movs	r0, #36	; 0x24
 8003bf6:	f003 f986 	bl	8006f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003bfa:	bf00      	nop
 8003bfc:	3728      	adds	r7, #40	; 0x28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40003800 	.word	0x40003800
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40020800 	.word	0x40020800
 8003c10:	40020400 	.word	0x40020400
 8003c14:	200010dc 	.word	0x200010dc
 8003c18:	40026070 	.word	0x40026070

08003c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2c:	d115      	bne.n	8003c5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <HAL_TIM_Base_MspInit+0x48>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a0b      	ldr	r2, [pc, #44]	; (8003c64 <HAL_TIM_Base_MspInit+0x48>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_TIM_Base_MspInit+0x48>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	201c      	movs	r0, #28
 8003c50:	f003 f93d 	bl	8006ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c54:	201c      	movs	r0, #28
 8003c56:	f003 f956 	bl	8006f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800

08003c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08c      	sub	sp, #48	; 0x30
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c70:	f107 031c 	add.w	r3, r7, #28
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a36      	ldr	r2, [pc, #216]	; (8003d60 <HAL_UART_MspInit+0xf8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d134      	bne.n	8003cf4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	4b35      	ldr	r3, [pc, #212]	; (8003d64 <HAL_UART_MspInit+0xfc>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	4a34      	ldr	r2, [pc, #208]	; (8003d64 <HAL_UART_MspInit+0xfc>)
 8003c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c98:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9a:	4b32      	ldr	r3, [pc, #200]	; (8003d64 <HAL_UART_MspInit+0xfc>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	4b2e      	ldr	r3, [pc, #184]	; (8003d64 <HAL_UART_MspInit+0xfc>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	4a2d      	ldr	r2, [pc, #180]	; (8003d64 <HAL_UART_MspInit+0xfc>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb6:	4b2b      	ldr	r3, [pc, #172]	; (8003d64 <HAL_UART_MspInit+0xfc>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003cc2:	230c      	movs	r3, #12
 8003cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cd2:	2307      	movs	r3, #7
 8003cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd6:	f107 031c 	add.w	r3, r7, #28
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4822      	ldr	r0, [pc, #136]	; (8003d68 <HAL_UART_MspInit+0x100>)
 8003cde:	f003 fd2f 	bl	8007740 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	2026      	movs	r0, #38	; 0x26
 8003ce8:	f003 f8f1 	bl	8006ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003cec:	2026      	movs	r0, #38	; 0x26
 8003cee:	f003 f90a 	bl	8006f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003cf2:	e031      	b.n	8003d58 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1c      	ldr	r2, [pc, #112]	; (8003d6c <HAL_UART_MspInit+0x104>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d12c      	bne.n	8003d58 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <HAL_UART_MspInit+0xfc>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <HAL_UART_MspInit+0xfc>)
 8003d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0e:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <HAL_UART_MspInit+0xfc>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_UART_MspInit+0xfc>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4a10      	ldr	r2, [pc, #64]	; (8003d64 <HAL_UART_MspInit+0xfc>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <HAL_UART_MspInit+0xfc>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8003d36:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8003d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d44:	2303      	movs	r3, #3
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d48:	2307      	movs	r3, #7
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d4c:	f107 031c 	add.w	r3, r7, #28
 8003d50:	4619      	mov	r1, r3
 8003d52:	4807      	ldr	r0, [pc, #28]	; (8003d70 <HAL_UART_MspInit+0x108>)
 8003d54:	f003 fcf4 	bl	8007740 <HAL_GPIO_Init>
}
 8003d58:	bf00      	nop
 8003d5a:	3730      	adds	r7, #48	; 0x30
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40004400 	.word	0x40004400
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40020000 	.word	0x40020000
 8003d6c:	40004800 	.word	0x40004800
 8003d70:	40020800 	.word	0x40020800

08003d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d78:	e7fe      	b.n	8003d78 <NMI_Handler+0x4>

08003d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d7e:	e7fe      	b.n	8003d7e <HardFault_Handler+0x4>

08003d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d84:	e7fe      	b.n	8003d84 <MemManage_Handler+0x4>

08003d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d86:	b480      	push	{r7}
 8003d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d8a:	e7fe      	b.n	8003d8a <BusFault_Handler+0x4>

08003d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d90:	e7fe      	b.n	8003d90 <UsageFault_Handler+0x4>

08003d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003db2:	bf00      	nop
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dc0:	f002 fb62 	bl	8006488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <DMA1_Stream4_IRQHandler+0x10>)
 8003dce:	f003 fa4d 	bl	800726c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200010dc 	.word	0x200010dc

08003ddc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003de0:	4804      	ldr	r0, [pc, #16]	; (8003df4 <TIM2_IRQHandler+0x18>)
 8003de2:	f005 fa83 	bl	80092ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 8003de6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dea:	4803      	ldr	r0, [pc, #12]	; (8003df8 <TIM2_IRQHandler+0x1c>)
 8003dec:	f003 fe6d 	bl	8007aca <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8003df0:	bf00      	nop
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	2000113c 	.word	0x2000113c
 8003df8:	40020000 	.word	0x40020000

08003dfc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003e00:	4802      	ldr	r0, [pc, #8]	; (8003e0c <SPI2_IRQHandler+0x10>)
 8003e02:	f004 ff55 	bl	8008cb0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20001084 	.word	0x20001084

08003e10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <USART2_IRQHandler+0x10>)
 8003e16:	f005 ff45 	bl	8009ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20001184 	.word	0x20001184

08003e24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003e28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e2c:	f003 fe68 	bl	8007b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e30:	bf00      	nop
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e38:	4802      	ldr	r0, [pc, #8]	; (8003e44 <DMA2_Stream0_IRQHandler+0x10>)
 8003e3a:	f003 fa17 	bl	800726c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000fc4 	.word	0x20000fc4

08003e48 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003e4c:	4802      	ldr	r0, [pc, #8]	; (8003e58 <DMA2_Stream2_IRQHandler+0x10>)
 8003e4e:	f003 fa0d 	bl	800726c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20001024 	.word	0x20001024

08003e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return 1;
 8003e60:	2301      	movs	r3, #1
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <_kill>:

int _kill(int pid, int sig)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e76:	f007 fd09 	bl	800b88c <__errno>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2216      	movs	r2, #22
 8003e7e:	601a      	str	r2, [r3, #0]
  return -1;
 8003e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <_exit>:

void _exit (int status)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ffe7 	bl	8003e6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e9e:	e7fe      	b.n	8003e9e <_exit+0x12>

08003ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	e00a      	b.n	8003ec8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003eb2:	f3af 8000 	nop.w
 8003eb6:	4601      	mov	r1, r0
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	60ba      	str	r2, [r7, #8]
 8003ebe:	b2ca      	uxtb	r2, r1
 8003ec0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	dbf0      	blt.n	8003eb2 <_read+0x12>
  }

  return len;
 8003ed0:	687b      	ldr	r3, [r7, #4]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b086      	sub	sp, #24
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e009      	b.n	8003f00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	60ba      	str	r2, [r7, #8]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	3301      	adds	r3, #1
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	dbf1      	blt.n	8003eec <_write+0x12>
  }
  return len;
 8003f08:	687b      	ldr	r3, [r7, #4]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <_close>:

int _close(int file)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f3a:	605a      	str	r2, [r3, #4]
  return 0;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <_isatty>:

int _isatty(int file)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f52:	2301      	movs	r3, #1
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f84:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <_sbrk+0x5c>)
 8003f86:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <_sbrk+0x60>)
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <_sbrk+0x64>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f98:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <_sbrk+0x64>)
 8003f9a:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <_sbrk+0x68>)
 8003f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f9e:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <_sbrk+0x64>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d207      	bcs.n	8003fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fac:	f007 fc6e 	bl	800b88c <__errno>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	220c      	movs	r2, #12
 8003fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fba:	e009      	b.n	8003fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fbc:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <_sbrk+0x64>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fc2:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <_sbrk+0x64>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4413      	add	r3, r2
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <_sbrk+0x64>)
 8003fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fce:	68fb      	ldr	r3, [r7, #12]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20020000 	.word	0x20020000
 8003fdc:	00000400 	.word	0x00000400
 8003fe0:	20006e70 	.word	0x20006e70
 8003fe4:	20007858 	.word	0x20007858

08003fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fec:	4b06      	ldr	r3, [pc, #24]	; (8004008 <SystemInit+0x20>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	4a05      	ldr	r2, [pc, #20]	; (8004008 <SystemInit+0x20>)
 8003ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ffc:	bf00      	nop
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 800400c:	b40f      	push	{r0, r1, r2, r3}
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 8004014:	f107 0314 	add.w	r3, r7, #20
 8004018:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	2180      	movs	r1, #128	; 0x80
 8004020:	480a      	ldr	r0, [pc, #40]	; (800404c <term_print+0x40>)
 8004022:	f007 fbc1 	bl	800b7a8 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 8004026:	4809      	ldr	r0, [pc, #36]	; (800404c <term_print+0x40>)
 8004028:	f7fc f942 	bl	80002b0 <strlen>
 800402c:	4603      	mov	r3, r0
 800402e:	b29a      	uxth	r2, r3
 8004030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004034:	4905      	ldr	r1, [pc, #20]	; (800404c <term_print+0x40>)
 8004036:	4806      	ldr	r0, [pc, #24]	; (8004050 <term_print+0x44>)
 8004038:	f005 fd71 	bl	8009b1e <HAL_UART_Transmit>
 800403c:	4603      	mov	r3, r0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004048:	b004      	add	sp, #16
 800404a:	4770      	bx	lr
 800404c:	20006e74 	.word	0x20006e74
 8004050:	20001184 	.word	0x20001184

08004054 <term_show_buffer>:

/*
 * Show the adc_raw_buf contents in terminal
 */
void term_show_buffer(uint8_t bufnum) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
	uint16_t address = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	827b      	strh	r3, [r7, #18]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d838      	bhi.n	80040de <term_show_buffer+0x8a>
	term_print("Buffer %d\r\n", bufnum);
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	4619      	mov	r1, r3
 8004070:	481d      	ldr	r0, [pc, #116]	; (80040e8 <term_show_buffer+0x94>)
 8004072:	f7ff ffcb 	bl	800400c <term_print>
	term_print("%3d: ", 0);
 8004076:	2100      	movs	r1, #0
 8004078:	481c      	ldr	r0, [pc, #112]	; (80040ec <term_show_buffer+0x98>)
 800407a:	f7ff ffc7 	bl	800400c <term_print>
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e020      	b.n	80040c6 <term_show_buffer+0x72>
		if (count >= 20) {
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b13      	cmp	r3, #19
 8004088:	dd06      	ble.n	8004098 <term_show_buffer+0x44>
			count =0;
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
			term_print("\r\n%3d: ", address);
 800408e:	8a7b      	ldrh	r3, [r7, #18]
 8004090:	4619      	mov	r1, r3
 8004092:	4817      	ldr	r0, [pc, #92]	; (80040f0 <term_show_buffer+0x9c>)
 8004094:	f7ff ffba 	bl	800400c <term_print>
		}
		term_print("%04u ", sample_buf[bufnum][i]);
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	4916      	ldr	r1, [pc, #88]	; (80040f4 <term_show_buffer+0xa0>)
 800409c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80040a0:	fb03 f202 	mul.w	r2, r3, r2
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80040ac:	4619      	mov	r1, r3
 80040ae:	4812      	ldr	r0, [pc, #72]	; (80040f8 <term_show_buffer+0xa4>)
 80040b0:	f7ff ffac 	bl	800400c <term_print>
		count++; address++;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	3301      	adds	r3, #1
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	8a7b      	ldrh	r3, [r7, #18]
 80040bc:	3301      	adds	r3, #1
 80040be:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80040cc:	d3da      	bcc.n	8004084 <term_show_buffer+0x30>
	}
	term_print("\r\n");
 80040ce:	480b      	ldr	r0, [pc, #44]	; (80040fc <term_show_buffer+0xa8>)
 80040d0:	f7ff ff9c 	bl	800400c <term_print>
	term_show_channel(bufnum);
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f868 	bl	80041ac <term_show_channel>
 80040dc:	e000      	b.n	80040e0 <term_show_buffer+0x8c>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80040de:	bf00      	nop
}
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	0800ea84 	.word	0x0800ea84
 80040ec:	0800ea90 	.word	0x0800ea90
 80040f0:	0800ea98 	.word	0x0800ea98
 80040f4:	2000613c 	.word	0x2000613c
 80040f8:	0800eaa0 	.word	0x0800eaa0
 80040fc:	0800eaa8 	.word	0x0800eaa8

08004100 <term_show_measurements>:

void term_show_measurements() {
 8004100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004104:	b08a      	sub	sp, #40	; 0x28
 8004106:	af08      	add	r7, sp, #32
	if (sample_buf_meta[ADC_CH_V].measurements_valid != 1) {
 8004108:	4b20      	ldr	r3, [pc, #128]	; (800418c <term_show_measurements+0x8c>)
 800410a:	7b1b      	ldrb	r3, [r3, #12]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d008      	beq.n	8004122 <term_show_measurements+0x22>
		if (calc_measurements() != 0) {
 8004110:	f7fd fa98 	bl	8001644 <calc_measurements>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <term_show_measurements+0x22>
			term_print(" invalid readings\r\n");
 800411a:	481d      	ldr	r0, [pc, #116]	; (8004190 <term_show_measurements+0x90>)
 800411c:	f7ff ff76 	bl	800400c <term_print>
			return;
 8004120:	e02f      	b.n	8004182 <term_show_measurements+0x82>
		}
	}
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f\r\n", metervalue_v, metervalue_i1, metervalue_va1, metervalue_w1, metervalue_pf1);
 8004122:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <term_show_measurements+0x94>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fc fa2e 	bl	8000588 <__aeabi_f2d>
 800412c:	e9c7 0100 	strd	r0, r1, [r7]
 8004130:	4b19      	ldr	r3, [pc, #100]	; (8004198 <term_show_measurements+0x98>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7fc fa27 	bl	8000588 <__aeabi_f2d>
 800413a:	4604      	mov	r4, r0
 800413c:	460d      	mov	r5, r1
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <term_show_measurements+0x9c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc fa20 	bl	8000588 <__aeabi_f2d>
 8004148:	4680      	mov	r8, r0
 800414a:	4689      	mov	r9, r1
 800414c:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <term_show_measurements+0xa0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc fa19 	bl	8000588 <__aeabi_f2d>
 8004156:	4682      	mov	sl, r0
 8004158:	468b      	mov	fp, r1
 800415a:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <term_show_measurements+0xa4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fc fa12 	bl	8000588 <__aeabi_f2d>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800416c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004170:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004174:	e9cd 4500 	strd	r4, r5, [sp]
 8004178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800417c:	480a      	ldr	r0, [pc, #40]	; (80041a8 <term_show_measurements+0xa8>)
 800417e:	f7ff ff45 	bl	800400c <term_print>
}
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418a:	bf00      	nop
 800418c:	2000023c 	.word	0x2000023c
 8004190:	0800eaac 	.word	0x0800eaac
 8004194:	20006e5c 	.word	0x20006e5c
 8004198:	20006e60 	.word	0x20006e60
 800419c:	20006e64 	.word	0x20006e64
 80041a0:	20006e68 	.word	0x20006e68
 80041a4:	20006e6c 	.word	0x20006e6c
 80041a8:	0800eac0 	.word	0x0800eac0

080041ac <term_show_channel>:

void term_show_channel(uint8_t bufnum) {
 80041ac:	b5b0      	push	{r4, r5, r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	f200 808a 	bhi.w	80042d2 <term_show_channel+0x126>
	if (sample_buf_meta[bufnum].measurements_valid != 1) {
 80041be:	79fa      	ldrb	r2, [r7, #7]
 80041c0:	4946      	ldr	r1, [pc, #280]	; (80042dc <term_show_channel+0x130>)
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	330c      	adds	r3, #12
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d00c      	beq.n	80041ee <term_show_channel+0x42>
		if (calc_channel(bufnum) != 0) {
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fd fd0e 	bl	8001bf8 <calc_channel>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <term_show_channel+0x42>
			term_print("Buffer %d - invalid readings\r\n", bufnum);
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	4619      	mov	r1, r3
 80041e6:	483e      	ldr	r0, [pc, #248]	; (80042e0 <term_show_channel+0x134>)
 80041e8:	f7ff ff10 	bl	800400c <term_print>
			return; } ;
 80041ec:	e072      	b.n	80042d4 <term_show_channel+0x128>
	}
	int pp_reading = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80041ee:	79fa      	ldrb	r2, [r7, #7]
 80041f0:	493a      	ldr	r1, [pc, #232]	; (80042dc <term_show_channel+0x130>)
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	3302      	adds	r3, #2
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	79fa      	ldrb	r2, [r7, #7]
 8004204:	4935      	ldr	r1, [pc, #212]	; (80042dc <term_show_channel+0x130>)
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	1ac3      	subs	r3, r0, r3
 8004214:	60fb      	str	r3, [r7, #12]
	term_print("Measurements Buffer %d:\r\n", bufnum);
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	4619      	mov	r1, r3
 800421a:	4832      	ldr	r0, [pc, #200]	; (80042e4 <term_show_channel+0x138>)
 800421c:	f7ff fef6 	bl	800400c <term_print>
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8004220:	79fa      	ldrb	r2, [r7, #7]
 8004222:	492e      	ldr	r1, [pc, #184]	; (80042dc <term_show_channel+0x130>)
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	3310      	adds	r3, #16
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	b21b      	sxth	r3, r3
 8004234:	4618      	mov	r0, r3
 8004236:	f7fd fe1f 	bl	8001e78 <calc_adc_raw_to_mv_int>
 800423a:	4604      	mov	r4, r0
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	b21b      	sxth	r3, r3
 8004240:	4618      	mov	r0, r3
 8004242:	f7fd fe19 	bl	8001e78 <calc_adc_raw_to_mv_int>
 8004246:	4605      	mov	r5, r0
			calc_adc_raw_to_mv_int(pp_reading),
			calc_adc_raw_to_mv_int(pp_reading/2) );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	0fda      	lsrs	r2, r3, #31
 800424c:	4413      	add	r3, r2
 800424e:	105b      	asrs	r3, r3, #1
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8004250:	b21b      	sxth	r3, r3
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd fe10 	bl	8001e78 <calc_adc_raw_to_mv_int>
 8004258:	4603      	mov	r3, r0
 800425a:	462a      	mov	r2, r5
 800425c:	4621      	mov	r1, r4
 800425e:	4822      	ldr	r0, [pc, #136]	; (80042e8 <term_show_channel+0x13c>)
 8004260:	f7ff fed4 	bl	800400c <term_print>
	term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8004264:	79fa      	ldrb	r2, [r7, #7]
 8004266:	491d      	ldr	r1, [pc, #116]	; (80042dc <term_show_channel+0x130>)
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b21b      	sxth	r3, r3
 8004276:	4618      	mov	r0, r3
 8004278:	f7fd fdfe 	bl	8001e78 <calc_adc_raw_to_mv_int>
 800427c:	4604      	mov	r4, r0
 800427e:	79fa      	ldrb	r2, [r7, #7]
 8004280:	4916      	ldr	r1, [pc, #88]	; (80042dc <term_show_channel+0x130>)
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	3302      	adds	r3, #2
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b21b      	sxth	r3, r3
 8004292:	4618      	mov	r0, r3
 8004294:	f7fd fdf0 	bl	8001e78 <calc_adc_raw_to_mv_int>
 8004298:	4603      	mov	r3, r0
 800429a:	461a      	mov	r2, r3
 800429c:	4621      	mov	r1, r4
 800429e:	4813      	ldr	r0, [pc, #76]	; (80042ec <term_show_channel+0x140>)
 80042a0:	f7ff feb4 	bl	800400c <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[bufnum].zero_cross_pos, sample_buf_meta[bufnum].zero_cross_neg);
 80042a4:	79fa      	ldrb	r2, [r7, #7]
 80042a6:	490d      	ldr	r1, [pc, #52]	; (80042dc <term_show_channel+0x130>)
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	3304      	adds	r3, #4
 80042b4:	6819      	ldr	r1, [r3, #0]
 80042b6:	79fa      	ldrb	r2, [r7, #7]
 80042b8:	4808      	ldr	r0, [pc, #32]	; (80042dc <term_show_channel+0x130>)
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4403      	add	r3, r0
 80042c4:	3308      	adds	r3, #8
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	4809      	ldr	r0, [pc, #36]	; (80042f0 <term_show_channel+0x144>)
 80042cc:	f7ff fe9e 	bl	800400c <term_print>
 80042d0:	e000      	b.n	80042d4 <term_show_channel+0x128>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80042d2:	bf00      	nop
}
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bdb0      	pop	{r4, r5, r7, pc}
 80042da:	bf00      	nop
 80042dc:	2000023c 	.word	0x2000023c
 80042e0:	0800eae4 	.word	0x0800eae4
 80042e4:	0800eb04 	.word	0x0800eb04
 80042e8:	0800eb20 	.word	0x0800eb20
 80042ec:	0800eb44 	.word	0x0800eb44
 80042f0:	0800eb5c 	.word	0x0800eb5c

080042f4 <term_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void term_csv_buffer(uint8_t buf_num) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	2b03      	cmp	r3, #3
 8004302:	d821      	bhi.n	8004348 <term_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	4619      	mov	r1, r3
 8004308:	4811      	ldr	r0, [pc, #68]	; (8004350 <term_csv_buffer+0x5c>)
 800430a:	f7ff fe7f 	bl	800400c <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e011      	b.n	8004338 <term_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	490f      	ldr	r1, [pc, #60]	; (8004354 <term_csv_buffer+0x60>)
 8004318:	f44f 7252 	mov.w	r2, #840	; 0x348
 800431c:	fb03 f202 	mul.w	r2, r3, r2
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004328:	461a      	mov	r2, r3
 800432a:	68f9      	ldr	r1, [r7, #12]
 800432c:	480a      	ldr	r0, [pc, #40]	; (8004358 <term_csv_buffer+0x64>)
 800432e:	f7ff fe6d 	bl	800400c <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3301      	adds	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 800433e:	d3e9      	bcc.n	8004314 <term_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 8004340:	4806      	ldr	r0, [pc, #24]	; (800435c <term_csv_buffer+0x68>)
 8004342:	f7ff fe63 	bl	800400c <term_print>
 8004346:	e000      	b.n	800434a <term_csv_buffer+0x56>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8004348:	bf00      	nop
}
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	0800ea84 	.word	0x0800ea84
 8004354:	200046fc 	.word	0x200046fc
 8004358:	0800eb7c 	.word	0x0800eb7c
 800435c:	0800eb84 	.word	0x0800eb84

08004360 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8004364:	2180      	movs	r1, #128	; 0x80
 8004366:	480f      	ldr	r0, [pc, #60]	; (80043a4 <Displ_Select+0x44>)
 8004368:	f003 fb7e 	bl	8007a68 <HAL_GPIO_ReadPin>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d015      	beq.n	800439e <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8004372:	2201      	movs	r2, #1
 8004374:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004378:	480b      	ldr	r0, [pc, #44]	; (80043a8 <Displ_Select+0x48>)
 800437a:	f003 fb8d 	bl	8007a98 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <Displ_Select+0x4c>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	490a      	ldr	r1, [pc, #40]	; (80043ac <Displ_Select+0x4c>)
 8004384:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004388:	4013      	ands	r3, r2
 800438a:	600b      	str	r3, [r1, #0]
 800438c:	4b07      	ldr	r3, [pc, #28]	; (80043ac <Displ_Select+0x4c>)
 800438e:	4a07      	ldr	r2, [pc, #28]	; (80043ac <Displ_Select+0x4c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8004394:	2200      	movs	r2, #0
 8004396:	2180      	movs	r1, #128	; 0x80
 8004398:	4802      	ldr	r0, [pc, #8]	; (80043a4 <Displ_Select+0x44>)
 800439a:	f003 fb7d 	bl	8007a98 <HAL_GPIO_WritePin>
		}
	}
}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40020800 	.word	0x40020800
 80043a8:	40020000 	.word	0x40020000
 80043ac:	40003800 	.word	0x40003800

080043b0 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6039      	str	r1, [r7, #0]
 80043b8:	4611      	mov	r1, r2
 80043ba:	461a      	mov	r2, r3
 80043bc:	4603      	mov	r3, r0
 80043be:	71fb      	strb	r3, [r7, #7]
 80043c0:	460b      	mov	r3, r1
 80043c2:	80bb      	strh	r3, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 80043c8:	bf00      	nop
 80043ca:	4b22      	ldr	r3, [pc, #136]	; (8004454 <Displ_Transmit+0xa4>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0fa      	beq.n	80043ca <Displ_Transmit+0x1a>

	Displ_Select();
 80043d4:	f7ff ffc4 	bl	8004360 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	461a      	mov	r2, r3
 80043dc:	2180      	movs	r1, #128	; 0x80
 80043de:	481e      	ldr	r0, [pc, #120]	; (8004458 <Displ_Transmit+0xa8>)
 80043e0:	f003 fb5a 	bl	8007a98 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 80043e4:	79bb      	ldrb	r3, [r7, #6]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d016      	beq.n	8004418 <Displ_Transmit+0x68>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 80043ea:	88bb      	ldrh	r3, [r7, #4]
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	4413      	add	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	e00b      	b.n	8004410 <Displ_Transmit+0x60>
			*data32=__REV16(*data32);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	ba5b      	rev16	r3, r3
 8004402:	60bb      	str	r3, [r7, #8]
  return result;
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	3304      	adds	r3, #4
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	429a      	cmp	r2, r3
 8004416:	d3ef      	bcc.n	80043f8 <Displ_Transmit+0x48>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8004418:	88bb      	ldrh	r3, [r7, #4]
 800441a:	2b13      	cmp	r3, #19
 800441c:	d80d      	bhi.n	800443a <Displ_Transmit+0x8a>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 800441e:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <Displ_Transmit+0xa4>)
 8004420:	2200      	movs	r2, #0
 8004422:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8004424:	88ba      	ldrh	r2, [r7, #4]
 8004426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800442a:	6839      	ldr	r1, [r7, #0]
 800442c:	480b      	ldr	r0, [pc, #44]	; (800445c <Displ_Transmit+0xac>)
 800442e:	f004 fa4c 	bl	80088ca <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <Displ_Transmit+0xa4>)
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8004438:	e008      	b.n	800444c <Displ_Transmit+0x9c>
			Displ_SpiAvailable=0;
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <Displ_Transmit+0xa4>)
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8004440:	88bb      	ldrh	r3, [r7, #4]
 8004442:	461a      	mov	r2, r3
 8004444:	6839      	ldr	r1, [r7, #0]
 8004446:	4805      	ldr	r0, [pc, #20]	; (800445c <Displ_Transmit+0xac>)
 8004448:	f004 fb7c 	bl	8008b44 <HAL_SPI_Transmit_DMA>
	}
 800444c:	bf00      	nop
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000034 	.word	0x20000034
 8004458:	40020000 	.word	0x40020000
 800445c:	20001084 	.word	0x20001084

08004460 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 800446a:	1df9      	adds	r1, r7, #7
 800446c:	2300      	movs	r3, #0
 800446e:	2201      	movs	r2, #1
 8004470:	2000      	movs	r0, #0
 8004472:	f7ff ff9d 	bl	80043b0 <Displ_Transmit>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	4613      	mov	r3, r2
 800448a:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	b29a      	uxth	r2, r3
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	68f9      	ldr	r1, [r7, #12]
 800449a:	2001      	movs	r0, #1
 800449c:	f7ff ff88 	bl	80043b0 <Displ_Transmit>
 80044a0:	e000      	b.n	80044a4 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 80044a2:	bf00      	nop
}
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
	Displ_Select();
 80044b0:	f7ff ff56 	bl	8004360 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 80044b4:	2200      	movs	r2, #0
 80044b6:	2140      	movs	r1, #64	; 0x40
 80044b8:	4819      	ldr	r0, [pc, #100]	; (8004520 <ILI9XXX_Init+0x74>)
 80044ba:	f003 faed 	bl	8007a98 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80044be:	2001      	movs	r0, #1
 80044c0:	f002 f802 	bl	80064c8 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 80044c4:	2201      	movs	r2, #1
 80044c6:	2140      	movs	r1, #64	; 0x40
 80044c8:	4815      	ldr	r0, [pc, #84]	; (8004520 <ILI9XXX_Init+0x74>)
 80044ca:	f003 fae5 	bl	8007a98 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 80044ce:	20a5      	movs	r0, #165	; 0xa5
 80044d0:	f001 fffa 	bl	80064c8 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 80044d4:	203a      	movs	r0, #58	; 0x3a
 80044d6:	f7ff ffc3 	bl	8004460 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 80044da:	2200      	movs	r2, #0
 80044dc:	2101      	movs	r1, #1
 80044de:	4811      	ldr	r0, [pc, #68]	; (8004524 <ILI9XXX_Init+0x78>)
 80044e0:	f7ff ffcd 	bl	800447e <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 80044e4:	20b0      	movs	r0, #176	; 0xb0
 80044e6:	f7ff ffbb 	bl	8004460 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 80044ea:	2200      	movs	r2, #0
 80044ec:	2101      	movs	r1, #1
 80044ee:	480e      	ldr	r0, [pc, #56]	; (8004528 <ILI9XXX_Init+0x7c>)
 80044f0:	f7ff ffc5 	bl	800447e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 80044f4:	20b0      	movs	r0, #176	; 0xb0
 80044f6:	f7ff ffb3 	bl	8004460 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 80044fa:	2200      	movs	r2, #0
 80044fc:	2101      	movs	r1, #1
 80044fe:	480a      	ldr	r0, [pc, #40]	; (8004528 <ILI9XXX_Init+0x7c>)
 8004500:	f7ff ffbd 	bl	800447e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8004504:	2011      	movs	r0, #17
 8004506:	f7ff ffab 	bl	8004460 <Displ_WriteCommand>
	HAL_Delay(120);
 800450a:	2078      	movs	r0, #120	; 0x78
 800450c:	f001 ffdc 	bl	80064c8 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8004510:	2029      	movs	r0, #41	; 0x29
 8004512:	f7ff ffa5 	bl	8004460 <Displ_WriteCommand>
	HAL_Delay(5);
 8004516:	2005      	movs	r0, #5
 8004518:	f001 ffd6 	bl	80064c8 <HAL_Delay>

}
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40020400 	.word	0x40020400
 8004524:	0800eb8c 	.word	0x0800eb8c
 8004528:	0800eb90 	.word	0x0800eb90

0800452c <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800452c:	b590      	push	{r4, r7, lr}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4604      	mov	r4, r0
 8004534:	4608      	mov	r0, r1
 8004536:	4611      	mov	r1, r2
 8004538:	461a      	mov	r2, r3
 800453a:	4623      	mov	r3, r4
 800453c:	80fb      	strh	r3, [r7, #6]
 800453e:	4603      	mov	r3, r0
 8004540:	80bb      	strh	r3, [r7, #4]
 8004542:	460b      	mov	r3, r1
 8004544:	807b      	strh	r3, [r7, #2]
 8004546:	4613      	mov	r3, r2
 8004548:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 800454a:	887b      	ldrh	r3, [r7, #2]
 800454c:	061a      	lsls	r2, r3, #24
 800454e:	887b      	ldrh	r3, [r7, #2]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004556:	431a      	orrs	r2, r3
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	b29b      	uxth	r3, r3
 800455e:	4313      	orrs	r3, r2
 8004560:	88fa      	ldrh	r2, [r7, #6]
 8004562:	0a12      	lsrs	r2, r2, #8
 8004564:	b292      	uxth	r2, r2
 8004566:	431a      	orrs	r2, r3
 8004568:	4b14      	ldr	r3, [pc, #80]	; (80045bc <Displ_SetAddressWindow+0x90>)
 800456a:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 800456c:	202a      	movs	r0, #42	; 0x2a
 800456e:	f7ff ff77 	bl	8004460 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8004572:	2200      	movs	r2, #0
 8004574:	2104      	movs	r1, #4
 8004576:	4811      	ldr	r0, [pc, #68]	; (80045bc <Displ_SetAddressWindow+0x90>)
 8004578:	f7ff ff81 	bl	800447e <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 800457c:	883b      	ldrh	r3, [r7, #0]
 800457e:	061a      	lsls	r2, r3, #24
 8004580:	883b      	ldrh	r3, [r7, #0]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004588:	431a      	orrs	r2, r3
 800458a:	88bb      	ldrh	r3, [r7, #4]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	b29b      	uxth	r3, r3
 8004590:	4313      	orrs	r3, r2
 8004592:	88ba      	ldrh	r2, [r7, #4]
 8004594:	0a12      	lsrs	r2, r2, #8
 8004596:	b292      	uxth	r2, r2
 8004598:	431a      	orrs	r2, r3
 800459a:	4b08      	ldr	r3, [pc, #32]	; (80045bc <Displ_SetAddressWindow+0x90>)
 800459c:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 800459e:	202b      	movs	r0, #43	; 0x2b
 80045a0:	f7ff ff5e 	bl	8004460 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80045a4:	2200      	movs	r2, #0
 80045a6:	2104      	movs	r1, #4
 80045a8:	4804      	ldr	r0, [pc, #16]	; (80045bc <Displ_SetAddressWindow+0x90>)
 80045aa:	f7ff ff68 	bl	800447e <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 80045ae:	202c      	movs	r0, #44	; 0x2c
 80045b0:	f7ff ff56 	bl	8004460 <Displ_WriteCommand>
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd90      	pop	{r4, r7, pc}
 80045bc:	200076fc 	.word	0x200076fc

080045c0 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 80045ca:	2201      	movs	r2, #1
 80045cc:	2180      	movs	r1, #128	; 0x80
 80045ce:	4809      	ldr	r0, [pc, #36]	; (80045f4 <Displ_Init+0x34>)
 80045d0:	f003 fa62 	bl	8007a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 80045d4:	2201      	movs	r2, #1
 80045d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045da:	4807      	ldr	r0, [pc, #28]	; (80045f8 <Displ_Init+0x38>)
 80045dc:	f003 fa5c 	bl	8007a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 80045e0:	f7ff ff64 	bl	80044ac <ILI9XXX_Init>
	Displ_Orientation(orientation);
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f808 	bl	80045fc <Displ_Orientation>
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40020800 	.word	0x40020800
 80045f8:	40020000 	.word	0x40020000

080045fc <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	2b03      	cmp	r3, #3
 800460a:	d837      	bhi.n	800467c <Displ_Orientation+0x80>
 800460c:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <Displ_Orientation+0x18>)
 800460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004612:	bf00      	nop
 8004614:	08004625 	.word	0x08004625
 8004618:	0800463b 	.word	0x0800463b
 800461c:	08004651 	.word	0x08004651
 8004620:	08004667 	.word	0x08004667
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8004624:	4b1d      	ldr	r3, [pc, #116]	; (800469c <Displ_Orientation+0xa0>)
 8004626:	2288      	movs	r2, #136	; 0x88
 8004628:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 800462a:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <Displ_Orientation+0xa4>)
 800462c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004630:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8004632:	4b1c      	ldr	r3, [pc, #112]	; (80046a4 <Displ_Orientation+0xa8>)
 8004634:	22f0      	movs	r2, #240	; 0xf0
 8004636:	801a      	strh	r2, [r3, #0]
			break;
 8004638:	e020      	b.n	800467c <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 800463a:	4b18      	ldr	r3, [pc, #96]	; (800469c <Displ_Orientation+0xa0>)
 800463c:	22e8      	movs	r2, #232	; 0xe8
 800463e:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <Displ_Orientation+0xa4>)
 8004642:	22f0      	movs	r2, #240	; 0xf0
 8004644:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8004646:	4b17      	ldr	r3, [pc, #92]	; (80046a4 <Displ_Orientation+0xa8>)
 8004648:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800464c:	801a      	strh	r2, [r3, #0]
			break;
 800464e:	e015      	b.n	800467c <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8004650:	4b12      	ldr	r3, [pc, #72]	; (800469c <Displ_Orientation+0xa0>)
 8004652:	2248      	movs	r2, #72	; 0x48
 8004654:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8004656:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <Displ_Orientation+0xa4>)
 8004658:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800465c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 800465e:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <Displ_Orientation+0xa8>)
 8004660:	22f0      	movs	r2, #240	; 0xf0
 8004662:	801a      	strh	r2, [r3, #0]
			break;
 8004664:	e00a      	b.n	800467c <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <Displ_Orientation+0xa0>)
 8004668:	2228      	movs	r2, #40	; 0x28
 800466a:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <Displ_Orientation+0xa4>)
 800466e:	22f0      	movs	r2, #240	; 0xf0
 8004670:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <Displ_Orientation+0xa8>)
 8004674:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004678:	801a      	strh	r2, [r3, #0]
			break;
 800467a:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 800467c:	2036      	movs	r0, #54	; 0x36
 800467e:	f7ff feef 	bl	8004460 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8004682:	2200      	movs	r2, #0
 8004684:	2101      	movs	r1, #1
 8004686:	4805      	ldr	r0, [pc, #20]	; (800469c <Displ_Orientation+0xa0>)
 8004688:	f7ff fef9 	bl	800447e <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 800468c:	4a06      	ldr	r2, [pc, #24]	; (80046a8 <Displ_Orientation+0xac>)
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	7013      	strb	r3, [r2, #0]
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20007700 	.word	0x20007700
 80046a0:	20006ef8 	.word	0x20006ef8
 80046a4:	20006ef6 	.word	0x20006ef6
 80046a8:	20006ef4 	.word	0x20006ef4

080046ac <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a05      	ldr	r2, [pc, #20]	; (80046d0 <HAL_SPI_ErrorCallback+0x24>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d102      	bne.n	80046c4 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 80046be:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <HAL_SPI_ErrorCallback+0x28>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
	}
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	40003800 	.word	0x40003800
 80046d4:	20000034 	.word	0x20000034

080046d8 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a05      	ldr	r2, [pc, #20]	; (80046fc <HAL_SPI_TxCpltCallback+0x24>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d102      	bne.n	80046f0 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_SPI_TxCpltCallback+0x28>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	40003800 	.word	0x40003800
 8004700:	20000034 	.word	0x20000034

08004704 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004704:	b590      	push	{r4, r7, lr}
 8004706:	b08b      	sub	sp, #44	; 0x2c
 8004708:	af00      	add	r7, sp, #0
 800470a:	4604      	mov	r4, r0
 800470c:	4608      	mov	r0, r1
 800470e:	4611      	mov	r1, r2
 8004710:	461a      	mov	r2, r3
 8004712:	4623      	mov	r3, r4
 8004714:	80fb      	strh	r3, [r7, #6]
 8004716:	4603      	mov	r3, r0
 8004718:	80bb      	strh	r3, [r7, #4]
 800471a:	460b      	mov	r3, r1
 800471c:	807b      	strh	r3, [r7, #2]
 800471e:	4613      	mov	r3, r2
 8004720:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	4a4f      	ldr	r2, [pc, #316]	; (8004864 <Displ_FillArea+0x160>)
 8004726:	f9b2 2000 	ldrsh.w	r2, [r2]
 800472a:	4293      	cmp	r3, r2
 800472c:	f280 8096 	bge.w	800485c <Displ_FillArea+0x158>
 8004730:	88bb      	ldrh	r3, [r7, #4]
 8004732:	4a4d      	ldr	r2, [pc, #308]	; (8004868 <Displ_FillArea+0x164>)
 8004734:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004738:	4293      	cmp	r3, r2
 800473a:	f280 808f 	bge.w	800485c <Displ_FillArea+0x158>
 800473e:	887b      	ldrh	r3, [r7, #2]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 808b 	beq.w	800485c <Displ_FillArea+0x158>
 8004746:	883b      	ldrh	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8087 	beq.w	800485c <Displ_FillArea+0x158>

	x1=x + w - 1;
 800474e:	88fa      	ldrh	r2, [r7, #6]
 8004750:	887b      	ldrh	r3, [r7, #2]
 8004752:	4413      	add	r3, r2
 8004754:	3b01      	subs	r3, #1
 8004756:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8004758:	4b42      	ldr	r3, [pc, #264]	; (8004864 <Displ_FillArea+0x160>)
 800475a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800475e:	461a      	mov	r2, r3
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	4293      	cmp	r3, r2
 8004764:	d903      	bls.n	800476e <Displ_FillArea+0x6a>
		x1=_width;
 8004766:	4b3f      	ldr	r3, [pc, #252]	; (8004864 <Displ_FillArea+0x160>)
 8004768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800476c:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 800476e:	88ba      	ldrh	r2, [r7, #4]
 8004770:	883b      	ldrh	r3, [r7, #0]
 8004772:	4413      	add	r3, r2
 8004774:	3b01      	subs	r3, #1
 8004776:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8004778:	4b3b      	ldr	r3, [pc, #236]	; (8004868 <Displ_FillArea+0x164>)
 800477a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800477e:	461a      	mov	r2, r3
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	4293      	cmp	r3, r2
 8004784:	d903      	bls.n	800478e <Displ_FillArea+0x8a>
		y1=_height;
 8004786:	4b38      	ldr	r3, [pc, #224]	; (8004868 <Displ_FillArea+0x164>)
 8004788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800478c:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 800478e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	b29b      	uxth	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004798:	021b      	lsls	r3, r3, #8
 800479a:	431a      	orrs	r2, r3
 800479c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800479e:	061b      	lsls	r3, r3, #24
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 80047a4:	88bb      	ldrh	r3, [r7, #4]
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	3301      	adds	r3, #1
 80047ac:	88fa      	ldrh	r2, [r7, #6]
 80047ae:	6a39      	ldr	r1, [r7, #32]
 80047b0:	1a8a      	subs	r2, r1, r2
 80047b2:	3201      	adds	r2, #1
 80047b4:	fb02 f303 	mul.w	r3, r2, r3
 80047b8:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 80047ba:	4b2c      	ldr	r3, [pc, #176]	; (800486c <Displ_FillArea+0x168>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c6:	d204      	bcs.n	80047d2 <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	3301      	adds	r3, #1
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e002      	b.n	80047d8 <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 80047d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047d6:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 80047d8:	2300      	movs	r3, #0
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
 80047dc:	e007      	b.n	80047ee <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	1d1a      	adds	r2, r3, #4
 80047e2:	617a      	str	r2, [r7, #20]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	3301      	adds	r3, #1
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
 80047ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d3f3      	bcc.n	80047de <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	88b9      	ldrh	r1, [r7, #4]
 8004800:	88f8      	ldrh	r0, [r7, #6]
 8004802:	f7ff fe93 	bl	800452c <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	0a5b      	lsrs	r3, r3, #9
 800480a:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 800480c:	2300      	movs	r3, #0
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
 8004810:	e00a      	b.n	8004828 <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 8004812:	4b16      	ldr	r3, [pc, #88]	; (800486c <Displ_FillArea+0x168>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2200      	movs	r2, #0
 8004818:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fe2e 	bl	800447e <Displ_WriteData>
	for  (k=0;k<times;k++) {
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	3301      	adds	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
 8004828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	429a      	cmp	r2, r3
 800482e:	d3f0      	bcc.n	8004812 <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8004830:	4b0e      	ldr	r3, [pc, #56]	; (800486c <Displ_FillArea+0x168>)
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	005a      	lsls	r2, r3, #1
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	029b      	lsls	r3, r3, #10
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2200      	movs	r2, #0
 8004840:	4619      	mov	r1, r3
 8004842:	f7ff fe1c 	bl	800447e <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <Displ_FillArea+0x168>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a09      	ldr	r2, [pc, #36]	; (8004870 <Displ_FillArea+0x16c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d101      	bne.n	8004854 <Displ_FillArea+0x150>
 8004850:	4b08      	ldr	r3, [pc, #32]	; (8004874 <Displ_FillArea+0x170>)
 8004852:	e000      	b.n	8004856 <Displ_FillArea+0x152>
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <Displ_FillArea+0x16c>)
 8004856:	4a05      	ldr	r2, [pc, #20]	; (800486c <Displ_FillArea+0x168>)
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	e000      	b.n	800485e <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 800485c:	bf00      	nop

}
 800485e:	372c      	adds	r7, #44	; 0x2c
 8004860:	46bd      	mov	sp, r7
 8004862:	bd90      	pop	{r4, r7, pc}
 8004864:	20006ef6 	.word	0x20006ef6
 8004868:	20006ef8 	.word	0x20006ef8
 800486c:	20000038 	.word	0x20000038
 8004870:	20006efc 	.word	0x20006efc
 8004874:	200072fc 	.word	0x200072fc

08004878 <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af02      	add	r7, sp, #8
 800487e:	4603      	mov	r3, r0
 8004880:	80fb      	strh	r3, [r7, #6]
 8004882:	460b      	mov	r3, r1
 8004884:	80bb      	strh	r3, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	4a0b      	ldr	r2, [pc, #44]	; (80048bc <Displ_Pixel+0x44>)
 800488e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004892:	4293      	cmp	r3, r2
 8004894:	da0e      	bge.n	80048b4 <Displ_Pixel+0x3c>
 8004896:	88bb      	ldrh	r3, [r7, #4]
 8004898:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <Displ_Pixel+0x48>)
 800489a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800489e:	4293      	cmp	r3, r2
 80048a0:	da08      	bge.n	80048b4 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 80048a2:	88b9      	ldrh	r1, [r7, #4]
 80048a4:	88f8      	ldrh	r0, [r7, #6]
 80048a6:	887b      	ldrh	r3, [r7, #2]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	2301      	movs	r3, #1
 80048ac:	2201      	movs	r2, #1
 80048ae:	f7ff ff29 	bl	8004704 <Displ_FillArea>
 80048b2:	e000      	b.n	80048b6 <Displ_Pixel+0x3e>
        return;
 80048b4:	bf00      	nop

}
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20006ef6 	.word	0x20006ef6
 80048c0:	20006ef8 	.word	0x20006ef8

080048c4 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4604      	mov	r4, r0
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4623      	mov	r3, r4
 80048d4:	80fb      	strh	r3, [r7, #6]
 80048d6:	4603      	mov	r3, r0
 80048d8:	80bb      	strh	r3, [r7, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	807b      	strh	r3, [r7, #2]
 80048de:	4613      	mov	r3, r2
 80048e0:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 80048e2:	887b      	ldrh	r3, [r7, #2]
 80048e4:	f1c3 0301 	rsb	r3, r3, #1
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80048ec:	2301      	movs	r3, #1
 80048ee:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80048f0:	887b      	ldrh	r3, [r7, #2]
 80048f2:	461a      	mov	r2, r3
 80048f4:	03d2      	lsls	r2, r2, #15
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8004902:	887b      	ldrh	r3, [r7, #2]
 8004904:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8004906:	88f8      	ldrh	r0, [r7, #6]
 8004908:	88ba      	ldrh	r2, [r7, #4]
 800490a:	887b      	ldrh	r3, [r7, #2]
 800490c:	4413      	add	r3, r2
 800490e:	b29b      	uxth	r3, r3
 8004910:	883a      	ldrh	r2, [r7, #0]
 8004912:	4619      	mov	r1, r3
 8004914:	f7ff ffb0 	bl	8004878 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8004918:	88f8      	ldrh	r0, [r7, #6]
 800491a:	88ba      	ldrh	r2, [r7, #4]
 800491c:	887b      	ldrh	r3, [r7, #2]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	b29b      	uxth	r3, r3
 8004922:	883a      	ldrh	r2, [r7, #0]
 8004924:	4619      	mov	r1, r3
 8004926:	f7ff ffa7 	bl	8004878 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 800492a:	88fa      	ldrh	r2, [r7, #6]
 800492c:	887b      	ldrh	r3, [r7, #2]
 800492e:	4413      	add	r3, r2
 8004930:	b29b      	uxth	r3, r3
 8004932:	88b9      	ldrh	r1, [r7, #4]
 8004934:	883a      	ldrh	r2, [r7, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff ff9e 	bl	8004878 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 800493c:	88fa      	ldrh	r2, [r7, #6]
 800493e:	887b      	ldrh	r3, [r7, #2]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	b29b      	uxth	r3, r3
 8004944:	88b9      	ldrh	r1, [r7, #4]
 8004946:	883a      	ldrh	r2, [r7, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff ff95 	bl	8004878 <Displ_Pixel>

    while (x<y) {
 800494e:	e081      	b.n	8004a54 <Displ_drawCircle+0x190>
        if (f >= 0) {
 8004950:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004954:	2b00      	cmp	r3, #0
 8004956:	db0e      	blt.n	8004976 <Displ_drawCircle+0xb2>
            y--;
 8004958:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29b      	uxth	r3, r3
 8004962:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8004964:	8a7b      	ldrh	r3, [r7, #18]
 8004966:	3302      	adds	r3, #2
 8004968:	b29b      	uxth	r3, r3
 800496a:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800496c:	8afa      	ldrh	r2, [r7, #22]
 800496e:	8a7b      	ldrh	r3, [r7, #18]
 8004970:	4413      	add	r3, r2
 8004972:	b29b      	uxth	r3, r3
 8004974:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8004976:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800497a:	b29b      	uxth	r3, r3
 800497c:	3301      	adds	r3, #1
 800497e:	b29b      	uxth	r3, r3
 8004980:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8004982:	8abb      	ldrh	r3, [r7, #20]
 8004984:	3302      	adds	r3, #2
 8004986:	b29b      	uxth	r3, r3
 8004988:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800498a:	8afa      	ldrh	r2, [r7, #22]
 800498c:	8abb      	ldrh	r3, [r7, #20]
 800498e:	4413      	add	r3, r2
 8004990:	b29b      	uxth	r3, r3
 8004992:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8004994:	88fa      	ldrh	r2, [r7, #6]
 8004996:	8a3b      	ldrh	r3, [r7, #16]
 8004998:	4413      	add	r3, r2
 800499a:	b298      	uxth	r0, r3
 800499c:	88ba      	ldrh	r2, [r7, #4]
 800499e:	89fb      	ldrh	r3, [r7, #14]
 80049a0:	4413      	add	r3, r2
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	883a      	ldrh	r2, [r7, #0]
 80049a6:	4619      	mov	r1, r3
 80049a8:	f7ff ff66 	bl	8004878 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 80049ac:	88fa      	ldrh	r2, [r7, #6]
 80049ae:	8a3b      	ldrh	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	b298      	uxth	r0, r3
 80049b4:	88ba      	ldrh	r2, [r7, #4]
 80049b6:	89fb      	ldrh	r3, [r7, #14]
 80049b8:	4413      	add	r3, r2
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	883a      	ldrh	r2, [r7, #0]
 80049be:	4619      	mov	r1, r3
 80049c0:	f7ff ff5a 	bl	8004878 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	8a3b      	ldrh	r3, [r7, #16]
 80049c8:	4413      	add	r3, r2
 80049ca:	b298      	uxth	r0, r3
 80049cc:	88ba      	ldrh	r2, [r7, #4]
 80049ce:	89fb      	ldrh	r3, [r7, #14]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	883a      	ldrh	r2, [r7, #0]
 80049d6:	4619      	mov	r1, r3
 80049d8:	f7ff ff4e 	bl	8004878 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 80049dc:	88fa      	ldrh	r2, [r7, #6]
 80049de:	8a3b      	ldrh	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	b298      	uxth	r0, r3
 80049e4:	88ba      	ldrh	r2, [r7, #4]
 80049e6:	89fb      	ldrh	r3, [r7, #14]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	883a      	ldrh	r2, [r7, #0]
 80049ee:	4619      	mov	r1, r3
 80049f0:	f7ff ff42 	bl	8004878 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 80049f4:	88fa      	ldrh	r2, [r7, #6]
 80049f6:	89fb      	ldrh	r3, [r7, #14]
 80049f8:	4413      	add	r3, r2
 80049fa:	b298      	uxth	r0, r3
 80049fc:	88ba      	ldrh	r2, [r7, #4]
 80049fe:	8a3b      	ldrh	r3, [r7, #16]
 8004a00:	4413      	add	r3, r2
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	883a      	ldrh	r2, [r7, #0]
 8004a06:	4619      	mov	r1, r3
 8004a08:	f7ff ff36 	bl	8004878 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8004a0c:	88fa      	ldrh	r2, [r7, #6]
 8004a0e:	89fb      	ldrh	r3, [r7, #14]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	b298      	uxth	r0, r3
 8004a14:	88ba      	ldrh	r2, [r7, #4]
 8004a16:	8a3b      	ldrh	r3, [r7, #16]
 8004a18:	4413      	add	r3, r2
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	883a      	ldrh	r2, [r7, #0]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f7ff ff2a 	bl	8004878 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8004a24:	88fa      	ldrh	r2, [r7, #6]
 8004a26:	89fb      	ldrh	r3, [r7, #14]
 8004a28:	4413      	add	r3, r2
 8004a2a:	b298      	uxth	r0, r3
 8004a2c:	88ba      	ldrh	r2, [r7, #4]
 8004a2e:	8a3b      	ldrh	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	883a      	ldrh	r2, [r7, #0]
 8004a36:	4619      	mov	r1, r3
 8004a38:	f7ff ff1e 	bl	8004878 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8004a3c:	88fa      	ldrh	r2, [r7, #6]
 8004a3e:	89fb      	ldrh	r3, [r7, #14]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	b298      	uxth	r0, r3
 8004a44:	88ba      	ldrh	r2, [r7, #4]
 8004a46:	8a3b      	ldrh	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	883a      	ldrh	r2, [r7, #0]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f7ff ff12 	bl	8004878 <Displ_Pixel>
    while (x<y) {
 8004a54:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004a58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	f6ff af77 	blt.w	8004950 <Displ_drawCircle+0x8c>
    }
}
 8004a62:	bf00      	nop
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd90      	pop	{r4, r7, pc}

08004a6c <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	4603      	mov	r3, r0
 8004a74:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <Displ_CLS+0x30>)
 8004a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <Displ_CLS+0x34>)
 8004a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a84:	b299      	uxth	r1, r3
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	2000      	movs	r0, #0
 8004a90:	f7ff fe38 	bl	8004704 <Displ_FillArea>
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20006ef6 	.word	0x20006ef6
 8004aa0:	20006ef8 	.word	0x20006ef8

08004aa4 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4608      	mov	r0, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4623      	mov	r3, r4
 8004ab4:	80fb      	strh	r3, [r7, #6]
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	80bb      	strh	r3, [r7, #4]
 8004aba:	460b      	mov	r3, r1
 8004abc:	807b      	strh	r3, [r7, #2]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8004ac2:	887b      	ldrh	r3, [r7, #2]
 8004ac4:	f1c3 0301 	rsb	r3, r3, #1
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8004acc:	2301      	movs	r3, #1
 8004ace:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8004ad0:	887b      	ldrh	r3, [r7, #2]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	03d2      	lsls	r2, r2, #15
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8004ae2:	887b      	ldrh	r3, [r7, #2]
 8004ae4:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8004ae6:	e095      	b.n	8004c14 <drawCircleHelper+0x170>
        if (f >= 0) {
 8004ae8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	db0e      	blt.n	8004b0e <drawCircleHelper+0x6a>
            y--;
 8004af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8004afc:	8a7b      	ldrh	r3, [r7, #18]
 8004afe:	3302      	adds	r3, #2
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8004b04:	8afa      	ldrh	r2, [r7, #22]
 8004b06:	8a7b      	ldrh	r3, [r7, #18]
 8004b08:	4413      	add	r3, r2
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8004b0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3301      	adds	r3, #1
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8004b1a:	8abb      	ldrh	r3, [r7, #20]
 8004b1c:	3302      	adds	r3, #2
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8004b22:	8afa      	ldrh	r2, [r7, #22]
 8004b24:	8abb      	ldrh	r3, [r7, #20]
 8004b26:	4413      	add	r3, r2
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8004b2c:	787b      	ldrb	r3, [r7, #1]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d017      	beq.n	8004b66 <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 8004b36:	88fa      	ldrh	r2, [r7, #6]
 8004b38:	8a3b      	ldrh	r3, [r7, #16]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	b298      	uxth	r0, r3
 8004b3e:	88ba      	ldrh	r2, [r7, #4]
 8004b40:	89fb      	ldrh	r3, [r7, #14]
 8004b42:	4413      	add	r3, r2
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b48:	4619      	mov	r1, r3
 8004b4a:	f7ff fe95 	bl	8004878 <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	89fb      	ldrh	r3, [r7, #14]
 8004b52:	4413      	add	r3, r2
 8004b54:	b298      	uxth	r0, r3
 8004b56:	88ba      	ldrh	r2, [r7, #4]
 8004b58:	8a3b      	ldrh	r3, [r7, #16]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b60:	4619      	mov	r1, r3
 8004b62:	f7ff fe89 	bl	8004878 <Displ_Pixel>
        }
        if (cornername & 0x2) {
 8004b66:	787b      	ldrb	r3, [r7, #1]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d017      	beq.n	8004ba0 <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	8a3b      	ldrh	r3, [r7, #16]
 8004b74:	4413      	add	r3, r2
 8004b76:	b298      	uxth	r0, r3
 8004b78:	88ba      	ldrh	r2, [r7, #4]
 8004b7a:	89fb      	ldrh	r3, [r7, #14]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b82:	4619      	mov	r1, r3
 8004b84:	f7ff fe78 	bl	8004878 <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 8004b88:	88fa      	ldrh	r2, [r7, #6]
 8004b8a:	89fb      	ldrh	r3, [r7, #14]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	b298      	uxth	r0, r3
 8004b90:	88ba      	ldrh	r2, [r7, #4]
 8004b92:	8a3b      	ldrh	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f7ff fe6c 	bl	8004878 <Displ_Pixel>
        }
        if (cornername & 0x8) {
 8004ba0:	787b      	ldrb	r3, [r7, #1]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d017      	beq.n	8004bda <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 8004baa:	88fa      	ldrh	r2, [r7, #6]
 8004bac:	89fb      	ldrh	r3, [r7, #14]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	b298      	uxth	r0, r3
 8004bb2:	88ba      	ldrh	r2, [r7, #4]
 8004bb4:	8a3b      	ldrh	r3, [r7, #16]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	f7ff fe5b 	bl	8004878 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	8a3b      	ldrh	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	b298      	uxth	r0, r3
 8004bca:	88ba      	ldrh	r2, [r7, #4]
 8004bcc:	89fb      	ldrh	r3, [r7, #14]
 8004bce:	4413      	add	r3, r2
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	f7ff fe4f 	bl	8004878 <Displ_Pixel>
        }
        if (cornername & 0x1) {
 8004bda:	787b      	ldrb	r3, [r7, #1]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d017      	beq.n	8004c14 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8004be4:	88fa      	ldrh	r2, [r7, #6]
 8004be6:	89fb      	ldrh	r3, [r7, #14]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	b298      	uxth	r0, r3
 8004bec:	88ba      	ldrh	r2, [r7, #4]
 8004bee:	8a3b      	ldrh	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f7ff fe3e 	bl	8004878 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	8a3b      	ldrh	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	b298      	uxth	r0, r3
 8004c04:	88ba      	ldrh	r2, [r7, #4]
 8004c06:	89fb      	ldrh	r3, [r7, #14]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004c0e:	4619      	mov	r1, r3
 8004c10:	f7ff fe32 	bl	8004878 <Displ_Pixel>
    while (x<y) {
 8004c14:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004c18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	f6ff af63 	blt.w	8004ae8 <drawCircleHelper+0x44>
        }
    }
}
 8004c22:	bf00      	nop
 8004c24:	bf00      	nop
 8004c26:	371c      	adds	r7, #28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd90      	pop	{r4, r7, pc}

08004c2c <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b089      	sub	sp, #36	; 0x24
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	4604      	mov	r4, r0
 8004c34:	4608      	mov	r0, r1
 8004c36:	4611      	mov	r1, r2
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	80fb      	strh	r3, [r7, #6]
 8004c3e:	4603      	mov	r3, r0
 8004c40:	80bb      	strh	r3, [r7, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	807b      	strh	r3, [r7, #2]
 8004c46:	4613      	mov	r3, r2
 8004c48:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8004c4a:	887b      	ldrh	r3, [r7, #2]
 8004c4c:	f1c3 0301 	rsb	r3, r3, #1
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8004c54:	2301      	movs	r3, #1
 8004c56:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8004c58:	887b      	ldrh	r3, [r7, #2]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	03d2      	lsls	r2, r2, #15
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8004c6a:	887b      	ldrh	r3, [r7, #2]
 8004c6c:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8004c6e:	e0a7      	b.n	8004dc0 <fillCircleHelper+0x194>
    if (f >= 0) {
 8004c70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	db0e      	blt.n	8004c96 <fillCircleHelper+0x6a>
      y--;
 8004c78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8004c84:	8a7b      	ldrh	r3, [r7, #18]
 8004c86:	3302      	adds	r3, #2
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8004c8c:	8afa      	ldrh	r2, [r7, #22]
 8004c8e:	8a7b      	ldrh	r3, [r7, #18]
 8004c90:	4413      	add	r3, r2
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8004c96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8004ca2:	8abb      	ldrh	r3, [r7, #20]
 8004ca4:	3302      	adds	r3, #2
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8004caa:	8afa      	ldrh	r2, [r7, #22]
 8004cac:	8abb      	ldrh	r3, [r7, #20]
 8004cae:	4413      	add	r3, r2
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8004cb4:	787b      	ldrb	r3, [r7, #1]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d03d      	beq.n	8004d3a <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	8a3b      	ldrh	r3, [r7, #16]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	b218      	sxth	r0, r3
 8004cc8:	88ba      	ldrh	r2, [r7, #4]
 8004cca:	89fb      	ldrh	r3, [r7, #14]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	b219      	sxth	r1, r3
 8004cd2:	88fa      	ldrh	r2, [r7, #6]
 8004cd4:	8a3b      	ldrh	r3, [r7, #16]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	b21c      	sxth	r4, r3
 8004cdc:	88ba      	ldrh	r2, [r7, #4]
 8004cde:	89fb      	ldrh	r3, [r7, #14]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ce6:	4413      	add	r3, r2
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3301      	adds	r3, #1
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	b21a      	sxth	r2, r3
 8004cf0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	f000 f8a1 	bl	8004e3e <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 8004cfc:	88fa      	ldrh	r2, [r7, #6]
 8004cfe:	89fb      	ldrh	r3, [r7, #14]
 8004d00:	4413      	add	r3, r2
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	b218      	sxth	r0, r3
 8004d06:	88ba      	ldrh	r2, [r7, #4]
 8004d08:	8a3b      	ldrh	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	b219      	sxth	r1, r3
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	89fb      	ldrh	r3, [r7, #14]
 8004d14:	4413      	add	r3, r2
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	b21c      	sxth	r4, r3
 8004d1a:	88ba      	ldrh	r2, [r7, #4]
 8004d1c:	8a3b      	ldrh	r3, [r7, #16]
 8004d1e:	4413      	add	r3, r2
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d24:	4413      	add	r3, r2
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3301      	adds	r3, #1
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	b21a      	sxth	r2, r3
 8004d2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	4613      	mov	r3, r2
 8004d34:	4622      	mov	r2, r4
 8004d36:	f000 f882 	bl	8004e3e <Displ_Line>
    }
    if (cornername & 0x2) {
 8004d3a:	787b      	ldrb	r3, [r7, #1]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d03d      	beq.n	8004dc0 <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	8a3b      	ldrh	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	b218      	sxth	r0, r3
 8004d4e:	88ba      	ldrh	r2, [r7, #4]
 8004d50:	89fb      	ldrh	r3, [r7, #14]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	b219      	sxth	r1, r3
 8004d58:	88fa      	ldrh	r2, [r7, #6]
 8004d5a:	8a3b      	ldrh	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	b21c      	sxth	r4, r3
 8004d62:	88ba      	ldrh	r2, [r7, #4]
 8004d64:	89fb      	ldrh	r3, [r7, #14]
 8004d66:	4413      	add	r3, r2
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d6c:	4413      	add	r3, r2
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3301      	adds	r3, #1
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	b21a      	sxth	r2, r3
 8004d76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	f000 f85e 	bl	8004e3e <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	89fb      	ldrh	r3, [r7, #14]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	b218      	sxth	r0, r3
 8004d8c:	88ba      	ldrh	r2, [r7, #4]
 8004d8e:	8a3b      	ldrh	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	b219      	sxth	r1, r3
 8004d96:	88fa      	ldrh	r2, [r7, #6]
 8004d98:	89fb      	ldrh	r3, [r7, #14]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	b21c      	sxth	r4, r3
 8004da0:	88ba      	ldrh	r2, [r7, #4]
 8004da2:	8a3b      	ldrh	r3, [r7, #16]
 8004da4:	4413      	add	r3, r2
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004daa:	4413      	add	r3, r2
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3301      	adds	r3, #1
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	b21a      	sxth	r2, r3
 8004db4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	4622      	mov	r2, r4
 8004dbc:	f000 f83f 	bl	8004e3e <Displ_Line>
  while (x<y) {
 8004dc0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004dc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	f6ff af51 	blt.w	8004c70 <fillCircleHelper+0x44>
    }
  }
}
 8004dce:	bf00      	nop
 8004dd0:	bf00      	nop
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd90      	pop	{r4, r7, pc}

08004dd8 <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8004dd8:	b590      	push	{r4, r7, lr}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	4604      	mov	r4, r0
 8004de0:	4608      	mov	r0, r1
 8004de2:	4611      	mov	r1, r2
 8004de4:	461a      	mov	r2, r3
 8004de6:	4623      	mov	r3, r4
 8004de8:	80fb      	strh	r3, [r7, #6]
 8004dea:	4603      	mov	r3, r0
 8004dec:	80bb      	strh	r3, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	807b      	strh	r3, [r7, #2]
 8004df2:	4613      	mov	r3, r2
 8004df4:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 8004df6:	88ba      	ldrh	r2, [r7, #4]
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	b219      	sxth	r1, r3
 8004e00:	88ba      	ldrh	r2, [r7, #4]
 8004e02:	887b      	ldrh	r3, [r7, #2]
 8004e04:	4413      	add	r3, r2
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	b21c      	sxth	r4, r3
 8004e0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e0e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004e12:	883b      	ldrh	r3, [r7, #0]
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	4623      	mov	r3, r4
 8004e18:	f000 f811 	bl	8004e3e <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8004e1c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004e20:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004e24:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004e28:	883b      	ldrh	r3, [r7, #0]
 8004e2a:	9301      	str	r3, [sp, #4]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2303      	movs	r3, #3
 8004e32:	f7ff fefb 	bl	8004c2c <fillCircleHelper>
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd90      	pop	{r4, r7, pc}

08004e3e <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8004e3e:	b590      	push	{r4, r7, lr}
 8004e40:	b08b      	sub	sp, #44	; 0x2c
 8004e42:	af02      	add	r7, sp, #8
 8004e44:	4604      	mov	r4, r0
 8004e46:	4608      	mov	r0, r1
 8004e48:	4611      	mov	r1, r2
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4623      	mov	r3, r4
 8004e4e:	80fb      	strh	r3, [r7, #6]
 8004e50:	4603      	mov	r3, r0
 8004e52:	80bb      	strh	r3, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	807b      	strh	r3, [r7, #2]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8004e5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d123      	bne.n	8004eb0 <Displ_Line+0x72>
    	if (y1>y0){
 8004e68:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004e6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	dd0e      	ble.n	8004e92 <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8004e74:	88f8      	ldrh	r0, [r7, #6]
 8004e76:	88b9      	ldrh	r1, [r7, #4]
 8004e78:	883a      	ldrh	r2, [r7, #0]
 8004e7a:	88bb      	ldrh	r3, [r7, #4]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3301      	adds	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f7ff fc3a 	bl	8004704 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8004e90:	e103      	b.n	800509a <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8004e92:	88f8      	ldrh	r0, [r7, #6]
 8004e94:	8839      	ldrh	r1, [r7, #0]
 8004e96:	88ba      	ldrh	r2, [r7, #4]
 8004e98:	883b      	ldrh	r3, [r7, #0]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f7ff fc2b 	bl	8004704 <Displ_FillArea>
    	return;
 8004eae:	e0f4      	b.n	800509a <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8004eb0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004eb4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d121      	bne.n	8004f00 <Displ_Line+0xc2>
    	if (x1>x0)
 8004ebc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	dd0d      	ble.n	8004ee4 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8004ec8:	88f8      	ldrh	r0, [r7, #6]
 8004eca:	88b9      	ldrh	r1, [r7, #4]
 8004ecc:	887a      	ldrh	r2, [r7, #2]
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	2301      	movs	r3, #1
 8004ede:	f7ff fc11 	bl	8004704 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8004ee2:	e0da      	b.n	800509a <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8004ee4:	8878      	ldrh	r0, [r7, #2]
 8004ee6:	8839      	ldrh	r1, [r7, #0]
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	887b      	ldrh	r3, [r7, #2]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f7ff fc03 	bl	8004704 <Displ_FillArea>
    	return;
 8004efe:	e0cc      	b.n	800509a <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8004f00:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004f04:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	dd05      	ble.n	8004f18 <Displ_Line+0xda>
 8004f0c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004f10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004f14:	1ad2      	subs	r2, r2, r3
 8004f16:	e004      	b.n	8004f22 <Displ_Line+0xe4>
 8004f18:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004f1c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004f20:	1ad2      	subs	r2, r2, r3
 8004f22:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f2a:	4299      	cmp	r1, r3
 8004f2c:	dd05      	ble.n	8004f3a <Displ_Line+0xfc>
 8004f2e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f36:	1acb      	subs	r3, r1, r3
 8004f38:	e004      	b.n	8004f44 <Displ_Line+0x106>
 8004f3a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004f3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f42:	1acb      	subs	r3, r1, r3
 8004f44:	429a      	cmp	r2, r3
 8004f46:	bfcc      	ite	gt
 8004f48:	2301      	movgt	r3, #1
 8004f4a:	2300      	movle	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8004f50:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00b      	beq.n	8004f70 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	827b      	strh	r3, [r7, #18]
 8004f5c:	88bb      	ldrh	r3, [r7, #4]
 8004f5e:	80fb      	strh	r3, [r7, #6]
 8004f60:	8a7b      	ldrh	r3, [r7, #18]
 8004f62:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8004f64:	887b      	ldrh	r3, [r7, #2]
 8004f66:	823b      	strh	r3, [r7, #16]
 8004f68:	883b      	ldrh	r3, [r7, #0]
 8004f6a:	807b      	strh	r3, [r7, #2]
 8004f6c:	8a3b      	ldrh	r3, [r7, #16]
 8004f6e:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8004f70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	dd0b      	ble.n	8004f94 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8004f7c:	88fb      	ldrh	r3, [r7, #6]
 8004f7e:	81fb      	strh	r3, [r7, #14]
 8004f80:	887b      	ldrh	r3, [r7, #2]
 8004f82:	80fb      	strh	r3, [r7, #6]
 8004f84:	89fb      	ldrh	r3, [r7, #14]
 8004f86:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8004f88:	88bb      	ldrh	r3, [r7, #4]
 8004f8a:	81bb      	strh	r3, [r7, #12]
 8004f8c:	883b      	ldrh	r3, [r7, #0]
 8004f8e:	80bb      	strh	r3, [r7, #4]
 8004f90:	89bb      	ldrh	r3, [r7, #12]
 8004f92:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8004f94:	887a      	ldrh	r2, [r7, #2]
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8004f9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004fa2:	105b      	asrs	r3, r3, #1
 8004fa4:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8004fa6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004faa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	da07      	bge.n	8004fc2 <Displ_Line+0x184>
        dy = y1-y0;
 8004fb2:	883a      	ldrh	r2, [r7, #0]
 8004fb4:	88bb      	ldrh	r3, [r7, #4]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	837b      	strh	r3, [r7, #26]
 8004fc0:	e007      	b.n	8004fd2 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8004fc2:	88ba      	ldrh	r2, [r7, #4]
 8004fc4:	883b      	ldrh	r3, [r7, #0]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8004fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fd0:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	83bb      	strh	r3, [r7, #28]
 8004fda:	e03a      	b.n	8005052 <Displ_Line+0x214>
    	l++;
 8004fdc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8004fe8:	8b3a      	ldrh	r2, [r7, #24]
 8004fea:	8afb      	ldrh	r3, [r7, #22]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8004ff2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	da25      	bge.n	8005046 <Displ_Line+0x208>
        	if (steep) {
 8004ffa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 8005002:	88b8      	ldrh	r0, [r7, #4]
 8005004:	88f9      	ldrh	r1, [r7, #6]
 8005006:	8bfa      	ldrh	r2, [r7, #30]
 8005008:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	2201      	movs	r2, #1
 8005010:	f7ff fb78 	bl	8004704 <Displ_FillArea>
 8005014:	e007      	b.n	8005026 <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 8005016:	88f8      	ldrh	r0, [r7, #6]
 8005018:	88b9      	ldrh	r1, [r7, #4]
 800501a:	8bfa      	ldrh	r2, [r7, #30]
 800501c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	2301      	movs	r3, #1
 8005022:	f7ff fb6f 	bl	8004704 <Displ_FillArea>
            }
            y0 += ystep;
 8005026:	88ba      	ldrh	r2, [r7, #4]
 8005028:	8b7b      	ldrh	r3, [r7, #26]
 800502a:	4413      	add	r3, r2
 800502c:	b29b      	uxth	r3, r3
 800502e:	80bb      	strh	r3, [r7, #4]
            l=0;
 8005030:	2300      	movs	r3, #0
 8005032:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8005034:	8bbb      	ldrh	r3, [r7, #28]
 8005036:	3301      	adds	r3, #1
 8005038:	b29b      	uxth	r3, r3
 800503a:	80fb      	strh	r3, [r7, #6]
            err += dx;
 800503c:	8b3a      	ldrh	r2, [r7, #24]
 800503e:	897b      	ldrh	r3, [r7, #10]
 8005040:	4413      	add	r3, r2
 8005042:	b29b      	uxth	r3, r3
 8005044:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8005046:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800504a:	b29b      	uxth	r3, r3
 800504c:	3301      	adds	r3, #1
 800504e:	b29b      	uxth	r3, r3
 8005050:	83bb      	strh	r3, [r7, #28]
 8005052:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005056:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800505a:	429a      	cmp	r2, r3
 800505c:	ddbe      	ble.n	8004fdc <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 800505e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d019      	beq.n	800509a <Displ_Line+0x25c>
    	if (steep) {
 8005066:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 800506e:	88b8      	ldrh	r0, [r7, #4]
 8005070:	88f9      	ldrh	r1, [r7, #6]
 8005072:	8bfb      	ldrh	r3, [r7, #30]
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	2201      	movs	r2, #1
 8005080:	f7ff fb40 	bl	8004704 <Displ_FillArea>
 8005084:	e009      	b.n	800509a <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 8005086:	88f8      	ldrh	r0, [r7, #6]
 8005088:	88b9      	ldrh	r1, [r7, #4]
 800508a:	8bfb      	ldrh	r3, [r7, #30]
 800508c:	3b01      	subs	r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	2301      	movs	r3, #1
 8005096:	f7ff fb35 	bl	8004704 <Displ_FillArea>
    	}
    }
}
 800509a:	3724      	adds	r7, #36	; 0x24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd90      	pop	{r4, r7, pc}

080050a0 <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 80050a0:	b590      	push	{r4, r7, lr}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	4604      	mov	r4, r0
 80050a8:	4608      	mov	r0, r1
 80050aa:	4611      	mov	r1, r2
 80050ac:	461a      	mov	r2, r3
 80050ae:	4623      	mov	r3, r4
 80050b0:	80fb      	strh	r3, [r7, #6]
 80050b2:	4603      	mov	r3, r0
 80050b4:	80bb      	strh	r3, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	807b      	strh	r3, [r7, #2]
 80050ba:	4613      	mov	r3, r2
 80050bc:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 80050be:	88f8      	ldrh	r0, [r7, #6]
 80050c0:	88b9      	ldrh	r1, [r7, #4]
 80050c2:	887a      	ldrh	r2, [r7, #2]
 80050c4:	8b3c      	ldrh	r4, [r7, #24]
 80050c6:	8bbb      	ldrh	r3, [r7, #28]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	4623      	mov	r3, r4
 80050cc:	f7ff fb1a 	bl	8004704 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 80050d0:	88f8      	ldrh	r0, [r7, #6]
 80050d2:	88ba      	ldrh	r2, [r7, #4]
 80050d4:	883b      	ldrh	r3, [r7, #0]
 80050d6:	4413      	add	r3, r2
 80050d8:	b29a      	uxth	r2, r3
 80050da:	8b3b      	ldrh	r3, [r7, #24]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	b299      	uxth	r1, r3
 80050e0:	887a      	ldrh	r2, [r7, #2]
 80050e2:	8b3c      	ldrh	r4, [r7, #24]
 80050e4:	8bbb      	ldrh	r3, [r7, #28]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	4623      	mov	r3, r4
 80050ea:	f7ff fb0b 	bl	8004704 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 80050ee:	88f8      	ldrh	r0, [r7, #6]
 80050f0:	88b9      	ldrh	r1, [r7, #4]
 80050f2:	8b3a      	ldrh	r2, [r7, #24]
 80050f4:	883c      	ldrh	r4, [r7, #0]
 80050f6:	8bbb      	ldrh	r3, [r7, #28]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	4623      	mov	r3, r4
 80050fc:	f7ff fb02 	bl	8004704 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	887b      	ldrh	r3, [r7, #2]
 8005104:	4413      	add	r3, r2
 8005106:	b29a      	uxth	r2, r3
 8005108:	8b3b      	ldrh	r3, [r7, #24]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	b298      	uxth	r0, r3
 800510e:	88b9      	ldrh	r1, [r7, #4]
 8005110:	8b3a      	ldrh	r2, [r7, #24]
 8005112:	883c      	ldrh	r4, [r7, #0]
 8005114:	8bbb      	ldrh	r3, [r7, #28]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	4623      	mov	r3, r4
 800511a:	f7ff faf3 	bl	8004704 <Displ_FillArea>
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	bd90      	pop	{r4, r7, pc}

08005126 <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8005126:	b590      	push	{r4, r7, lr}
 8005128:	b085      	sub	sp, #20
 800512a:	af02      	add	r7, sp, #8
 800512c:	4604      	mov	r4, r0
 800512e:	4608      	mov	r0, r1
 8005130:	4611      	mov	r1, r2
 8005132:	461a      	mov	r2, r3
 8005134:	4623      	mov	r3, r4
 8005136:	80fb      	strh	r3, [r7, #6]
 8005138:	4603      	mov	r3, r0
 800513a:	80bb      	strh	r3, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	807b      	strh	r3, [r7, #2]
 8005140:	4613      	mov	r3, r2
 8005142:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 8005144:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005148:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800514c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005150:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005154:	8c3b      	ldrh	r3, [r7, #32]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	4623      	mov	r3, r4
 800515a:	f7ff fe70 	bl	8004e3e <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 800515e:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8005162:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005166:	f9b7 1000 	ldrsh.w	r1, [r7]
 800516a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800516e:	8c3b      	ldrh	r3, [r7, #32]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	4623      	mov	r3, r4
 8005174:	f7ff fe63 	bl	8004e3e <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 8005178:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800517c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005180:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8005184:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005188:	8c3b      	ldrh	r3, [r7, #32]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	4623      	mov	r3, r4
 800518e:	f7ff fe56 	bl	8004e3e <Displ_Line>
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	bd90      	pop	{r4, r7, pc}

0800519a <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800519a:	b590      	push	{r4, r7, lr}
 800519c:	b091      	sub	sp, #68	; 0x44
 800519e:	af02      	add	r7, sp, #8
 80051a0:	4604      	mov	r4, r0
 80051a2:	4608      	mov	r0, r1
 80051a4:	4611      	mov	r1, r2
 80051a6:	461a      	mov	r2, r3
 80051a8:	4623      	mov	r3, r4
 80051aa:	80fb      	strh	r3, [r7, #6]
 80051ac:	4603      	mov	r3, r0
 80051ae:	80bb      	strh	r3, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	807b      	strh	r3, [r7, #2]
 80051b4:	4613      	mov	r3, r2
 80051b6:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80051b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80051bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	dd0b      	ble.n	80051dc <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80051c4:	88bb      	ldrh	r3, [r7, #4]
 80051c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80051c8:	883b      	ldrh	r3, [r7, #0]
 80051ca:	80bb      	strh	r3, [r7, #4]
 80051cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051ce:	803b      	strh	r3, [r7, #0]
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80051d4:	887b      	ldrh	r3, [r7, #2]
 80051d6:	80fb      	strh	r3, [r7, #6]
 80051d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051da:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 80051dc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80051e0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80051e4:	429a      	cmp	r2, r3
 80051e6:	dd0f      	ble.n	8005208 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 80051e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80051ec:	847b      	strh	r3, [r7, #34]	; 0x22
 80051ee:	883b      	ldrh	r3, [r7, #0]
 80051f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80051f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051f6:	803b      	strh	r3, [r7, #0]
 80051f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80051fc:	843b      	strh	r3, [r7, #32]
 80051fe:	887b      	ldrh	r3, [r7, #2]
 8005200:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005204:	8c3b      	ldrh	r3, [r7, #32]
 8005206:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8005208:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800520c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005210:	429a      	cmp	r2, r3
 8005212:	dd0b      	ble.n	800522c <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005214:	88bb      	ldrh	r3, [r7, #4]
 8005216:	83fb      	strh	r3, [r7, #30]
 8005218:	883b      	ldrh	r3, [r7, #0]
 800521a:	80bb      	strh	r3, [r7, #4]
 800521c:	8bfb      	ldrh	r3, [r7, #30]
 800521e:	803b      	strh	r3, [r7, #0]
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	83bb      	strh	r3, [r7, #28]
 8005224:	887b      	ldrh	r3, [r7, #2]
 8005226:	80fb      	strh	r3, [r7, #6]
 8005228:	8bbb      	ldrh	r3, [r7, #28]
 800522a:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 800522c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005230:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005234:	429a      	cmp	r2, r3
 8005236:	d136      	bne.n	80052a6 <Displ_fillTriangle+0x10c>
        a = b = x0;
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800523c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800523e:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8005240:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005244:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005248:	429a      	cmp	r2, r3
 800524a:	da02      	bge.n	8005252 <Displ_fillTriangle+0xb8>
 800524c:	887b      	ldrh	r3, [r7, #2]
 800524e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005250:	e007      	b.n	8005262 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8005252:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005256:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800525a:	429a      	cmp	r2, r3
 800525c:	dd01      	ble.n	8005262 <Displ_fillTriangle+0xc8>
 800525e:	887b      	ldrh	r3, [r7, #2]
 8005260:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8005262:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005266:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800526a:	429a      	cmp	r2, r3
 800526c:	da03      	bge.n	8005276 <Displ_fillTriangle+0xdc>
 800526e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005272:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005274:	e008      	b.n	8005288 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8005276:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800527a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800527e:	429a      	cmp	r2, r3
 8005280:	dd02      	ble.n	8005288 <Displ_fillTriangle+0xee>
 8005282:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005286:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8005288:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800528c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005290:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005294:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005298:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	4623      	mov	r3, r4
 80052a0:	f7ff fdcd 	bl	8004e3e <Displ_Line>
        return;
 80052a4:	e0d2      	b.n	800544c <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 80052a6:	887a      	ldrh	r2, [r7, #2]
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 80052b0:	883a      	ldrh	r2, [r7, #0]
 80052b2:	88bb      	ldrh	r3, [r7, #4]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 80052ba:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 80052c6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80052ca:	88bb      	ldrh	r3, [r7, #4]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 80052d2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80052d6:	887b      	ldrh	r3, [r7, #2]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	b29b      	uxth	r3, r3
 80052dc:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 80052de:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80052e2:	883b      	ldrh	r3, [r7, #0]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 80052ea:	2300      	movs	r3, #0
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80052f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80052f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d102      	bne.n	8005304 <Displ_fillTriangle+0x16a>
 80052fe:	883b      	ldrh	r3, [r7, #0]
 8005300:	863b      	strh	r3, [r7, #48]	; 0x30
 8005302:	e003      	b.n	800530c <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8005304:	883b      	ldrh	r3, [r7, #0]
 8005306:	3b01      	subs	r3, #1
 8005308:	b29b      	uxth	r3, r3
 800530a:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 800530c:	88bb      	ldrh	r3, [r7, #4]
 800530e:	867b      	strh	r3, [r7, #50]	; 0x32
 8005310:	e03d      	b.n	800538e <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8005312:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005318:	fb92 f3f3 	sdiv	r3, r2, r3
 800531c:	b29a      	uxth	r2, r3
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	4413      	add	r3, r2
 8005322:	b29b      	uxth	r3, r3
 8005324:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005326:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800532a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800532c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005330:	b29a      	uxth	r2, r3
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	4413      	add	r3, r2
 8005336:	b29b      	uxth	r3, r3
 8005338:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 800533a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800533e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005340:	4413      	add	r3, r2
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005344:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800534a:	4413      	add	r3, r2
 800534c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800534e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005352:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005356:	429a      	cmp	r2, r3
 8005358:	dd05      	ble.n	8005366 <Displ_fillTriangle+0x1cc>
 800535a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800535c:	81bb      	strh	r3, [r7, #12]
 800535e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005360:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005362:	89bb      	ldrh	r3, [r7, #12]
 8005364:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005366:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 800536a:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800536e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005372:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005376:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	4623      	mov	r3, r4
 800537e:	f7ff fd5e 	bl	8004e3e <Displ_Line>
    for(y=y0; y<=last; y++) {
 8005382:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005386:	b29b      	uxth	r3, r3
 8005388:	3301      	adds	r3, #1
 800538a:	b29b      	uxth	r3, r3
 800538c:	867b      	strh	r3, [r7, #50]	; 0x32
 800538e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005392:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005396:	429a      	cmp	r2, r3
 8005398:	ddbb      	ble.n	8005312 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 800539a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800539e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80053a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80053a6:	1a8a      	subs	r2, r1, r2
 80053a8:	fb02 f303 	mul.w	r3, r2, r3
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 80053ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80053b2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80053b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80053ba:	1a8a      	subs	r2, r1, r2
 80053bc:	fb02 f303 	mul.w	r3, r2, r3
 80053c0:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 80053c2:	e03d      	b.n	8005440 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 80053c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80053c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	887b      	ldrh	r3, [r7, #2]
 80053d2:	4413      	add	r3, r2
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80053d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80053dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053de:	fb92 f3f3 	sdiv	r3, r2, r3
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	88fb      	ldrh	r3, [r7, #6]
 80053e6:	4413      	add	r3, r2
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 80053ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80053f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f2:	4413      	add	r3, r2
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80053f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80053fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053fc:	4413      	add	r3, r2
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005400:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005404:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005408:	429a      	cmp	r2, r3
 800540a:	dd05      	ble.n	8005418 <Displ_fillTriangle+0x27e>
 800540c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800540e:	81fb      	strh	r3, [r7, #14]
 8005410:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005412:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005414:	89fb      	ldrh	r3, [r7, #14]
 8005416:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005418:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 800541c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005420:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005424:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005428:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	4623      	mov	r3, r4
 8005430:	f7ff fd05 	bl	8004e3e <Displ_Line>
    for(; y<=y2; y++) {
 8005434:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005438:	b29b      	uxth	r3, r3
 800543a:	3301      	adds	r3, #1
 800543c:	b29b      	uxth	r3, r3
 800543e:	867b      	strh	r3, [r7, #50]	; 0x32
 8005440:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005444:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005448:	429a      	cmp	r2, r3
 800544a:	ddbb      	ble.n	80053c4 <Displ_fillTriangle+0x22a>
    }
}
 800544c:	373c      	adds	r7, #60	; 0x3c
 800544e:	46bd      	mov	sp, r7
 8005450:	bd90      	pop	{r4, r7, pc}
	...

08005454 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005454:	b082      	sub	sp, #8
 8005456:	b590      	push	{r4, r7, lr}
 8005458:	b08d      	sub	sp, #52	; 0x34
 800545a:	af00      	add	r7, sp, #0
 800545c:	647b      	str	r3, [r7, #68]	; 0x44
 800545e:	4603      	mov	r3, r0
 8005460:	80fb      	strh	r3, [r7, #6]
 8005462:	460b      	mov	r3, r1
 8005464:	80bb      	strh	r3, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 800546a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800546e:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 8005470:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005474:	2b02      	cmp	r3, #2
 8005476:	d102      	bne.n	800547e <Displ_WChar+0x2a>
		wsize<<= 1;
 8005478:	7efb      	ldrb	r3, [r7, #27]
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 800547e:	2300      	movs	r3, #0
 8005480:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 8005482:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005486:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800548a:	fb02 f303 	mul.w	r3, r2, r3
 800548e:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8005490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	3b20      	subs	r3, #32
 8005496:	4619      	mov	r1, r3
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	fb01 f303 	mul.w	r3, r1, r3
 800549e:	4413      	add	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 80054a2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d005      	beq.n	80054b6 <Displ_WChar+0x62>
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d107      	bne.n	80054be <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 80054ae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80054b2:	61fb      	str	r3, [r7, #28]
			break;
 80054b4:	e005      	b.n	80054c2 <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 80054b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ba:	61fb      	str	r3, [r7, #28]
			break;
 80054bc:	e001      	b.n	80054c2 <Displ_WChar+0x6e>
		default:
			mask=0x80;
 80054be:	2380      	movs	r3, #128	; 0x80
 80054c0:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 80054c2:	4b60      	ldr	r3, [pc, #384]	; (8005644 <Displ_WChar+0x1f0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 80054c8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	b21a      	sxth	r2, r3
 80054d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80054d4:	0a1b      	lsrs	r3, r3, #8
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	b21b      	sxth	r3, r3
 80054da:	4313      	orrs	r3, r2
 80054dc:	b21b      	sxth	r3, r3
 80054de:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 80054e0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	b21a      	sxth	r2, r3
 80054e8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80054ec:	0a1b      	lsrs	r3, r3, #8
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	b21b      	sxth	r3, r3
 80054f2:	4313      	orrs	r3, r2
 80054f4:	b21b      	sxth	r3, r3
 80054f6:	813b      	strh	r3, [r7, #8]

	for(i = 0; i < (bytes); i+=font.Size){
 80054f8:	2300      	movs	r3, #0
 80054fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054fc:	e06f      	b.n	80055de <Displ_WChar+0x18a>
		b=0;
 80054fe:	2300      	movs	r3, #0
 8005500:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 8005502:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005506:	2b02      	cmp	r3, #2
 8005508:	d015      	beq.n	8005536 <Displ_WChar+0xe2>
 800550a:	2b03      	cmp	r3, #3
 800550c:	d120      	bne.n	8005550 <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	4413      	add	r3, r2
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	041a      	lsls	r2, r3, #16
 8005518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551a:	3301      	adds	r3, #1
 800551c:	6939      	ldr	r1, [r7, #16]
 800551e:	440b      	add	r3, r1
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	4313      	orrs	r3, r2
 8005526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005528:	3202      	adds	r2, #2
 800552a:	6939      	ldr	r1, [r7, #16]
 800552c:	440a      	add	r2, r1
 800552e:	7812      	ldrb	r2, [r2, #0]
 8005530:	4313      	orrs	r3, r2
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8005534:	e011      	b.n	800555a <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	4413      	add	r3, r2
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	021b      	lsls	r3, r3, #8
 8005540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005542:	3201      	adds	r2, #1
 8005544:	6939      	ldr	r1, [r7, #16]
 8005546:	440a      	add	r2, r1
 8005548:	7812      	ldrb	r2, [r2, #0]
 800554a:	4313      	orrs	r3, r2
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800554e:	e004      	b.n	800555a <Displ_WChar+0x106>
			default:
				b=pos[i];
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	4413      	add	r3, r2
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 800555a:	2300      	movs	r3, #0
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
 800555e:	e032      	b.n	80055c6 <Displ_WChar+0x172>
			if((b << j) & mask)  {
 8005560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	409a      	lsls	r2, r3
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4013      	ands	r3, r2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d014      	beq.n	8005598 <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	623a      	str	r2, [r7, #32]
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	897a      	ldrh	r2, [r7, #10]
 800557c:	801a      	strh	r2, [r3, #0]
				if (size==2){
 800557e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005582:	2b02      	cmp	r3, #2
 8005584:	d11c      	bne.n	80055c0 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	623a      	str	r2, [r7, #32]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	897a      	ldrh	r2, [r7, #10]
 8005594:	801a      	strh	r2, [r3, #0]
 8005596:	e013      	b.n	80055c0 <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	623a      	str	r2, [r7, #32]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	893a      	ldrh	r2, [r7, #8]
 80055a6:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 80055a8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d107      	bne.n	80055c0 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	623a      	str	r2, [r7, #32]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	893a      	ldrh	r2, [r7, #8]
 80055be:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	3301      	adds	r3, #1
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
 80055c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055ca:	461a      	mov	r2, r3
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d3c6      	bcc.n	8005560 <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 80055d2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80055d6:	461a      	mov	r2, r3
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	4413      	add	r3, r2
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d38b      	bcc.n	80054fe <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 80055ec:	7efb      	ldrb	r3, [r7, #27]
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	4413      	add	r3, r2
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29c      	uxth	r4, r3
 80055fa:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80055fe:	88bb      	ldrh	r3, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29b      	uxth	r3, r3
 8005608:	88b9      	ldrh	r1, [r7, #4]
 800560a:	88f8      	ldrh	r0, [r7, #6]
 800560c:	4622      	mov	r2, r4
 800560e:	f7fe ff8d 	bl	800452c <Displ_SetAddressWindow>
	Displ_WriteData(dispBuffer,bufSize,0);
 8005612:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <Displ_WChar+0x1f0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2200      	movs	r2, #0
 8005618:	6a39      	ldr	r1, [r7, #32]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe ff2f 	bl	800447e <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8005620:	4b08      	ldr	r3, [pc, #32]	; (8005644 <Displ_WChar+0x1f0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a08      	ldr	r2, [pc, #32]	; (8005648 <Displ_WChar+0x1f4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d101      	bne.n	800562e <Displ_WChar+0x1da>
 800562a:	4b08      	ldr	r3, [pc, #32]	; (800564c <Displ_WChar+0x1f8>)
 800562c:	e000      	b.n	8005630 <Displ_WChar+0x1dc>
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <Displ_WChar+0x1f4>)
 8005630:	4a04      	ldr	r2, [pc, #16]	; (8005644 <Displ_WChar+0x1f0>)
 8005632:	6013      	str	r3, [r2, #0]

}
 8005634:	bf00      	nop
 8005636:	3734      	adds	r7, #52	; 0x34
 8005638:	46bd      	mov	sp, r7
 800563a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800563e:	b002      	add	sp, #8
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20000038 	.word	0x20000038
 8005648:	20006efc 	.word	0x20006efc
 800564c:	200072fc 	.word	0x200072fc

08005650 <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8005650:	b590      	push	{r4, r7, lr}
 8005652:	b087      	sub	sp, #28
 8005654:	af02      	add	r7, sp, #8
 8005656:	4604      	mov	r4, r0
 8005658:	4608      	mov	r0, r1
 800565a:	4611      	mov	r1, r2
 800565c:	461a      	mov	r2, r3
 800565e:	4623      	mov	r3, r4
 8005660:	80fb      	strh	r3, [r7, #6]
 8005662:	4603      	mov	r3, r0
 8005664:	80bb      	strh	r3, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	807b      	strh	r3, [r7, #2]
 800566a:	4613      	mov	r3, r2
 800566c:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800566e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005672:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005676:	4293      	cmp	r3, r2
 8005678:	bfa8      	it	ge
 800567a:	4613      	movge	r3, r2
 800567c:	b21b      	sxth	r3, r3
 800567e:	0fda      	lsrs	r2, r3, #31
 8005680:	4413      	add	r3, r2
 8005682:	105b      	asrs	r3, r3, #1
 8005684:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8005686:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800568a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800568e:	429a      	cmp	r2, r3
 8005690:	dd01      	ble.n	8005696 <Displ_drawRoundRect+0x46>
 8005692:	89fb      	ldrh	r3, [r7, #14]
 8005694:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	8c3b      	ldrh	r3, [r7, #32]
 800569a:	4413      	add	r3, r2
 800569c:	b29b      	uxth	r3, r3
 800569e:	b218      	sxth	r0, r3
 80056a0:	88fa      	ldrh	r2, [r7, #6]
 80056a2:	887b      	ldrh	r3, [r7, #2]
 80056a4:	4413      	add	r3, r2
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	8c3b      	ldrh	r3, [r7, #32]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	b21a      	sxth	r2, r3
 80056b4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80056b8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80056bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	4623      	mov	r3, r4
 80056c2:	f7ff fbbc 	bl	8004e3e <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	8c3b      	ldrh	r3, [r7, #32]
 80056ca:	4413      	add	r3, r2
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	b218      	sxth	r0, r3
 80056d0:	88ba      	ldrh	r2, [r7, #4]
 80056d2:	883b      	ldrh	r3, [r7, #0]
 80056d4:	4413      	add	r3, r2
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29b      	uxth	r3, r3
 80056dc:	b219      	sxth	r1, r3
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	887b      	ldrh	r3, [r7, #2]
 80056e2:	4413      	add	r3, r2
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	8c3b      	ldrh	r3, [r7, #32]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	b21c      	sxth	r4, r3
 80056f2:	88ba      	ldrh	r2, [r7, #4]
 80056f4:	883b      	ldrh	r3, [r7, #0]
 80056f6:	4413      	add	r3, r2
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	b21a      	sxth	r2, r3
 8005700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	4622      	mov	r2, r4
 8005708:	f7ff fb99 	bl	8004e3e <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 800570c:	88ba      	ldrh	r2, [r7, #4]
 800570e:	8c3b      	ldrh	r3, [r7, #32]
 8005710:	4413      	add	r3, r2
 8005712:	b29b      	uxth	r3, r3
 8005714:	b219      	sxth	r1, r3
 8005716:	88ba      	ldrh	r2, [r7, #4]
 8005718:	883b      	ldrh	r3, [r7, #0]
 800571a:	4413      	add	r3, r2
 800571c:	b29a      	uxth	r2, r3
 800571e:	8c3b      	ldrh	r3, [r7, #32]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29b      	uxth	r3, r3
 8005728:	b21c      	sxth	r4, r3
 800572a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800572e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	4623      	mov	r3, r4
 8005738:	f7ff fb81 	bl	8004e3e <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 800573c:	88fa      	ldrh	r2, [r7, #6]
 800573e:	887b      	ldrh	r3, [r7, #2]
 8005740:	4413      	add	r3, r2
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29b      	uxth	r3, r3
 8005748:	b218      	sxth	r0, r3
 800574a:	88ba      	ldrh	r2, [r7, #4]
 800574c:	8c3b      	ldrh	r3, [r7, #32]
 800574e:	4413      	add	r3, r2
 8005750:	b29b      	uxth	r3, r3
 8005752:	b219      	sxth	r1, r3
 8005754:	88fa      	ldrh	r2, [r7, #6]
 8005756:	887b      	ldrh	r3, [r7, #2]
 8005758:	4413      	add	r3, r2
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29b      	uxth	r3, r3
 8005760:	b21c      	sxth	r4, r3
 8005762:	88ba      	ldrh	r2, [r7, #4]
 8005764:	883b      	ldrh	r3, [r7, #0]
 8005766:	4413      	add	r3, r2
 8005768:	b29a      	uxth	r2, r3
 800576a:	8c3b      	ldrh	r3, [r7, #32]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29b      	uxth	r3, r3
 8005774:	b21a      	sxth	r2, r3
 8005776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	4613      	mov	r3, r2
 800577c:	4622      	mov	r2, r4
 800577e:	f7ff fb5e 	bl	8004e3e <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8005782:	88fa      	ldrh	r2, [r7, #6]
 8005784:	8c3b      	ldrh	r3, [r7, #32]
 8005786:	4413      	add	r3, r2
 8005788:	b29b      	uxth	r3, r3
 800578a:	b218      	sxth	r0, r3
 800578c:	88ba      	ldrh	r2, [r7, #4]
 800578e:	8c3b      	ldrh	r3, [r7, #32]
 8005790:	4413      	add	r3, r2
 8005792:	b29b      	uxth	r3, r3
 8005794:	b219      	sxth	r1, r3
 8005796:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800579a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	2301      	movs	r3, #1
 80057a0:	f7ff f980 	bl	8004aa4 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	887b      	ldrh	r3, [r7, #2]
 80057a8:	4413      	add	r3, r2
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	8c3b      	ldrh	r3, [r7, #32]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	b218      	sxth	r0, r3
 80057b8:	88ba      	ldrh	r2, [r7, #4]
 80057ba:	8c3b      	ldrh	r3, [r7, #32]
 80057bc:	4413      	add	r3, r2
 80057be:	b29b      	uxth	r3, r3
 80057c0:	b219      	sxth	r1, r3
 80057c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80057c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	2302      	movs	r3, #2
 80057cc:	f7ff f96a 	bl	8004aa4 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 80057d0:	88fa      	ldrh	r2, [r7, #6]
 80057d2:	887b      	ldrh	r3, [r7, #2]
 80057d4:	4413      	add	r3, r2
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	8c3b      	ldrh	r3, [r7, #32]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	b218      	sxth	r0, r3
 80057e4:	88ba      	ldrh	r2, [r7, #4]
 80057e6:	883b      	ldrh	r3, [r7, #0]
 80057e8:	4413      	add	r3, r2
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	8c3b      	ldrh	r3, [r7, #32]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	b219      	sxth	r1, r3
 80057f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80057fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	2304      	movs	r3, #4
 8005802:	f7ff f94f 	bl	8004aa4 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	8c3b      	ldrh	r3, [r7, #32]
 800580a:	4413      	add	r3, r2
 800580c:	b29b      	uxth	r3, r3
 800580e:	b218      	sxth	r0, r3
 8005810:	88ba      	ldrh	r2, [r7, #4]
 8005812:	883b      	ldrh	r3, [r7, #0]
 8005814:	4413      	add	r3, r2
 8005816:	b29a      	uxth	r2, r3
 8005818:	8c3b      	ldrh	r3, [r7, #32]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29b      	uxth	r3, r3
 8005822:	b219      	sxth	r1, r3
 8005824:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	2308      	movs	r3, #8
 800582e:	f7ff f939 	bl	8004aa4 <drawCircleHelper>
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	bd90      	pop	{r4, r7, pc}

0800583a <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 800583a:	b590      	push	{r4, r7, lr}
 800583c:	b087      	sub	sp, #28
 800583e:	af02      	add	r7, sp, #8
 8005840:	4604      	mov	r4, r0
 8005842:	4608      	mov	r0, r1
 8005844:	4611      	mov	r1, r2
 8005846:	461a      	mov	r2, r3
 8005848:	4623      	mov	r3, r4
 800584a:	80fb      	strh	r3, [r7, #6]
 800584c:	4603      	mov	r3, r0
 800584e:	80bb      	strh	r3, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	807b      	strh	r3, [r7, #2]
 8005854:	4613      	mov	r3, r2
 8005856:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8005858:	f9b7 2000 	ldrsh.w	r2, [r7]
 800585c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005860:	4293      	cmp	r3, r2
 8005862:	bfa8      	it	ge
 8005864:	4613      	movge	r3, r2
 8005866:	b21b      	sxth	r3, r3
 8005868:	0fda      	lsrs	r2, r3, #31
 800586a:	4413      	add	r3, r2
 800586c:	105b      	asrs	r3, r3, #1
 800586e:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8005870:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005874:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005878:	429a      	cmp	r2, r3
 800587a:	dd01      	ble.n	8005880 <Displ_fillRoundRect+0x46>
 800587c:	89fb      	ldrh	r3, [r7, #14]
 800587e:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 8005880:	88fa      	ldrh	r2, [r7, #6]
 8005882:	8c3b      	ldrh	r3, [r7, #32]
 8005884:	4413      	add	r3, r2
 8005886:	b298      	uxth	r0, r3
 8005888:	88b9      	ldrh	r1, [r7, #4]
 800588a:	887a      	ldrh	r2, [r7, #2]
 800588c:	8c3b      	ldrh	r3, [r7, #32]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	b29b      	uxth	r3, r3
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	b29a      	uxth	r2, r3
 8005896:	883c      	ldrh	r4, [r7, #0]
 8005898:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	4623      	mov	r3, r4
 800589e:	f7fe ff31 	bl	8004704 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	887b      	ldrh	r3, [r7, #2]
 80058a6:	4413      	add	r3, r2
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	8c3b      	ldrh	r3, [r7, #32]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	b218      	sxth	r0, r3
 80058b6:	88ba      	ldrh	r2, [r7, #4]
 80058b8:	8c3b      	ldrh	r3, [r7, #32]
 80058ba:	4413      	add	r3, r2
 80058bc:	b29b      	uxth	r3, r3
 80058be:	b219      	sxth	r1, r3
 80058c0:	883a      	ldrh	r2, [r7, #0]
 80058c2:	8c3b      	ldrh	r3, [r7, #32]
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	b21b      	sxth	r3, r3
 80058d2:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80058d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058d8:	9201      	str	r2, [sp, #4]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	2301      	movs	r3, #1
 80058de:	4622      	mov	r2, r4
 80058e0:	f7ff f9a4 	bl	8004c2c <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80058e4:	88fa      	ldrh	r2, [r7, #6]
 80058e6:	8c3b      	ldrh	r3, [r7, #32]
 80058e8:	4413      	add	r3, r2
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	b218      	sxth	r0, r3
 80058ee:	88ba      	ldrh	r2, [r7, #4]
 80058f0:	8c3b      	ldrh	r3, [r7, #32]
 80058f2:	4413      	add	r3, r2
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	b219      	sxth	r1, r3
 80058f8:	883a      	ldrh	r2, [r7, #0]
 80058fa:	8c3b      	ldrh	r3, [r7, #32]
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	b29b      	uxth	r3, r3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29b      	uxth	r3, r3
 8005908:	b21b      	sxth	r3, r3
 800590a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800590e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005910:	9201      	str	r2, [sp, #4]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	2302      	movs	r3, #2
 8005916:	4622      	mov	r2, r4
 8005918:	f7ff f988 	bl	8004c2c <fillCircleHelper>
}
 800591c:	bf00      	nop
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	bd90      	pop	{r4, r7, pc}

08005924 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005924:	b082      	sub	sp, #8
 8005926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005928:	b08b      	sub	sp, #44	; 0x2c
 800592a:	af06      	add	r7, sp, #24
 800592c:	603a      	str	r2, [r7, #0]
 800592e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005930:	4603      	mov	r3, r0
 8005932:	80fb      	strh	r3, [r7, #6]
 8005934:	460b      	mov	r3, r1
 8005936:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 8005938:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800593a:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 800593c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005940:	2b01      	cmp	r3, #1
 8005942:	d922      	bls.n	800598a <Displ_WString+0x66>
		delta<<=1;
 8005944:	89fb      	ldrh	r3, [r7, #14]
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 800594a:	e01e      	b.n	800598a <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781a      	ldrb	r2, [r3, #0]
 8005950:	88bd      	ldrh	r5, [r7, #4]
 8005952:	88fc      	ldrh	r4, [r7, #6]
 8005954:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005958:	9304      	str	r3, [sp, #16]
 800595a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800595c:	9303      	str	r3, [sp, #12]
 800595e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005962:	9302      	str	r3, [sp, #8]
 8005964:	466e      	mov	r6, sp
 8005966:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800596a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800596e:	e886 0003 	stmia.w	r6, {r0, r1}
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	4629      	mov	r1, r5
 8005976:	4620      	mov	r0, r4
 8005978:	f7ff fd6c 	bl	8005454 <Displ_WChar>
        x += delta;
 800597c:	88fa      	ldrh	r2, [r7, #6]
 800597e:	89fb      	ldrh	r3, [r7, #14]
 8005980:	4413      	add	r3, r2
 8005982:	80fb      	strh	r3, [r7, #6]
        str++;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	3301      	adds	r3, #1
 8005988:	603b      	str	r3, [r7, #0]
    while(*str) {
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1dc      	bne.n	800594c <Displ_WString+0x28>
    }
}
 8005992:	bf00      	nop
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800599e:	b002      	add	sp, #8
 80059a0:	4770      	bx	lr
	...

080059a4 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	2b51      	cmp	r3, #81	; 0x51
 80059b2:	d00a      	beq.n	80059ca <Displ_BackLight+0x26>
 80059b4:	2b51      	cmp	r3, #81	; 0x51
 80059b6:	dc16      	bgt.n	80059e6 <Displ_BackLight+0x42>
 80059b8:	2b46      	cmp	r3, #70	; 0x46
 80059ba:	d008      	beq.n	80059ce <Displ_BackLight+0x2a>
 80059bc:	2b46      	cmp	r3, #70	; 0x46
 80059be:	dc12      	bgt.n	80059e6 <Displ_BackLight+0x42>
 80059c0:	2b30      	cmp	r3, #48	; 0x30
 80059c2:	d00a      	beq.n	80059da <Displ_BackLight+0x36>
 80059c4:	2b31      	cmp	r3, #49	; 0x31
 80059c6:	d002      	beq.n	80059ce <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 80059c8:	e00d      	b.n	80059e6 <Displ_BackLight+0x42>
		__NOP();
 80059ca:	bf00      	nop
		break;
 80059cc:	e00c      	b.n	80059e8 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 80059ce:	2201      	movs	r2, #1
 80059d0:	2140      	movs	r1, #64	; 0x40
 80059d2:	480a      	ldr	r0, [pc, #40]	; (80059fc <Displ_BackLight+0x58>)
 80059d4:	f002 f860 	bl	8007a98 <HAL_GPIO_WritePin>
		break;
 80059d8:	e006      	b.n	80059e8 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 80059da:	2200      	movs	r2, #0
 80059dc:	2140      	movs	r1, #64	; 0x40
 80059de:	4807      	ldr	r0, [pc, #28]	; (80059fc <Displ_BackLight+0x58>)
 80059e0:	f002 f85a 	bl	8007a98 <HAL_GPIO_WritePin>
		break;
 80059e4:	e000      	b.n	80059e8 <Displ_BackLight+0x44>
		break;
 80059e6:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 80059e8:	2140      	movs	r1, #64	; 0x40
 80059ea:	4804      	ldr	r0, [pc, #16]	; (80059fc <Displ_BackLight+0x58>)
 80059ec:	f002 f83c 	bl	8007a68 <HAL_GPIO_ReadPin>
 80059f0:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40020000 	.word	0x40020000

08005a00 <testLines>:




void testLines(uint16_t color)
{
 8005a00:	b590      	push	{r4, r7, lr}
 8005a02:	b08b      	sub	sp, #44	; 0x2c
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	4603      	mov	r3, r0
 8005a08:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8005a0a:	4b7c      	ldr	r3, [pc, #496]	; (8005bfc <testLines+0x1fc>)
 8005a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a10:	617b      	str	r3, [r7, #20]
                  h = _height;
 8005a12:	4b7b      	ldr	r3, [pc, #492]	; (8005c00 <testLines+0x200>)
 8005a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a18:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	f7ff f826 	bl	8004a6c <Displ_CLS>

    x1 = y1 = 0;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
 8005a32:	e00f      	b.n	8005a54 <testLines+0x54>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	b218      	sxth	r0, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	b219      	sxth	r1, r3
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	b21a      	sxth	r2, r3
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	b21c      	sxth	r4, r3
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	4623      	mov	r3, r4
 8005a4a:	f7ff f9f8 	bl	8004e3e <Displ_Line>
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3306      	adds	r3, #6
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	dbeb      	blt.n	8005a34 <testLines+0x34>
    x2    = w - 1;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8005a62:	2300      	movs	r3, #0
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	e00f      	b.n	8005a88 <testLines+0x88>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	b218      	sxth	r0, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	b219      	sxth	r1, r3
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	b21a      	sxth	r2, r3
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	b21c      	sxth	r4, r3
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	4623      	mov	r3, r4
 8005a7e:	f7ff f9de 	bl	8004e3e <Displ_Line>
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	3306      	adds	r3, #6
 8005a86:	61bb      	str	r3, [r7, #24]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	dbeb      	blt.n	8005a68 <testLines+0x68>

    Displ_CLS(BLACK);
 8005a90:	2000      	movs	r0, #0
 8005a92:	f7fe ffeb 	bl	8004a6c <Displ_CLS>

    x1    = w - 1;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	e00f      	b.n	8005acc <testLines+0xcc>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	b218      	sxth	r0, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	b219      	sxth	r1, r3
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	b21a      	sxth	r2, r3
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	b21c      	sxth	r4, r3
 8005abc:	88fb      	ldrh	r3, [r7, #6]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	f7ff f9bc 	bl	8004e3e <Displ_Line>
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	3306      	adds	r3, #6
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	dbeb      	blt.n	8005aac <testLines+0xac>
    x2    = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	e00f      	b.n	8005afe <testLines+0xfe>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	b218      	sxth	r0, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	b219      	sxth	r1, r3
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	b21a      	sxth	r2, r3
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	b21c      	sxth	r4, r3
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	4623      	mov	r3, r4
 8005af4:	f7ff f9a3 	bl	8004e3e <Displ_Line>
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	3306      	adds	r3, #6
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	dbeb      	blt.n	8005ade <testLines+0xde>

    Displ_CLS(BLACK);
 8005b06:	2000      	movs	r0, #0
 8005b08:	f7fe ffb0 	bl	8004a6c <Displ_CLS>

    x1    = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	e00f      	b.n	8005b40 <testLines+0x140>
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	b218      	sxth	r0, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	b219      	sxth	r1, r3
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	b21a      	sxth	r2, r3
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	b21c      	sxth	r4, r3
 8005b30:	88fb      	ldrh	r3, [r7, #6]
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	4623      	mov	r3, r4
 8005b36:	f7ff f982 	bl	8004e3e <Displ_Line>
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	3306      	adds	r3, #6
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	dbeb      	blt.n	8005b20 <testLines+0x120>
    x2    = w - 1;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	e00f      	b.n	8005b74 <testLines+0x174>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	b218      	sxth	r0, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	b219      	sxth	r1, r3
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	b21a      	sxth	r2, r3
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	b21c      	sxth	r4, r3
 8005b64:	88fb      	ldrh	r3, [r7, #6]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	4623      	mov	r3, r4
 8005b6a:	f7ff f968 	bl	8004e3e <Displ_Line>
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	3306      	adds	r3, #6
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	dbeb      	blt.n	8005b54 <testLines+0x154>

    Displ_CLS(BLACK);
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f7fe ff75 	bl	8004a6c <Displ_CLS>

    x1    = w - 1;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8005b92:	2300      	movs	r3, #0
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	e00f      	b.n	8005bb8 <testLines+0x1b8>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	b218      	sxth	r0, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	b219      	sxth	r1, r3
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	b21a      	sxth	r2, r3
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	b21c      	sxth	r4, r3
 8005ba8:	88fb      	ldrh	r3, [r7, #6]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	4623      	mov	r3, r4
 8005bae:	f7ff f946 	bl	8004e3e <Displ_Line>
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	3306      	adds	r3, #6
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	dbeb      	blt.n	8005b98 <testLines+0x198>
    x2    = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	e00f      	b.n	8005bea <testLines+0x1ea>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	b218      	sxth	r0, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	b219      	sxth	r1, r3
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	b21a      	sxth	r2, r3
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	b21c      	sxth	r4, r3
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	4623      	mov	r3, r4
 8005be0:	f7ff f92d 	bl	8004e3e <Displ_Line>
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	3306      	adds	r3, #6
 8005be8:	61bb      	str	r3, [r7, #24]
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	dbeb      	blt.n	8005bca <testLines+0x1ca>

}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	3724      	adds	r7, #36	; 0x24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd90      	pop	{r4, r7, pc}
 8005bfc:	20006ef6 	.word	0x20006ef6
 8005c00:	20006ef8 	.word	0x20006ef8

08005c04 <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	460a      	mov	r2, r1
 8005c0e:	80fb      	strh	r3, [r7, #6]
 8005c10:	4613      	mov	r3, r2
 8005c12:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 8005c14:	4b20      	ldr	r3, [pc, #128]	; (8005c98 <testFastLines+0x94>)
 8005c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	4b1f      	ldr	r3, [pc, #124]	; (8005c9c <testFastLines+0x98>)
 8005c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c22:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8005c24:	2000      	movs	r0, #0
 8005c26:	f7fe ff21 	bl	8004a6c <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	e011      	b.n	8005c54 <testFastLines+0x50>
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	b219      	sxth	r1, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	b21a      	sxth	r2, r3
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	b218      	sxth	r0, r3
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	4603      	mov	r3, r0
 8005c48:	2000      	movs	r0, #0
 8005c4a:	f7ff f8f8 	bl	8004e3e <Displ_Line>
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	3305      	adds	r3, #5
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	dbe9      	blt.n	8005c30 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e011      	b.n	8005c86 <testFastLines+0x82>
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	b218      	sxth	r0, r3
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	b21a      	sxth	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	b219      	sxth	r1, r3
 8005c74:	88bb      	ldrh	r3, [r7, #4]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	f7ff f8df 	bl	8004e3e <Displ_Line>
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	3305      	adds	r3, #5
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	dbe9      	blt.n	8005c62 <testFastLines+0x5e>
}
 8005c8e:	bf00      	nop
 8005c90:	bf00      	nop
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20006ef6 	.word	0x20006ef6
 8005c9c:	20006ef8 	.word	0x20006ef8

08005ca0 <testRects>:




void testRects(uint16_t color)
{
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b08b      	sub	sp, #44	; 0x2c
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 8005caa:	4b25      	ldr	r3, [pc, #148]	; (8005d40 <testRects+0xa0>)
 8005cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cb0:	0fda      	lsrs	r2, r3, #31
 8005cb2:	4413      	add	r3, r2
 8005cb4:	105b      	asrs	r3, r3, #1
 8005cb6:	b21b      	sxth	r3, r3
 8005cb8:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 8005cba:	4b22      	ldr	r3, [pc, #136]	; (8005d44 <testRects+0xa4>)
 8005cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cc0:	0fda      	lsrs	r2, r3, #31
 8005cc2:	4413      	add	r3, r2
 8005cc4:	105b      	asrs	r3, r3, #1
 8005cc6:	b21b      	sxth	r3, r3
 8005cc8:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8005cca:	2000      	movs	r0, #0
 8005ccc:	f7fe fece 	bl	8004a6c <Displ_CLS>
	n     = min(_width, _height);
 8005cd0:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <testRects+0xa4>)
 8005cd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005cd6:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <testRects+0xa0>)
 8005cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	bfa8      	it	ge
 8005ce0:	4613      	movge	r3, r2
 8005ce2:	b21b      	sxth	r3, r3
 8005ce4:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	61fb      	str	r3, [r7, #28]
 8005cea:	e020      	b.n	8005d2e <testRects+0x8e>
		i2 = i / 2;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	0fda      	lsrs	r2, r3, #31
 8005cf0:	4413      	add	r3, r2
 8005cf2:	105b      	asrs	r3, r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	b218      	sxth	r0, r3
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	b219      	sxth	r1, r3
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	b21a      	sxth	r2, r3
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	b21c      	sxth	r4, r3
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	2301      	movs	r3, #1
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	4623      	mov	r3, r4
 8005d24:	f7ff f9bc 	bl	80050a0 <Displ_Border>
	for (i = 2; i < n; i += 6) {
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	3306      	adds	r3, #6
 8005d2c:	61fb      	str	r3, [r7, #28]
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	dbda      	blt.n	8005cec <testRects+0x4c>
	}
}
 8005d36:	bf00      	nop
 8005d38:	bf00      	nop
 8005d3a:	3724      	adds	r7, #36	; 0x24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd90      	pop	{r4, r7, pc}
 8005d40:	20006ef6 	.word	0x20006ef6
 8005d44:	20006ef8 	.word	0x20006ef8

08005d48 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8005d48:	b590      	push	{r4, r7, lr}
 8005d4a:	b08b      	sub	sp, #44	; 0x2c
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	4603      	mov	r3, r0
 8005d50:	460a      	mov	r2, r1
 8005d52:	80fb      	strh	r3, [r7, #6]
 8005d54:	4613      	mov	r3, r2
 8005d56:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8005d58:	4b30      	ldr	r3, [pc, #192]	; (8005e1c <testFilledRects+0xd4>)
 8005d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d5e:	0fda      	lsrs	r2, r3, #31
 8005d60:	4413      	add	r3, r2
 8005d62:	105b      	asrs	r3, r3, #1
 8005d64:	b21b      	sxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 8005d6a:	4b2d      	ldr	r3, [pc, #180]	; (8005e20 <testFilledRects+0xd8>)
 8005d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d70:	0fda      	lsrs	r2, r3, #31
 8005d72:	4413      	add	r3, r2
 8005d74:	105b      	asrs	r3, r3, #1
 8005d76:	b21b      	sxth	r3, r3
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	f7fe fe75 	bl	8004a6c <Displ_CLS>
	n = min(_width, _height);
 8005d82:	4b27      	ldr	r3, [pc, #156]	; (8005e20 <testFilledRects+0xd8>)
 8005d84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005d88:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <testFilledRects+0xd4>)
 8005d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	bfa8      	it	ge
 8005d92:	4613      	movge	r3, r2
 8005d94:	b21b      	sxth	r3, r3
 8005d96:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	e035      	b.n	8005e0a <testFilledRects+0xc2>
		i2    = i / 2;
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	0fda      	lsrs	r2, r3, #31
 8005da2:	4413      	add	r3, r2
 8005da4:	105b      	asrs	r3, r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	b298      	uxth	r0, r3
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	b299      	uxth	r1, r3
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	b29c      	uxth	r4, r3
 8005dc8:	88fb      	ldrh	r3, [r7, #6]
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	4623      	mov	r3, r4
 8005dce:	f7fe fc99 	bl	8004704 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	b218      	sxth	r0, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	b219      	sxth	r1, r3
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	b21a      	sxth	r2, r3
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	b21c      	sxth	r4, r3
 8005df6:	88bb      	ldrh	r3, [r7, #4]
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	4623      	mov	r3, r4
 8005e00:	f7ff f94e 	bl	80050a0 <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	3b06      	subs	r3, #6
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dcc6      	bgt.n	8005d9e <testFilledRects+0x56>
	}
}
 8005e10:	bf00      	nop
 8005e12:	bf00      	nop
 8005e14:	3724      	adds	r7, #36	; 0x24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd90      	pop	{r4, r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20006ef6 	.word	0x20006ef6
 8005e20:	20006ef8 	.word	0x20006ef8

08005e24 <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	460a      	mov	r2, r1
 8005e2e:	71fb      	strb	r3, [r7, #7]
 8005e30:	4613      	mov	r3, r2
 8005e32:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8005e34:	4b18      	ldr	r3, [pc, #96]	; (8005e98 <testFilledCircles+0x74>)
 8005e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	4b17      	ldr	r3, [pc, #92]	; (8005e9c <testFilledCircles+0x78>)
 8005e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	79fb      	ldrb	r3, [r7, #7]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	f7fe fe0e 	bl	8004a6c <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	e017      	b.n	8005e86 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	e00c      	b.n	8005e76 <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	b218      	sxth	r0, r3
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	b219      	sxth	r1, r3
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	b21a      	sxth	r2, r3
 8005e68:	88bb      	ldrh	r3, [r7, #4]
 8005e6a:	f7fe ffb5 	bl	8004dd8 <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	dbee      	blt.n	8005e5c <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	61fb      	str	r3, [r7, #28]
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	dbe3      	blt.n	8005e56 <testFilledCircles+0x32>
        }
    }
}
 8005e8e:	bf00      	nop
 8005e90:	bf00      	nop
 8005e92:	3720      	adds	r7, #32
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20006ef6 	.word	0x20006ef6
 8005e9c:	20006ef8 	.word	0x20006ef8

08005ea0 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	460a      	mov	r2, r1
 8005eaa:	71fb      	strb	r3, [r7, #7]
 8005eac:	4613      	mov	r3, r2
 8005eae:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8005eb6:	4b19      	ldr	r3, [pc, #100]	; (8005f1c <testCircles+0x7c>)
 8005eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8005ec4:	4b16      	ldr	r3, [pc, #88]	; (8005f20 <testCircles+0x80>)
 8005ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	4413      	add	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	e017      	b.n	8005f08 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61bb      	str	r3, [r7, #24]
 8005edc:	e00c      	b.n	8005ef8 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	b218      	sxth	r0, r3
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	b219      	sxth	r1, r3
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	b21a      	sxth	r2, r3
 8005eea:	88bb      	ldrh	r3, [r7, #4]
 8005eec:	f7fe fcea 	bl	80048c4 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	dbee      	blt.n	8005ede <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	4413      	add	r3, r2
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	dbe3      	blt.n	8005ed8 <testCircles+0x38>
        }
    }
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	3720      	adds	r7, #32
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20006ef6 	.word	0x20006ef6
 8005f20:	20006ef8 	.word	0x20006ef8

08005f24 <testTriangles>:




void testTriangles()
{
 8005f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f26:	b089      	sub	sp, #36	; 0x24
 8005f28:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 8005f2a:	4b2e      	ldr	r3, [pc, #184]	; (8005fe4 <testTriangles+0xc0>)
 8005f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f30:	0fda      	lsrs	r2, r3, #31
 8005f32:	4413      	add	r3, r2
 8005f34:	105b      	asrs	r3, r3, #1
 8005f36:	b21b      	sxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8005f3c:	4b2a      	ldr	r3, [pc, #168]	; (8005fe8 <testTriangles+0xc4>)
 8005f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f42:	0fda      	lsrs	r2, r3, #31
 8005f44:	4413      	add	r3, r2
 8005f46:	105b      	asrs	r3, r3, #1
 8005f48:	b21b      	sxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8005f4e:	2000      	movs	r0, #0
 8005f50:	f7fe fd8c 	bl	8004a6c <Displ_CLS>
    n     = min(cx, cy);
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	bfa8      	it	ge
 8005f5c:	4613      	movge	r3, r2
 8005f5e:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e035      	b.n	8005fd2 <testTriangles+0xae>
    	Displ_drawTriangle(
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8005f76:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8005f84:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	4413      	add	r3, r2
 8005f90:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8005f92:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8005fa0:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	b291      	uxth	r1, r2
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	b292      	uxth	r2, r2
 8005faa:	440a      	add	r2, r1
 8005fac:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 8005fae:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8005fb0:	68f9      	ldr	r1, [r7, #12]
 8005fb2:	10c9      	asrs	r1, r1, #3
 8005fb4:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 8005fb6:	f001 011f 	and.w	r1, r1, #31
 8005fba:	b289      	uxth	r1, r1
 8005fbc:	9102      	str	r1, [sp, #8]
 8005fbe:	9201      	str	r2, [sp, #4]
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	4633      	mov	r3, r6
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	f7ff f8ad 	bl	8005126 <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3305      	adds	r3, #5
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	dbc5      	blt.n	8005f66 <testTriangles+0x42>
    }
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fe4:	20006ef6 	.word	0x20006ef6
 8005fe8:	20006ef8 	.word	0x20006ef8

08005fec <testFilledTriangles>:





void testFilledTriangles() {
 8005fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fee:	b089      	sub	sp, #36	; 0x24
 8005ff0:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 8005ff2:	4b53      	ldr	r3, [pc, #332]	; (8006140 <testFilledTriangles+0x154>)
 8005ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ff8:	0fda      	lsrs	r2, r3, #31
 8005ffa:	4413      	add	r3, r2
 8005ffc:	105b      	asrs	r3, r3, #1
 8005ffe:	b21b      	sxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8006004:	4b4f      	ldr	r3, [pc, #316]	; (8006144 <testFilledTriangles+0x158>)
 8006006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800600a:	0fda      	lsrs	r2, r3, #31
 800600c:	4413      	add	r3, r2
 800600e:	105b      	asrs	r3, r3, #1
 8006010:	b21b      	sxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8006016:	2000      	movs	r0, #0
 8006018:	f7fe fd28 	bl	8004a6c <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	4293      	cmp	r3, r2
 8006022:	bfa8      	it	ge
 8006024:	4613      	movge	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e080      	b.n	800612c <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	b21c      	sxth	r4, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	b29b      	uxth	r3, r3
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	b29b      	uxth	r3, r3
 800603a:	b21d      	sxth	r5, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	b29b      	uxth	r3, r3
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	b29b      	uxth	r3, r3
 8006048:	b21e      	sxth	r6, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	b29b      	uxth	r3, r3
 8006052:	4413      	add	r3, r2
 8006054:	b29b      	uxth	r3, r3
 8006056:	fa0f fc83 	sxth.w	ip, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	b29b      	uxth	r3, r3
 8006062:	4413      	add	r3, r2
 8006064:	b29b      	uxth	r3, r3
 8006066:	b21b      	sxth	r3, r3
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	b291      	uxth	r1, r2
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	b292      	uxth	r2, r2
 8006070:	440a      	add	r2, r1
 8006072:	b292      	uxth	r2, r2
 8006074:	b212      	sxth	r2, r2
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	00c9      	lsls	r1, r1, #3
 800607a:	b209      	sxth	r1, r1
 800607c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8006080:	b208      	sxth	r0, r1
 8006082:	68f9      	ldr	r1, [r7, #12]
 8006084:	10c9      	asrs	r1, r1, #3
 8006086:	b209      	sxth	r1, r1
 8006088:	f001 011f 	and.w	r1, r1, #31
 800608c:	b209      	sxth	r1, r1
 800608e:	4301      	orrs	r1, r0
 8006090:	b209      	sxth	r1, r1
 8006092:	b289      	uxth	r1, r1
 8006094:	9102      	str	r1, [sp, #8]
 8006096:	9201      	str	r2, [sp, #4]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	4663      	mov	r3, ip
 800609c:	4632      	mov	r2, r6
 800609e:	4629      	mov	r1, r5
 80060a0:	4620      	mov	r0, r4
 80060a2:	f7ff f87a 	bl	800519a <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	b21c      	sxth	r4, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	b21d      	sxth	r5, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	b21e      	sxth	r6, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	4413      	add	r3, r2
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	fa0f fc83 	sxth.w	ip, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	b29a      	uxth	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	4413      	add	r3, r2
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	b21a      	sxth	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	b299      	uxth	r1, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	440b      	add	r3, r1
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	b219      	sxth	r1, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	021b      	lsls	r3, r3, #8
 80060f6:	b21b      	sxth	r3, r3
 80060f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060fc:	f023 0307 	bic.w	r3, r3, #7
 8006100:	b218      	sxth	r0, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	b21b      	sxth	r3, r3
 8006108:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800610c:	b21b      	sxth	r3, r3
 800610e:	4303      	orrs	r3, r0
 8006110:	b21b      	sxth	r3, r3
 8006112:	b29b      	uxth	r3, r3
 8006114:	9302      	str	r3, [sp, #8]
 8006116:	9101      	str	r1, [sp, #4]
 8006118:	9200      	str	r2, [sp, #0]
 800611a:	4663      	mov	r3, ip
 800611c:	4632      	mov	r2, r6
 800611e:	4629      	mov	r1, r5
 8006120:	4620      	mov	r0, r4
 8006122:	f7ff f800 	bl	8005126 <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3b05      	subs	r3, #5
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b0a      	cmp	r3, #10
 8006130:	f73f af7b 	bgt.w	800602a <testFilledTriangles+0x3e>
    }
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800613e:	bf00      	nop
 8006140:	20006ef6 	.word	0x20006ef6
 8006144:	20006ef8 	.word	0x20006ef8

08006148 <testRoundRects>:





void testRoundRects() {
 8006148:	b5b0      	push	{r4, r5, r7, lr}
 800614a:	b08a      	sub	sp, #40	; 0x28
 800614c:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 800614e:	4b33      	ldr	r3, [pc, #204]	; (800621c <testRoundRects+0xd4>)
 8006150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006154:	0fda      	lsrs	r2, r3, #31
 8006156:	4413      	add	r3, r2
 8006158:	105b      	asrs	r3, r3, #1
 800615a:	b21b      	sxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8006160:	4b2f      	ldr	r3, [pc, #188]	; (8006220 <testRoundRects+0xd8>)
 8006162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006166:	0fda      	lsrs	r2, r3, #31
 8006168:	4413      	add	r3, r2
 800616a:	105b      	asrs	r3, r3, #1
 800616c:	b21b      	sxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8006172:	2000      	movs	r0, #0
 8006174:	f7fe fc7a 	bl	8004a6c <Displ_CLS>
    w     = min(_width, _height);
 8006178:	4b29      	ldr	r3, [pc, #164]	; (8006220 <testRoundRects+0xd8>)
 800617a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800617e:	4b27      	ldr	r3, [pc, #156]	; (800621c <testRoundRects+0xd4>)
 8006180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006184:	4293      	cmp	r3, r2
 8006186:	bfa8      	it	ge
 8006188:	4613      	movge	r3, r2
 800618a:	b21b      	sxth	r3, r3
 800618c:	60fb      	str	r3, [r7, #12]
    red = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8006192:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	fb92 f3f3 	sdiv	r3, r2, r3
 800619c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
 80061a2:	e031      	b.n	8006208 <testRoundRects+0xc0>
        i2 = i / 2;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	0fda      	lsrs	r2, r3, #31
 80061a8:	4413      	add	r3, r2
 80061aa:	105b      	asrs	r3, r3, #1
 80061ac:	607b      	str	r3, [r7, #4]
        red += step;
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	4413      	add	r3, r2
 80061b4:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	b218      	sxth	r0, r3
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	b219      	sxth	r1, r3
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	b21c      	sxth	r4, r3
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	b21d      	sxth	r5, r3
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	da00      	bge.n	80061e2 <testRoundRects+0x9a>
 80061e0:	3307      	adds	r3, #7
 80061e2:	10db      	asrs	r3, r3, #3
 80061e4:	b21a      	sxth	r2, r3
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	021b      	lsls	r3, r3, #8
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80061f0:	f023 0307 	bic.w	r3, r3, #7
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	9200      	str	r2, [sp, #0]
 80061fa:	462b      	mov	r3, r5
 80061fc:	4622      	mov	r2, r4
 80061fe:	f7ff fa27 	bl	8005650 <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	3306      	adds	r3, #6
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	429a      	cmp	r2, r3
 800620e:	dbc9      	blt.n	80061a4 <testRoundRects+0x5c>
    }
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	3720      	adds	r7, #32
 8006216:	46bd      	mov	sp, r7
 8006218:	bdb0      	pop	{r4, r5, r7, pc}
 800621a:	bf00      	nop
 800621c:	20006ef6 	.word	0x20006ef6
 8006220:	20006ef8 	.word	0x20006ef8

08006224 <testFilledRoundRects>:





void testFilledRoundRects() {
 8006224:	b5b0      	push	{r4, r5, r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 800622a:	4b36      	ldr	r3, [pc, #216]	; (8006304 <testFilledRoundRects+0xe0>)
 800622c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006230:	0fda      	lsrs	r2, r3, #31
 8006232:	4413      	add	r3, r2
 8006234:	105b      	asrs	r3, r3, #1
 8006236:	b21b      	sxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 800623c:	4b32      	ldr	r3, [pc, #200]	; (8006308 <testFilledRoundRects+0xe4>)
 800623e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006242:	0fda      	lsrs	r2, r3, #31
 8006244:	4413      	add	r3, r2
 8006246:	105b      	asrs	r3, r3, #1
 8006248:	b21b      	sxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 800624e:	2000      	movs	r0, #0
 8006250:	f7fe fc0c 	bl	8004a6c <Displ_CLS>
    green = 256;
 8006254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006258:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 800625a:	4b2b      	ldr	r3, [pc, #172]	; (8006308 <testFilledRoundRects+0xe4>)
 800625c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006260:	4b28      	ldr	r3, [pc, #160]	; (8006304 <testFilledRoundRects+0xe0>)
 8006262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006266:	4293      	cmp	r3, r2
 8006268:	bfa8      	it	ge
 800626a:	4613      	movge	r3, r2
 800626c:	b21b      	sxth	r3, r3
 800626e:	461a      	mov	r2, r3
 8006270:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006274:	fb93 f3f2 	sdiv	r3, r3, r2
 8006278:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 800627a:	4b23      	ldr	r3, [pc, #140]	; (8006308 <testFilledRoundRects+0xe4>)
 800627c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006280:	4b20      	ldr	r3, [pc, #128]	; (8006304 <testFilledRoundRects+0xe0>)
 8006282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006286:	4293      	cmp	r3, r2
 8006288:	bfa8      	it	ge
 800628a:	4613      	movge	r3, r2
 800628c:	b21b      	sxth	r3, r3
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	e02f      	b.n	80062f2 <testFilledRoundRects+0xce>
        i2 = i / 2;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	0fda      	lsrs	r2, r3, #31
 8006296:	4413      	add	r3, r2
 8006298:	105b      	asrs	r3, r3, #1
 800629a:	603b      	str	r3, [r7, #0]
        green -= step;
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	b218      	sxth	r0, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	b29b      	uxth	r3, r3
 80062be:	b219      	sxth	r1, r3
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	b21c      	sxth	r4, r3
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	b21d      	sxth	r5, r3
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	da00      	bge.n	80062d0 <testFilledRoundRects+0xac>
 80062ce:	3307      	adds	r3, #7
 80062d0:	10db      	asrs	r3, r3, #3
 80062d2:	b21b      	sxth	r3, r3
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	00d2      	lsls	r2, r2, #3
 80062d8:	b292      	uxth	r2, r2
 80062da:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80062de:	b292      	uxth	r2, r2
 80062e0:	9201      	str	r2, [sp, #4]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	462b      	mov	r3, r5
 80062e6:	4622      	mov	r2, r4
 80062e8:	f7ff faa7 	bl	800583a <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	3b06      	subs	r3, #6
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b14      	cmp	r3, #20
 80062f6:	dccc      	bgt.n	8006292 <testFilledRoundRects+0x6e>
    }
}
 80062f8:	bf00      	nop
 80062fa:	bf00      	nop
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bdb0      	pop	{r4, r5, r7, pc}
 8006302:	bf00      	nop
 8006304:	20006ef6 	.word	0x20006ef6
 8006308:	20006ef8 	.word	0x20006ef8

0800630c <testFillScreen>:




void testFillScreen()
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 8006310:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006314:	f7fe fbaa 	bl	8004a6c <Displ_CLS>
	Displ_CLS(GREEN);
 8006318:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800631c:	f7fe fba6 	bl	8004a6c <Displ_CLS>
	Displ_CLS(BLUE);
 8006320:	201f      	movs	r0, #31
 8006322:	f7fe fba3 	bl	8004a6c <Displ_CLS>
	Displ_CLS(YELLOW);
 8006326:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800632a:	f7fe fb9f 	bl	8004a6c <Displ_CLS>
	Displ_CLS(BLACK);
 800632e:	2000      	movs	r0, #0
 8006330:	f7fe fb9c 	bl	8004a6c <Displ_CLS>
}
 8006334:	bf00      	nop
 8006336:	bd80      	pop	{r7, pc}

08006338 <Displ_TestAll>:





void Displ_TestAll (){
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
	testFillScreen();
 800633c:	f7ff ffe6 	bl	800630c <testFillScreen>
	testLines(CYAN);
 8006340:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8006344:	f7ff fb5c 	bl	8005a00 <testLines>
	testFastLines(RED, BLUE);
 8006348:	211f      	movs	r1, #31
 800634a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800634e:	f7ff fc59 	bl	8005c04 <testFastLines>
	testRects(GREEN);
 8006352:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8006356:	f7ff fca3 	bl	8005ca0 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 800635a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 800635e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8006362:	f7ff fcf1 	bl	8005d48 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8006366:	f64f 011f 	movw	r1, #63519	; 0xf81f
 800636a:	200a      	movs	r0, #10
 800636c:	f7ff fd5a 	bl	8005e24 <testFilledCircles>
	testCircles(10, WHITE);
 8006370:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006374:	200a      	movs	r0, #10
 8006376:	f7ff fd93 	bl	8005ea0 <testCircles>
	testTriangles();
 800637a:	f7ff fdd3 	bl	8005f24 <testTriangles>
	testFilledTriangles();
 800637e:	f7ff fe35 	bl	8005fec <testFilledTriangles>
	testRoundRects();
 8006382:	f7ff fee1 	bl	8006148 <testRoundRects>
	testFilledRoundRects();
 8006386:	f7ff ff4d 	bl	8006224 <testFilledRoundRects>
}
 800638a:	bf00      	nop
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80063c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006394:	480d      	ldr	r0, [pc, #52]	; (80063cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006396:	490e      	ldr	r1, [pc, #56]	; (80063d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006398:	4a0e      	ldr	r2, [pc, #56]	; (80063d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800639a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800639c:	e002      	b.n	80063a4 <LoopCopyDataInit>

0800639e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800639e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063a2:	3304      	adds	r3, #4

080063a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80063a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80063a8:	d3f9      	bcc.n	800639e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80063aa:	4a0b      	ldr	r2, [pc, #44]	; (80063d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80063ac:	4c0b      	ldr	r4, [pc, #44]	; (80063dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80063ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80063b0:	e001      	b.n	80063b6 <LoopFillZerobss>

080063b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80063b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80063b4:	3204      	adds	r2, #4

080063b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80063b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80063b8:	d3fb      	bcc.n	80063b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80063ba:	f7fd fe15 	bl	8003fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80063be:	f005 fa6b 	bl	800b898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80063c2:	f7fc fd0b 	bl	8002ddc <main>
  bx  lr    
 80063c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80063c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80063cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063d0:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80063d4:	08010eb0 	.word	0x08010eb0
  ldr r2, =_sbss
 80063d8:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80063dc:	20007854 	.word	0x20007854

080063e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063e0:	e7fe      	b.n	80063e0 <ADC_IRQHandler>
	...

080063e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80063e8:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <HAL_Init+0x40>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a0d      	ldr	r2, [pc, #52]	; (8006424 <HAL_Init+0x40>)
 80063ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80063f4:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <HAL_Init+0x40>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a0a      	ldr	r2, [pc, #40]	; (8006424 <HAL_Init+0x40>)
 80063fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006400:	4b08      	ldr	r3, [pc, #32]	; (8006424 <HAL_Init+0x40>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a07      	ldr	r2, [pc, #28]	; (8006424 <HAL_Init+0x40>)
 8006406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800640c:	2003      	movs	r0, #3
 800640e:	f000 fd53 	bl	8006eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006412:	2000      	movs	r0, #0
 8006414:	f000 f808 	bl	8006428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006418:	f7fd fa22 	bl	8003860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40023c00 	.word	0x40023c00

08006428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006430:	4b12      	ldr	r3, [pc, #72]	; (800647c <HAL_InitTick+0x54>)
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	4b12      	ldr	r3, [pc, #72]	; (8006480 <HAL_InitTick+0x58>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	4619      	mov	r1, r3
 800643a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800643e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006442:	fbb2 f3f3 	udiv	r3, r2, r3
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fd6b 	bl	8006f22 <HAL_SYSTICK_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e00e      	b.n	8006474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b0f      	cmp	r3, #15
 800645a:	d80a      	bhi.n	8006472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800645c:	2200      	movs	r2, #0
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006464:	f000 fd33 	bl	8006ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006468:	4a06      	ldr	r2, [pc, #24]	; (8006484 <HAL_InitTick+0x5c>)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e000      	b.n	8006474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20000030 	.word	0x20000030
 8006480:	20000040 	.word	0x20000040
 8006484:	2000003c 	.word	0x2000003c

08006488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800648c:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <HAL_IncTick+0x20>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	4b06      	ldr	r3, [pc, #24]	; (80064ac <HAL_IncTick+0x24>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4413      	add	r3, r2
 8006498:	4a04      	ldr	r2, [pc, #16]	; (80064ac <HAL_IncTick+0x24>)
 800649a:	6013      	str	r3, [r2, #0]
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	20000040 	.word	0x20000040
 80064ac:	20007704 	.word	0x20007704

080064b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  return uwTick;
 80064b4:	4b03      	ldr	r3, [pc, #12]	; (80064c4 <HAL_GetTick+0x14>)
 80064b6:	681b      	ldr	r3, [r3, #0]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	20007704 	.word	0x20007704

080064c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064d0:	f7ff ffee 	bl	80064b0 <HAL_GetTick>
 80064d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064e0:	d005      	beq.n	80064ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80064e2:	4b0a      	ldr	r3, [pc, #40]	; (800650c <HAL_Delay+0x44>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80064ee:	bf00      	nop
 80064f0:	f7ff ffde 	bl	80064b0 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d8f7      	bhi.n	80064f0 <HAL_Delay+0x28>
  {
  }
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000040 	.word	0x20000040

08006510 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e033      	b.n	800658e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d109      	bne.n	8006542 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fd f9be 	bl	80038b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	f003 0310 	and.w	r3, r3, #16
 800654a:	2b00      	cmp	r3, #0
 800654c:	d118      	bne.n	8006580 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006556:	f023 0302 	bic.w	r3, r3, #2
 800655a:	f043 0202 	orr.w	r2, r3, #2
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa5a 	bl	8006a1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f023 0303 	bic.w	r3, r3, #3
 8006576:	f043 0201 	orr.w	r2, r3, #1
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	641a      	str	r2, [r3, #64]	; 0x40
 800657e:	e001      	b.n	8006584 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800658c:	7bfb      	ldrb	r3, [r7, #15]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_ADC_Start_DMA+0x1e>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e0e9      	b.n	800678a <HAL_ADC_Start_DMA+0x1f2>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d018      	beq.n	80065fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80065dc:	4b6d      	ldr	r3, [pc, #436]	; (8006794 <HAL_ADC_Start_DMA+0x1fc>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a6d      	ldr	r2, [pc, #436]	; (8006798 <HAL_ADC_Start_DMA+0x200>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	0c9a      	lsrs	r2, r3, #18
 80065e8:	4613      	mov	r3, r2
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	4413      	add	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80065f0:	e002      	b.n	80065f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1f9      	bne.n	80065f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800660c:	d107      	bne.n	800661e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800661c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b01      	cmp	r3, #1
 800662a:	f040 80a1 	bne.w	8006770 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006658:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666c:	d106      	bne.n	800667c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006672:	f023 0206 	bic.w	r2, r3, #6
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	645a      	str	r2, [r3, #68]	; 0x44
 800667a:	e002      	b.n	8006682 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800668a:	4b44      	ldr	r3, [pc, #272]	; (800679c <HAL_ADC_Start_DMA+0x204>)
 800668c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	4a43      	ldr	r2, [pc, #268]	; (80067a0 <HAL_ADC_Start_DMA+0x208>)
 8006694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	4a42      	ldr	r2, [pc, #264]	; (80067a4 <HAL_ADC_Start_DMA+0x20c>)
 800669c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	4a41      	ldr	r2, [pc, #260]	; (80067a8 <HAL_ADC_Start_DMA+0x210>)
 80066a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80066ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80066be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	334c      	adds	r3, #76	; 0x4c
 80066da:	4619      	mov	r1, r3
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f000 fcda 	bl	8007098 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f003 031f 	and.w	r3, r3, #31
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d12a      	bne.n	8006746 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a2d      	ldr	r2, [pc, #180]	; (80067ac <HAL_ADC_Start_DMA+0x214>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d015      	beq.n	8006726 <HAL_ADC_Start_DMA+0x18e>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a2c      	ldr	r2, [pc, #176]	; (80067b0 <HAL_ADC_Start_DMA+0x218>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d105      	bne.n	8006710 <HAL_ADC_Start_DMA+0x178>
 8006704:	4b25      	ldr	r3, [pc, #148]	; (800679c <HAL_ADC_Start_DMA+0x204>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f003 031f 	and.w	r3, r3, #31
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a27      	ldr	r2, [pc, #156]	; (80067b4 <HAL_ADC_Start_DMA+0x21c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d136      	bne.n	8006788 <HAL_ADC_Start_DMA+0x1f0>
 800671a:	4b20      	ldr	r3, [pc, #128]	; (800679c <HAL_ADC_Start_DMA+0x204>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f003 0310 	and.w	r3, r3, #16
 8006722:	2b00      	cmp	r3, #0
 8006724:	d130      	bne.n	8006788 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d129      	bne.n	8006788 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006742:	609a      	str	r2, [r3, #8]
 8006744:	e020      	b.n	8006788 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a18      	ldr	r2, [pc, #96]	; (80067ac <HAL_ADC_Start_DMA+0x214>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d11b      	bne.n	8006788 <HAL_ADC_Start_DMA+0x1f0>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d114      	bne.n	8006788 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800676c:	609a      	str	r2, [r3, #8]
 800676e:	e00b      	b.n	8006788 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006774:	f043 0210 	orr.w	r2, r3, #16
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006780:	f043 0201 	orr.w	r2, r3, #1
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000030 	.word	0x20000030
 8006798:	431bde83 	.word	0x431bde83
 800679c:	40012300 	.word	0x40012300
 80067a0:	08006c15 	.word	0x08006c15
 80067a4:	08006ccf 	.word	0x08006ccf
 80067a8:	08006ceb 	.word	0x08006ceb
 80067ac:	40012000 	.word	0x40012000
 80067b0:	40012100 	.word	0x40012100
 80067b4:	40012200 	.word	0x40012200

080067b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_ADC_ConfigChannel+0x1c>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e113      	b.n	80069fc <HAL_ADC_ConfigChannel+0x244>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b09      	cmp	r3, #9
 80067e2:	d925      	bls.n	8006830 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68d9      	ldr	r1, [r3, #12]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	4613      	mov	r3, r2
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	4413      	add	r3, r2
 80067f8:	3b1e      	subs	r3, #30
 80067fa:	2207      	movs	r2, #7
 80067fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006800:	43da      	mvns	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	400a      	ands	r2, r1
 8006808:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68d9      	ldr	r1, [r3, #12]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	4618      	mov	r0, r3
 800681c:	4603      	mov	r3, r0
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	4403      	add	r3, r0
 8006822:	3b1e      	subs	r3, #30
 8006824:	409a      	lsls	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	60da      	str	r2, [r3, #12]
 800682e:	e022      	b.n	8006876 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6919      	ldr	r1, [r3, #16]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	461a      	mov	r2, r3
 800683e:	4613      	mov	r3, r2
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	4413      	add	r3, r2
 8006844:	2207      	movs	r2, #7
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	43da      	mvns	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	400a      	ands	r2, r1
 8006852:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6919      	ldr	r1, [r3, #16]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	b29b      	uxth	r3, r3
 8006864:	4618      	mov	r0, r3
 8006866:	4603      	mov	r3, r0
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	4403      	add	r3, r0
 800686c:	409a      	lsls	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b06      	cmp	r3, #6
 800687c:	d824      	bhi.n	80068c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	3b05      	subs	r3, #5
 8006890:	221f      	movs	r2, #31
 8006892:	fa02 f303 	lsl.w	r3, r2, r3
 8006896:	43da      	mvns	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	400a      	ands	r2, r1
 800689e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	4618      	mov	r0, r3
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	4613      	mov	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	3b05      	subs	r3, #5
 80068ba:	fa00 f203 	lsl.w	r2, r0, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	635a      	str	r2, [r3, #52]	; 0x34
 80068c6:	e04c      	b.n	8006962 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b0c      	cmp	r3, #12
 80068ce:	d824      	bhi.n	800691a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	3b23      	subs	r3, #35	; 0x23
 80068e2:	221f      	movs	r2, #31
 80068e4:	fa02 f303 	lsl.w	r3, r2, r3
 80068e8:	43da      	mvns	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	400a      	ands	r2, r1
 80068f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	4618      	mov	r0, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	4613      	mov	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	3b23      	subs	r3, #35	; 0x23
 800690c:	fa00 f203 	lsl.w	r2, r0, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	631a      	str	r2, [r3, #48]	; 0x30
 8006918:	e023      	b.n	8006962 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	3b41      	subs	r3, #65	; 0x41
 800692c:	221f      	movs	r2, #31
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	43da      	mvns	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	400a      	ands	r2, r1
 800693a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	b29b      	uxth	r3, r3
 8006948:	4618      	mov	r0, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	3b41      	subs	r3, #65	; 0x41
 8006956:	fa00 f203 	lsl.w	r2, r0, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006962:	4b29      	ldr	r3, [pc, #164]	; (8006a08 <HAL_ADC_ConfigChannel+0x250>)
 8006964:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a28      	ldr	r2, [pc, #160]	; (8006a0c <HAL_ADC_ConfigChannel+0x254>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10f      	bne.n	8006990 <HAL_ADC_ConfigChannel+0x1d8>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b12      	cmp	r3, #18
 8006976:	d10b      	bne.n	8006990 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <HAL_ADC_ConfigChannel+0x254>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d12b      	bne.n	80069f2 <HAL_ADC_ConfigChannel+0x23a>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <HAL_ADC_ConfigChannel+0x258>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <HAL_ADC_ConfigChannel+0x1f4>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b11      	cmp	r3, #17
 80069aa:	d122      	bne.n	80069f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a11      	ldr	r2, [pc, #68]	; (8006a10 <HAL_ADC_ConfigChannel+0x258>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d111      	bne.n	80069f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80069ce:	4b11      	ldr	r3, [pc, #68]	; (8006a14 <HAL_ADC_ConfigChannel+0x25c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a11      	ldr	r2, [pc, #68]	; (8006a18 <HAL_ADC_ConfigChannel+0x260>)
 80069d4:	fba2 2303 	umull	r2, r3, r2, r3
 80069d8:	0c9a      	lsrs	r2, r3, #18
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80069e4:	e002      	b.n	80069ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	3b01      	subs	r3, #1
 80069ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f9      	bne.n	80069e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	40012300 	.word	0x40012300
 8006a0c:	40012000 	.word	0x40012000
 8006a10:	10000012 	.word	0x10000012
 8006a14:	20000030 	.word	0x20000030
 8006a18:	431bde83 	.word	0x431bde83

08006a1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a24:	4b79      	ldr	r3, [pc, #484]	; (8006c0c <ADC_Init+0x1f0>)
 8006a26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6859      	ldr	r1, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	021a      	lsls	r2, r3, #8
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006a74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6859      	ldr	r1, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6899      	ldr	r1, [r3, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aae:	4a58      	ldr	r2, [pc, #352]	; (8006c10 <ADC_Init+0x1f4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d022      	beq.n	8006afa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ac2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6899      	ldr	r1, [r3, #8]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6899      	ldr	r1, [r3, #8]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	609a      	str	r2, [r3, #8]
 8006af8:	e00f      	b.n	8006b1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0202 	bic.w	r2, r2, #2
 8006b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6899      	ldr	r1, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	7e1b      	ldrb	r3, [r3, #24]
 8006b34:	005a      	lsls	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01b      	beq.n	8006b80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006b66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6859      	ldr	r1, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	3b01      	subs	r3, #1
 8006b74:	035a      	lsls	r2, r3, #13
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
 8006b7e:	e007      	b.n	8006b90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	051a      	lsls	r2, r3, #20
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6899      	ldr	r1, [r3, #8]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bd2:	025a      	lsls	r2, r3, #9
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6899      	ldr	r1, [r3, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	029a      	lsls	r2, r3, #10
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	609a      	str	r2, [r3, #8]
}
 8006c00:	bf00      	nop
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	40012300 	.word	0x40012300
 8006c10:	0f000001 	.word	0x0f000001

08006c14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d13c      	bne.n	8006ca8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d12b      	bne.n	8006ca0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d127      	bne.n	8006ca0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d006      	beq.n	8006c6c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d119      	bne.n	8006ca0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0220 	bic.w	r2, r2, #32
 8006c7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d105      	bne.n	8006ca0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	f043 0201 	orr.w	r2, r3, #1
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f7fc fcf7 	bl	8003694 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006ca6:	e00e      	b.n	8006cc6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7fc fd2d 	bl	8003714 <HAL_ADC_ErrorCallback>
}
 8006cba:	e004      	b.n	8006cc6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4798      	blx	r3
}
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7fc fcf9 	bl	80036d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ce2:	bf00      	nop
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2240      	movs	r2, #64	; 0x40
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d02:	f043 0204 	orr.w	r2, r3, #4
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7fc fd02 	bl	8003714 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d10:	bf00      	nop
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d28:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <__NVIC_SetPriorityGrouping+0x44>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d34:	4013      	ands	r3, r2
 8006d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d4a:	4a04      	ldr	r2, [pc, #16]	; (8006d5c <__NVIC_SetPriorityGrouping+0x44>)
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	60d3      	str	r3, [r2, #12]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	e000ed00 	.word	0xe000ed00

08006d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d64:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <__NVIC_GetPriorityGrouping+0x18>)
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	0a1b      	lsrs	r3, r3, #8
 8006d6a:	f003 0307 	and.w	r3, r3, #7
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	e000ed00 	.word	0xe000ed00

08006d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	db0b      	blt.n	8006da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	f003 021f 	and.w	r2, r3, #31
 8006d94:	4907      	ldr	r1, [pc, #28]	; (8006db4 <__NVIC_EnableIRQ+0x38>)
 8006d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8006da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	e000e100 	.word	0xe000e100

08006db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	6039      	str	r1, [r7, #0]
 8006dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	db0a      	blt.n	8006de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	490c      	ldr	r1, [pc, #48]	; (8006e04 <__NVIC_SetPriority+0x4c>)
 8006dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dd6:	0112      	lsls	r2, r2, #4
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	440b      	add	r3, r1
 8006ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006de0:	e00a      	b.n	8006df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	4908      	ldr	r1, [pc, #32]	; (8006e08 <__NVIC_SetPriority+0x50>)
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	3b04      	subs	r3, #4
 8006df0:	0112      	lsls	r2, r2, #4
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	440b      	add	r3, r1
 8006df6:	761a      	strb	r2, [r3, #24]
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	e000e100 	.word	0xe000e100
 8006e08:	e000ed00 	.word	0xe000ed00

08006e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b089      	sub	sp, #36	; 0x24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f1c3 0307 	rsb	r3, r3, #7
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	bf28      	it	cs
 8006e2a:	2304      	movcs	r3, #4
 8006e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	3304      	adds	r3, #4
 8006e32:	2b06      	cmp	r3, #6
 8006e34:	d902      	bls.n	8006e3c <NVIC_EncodePriority+0x30>
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	3b03      	subs	r3, #3
 8006e3a:	e000      	b.n	8006e3e <NVIC_EncodePriority+0x32>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	43da      	mvns	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	401a      	ands	r2, r3
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5e:	43d9      	mvns	r1, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e64:	4313      	orrs	r3, r2
         );
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3724      	adds	r7, #36	; 0x24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
	...

08006e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e84:	d301      	bcc.n	8006e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e86:	2301      	movs	r3, #1
 8006e88:	e00f      	b.n	8006eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e8a:	4a0a      	ldr	r2, [pc, #40]	; (8006eb4 <SysTick_Config+0x40>)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e92:	210f      	movs	r1, #15
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e98:	f7ff ff8e 	bl	8006db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e9c:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <SysTick_Config+0x40>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ea2:	4b04      	ldr	r3, [pc, #16]	; (8006eb4 <SysTick_Config+0x40>)
 8006ea4:	2207      	movs	r2, #7
 8006ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	e000e010 	.word	0xe000e010

08006eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7ff ff29 	bl	8006d18 <__NVIC_SetPriorityGrouping>
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b086      	sub	sp, #24
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	607a      	str	r2, [r7, #4]
 8006eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ee0:	f7ff ff3e 	bl	8006d60 <__NVIC_GetPriorityGrouping>
 8006ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	68b9      	ldr	r1, [r7, #8]
 8006eea:	6978      	ldr	r0, [r7, #20]
 8006eec:	f7ff ff8e 	bl	8006e0c <NVIC_EncodePriority>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff ff5d 	bl	8006db8 <__NVIC_SetPriority>
}
 8006efe:	bf00      	nop
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff ff31 	bl	8006d7c <__NVIC_EnableIRQ>
}
 8006f1a:	bf00      	nop
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b082      	sub	sp, #8
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff ffa2 	bl	8006e74 <SysTick_Config>
 8006f30:	4603      	mov	r3, r0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006f48:	f7ff fab2 	bl	80064b0 <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e099      	b.n	800708c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0201 	bic.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f78:	e00f      	b.n	8006f9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f7a:	f7ff fa99 	bl	80064b0 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b05      	cmp	r3, #5
 8006f86:	d908      	bls.n	8006f9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2203      	movs	r2, #3
 8006f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e078      	b.n	800708c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e8      	bne.n	8006f7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4b38      	ldr	r3, [pc, #224]	; (8007094 <HAL_DMA_Init+0x158>)
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	2b04      	cmp	r3, #4
 8006ff2:	d107      	bne.n	8007004 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f023 0307 	bic.w	r3, r3, #7
 800701a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	2b04      	cmp	r3, #4
 800702c:	d117      	bne.n	800705e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	4313      	orrs	r3, r2
 8007036:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00e      	beq.n	800705e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fb01 	bl	8007648 <DMA_CheckFifoParam>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d008      	beq.n	800705e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2240      	movs	r2, #64	; 0x40
 8007050:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800705a:	2301      	movs	r3, #1
 800705c:	e016      	b.n	800708c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fab8 	bl	80075dc <DMA_CalcBaseAndBitshift>
 800706c:	4603      	mov	r3, r0
 800706e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007074:	223f      	movs	r2, #63	; 0x3f
 8007076:	409a      	lsls	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	f010803f 	.word	0xf010803f

08007098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_DMA_Start_IT+0x26>
 80070ba:	2302      	movs	r3, #2
 80070bc:	e040      	b.n	8007140 <HAL_DMA_Start_IT+0xa8>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d12f      	bne.n	8007132 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2202      	movs	r2, #2
 80070d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f000 fa4a 	bl	8007580 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f0:	223f      	movs	r2, #63	; 0x3f
 80070f2:	409a      	lsls	r2, r3
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0216 	orr.w	r2, r2, #22
 8007106:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	2b00      	cmp	r3, #0
 800710e:	d007      	beq.n	8007120 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0208 	orr.w	r2, r2, #8
 800711e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	e005      	b.n	800713e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800713a:	2302      	movs	r3, #2
 800713c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800713e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007154:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007156:	f7ff f9ab 	bl	80064b0 <HAL_GetTick>
 800715a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d008      	beq.n	800717a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2280      	movs	r2, #128	; 0x80
 800716c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e052      	b.n	8007220 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0216 	bic.w	r2, r2, #22
 8007188:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	695a      	ldr	r2, [r3, #20]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007198:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d103      	bne.n	80071aa <HAL_DMA_Abort+0x62>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d007      	beq.n	80071ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0208 	bic.w	r2, r2, #8
 80071b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0201 	bic.w	r2, r2, #1
 80071c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071ca:	e013      	b.n	80071f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071cc:	f7ff f970 	bl	80064b0 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b05      	cmp	r3, #5
 80071d8:	d90c      	bls.n	80071f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2203      	movs	r2, #3
 80071e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e015      	b.n	8007220 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e4      	bne.n	80071cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007206:	223f      	movs	r2, #63	; 0x3f
 8007208:	409a      	lsls	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d004      	beq.n	8007246 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2280      	movs	r2, #128	; 0x80
 8007240:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e00c      	b.n	8007260 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2205      	movs	r2, #5
 800724a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0201 	bic.w	r2, r2, #1
 800725c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007278:	4b8e      	ldr	r3, [pc, #568]	; (80074b4 <HAL_DMA_IRQHandler+0x248>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a8e      	ldr	r2, [pc, #568]	; (80074b8 <HAL_DMA_IRQHandler+0x24c>)
 800727e:	fba2 2303 	umull	r2, r3, r2, r3
 8007282:	0a9b      	lsrs	r3, r3, #10
 8007284:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800728a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007296:	2208      	movs	r2, #8
 8007298:	409a      	lsls	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4013      	ands	r3, r2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d01a      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d013      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0204 	bic.w	r2, r2, #4
 80072be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c4:	2208      	movs	r2, #8
 80072c6:	409a      	lsls	r2, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d0:	f043 0201 	orr.w	r2, r3, #1
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072dc:	2201      	movs	r2, #1
 80072de:	409a      	lsls	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d012      	beq.n	800730e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00b      	beq.n	800730e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fa:	2201      	movs	r2, #1
 80072fc:	409a      	lsls	r2, r3
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007306:	f043 0202 	orr.w	r2, r3, #2
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007312:	2204      	movs	r2, #4
 8007314:	409a      	lsls	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4013      	ands	r3, r2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d012      	beq.n	8007344 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007330:	2204      	movs	r2, #4
 8007332:	409a      	lsls	r2, r3
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733c:	f043 0204 	orr.w	r2, r3, #4
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007348:	2210      	movs	r2, #16
 800734a:	409a      	lsls	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4013      	ands	r3, r2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d043      	beq.n	80073dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0308 	and.w	r3, r3, #8
 800735e:	2b00      	cmp	r3, #0
 8007360:	d03c      	beq.n	80073dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007366:	2210      	movs	r2, #16
 8007368:	409a      	lsls	r2, r3
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d018      	beq.n	80073ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d108      	bne.n	800739c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	2b00      	cmp	r3, #0
 8007390:	d024      	beq.n	80073dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	4798      	blx	r3
 800739a:	e01f      	b.n	80073dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d01b      	beq.n	80073dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	4798      	blx	r3
 80073ac:	e016      	b.n	80073dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d107      	bne.n	80073cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0208 	bic.w	r2, r2, #8
 80073ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e0:	2220      	movs	r2, #32
 80073e2:	409a      	lsls	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 808f 	beq.w	800750c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 8087 	beq.w	800750c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007402:	2220      	movs	r2, #32
 8007404:	409a      	lsls	r2, r3
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b05      	cmp	r3, #5
 8007414:	d136      	bne.n	8007484 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0216 	bic.w	r2, r2, #22
 8007424:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695a      	ldr	r2, [r3, #20]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007434:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	2b00      	cmp	r3, #0
 800743c:	d103      	bne.n	8007446 <HAL_DMA_IRQHandler+0x1da>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007442:	2b00      	cmp	r3, #0
 8007444:	d007      	beq.n	8007456 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0208 	bic.w	r2, r2, #8
 8007454:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800745a:	223f      	movs	r2, #63	; 0x3f
 800745c:	409a      	lsls	r2, r3
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007476:	2b00      	cmp	r3, #0
 8007478:	d07e      	beq.n	8007578 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4798      	blx	r3
        }
        return;
 8007482:	e079      	b.n	8007578 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d01d      	beq.n	80074ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10d      	bne.n	80074bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d031      	beq.n	800750c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	4798      	blx	r3
 80074b0:	e02c      	b.n	800750c <HAL_DMA_IRQHandler+0x2a0>
 80074b2:	bf00      	nop
 80074b4:	20000030 	.word	0x20000030
 80074b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d023      	beq.n	800750c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	4798      	blx	r3
 80074cc:	e01e      	b.n	800750c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10f      	bne.n	80074fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0210 	bic.w	r2, r2, #16
 80074ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007510:	2b00      	cmp	r3, #0
 8007512:	d032      	beq.n	800757a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d022      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2205      	movs	r2, #5
 8007524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0201 	bic.w	r2, r2, #1
 8007536:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	3301      	adds	r3, #1
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	429a      	cmp	r2, r3
 8007542:	d307      	bcc.n	8007554 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1f2      	bne.n	8007538 <HAL_DMA_IRQHandler+0x2cc>
 8007552:	e000      	b.n	8007556 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007554:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	4798      	blx	r3
 8007576:	e000      	b.n	800757a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007578:	bf00      	nop
    }
  }
}
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800759c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	2b40      	cmp	r3, #64	; 0x40
 80075ac:	d108      	bne.n	80075c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80075be:	e007      	b.n	80075d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	60da      	str	r2, [r3, #12]
}
 80075d0:	bf00      	nop
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	3b10      	subs	r3, #16
 80075ec:	4a14      	ldr	r2, [pc, #80]	; (8007640 <DMA_CalcBaseAndBitshift+0x64>)
 80075ee:	fba2 2303 	umull	r2, r3, r2, r3
 80075f2:	091b      	lsrs	r3, r3, #4
 80075f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075f6:	4a13      	ldr	r2, [pc, #76]	; (8007644 <DMA_CalcBaseAndBitshift+0x68>)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4413      	add	r3, r2
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b03      	cmp	r3, #3
 8007608:	d909      	bls.n	800761e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007612:	f023 0303 	bic.w	r3, r3, #3
 8007616:	1d1a      	adds	r2, r3, #4
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	659a      	str	r2, [r3, #88]	; 0x58
 800761c:	e007      	b.n	800762e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007626:	f023 0303 	bic.w	r3, r3, #3
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	aaaaaaab 	.word	0xaaaaaaab
 8007644:	08010b0c 	.word	0x08010b0c

08007648 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d11f      	bne.n	80076a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b03      	cmp	r3, #3
 8007666:	d856      	bhi.n	8007716 <DMA_CheckFifoParam+0xce>
 8007668:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <DMA_CheckFifoParam+0x28>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	08007681 	.word	0x08007681
 8007674:	08007693 	.word	0x08007693
 8007678:	08007681 	.word	0x08007681
 800767c:	08007717 	.word	0x08007717
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d046      	beq.n	800771a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007690:	e043      	b.n	800771a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007696:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800769a:	d140      	bne.n	800771e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076a0:	e03d      	b.n	800771e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076aa:	d121      	bne.n	80076f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d837      	bhi.n	8007722 <DMA_CheckFifoParam+0xda>
 80076b2:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <DMA_CheckFifoParam+0x70>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	080076c9 	.word	0x080076c9
 80076bc:	080076cf 	.word	0x080076cf
 80076c0:	080076c9 	.word	0x080076c9
 80076c4:	080076e1 	.word	0x080076e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	73fb      	strb	r3, [r7, #15]
      break;
 80076cc:	e030      	b.n	8007730 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d025      	beq.n	8007726 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076de:	e022      	b.n	8007726 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076e8:	d11f      	bne.n	800772a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80076ee:	e01c      	b.n	800772a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d903      	bls.n	80076fe <DMA_CheckFifoParam+0xb6>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d003      	beq.n	8007704 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80076fc:	e018      	b.n	8007730 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	73fb      	strb	r3, [r7, #15]
      break;
 8007702:	e015      	b.n	8007730 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00e      	beq.n	800772e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
      break;
 8007714:	e00b      	b.n	800772e <DMA_CheckFifoParam+0xe6>
      break;
 8007716:	bf00      	nop
 8007718:	e00a      	b.n	8007730 <DMA_CheckFifoParam+0xe8>
      break;
 800771a:	bf00      	nop
 800771c:	e008      	b.n	8007730 <DMA_CheckFifoParam+0xe8>
      break;
 800771e:	bf00      	nop
 8007720:	e006      	b.n	8007730 <DMA_CheckFifoParam+0xe8>
      break;
 8007722:	bf00      	nop
 8007724:	e004      	b.n	8007730 <DMA_CheckFifoParam+0xe8>
      break;
 8007726:	bf00      	nop
 8007728:	e002      	b.n	8007730 <DMA_CheckFifoParam+0xe8>
      break;   
 800772a:	bf00      	nop
 800772c:	e000      	b.n	8007730 <DMA_CheckFifoParam+0xe8>
      break;
 800772e:	bf00      	nop
    }
  } 
  
  return status; 
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop

08007740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007740:	b480      	push	{r7}
 8007742:	b089      	sub	sp, #36	; 0x24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800774e:	2300      	movs	r3, #0
 8007750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007752:	2300      	movs	r3, #0
 8007754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007756:	2300      	movs	r3, #0
 8007758:	61fb      	str	r3, [r7, #28]
 800775a:	e165      	b.n	8007a28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800775c:	2201      	movs	r2, #1
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4013      	ands	r3, r2
 800776e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	429a      	cmp	r2, r3
 8007776:	f040 8154 	bne.w	8007a22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	2b01      	cmp	r3, #1
 8007784:	d005      	beq.n	8007792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800778e:	2b02      	cmp	r3, #2
 8007790:	d130      	bne.n	80077f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	2203      	movs	r2, #3
 800779e:	fa02 f303 	lsl.w	r3, r2, r3
 80077a2:	43db      	mvns	r3, r3
 80077a4:	69ba      	ldr	r2, [r7, #24]
 80077a6:	4013      	ands	r3, r2
 80077a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	fa02 f303 	lsl.w	r3, r2, r3
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077c8:	2201      	movs	r2, #1
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	fa02 f303 	lsl.w	r3, r2, r3
 80077d0:	43db      	mvns	r3, r3
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	4013      	ands	r3, r2
 80077d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	091b      	lsrs	r3, r3, #4
 80077de:	f003 0201 	and.w	r2, r3, #1
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	fa02 f303 	lsl.w	r3, r2, r3
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f003 0303 	and.w	r3, r3, #3
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d017      	beq.n	8007830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	2203      	movs	r2, #3
 800780c:	fa02 f303 	lsl.w	r3, r2, r3
 8007810:	43db      	mvns	r3, r3
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	4013      	ands	r3, r2
 8007816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	fa02 f303 	lsl.w	r3, r2, r3
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	4313      	orrs	r3, r2
 8007828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f003 0303 	and.w	r3, r3, #3
 8007838:	2b02      	cmp	r3, #2
 800783a:	d123      	bne.n	8007884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	08da      	lsrs	r2, r3, #3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3208      	adds	r2, #8
 8007844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	f003 0307 	and.w	r3, r3, #7
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	220f      	movs	r2, #15
 8007854:	fa02 f303 	lsl.w	r3, r2, r3
 8007858:	43db      	mvns	r3, r3
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	4013      	ands	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	fa02 f303 	lsl.w	r3, r2, r3
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	4313      	orrs	r3, r2
 8007874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	08da      	lsrs	r2, r3, #3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3208      	adds	r2, #8
 800787e:	69b9      	ldr	r1, [r7, #24]
 8007880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	2203      	movs	r2, #3
 8007890:	fa02 f303 	lsl.w	r3, r2, r3
 8007894:	43db      	mvns	r3, r3
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	4013      	ands	r3, r2
 800789a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f003 0203 	and.w	r2, r3, #3
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 80ae 	beq.w	8007a22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	4b5d      	ldr	r3, [pc, #372]	; (8007a40 <HAL_GPIO_Init+0x300>)
 80078cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ce:	4a5c      	ldr	r2, [pc, #368]	; (8007a40 <HAL_GPIO_Init+0x300>)
 80078d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078d4:	6453      	str	r3, [r2, #68]	; 0x44
 80078d6:	4b5a      	ldr	r3, [pc, #360]	; (8007a40 <HAL_GPIO_Init+0x300>)
 80078d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078e2:	4a58      	ldr	r2, [pc, #352]	; (8007a44 <HAL_GPIO_Init+0x304>)
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	089b      	lsrs	r3, r3, #2
 80078e8:	3302      	adds	r3, #2
 80078ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	f003 0303 	and.w	r3, r3, #3
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	220f      	movs	r2, #15
 80078fa:	fa02 f303 	lsl.w	r3, r2, r3
 80078fe:	43db      	mvns	r3, r3
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	4013      	ands	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a4f      	ldr	r2, [pc, #316]	; (8007a48 <HAL_GPIO_Init+0x308>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d025      	beq.n	800795a <HAL_GPIO_Init+0x21a>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a4e      	ldr	r2, [pc, #312]	; (8007a4c <HAL_GPIO_Init+0x30c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d01f      	beq.n	8007956 <HAL_GPIO_Init+0x216>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a4d      	ldr	r2, [pc, #308]	; (8007a50 <HAL_GPIO_Init+0x310>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d019      	beq.n	8007952 <HAL_GPIO_Init+0x212>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a4c      	ldr	r2, [pc, #304]	; (8007a54 <HAL_GPIO_Init+0x314>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d013      	beq.n	800794e <HAL_GPIO_Init+0x20e>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a4b      	ldr	r2, [pc, #300]	; (8007a58 <HAL_GPIO_Init+0x318>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d00d      	beq.n	800794a <HAL_GPIO_Init+0x20a>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a4a      	ldr	r2, [pc, #296]	; (8007a5c <HAL_GPIO_Init+0x31c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d007      	beq.n	8007946 <HAL_GPIO_Init+0x206>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a49      	ldr	r2, [pc, #292]	; (8007a60 <HAL_GPIO_Init+0x320>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d101      	bne.n	8007942 <HAL_GPIO_Init+0x202>
 800793e:	2306      	movs	r3, #6
 8007940:	e00c      	b.n	800795c <HAL_GPIO_Init+0x21c>
 8007942:	2307      	movs	r3, #7
 8007944:	e00a      	b.n	800795c <HAL_GPIO_Init+0x21c>
 8007946:	2305      	movs	r3, #5
 8007948:	e008      	b.n	800795c <HAL_GPIO_Init+0x21c>
 800794a:	2304      	movs	r3, #4
 800794c:	e006      	b.n	800795c <HAL_GPIO_Init+0x21c>
 800794e:	2303      	movs	r3, #3
 8007950:	e004      	b.n	800795c <HAL_GPIO_Init+0x21c>
 8007952:	2302      	movs	r3, #2
 8007954:	e002      	b.n	800795c <HAL_GPIO_Init+0x21c>
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <HAL_GPIO_Init+0x21c>
 800795a:	2300      	movs	r3, #0
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	f002 0203 	and.w	r2, r2, #3
 8007962:	0092      	lsls	r2, r2, #2
 8007964:	4093      	lsls	r3, r2
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	4313      	orrs	r3, r2
 800796a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800796c:	4935      	ldr	r1, [pc, #212]	; (8007a44 <HAL_GPIO_Init+0x304>)
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	089b      	lsrs	r3, r3, #2
 8007972:	3302      	adds	r3, #2
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800797a:	4b3a      	ldr	r3, [pc, #232]	; (8007a64 <HAL_GPIO_Init+0x324>)
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	43db      	mvns	r3, r3
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	4013      	ands	r3, r2
 8007988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4313      	orrs	r3, r2
 800799c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800799e:	4a31      	ldr	r2, [pc, #196]	; (8007a64 <HAL_GPIO_Init+0x324>)
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079a4:	4b2f      	ldr	r3, [pc, #188]	; (8007a64 <HAL_GPIO_Init+0x324>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	43db      	mvns	r3, r3
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	4013      	ands	r3, r2
 80079b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80079c8:	4a26      	ldr	r2, [pc, #152]	; (8007a64 <HAL_GPIO_Init+0x324>)
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80079ce:	4b25      	ldr	r3, [pc, #148]	; (8007a64 <HAL_GPIO_Init+0x324>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	43db      	mvns	r3, r3
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	4013      	ands	r3, r2
 80079dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80079f2:	4a1c      	ldr	r2, [pc, #112]	; (8007a64 <HAL_GPIO_Init+0x324>)
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80079f8:	4b1a      	ldr	r3, [pc, #104]	; (8007a64 <HAL_GPIO_Init+0x324>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	43db      	mvns	r3, r3
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	4013      	ands	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a1c:	4a11      	ldr	r2, [pc, #68]	; (8007a64 <HAL_GPIO_Init+0x324>)
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	3301      	adds	r3, #1
 8007a26:	61fb      	str	r3, [r7, #28]
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2b0f      	cmp	r3, #15
 8007a2c:	f67f ae96 	bls.w	800775c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	3724      	adds	r7, #36	; 0x24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	40023800 	.word	0x40023800
 8007a44:	40013800 	.word	0x40013800
 8007a48:	40020000 	.word	0x40020000
 8007a4c:	40020400 	.word	0x40020400
 8007a50:	40020800 	.word	0x40020800
 8007a54:	40020c00 	.word	0x40020c00
 8007a58:	40021000 	.word	0x40021000
 8007a5c:	40021400 	.word	0x40021400
 8007a60:	40021800 	.word	0x40021800
 8007a64:	40013c00 	.word	0x40013c00

08007a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691a      	ldr	r2, [r3, #16]
 8007a78:	887b      	ldrh	r3, [r7, #2]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a80:	2301      	movs	r3, #1
 8007a82:	73fb      	strb	r3, [r7, #15]
 8007a84:	e001      	b.n	8007a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a86:	2300      	movs	r3, #0
 8007a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	807b      	strh	r3, [r7, #2]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007aa8:	787b      	ldrb	r3, [r7, #1]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007aae:	887a      	ldrh	r2, [r7, #2]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ab4:	e003      	b.n	8007abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007ab6:	887b      	ldrh	r3, [r7, #2]
 8007ab8:	041a      	lsls	r2, r3, #16
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	619a      	str	r2, [r3, #24]
}
 8007abe:	bf00      	nop
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b085      	sub	sp, #20
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007adc:	887a      	ldrh	r2, [r7, #2]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	041a      	lsls	r2, r3, #16
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	43d9      	mvns	r1, r3
 8007ae8:	887b      	ldrh	r3, [r7, #2]
 8007aea:	400b      	ands	r3, r1
 8007aec:	431a      	orrs	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	619a      	str	r2, [r3, #24]
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
	...

08007b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007b0a:	4b08      	ldr	r3, [pc, #32]	; (8007b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b0c:	695a      	ldr	r2, [r3, #20]
 8007b0e:	88fb      	ldrh	r3, [r7, #6]
 8007b10:	4013      	ands	r3, r2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d006      	beq.n	8007b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007b16:	4a05      	ldr	r2, [pc, #20]	; (8007b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007b1c:	88fb      	ldrh	r3, [r7, #6]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 f806 	bl	8007b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	40013c00 	.word	0x40013c00

08007b30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
	...

08007b48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007b52:	2300      	movs	r3, #0
 8007b54:	603b      	str	r3, [r7, #0]
 8007b56:	4b20      	ldr	r3, [pc, #128]	; (8007bd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	4a1f      	ldr	r2, [pc, #124]	; (8007bd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b60:	6413      	str	r3, [r2, #64]	; 0x40
 8007b62:	4b1d      	ldr	r3, [pc, #116]	; (8007bd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007b6e:	4b1b      	ldr	r3, [pc, #108]	; (8007bdc <HAL_PWREx_EnableOverDrive+0x94>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b74:	f7fe fc9c 	bl	80064b0 <HAL_GetTick>
 8007b78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007b7a:	e009      	b.n	8007b90 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007b7c:	f7fe fc98 	bl	80064b0 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b8a:	d901      	bls.n	8007b90 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e01f      	b.n	8007bd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007b90:	4b13      	ldr	r3, [pc, #76]	; (8007be0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b9c:	d1ee      	bne.n	8007b7c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007b9e:	4b11      	ldr	r3, [pc, #68]	; (8007be4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ba4:	f7fe fc84 	bl	80064b0 <HAL_GetTick>
 8007ba8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007baa:	e009      	b.n	8007bc0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007bac:	f7fe fc80 	bl	80064b0 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bba:	d901      	bls.n	8007bc0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e007      	b.n	8007bd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007bc0:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bcc:	d1ee      	bne.n	8007bac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	40023800 	.word	0x40023800
 8007bdc:	420e0040 	.word	0x420e0040
 8007be0:	40007000 	.word	0x40007000
 8007be4:	420e0044 	.word	0x420e0044

08007be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e0cc      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bfc:	4b68      	ldr	r3, [pc, #416]	; (8007da0 <HAL_RCC_ClockConfig+0x1b8>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 030f 	and.w	r3, r3, #15
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d90c      	bls.n	8007c24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c0a:	4b65      	ldr	r3, [pc, #404]	; (8007da0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c12:	4b63      	ldr	r3, [pc, #396]	; (8007da0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 030f 	and.w	r3, r3, #15
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d001      	beq.n	8007c24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e0b8      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d020      	beq.n	8007c72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d005      	beq.n	8007c48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c3c:	4b59      	ldr	r3, [pc, #356]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	4a58      	ldr	r2, [pc, #352]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0308 	and.w	r3, r3, #8
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c54:	4b53      	ldr	r3, [pc, #332]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	4a52      	ldr	r2, [pc, #328]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c60:	4b50      	ldr	r3, [pc, #320]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	494d      	ldr	r1, [pc, #308]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d044      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d107      	bne.n	8007c96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c86:	4b47      	ldr	r3, [pc, #284]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d119      	bne.n	8007cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e07f      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d003      	beq.n	8007ca6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d107      	bne.n	8007cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ca6:	4b3f      	ldr	r3, [pc, #252]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d109      	bne.n	8007cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e06f      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cb6:	4b3b      	ldr	r3, [pc, #236]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e067      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cc6:	4b37      	ldr	r3, [pc, #220]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f023 0203 	bic.w	r2, r3, #3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	4934      	ldr	r1, [pc, #208]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cd8:	f7fe fbea 	bl	80064b0 <HAL_GetTick>
 8007cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cde:	e00a      	b.n	8007cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ce0:	f7fe fbe6 	bl	80064b0 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e04f      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cf6:	4b2b      	ldr	r3, [pc, #172]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f003 020c 	and.w	r2, r3, #12
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d1eb      	bne.n	8007ce0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d08:	4b25      	ldr	r3, [pc, #148]	; (8007da0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 030f 	and.w	r3, r3, #15
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d20c      	bcs.n	8007d30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d16:	4b22      	ldr	r3, [pc, #136]	; (8007da0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d1e:	4b20      	ldr	r3, [pc, #128]	; (8007da0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 030f 	and.w	r3, r3, #15
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d001      	beq.n	8007d30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e032      	b.n	8007d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d008      	beq.n	8007d4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d3c:	4b19      	ldr	r3, [pc, #100]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	4916      	ldr	r1, [pc, #88]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d5a:	4b12      	ldr	r3, [pc, #72]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	490e      	ldr	r1, [pc, #56]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d6e:	f000 f855 	bl	8007e1c <HAL_RCC_GetSysClockFreq>
 8007d72:	4602      	mov	r2, r0
 8007d74:	4b0b      	ldr	r3, [pc, #44]	; (8007da4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	091b      	lsrs	r3, r3, #4
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	490a      	ldr	r1, [pc, #40]	; (8007da8 <HAL_RCC_ClockConfig+0x1c0>)
 8007d80:	5ccb      	ldrb	r3, [r1, r3]
 8007d82:	fa22 f303 	lsr.w	r3, r2, r3
 8007d86:	4a09      	ldr	r2, [pc, #36]	; (8007dac <HAL_RCC_ClockConfig+0x1c4>)
 8007d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d8a:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <HAL_RCC_ClockConfig+0x1c8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe fb4a 	bl	8006428 <HAL_InitTick>

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	40023c00 	.word	0x40023c00
 8007da4:	40023800 	.word	0x40023800
 8007da8:	08010af4 	.word	0x08010af4
 8007dac:	20000030 	.word	0x20000030
 8007db0:	2000003c 	.word	0x2000003c

08007db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007db8:	4b03      	ldr	r3, [pc, #12]	; (8007dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dba:	681b      	ldr	r3, [r3, #0]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	20000030 	.word	0x20000030

08007dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007dd0:	f7ff fff0 	bl	8007db4 <HAL_RCC_GetHCLKFreq>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	0a9b      	lsrs	r3, r3, #10
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	4903      	ldr	r1, [pc, #12]	; (8007df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007de2:	5ccb      	ldrb	r3, [r1, r3]
 8007de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	40023800 	.word	0x40023800
 8007df0:	08010b04 	.word	0x08010b04

08007df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007df8:	f7ff ffdc 	bl	8007db4 <HAL_RCC_GetHCLKFreq>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	0b5b      	lsrs	r3, r3, #13
 8007e04:	f003 0307 	and.w	r3, r3, #7
 8007e08:	4903      	ldr	r1, [pc, #12]	; (8007e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e0a:	5ccb      	ldrb	r3, [r1, r3]
 8007e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	40023800 	.word	0x40023800
 8007e18:	08010b04 	.word	0x08010b04

08007e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e20:	b0ae      	sub	sp, #184	; 0xb8
 8007e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007e30:	2300      	movs	r3, #0
 8007e32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e42:	4bcb      	ldr	r3, [pc, #812]	; (8008170 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f003 030c 	and.w	r3, r3, #12
 8007e4a:	2b0c      	cmp	r3, #12
 8007e4c:	f200 8206 	bhi.w	800825c <HAL_RCC_GetSysClockFreq+0x440>
 8007e50:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e56:	bf00      	nop
 8007e58:	08007e8d 	.word	0x08007e8d
 8007e5c:	0800825d 	.word	0x0800825d
 8007e60:	0800825d 	.word	0x0800825d
 8007e64:	0800825d 	.word	0x0800825d
 8007e68:	08007e95 	.word	0x08007e95
 8007e6c:	0800825d 	.word	0x0800825d
 8007e70:	0800825d 	.word	0x0800825d
 8007e74:	0800825d 	.word	0x0800825d
 8007e78:	08007e9d 	.word	0x08007e9d
 8007e7c:	0800825d 	.word	0x0800825d
 8007e80:	0800825d 	.word	0x0800825d
 8007e84:	0800825d 	.word	0x0800825d
 8007e88:	0800808d 	.word	0x0800808d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e8c:	4bb9      	ldr	r3, [pc, #740]	; (8008174 <HAL_RCC_GetSysClockFreq+0x358>)
 8007e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007e92:	e1e7      	b.n	8008264 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e94:	4bb8      	ldr	r3, [pc, #736]	; (8008178 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007e96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007e9a:	e1e3      	b.n	8008264 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e9c:	4bb4      	ldr	r3, [pc, #720]	; (8008170 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ea8:	4bb1      	ldr	r3, [pc, #708]	; (8008170 <HAL_RCC_GetSysClockFreq+0x354>)
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d071      	beq.n	8007f98 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eb4:	4bae      	ldr	r3, [pc, #696]	; (8008170 <HAL_RCC_GetSysClockFreq+0x354>)
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	099b      	lsrs	r3, r3, #6
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ec0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ecc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ed6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007eda:	4622      	mov	r2, r4
 8007edc:	462b      	mov	r3, r5
 8007ede:	f04f 0000 	mov.w	r0, #0
 8007ee2:	f04f 0100 	mov.w	r1, #0
 8007ee6:	0159      	lsls	r1, r3, #5
 8007ee8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007eec:	0150      	lsls	r0, r2, #5
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	1a51      	subs	r1, r2, r1
 8007ef6:	6439      	str	r1, [r7, #64]	; 0x40
 8007ef8:	4629      	mov	r1, r5
 8007efa:	eb63 0301 	sbc.w	r3, r3, r1
 8007efe:	647b      	str	r3, [r7, #68]	; 0x44
 8007f00:	f04f 0200 	mov.w	r2, #0
 8007f04:	f04f 0300 	mov.w	r3, #0
 8007f08:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	018b      	lsls	r3, r1, #6
 8007f10:	4641      	mov	r1, r8
 8007f12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f16:	4641      	mov	r1, r8
 8007f18:	018a      	lsls	r2, r1, #6
 8007f1a:	4641      	mov	r1, r8
 8007f1c:	1a51      	subs	r1, r2, r1
 8007f1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f20:	4649      	mov	r1, r9
 8007f22:	eb63 0301 	sbc.w	r3, r3, r1
 8007f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f28:	f04f 0200 	mov.w	r2, #0
 8007f2c:	f04f 0300 	mov.w	r3, #0
 8007f30:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007f34:	4649      	mov	r1, r9
 8007f36:	00cb      	lsls	r3, r1, #3
 8007f38:	4641      	mov	r1, r8
 8007f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f3e:	4641      	mov	r1, r8
 8007f40:	00ca      	lsls	r2, r1, #3
 8007f42:	4610      	mov	r0, r2
 8007f44:	4619      	mov	r1, r3
 8007f46:	4603      	mov	r3, r0
 8007f48:	4622      	mov	r2, r4
 8007f4a:	189b      	adds	r3, r3, r2
 8007f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8007f4e:	462b      	mov	r3, r5
 8007f50:	460a      	mov	r2, r1
 8007f52:	eb42 0303 	adc.w	r3, r2, r3
 8007f56:	637b      	str	r3, [r7, #52]	; 0x34
 8007f58:	f04f 0200 	mov.w	r2, #0
 8007f5c:	f04f 0300 	mov.w	r3, #0
 8007f60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007f64:	4629      	mov	r1, r5
 8007f66:	024b      	lsls	r3, r1, #9
 8007f68:	4621      	mov	r1, r4
 8007f6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f6e:	4621      	mov	r1, r4
 8007f70:	024a      	lsls	r2, r1, #9
 8007f72:	4610      	mov	r0, r2
 8007f74:	4619      	mov	r1, r3
 8007f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007f88:	f7f8 fece 	bl	8000d28 <__aeabi_uldivmod>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4613      	mov	r3, r2
 8007f92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f96:	e067      	b.n	8008068 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f98:	4b75      	ldr	r3, [pc, #468]	; (8008170 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	099b      	lsrs	r3, r3, #6
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fa4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fb6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007fba:	4622      	mov	r2, r4
 8007fbc:	462b      	mov	r3, r5
 8007fbe:	f04f 0000 	mov.w	r0, #0
 8007fc2:	f04f 0100 	mov.w	r1, #0
 8007fc6:	0159      	lsls	r1, r3, #5
 8007fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fcc:	0150      	lsls	r0, r2, #5
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	1a51      	subs	r1, r2, r1
 8007fd6:	62b9      	str	r1, [r7, #40]	; 0x28
 8007fd8:	4629      	mov	r1, r5
 8007fda:	eb63 0301 	sbc.w	r3, r3, r1
 8007fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fe0:	f04f 0200 	mov.w	r2, #0
 8007fe4:	f04f 0300 	mov.w	r3, #0
 8007fe8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007fec:	4649      	mov	r1, r9
 8007fee:	018b      	lsls	r3, r1, #6
 8007ff0:	4641      	mov	r1, r8
 8007ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ff6:	4641      	mov	r1, r8
 8007ff8:	018a      	lsls	r2, r1, #6
 8007ffa:	4641      	mov	r1, r8
 8007ffc:	ebb2 0a01 	subs.w	sl, r2, r1
 8008000:	4649      	mov	r1, r9
 8008002:	eb63 0b01 	sbc.w	fp, r3, r1
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008012:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008016:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800801a:	4692      	mov	sl, r2
 800801c:	469b      	mov	fp, r3
 800801e:	4623      	mov	r3, r4
 8008020:	eb1a 0303 	adds.w	r3, sl, r3
 8008024:	623b      	str	r3, [r7, #32]
 8008026:	462b      	mov	r3, r5
 8008028:	eb4b 0303 	adc.w	r3, fp, r3
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
 800802e:	f04f 0200 	mov.w	r2, #0
 8008032:	f04f 0300 	mov.w	r3, #0
 8008036:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800803a:	4629      	mov	r1, r5
 800803c:	028b      	lsls	r3, r1, #10
 800803e:	4621      	mov	r1, r4
 8008040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008044:	4621      	mov	r1, r4
 8008046:	028a      	lsls	r2, r1, #10
 8008048:	4610      	mov	r0, r2
 800804a:	4619      	mov	r1, r3
 800804c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008050:	2200      	movs	r2, #0
 8008052:	673b      	str	r3, [r7, #112]	; 0x70
 8008054:	677a      	str	r2, [r7, #116]	; 0x74
 8008056:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800805a:	f7f8 fe65 	bl	8000d28 <__aeabi_uldivmod>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4613      	mov	r3, r2
 8008064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008068:	4b41      	ldr	r3, [pc, #260]	; (8008170 <HAL_RCC_GetSysClockFreq+0x354>)
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	0c1b      	lsrs	r3, r3, #16
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	3301      	adds	r3, #1
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800807a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800807e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008082:	fbb2 f3f3 	udiv	r3, r2, r3
 8008086:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800808a:	e0eb      	b.n	8008264 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800808c:	4b38      	ldr	r3, [pc, #224]	; (8008170 <HAL_RCC_GetSysClockFreq+0x354>)
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008098:	4b35      	ldr	r3, [pc, #212]	; (8008170 <HAL_RCC_GetSysClockFreq+0x354>)
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d06b      	beq.n	800817c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080a4:	4b32      	ldr	r3, [pc, #200]	; (8008170 <HAL_RCC_GetSysClockFreq+0x354>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	099b      	lsrs	r3, r3, #6
 80080aa:	2200      	movs	r2, #0
 80080ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80080ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b6:	663b      	str	r3, [r7, #96]	; 0x60
 80080b8:	2300      	movs	r3, #0
 80080ba:	667b      	str	r3, [r7, #100]	; 0x64
 80080bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80080c0:	4622      	mov	r2, r4
 80080c2:	462b      	mov	r3, r5
 80080c4:	f04f 0000 	mov.w	r0, #0
 80080c8:	f04f 0100 	mov.w	r1, #0
 80080cc:	0159      	lsls	r1, r3, #5
 80080ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080d2:	0150      	lsls	r0, r2, #5
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4621      	mov	r1, r4
 80080da:	1a51      	subs	r1, r2, r1
 80080dc:	61b9      	str	r1, [r7, #24]
 80080de:	4629      	mov	r1, r5
 80080e0:	eb63 0301 	sbc.w	r3, r3, r1
 80080e4:	61fb      	str	r3, [r7, #28]
 80080e6:	f04f 0200 	mov.w	r2, #0
 80080ea:	f04f 0300 	mov.w	r3, #0
 80080ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80080f2:	4659      	mov	r1, fp
 80080f4:	018b      	lsls	r3, r1, #6
 80080f6:	4651      	mov	r1, sl
 80080f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080fc:	4651      	mov	r1, sl
 80080fe:	018a      	lsls	r2, r1, #6
 8008100:	4651      	mov	r1, sl
 8008102:	ebb2 0801 	subs.w	r8, r2, r1
 8008106:	4659      	mov	r1, fp
 8008108:	eb63 0901 	sbc.w	r9, r3, r1
 800810c:	f04f 0200 	mov.w	r2, #0
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008118:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800811c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008120:	4690      	mov	r8, r2
 8008122:	4699      	mov	r9, r3
 8008124:	4623      	mov	r3, r4
 8008126:	eb18 0303 	adds.w	r3, r8, r3
 800812a:	613b      	str	r3, [r7, #16]
 800812c:	462b      	mov	r3, r5
 800812e:	eb49 0303 	adc.w	r3, r9, r3
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	f04f 0300 	mov.w	r3, #0
 800813c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008140:	4629      	mov	r1, r5
 8008142:	024b      	lsls	r3, r1, #9
 8008144:	4621      	mov	r1, r4
 8008146:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800814a:	4621      	mov	r1, r4
 800814c:	024a      	lsls	r2, r1, #9
 800814e:	4610      	mov	r0, r2
 8008150:	4619      	mov	r1, r3
 8008152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008156:	2200      	movs	r2, #0
 8008158:	65bb      	str	r3, [r7, #88]	; 0x58
 800815a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800815c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008160:	f7f8 fde2 	bl	8000d28 <__aeabi_uldivmod>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4613      	mov	r3, r2
 800816a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800816e:	e065      	b.n	800823c <HAL_RCC_GetSysClockFreq+0x420>
 8008170:	40023800 	.word	0x40023800
 8008174:	00f42400 	.word	0x00f42400
 8008178:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800817c:	4b3d      	ldr	r3, [pc, #244]	; (8008274 <HAL_RCC_GetSysClockFreq+0x458>)
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	099b      	lsrs	r3, r3, #6
 8008182:	2200      	movs	r2, #0
 8008184:	4618      	mov	r0, r3
 8008186:	4611      	mov	r1, r2
 8008188:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800818c:	653b      	str	r3, [r7, #80]	; 0x50
 800818e:	2300      	movs	r3, #0
 8008190:	657b      	str	r3, [r7, #84]	; 0x54
 8008192:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008196:	4642      	mov	r2, r8
 8008198:	464b      	mov	r3, r9
 800819a:	f04f 0000 	mov.w	r0, #0
 800819e:	f04f 0100 	mov.w	r1, #0
 80081a2:	0159      	lsls	r1, r3, #5
 80081a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081a8:	0150      	lsls	r0, r2, #5
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4641      	mov	r1, r8
 80081b0:	1a51      	subs	r1, r2, r1
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	4649      	mov	r1, r9
 80081b6:	eb63 0301 	sbc.w	r3, r3, r1
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	f04f 0200 	mov.w	r2, #0
 80081c0:	f04f 0300 	mov.w	r3, #0
 80081c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80081c8:	4659      	mov	r1, fp
 80081ca:	018b      	lsls	r3, r1, #6
 80081cc:	4651      	mov	r1, sl
 80081ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081d2:	4651      	mov	r1, sl
 80081d4:	018a      	lsls	r2, r1, #6
 80081d6:	4651      	mov	r1, sl
 80081d8:	1a54      	subs	r4, r2, r1
 80081da:	4659      	mov	r1, fp
 80081dc:	eb63 0501 	sbc.w	r5, r3, r1
 80081e0:	f04f 0200 	mov.w	r2, #0
 80081e4:	f04f 0300 	mov.w	r3, #0
 80081e8:	00eb      	lsls	r3, r5, #3
 80081ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081ee:	00e2      	lsls	r2, r4, #3
 80081f0:	4614      	mov	r4, r2
 80081f2:	461d      	mov	r5, r3
 80081f4:	4643      	mov	r3, r8
 80081f6:	18e3      	adds	r3, r4, r3
 80081f8:	603b      	str	r3, [r7, #0]
 80081fa:	464b      	mov	r3, r9
 80081fc:	eb45 0303 	adc.w	r3, r5, r3
 8008200:	607b      	str	r3, [r7, #4]
 8008202:	f04f 0200 	mov.w	r2, #0
 8008206:	f04f 0300 	mov.w	r3, #0
 800820a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800820e:	4629      	mov	r1, r5
 8008210:	028b      	lsls	r3, r1, #10
 8008212:	4621      	mov	r1, r4
 8008214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008218:	4621      	mov	r1, r4
 800821a:	028a      	lsls	r2, r1, #10
 800821c:	4610      	mov	r0, r2
 800821e:	4619      	mov	r1, r3
 8008220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008224:	2200      	movs	r2, #0
 8008226:	64bb      	str	r3, [r7, #72]	; 0x48
 8008228:	64fa      	str	r2, [r7, #76]	; 0x4c
 800822a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800822e:	f7f8 fd7b 	bl	8000d28 <__aeabi_uldivmod>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4613      	mov	r3, r2
 8008238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800823c:	4b0d      	ldr	r3, [pc, #52]	; (8008274 <HAL_RCC_GetSysClockFreq+0x458>)
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	0f1b      	lsrs	r3, r3, #28
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800824a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800824e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008252:	fbb2 f3f3 	udiv	r3, r2, r3
 8008256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800825a:	e003      	b.n	8008264 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800825c:	4b06      	ldr	r3, [pc, #24]	; (8008278 <HAL_RCC_GetSysClockFreq+0x45c>)
 800825e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008262:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008264:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008268:	4618      	mov	r0, r3
 800826a:	37b8      	adds	r7, #184	; 0xb8
 800826c:	46bd      	mov	sp, r7
 800826e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008272:	bf00      	nop
 8008274:	40023800 	.word	0x40023800
 8008278:	00f42400 	.word	0x00f42400

0800827c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e28d      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 8083 	beq.w	80083a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800829c:	4b94      	ldr	r3, [pc, #592]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f003 030c 	and.w	r3, r3, #12
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d019      	beq.n	80082dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80082a8:	4b91      	ldr	r3, [pc, #580]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d106      	bne.n	80082c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80082b4:	4b8e      	ldr	r3, [pc, #568]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082c0:	d00c      	beq.n	80082dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082c2:	4b8b      	ldr	r3, [pc, #556]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80082ca:	2b0c      	cmp	r3, #12
 80082cc:	d112      	bne.n	80082f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082ce:	4b88      	ldr	r3, [pc, #544]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082da:	d10b      	bne.n	80082f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082dc:	4b84      	ldr	r3, [pc, #528]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d05b      	beq.n	80083a0 <HAL_RCC_OscConfig+0x124>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d157      	bne.n	80083a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e25a      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082fc:	d106      	bne.n	800830c <HAL_RCC_OscConfig+0x90>
 80082fe:	4b7c      	ldr	r3, [pc, #496]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a7b      	ldr	r2, [pc, #492]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 8008304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	e01d      	b.n	8008348 <HAL_RCC_OscConfig+0xcc>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008314:	d10c      	bne.n	8008330 <HAL_RCC_OscConfig+0xb4>
 8008316:	4b76      	ldr	r3, [pc, #472]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a75      	ldr	r2, [pc, #468]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 800831c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	4b73      	ldr	r3, [pc, #460]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a72      	ldr	r2, [pc, #456]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 8008328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	e00b      	b.n	8008348 <HAL_RCC_OscConfig+0xcc>
 8008330:	4b6f      	ldr	r3, [pc, #444]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a6e      	ldr	r2, [pc, #440]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 8008336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800833a:	6013      	str	r3, [r2, #0]
 800833c:	4b6c      	ldr	r3, [pc, #432]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a6b      	ldr	r2, [pc, #428]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 8008342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d013      	beq.n	8008378 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008350:	f7fe f8ae 	bl	80064b0 <HAL_GetTick>
 8008354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008356:	e008      	b.n	800836a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008358:	f7fe f8aa 	bl	80064b0 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	2b64      	cmp	r3, #100	; 0x64
 8008364:	d901      	bls.n	800836a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e21f      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800836a:	4b61      	ldr	r3, [pc, #388]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0f0      	beq.n	8008358 <HAL_RCC_OscConfig+0xdc>
 8008376:	e014      	b.n	80083a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008378:	f7fe f89a 	bl	80064b0 <HAL_GetTick>
 800837c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800837e:	e008      	b.n	8008392 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008380:	f7fe f896 	bl	80064b0 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	2b64      	cmp	r3, #100	; 0x64
 800838c:	d901      	bls.n	8008392 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e20b      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008392:	4b57      	ldr	r3, [pc, #348]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1f0      	bne.n	8008380 <HAL_RCC_OscConfig+0x104>
 800839e:	e000      	b.n	80083a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0302 	and.w	r3, r3, #2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d06f      	beq.n	800848e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80083ae:	4b50      	ldr	r3, [pc, #320]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f003 030c 	and.w	r3, r3, #12
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d017      	beq.n	80083ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80083ba:	4b4d      	ldr	r3, [pc, #308]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80083c2:	2b08      	cmp	r3, #8
 80083c4:	d105      	bne.n	80083d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80083c6:	4b4a      	ldr	r3, [pc, #296]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00b      	beq.n	80083ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083d2:	4b47      	ldr	r3, [pc, #284]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80083da:	2b0c      	cmp	r3, #12
 80083dc:	d11c      	bne.n	8008418 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083de:	4b44      	ldr	r3, [pc, #272]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d116      	bne.n	8008418 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083ea:	4b41      	ldr	r3, [pc, #260]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d005      	beq.n	8008402 <HAL_RCC_OscConfig+0x186>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d001      	beq.n	8008402 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e1d3      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008402:	4b3b      	ldr	r3, [pc, #236]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	4937      	ldr	r1, [pc, #220]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 8008412:	4313      	orrs	r3, r2
 8008414:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008416:	e03a      	b.n	800848e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d020      	beq.n	8008462 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008420:	4b34      	ldr	r3, [pc, #208]	; (80084f4 <HAL_RCC_OscConfig+0x278>)
 8008422:	2201      	movs	r2, #1
 8008424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008426:	f7fe f843 	bl	80064b0 <HAL_GetTick>
 800842a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800842c:	e008      	b.n	8008440 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800842e:	f7fe f83f 	bl	80064b0 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	2b02      	cmp	r3, #2
 800843a:	d901      	bls.n	8008440 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e1b4      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008440:	4b2b      	ldr	r3, [pc, #172]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0302 	and.w	r3, r3, #2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d0f0      	beq.n	800842e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800844c:	4b28      	ldr	r3, [pc, #160]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	00db      	lsls	r3, r3, #3
 800845a:	4925      	ldr	r1, [pc, #148]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 800845c:	4313      	orrs	r3, r2
 800845e:	600b      	str	r3, [r1, #0]
 8008460:	e015      	b.n	800848e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008462:	4b24      	ldr	r3, [pc, #144]	; (80084f4 <HAL_RCC_OscConfig+0x278>)
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008468:	f7fe f822 	bl	80064b0 <HAL_GetTick>
 800846c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800846e:	e008      	b.n	8008482 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008470:	f7fe f81e 	bl	80064b0 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b02      	cmp	r3, #2
 800847c:	d901      	bls.n	8008482 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e193      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008482:	4b1b      	ldr	r3, [pc, #108]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0302 	and.w	r3, r3, #2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1f0      	bne.n	8008470 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0308 	and.w	r3, r3, #8
 8008496:	2b00      	cmp	r3, #0
 8008498:	d036      	beq.n	8008508 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d016      	beq.n	80084d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084a2:	4b15      	ldr	r3, [pc, #84]	; (80084f8 <HAL_RCC_OscConfig+0x27c>)
 80084a4:	2201      	movs	r2, #1
 80084a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a8:	f7fe f802 	bl	80064b0 <HAL_GetTick>
 80084ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084ae:	e008      	b.n	80084c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084b0:	f7fd fffe 	bl	80064b0 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e173      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084c2:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <HAL_RCC_OscConfig+0x274>)
 80084c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c6:	f003 0302 	and.w	r3, r3, #2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0f0      	beq.n	80084b0 <HAL_RCC_OscConfig+0x234>
 80084ce:	e01b      	b.n	8008508 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084d0:	4b09      	ldr	r3, [pc, #36]	; (80084f8 <HAL_RCC_OscConfig+0x27c>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d6:	f7fd ffeb 	bl	80064b0 <HAL_GetTick>
 80084da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084dc:	e00e      	b.n	80084fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084de:	f7fd ffe7 	bl	80064b0 <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d907      	bls.n	80084fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e15c      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
 80084f0:	40023800 	.word	0x40023800
 80084f4:	42470000 	.word	0x42470000
 80084f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084fc:	4b8a      	ldr	r3, [pc, #552]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 80084fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008500:	f003 0302 	and.w	r3, r3, #2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1ea      	bne.n	80084de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 8097 	beq.w	8008644 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008516:	2300      	movs	r3, #0
 8008518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800851a:	4b83      	ldr	r3, [pc, #524]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 800851c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10f      	bne.n	8008546 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008526:	2300      	movs	r3, #0
 8008528:	60bb      	str	r3, [r7, #8]
 800852a:	4b7f      	ldr	r3, [pc, #508]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	4a7e      	ldr	r2, [pc, #504]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 8008530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008534:	6413      	str	r3, [r2, #64]	; 0x40
 8008536:	4b7c      	ldr	r3, [pc, #496]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800853e:	60bb      	str	r3, [r7, #8]
 8008540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008542:	2301      	movs	r3, #1
 8008544:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008546:	4b79      	ldr	r3, [pc, #484]	; (800872c <HAL_RCC_OscConfig+0x4b0>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854e:	2b00      	cmp	r3, #0
 8008550:	d118      	bne.n	8008584 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008552:	4b76      	ldr	r3, [pc, #472]	; (800872c <HAL_RCC_OscConfig+0x4b0>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a75      	ldr	r2, [pc, #468]	; (800872c <HAL_RCC_OscConfig+0x4b0>)
 8008558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800855c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800855e:	f7fd ffa7 	bl	80064b0 <HAL_GetTick>
 8008562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008564:	e008      	b.n	8008578 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008566:	f7fd ffa3 	bl	80064b0 <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	2b02      	cmp	r3, #2
 8008572:	d901      	bls.n	8008578 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e118      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008578:	4b6c      	ldr	r3, [pc, #432]	; (800872c <HAL_RCC_OscConfig+0x4b0>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0f0      	beq.n	8008566 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d106      	bne.n	800859a <HAL_RCC_OscConfig+0x31e>
 800858c:	4b66      	ldr	r3, [pc, #408]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 800858e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008590:	4a65      	ldr	r2, [pc, #404]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 8008592:	f043 0301 	orr.w	r3, r3, #1
 8008596:	6713      	str	r3, [r2, #112]	; 0x70
 8008598:	e01c      	b.n	80085d4 <HAL_RCC_OscConfig+0x358>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	2b05      	cmp	r3, #5
 80085a0:	d10c      	bne.n	80085bc <HAL_RCC_OscConfig+0x340>
 80085a2:	4b61      	ldr	r3, [pc, #388]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 80085a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a6:	4a60      	ldr	r2, [pc, #384]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 80085a8:	f043 0304 	orr.w	r3, r3, #4
 80085ac:	6713      	str	r3, [r2, #112]	; 0x70
 80085ae:	4b5e      	ldr	r3, [pc, #376]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 80085b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b2:	4a5d      	ldr	r2, [pc, #372]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 80085b4:	f043 0301 	orr.w	r3, r3, #1
 80085b8:	6713      	str	r3, [r2, #112]	; 0x70
 80085ba:	e00b      	b.n	80085d4 <HAL_RCC_OscConfig+0x358>
 80085bc:	4b5a      	ldr	r3, [pc, #360]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 80085be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c0:	4a59      	ldr	r2, [pc, #356]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 80085c2:	f023 0301 	bic.w	r3, r3, #1
 80085c6:	6713      	str	r3, [r2, #112]	; 0x70
 80085c8:	4b57      	ldr	r3, [pc, #348]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 80085ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085cc:	4a56      	ldr	r2, [pc, #344]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 80085ce:	f023 0304 	bic.w	r3, r3, #4
 80085d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d015      	beq.n	8008608 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085dc:	f7fd ff68 	bl	80064b0 <HAL_GetTick>
 80085e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085e2:	e00a      	b.n	80085fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085e4:	f7fd ff64 	bl	80064b0 <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e0d7      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085fa:	4b4b      	ldr	r3, [pc, #300]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 80085fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0ee      	beq.n	80085e4 <HAL_RCC_OscConfig+0x368>
 8008606:	e014      	b.n	8008632 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008608:	f7fd ff52 	bl	80064b0 <HAL_GetTick>
 800860c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800860e:	e00a      	b.n	8008626 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008610:	f7fd ff4e 	bl	80064b0 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	f241 3288 	movw	r2, #5000	; 0x1388
 800861e:	4293      	cmp	r3, r2
 8008620:	d901      	bls.n	8008626 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e0c1      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008626:	4b40      	ldr	r3, [pc, #256]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 8008628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1ee      	bne.n	8008610 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008632:	7dfb      	ldrb	r3, [r7, #23]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d105      	bne.n	8008644 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008638:	4b3b      	ldr	r3, [pc, #236]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 800863a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863c:	4a3a      	ldr	r2, [pc, #232]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 800863e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008642:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 80ad 	beq.w	80087a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800864e:	4b36      	ldr	r3, [pc, #216]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 030c 	and.w	r3, r3, #12
 8008656:	2b08      	cmp	r3, #8
 8008658:	d060      	beq.n	800871c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	2b02      	cmp	r3, #2
 8008660:	d145      	bne.n	80086ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008662:	4b33      	ldr	r3, [pc, #204]	; (8008730 <HAL_RCC_OscConfig+0x4b4>)
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008668:	f7fd ff22 	bl	80064b0 <HAL_GetTick>
 800866c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800866e:	e008      	b.n	8008682 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008670:	f7fd ff1e 	bl	80064b0 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	2b02      	cmp	r3, #2
 800867c:	d901      	bls.n	8008682 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e093      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008682:	4b29      	ldr	r3, [pc, #164]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1f0      	bne.n	8008670 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	69da      	ldr	r2, [r3, #28]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	431a      	orrs	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	019b      	lsls	r3, r3, #6
 800869e:	431a      	orrs	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a4:	085b      	lsrs	r3, r3, #1
 80086a6:	3b01      	subs	r3, #1
 80086a8:	041b      	lsls	r3, r3, #16
 80086aa:	431a      	orrs	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	061b      	lsls	r3, r3, #24
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b8:	071b      	lsls	r3, r3, #28
 80086ba:	491b      	ldr	r1, [pc, #108]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086c0:	4b1b      	ldr	r3, [pc, #108]	; (8008730 <HAL_RCC_OscConfig+0x4b4>)
 80086c2:	2201      	movs	r2, #1
 80086c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c6:	f7fd fef3 	bl	80064b0 <HAL_GetTick>
 80086ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086cc:	e008      	b.n	80086e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086ce:	f7fd feef 	bl	80064b0 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d901      	bls.n	80086e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e064      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086e0:	4b11      	ldr	r3, [pc, #68]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d0f0      	beq.n	80086ce <HAL_RCC_OscConfig+0x452>
 80086ec:	e05c      	b.n	80087a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086ee:	4b10      	ldr	r3, [pc, #64]	; (8008730 <HAL_RCC_OscConfig+0x4b4>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f4:	f7fd fedc 	bl	80064b0 <HAL_GetTick>
 80086f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086fa:	e008      	b.n	800870e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086fc:	f7fd fed8 	bl	80064b0 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	2b02      	cmp	r3, #2
 8008708:	d901      	bls.n	800870e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e04d      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800870e:	4b06      	ldr	r3, [pc, #24]	; (8008728 <HAL_RCC_OscConfig+0x4ac>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1f0      	bne.n	80086fc <HAL_RCC_OscConfig+0x480>
 800871a:	e045      	b.n	80087a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d107      	bne.n	8008734 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e040      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
 8008728:	40023800 	.word	0x40023800
 800872c:	40007000 	.word	0x40007000
 8008730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008734:	4b1f      	ldr	r3, [pc, #124]	; (80087b4 <HAL_RCC_OscConfig+0x538>)
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d030      	beq.n	80087a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800874c:	429a      	cmp	r2, r3
 800874e:	d129      	bne.n	80087a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800875a:	429a      	cmp	r2, r3
 800875c:	d122      	bne.n	80087a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008764:	4013      	ands	r3, r2
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800876a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800876c:	4293      	cmp	r3, r2
 800876e:	d119      	bne.n	80087a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	085b      	lsrs	r3, r3, #1
 800877c:	3b01      	subs	r3, #1
 800877e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008780:	429a      	cmp	r2, r3
 8008782:	d10f      	bne.n	80087a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008790:	429a      	cmp	r2, r3
 8008792:	d107      	bne.n	80087a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d001      	beq.n	80087a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e000      	b.n	80087aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	40023800 	.word	0x40023800

080087b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e07b      	b.n	80088c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d108      	bne.n	80087e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087da:	d009      	beq.n	80087f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	61da      	str	r2, [r3, #28]
 80087e2:	e005      	b.n	80087f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d106      	bne.n	8008810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7fb f964 	bl	8003ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008826:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008838:	431a      	orrs	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	431a      	orrs	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008874:	ea42 0103 	orr.w	r1, r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	0c1b      	lsrs	r3, r3, #16
 800888e:	f003 0104 	and.w	r1, r3, #4
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	f003 0210 	and.w	r2, r3, #16
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69da      	ldr	r2, [r3, #28]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b088      	sub	sp, #32
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	603b      	str	r3, [r7, #0]
 80088d6:	4613      	mov	r3, r2
 80088d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d101      	bne.n	80088ec <HAL_SPI_Transmit+0x22>
 80088e8:	2302      	movs	r3, #2
 80088ea:	e126      	b.n	8008b3a <HAL_SPI_Transmit+0x270>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088f4:	f7fd fddc 	bl	80064b0 <HAL_GetTick>
 80088f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80088fa:	88fb      	ldrh	r3, [r7, #6]
 80088fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b01      	cmp	r3, #1
 8008908:	d002      	beq.n	8008910 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800890a:	2302      	movs	r3, #2
 800890c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800890e:	e10b      	b.n	8008b28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <HAL_SPI_Transmit+0x52>
 8008916:	88fb      	ldrh	r3, [r7, #6]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d102      	bne.n	8008922 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008920:	e102      	b.n	8008b28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2203      	movs	r2, #3
 8008926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	88fa      	ldrh	r2, [r7, #6]
 800893a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	88fa      	ldrh	r2, [r7, #6]
 8008940:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008968:	d10f      	bne.n	800898a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008978:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008988:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008994:	2b40      	cmp	r3, #64	; 0x40
 8008996:	d007      	beq.n	80089a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089b0:	d14b      	bne.n	8008a4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <HAL_SPI_Transmit+0xf6>
 80089ba:	8afb      	ldrh	r3, [r7, #22]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d13e      	bne.n	8008a3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	881a      	ldrh	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d0:	1c9a      	adds	r2, r3, #2
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089da:	b29b      	uxth	r3, r3
 80089dc:	3b01      	subs	r3, #1
 80089de:	b29a      	uxth	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80089e4:	e02b      	b.n	8008a3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d112      	bne.n	8008a1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f8:	881a      	ldrh	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a04:	1c9a      	adds	r2, r3, #2
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	3b01      	subs	r3, #1
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a18:	e011      	b.n	8008a3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a1a:	f7fd fd49 	bl	80064b0 <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d803      	bhi.n	8008a32 <HAL_SPI_Transmit+0x168>
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a30:	d102      	bne.n	8008a38 <HAL_SPI_Transmit+0x16e>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d102      	bne.n	8008a3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a3c:	e074      	b.n	8008b28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1ce      	bne.n	80089e6 <HAL_SPI_Transmit+0x11c>
 8008a48:	e04c      	b.n	8008ae4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <HAL_SPI_Transmit+0x18e>
 8008a52:	8afb      	ldrh	r3, [r7, #22]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d140      	bne.n	8008ada <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	330c      	adds	r3, #12
 8008a62:	7812      	ldrb	r2, [r2, #0]
 8008a64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008a7e:	e02c      	b.n	8008ada <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d113      	bne.n	8008ab6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	330c      	adds	r3, #12
 8008a98:	7812      	ldrb	r2, [r2, #0]
 8008a9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	3b01      	subs	r3, #1
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	86da      	strh	r2, [r3, #54]	; 0x36
 8008ab4:	e011      	b.n	8008ada <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ab6:	f7fd fcfb 	bl	80064b0 <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d803      	bhi.n	8008ace <HAL_SPI_Transmit+0x204>
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008acc:	d102      	bne.n	8008ad4 <HAL_SPI_Transmit+0x20a>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ad8:	e026      	b.n	8008b28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1cd      	bne.n	8008a80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 fafd 	bl	80090e8 <SPI_EndRxTxTransaction>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2220      	movs	r2, #32
 8008af8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10a      	bne.n	8008b18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b02:	2300      	movs	r3, #0
 8008b04:	613b      	str	r3, [r7, #16]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	613b      	str	r3, [r7, #16]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	613b      	str	r3, [r7, #16]
 8008b16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	77fb      	strb	r3, [r7, #31]
 8008b24:	e000      	b.n	8008b28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008b26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b38:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3720      	adds	r7, #32
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d101      	bne.n	8008b64 <HAL_SPI_Transmit_DMA+0x20>
 8008b60:	2302      	movs	r3, #2
 8008b62:	e09b      	b.n	8008c9c <HAL_SPI_Transmit_DMA+0x158>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d002      	beq.n	8008b7e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b7c:	e089      	b.n	8008c92 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d002      	beq.n	8008b8a <HAL_SPI_Transmit_DMA+0x46>
 8008b84:	88fb      	ldrh	r3, [r7, #6]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d102      	bne.n	8008b90 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b8e:	e080      	b.n	8008c92 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2203      	movs	r2, #3
 8008b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	88fa      	ldrh	r2, [r7, #6]
 8008ba8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	88fa      	ldrh	r2, [r7, #6]
 8008bae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd6:	d10f      	bne.n	8008bf8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008be6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bf6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bfc:	4a29      	ldr	r2, [pc, #164]	; (8008ca4 <HAL_SPI_Transmit_DMA+0x160>)
 8008bfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c04:	4a28      	ldr	r2, [pc, #160]	; (8008ca8 <HAL_SPI_Transmit_DMA+0x164>)
 8008c06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c0c:	4a27      	ldr	r2, [pc, #156]	; (8008cac <HAL_SPI_Transmit_DMA+0x168>)
 8008c0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c14:	2200      	movs	r2, #0
 8008c16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c20:	4619      	mov	r1, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	330c      	adds	r3, #12
 8008c28:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c2e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008c30:	f7fe fa32 	bl	8007098 <HAL_DMA_Start_IT>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00c      	beq.n	8008c54 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3e:	f043 0210 	orr.w	r2, r3, #16
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8008c52:	e01e      	b.n	8008c92 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5e:	2b40      	cmp	r3, #64	; 0x40
 8008c60:	d007      	beq.n	8008c72 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c70:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f042 0220 	orr.w	r2, r2, #32
 8008c80:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0202 	orr.w	r2, r2, #2
 8008c90:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	08008f55 	.word	0x08008f55
 8008ca8:	08008ead 	.word	0x08008ead
 8008cac:	08008f71 	.word	0x08008f71

08008cb0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10e      	bne.n	8008cf0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d009      	beq.n	8008cf0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d004      	beq.n	8008cf0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	4798      	blx	r3
    return;
 8008cee:	e0ce      	b.n	8008e8e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d009      	beq.n	8008d0e <HAL_SPI_IRQHandler+0x5e>
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d004      	beq.n	8008d0e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	4798      	blx	r3
    return;
 8008d0c:	e0bf      	b.n	8008e8e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	f003 0320 	and.w	r3, r3, #32
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <HAL_SPI_IRQHandler+0x7e>
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d105      	bne.n	8008d2e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 80b0 	beq.w	8008e8e <HAL_SPI_IRQHandler+0x1de>
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	f003 0320 	and.w	r3, r3, #32
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 80aa 	beq.w	8008e8e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d023      	beq.n	8008d8c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d011      	beq.n	8008d74 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d54:	f043 0204 	orr.w	r2, r3, #4
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	617b      	str	r3, [r7, #20]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	617b      	str	r3, [r7, #20]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	617b      	str	r3, [r7, #20]
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	e00b      	b.n	8008d8c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d74:	2300      	movs	r3, #0
 8008d76:	613b      	str	r3, [r7, #16]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	613b      	str	r3, [r7, #16]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	613b      	str	r3, [r7, #16]
 8008d88:	693b      	ldr	r3, [r7, #16]
        return;
 8008d8a:	e080      	b.n	8008e8e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d014      	beq.n	8008dc0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9a:	f043 0201 	orr.w	r2, r3, #1
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008da2:	2300      	movs	r3, #0
 8008da4:	60fb      	str	r3, [r7, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	60fb      	str	r3, [r7, #12]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00c      	beq.n	8008de4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dce:	f043 0208 	orr.w	r2, r3, #8
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60bb      	str	r3, [r7, #8]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	60bb      	str	r3, [r7, #8]
 8008de2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d04f      	beq.n	8008e8c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008dfa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	f003 0302 	and.w	r3, r3, #2
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d104      	bne.n	8008e18 <HAL_SPI_IRQHandler+0x168>
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d034      	beq.n	8008e82 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 0203 	bic.w	r2, r2, #3
 8008e26:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d011      	beq.n	8008e54 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e34:	4a17      	ldr	r2, [pc, #92]	; (8008e94 <HAL_SPI_IRQHandler+0x1e4>)
 8008e36:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fe f9f3 	bl	8007228 <HAL_DMA_Abort_IT>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d016      	beq.n	8008e8a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e60:	4a0c      	ldr	r2, [pc, #48]	; (8008e94 <HAL_SPI_IRQHandler+0x1e4>)
 8008e62:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fe f9dd 	bl	8007228 <HAL_DMA_Abort_IT>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00a      	beq.n	8008e8a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008e80:	e003      	b.n	8008e8a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7fb fc12 	bl	80046ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008e88:	e000      	b.n	8008e8c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008e8a:	bf00      	nop
    return;
 8008e8c:	bf00      	nop
  }
}
 8008e8e:	3720      	adds	r7, #32
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	08008fb1 	.word	0x08008fb1

08008e98 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008eba:	f7fd faf9 	bl	80064b0 <HAL_GetTick>
 8008ebe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ece:	d03b      	beq.n	8008f48 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f022 0220 	bic.w	r2, r2, #32
 8008ede:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 0202 	bic.w	r2, r2, #2
 8008eee:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	2164      	movs	r1, #100	; 0x64
 8008ef4:	6978      	ldr	r0, [r7, #20]
 8008ef6:	f000 f8f7 	bl	80090e8 <SPI_EndRxTxTransaction>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f04:	f043 0220 	orr.w	r2, r3, #32
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10a      	bne.n	8008f2a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f14:	2300      	movs	r3, #0
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d003      	beq.n	8008f48 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008f40:	6978      	ldr	r0, [r7, #20]
 8008f42:	f7fb fbb3 	bl	80046ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008f46:	e002      	b.n	8008f4e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008f48:	6978      	ldr	r0, [r7, #20]
 8008f4a:	f7fb fbc5 	bl	80046d8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7ff ff98 	bl	8008e98 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008f68:	bf00      	nop
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0203 	bic.w	r2, r2, #3
 8008f8c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f92:	f043 0210 	orr.w	r2, r3, #16
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7fb fb82 	bl	80046ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008fa8:	bf00      	nop
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f7fb fb6e 	bl	80046ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008fd0:	bf00      	nop
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008fe8:	f7fd fa62 	bl	80064b0 <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	1a9b      	subs	r3, r3, r2
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008ff8:	f7fd fa5a 	bl	80064b0 <HAL_GetTick>
 8008ffc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ffe:	4b39      	ldr	r3, [pc, #228]	; (80090e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	015b      	lsls	r3, r3, #5
 8009004:	0d1b      	lsrs	r3, r3, #20
 8009006:	69fa      	ldr	r2, [r7, #28]
 8009008:	fb02 f303 	mul.w	r3, r2, r3
 800900c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800900e:	e054      	b.n	80090ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009016:	d050      	beq.n	80090ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009018:	f7fd fa4a 	bl	80064b0 <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	69fa      	ldr	r2, [r7, #28]
 8009024:	429a      	cmp	r2, r3
 8009026:	d902      	bls.n	800902e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d13d      	bne.n	80090aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800903c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009046:	d111      	bne.n	800906c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009050:	d004      	beq.n	800905c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800905a:	d107      	bne.n	800906c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800906a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009074:	d10f      	bne.n	8009096 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009094:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e017      	b.n	80090da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80090b0:	2300      	movs	r3, #0
 80090b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689a      	ldr	r2, [r3, #8]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	4013      	ands	r3, r2
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	bf0c      	ite	eq
 80090ca:	2301      	moveq	r3, #1
 80090cc:	2300      	movne	r3, #0
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	461a      	mov	r2, r3
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d19b      	bne.n	8009010 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3720      	adds	r7, #32
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000030 	.word	0x20000030

080090e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af02      	add	r7, sp, #8
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80090f4:	4b1b      	ldr	r3, [pc, #108]	; (8009164 <SPI_EndRxTxTransaction+0x7c>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a1b      	ldr	r2, [pc, #108]	; (8009168 <SPI_EndRxTxTransaction+0x80>)
 80090fa:	fba2 2303 	umull	r2, r3, r2, r3
 80090fe:	0d5b      	lsrs	r3, r3, #21
 8009100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009104:	fb02 f303 	mul.w	r3, r2, r3
 8009108:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009112:	d112      	bne.n	800913a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2200      	movs	r2, #0
 800911c:	2180      	movs	r1, #128	; 0x80
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f7ff ff5a 	bl	8008fd8 <SPI_WaitFlagStateUntilTimeout>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d016      	beq.n	8009158 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912e:	f043 0220 	orr.w	r2, r3, #32
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e00f      	b.n	800915a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00a      	beq.n	8009156 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	3b01      	subs	r3, #1
 8009144:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009150:	2b80      	cmp	r3, #128	; 0x80
 8009152:	d0f2      	beq.n	800913a <SPI_EndRxTxTransaction+0x52>
 8009154:	e000      	b.n	8009158 <SPI_EndRxTxTransaction+0x70>
        break;
 8009156:	bf00      	nop
  }

  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	20000030 	.word	0x20000030
 8009168:	165e9f81 	.word	0x165e9f81

0800916c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e041      	b.n	8009202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	d106      	bne.n	8009198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7fa fd42 	bl	8003c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3304      	adds	r3, #4
 80091a8:	4619      	mov	r1, r3
 80091aa:	4610      	mov	r0, r2
 80091ac:	f000 faa0 	bl	80096f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b01      	cmp	r3, #1
 800921e:	d001      	beq.n	8009224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e04e      	b.n	80092c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2202      	movs	r2, #2
 8009228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f042 0201 	orr.w	r2, r2, #1
 800923a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a23      	ldr	r2, [pc, #140]	; (80092d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d022      	beq.n	800928c <HAL_TIM_Base_Start_IT+0x80>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800924e:	d01d      	beq.n	800928c <HAL_TIM_Base_Start_IT+0x80>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a1f      	ldr	r2, [pc, #124]	; (80092d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d018      	beq.n	800928c <HAL_TIM_Base_Start_IT+0x80>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a1e      	ldr	r2, [pc, #120]	; (80092d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d013      	beq.n	800928c <HAL_TIM_Base_Start_IT+0x80>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a1c      	ldr	r2, [pc, #112]	; (80092dc <HAL_TIM_Base_Start_IT+0xd0>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d00e      	beq.n	800928c <HAL_TIM_Base_Start_IT+0x80>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a1b      	ldr	r2, [pc, #108]	; (80092e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d009      	beq.n	800928c <HAL_TIM_Base_Start_IT+0x80>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a19      	ldr	r2, [pc, #100]	; (80092e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d004      	beq.n	800928c <HAL_TIM_Base_Start_IT+0x80>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a18      	ldr	r2, [pc, #96]	; (80092e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d111      	bne.n	80092b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f003 0307 	and.w	r3, r3, #7
 8009296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b06      	cmp	r3, #6
 800929c:	d010      	beq.n	80092c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f042 0201 	orr.w	r2, r2, #1
 80092ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ae:	e007      	b.n	80092c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 0201 	orr.w	r2, r2, #1
 80092be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	40010000 	.word	0x40010000
 80092d4:	40000400 	.word	0x40000400
 80092d8:	40000800 	.word	0x40000800
 80092dc:	40000c00 	.word	0x40000c00
 80092e0:	40010400 	.word	0x40010400
 80092e4:	40014000 	.word	0x40014000
 80092e8:	40001800 	.word	0x40001800

080092ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	f003 0302 	and.w	r3, r3, #2
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d122      	bne.n	8009348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	f003 0302 	and.w	r3, r3, #2
 800930c:	2b02      	cmp	r3, #2
 800930e:	d11b      	bne.n	8009348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f06f 0202 	mvn.w	r2, #2
 8009318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	f003 0303 	and.w	r3, r3, #3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d003      	beq.n	8009336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f9bf 	bl	80096b2 <HAL_TIM_IC_CaptureCallback>
 8009334:	e005      	b.n	8009342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f9b1 	bl	800969e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f9c2 	bl	80096c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	f003 0304 	and.w	r3, r3, #4
 8009352:	2b04      	cmp	r3, #4
 8009354:	d122      	bne.n	800939c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b04      	cmp	r3, #4
 8009362:	d11b      	bne.n	800939c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f06f 0204 	mvn.w	r2, #4
 800936c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2202      	movs	r2, #2
 8009372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800937e:	2b00      	cmp	r3, #0
 8009380:	d003      	beq.n	800938a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f995 	bl	80096b2 <HAL_TIM_IC_CaptureCallback>
 8009388:	e005      	b.n	8009396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f987 	bl	800969e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f998 	bl	80096c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	f003 0308 	and.w	r3, r3, #8
 80093a6:	2b08      	cmp	r3, #8
 80093a8:	d122      	bne.n	80093f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	f003 0308 	and.w	r3, r3, #8
 80093b4:	2b08      	cmp	r3, #8
 80093b6:	d11b      	bne.n	80093f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f06f 0208 	mvn.w	r2, #8
 80093c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2204      	movs	r2, #4
 80093c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	f003 0303 	and.w	r3, r3, #3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f96b 	bl	80096b2 <HAL_TIM_IC_CaptureCallback>
 80093dc:	e005      	b.n	80093ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f95d 	bl	800969e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f96e 	bl	80096c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	f003 0310 	and.w	r3, r3, #16
 80093fa:	2b10      	cmp	r3, #16
 80093fc:	d122      	bne.n	8009444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	f003 0310 	and.w	r3, r3, #16
 8009408:	2b10      	cmp	r3, #16
 800940a:	d11b      	bne.n	8009444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f06f 0210 	mvn.w	r2, #16
 8009414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2208      	movs	r2, #8
 800941a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f941 	bl	80096b2 <HAL_TIM_IC_CaptureCallback>
 8009430:	e005      	b.n	800943e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f933 	bl	800969e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f944 	bl	80096c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b01      	cmp	r3, #1
 8009450:	d10e      	bne.n	8009470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	2b01      	cmp	r3, #1
 800945e:	d107      	bne.n	8009470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f06f 0201 	mvn.w	r2, #1
 8009468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f90d 	bl	800968a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800947a:	2b80      	cmp	r3, #128	; 0x80
 800947c:	d10e      	bne.n	800949c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009488:	2b80      	cmp	r3, #128	; 0x80
 800948a:	d107      	bne.n	800949c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 faea 	bl	8009a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a6:	2b40      	cmp	r3, #64	; 0x40
 80094a8:	d10e      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b4:	2b40      	cmp	r3, #64	; 0x40
 80094b6:	d107      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f909 	bl	80096da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f003 0320 	and.w	r3, r3, #32
 80094d2:	2b20      	cmp	r3, #32
 80094d4:	d10e      	bne.n	80094f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f003 0320 	and.w	r3, r3, #32
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	d107      	bne.n	80094f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f06f 0220 	mvn.w	r2, #32
 80094ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fab4 	bl	8009a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009510:	2b01      	cmp	r3, #1
 8009512:	d101      	bne.n	8009518 <HAL_TIM_ConfigClockSource+0x1c>
 8009514:	2302      	movs	r3, #2
 8009516:	e0b4      	b.n	8009682 <HAL_TIM_ConfigClockSource+0x186>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2202      	movs	r2, #2
 8009524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800953e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009550:	d03e      	beq.n	80095d0 <HAL_TIM_ConfigClockSource+0xd4>
 8009552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009556:	f200 8087 	bhi.w	8009668 <HAL_TIM_ConfigClockSource+0x16c>
 800955a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800955e:	f000 8086 	beq.w	800966e <HAL_TIM_ConfigClockSource+0x172>
 8009562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009566:	d87f      	bhi.n	8009668 <HAL_TIM_ConfigClockSource+0x16c>
 8009568:	2b70      	cmp	r3, #112	; 0x70
 800956a:	d01a      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0xa6>
 800956c:	2b70      	cmp	r3, #112	; 0x70
 800956e:	d87b      	bhi.n	8009668 <HAL_TIM_ConfigClockSource+0x16c>
 8009570:	2b60      	cmp	r3, #96	; 0x60
 8009572:	d050      	beq.n	8009616 <HAL_TIM_ConfigClockSource+0x11a>
 8009574:	2b60      	cmp	r3, #96	; 0x60
 8009576:	d877      	bhi.n	8009668 <HAL_TIM_ConfigClockSource+0x16c>
 8009578:	2b50      	cmp	r3, #80	; 0x50
 800957a:	d03c      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0xfa>
 800957c:	2b50      	cmp	r3, #80	; 0x50
 800957e:	d873      	bhi.n	8009668 <HAL_TIM_ConfigClockSource+0x16c>
 8009580:	2b40      	cmp	r3, #64	; 0x40
 8009582:	d058      	beq.n	8009636 <HAL_TIM_ConfigClockSource+0x13a>
 8009584:	2b40      	cmp	r3, #64	; 0x40
 8009586:	d86f      	bhi.n	8009668 <HAL_TIM_ConfigClockSource+0x16c>
 8009588:	2b30      	cmp	r3, #48	; 0x30
 800958a:	d064      	beq.n	8009656 <HAL_TIM_ConfigClockSource+0x15a>
 800958c:	2b30      	cmp	r3, #48	; 0x30
 800958e:	d86b      	bhi.n	8009668 <HAL_TIM_ConfigClockSource+0x16c>
 8009590:	2b20      	cmp	r3, #32
 8009592:	d060      	beq.n	8009656 <HAL_TIM_ConfigClockSource+0x15a>
 8009594:	2b20      	cmp	r3, #32
 8009596:	d867      	bhi.n	8009668 <HAL_TIM_ConfigClockSource+0x16c>
 8009598:	2b00      	cmp	r3, #0
 800959a:	d05c      	beq.n	8009656 <HAL_TIM_ConfigClockSource+0x15a>
 800959c:	2b10      	cmp	r3, #16
 800959e:	d05a      	beq.n	8009656 <HAL_TIM_ConfigClockSource+0x15a>
 80095a0:	e062      	b.n	8009668 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6818      	ldr	r0, [r3, #0]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	6899      	ldr	r1, [r3, #8]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f000 f9b7 	bl	8009924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80095c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	609a      	str	r2, [r3, #8]
      break;
 80095ce:	e04f      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6818      	ldr	r0, [r3, #0]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	6899      	ldr	r1, [r3, #8]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	f000 f9a0 	bl	8009924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689a      	ldr	r2, [r3, #8]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095f2:	609a      	str	r2, [r3, #8]
      break;
 80095f4:	e03c      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6818      	ldr	r0, [r3, #0]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	6859      	ldr	r1, [r3, #4]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	461a      	mov	r2, r3
 8009604:	f000 f914 	bl	8009830 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2150      	movs	r1, #80	; 0x50
 800960e:	4618      	mov	r0, r3
 8009610:	f000 f96d 	bl	80098ee <TIM_ITRx_SetConfig>
      break;
 8009614:	e02c      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6818      	ldr	r0, [r3, #0]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	6859      	ldr	r1, [r3, #4]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	461a      	mov	r2, r3
 8009624:	f000 f933 	bl	800988e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2160      	movs	r1, #96	; 0x60
 800962e:	4618      	mov	r0, r3
 8009630:	f000 f95d 	bl	80098ee <TIM_ITRx_SetConfig>
      break;
 8009634:	e01c      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	6859      	ldr	r1, [r3, #4]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	461a      	mov	r2, r3
 8009644:	f000 f8f4 	bl	8009830 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2140      	movs	r1, #64	; 0x40
 800964e:	4618      	mov	r0, r3
 8009650:	f000 f94d 	bl	80098ee <TIM_ITRx_SetConfig>
      break;
 8009654:	e00c      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4619      	mov	r1, r3
 8009660:	4610      	mov	r0, r2
 8009662:	f000 f944 	bl	80098ee <TIM_ITRx_SetConfig>
      break;
 8009666:	e003      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	73fb      	strb	r3, [r7, #15]
      break;
 800966c:	e000      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800966e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009680:	7bfb      	ldrb	r3, [r7, #15]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009692:	bf00      	nop
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800969e:	b480      	push	{r7}
 80096a0:	b083      	sub	sp, #12
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096ba:	bf00      	nop
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b083      	sub	sp, #12
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096ce:	bf00      	nop
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096da:	b480      	push	{r7}
 80096dc:	b083      	sub	sp, #12
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096e2:	bf00      	nop
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
	...

080096f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a40      	ldr	r2, [pc, #256]	; (8009804 <TIM_Base_SetConfig+0x114>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d013      	beq.n	8009730 <TIM_Base_SetConfig+0x40>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800970e:	d00f      	beq.n	8009730 <TIM_Base_SetConfig+0x40>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a3d      	ldr	r2, [pc, #244]	; (8009808 <TIM_Base_SetConfig+0x118>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d00b      	beq.n	8009730 <TIM_Base_SetConfig+0x40>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a3c      	ldr	r2, [pc, #240]	; (800980c <TIM_Base_SetConfig+0x11c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d007      	beq.n	8009730 <TIM_Base_SetConfig+0x40>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a3b      	ldr	r2, [pc, #236]	; (8009810 <TIM_Base_SetConfig+0x120>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d003      	beq.n	8009730 <TIM_Base_SetConfig+0x40>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a3a      	ldr	r2, [pc, #232]	; (8009814 <TIM_Base_SetConfig+0x124>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d108      	bne.n	8009742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	4313      	orrs	r3, r2
 8009740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a2f      	ldr	r2, [pc, #188]	; (8009804 <TIM_Base_SetConfig+0x114>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d02b      	beq.n	80097a2 <TIM_Base_SetConfig+0xb2>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009750:	d027      	beq.n	80097a2 <TIM_Base_SetConfig+0xb2>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a2c      	ldr	r2, [pc, #176]	; (8009808 <TIM_Base_SetConfig+0x118>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d023      	beq.n	80097a2 <TIM_Base_SetConfig+0xb2>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a2b      	ldr	r2, [pc, #172]	; (800980c <TIM_Base_SetConfig+0x11c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d01f      	beq.n	80097a2 <TIM_Base_SetConfig+0xb2>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a2a      	ldr	r2, [pc, #168]	; (8009810 <TIM_Base_SetConfig+0x120>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d01b      	beq.n	80097a2 <TIM_Base_SetConfig+0xb2>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a29      	ldr	r2, [pc, #164]	; (8009814 <TIM_Base_SetConfig+0x124>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d017      	beq.n	80097a2 <TIM_Base_SetConfig+0xb2>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a28      	ldr	r2, [pc, #160]	; (8009818 <TIM_Base_SetConfig+0x128>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d013      	beq.n	80097a2 <TIM_Base_SetConfig+0xb2>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a27      	ldr	r2, [pc, #156]	; (800981c <TIM_Base_SetConfig+0x12c>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d00f      	beq.n	80097a2 <TIM_Base_SetConfig+0xb2>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a26      	ldr	r2, [pc, #152]	; (8009820 <TIM_Base_SetConfig+0x130>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d00b      	beq.n	80097a2 <TIM_Base_SetConfig+0xb2>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a25      	ldr	r2, [pc, #148]	; (8009824 <TIM_Base_SetConfig+0x134>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d007      	beq.n	80097a2 <TIM_Base_SetConfig+0xb2>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a24      	ldr	r2, [pc, #144]	; (8009828 <TIM_Base_SetConfig+0x138>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d003      	beq.n	80097a2 <TIM_Base_SetConfig+0xb2>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a23      	ldr	r2, [pc, #140]	; (800982c <TIM_Base_SetConfig+0x13c>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d108      	bne.n	80097b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	4313      	orrs	r3, r2
 80097c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	689a      	ldr	r2, [r3, #8]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a0a      	ldr	r2, [pc, #40]	; (8009804 <TIM_Base_SetConfig+0x114>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d003      	beq.n	80097e8 <TIM_Base_SetConfig+0xf8>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a0c      	ldr	r2, [pc, #48]	; (8009814 <TIM_Base_SetConfig+0x124>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d103      	bne.n	80097f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	691a      	ldr	r2, [r3, #16]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	615a      	str	r2, [r3, #20]
}
 80097f6:	bf00      	nop
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	40010000 	.word	0x40010000
 8009808:	40000400 	.word	0x40000400
 800980c:	40000800 	.word	0x40000800
 8009810:	40000c00 	.word	0x40000c00
 8009814:	40010400 	.word	0x40010400
 8009818:	40014000 	.word	0x40014000
 800981c:	40014400 	.word	0x40014400
 8009820:	40014800 	.word	0x40014800
 8009824:	40001800 	.word	0x40001800
 8009828:	40001c00 	.word	0x40001c00
 800982c:	40002000 	.word	0x40002000

08009830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	f023 0201 	bic.w	r2, r3, #1
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800985a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	011b      	lsls	r3, r3, #4
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	4313      	orrs	r3, r2
 8009864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f023 030a 	bic.w	r3, r3, #10
 800986c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	4313      	orrs	r3, r2
 8009874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	621a      	str	r2, [r3, #32]
}
 8009882:	bf00      	nop
 8009884:	371c      	adds	r7, #28
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800988e:	b480      	push	{r7}
 8009890:	b087      	sub	sp, #28
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6a1b      	ldr	r3, [r3, #32]
 800989e:	f023 0210 	bic.w	r2, r3, #16
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6a1b      	ldr	r3, [r3, #32]
 80098b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	031b      	lsls	r3, r3, #12
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	011b      	lsls	r3, r3, #4
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	621a      	str	r2, [r3, #32]
}
 80098e2:	bf00      	nop
 80098e4:	371c      	adds	r7, #28
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b085      	sub	sp, #20
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009904:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	4313      	orrs	r3, r2
 800990c:	f043 0307 	orr.w	r3, r3, #7
 8009910:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	609a      	str	r2, [r3, #8]
}
 8009918:	bf00      	nop
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800993e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	021a      	lsls	r2, r3, #8
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	431a      	orrs	r2, r3
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	4313      	orrs	r3, r2
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	609a      	str	r2, [r3, #8]
}
 8009958:	bf00      	nop
 800995a:	371c      	adds	r7, #28
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009974:	2b01      	cmp	r3, #1
 8009976:	d101      	bne.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009978:	2302      	movs	r3, #2
 800997a:	e05a      	b.n	8009a32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a21      	ldr	r2, [pc, #132]	; (8009a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d022      	beq.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c8:	d01d      	beq.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a1d      	ldr	r2, [pc, #116]	; (8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d018      	beq.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a1b      	ldr	r2, [pc, #108]	; (8009a48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d013      	beq.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a1a      	ldr	r2, [pc, #104]	; (8009a4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d00e      	beq.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a18      	ldr	r2, [pc, #96]	; (8009a50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d009      	beq.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a17      	ldr	r2, [pc, #92]	; (8009a54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d004      	beq.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a15      	ldr	r2, [pc, #84]	; (8009a58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d10c      	bne.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	40010000 	.word	0x40010000
 8009a44:	40000400 	.word	0x40000400
 8009a48:	40000800 	.word	0x40000800
 8009a4c:	40000c00 	.word	0x40000c00
 8009a50:	40010400 	.word	0x40010400
 8009a54:	40014000 	.word	0x40014000
 8009a58:	40001800 	.word	0x40001800

08009a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e03f      	b.n	8009b16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d106      	bne.n	8009ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f7fa f8dc 	bl	8003c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2224      	movs	r2, #36	; 0x24
 8009ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68da      	ldr	r2, [r3, #12]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fddf 	bl	800a68c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	691a      	ldr	r2, [r3, #16]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	695a      	ldr	r2, [r3, #20]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68da      	ldr	r2, [r3, #12]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2220      	movs	r2, #32
 8009b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2220      	movs	r2, #32
 8009b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b08a      	sub	sp, #40	; 0x28
 8009b22:	af02      	add	r7, sp, #8
 8009b24:	60f8      	str	r0, [r7, #12]
 8009b26:	60b9      	str	r1, [r7, #8]
 8009b28:	603b      	str	r3, [r7, #0]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b20      	cmp	r3, #32
 8009b3c:	d17c      	bne.n	8009c38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d002      	beq.n	8009b4a <HAL_UART_Transmit+0x2c>
 8009b44:	88fb      	ldrh	r3, [r7, #6]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e075      	b.n	8009c3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d101      	bne.n	8009b5c <HAL_UART_Transmit+0x3e>
 8009b58:	2302      	movs	r3, #2
 8009b5a:	e06e      	b.n	8009c3a <HAL_UART_Transmit+0x11c>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2221      	movs	r2, #33	; 0x21
 8009b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b72:	f7fc fc9d 	bl	80064b0 <HAL_GetTick>
 8009b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	88fa      	ldrh	r2, [r7, #6]
 8009b7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	88fa      	ldrh	r2, [r7, #6]
 8009b82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b8c:	d108      	bne.n	8009ba0 <HAL_UART_Transmit+0x82>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d104      	bne.n	8009ba0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	61bb      	str	r3, [r7, #24]
 8009b9e:	e003      	b.n	8009ba8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009bb0:	e02a      	b.n	8009c08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	2180      	movs	r1, #128	; 0x80
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 fb1f 	bl	800a200 <UART_WaitOnFlagUntilTimeout>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e036      	b.n	8009c3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10b      	bne.n	8009bea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009be0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	3302      	adds	r3, #2
 8009be6:	61bb      	str	r3, [r7, #24]
 8009be8:	e007      	b.n	8009bfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	781a      	ldrb	r2, [r3, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	3b01      	subs	r3, #1
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1cf      	bne.n	8009bb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2140      	movs	r1, #64	; 0x40
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 faef 	bl	800a200 <UART_WaitOnFlagUntilTimeout>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e006      	b.n	8009c3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2220      	movs	r2, #32
 8009c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	e000      	b.n	8009c3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009c38:	2302      	movs	r3, #2
  }
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3720      	adds	r7, #32
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	60f8      	str	r0, [r7, #12]
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b20      	cmp	r3, #32
 8009c5a:	d11d      	bne.n	8009c98 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d002      	beq.n	8009c68 <HAL_UART_Receive_IT+0x26>
 8009c62:	88fb      	ldrh	r3, [r7, #6]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d101      	bne.n	8009c6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e016      	b.n	8009c9a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d101      	bne.n	8009c7a <HAL_UART_Receive_IT+0x38>
 8009c76:	2302      	movs	r3, #2
 8009c78:	e00f      	b.n	8009c9a <HAL_UART_Receive_IT+0x58>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009c88:	88fb      	ldrh	r3, [r7, #6]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	68b9      	ldr	r1, [r7, #8]
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f000 fb24 	bl	800a2dc <UART_Start_Receive_IT>
 8009c94:	4603      	mov	r3, r0
 8009c96:	e000      	b.n	8009c9a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009c98:	2302      	movs	r3, #2
  }
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
	...

08009ca4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b0ba      	sub	sp, #232	; 0xe8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cda:	f003 030f 	and.w	r3, r3, #15
 8009cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10f      	bne.n	8009d0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cee:	f003 0320 	and.w	r3, r3, #32
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d009      	beq.n	8009d0a <HAL_UART_IRQHandler+0x66>
 8009cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cfa:	f003 0320 	and.w	r3, r3, #32
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fc07 	bl	800a516 <UART_Receive_IT>
      return;
 8009d08:	e256      	b.n	800a1b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 80de 	beq.w	8009ed0 <HAL_UART_IRQHandler+0x22c>
 8009d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d106      	bne.n	8009d2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f000 80d1 	beq.w	8009ed0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00b      	beq.n	8009d52 <HAL_UART_IRQHandler+0xae>
 8009d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d005      	beq.n	8009d52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4a:	f043 0201 	orr.w	r2, r3, #1
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d56:	f003 0304 	and.w	r3, r3, #4
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00b      	beq.n	8009d76 <HAL_UART_IRQHandler+0xd2>
 8009d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d005      	beq.n	8009d76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6e:	f043 0202 	orr.w	r2, r3, #2
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00b      	beq.n	8009d9a <HAL_UART_IRQHandler+0xf6>
 8009d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d005      	beq.n	8009d9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d92:	f043 0204 	orr.w	r2, r3, #4
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9e:	f003 0308 	and.w	r3, r3, #8
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d011      	beq.n	8009dca <HAL_UART_IRQHandler+0x126>
 8009da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d105      	bne.n	8009dbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc2:	f043 0208 	orr.w	r2, r3, #8
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 81ed 	beq.w	800a1ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dd8:	f003 0320 	and.w	r3, r3, #32
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d008      	beq.n	8009df2 <HAL_UART_IRQHandler+0x14e>
 8009de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009de4:	f003 0320 	and.w	r3, r3, #32
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fb92 	bl	800a516 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	695b      	ldr	r3, [r3, #20]
 8009df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfc:	2b40      	cmp	r3, #64	; 0x40
 8009dfe:	bf0c      	ite	eq
 8009e00:	2301      	moveq	r3, #1
 8009e02:	2300      	movne	r3, #0
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	f003 0308 	and.w	r3, r3, #8
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d103      	bne.n	8009e1e <HAL_UART_IRQHandler+0x17a>
 8009e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d04f      	beq.n	8009ebe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fa9a 	bl	800a358 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2e:	2b40      	cmp	r3, #64	; 0x40
 8009e30:	d141      	bne.n	8009eb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3314      	adds	r3, #20
 8009e38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e40:	e853 3f00 	ldrex	r3, [r3]
 8009e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3314      	adds	r3, #20
 8009e5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009e5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009e6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e6e:	e841 2300 	strex	r3, r2, [r1]
 8009e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1d9      	bne.n	8009e32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d013      	beq.n	8009eae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8a:	4a7d      	ldr	r2, [pc, #500]	; (800a080 <HAL_UART_IRQHandler+0x3dc>)
 8009e8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fd f9c8 	bl	8007228 <HAL_DMA_Abort_IT>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d016      	beq.n	8009ecc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eac:	e00e      	b.n	8009ecc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f990 	bl	800a1d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb4:	e00a      	b.n	8009ecc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f98c 	bl	800a1d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ebc:	e006      	b.n	8009ecc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f988 	bl	800a1d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009eca:	e170      	b.n	800a1ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ecc:	bf00      	nop
    return;
 8009ece:	e16e      	b.n	800a1ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	f040 814a 	bne.w	800a16e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ede:	f003 0310 	and.w	r3, r3, #16
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f000 8143 	beq.w	800a16e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eec:	f003 0310 	and.w	r3, r3, #16
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f000 813c 	beq.w	800a16e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60bb      	str	r3, [r7, #8]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	60bb      	str	r3, [r7, #8]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	60bb      	str	r3, [r7, #8]
 8009f0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f16:	2b40      	cmp	r3, #64	; 0x40
 8009f18:	f040 80b4 	bne.w	800a084 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f000 8140 	beq.w	800a1b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	f080 8139 	bcs.w	800a1b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f52:	f000 8088 	beq.w	800a066 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	330c      	adds	r3, #12
 8009f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f64:	e853 3f00 	ldrex	r3, [r3]
 8009f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	330c      	adds	r3, #12
 8009f7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009f82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009f8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f92:	e841 2300 	strex	r3, r2, [r1]
 8009f96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1d9      	bne.n	8009f56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	3314      	adds	r3, #20
 8009fa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fac:	e853 3f00 	ldrex	r3, [r3]
 8009fb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fb4:	f023 0301 	bic.w	r3, r3, #1
 8009fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	3314      	adds	r3, #20
 8009fc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009fc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009fca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009fce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009fd2:	e841 2300 	strex	r3, r2, [r1]
 8009fd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1e1      	bne.n	8009fa2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3314      	adds	r3, #20
 8009fe4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fe8:	e853 3f00 	ldrex	r3, [r3]
 8009fec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	3314      	adds	r3, #20
 8009ffe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a002:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a004:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a006:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a008:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a00a:	e841 2300 	strex	r3, r2, [r1]
 800a00e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1e3      	bne.n	8009fde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2220      	movs	r2, #32
 800a01a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	330c      	adds	r3, #12
 800a02a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a02e:	e853 3f00 	ldrex	r3, [r3]
 800a032:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a036:	f023 0310 	bic.w	r3, r3, #16
 800a03a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	330c      	adds	r3, #12
 800a044:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a048:	65ba      	str	r2, [r7, #88]	; 0x58
 800a04a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a04e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e3      	bne.n	800a024 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a060:	4618      	mov	r0, r3
 800a062:	f7fd f871 	bl	8007148 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a06e:	b29b      	uxth	r3, r3
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	b29b      	uxth	r3, r3
 800a074:	4619      	mov	r1, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f8b6 	bl	800a1e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a07c:	e099      	b.n	800a1b2 <HAL_UART_IRQHandler+0x50e>
 800a07e:	bf00      	nop
 800a080:	0800a41f 	.word	0x0800a41f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a098:	b29b      	uxth	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f000 808b 	beq.w	800a1b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a0a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 8086 	beq.w	800a1b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	330c      	adds	r3, #12
 800a0b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	e853 3f00 	ldrex	r3, [r3]
 800a0b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	330c      	adds	r3, #12
 800a0ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a0ce:	647a      	str	r2, [r7, #68]	; 0x44
 800a0d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e3      	bne.n	800a0aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3314      	adds	r3, #20
 800a0e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	e853 3f00 	ldrex	r3, [r3]
 800a0f0:	623b      	str	r3, [r7, #32]
   return(result);
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	f023 0301 	bic.w	r3, r3, #1
 800a0f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	3314      	adds	r3, #20
 800a102:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a106:	633a      	str	r2, [r7, #48]	; 0x30
 800a108:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a10c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e3      	bne.n	800a0e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2220      	movs	r2, #32
 800a11e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	330c      	adds	r3, #12
 800a12e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	e853 3f00 	ldrex	r3, [r3]
 800a136:	60fb      	str	r3, [r7, #12]
   return(result);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f023 0310 	bic.w	r3, r3, #16
 800a13e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	330c      	adds	r3, #12
 800a148:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a14c:	61fa      	str	r2, [r7, #28]
 800a14e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a150:	69b9      	ldr	r1, [r7, #24]
 800a152:	69fa      	ldr	r2, [r7, #28]
 800a154:	e841 2300 	strex	r3, r2, [r1]
 800a158:	617b      	str	r3, [r7, #20]
   return(result);
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1e3      	bne.n	800a128 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f83e 	bl	800a1e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a16c:	e023      	b.n	800a1b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a16e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a176:	2b00      	cmp	r3, #0
 800a178:	d009      	beq.n	800a18e <HAL_UART_IRQHandler+0x4ea>
 800a17a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f95d 	bl	800a446 <UART_Transmit_IT>
    return;
 800a18c:	e014      	b.n	800a1b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00e      	beq.n	800a1b8 <HAL_UART_IRQHandler+0x514>
 800a19a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d008      	beq.n	800a1b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f99d 	bl	800a4e6 <UART_EndTransmit_IT>
    return;
 800a1ac:	e004      	b.n	800a1b8 <HAL_UART_IRQHandler+0x514>
    return;
 800a1ae:	bf00      	nop
 800a1b0:	e002      	b.n	800a1b8 <HAL_UART_IRQHandler+0x514>
      return;
 800a1b2:	bf00      	nop
 800a1b4:	e000      	b.n	800a1b8 <HAL_UART_IRQHandler+0x514>
      return;
 800a1b6:	bf00      	nop
  }
}
 800a1b8:	37e8      	adds	r7, #232	; 0xe8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop

0800a1c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b090      	sub	sp, #64	; 0x40
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	603b      	str	r3, [r7, #0]
 800a20c:	4613      	mov	r3, r2
 800a20e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a210:	e050      	b.n	800a2b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a218:	d04c      	beq.n	800a2b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a21a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d007      	beq.n	800a230 <UART_WaitOnFlagUntilTimeout+0x30>
 800a220:	f7fc f946 	bl	80064b0 <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d241      	bcs.n	800a2b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	330c      	adds	r3, #12
 800a236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	e853 3f00 	ldrex	r3, [r3]
 800a23e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a246:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	330c      	adds	r3, #12
 800a24e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a250:	637a      	str	r2, [r7, #52]	; 0x34
 800a252:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a258:	e841 2300 	strex	r3, r2, [r1]
 800a25c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e5      	bne.n	800a230 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	3314      	adds	r3, #20
 800a26a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	613b      	str	r3, [r7, #16]
   return(result);
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	f023 0301 	bic.w	r3, r3, #1
 800a27a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3314      	adds	r3, #20
 800a282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a284:	623a      	str	r2, [r7, #32]
 800a286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a288:	69f9      	ldr	r1, [r7, #28]
 800a28a:	6a3a      	ldr	r2, [r7, #32]
 800a28c:	e841 2300 	strex	r3, r2, [r1]
 800a290:	61bb      	str	r3, [r7, #24]
   return(result);
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e5      	bne.n	800a264 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2220      	movs	r2, #32
 800a29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2220      	movs	r2, #32
 800a2a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	e00f      	b.n	800a2d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	4013      	ands	r3, r2
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	bf0c      	ite	eq
 800a2c4:	2301      	moveq	r3, #1
 800a2c6:	2300      	movne	r3, #0
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	79fb      	ldrb	r3, [r7, #7]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d09f      	beq.n	800a212 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3740      	adds	r7, #64	; 0x40
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	88fa      	ldrh	r2, [r7, #6]
 800a2f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	88fa      	ldrh	r2, [r7, #6]
 800a2fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2222      	movs	r2, #34	; 0x22
 800a306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d007      	beq.n	800a32a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68da      	ldr	r2, [r3, #12]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a328:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	695a      	ldr	r2, [r3, #20]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f042 0201 	orr.w	r2, r2, #1
 800a338:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68da      	ldr	r2, [r3, #12]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f042 0220 	orr.w	r2, r2, #32
 800a348:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a358:	b480      	push	{r7}
 800a35a:	b095      	sub	sp, #84	; 0x54
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	330c      	adds	r3, #12
 800a366:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36a:	e853 3f00 	ldrex	r3, [r3]
 800a36e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a376:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	330c      	adds	r3, #12
 800a37e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a380:	643a      	str	r2, [r7, #64]	; 0x40
 800a382:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a384:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a386:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a388:	e841 2300 	strex	r3, r2, [r1]
 800a38c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1e5      	bne.n	800a360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3314      	adds	r3, #20
 800a39a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	e853 3f00 	ldrex	r3, [r3]
 800a3a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	f023 0301 	bic.w	r3, r3, #1
 800a3aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3314      	adds	r3, #20
 800a3b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3bc:	e841 2300 	strex	r3, r2, [r1]
 800a3c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1e5      	bne.n	800a394 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d119      	bne.n	800a404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	330c      	adds	r3, #12
 800a3d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	e853 3f00 	ldrex	r3, [r3]
 800a3de:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	f023 0310 	bic.w	r3, r3, #16
 800a3e6:	647b      	str	r3, [r7, #68]	; 0x44
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	330c      	adds	r3, #12
 800a3ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3f0:	61ba      	str	r2, [r7, #24]
 800a3f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f4:	6979      	ldr	r1, [r7, #20]
 800a3f6:	69ba      	ldr	r2, [r7, #24]
 800a3f8:	e841 2300 	strex	r3, r2, [r1]
 800a3fc:	613b      	str	r3, [r7, #16]
   return(result);
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1e5      	bne.n	800a3d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2220      	movs	r2, #32
 800a408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a412:	bf00      	nop
 800a414:	3754      	adds	r7, #84	; 0x54
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f7ff fecb 	bl	800a1d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a43e:	bf00      	nop
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a446:	b480      	push	{r7}
 800a448:	b085      	sub	sp, #20
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b21      	cmp	r3, #33	; 0x21
 800a458:	d13e      	bne.n	800a4d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a462:	d114      	bne.n	800a48e <UART_Transmit_IT+0x48>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d110      	bne.n	800a48e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	461a      	mov	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a480:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	1c9a      	adds	r2, r3, #2
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	621a      	str	r2, [r3, #32]
 800a48c:	e008      	b.n	800a4a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	1c59      	adds	r1, r3, #1
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	6211      	str	r1, [r2, #32]
 800a498:	781a      	ldrb	r2, [r3, #0]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10f      	bne.n	800a4d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68da      	ldr	r2, [r3, #12]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68da      	ldr	r2, [r3, #12]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	e000      	b.n	800a4da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a4d8:	2302      	movs	r3, #2
  }
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68da      	ldr	r2, [r3, #12]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2220      	movs	r2, #32
 800a502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff fe5a 	bl	800a1c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b08c      	sub	sp, #48	; 0x30
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b22      	cmp	r3, #34	; 0x22
 800a528:	f040 80ab 	bne.w	800a682 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a534:	d117      	bne.n	800a566 <UART_Receive_IT+0x50>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d113      	bne.n	800a566 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a546:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a554:	b29a      	uxth	r2, r3
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55e:	1c9a      	adds	r2, r3, #2
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	629a      	str	r2, [r3, #40]	; 0x28
 800a564:	e026      	b.n	800a5b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a56c:	2300      	movs	r3, #0
 800a56e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a578:	d007      	beq.n	800a58a <UART_Receive_IT+0x74>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10a      	bne.n	800a598 <UART_Receive_IT+0x82>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d106      	bne.n	800a598 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	b2da      	uxtb	r2, r3
 800a592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a594:	701a      	strb	r2, [r3, #0]
 800a596:	e008      	b.n	800a5aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ae:	1c5a      	adds	r2, r3, #1
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d15a      	bne.n	800a67e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68da      	ldr	r2, [r3, #12]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f022 0220 	bic.w	r2, r2, #32
 800a5d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68da      	ldr	r2, [r3, #12]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	695a      	ldr	r2, [r3, #20]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f022 0201 	bic.w	r2, r2, #1
 800a5f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a604:	2b01      	cmp	r3, #1
 800a606:	d135      	bne.n	800a674 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	330c      	adds	r3, #12
 800a614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	e853 3f00 	ldrex	r3, [r3]
 800a61c:	613b      	str	r3, [r7, #16]
   return(result);
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	f023 0310 	bic.w	r3, r3, #16
 800a624:	627b      	str	r3, [r7, #36]	; 0x24
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	330c      	adds	r3, #12
 800a62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62e:	623a      	str	r2, [r7, #32]
 800a630:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a632:	69f9      	ldr	r1, [r7, #28]
 800a634:	6a3a      	ldr	r2, [r7, #32]
 800a636:	e841 2300 	strex	r3, r2, [r1]
 800a63a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1e5      	bne.n	800a60e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0310 	and.w	r3, r3, #16
 800a64c:	2b10      	cmp	r3, #16
 800a64e:	d10a      	bne.n	800a666 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a650:	2300      	movs	r3, #0
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	60fb      	str	r3, [r7, #12]
 800a664:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7ff fdbb 	bl	800a1e8 <HAL_UARTEx_RxEventCallback>
 800a672:	e002      	b.n	800a67a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7f9 f8a3 	bl	80037c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	e002      	b.n	800a684 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	e000      	b.n	800a684 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a682:	2302      	movs	r3, #2
  }
}
 800a684:	4618      	mov	r0, r3
 800a686:	3730      	adds	r7, #48	; 0x30
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a68c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a690:	b0c0      	sub	sp, #256	; 0x100
 800a692:	af00      	add	r7, sp, #0
 800a694:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6a8:	68d9      	ldr	r1, [r3, #12]
 800a6aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	ea40 0301 	orr.w	r3, r0, r1
 800a6b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a6b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6ba:	689a      	ldr	r2, [r3, #8]
 800a6bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	431a      	orrs	r2, r3
 800a6c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a6e4:	f021 010c 	bic.w	r1, r1, #12
 800a6e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6f2:	430b      	orrs	r3, r1
 800a6f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a6f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a706:	6999      	ldr	r1, [r3, #24]
 800a708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	ea40 0301 	orr.w	r3, r0, r1
 800a712:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	4b8f      	ldr	r3, [pc, #572]	; (800a958 <UART_SetConfig+0x2cc>)
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d005      	beq.n	800a72c <UART_SetConfig+0xa0>
 800a720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	4b8d      	ldr	r3, [pc, #564]	; (800a95c <UART_SetConfig+0x2d0>)
 800a728:	429a      	cmp	r2, r3
 800a72a:	d104      	bne.n	800a736 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a72c:	f7fd fb62 	bl	8007df4 <HAL_RCC_GetPCLK2Freq>
 800a730:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a734:	e003      	b.n	800a73e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a736:	f7fd fb49 	bl	8007dcc <HAL_RCC_GetPCLK1Freq>
 800a73a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a73e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a742:	69db      	ldr	r3, [r3, #28]
 800a744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a748:	f040 810c 	bne.w	800a964 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a74c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a750:	2200      	movs	r2, #0
 800a752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a756:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a75a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a75e:	4622      	mov	r2, r4
 800a760:	462b      	mov	r3, r5
 800a762:	1891      	adds	r1, r2, r2
 800a764:	65b9      	str	r1, [r7, #88]	; 0x58
 800a766:	415b      	adcs	r3, r3
 800a768:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a76a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a76e:	4621      	mov	r1, r4
 800a770:	eb12 0801 	adds.w	r8, r2, r1
 800a774:	4629      	mov	r1, r5
 800a776:	eb43 0901 	adc.w	r9, r3, r1
 800a77a:	f04f 0200 	mov.w	r2, #0
 800a77e:	f04f 0300 	mov.w	r3, #0
 800a782:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a786:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a78a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a78e:	4690      	mov	r8, r2
 800a790:	4699      	mov	r9, r3
 800a792:	4623      	mov	r3, r4
 800a794:	eb18 0303 	adds.w	r3, r8, r3
 800a798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a79c:	462b      	mov	r3, r5
 800a79e:	eb49 0303 	adc.w	r3, r9, r3
 800a7a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a7a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a7b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a7b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	18db      	adds	r3, r3, r3
 800a7be:	653b      	str	r3, [r7, #80]	; 0x50
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	eb42 0303 	adc.w	r3, r2, r3
 800a7c6:	657b      	str	r3, [r7, #84]	; 0x54
 800a7c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a7cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a7d0:	f7f6 faaa 	bl	8000d28 <__aeabi_uldivmod>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4b61      	ldr	r3, [pc, #388]	; (800a960 <UART_SetConfig+0x2d4>)
 800a7da:	fba3 2302 	umull	r2, r3, r3, r2
 800a7de:	095b      	lsrs	r3, r3, #5
 800a7e0:	011c      	lsls	r4, r3, #4
 800a7e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a7ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a7f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a7f4:	4642      	mov	r2, r8
 800a7f6:	464b      	mov	r3, r9
 800a7f8:	1891      	adds	r1, r2, r2
 800a7fa:	64b9      	str	r1, [r7, #72]	; 0x48
 800a7fc:	415b      	adcs	r3, r3
 800a7fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a800:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a804:	4641      	mov	r1, r8
 800a806:	eb12 0a01 	adds.w	sl, r2, r1
 800a80a:	4649      	mov	r1, r9
 800a80c:	eb43 0b01 	adc.w	fp, r3, r1
 800a810:	f04f 0200 	mov.w	r2, #0
 800a814:	f04f 0300 	mov.w	r3, #0
 800a818:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a81c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a824:	4692      	mov	sl, r2
 800a826:	469b      	mov	fp, r3
 800a828:	4643      	mov	r3, r8
 800a82a:	eb1a 0303 	adds.w	r3, sl, r3
 800a82e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a832:	464b      	mov	r3, r9
 800a834:	eb4b 0303 	adc.w	r3, fp, r3
 800a838:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a848:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a84c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a850:	460b      	mov	r3, r1
 800a852:	18db      	adds	r3, r3, r3
 800a854:	643b      	str	r3, [r7, #64]	; 0x40
 800a856:	4613      	mov	r3, r2
 800a858:	eb42 0303 	adc.w	r3, r2, r3
 800a85c:	647b      	str	r3, [r7, #68]	; 0x44
 800a85e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a862:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a866:	f7f6 fa5f 	bl	8000d28 <__aeabi_uldivmod>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4611      	mov	r1, r2
 800a870:	4b3b      	ldr	r3, [pc, #236]	; (800a960 <UART_SetConfig+0x2d4>)
 800a872:	fba3 2301 	umull	r2, r3, r3, r1
 800a876:	095b      	lsrs	r3, r3, #5
 800a878:	2264      	movs	r2, #100	; 0x64
 800a87a:	fb02 f303 	mul.w	r3, r2, r3
 800a87e:	1acb      	subs	r3, r1, r3
 800a880:	00db      	lsls	r3, r3, #3
 800a882:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a886:	4b36      	ldr	r3, [pc, #216]	; (800a960 <UART_SetConfig+0x2d4>)
 800a888:	fba3 2302 	umull	r2, r3, r3, r2
 800a88c:	095b      	lsrs	r3, r3, #5
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a894:	441c      	add	r4, r3
 800a896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a89a:	2200      	movs	r2, #0
 800a89c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a8a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a8a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a8a8:	4642      	mov	r2, r8
 800a8aa:	464b      	mov	r3, r9
 800a8ac:	1891      	adds	r1, r2, r2
 800a8ae:	63b9      	str	r1, [r7, #56]	; 0x38
 800a8b0:	415b      	adcs	r3, r3
 800a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a8b8:	4641      	mov	r1, r8
 800a8ba:	1851      	adds	r1, r2, r1
 800a8bc:	6339      	str	r1, [r7, #48]	; 0x30
 800a8be:	4649      	mov	r1, r9
 800a8c0:	414b      	adcs	r3, r1
 800a8c2:	637b      	str	r3, [r7, #52]	; 0x34
 800a8c4:	f04f 0200 	mov.w	r2, #0
 800a8c8:	f04f 0300 	mov.w	r3, #0
 800a8cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a8d0:	4659      	mov	r1, fp
 800a8d2:	00cb      	lsls	r3, r1, #3
 800a8d4:	4651      	mov	r1, sl
 800a8d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8da:	4651      	mov	r1, sl
 800a8dc:	00ca      	lsls	r2, r1, #3
 800a8de:	4610      	mov	r0, r2
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	4642      	mov	r2, r8
 800a8e6:	189b      	adds	r3, r3, r2
 800a8e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a8ec:	464b      	mov	r3, r9
 800a8ee:	460a      	mov	r2, r1
 800a8f0:	eb42 0303 	adc.w	r3, r2, r3
 800a8f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a904:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a908:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a90c:	460b      	mov	r3, r1
 800a90e:	18db      	adds	r3, r3, r3
 800a910:	62bb      	str	r3, [r7, #40]	; 0x28
 800a912:	4613      	mov	r3, r2
 800a914:	eb42 0303 	adc.w	r3, r2, r3
 800a918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a91a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a91e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a922:	f7f6 fa01 	bl	8000d28 <__aeabi_uldivmod>
 800a926:	4602      	mov	r2, r0
 800a928:	460b      	mov	r3, r1
 800a92a:	4b0d      	ldr	r3, [pc, #52]	; (800a960 <UART_SetConfig+0x2d4>)
 800a92c:	fba3 1302 	umull	r1, r3, r3, r2
 800a930:	095b      	lsrs	r3, r3, #5
 800a932:	2164      	movs	r1, #100	; 0x64
 800a934:	fb01 f303 	mul.w	r3, r1, r3
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	00db      	lsls	r3, r3, #3
 800a93c:	3332      	adds	r3, #50	; 0x32
 800a93e:	4a08      	ldr	r2, [pc, #32]	; (800a960 <UART_SetConfig+0x2d4>)
 800a940:	fba2 2303 	umull	r2, r3, r2, r3
 800a944:	095b      	lsrs	r3, r3, #5
 800a946:	f003 0207 	and.w	r2, r3, #7
 800a94a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4422      	add	r2, r4
 800a952:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a954:	e106      	b.n	800ab64 <UART_SetConfig+0x4d8>
 800a956:	bf00      	nop
 800a958:	40011000 	.word	0x40011000
 800a95c:	40011400 	.word	0x40011400
 800a960:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a968:	2200      	movs	r2, #0
 800a96a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a96e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a972:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a976:	4642      	mov	r2, r8
 800a978:	464b      	mov	r3, r9
 800a97a:	1891      	adds	r1, r2, r2
 800a97c:	6239      	str	r1, [r7, #32]
 800a97e:	415b      	adcs	r3, r3
 800a980:	627b      	str	r3, [r7, #36]	; 0x24
 800a982:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a986:	4641      	mov	r1, r8
 800a988:	1854      	adds	r4, r2, r1
 800a98a:	4649      	mov	r1, r9
 800a98c:	eb43 0501 	adc.w	r5, r3, r1
 800a990:	f04f 0200 	mov.w	r2, #0
 800a994:	f04f 0300 	mov.w	r3, #0
 800a998:	00eb      	lsls	r3, r5, #3
 800a99a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a99e:	00e2      	lsls	r2, r4, #3
 800a9a0:	4614      	mov	r4, r2
 800a9a2:	461d      	mov	r5, r3
 800a9a4:	4643      	mov	r3, r8
 800a9a6:	18e3      	adds	r3, r4, r3
 800a9a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a9ac:	464b      	mov	r3, r9
 800a9ae:	eb45 0303 	adc.w	r3, r5, r3
 800a9b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a9b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a9c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a9c6:	f04f 0200 	mov.w	r2, #0
 800a9ca:	f04f 0300 	mov.w	r3, #0
 800a9ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	008b      	lsls	r3, r1, #2
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9dc:	4621      	mov	r1, r4
 800a9de:	008a      	lsls	r2, r1, #2
 800a9e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a9e4:	f7f6 f9a0 	bl	8000d28 <__aeabi_uldivmod>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4b60      	ldr	r3, [pc, #384]	; (800ab70 <UART_SetConfig+0x4e4>)
 800a9ee:	fba3 2302 	umull	r2, r3, r3, r2
 800a9f2:	095b      	lsrs	r3, r3, #5
 800a9f4:	011c      	lsls	r4, r3, #4
 800a9f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aa00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aa04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aa08:	4642      	mov	r2, r8
 800aa0a:	464b      	mov	r3, r9
 800aa0c:	1891      	adds	r1, r2, r2
 800aa0e:	61b9      	str	r1, [r7, #24]
 800aa10:	415b      	adcs	r3, r3
 800aa12:	61fb      	str	r3, [r7, #28]
 800aa14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa18:	4641      	mov	r1, r8
 800aa1a:	1851      	adds	r1, r2, r1
 800aa1c:	6139      	str	r1, [r7, #16]
 800aa1e:	4649      	mov	r1, r9
 800aa20:	414b      	adcs	r3, r1
 800aa22:	617b      	str	r3, [r7, #20]
 800aa24:	f04f 0200 	mov.w	r2, #0
 800aa28:	f04f 0300 	mov.w	r3, #0
 800aa2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aa30:	4659      	mov	r1, fp
 800aa32:	00cb      	lsls	r3, r1, #3
 800aa34:	4651      	mov	r1, sl
 800aa36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa3a:	4651      	mov	r1, sl
 800aa3c:	00ca      	lsls	r2, r1, #3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	4619      	mov	r1, r3
 800aa42:	4603      	mov	r3, r0
 800aa44:	4642      	mov	r2, r8
 800aa46:	189b      	adds	r3, r3, r2
 800aa48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa4c:	464b      	mov	r3, r9
 800aa4e:	460a      	mov	r2, r1
 800aa50:	eb42 0303 	adc.w	r3, r2, r3
 800aa54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa62:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aa64:	f04f 0200 	mov.w	r2, #0
 800aa68:	f04f 0300 	mov.w	r3, #0
 800aa6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800aa70:	4649      	mov	r1, r9
 800aa72:	008b      	lsls	r3, r1, #2
 800aa74:	4641      	mov	r1, r8
 800aa76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa7a:	4641      	mov	r1, r8
 800aa7c:	008a      	lsls	r2, r1, #2
 800aa7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aa82:	f7f6 f951 	bl	8000d28 <__aeabi_uldivmod>
 800aa86:	4602      	mov	r2, r0
 800aa88:	460b      	mov	r3, r1
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	4b38      	ldr	r3, [pc, #224]	; (800ab70 <UART_SetConfig+0x4e4>)
 800aa8e:	fba3 2301 	umull	r2, r3, r3, r1
 800aa92:	095b      	lsrs	r3, r3, #5
 800aa94:	2264      	movs	r2, #100	; 0x64
 800aa96:	fb02 f303 	mul.w	r3, r2, r3
 800aa9a:	1acb      	subs	r3, r1, r3
 800aa9c:	011b      	lsls	r3, r3, #4
 800aa9e:	3332      	adds	r3, #50	; 0x32
 800aaa0:	4a33      	ldr	r2, [pc, #204]	; (800ab70 <UART_SetConfig+0x4e4>)
 800aaa2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa6:	095b      	lsrs	r3, r3, #5
 800aaa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aaac:	441c      	add	r4, r3
 800aaae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aab2:	2200      	movs	r2, #0
 800aab4:	673b      	str	r3, [r7, #112]	; 0x70
 800aab6:	677a      	str	r2, [r7, #116]	; 0x74
 800aab8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800aabc:	4642      	mov	r2, r8
 800aabe:	464b      	mov	r3, r9
 800aac0:	1891      	adds	r1, r2, r2
 800aac2:	60b9      	str	r1, [r7, #8]
 800aac4:	415b      	adcs	r3, r3
 800aac6:	60fb      	str	r3, [r7, #12]
 800aac8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aacc:	4641      	mov	r1, r8
 800aace:	1851      	adds	r1, r2, r1
 800aad0:	6039      	str	r1, [r7, #0]
 800aad2:	4649      	mov	r1, r9
 800aad4:	414b      	adcs	r3, r1
 800aad6:	607b      	str	r3, [r7, #4]
 800aad8:	f04f 0200 	mov.w	r2, #0
 800aadc:	f04f 0300 	mov.w	r3, #0
 800aae0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aae4:	4659      	mov	r1, fp
 800aae6:	00cb      	lsls	r3, r1, #3
 800aae8:	4651      	mov	r1, sl
 800aaea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aaee:	4651      	mov	r1, sl
 800aaf0:	00ca      	lsls	r2, r1, #3
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	4642      	mov	r2, r8
 800aafa:	189b      	adds	r3, r3, r2
 800aafc:	66bb      	str	r3, [r7, #104]	; 0x68
 800aafe:	464b      	mov	r3, r9
 800ab00:	460a      	mov	r2, r1
 800ab02:	eb42 0303 	adc.w	r3, r2, r3
 800ab06:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	663b      	str	r3, [r7, #96]	; 0x60
 800ab12:	667a      	str	r2, [r7, #100]	; 0x64
 800ab14:	f04f 0200 	mov.w	r2, #0
 800ab18:	f04f 0300 	mov.w	r3, #0
 800ab1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ab20:	4649      	mov	r1, r9
 800ab22:	008b      	lsls	r3, r1, #2
 800ab24:	4641      	mov	r1, r8
 800ab26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab2a:	4641      	mov	r1, r8
 800ab2c:	008a      	lsls	r2, r1, #2
 800ab2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ab32:	f7f6 f8f9 	bl	8000d28 <__aeabi_uldivmod>
 800ab36:	4602      	mov	r2, r0
 800ab38:	460b      	mov	r3, r1
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	; (800ab70 <UART_SetConfig+0x4e4>)
 800ab3c:	fba3 1302 	umull	r1, r3, r3, r2
 800ab40:	095b      	lsrs	r3, r3, #5
 800ab42:	2164      	movs	r1, #100	; 0x64
 800ab44:	fb01 f303 	mul.w	r3, r1, r3
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	011b      	lsls	r3, r3, #4
 800ab4c:	3332      	adds	r3, #50	; 0x32
 800ab4e:	4a08      	ldr	r2, [pc, #32]	; (800ab70 <UART_SetConfig+0x4e4>)
 800ab50:	fba2 2303 	umull	r2, r3, r2, r3
 800ab54:	095b      	lsrs	r3, r3, #5
 800ab56:	f003 020f 	and.w	r2, r3, #15
 800ab5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4422      	add	r2, r4
 800ab62:	609a      	str	r2, [r3, #8]
}
 800ab64:	bf00      	nop
 800ab66:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab70:	51eb851f 	.word	0x51eb851f

0800ab74 <__cvt>:
 800ab74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab78:	ec55 4b10 	vmov	r4, r5, d0
 800ab7c:	2d00      	cmp	r5, #0
 800ab7e:	460e      	mov	r6, r1
 800ab80:	4619      	mov	r1, r3
 800ab82:	462b      	mov	r3, r5
 800ab84:	bfbb      	ittet	lt
 800ab86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab8a:	461d      	movlt	r5, r3
 800ab8c:	2300      	movge	r3, #0
 800ab8e:	232d      	movlt	r3, #45	; 0x2d
 800ab90:	700b      	strb	r3, [r1, #0]
 800ab92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab98:	4691      	mov	r9, r2
 800ab9a:	f023 0820 	bic.w	r8, r3, #32
 800ab9e:	bfbc      	itt	lt
 800aba0:	4622      	movlt	r2, r4
 800aba2:	4614      	movlt	r4, r2
 800aba4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aba8:	d005      	beq.n	800abb6 <__cvt+0x42>
 800abaa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800abae:	d100      	bne.n	800abb2 <__cvt+0x3e>
 800abb0:	3601      	adds	r6, #1
 800abb2:	2102      	movs	r1, #2
 800abb4:	e000      	b.n	800abb8 <__cvt+0x44>
 800abb6:	2103      	movs	r1, #3
 800abb8:	ab03      	add	r3, sp, #12
 800abba:	9301      	str	r3, [sp, #4]
 800abbc:	ab02      	add	r3, sp, #8
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	ec45 4b10 	vmov	d0, r4, r5
 800abc4:	4653      	mov	r3, sl
 800abc6:	4632      	mov	r2, r6
 800abc8:	f000 ff36 	bl	800ba38 <_dtoa_r>
 800abcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800abd0:	4607      	mov	r7, r0
 800abd2:	d102      	bne.n	800abda <__cvt+0x66>
 800abd4:	f019 0f01 	tst.w	r9, #1
 800abd8:	d022      	beq.n	800ac20 <__cvt+0xac>
 800abda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800abde:	eb07 0906 	add.w	r9, r7, r6
 800abe2:	d110      	bne.n	800ac06 <__cvt+0x92>
 800abe4:	783b      	ldrb	r3, [r7, #0]
 800abe6:	2b30      	cmp	r3, #48	; 0x30
 800abe8:	d10a      	bne.n	800ac00 <__cvt+0x8c>
 800abea:	2200      	movs	r2, #0
 800abec:	2300      	movs	r3, #0
 800abee:	4620      	mov	r0, r4
 800abf0:	4629      	mov	r1, r5
 800abf2:	f7f5 ff89 	bl	8000b08 <__aeabi_dcmpeq>
 800abf6:	b918      	cbnz	r0, 800ac00 <__cvt+0x8c>
 800abf8:	f1c6 0601 	rsb	r6, r6, #1
 800abfc:	f8ca 6000 	str.w	r6, [sl]
 800ac00:	f8da 3000 	ldr.w	r3, [sl]
 800ac04:	4499      	add	r9, r3
 800ac06:	2200      	movs	r2, #0
 800ac08:	2300      	movs	r3, #0
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	f7f5 ff7b 	bl	8000b08 <__aeabi_dcmpeq>
 800ac12:	b108      	cbz	r0, 800ac18 <__cvt+0xa4>
 800ac14:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac18:	2230      	movs	r2, #48	; 0x30
 800ac1a:	9b03      	ldr	r3, [sp, #12]
 800ac1c:	454b      	cmp	r3, r9
 800ac1e:	d307      	bcc.n	800ac30 <__cvt+0xbc>
 800ac20:	9b03      	ldr	r3, [sp, #12]
 800ac22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac24:	1bdb      	subs	r3, r3, r7
 800ac26:	4638      	mov	r0, r7
 800ac28:	6013      	str	r3, [r2, #0]
 800ac2a:	b004      	add	sp, #16
 800ac2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac30:	1c59      	adds	r1, r3, #1
 800ac32:	9103      	str	r1, [sp, #12]
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	e7f0      	b.n	800ac1a <__cvt+0xa6>

0800ac38 <__exponent>:
 800ac38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2900      	cmp	r1, #0
 800ac3e:	bfb8      	it	lt
 800ac40:	4249      	neglt	r1, r1
 800ac42:	f803 2b02 	strb.w	r2, [r3], #2
 800ac46:	bfb4      	ite	lt
 800ac48:	222d      	movlt	r2, #45	; 0x2d
 800ac4a:	222b      	movge	r2, #43	; 0x2b
 800ac4c:	2909      	cmp	r1, #9
 800ac4e:	7042      	strb	r2, [r0, #1]
 800ac50:	dd2a      	ble.n	800aca8 <__exponent+0x70>
 800ac52:	f10d 0207 	add.w	r2, sp, #7
 800ac56:	4617      	mov	r7, r2
 800ac58:	260a      	movs	r6, #10
 800ac5a:	4694      	mov	ip, r2
 800ac5c:	fb91 f5f6 	sdiv	r5, r1, r6
 800ac60:	fb06 1415 	mls	r4, r6, r5, r1
 800ac64:	3430      	adds	r4, #48	; 0x30
 800ac66:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	2c63      	cmp	r4, #99	; 0x63
 800ac6e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800ac72:	4629      	mov	r1, r5
 800ac74:	dcf1      	bgt.n	800ac5a <__exponent+0x22>
 800ac76:	3130      	adds	r1, #48	; 0x30
 800ac78:	f1ac 0402 	sub.w	r4, ip, #2
 800ac7c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ac80:	1c41      	adds	r1, r0, #1
 800ac82:	4622      	mov	r2, r4
 800ac84:	42ba      	cmp	r2, r7
 800ac86:	d30a      	bcc.n	800ac9e <__exponent+0x66>
 800ac88:	f10d 0209 	add.w	r2, sp, #9
 800ac8c:	eba2 020c 	sub.w	r2, r2, ip
 800ac90:	42bc      	cmp	r4, r7
 800ac92:	bf88      	it	hi
 800ac94:	2200      	movhi	r2, #0
 800ac96:	4413      	add	r3, r2
 800ac98:	1a18      	subs	r0, r3, r0
 800ac9a:	b003      	add	sp, #12
 800ac9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac9e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aca2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800aca6:	e7ed      	b.n	800ac84 <__exponent+0x4c>
 800aca8:	2330      	movs	r3, #48	; 0x30
 800acaa:	3130      	adds	r1, #48	; 0x30
 800acac:	7083      	strb	r3, [r0, #2]
 800acae:	70c1      	strb	r1, [r0, #3]
 800acb0:	1d03      	adds	r3, r0, #4
 800acb2:	e7f1      	b.n	800ac98 <__exponent+0x60>

0800acb4 <_printf_float>:
 800acb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb8:	ed2d 8b02 	vpush	{d8}
 800acbc:	b08d      	sub	sp, #52	; 0x34
 800acbe:	460c      	mov	r4, r1
 800acc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800acc4:	4616      	mov	r6, r2
 800acc6:	461f      	mov	r7, r3
 800acc8:	4605      	mov	r5, r0
 800acca:	f000 fd95 	bl	800b7f8 <_localeconv_r>
 800acce:	f8d0 a000 	ldr.w	sl, [r0]
 800acd2:	4650      	mov	r0, sl
 800acd4:	f7f5 faec 	bl	80002b0 <strlen>
 800acd8:	2300      	movs	r3, #0
 800acda:	930a      	str	r3, [sp, #40]	; 0x28
 800acdc:	6823      	ldr	r3, [r4, #0]
 800acde:	9305      	str	r3, [sp, #20]
 800ace0:	f8d8 3000 	ldr.w	r3, [r8]
 800ace4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ace8:	3307      	adds	r3, #7
 800acea:	f023 0307 	bic.w	r3, r3, #7
 800acee:	f103 0208 	add.w	r2, r3, #8
 800acf2:	f8c8 2000 	str.w	r2, [r8]
 800acf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800acfe:	9307      	str	r3, [sp, #28]
 800ad00:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad04:	ee08 0a10 	vmov	s16, r0
 800ad08:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ad0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad10:	4b9e      	ldr	r3, [pc, #632]	; (800af8c <_printf_float+0x2d8>)
 800ad12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad16:	f7f5 ff29 	bl	8000b6c <__aeabi_dcmpun>
 800ad1a:	bb88      	cbnz	r0, 800ad80 <_printf_float+0xcc>
 800ad1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad20:	4b9a      	ldr	r3, [pc, #616]	; (800af8c <_printf_float+0x2d8>)
 800ad22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad26:	f7f5 ff03 	bl	8000b30 <__aeabi_dcmple>
 800ad2a:	bb48      	cbnz	r0, 800ad80 <_printf_float+0xcc>
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2300      	movs	r3, #0
 800ad30:	4640      	mov	r0, r8
 800ad32:	4649      	mov	r1, r9
 800ad34:	f7f5 fef2 	bl	8000b1c <__aeabi_dcmplt>
 800ad38:	b110      	cbz	r0, 800ad40 <_printf_float+0x8c>
 800ad3a:	232d      	movs	r3, #45	; 0x2d
 800ad3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad40:	4a93      	ldr	r2, [pc, #588]	; (800af90 <_printf_float+0x2dc>)
 800ad42:	4b94      	ldr	r3, [pc, #592]	; (800af94 <_printf_float+0x2e0>)
 800ad44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ad48:	bf94      	ite	ls
 800ad4a:	4690      	movls	r8, r2
 800ad4c:	4698      	movhi	r8, r3
 800ad4e:	2303      	movs	r3, #3
 800ad50:	6123      	str	r3, [r4, #16]
 800ad52:	9b05      	ldr	r3, [sp, #20]
 800ad54:	f023 0304 	bic.w	r3, r3, #4
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	f04f 0900 	mov.w	r9, #0
 800ad5e:	9700      	str	r7, [sp, #0]
 800ad60:	4633      	mov	r3, r6
 800ad62:	aa0b      	add	r2, sp, #44	; 0x2c
 800ad64:	4621      	mov	r1, r4
 800ad66:	4628      	mov	r0, r5
 800ad68:	f000 f9da 	bl	800b120 <_printf_common>
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	f040 8090 	bne.w	800ae92 <_printf_float+0x1de>
 800ad72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad76:	b00d      	add	sp, #52	; 0x34
 800ad78:	ecbd 8b02 	vpop	{d8}
 800ad7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad80:	4642      	mov	r2, r8
 800ad82:	464b      	mov	r3, r9
 800ad84:	4640      	mov	r0, r8
 800ad86:	4649      	mov	r1, r9
 800ad88:	f7f5 fef0 	bl	8000b6c <__aeabi_dcmpun>
 800ad8c:	b140      	cbz	r0, 800ada0 <_printf_float+0xec>
 800ad8e:	464b      	mov	r3, r9
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	bfbc      	itt	lt
 800ad94:	232d      	movlt	r3, #45	; 0x2d
 800ad96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad9a:	4a7f      	ldr	r2, [pc, #508]	; (800af98 <_printf_float+0x2e4>)
 800ad9c:	4b7f      	ldr	r3, [pc, #508]	; (800af9c <_printf_float+0x2e8>)
 800ad9e:	e7d1      	b.n	800ad44 <_printf_float+0x90>
 800ada0:	6863      	ldr	r3, [r4, #4]
 800ada2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ada6:	9206      	str	r2, [sp, #24]
 800ada8:	1c5a      	adds	r2, r3, #1
 800adaa:	d13f      	bne.n	800ae2c <_printf_float+0x178>
 800adac:	2306      	movs	r3, #6
 800adae:	6063      	str	r3, [r4, #4]
 800adb0:	9b05      	ldr	r3, [sp, #20]
 800adb2:	6861      	ldr	r1, [r4, #4]
 800adb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800adb8:	2300      	movs	r3, #0
 800adba:	9303      	str	r3, [sp, #12]
 800adbc:	ab0a      	add	r3, sp, #40	; 0x28
 800adbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 800adc2:	ab09      	add	r3, sp, #36	; 0x24
 800adc4:	ec49 8b10 	vmov	d0, r8, r9
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	6022      	str	r2, [r4, #0]
 800adcc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800add0:	4628      	mov	r0, r5
 800add2:	f7ff fecf 	bl	800ab74 <__cvt>
 800add6:	9b06      	ldr	r3, [sp, #24]
 800add8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adda:	2b47      	cmp	r3, #71	; 0x47
 800addc:	4680      	mov	r8, r0
 800adde:	d108      	bne.n	800adf2 <_printf_float+0x13e>
 800ade0:	1cc8      	adds	r0, r1, #3
 800ade2:	db02      	blt.n	800adea <_printf_float+0x136>
 800ade4:	6863      	ldr	r3, [r4, #4]
 800ade6:	4299      	cmp	r1, r3
 800ade8:	dd41      	ble.n	800ae6e <_printf_float+0x1ba>
 800adea:	f1ab 0302 	sub.w	r3, fp, #2
 800adee:	fa5f fb83 	uxtb.w	fp, r3
 800adf2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800adf6:	d820      	bhi.n	800ae3a <_printf_float+0x186>
 800adf8:	3901      	subs	r1, #1
 800adfa:	465a      	mov	r2, fp
 800adfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae00:	9109      	str	r1, [sp, #36]	; 0x24
 800ae02:	f7ff ff19 	bl	800ac38 <__exponent>
 800ae06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae08:	1813      	adds	r3, r2, r0
 800ae0a:	2a01      	cmp	r2, #1
 800ae0c:	4681      	mov	r9, r0
 800ae0e:	6123      	str	r3, [r4, #16]
 800ae10:	dc02      	bgt.n	800ae18 <_printf_float+0x164>
 800ae12:	6822      	ldr	r2, [r4, #0]
 800ae14:	07d2      	lsls	r2, r2, #31
 800ae16:	d501      	bpl.n	800ae1c <_printf_float+0x168>
 800ae18:	3301      	adds	r3, #1
 800ae1a:	6123      	str	r3, [r4, #16]
 800ae1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d09c      	beq.n	800ad5e <_printf_float+0xaa>
 800ae24:	232d      	movs	r3, #45	; 0x2d
 800ae26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae2a:	e798      	b.n	800ad5e <_printf_float+0xaa>
 800ae2c:	9a06      	ldr	r2, [sp, #24]
 800ae2e:	2a47      	cmp	r2, #71	; 0x47
 800ae30:	d1be      	bne.n	800adb0 <_printf_float+0xfc>
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1bc      	bne.n	800adb0 <_printf_float+0xfc>
 800ae36:	2301      	movs	r3, #1
 800ae38:	e7b9      	b.n	800adae <_printf_float+0xfa>
 800ae3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ae3e:	d118      	bne.n	800ae72 <_printf_float+0x1be>
 800ae40:	2900      	cmp	r1, #0
 800ae42:	6863      	ldr	r3, [r4, #4]
 800ae44:	dd0b      	ble.n	800ae5e <_printf_float+0x1aa>
 800ae46:	6121      	str	r1, [r4, #16]
 800ae48:	b913      	cbnz	r3, 800ae50 <_printf_float+0x19c>
 800ae4a:	6822      	ldr	r2, [r4, #0]
 800ae4c:	07d0      	lsls	r0, r2, #31
 800ae4e:	d502      	bpl.n	800ae56 <_printf_float+0x1a2>
 800ae50:	3301      	adds	r3, #1
 800ae52:	440b      	add	r3, r1
 800ae54:	6123      	str	r3, [r4, #16]
 800ae56:	65a1      	str	r1, [r4, #88]	; 0x58
 800ae58:	f04f 0900 	mov.w	r9, #0
 800ae5c:	e7de      	b.n	800ae1c <_printf_float+0x168>
 800ae5e:	b913      	cbnz	r3, 800ae66 <_printf_float+0x1b2>
 800ae60:	6822      	ldr	r2, [r4, #0]
 800ae62:	07d2      	lsls	r2, r2, #31
 800ae64:	d501      	bpl.n	800ae6a <_printf_float+0x1b6>
 800ae66:	3302      	adds	r3, #2
 800ae68:	e7f4      	b.n	800ae54 <_printf_float+0x1a0>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e7f2      	b.n	800ae54 <_printf_float+0x1a0>
 800ae6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ae72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae74:	4299      	cmp	r1, r3
 800ae76:	db05      	blt.n	800ae84 <_printf_float+0x1d0>
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	6121      	str	r1, [r4, #16]
 800ae7c:	07d8      	lsls	r0, r3, #31
 800ae7e:	d5ea      	bpl.n	800ae56 <_printf_float+0x1a2>
 800ae80:	1c4b      	adds	r3, r1, #1
 800ae82:	e7e7      	b.n	800ae54 <_printf_float+0x1a0>
 800ae84:	2900      	cmp	r1, #0
 800ae86:	bfd4      	ite	le
 800ae88:	f1c1 0202 	rsble	r2, r1, #2
 800ae8c:	2201      	movgt	r2, #1
 800ae8e:	4413      	add	r3, r2
 800ae90:	e7e0      	b.n	800ae54 <_printf_float+0x1a0>
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	055a      	lsls	r2, r3, #21
 800ae96:	d407      	bmi.n	800aea8 <_printf_float+0x1f4>
 800ae98:	6923      	ldr	r3, [r4, #16]
 800ae9a:	4642      	mov	r2, r8
 800ae9c:	4631      	mov	r1, r6
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b8      	blx	r7
 800aea2:	3001      	adds	r0, #1
 800aea4:	d12c      	bne.n	800af00 <_printf_float+0x24c>
 800aea6:	e764      	b.n	800ad72 <_printf_float+0xbe>
 800aea8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aeac:	f240 80e0 	bls.w	800b070 <_printf_float+0x3bc>
 800aeb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f7f5 fe26 	bl	8000b08 <__aeabi_dcmpeq>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d034      	beq.n	800af2a <_printf_float+0x276>
 800aec0:	4a37      	ldr	r2, [pc, #220]	; (800afa0 <_printf_float+0x2ec>)
 800aec2:	2301      	movs	r3, #1
 800aec4:	4631      	mov	r1, r6
 800aec6:	4628      	mov	r0, r5
 800aec8:	47b8      	blx	r7
 800aeca:	3001      	adds	r0, #1
 800aecc:	f43f af51 	beq.w	800ad72 <_printf_float+0xbe>
 800aed0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aed4:	429a      	cmp	r2, r3
 800aed6:	db02      	blt.n	800aede <_printf_float+0x22a>
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	07d8      	lsls	r0, r3, #31
 800aedc:	d510      	bpl.n	800af00 <_printf_float+0x24c>
 800aede:	ee18 3a10 	vmov	r3, s16
 800aee2:	4652      	mov	r2, sl
 800aee4:	4631      	mov	r1, r6
 800aee6:	4628      	mov	r0, r5
 800aee8:	47b8      	blx	r7
 800aeea:	3001      	adds	r0, #1
 800aeec:	f43f af41 	beq.w	800ad72 <_printf_float+0xbe>
 800aef0:	f04f 0800 	mov.w	r8, #0
 800aef4:	f104 091a 	add.w	r9, r4, #26
 800aef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aefa:	3b01      	subs	r3, #1
 800aefc:	4543      	cmp	r3, r8
 800aefe:	dc09      	bgt.n	800af14 <_printf_float+0x260>
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	079b      	lsls	r3, r3, #30
 800af04:	f100 8107 	bmi.w	800b116 <_printf_float+0x462>
 800af08:	68e0      	ldr	r0, [r4, #12]
 800af0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af0c:	4298      	cmp	r0, r3
 800af0e:	bfb8      	it	lt
 800af10:	4618      	movlt	r0, r3
 800af12:	e730      	b.n	800ad76 <_printf_float+0xc2>
 800af14:	2301      	movs	r3, #1
 800af16:	464a      	mov	r2, r9
 800af18:	4631      	mov	r1, r6
 800af1a:	4628      	mov	r0, r5
 800af1c:	47b8      	blx	r7
 800af1e:	3001      	adds	r0, #1
 800af20:	f43f af27 	beq.w	800ad72 <_printf_float+0xbe>
 800af24:	f108 0801 	add.w	r8, r8, #1
 800af28:	e7e6      	b.n	800aef8 <_printf_float+0x244>
 800af2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	dc39      	bgt.n	800afa4 <_printf_float+0x2f0>
 800af30:	4a1b      	ldr	r2, [pc, #108]	; (800afa0 <_printf_float+0x2ec>)
 800af32:	2301      	movs	r3, #1
 800af34:	4631      	mov	r1, r6
 800af36:	4628      	mov	r0, r5
 800af38:	47b8      	blx	r7
 800af3a:	3001      	adds	r0, #1
 800af3c:	f43f af19 	beq.w	800ad72 <_printf_float+0xbe>
 800af40:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800af44:	4313      	orrs	r3, r2
 800af46:	d102      	bne.n	800af4e <_printf_float+0x29a>
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	07d9      	lsls	r1, r3, #31
 800af4c:	d5d8      	bpl.n	800af00 <_printf_float+0x24c>
 800af4e:	ee18 3a10 	vmov	r3, s16
 800af52:	4652      	mov	r2, sl
 800af54:	4631      	mov	r1, r6
 800af56:	4628      	mov	r0, r5
 800af58:	47b8      	blx	r7
 800af5a:	3001      	adds	r0, #1
 800af5c:	f43f af09 	beq.w	800ad72 <_printf_float+0xbe>
 800af60:	f04f 0900 	mov.w	r9, #0
 800af64:	f104 0a1a 	add.w	sl, r4, #26
 800af68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af6a:	425b      	negs	r3, r3
 800af6c:	454b      	cmp	r3, r9
 800af6e:	dc01      	bgt.n	800af74 <_printf_float+0x2c0>
 800af70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af72:	e792      	b.n	800ae9a <_printf_float+0x1e6>
 800af74:	2301      	movs	r3, #1
 800af76:	4652      	mov	r2, sl
 800af78:	4631      	mov	r1, r6
 800af7a:	4628      	mov	r0, r5
 800af7c:	47b8      	blx	r7
 800af7e:	3001      	adds	r0, #1
 800af80:	f43f aef7 	beq.w	800ad72 <_printf_float+0xbe>
 800af84:	f109 0901 	add.w	r9, r9, #1
 800af88:	e7ee      	b.n	800af68 <_printf_float+0x2b4>
 800af8a:	bf00      	nop
 800af8c:	7fefffff 	.word	0x7fefffff
 800af90:	08010b14 	.word	0x08010b14
 800af94:	08010b18 	.word	0x08010b18
 800af98:	08010b1c 	.word	0x08010b1c
 800af9c:	08010b20 	.word	0x08010b20
 800afa0:	08010c36 	.word	0x08010c36
 800afa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afa8:	429a      	cmp	r2, r3
 800afaa:	bfa8      	it	ge
 800afac:	461a      	movge	r2, r3
 800afae:	2a00      	cmp	r2, #0
 800afb0:	4691      	mov	r9, r2
 800afb2:	dc37      	bgt.n	800b024 <_printf_float+0x370>
 800afb4:	f04f 0b00 	mov.w	fp, #0
 800afb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afbc:	f104 021a 	add.w	r2, r4, #26
 800afc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afc2:	9305      	str	r3, [sp, #20]
 800afc4:	eba3 0309 	sub.w	r3, r3, r9
 800afc8:	455b      	cmp	r3, fp
 800afca:	dc33      	bgt.n	800b034 <_printf_float+0x380>
 800afcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afd0:	429a      	cmp	r2, r3
 800afd2:	db3b      	blt.n	800b04c <_printf_float+0x398>
 800afd4:	6823      	ldr	r3, [r4, #0]
 800afd6:	07da      	lsls	r2, r3, #31
 800afd8:	d438      	bmi.n	800b04c <_printf_float+0x398>
 800afda:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800afde:	eba2 0903 	sub.w	r9, r2, r3
 800afe2:	9b05      	ldr	r3, [sp, #20]
 800afe4:	1ad2      	subs	r2, r2, r3
 800afe6:	4591      	cmp	r9, r2
 800afe8:	bfa8      	it	ge
 800afea:	4691      	movge	r9, r2
 800afec:	f1b9 0f00 	cmp.w	r9, #0
 800aff0:	dc35      	bgt.n	800b05e <_printf_float+0x3aa>
 800aff2:	f04f 0800 	mov.w	r8, #0
 800aff6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800affa:	f104 0a1a 	add.w	sl, r4, #26
 800affe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b002:	1a9b      	subs	r3, r3, r2
 800b004:	eba3 0309 	sub.w	r3, r3, r9
 800b008:	4543      	cmp	r3, r8
 800b00a:	f77f af79 	ble.w	800af00 <_printf_float+0x24c>
 800b00e:	2301      	movs	r3, #1
 800b010:	4652      	mov	r2, sl
 800b012:	4631      	mov	r1, r6
 800b014:	4628      	mov	r0, r5
 800b016:	47b8      	blx	r7
 800b018:	3001      	adds	r0, #1
 800b01a:	f43f aeaa 	beq.w	800ad72 <_printf_float+0xbe>
 800b01e:	f108 0801 	add.w	r8, r8, #1
 800b022:	e7ec      	b.n	800affe <_printf_float+0x34a>
 800b024:	4613      	mov	r3, r2
 800b026:	4631      	mov	r1, r6
 800b028:	4642      	mov	r2, r8
 800b02a:	4628      	mov	r0, r5
 800b02c:	47b8      	blx	r7
 800b02e:	3001      	adds	r0, #1
 800b030:	d1c0      	bne.n	800afb4 <_printf_float+0x300>
 800b032:	e69e      	b.n	800ad72 <_printf_float+0xbe>
 800b034:	2301      	movs	r3, #1
 800b036:	4631      	mov	r1, r6
 800b038:	4628      	mov	r0, r5
 800b03a:	9205      	str	r2, [sp, #20]
 800b03c:	47b8      	blx	r7
 800b03e:	3001      	adds	r0, #1
 800b040:	f43f ae97 	beq.w	800ad72 <_printf_float+0xbe>
 800b044:	9a05      	ldr	r2, [sp, #20]
 800b046:	f10b 0b01 	add.w	fp, fp, #1
 800b04a:	e7b9      	b.n	800afc0 <_printf_float+0x30c>
 800b04c:	ee18 3a10 	vmov	r3, s16
 800b050:	4652      	mov	r2, sl
 800b052:	4631      	mov	r1, r6
 800b054:	4628      	mov	r0, r5
 800b056:	47b8      	blx	r7
 800b058:	3001      	adds	r0, #1
 800b05a:	d1be      	bne.n	800afda <_printf_float+0x326>
 800b05c:	e689      	b.n	800ad72 <_printf_float+0xbe>
 800b05e:	9a05      	ldr	r2, [sp, #20]
 800b060:	464b      	mov	r3, r9
 800b062:	4442      	add	r2, r8
 800b064:	4631      	mov	r1, r6
 800b066:	4628      	mov	r0, r5
 800b068:	47b8      	blx	r7
 800b06a:	3001      	adds	r0, #1
 800b06c:	d1c1      	bne.n	800aff2 <_printf_float+0x33e>
 800b06e:	e680      	b.n	800ad72 <_printf_float+0xbe>
 800b070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b072:	2a01      	cmp	r2, #1
 800b074:	dc01      	bgt.n	800b07a <_printf_float+0x3c6>
 800b076:	07db      	lsls	r3, r3, #31
 800b078:	d53a      	bpl.n	800b0f0 <_printf_float+0x43c>
 800b07a:	2301      	movs	r3, #1
 800b07c:	4642      	mov	r2, r8
 800b07e:	4631      	mov	r1, r6
 800b080:	4628      	mov	r0, r5
 800b082:	47b8      	blx	r7
 800b084:	3001      	adds	r0, #1
 800b086:	f43f ae74 	beq.w	800ad72 <_printf_float+0xbe>
 800b08a:	ee18 3a10 	vmov	r3, s16
 800b08e:	4652      	mov	r2, sl
 800b090:	4631      	mov	r1, r6
 800b092:	4628      	mov	r0, r5
 800b094:	47b8      	blx	r7
 800b096:	3001      	adds	r0, #1
 800b098:	f43f ae6b 	beq.w	800ad72 <_printf_float+0xbe>
 800b09c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b0a8:	f7f5 fd2e 	bl	8000b08 <__aeabi_dcmpeq>
 800b0ac:	b9d8      	cbnz	r0, 800b0e6 <_printf_float+0x432>
 800b0ae:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b0b2:	f108 0201 	add.w	r2, r8, #1
 800b0b6:	4631      	mov	r1, r6
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	47b8      	blx	r7
 800b0bc:	3001      	adds	r0, #1
 800b0be:	d10e      	bne.n	800b0de <_printf_float+0x42a>
 800b0c0:	e657      	b.n	800ad72 <_printf_float+0xbe>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	4652      	mov	r2, sl
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	f43f ae50 	beq.w	800ad72 <_printf_float+0xbe>
 800b0d2:	f108 0801 	add.w	r8, r8, #1
 800b0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	4543      	cmp	r3, r8
 800b0dc:	dcf1      	bgt.n	800b0c2 <_printf_float+0x40e>
 800b0de:	464b      	mov	r3, r9
 800b0e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b0e4:	e6da      	b.n	800ae9c <_printf_float+0x1e8>
 800b0e6:	f04f 0800 	mov.w	r8, #0
 800b0ea:	f104 0a1a 	add.w	sl, r4, #26
 800b0ee:	e7f2      	b.n	800b0d6 <_printf_float+0x422>
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	4642      	mov	r2, r8
 800b0f4:	e7df      	b.n	800b0b6 <_printf_float+0x402>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	464a      	mov	r2, r9
 800b0fa:	4631      	mov	r1, r6
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	47b8      	blx	r7
 800b100:	3001      	adds	r0, #1
 800b102:	f43f ae36 	beq.w	800ad72 <_printf_float+0xbe>
 800b106:	f108 0801 	add.w	r8, r8, #1
 800b10a:	68e3      	ldr	r3, [r4, #12]
 800b10c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b10e:	1a5b      	subs	r3, r3, r1
 800b110:	4543      	cmp	r3, r8
 800b112:	dcf0      	bgt.n	800b0f6 <_printf_float+0x442>
 800b114:	e6f8      	b.n	800af08 <_printf_float+0x254>
 800b116:	f04f 0800 	mov.w	r8, #0
 800b11a:	f104 0919 	add.w	r9, r4, #25
 800b11e:	e7f4      	b.n	800b10a <_printf_float+0x456>

0800b120 <_printf_common>:
 800b120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b124:	4616      	mov	r6, r2
 800b126:	4699      	mov	r9, r3
 800b128:	688a      	ldr	r2, [r1, #8]
 800b12a:	690b      	ldr	r3, [r1, #16]
 800b12c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b130:	4293      	cmp	r3, r2
 800b132:	bfb8      	it	lt
 800b134:	4613      	movlt	r3, r2
 800b136:	6033      	str	r3, [r6, #0]
 800b138:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b13c:	4607      	mov	r7, r0
 800b13e:	460c      	mov	r4, r1
 800b140:	b10a      	cbz	r2, 800b146 <_printf_common+0x26>
 800b142:	3301      	adds	r3, #1
 800b144:	6033      	str	r3, [r6, #0]
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	0699      	lsls	r1, r3, #26
 800b14a:	bf42      	ittt	mi
 800b14c:	6833      	ldrmi	r3, [r6, #0]
 800b14e:	3302      	addmi	r3, #2
 800b150:	6033      	strmi	r3, [r6, #0]
 800b152:	6825      	ldr	r5, [r4, #0]
 800b154:	f015 0506 	ands.w	r5, r5, #6
 800b158:	d106      	bne.n	800b168 <_printf_common+0x48>
 800b15a:	f104 0a19 	add.w	sl, r4, #25
 800b15e:	68e3      	ldr	r3, [r4, #12]
 800b160:	6832      	ldr	r2, [r6, #0]
 800b162:	1a9b      	subs	r3, r3, r2
 800b164:	42ab      	cmp	r3, r5
 800b166:	dc26      	bgt.n	800b1b6 <_printf_common+0x96>
 800b168:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b16c:	1e13      	subs	r3, r2, #0
 800b16e:	6822      	ldr	r2, [r4, #0]
 800b170:	bf18      	it	ne
 800b172:	2301      	movne	r3, #1
 800b174:	0692      	lsls	r2, r2, #26
 800b176:	d42b      	bmi.n	800b1d0 <_printf_common+0xb0>
 800b178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b17c:	4649      	mov	r1, r9
 800b17e:	4638      	mov	r0, r7
 800b180:	47c0      	blx	r8
 800b182:	3001      	adds	r0, #1
 800b184:	d01e      	beq.n	800b1c4 <_printf_common+0xa4>
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	6922      	ldr	r2, [r4, #16]
 800b18a:	f003 0306 	and.w	r3, r3, #6
 800b18e:	2b04      	cmp	r3, #4
 800b190:	bf02      	ittt	eq
 800b192:	68e5      	ldreq	r5, [r4, #12]
 800b194:	6833      	ldreq	r3, [r6, #0]
 800b196:	1aed      	subeq	r5, r5, r3
 800b198:	68a3      	ldr	r3, [r4, #8]
 800b19a:	bf0c      	ite	eq
 800b19c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1a0:	2500      	movne	r5, #0
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	bfc4      	itt	gt
 800b1a6:	1a9b      	subgt	r3, r3, r2
 800b1a8:	18ed      	addgt	r5, r5, r3
 800b1aa:	2600      	movs	r6, #0
 800b1ac:	341a      	adds	r4, #26
 800b1ae:	42b5      	cmp	r5, r6
 800b1b0:	d11a      	bne.n	800b1e8 <_printf_common+0xc8>
 800b1b2:	2000      	movs	r0, #0
 800b1b4:	e008      	b.n	800b1c8 <_printf_common+0xa8>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	4652      	mov	r2, sl
 800b1ba:	4649      	mov	r1, r9
 800b1bc:	4638      	mov	r0, r7
 800b1be:	47c0      	blx	r8
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	d103      	bne.n	800b1cc <_printf_common+0xac>
 800b1c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1cc:	3501      	adds	r5, #1
 800b1ce:	e7c6      	b.n	800b15e <_printf_common+0x3e>
 800b1d0:	18e1      	adds	r1, r4, r3
 800b1d2:	1c5a      	adds	r2, r3, #1
 800b1d4:	2030      	movs	r0, #48	; 0x30
 800b1d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1da:	4422      	add	r2, r4
 800b1dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1e4:	3302      	adds	r3, #2
 800b1e6:	e7c7      	b.n	800b178 <_printf_common+0x58>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	4622      	mov	r2, r4
 800b1ec:	4649      	mov	r1, r9
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	47c0      	blx	r8
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	d0e6      	beq.n	800b1c4 <_printf_common+0xa4>
 800b1f6:	3601      	adds	r6, #1
 800b1f8:	e7d9      	b.n	800b1ae <_printf_common+0x8e>
	...

0800b1fc <_printf_i>:
 800b1fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b200:	7e0f      	ldrb	r7, [r1, #24]
 800b202:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b204:	2f78      	cmp	r7, #120	; 0x78
 800b206:	4691      	mov	r9, r2
 800b208:	4680      	mov	r8, r0
 800b20a:	460c      	mov	r4, r1
 800b20c:	469a      	mov	sl, r3
 800b20e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b212:	d807      	bhi.n	800b224 <_printf_i+0x28>
 800b214:	2f62      	cmp	r7, #98	; 0x62
 800b216:	d80a      	bhi.n	800b22e <_printf_i+0x32>
 800b218:	2f00      	cmp	r7, #0
 800b21a:	f000 80d4 	beq.w	800b3c6 <_printf_i+0x1ca>
 800b21e:	2f58      	cmp	r7, #88	; 0x58
 800b220:	f000 80c0 	beq.w	800b3a4 <_printf_i+0x1a8>
 800b224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b22c:	e03a      	b.n	800b2a4 <_printf_i+0xa8>
 800b22e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b232:	2b15      	cmp	r3, #21
 800b234:	d8f6      	bhi.n	800b224 <_printf_i+0x28>
 800b236:	a101      	add	r1, pc, #4	; (adr r1, 800b23c <_printf_i+0x40>)
 800b238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b23c:	0800b295 	.word	0x0800b295
 800b240:	0800b2a9 	.word	0x0800b2a9
 800b244:	0800b225 	.word	0x0800b225
 800b248:	0800b225 	.word	0x0800b225
 800b24c:	0800b225 	.word	0x0800b225
 800b250:	0800b225 	.word	0x0800b225
 800b254:	0800b2a9 	.word	0x0800b2a9
 800b258:	0800b225 	.word	0x0800b225
 800b25c:	0800b225 	.word	0x0800b225
 800b260:	0800b225 	.word	0x0800b225
 800b264:	0800b225 	.word	0x0800b225
 800b268:	0800b3ad 	.word	0x0800b3ad
 800b26c:	0800b2d5 	.word	0x0800b2d5
 800b270:	0800b367 	.word	0x0800b367
 800b274:	0800b225 	.word	0x0800b225
 800b278:	0800b225 	.word	0x0800b225
 800b27c:	0800b3cf 	.word	0x0800b3cf
 800b280:	0800b225 	.word	0x0800b225
 800b284:	0800b2d5 	.word	0x0800b2d5
 800b288:	0800b225 	.word	0x0800b225
 800b28c:	0800b225 	.word	0x0800b225
 800b290:	0800b36f 	.word	0x0800b36f
 800b294:	682b      	ldr	r3, [r5, #0]
 800b296:	1d1a      	adds	r2, r3, #4
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	602a      	str	r2, [r5, #0]
 800b29c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e09f      	b.n	800b3e8 <_printf_i+0x1ec>
 800b2a8:	6820      	ldr	r0, [r4, #0]
 800b2aa:	682b      	ldr	r3, [r5, #0]
 800b2ac:	0607      	lsls	r7, r0, #24
 800b2ae:	f103 0104 	add.w	r1, r3, #4
 800b2b2:	6029      	str	r1, [r5, #0]
 800b2b4:	d501      	bpl.n	800b2ba <_printf_i+0xbe>
 800b2b6:	681e      	ldr	r6, [r3, #0]
 800b2b8:	e003      	b.n	800b2c2 <_printf_i+0xc6>
 800b2ba:	0646      	lsls	r6, r0, #25
 800b2bc:	d5fb      	bpl.n	800b2b6 <_printf_i+0xba>
 800b2be:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b2c2:	2e00      	cmp	r6, #0
 800b2c4:	da03      	bge.n	800b2ce <_printf_i+0xd2>
 800b2c6:	232d      	movs	r3, #45	; 0x2d
 800b2c8:	4276      	negs	r6, r6
 800b2ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2ce:	485a      	ldr	r0, [pc, #360]	; (800b438 <_printf_i+0x23c>)
 800b2d0:	230a      	movs	r3, #10
 800b2d2:	e012      	b.n	800b2fa <_printf_i+0xfe>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	6820      	ldr	r0, [r4, #0]
 800b2d8:	1d19      	adds	r1, r3, #4
 800b2da:	6029      	str	r1, [r5, #0]
 800b2dc:	0605      	lsls	r5, r0, #24
 800b2de:	d501      	bpl.n	800b2e4 <_printf_i+0xe8>
 800b2e0:	681e      	ldr	r6, [r3, #0]
 800b2e2:	e002      	b.n	800b2ea <_printf_i+0xee>
 800b2e4:	0641      	lsls	r1, r0, #25
 800b2e6:	d5fb      	bpl.n	800b2e0 <_printf_i+0xe4>
 800b2e8:	881e      	ldrh	r6, [r3, #0]
 800b2ea:	4853      	ldr	r0, [pc, #332]	; (800b438 <_printf_i+0x23c>)
 800b2ec:	2f6f      	cmp	r7, #111	; 0x6f
 800b2ee:	bf0c      	ite	eq
 800b2f0:	2308      	moveq	r3, #8
 800b2f2:	230a      	movne	r3, #10
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2fa:	6865      	ldr	r5, [r4, #4]
 800b2fc:	60a5      	str	r5, [r4, #8]
 800b2fe:	2d00      	cmp	r5, #0
 800b300:	bfa2      	ittt	ge
 800b302:	6821      	ldrge	r1, [r4, #0]
 800b304:	f021 0104 	bicge.w	r1, r1, #4
 800b308:	6021      	strge	r1, [r4, #0]
 800b30a:	b90e      	cbnz	r6, 800b310 <_printf_i+0x114>
 800b30c:	2d00      	cmp	r5, #0
 800b30e:	d04b      	beq.n	800b3a8 <_printf_i+0x1ac>
 800b310:	4615      	mov	r5, r2
 800b312:	fbb6 f1f3 	udiv	r1, r6, r3
 800b316:	fb03 6711 	mls	r7, r3, r1, r6
 800b31a:	5dc7      	ldrb	r7, [r0, r7]
 800b31c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b320:	4637      	mov	r7, r6
 800b322:	42bb      	cmp	r3, r7
 800b324:	460e      	mov	r6, r1
 800b326:	d9f4      	bls.n	800b312 <_printf_i+0x116>
 800b328:	2b08      	cmp	r3, #8
 800b32a:	d10b      	bne.n	800b344 <_printf_i+0x148>
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	07de      	lsls	r6, r3, #31
 800b330:	d508      	bpl.n	800b344 <_printf_i+0x148>
 800b332:	6923      	ldr	r3, [r4, #16]
 800b334:	6861      	ldr	r1, [r4, #4]
 800b336:	4299      	cmp	r1, r3
 800b338:	bfde      	ittt	le
 800b33a:	2330      	movle	r3, #48	; 0x30
 800b33c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b340:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b344:	1b52      	subs	r2, r2, r5
 800b346:	6122      	str	r2, [r4, #16]
 800b348:	f8cd a000 	str.w	sl, [sp]
 800b34c:	464b      	mov	r3, r9
 800b34e:	aa03      	add	r2, sp, #12
 800b350:	4621      	mov	r1, r4
 800b352:	4640      	mov	r0, r8
 800b354:	f7ff fee4 	bl	800b120 <_printf_common>
 800b358:	3001      	adds	r0, #1
 800b35a:	d14a      	bne.n	800b3f2 <_printf_i+0x1f6>
 800b35c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b360:	b004      	add	sp, #16
 800b362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	f043 0320 	orr.w	r3, r3, #32
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	4833      	ldr	r0, [pc, #204]	; (800b43c <_printf_i+0x240>)
 800b370:	2778      	movs	r7, #120	; 0x78
 800b372:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	6829      	ldr	r1, [r5, #0]
 800b37a:	061f      	lsls	r7, r3, #24
 800b37c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b380:	d402      	bmi.n	800b388 <_printf_i+0x18c>
 800b382:	065f      	lsls	r7, r3, #25
 800b384:	bf48      	it	mi
 800b386:	b2b6      	uxthmi	r6, r6
 800b388:	07df      	lsls	r7, r3, #31
 800b38a:	bf48      	it	mi
 800b38c:	f043 0320 	orrmi.w	r3, r3, #32
 800b390:	6029      	str	r1, [r5, #0]
 800b392:	bf48      	it	mi
 800b394:	6023      	strmi	r3, [r4, #0]
 800b396:	b91e      	cbnz	r6, 800b3a0 <_printf_i+0x1a4>
 800b398:	6823      	ldr	r3, [r4, #0]
 800b39a:	f023 0320 	bic.w	r3, r3, #32
 800b39e:	6023      	str	r3, [r4, #0]
 800b3a0:	2310      	movs	r3, #16
 800b3a2:	e7a7      	b.n	800b2f4 <_printf_i+0xf8>
 800b3a4:	4824      	ldr	r0, [pc, #144]	; (800b438 <_printf_i+0x23c>)
 800b3a6:	e7e4      	b.n	800b372 <_printf_i+0x176>
 800b3a8:	4615      	mov	r5, r2
 800b3aa:	e7bd      	b.n	800b328 <_printf_i+0x12c>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	6826      	ldr	r6, [r4, #0]
 800b3b0:	6961      	ldr	r1, [r4, #20]
 800b3b2:	1d18      	adds	r0, r3, #4
 800b3b4:	6028      	str	r0, [r5, #0]
 800b3b6:	0635      	lsls	r5, r6, #24
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	d501      	bpl.n	800b3c0 <_printf_i+0x1c4>
 800b3bc:	6019      	str	r1, [r3, #0]
 800b3be:	e002      	b.n	800b3c6 <_printf_i+0x1ca>
 800b3c0:	0670      	lsls	r0, r6, #25
 800b3c2:	d5fb      	bpl.n	800b3bc <_printf_i+0x1c0>
 800b3c4:	8019      	strh	r1, [r3, #0]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	6123      	str	r3, [r4, #16]
 800b3ca:	4615      	mov	r5, r2
 800b3cc:	e7bc      	b.n	800b348 <_printf_i+0x14c>
 800b3ce:	682b      	ldr	r3, [r5, #0]
 800b3d0:	1d1a      	adds	r2, r3, #4
 800b3d2:	602a      	str	r2, [r5, #0]
 800b3d4:	681d      	ldr	r5, [r3, #0]
 800b3d6:	6862      	ldr	r2, [r4, #4]
 800b3d8:	2100      	movs	r1, #0
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f7f4 ff18 	bl	8000210 <memchr>
 800b3e0:	b108      	cbz	r0, 800b3e6 <_printf_i+0x1ea>
 800b3e2:	1b40      	subs	r0, r0, r5
 800b3e4:	6060      	str	r0, [r4, #4]
 800b3e6:	6863      	ldr	r3, [r4, #4]
 800b3e8:	6123      	str	r3, [r4, #16]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3f0:	e7aa      	b.n	800b348 <_printf_i+0x14c>
 800b3f2:	6923      	ldr	r3, [r4, #16]
 800b3f4:	462a      	mov	r2, r5
 800b3f6:	4649      	mov	r1, r9
 800b3f8:	4640      	mov	r0, r8
 800b3fa:	47d0      	blx	sl
 800b3fc:	3001      	adds	r0, #1
 800b3fe:	d0ad      	beq.n	800b35c <_printf_i+0x160>
 800b400:	6823      	ldr	r3, [r4, #0]
 800b402:	079b      	lsls	r3, r3, #30
 800b404:	d413      	bmi.n	800b42e <_printf_i+0x232>
 800b406:	68e0      	ldr	r0, [r4, #12]
 800b408:	9b03      	ldr	r3, [sp, #12]
 800b40a:	4298      	cmp	r0, r3
 800b40c:	bfb8      	it	lt
 800b40e:	4618      	movlt	r0, r3
 800b410:	e7a6      	b.n	800b360 <_printf_i+0x164>
 800b412:	2301      	movs	r3, #1
 800b414:	4632      	mov	r2, r6
 800b416:	4649      	mov	r1, r9
 800b418:	4640      	mov	r0, r8
 800b41a:	47d0      	blx	sl
 800b41c:	3001      	adds	r0, #1
 800b41e:	d09d      	beq.n	800b35c <_printf_i+0x160>
 800b420:	3501      	adds	r5, #1
 800b422:	68e3      	ldr	r3, [r4, #12]
 800b424:	9903      	ldr	r1, [sp, #12]
 800b426:	1a5b      	subs	r3, r3, r1
 800b428:	42ab      	cmp	r3, r5
 800b42a:	dcf2      	bgt.n	800b412 <_printf_i+0x216>
 800b42c:	e7eb      	b.n	800b406 <_printf_i+0x20a>
 800b42e:	2500      	movs	r5, #0
 800b430:	f104 0619 	add.w	r6, r4, #25
 800b434:	e7f5      	b.n	800b422 <_printf_i+0x226>
 800b436:	bf00      	nop
 800b438:	08010b24 	.word	0x08010b24
 800b43c:	08010b35 	.word	0x08010b35

0800b440 <sniprintf>:
 800b440:	b40c      	push	{r2, r3}
 800b442:	b530      	push	{r4, r5, lr}
 800b444:	4b17      	ldr	r3, [pc, #92]	; (800b4a4 <sniprintf+0x64>)
 800b446:	1e0c      	subs	r4, r1, #0
 800b448:	681d      	ldr	r5, [r3, #0]
 800b44a:	b09d      	sub	sp, #116	; 0x74
 800b44c:	da08      	bge.n	800b460 <sniprintf+0x20>
 800b44e:	238b      	movs	r3, #139	; 0x8b
 800b450:	602b      	str	r3, [r5, #0]
 800b452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b456:	b01d      	add	sp, #116	; 0x74
 800b458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b45c:	b002      	add	sp, #8
 800b45e:	4770      	bx	lr
 800b460:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b464:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b468:	bf14      	ite	ne
 800b46a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b46e:	4623      	moveq	r3, r4
 800b470:	9304      	str	r3, [sp, #16]
 800b472:	9307      	str	r3, [sp, #28]
 800b474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b478:	9002      	str	r0, [sp, #8]
 800b47a:	9006      	str	r0, [sp, #24]
 800b47c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b480:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b482:	ab21      	add	r3, sp, #132	; 0x84
 800b484:	a902      	add	r1, sp, #8
 800b486:	4628      	mov	r0, r5
 800b488:	9301      	str	r3, [sp, #4]
 800b48a:	f001 f96d 	bl	800c768 <_svfiprintf_r>
 800b48e:	1c43      	adds	r3, r0, #1
 800b490:	bfbc      	itt	lt
 800b492:	238b      	movlt	r3, #139	; 0x8b
 800b494:	602b      	strlt	r3, [r5, #0]
 800b496:	2c00      	cmp	r4, #0
 800b498:	d0dd      	beq.n	800b456 <sniprintf+0x16>
 800b49a:	9b02      	ldr	r3, [sp, #8]
 800b49c:	2200      	movs	r2, #0
 800b49e:	701a      	strb	r2, [r3, #0]
 800b4a0:	e7d9      	b.n	800b456 <sniprintf+0x16>
 800b4a2:	bf00      	nop
 800b4a4:	2000009c 	.word	0x2000009c

0800b4a8 <siprintf>:
 800b4a8:	b40e      	push	{r1, r2, r3}
 800b4aa:	b500      	push	{lr}
 800b4ac:	b09c      	sub	sp, #112	; 0x70
 800b4ae:	ab1d      	add	r3, sp, #116	; 0x74
 800b4b0:	9002      	str	r0, [sp, #8]
 800b4b2:	9006      	str	r0, [sp, #24]
 800b4b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b4b8:	4809      	ldr	r0, [pc, #36]	; (800b4e0 <siprintf+0x38>)
 800b4ba:	9107      	str	r1, [sp, #28]
 800b4bc:	9104      	str	r1, [sp, #16]
 800b4be:	4909      	ldr	r1, [pc, #36]	; (800b4e4 <siprintf+0x3c>)
 800b4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c4:	9105      	str	r1, [sp, #20]
 800b4c6:	6800      	ldr	r0, [r0, #0]
 800b4c8:	9301      	str	r3, [sp, #4]
 800b4ca:	a902      	add	r1, sp, #8
 800b4cc:	f001 f94c 	bl	800c768 <_svfiprintf_r>
 800b4d0:	9b02      	ldr	r3, [sp, #8]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	701a      	strb	r2, [r3, #0]
 800b4d6:	b01c      	add	sp, #112	; 0x70
 800b4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4dc:	b003      	add	sp, #12
 800b4de:	4770      	bx	lr
 800b4e0:	2000009c 	.word	0x2000009c
 800b4e4:	ffff0208 	.word	0xffff0208

0800b4e8 <siscanf>:
 800b4e8:	b40e      	push	{r1, r2, r3}
 800b4ea:	b510      	push	{r4, lr}
 800b4ec:	b09f      	sub	sp, #124	; 0x7c
 800b4ee:	ac21      	add	r4, sp, #132	; 0x84
 800b4f0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b4f4:	f854 2b04 	ldr.w	r2, [r4], #4
 800b4f8:	9201      	str	r2, [sp, #4]
 800b4fa:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b4fe:	9004      	str	r0, [sp, #16]
 800b500:	9008      	str	r0, [sp, #32]
 800b502:	f7f4 fed5 	bl	80002b0 <strlen>
 800b506:	4b0c      	ldr	r3, [pc, #48]	; (800b538 <siscanf+0x50>)
 800b508:	9005      	str	r0, [sp, #20]
 800b50a:	9009      	str	r0, [sp, #36]	; 0x24
 800b50c:	930d      	str	r3, [sp, #52]	; 0x34
 800b50e:	480b      	ldr	r0, [pc, #44]	; (800b53c <siscanf+0x54>)
 800b510:	9a01      	ldr	r2, [sp, #4]
 800b512:	6800      	ldr	r0, [r0, #0]
 800b514:	9403      	str	r4, [sp, #12]
 800b516:	2300      	movs	r3, #0
 800b518:	9311      	str	r3, [sp, #68]	; 0x44
 800b51a:	9316      	str	r3, [sp, #88]	; 0x58
 800b51c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b520:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b524:	a904      	add	r1, sp, #16
 800b526:	4623      	mov	r3, r4
 800b528:	f001 fa76 	bl	800ca18 <__ssvfiscanf_r>
 800b52c:	b01f      	add	sp, #124	; 0x7c
 800b52e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b532:	b003      	add	sp, #12
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	0800b563 	.word	0x0800b563
 800b53c:	2000009c 	.word	0x2000009c

0800b540 <__sread>:
 800b540:	b510      	push	{r4, lr}
 800b542:	460c      	mov	r4, r1
 800b544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b548:	f000 f97c 	bl	800b844 <_read_r>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	bfab      	itete	ge
 800b550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b552:	89a3      	ldrhlt	r3, [r4, #12]
 800b554:	181b      	addge	r3, r3, r0
 800b556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b55a:	bfac      	ite	ge
 800b55c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b55e:	81a3      	strhlt	r3, [r4, #12]
 800b560:	bd10      	pop	{r4, pc}

0800b562 <__seofread>:
 800b562:	2000      	movs	r0, #0
 800b564:	4770      	bx	lr

0800b566 <__swrite>:
 800b566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b56a:	461f      	mov	r7, r3
 800b56c:	898b      	ldrh	r3, [r1, #12]
 800b56e:	05db      	lsls	r3, r3, #23
 800b570:	4605      	mov	r5, r0
 800b572:	460c      	mov	r4, r1
 800b574:	4616      	mov	r6, r2
 800b576:	d505      	bpl.n	800b584 <__swrite+0x1e>
 800b578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b57c:	2302      	movs	r3, #2
 800b57e:	2200      	movs	r2, #0
 800b580:	f000 f94e 	bl	800b820 <_lseek_r>
 800b584:	89a3      	ldrh	r3, [r4, #12]
 800b586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b58a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b58e:	81a3      	strh	r3, [r4, #12]
 800b590:	4632      	mov	r2, r6
 800b592:	463b      	mov	r3, r7
 800b594:	4628      	mov	r0, r5
 800b596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b59a:	f000 b965 	b.w	800b868 <_write_r>

0800b59e <__sseek>:
 800b59e:	b510      	push	{r4, lr}
 800b5a0:	460c      	mov	r4, r1
 800b5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a6:	f000 f93b 	bl	800b820 <_lseek_r>
 800b5aa:	1c43      	adds	r3, r0, #1
 800b5ac:	89a3      	ldrh	r3, [r4, #12]
 800b5ae:	bf15      	itete	ne
 800b5b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5ba:	81a3      	strheq	r3, [r4, #12]
 800b5bc:	bf18      	it	ne
 800b5be:	81a3      	strhne	r3, [r4, #12]
 800b5c0:	bd10      	pop	{r4, pc}

0800b5c2 <__sclose>:
 800b5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c6:	f000 b91b 	b.w	800b800 <_close_r>
	...

0800b5cc <std>:
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	b510      	push	{r4, lr}
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	e9c0 3300 	strd	r3, r3, [r0]
 800b5d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5da:	6083      	str	r3, [r0, #8]
 800b5dc:	8181      	strh	r1, [r0, #12]
 800b5de:	6643      	str	r3, [r0, #100]	; 0x64
 800b5e0:	81c2      	strh	r2, [r0, #14]
 800b5e2:	6183      	str	r3, [r0, #24]
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	2208      	movs	r2, #8
 800b5e8:	305c      	adds	r0, #92	; 0x5c
 800b5ea:	f000 f8fd 	bl	800b7e8 <memset>
 800b5ee:	4b0d      	ldr	r3, [pc, #52]	; (800b624 <std+0x58>)
 800b5f0:	6263      	str	r3, [r4, #36]	; 0x24
 800b5f2:	4b0d      	ldr	r3, [pc, #52]	; (800b628 <std+0x5c>)
 800b5f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5f6:	4b0d      	ldr	r3, [pc, #52]	; (800b62c <std+0x60>)
 800b5f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5fa:	4b0d      	ldr	r3, [pc, #52]	; (800b630 <std+0x64>)
 800b5fc:	6323      	str	r3, [r4, #48]	; 0x30
 800b5fe:	4b0d      	ldr	r3, [pc, #52]	; (800b634 <std+0x68>)
 800b600:	6224      	str	r4, [r4, #32]
 800b602:	429c      	cmp	r4, r3
 800b604:	d006      	beq.n	800b614 <std+0x48>
 800b606:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b60a:	4294      	cmp	r4, r2
 800b60c:	d002      	beq.n	800b614 <std+0x48>
 800b60e:	33d0      	adds	r3, #208	; 0xd0
 800b610:	429c      	cmp	r4, r3
 800b612:	d105      	bne.n	800b620 <std+0x54>
 800b614:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b61c:	f000 b960 	b.w	800b8e0 <__retarget_lock_init_recursive>
 800b620:	bd10      	pop	{r4, pc}
 800b622:	bf00      	nop
 800b624:	0800b541 	.word	0x0800b541
 800b628:	0800b567 	.word	0x0800b567
 800b62c:	0800b59f 	.word	0x0800b59f
 800b630:	0800b5c3 	.word	0x0800b5c3
 800b634:	20007708 	.word	0x20007708

0800b638 <stdio_exit_handler>:
 800b638:	4a02      	ldr	r2, [pc, #8]	; (800b644 <stdio_exit_handler+0xc>)
 800b63a:	4903      	ldr	r1, [pc, #12]	; (800b648 <stdio_exit_handler+0x10>)
 800b63c:	4803      	ldr	r0, [pc, #12]	; (800b64c <stdio_exit_handler+0x14>)
 800b63e:	f000 b869 	b.w	800b714 <_fwalk_sglue>
 800b642:	bf00      	nop
 800b644:	20000044 	.word	0x20000044
 800b648:	0800d4fd 	.word	0x0800d4fd
 800b64c:	20000050 	.word	0x20000050

0800b650 <cleanup_stdio>:
 800b650:	6841      	ldr	r1, [r0, #4]
 800b652:	4b0c      	ldr	r3, [pc, #48]	; (800b684 <cleanup_stdio+0x34>)
 800b654:	4299      	cmp	r1, r3
 800b656:	b510      	push	{r4, lr}
 800b658:	4604      	mov	r4, r0
 800b65a:	d001      	beq.n	800b660 <cleanup_stdio+0x10>
 800b65c:	f001 ff4e 	bl	800d4fc <_fflush_r>
 800b660:	68a1      	ldr	r1, [r4, #8]
 800b662:	4b09      	ldr	r3, [pc, #36]	; (800b688 <cleanup_stdio+0x38>)
 800b664:	4299      	cmp	r1, r3
 800b666:	d002      	beq.n	800b66e <cleanup_stdio+0x1e>
 800b668:	4620      	mov	r0, r4
 800b66a:	f001 ff47 	bl	800d4fc <_fflush_r>
 800b66e:	68e1      	ldr	r1, [r4, #12]
 800b670:	4b06      	ldr	r3, [pc, #24]	; (800b68c <cleanup_stdio+0x3c>)
 800b672:	4299      	cmp	r1, r3
 800b674:	d004      	beq.n	800b680 <cleanup_stdio+0x30>
 800b676:	4620      	mov	r0, r4
 800b678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b67c:	f001 bf3e 	b.w	800d4fc <_fflush_r>
 800b680:	bd10      	pop	{r4, pc}
 800b682:	bf00      	nop
 800b684:	20007708 	.word	0x20007708
 800b688:	20007770 	.word	0x20007770
 800b68c:	200077d8 	.word	0x200077d8

0800b690 <global_stdio_init.part.0>:
 800b690:	b510      	push	{r4, lr}
 800b692:	4b0b      	ldr	r3, [pc, #44]	; (800b6c0 <global_stdio_init.part.0+0x30>)
 800b694:	4c0b      	ldr	r4, [pc, #44]	; (800b6c4 <global_stdio_init.part.0+0x34>)
 800b696:	4a0c      	ldr	r2, [pc, #48]	; (800b6c8 <global_stdio_init.part.0+0x38>)
 800b698:	601a      	str	r2, [r3, #0]
 800b69a:	4620      	mov	r0, r4
 800b69c:	2200      	movs	r2, #0
 800b69e:	2104      	movs	r1, #4
 800b6a0:	f7ff ff94 	bl	800b5cc <std>
 800b6a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	2109      	movs	r1, #9
 800b6ac:	f7ff ff8e 	bl	800b5cc <std>
 800b6b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b6b4:	2202      	movs	r2, #2
 800b6b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6ba:	2112      	movs	r1, #18
 800b6bc:	f7ff bf86 	b.w	800b5cc <std>
 800b6c0:	20007840 	.word	0x20007840
 800b6c4:	20007708 	.word	0x20007708
 800b6c8:	0800b639 	.word	0x0800b639

0800b6cc <__sfp_lock_acquire>:
 800b6cc:	4801      	ldr	r0, [pc, #4]	; (800b6d4 <__sfp_lock_acquire+0x8>)
 800b6ce:	f000 b908 	b.w	800b8e2 <__retarget_lock_acquire_recursive>
 800b6d2:	bf00      	nop
 800b6d4:	20007849 	.word	0x20007849

0800b6d8 <__sfp_lock_release>:
 800b6d8:	4801      	ldr	r0, [pc, #4]	; (800b6e0 <__sfp_lock_release+0x8>)
 800b6da:	f000 b903 	b.w	800b8e4 <__retarget_lock_release_recursive>
 800b6de:	bf00      	nop
 800b6e0:	20007849 	.word	0x20007849

0800b6e4 <__sinit>:
 800b6e4:	b510      	push	{r4, lr}
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	f7ff fff0 	bl	800b6cc <__sfp_lock_acquire>
 800b6ec:	6a23      	ldr	r3, [r4, #32]
 800b6ee:	b11b      	cbz	r3, 800b6f8 <__sinit+0x14>
 800b6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6f4:	f7ff bff0 	b.w	800b6d8 <__sfp_lock_release>
 800b6f8:	4b04      	ldr	r3, [pc, #16]	; (800b70c <__sinit+0x28>)
 800b6fa:	6223      	str	r3, [r4, #32]
 800b6fc:	4b04      	ldr	r3, [pc, #16]	; (800b710 <__sinit+0x2c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1f5      	bne.n	800b6f0 <__sinit+0xc>
 800b704:	f7ff ffc4 	bl	800b690 <global_stdio_init.part.0>
 800b708:	e7f2      	b.n	800b6f0 <__sinit+0xc>
 800b70a:	bf00      	nop
 800b70c:	0800b651 	.word	0x0800b651
 800b710:	20007840 	.word	0x20007840

0800b714 <_fwalk_sglue>:
 800b714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b718:	4607      	mov	r7, r0
 800b71a:	4688      	mov	r8, r1
 800b71c:	4614      	mov	r4, r2
 800b71e:	2600      	movs	r6, #0
 800b720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b724:	f1b9 0901 	subs.w	r9, r9, #1
 800b728:	d505      	bpl.n	800b736 <_fwalk_sglue+0x22>
 800b72a:	6824      	ldr	r4, [r4, #0]
 800b72c:	2c00      	cmp	r4, #0
 800b72e:	d1f7      	bne.n	800b720 <_fwalk_sglue+0xc>
 800b730:	4630      	mov	r0, r6
 800b732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b736:	89ab      	ldrh	r3, [r5, #12]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d907      	bls.n	800b74c <_fwalk_sglue+0x38>
 800b73c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b740:	3301      	adds	r3, #1
 800b742:	d003      	beq.n	800b74c <_fwalk_sglue+0x38>
 800b744:	4629      	mov	r1, r5
 800b746:	4638      	mov	r0, r7
 800b748:	47c0      	blx	r8
 800b74a:	4306      	orrs	r6, r0
 800b74c:	3568      	adds	r5, #104	; 0x68
 800b74e:	e7e9      	b.n	800b724 <_fwalk_sglue+0x10>

0800b750 <_vsniprintf_r>:
 800b750:	b530      	push	{r4, r5, lr}
 800b752:	4614      	mov	r4, r2
 800b754:	2c00      	cmp	r4, #0
 800b756:	b09b      	sub	sp, #108	; 0x6c
 800b758:	4605      	mov	r5, r0
 800b75a:	461a      	mov	r2, r3
 800b75c:	da05      	bge.n	800b76a <_vsniprintf_r+0x1a>
 800b75e:	238b      	movs	r3, #139	; 0x8b
 800b760:	6003      	str	r3, [r0, #0]
 800b762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b766:	b01b      	add	sp, #108	; 0x6c
 800b768:	bd30      	pop	{r4, r5, pc}
 800b76a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b76e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b772:	bf14      	ite	ne
 800b774:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b778:	4623      	moveq	r3, r4
 800b77a:	9302      	str	r3, [sp, #8]
 800b77c:	9305      	str	r3, [sp, #20]
 800b77e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b782:	9100      	str	r1, [sp, #0]
 800b784:	9104      	str	r1, [sp, #16]
 800b786:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b78a:	4669      	mov	r1, sp
 800b78c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b78e:	f000 ffeb 	bl	800c768 <_svfiprintf_r>
 800b792:	1c43      	adds	r3, r0, #1
 800b794:	bfbc      	itt	lt
 800b796:	238b      	movlt	r3, #139	; 0x8b
 800b798:	602b      	strlt	r3, [r5, #0]
 800b79a:	2c00      	cmp	r4, #0
 800b79c:	d0e3      	beq.n	800b766 <_vsniprintf_r+0x16>
 800b79e:	9b00      	ldr	r3, [sp, #0]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	701a      	strb	r2, [r3, #0]
 800b7a4:	e7df      	b.n	800b766 <_vsniprintf_r+0x16>
	...

0800b7a8 <vsniprintf>:
 800b7a8:	b507      	push	{r0, r1, r2, lr}
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	460a      	mov	r2, r1
 800b7b0:	4601      	mov	r1, r0
 800b7b2:	4803      	ldr	r0, [pc, #12]	; (800b7c0 <vsniprintf+0x18>)
 800b7b4:	6800      	ldr	r0, [r0, #0]
 800b7b6:	f7ff ffcb 	bl	800b750 <_vsniprintf_r>
 800b7ba:	b003      	add	sp, #12
 800b7bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7c0:	2000009c 	.word	0x2000009c

0800b7c4 <iprintf>:
 800b7c4:	b40f      	push	{r0, r1, r2, r3}
 800b7c6:	b507      	push	{r0, r1, r2, lr}
 800b7c8:	4906      	ldr	r1, [pc, #24]	; (800b7e4 <iprintf+0x20>)
 800b7ca:	ab04      	add	r3, sp, #16
 800b7cc:	6808      	ldr	r0, [r1, #0]
 800b7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7d2:	6881      	ldr	r1, [r0, #8]
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	f001 fac1 	bl	800cd5c <_vfiprintf_r>
 800b7da:	b003      	add	sp, #12
 800b7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7e0:	b004      	add	sp, #16
 800b7e2:	4770      	bx	lr
 800b7e4:	2000009c 	.word	0x2000009c

0800b7e8 <memset>:
 800b7e8:	4402      	add	r2, r0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d100      	bne.n	800b7f2 <memset+0xa>
 800b7f0:	4770      	bx	lr
 800b7f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b7f6:	e7f9      	b.n	800b7ec <memset+0x4>

0800b7f8 <_localeconv_r>:
 800b7f8:	4800      	ldr	r0, [pc, #0]	; (800b7fc <_localeconv_r+0x4>)
 800b7fa:	4770      	bx	lr
 800b7fc:	20000190 	.word	0x20000190

0800b800 <_close_r>:
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	4d06      	ldr	r5, [pc, #24]	; (800b81c <_close_r+0x1c>)
 800b804:	2300      	movs	r3, #0
 800b806:	4604      	mov	r4, r0
 800b808:	4608      	mov	r0, r1
 800b80a:	602b      	str	r3, [r5, #0]
 800b80c:	f7f8 fb81 	bl	8003f12 <_close>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d102      	bne.n	800b81a <_close_r+0x1a>
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	b103      	cbz	r3, 800b81a <_close_r+0x1a>
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	20007844 	.word	0x20007844

0800b820 <_lseek_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	4d07      	ldr	r5, [pc, #28]	; (800b840 <_lseek_r+0x20>)
 800b824:	4604      	mov	r4, r0
 800b826:	4608      	mov	r0, r1
 800b828:	4611      	mov	r1, r2
 800b82a:	2200      	movs	r2, #0
 800b82c:	602a      	str	r2, [r5, #0]
 800b82e:	461a      	mov	r2, r3
 800b830:	f7f8 fb96 	bl	8003f60 <_lseek>
 800b834:	1c43      	adds	r3, r0, #1
 800b836:	d102      	bne.n	800b83e <_lseek_r+0x1e>
 800b838:	682b      	ldr	r3, [r5, #0]
 800b83a:	b103      	cbz	r3, 800b83e <_lseek_r+0x1e>
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	bd38      	pop	{r3, r4, r5, pc}
 800b840:	20007844 	.word	0x20007844

0800b844 <_read_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	4d07      	ldr	r5, [pc, #28]	; (800b864 <_read_r+0x20>)
 800b848:	4604      	mov	r4, r0
 800b84a:	4608      	mov	r0, r1
 800b84c:	4611      	mov	r1, r2
 800b84e:	2200      	movs	r2, #0
 800b850:	602a      	str	r2, [r5, #0]
 800b852:	461a      	mov	r2, r3
 800b854:	f7f8 fb24 	bl	8003ea0 <_read>
 800b858:	1c43      	adds	r3, r0, #1
 800b85a:	d102      	bne.n	800b862 <_read_r+0x1e>
 800b85c:	682b      	ldr	r3, [r5, #0]
 800b85e:	b103      	cbz	r3, 800b862 <_read_r+0x1e>
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	bd38      	pop	{r3, r4, r5, pc}
 800b864:	20007844 	.word	0x20007844

0800b868 <_write_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4d07      	ldr	r5, [pc, #28]	; (800b888 <_write_r+0x20>)
 800b86c:	4604      	mov	r4, r0
 800b86e:	4608      	mov	r0, r1
 800b870:	4611      	mov	r1, r2
 800b872:	2200      	movs	r2, #0
 800b874:	602a      	str	r2, [r5, #0]
 800b876:	461a      	mov	r2, r3
 800b878:	f7f8 fb2f 	bl	8003eda <_write>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	d102      	bne.n	800b886 <_write_r+0x1e>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	b103      	cbz	r3, 800b886 <_write_r+0x1e>
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	bd38      	pop	{r3, r4, r5, pc}
 800b888:	20007844 	.word	0x20007844

0800b88c <__errno>:
 800b88c:	4b01      	ldr	r3, [pc, #4]	; (800b894 <__errno+0x8>)
 800b88e:	6818      	ldr	r0, [r3, #0]
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	2000009c 	.word	0x2000009c

0800b898 <__libc_init_array>:
 800b898:	b570      	push	{r4, r5, r6, lr}
 800b89a:	4d0d      	ldr	r5, [pc, #52]	; (800b8d0 <__libc_init_array+0x38>)
 800b89c:	4c0d      	ldr	r4, [pc, #52]	; (800b8d4 <__libc_init_array+0x3c>)
 800b89e:	1b64      	subs	r4, r4, r5
 800b8a0:	10a4      	asrs	r4, r4, #2
 800b8a2:	2600      	movs	r6, #0
 800b8a4:	42a6      	cmp	r6, r4
 800b8a6:	d109      	bne.n	800b8bc <__libc_init_array+0x24>
 800b8a8:	4d0b      	ldr	r5, [pc, #44]	; (800b8d8 <__libc_init_array+0x40>)
 800b8aa:	4c0c      	ldr	r4, [pc, #48]	; (800b8dc <__libc_init_array+0x44>)
 800b8ac:	f002 feac 	bl	800e608 <_init>
 800b8b0:	1b64      	subs	r4, r4, r5
 800b8b2:	10a4      	asrs	r4, r4, #2
 800b8b4:	2600      	movs	r6, #0
 800b8b6:	42a6      	cmp	r6, r4
 800b8b8:	d105      	bne.n	800b8c6 <__libc_init_array+0x2e>
 800b8ba:	bd70      	pop	{r4, r5, r6, pc}
 800b8bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8c0:	4798      	blx	r3
 800b8c2:	3601      	adds	r6, #1
 800b8c4:	e7ee      	b.n	800b8a4 <__libc_init_array+0xc>
 800b8c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8ca:	4798      	blx	r3
 800b8cc:	3601      	adds	r6, #1
 800b8ce:	e7f2      	b.n	800b8b6 <__libc_init_array+0x1e>
 800b8d0:	08010ea8 	.word	0x08010ea8
 800b8d4:	08010ea8 	.word	0x08010ea8
 800b8d8:	08010ea8 	.word	0x08010ea8
 800b8dc:	08010eac 	.word	0x08010eac

0800b8e0 <__retarget_lock_init_recursive>:
 800b8e0:	4770      	bx	lr

0800b8e2 <__retarget_lock_acquire_recursive>:
 800b8e2:	4770      	bx	lr

0800b8e4 <__retarget_lock_release_recursive>:
 800b8e4:	4770      	bx	lr
	...

0800b8e8 <__assert_func>:
 800b8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8ea:	4614      	mov	r4, r2
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	4b09      	ldr	r3, [pc, #36]	; (800b914 <__assert_func+0x2c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	68d8      	ldr	r0, [r3, #12]
 800b8f6:	b14c      	cbz	r4, 800b90c <__assert_func+0x24>
 800b8f8:	4b07      	ldr	r3, [pc, #28]	; (800b918 <__assert_func+0x30>)
 800b8fa:	9100      	str	r1, [sp, #0]
 800b8fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b900:	4906      	ldr	r1, [pc, #24]	; (800b91c <__assert_func+0x34>)
 800b902:	462b      	mov	r3, r5
 800b904:	f002 f9aa 	bl	800dc5c <fiprintf>
 800b908:	f002 fc6e 	bl	800e1e8 <abort>
 800b90c:	4b04      	ldr	r3, [pc, #16]	; (800b920 <__assert_func+0x38>)
 800b90e:	461c      	mov	r4, r3
 800b910:	e7f3      	b.n	800b8fa <__assert_func+0x12>
 800b912:	bf00      	nop
 800b914:	2000009c 	.word	0x2000009c
 800b918:	08010b46 	.word	0x08010b46
 800b91c:	08010b53 	.word	0x08010b53
 800b920:	08010b81 	.word	0x08010b81

0800b924 <quorem>:
 800b924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b928:	6903      	ldr	r3, [r0, #16]
 800b92a:	690c      	ldr	r4, [r1, #16]
 800b92c:	42a3      	cmp	r3, r4
 800b92e:	4607      	mov	r7, r0
 800b930:	db7e      	blt.n	800ba30 <quorem+0x10c>
 800b932:	3c01      	subs	r4, #1
 800b934:	f101 0814 	add.w	r8, r1, #20
 800b938:	f100 0514 	add.w	r5, r0, #20
 800b93c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b946:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b94a:	3301      	adds	r3, #1
 800b94c:	429a      	cmp	r2, r3
 800b94e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b952:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b956:	fbb2 f6f3 	udiv	r6, r2, r3
 800b95a:	d331      	bcc.n	800b9c0 <quorem+0x9c>
 800b95c:	f04f 0e00 	mov.w	lr, #0
 800b960:	4640      	mov	r0, r8
 800b962:	46ac      	mov	ip, r5
 800b964:	46f2      	mov	sl, lr
 800b966:	f850 2b04 	ldr.w	r2, [r0], #4
 800b96a:	b293      	uxth	r3, r2
 800b96c:	fb06 e303 	mla	r3, r6, r3, lr
 800b970:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b974:	0c1a      	lsrs	r2, r3, #16
 800b976:	b29b      	uxth	r3, r3
 800b978:	ebaa 0303 	sub.w	r3, sl, r3
 800b97c:	f8dc a000 	ldr.w	sl, [ip]
 800b980:	fa13 f38a 	uxtah	r3, r3, sl
 800b984:	fb06 220e 	mla	r2, r6, lr, r2
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	9b00      	ldr	r3, [sp, #0]
 800b98c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b990:	b292      	uxth	r2, r2
 800b992:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b996:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b99a:	f8bd 3000 	ldrh.w	r3, [sp]
 800b99e:	4581      	cmp	r9, r0
 800b9a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9a4:	f84c 3b04 	str.w	r3, [ip], #4
 800b9a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b9ac:	d2db      	bcs.n	800b966 <quorem+0x42>
 800b9ae:	f855 300b 	ldr.w	r3, [r5, fp]
 800b9b2:	b92b      	cbnz	r3, 800b9c0 <quorem+0x9c>
 800b9b4:	9b01      	ldr	r3, [sp, #4]
 800b9b6:	3b04      	subs	r3, #4
 800b9b8:	429d      	cmp	r5, r3
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	d32c      	bcc.n	800ba18 <quorem+0xf4>
 800b9be:	613c      	str	r4, [r7, #16]
 800b9c0:	4638      	mov	r0, r7
 800b9c2:	f002 f84b 	bl	800da5c <__mcmp>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	db22      	blt.n	800ba10 <quorem+0xec>
 800b9ca:	3601      	adds	r6, #1
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b9d4:	f8d1 c000 	ldr.w	ip, [r1]
 800b9d8:	b293      	uxth	r3, r2
 800b9da:	1ac3      	subs	r3, r0, r3
 800b9dc:	0c12      	lsrs	r2, r2, #16
 800b9de:	fa13 f38c 	uxtah	r3, r3, ip
 800b9e2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b9e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9f0:	45c1      	cmp	r9, r8
 800b9f2:	f841 3b04 	str.w	r3, [r1], #4
 800b9f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b9fa:	d2e9      	bcs.n	800b9d0 <quorem+0xac>
 800b9fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba04:	b922      	cbnz	r2, 800ba10 <quorem+0xec>
 800ba06:	3b04      	subs	r3, #4
 800ba08:	429d      	cmp	r5, r3
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	d30a      	bcc.n	800ba24 <quorem+0x100>
 800ba0e:	613c      	str	r4, [r7, #16]
 800ba10:	4630      	mov	r0, r6
 800ba12:	b003      	add	sp, #12
 800ba14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba18:	6812      	ldr	r2, [r2, #0]
 800ba1a:	3b04      	subs	r3, #4
 800ba1c:	2a00      	cmp	r2, #0
 800ba1e:	d1ce      	bne.n	800b9be <quorem+0x9a>
 800ba20:	3c01      	subs	r4, #1
 800ba22:	e7c9      	b.n	800b9b8 <quorem+0x94>
 800ba24:	6812      	ldr	r2, [r2, #0]
 800ba26:	3b04      	subs	r3, #4
 800ba28:	2a00      	cmp	r2, #0
 800ba2a:	d1f0      	bne.n	800ba0e <quorem+0xea>
 800ba2c:	3c01      	subs	r4, #1
 800ba2e:	e7eb      	b.n	800ba08 <quorem+0xe4>
 800ba30:	2000      	movs	r0, #0
 800ba32:	e7ee      	b.n	800ba12 <quorem+0xee>
 800ba34:	0000      	movs	r0, r0
	...

0800ba38 <_dtoa_r>:
 800ba38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3c:	ed2d 8b04 	vpush	{d8-d9}
 800ba40:	69c5      	ldr	r5, [r0, #28]
 800ba42:	b093      	sub	sp, #76	; 0x4c
 800ba44:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ba48:	ec57 6b10 	vmov	r6, r7, d0
 800ba4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ba50:	9107      	str	r1, [sp, #28]
 800ba52:	4604      	mov	r4, r0
 800ba54:	920a      	str	r2, [sp, #40]	; 0x28
 800ba56:	930d      	str	r3, [sp, #52]	; 0x34
 800ba58:	b975      	cbnz	r5, 800ba78 <_dtoa_r+0x40>
 800ba5a:	2010      	movs	r0, #16
 800ba5c:	f001 fa98 	bl	800cf90 <malloc>
 800ba60:	4602      	mov	r2, r0
 800ba62:	61e0      	str	r0, [r4, #28]
 800ba64:	b920      	cbnz	r0, 800ba70 <_dtoa_r+0x38>
 800ba66:	4bae      	ldr	r3, [pc, #696]	; (800bd20 <_dtoa_r+0x2e8>)
 800ba68:	21ef      	movs	r1, #239	; 0xef
 800ba6a:	48ae      	ldr	r0, [pc, #696]	; (800bd24 <_dtoa_r+0x2ec>)
 800ba6c:	f7ff ff3c 	bl	800b8e8 <__assert_func>
 800ba70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ba74:	6005      	str	r5, [r0, #0]
 800ba76:	60c5      	str	r5, [r0, #12]
 800ba78:	69e3      	ldr	r3, [r4, #28]
 800ba7a:	6819      	ldr	r1, [r3, #0]
 800ba7c:	b151      	cbz	r1, 800ba94 <_dtoa_r+0x5c>
 800ba7e:	685a      	ldr	r2, [r3, #4]
 800ba80:	604a      	str	r2, [r1, #4]
 800ba82:	2301      	movs	r3, #1
 800ba84:	4093      	lsls	r3, r2
 800ba86:	608b      	str	r3, [r1, #8]
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f001 fdab 	bl	800d5e4 <_Bfree>
 800ba8e:	69e3      	ldr	r3, [r4, #28]
 800ba90:	2200      	movs	r2, #0
 800ba92:	601a      	str	r2, [r3, #0]
 800ba94:	1e3b      	subs	r3, r7, #0
 800ba96:	bfbb      	ittet	lt
 800ba98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ba9c:	9303      	strlt	r3, [sp, #12]
 800ba9e:	2300      	movge	r3, #0
 800baa0:	2201      	movlt	r2, #1
 800baa2:	bfac      	ite	ge
 800baa4:	f8c8 3000 	strge.w	r3, [r8]
 800baa8:	f8c8 2000 	strlt.w	r2, [r8]
 800baac:	4b9e      	ldr	r3, [pc, #632]	; (800bd28 <_dtoa_r+0x2f0>)
 800baae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bab2:	ea33 0308 	bics.w	r3, r3, r8
 800bab6:	d11b      	bne.n	800baf0 <_dtoa_r+0xb8>
 800bab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800baba:	f242 730f 	movw	r3, #9999	; 0x270f
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bac4:	4333      	orrs	r3, r6
 800bac6:	f000 8593 	beq.w	800c5f0 <_dtoa_r+0xbb8>
 800baca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bacc:	b963      	cbnz	r3, 800bae8 <_dtoa_r+0xb0>
 800bace:	4b97      	ldr	r3, [pc, #604]	; (800bd2c <_dtoa_r+0x2f4>)
 800bad0:	e027      	b.n	800bb22 <_dtoa_r+0xea>
 800bad2:	4b97      	ldr	r3, [pc, #604]	; (800bd30 <_dtoa_r+0x2f8>)
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	3308      	adds	r3, #8
 800bad8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bada:	6013      	str	r3, [r2, #0]
 800badc:	9800      	ldr	r0, [sp, #0]
 800bade:	b013      	add	sp, #76	; 0x4c
 800bae0:	ecbd 8b04 	vpop	{d8-d9}
 800bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae8:	4b90      	ldr	r3, [pc, #576]	; (800bd2c <_dtoa_r+0x2f4>)
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	3303      	adds	r3, #3
 800baee:	e7f3      	b.n	800bad8 <_dtoa_r+0xa0>
 800baf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800baf4:	2200      	movs	r2, #0
 800baf6:	ec51 0b17 	vmov	r0, r1, d7
 800bafa:	eeb0 8a47 	vmov.f32	s16, s14
 800bafe:	eef0 8a67 	vmov.f32	s17, s15
 800bb02:	2300      	movs	r3, #0
 800bb04:	f7f5 f800 	bl	8000b08 <__aeabi_dcmpeq>
 800bb08:	4681      	mov	r9, r0
 800bb0a:	b160      	cbz	r0, 800bb26 <_dtoa_r+0xee>
 800bb0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb0e:	2301      	movs	r3, #1
 800bb10:	6013      	str	r3, [r2, #0]
 800bb12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f000 8568 	beq.w	800c5ea <_dtoa_r+0xbb2>
 800bb1a:	4b86      	ldr	r3, [pc, #536]	; (800bd34 <_dtoa_r+0x2fc>)
 800bb1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb1e:	6013      	str	r3, [r2, #0]
 800bb20:	3b01      	subs	r3, #1
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	e7da      	b.n	800badc <_dtoa_r+0xa4>
 800bb26:	aa10      	add	r2, sp, #64	; 0x40
 800bb28:	a911      	add	r1, sp, #68	; 0x44
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	eeb0 0a48 	vmov.f32	s0, s16
 800bb30:	eef0 0a68 	vmov.f32	s1, s17
 800bb34:	f002 f838 	bl	800dba8 <__d2b>
 800bb38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bb3c:	4682      	mov	sl, r0
 800bb3e:	2d00      	cmp	r5, #0
 800bb40:	d07f      	beq.n	800bc42 <_dtoa_r+0x20a>
 800bb42:	ee18 3a90 	vmov	r3, s17
 800bb46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb4a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bb4e:	ec51 0b18 	vmov	r0, r1, d8
 800bb52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bb56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bb5a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bb5e:	4619      	mov	r1, r3
 800bb60:	2200      	movs	r2, #0
 800bb62:	4b75      	ldr	r3, [pc, #468]	; (800bd38 <_dtoa_r+0x300>)
 800bb64:	f7f4 fbb0 	bl	80002c8 <__aeabi_dsub>
 800bb68:	a367      	add	r3, pc, #412	; (adr r3, 800bd08 <_dtoa_r+0x2d0>)
 800bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6e:	f7f4 fd63 	bl	8000638 <__aeabi_dmul>
 800bb72:	a367      	add	r3, pc, #412	; (adr r3, 800bd10 <_dtoa_r+0x2d8>)
 800bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb78:	f7f4 fba8 	bl	80002cc <__adddf3>
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	4628      	mov	r0, r5
 800bb80:	460f      	mov	r7, r1
 800bb82:	f7f4 fcef 	bl	8000564 <__aeabi_i2d>
 800bb86:	a364      	add	r3, pc, #400	; (adr r3, 800bd18 <_dtoa_r+0x2e0>)
 800bb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8c:	f7f4 fd54 	bl	8000638 <__aeabi_dmul>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	4630      	mov	r0, r6
 800bb96:	4639      	mov	r1, r7
 800bb98:	f7f4 fb98 	bl	80002cc <__adddf3>
 800bb9c:	4606      	mov	r6, r0
 800bb9e:	460f      	mov	r7, r1
 800bba0:	f7f4 fffa 	bl	8000b98 <__aeabi_d2iz>
 800bba4:	2200      	movs	r2, #0
 800bba6:	4683      	mov	fp, r0
 800bba8:	2300      	movs	r3, #0
 800bbaa:	4630      	mov	r0, r6
 800bbac:	4639      	mov	r1, r7
 800bbae:	f7f4 ffb5 	bl	8000b1c <__aeabi_dcmplt>
 800bbb2:	b148      	cbz	r0, 800bbc8 <_dtoa_r+0x190>
 800bbb4:	4658      	mov	r0, fp
 800bbb6:	f7f4 fcd5 	bl	8000564 <__aeabi_i2d>
 800bbba:	4632      	mov	r2, r6
 800bbbc:	463b      	mov	r3, r7
 800bbbe:	f7f4 ffa3 	bl	8000b08 <__aeabi_dcmpeq>
 800bbc2:	b908      	cbnz	r0, 800bbc8 <_dtoa_r+0x190>
 800bbc4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bbc8:	f1bb 0f16 	cmp.w	fp, #22
 800bbcc:	d857      	bhi.n	800bc7e <_dtoa_r+0x246>
 800bbce:	4b5b      	ldr	r3, [pc, #364]	; (800bd3c <_dtoa_r+0x304>)
 800bbd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	ec51 0b18 	vmov	r0, r1, d8
 800bbdc:	f7f4 ff9e 	bl	8000b1c <__aeabi_dcmplt>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d04e      	beq.n	800bc82 <_dtoa_r+0x24a>
 800bbe4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bbe8:	2300      	movs	r3, #0
 800bbea:	930c      	str	r3, [sp, #48]	; 0x30
 800bbec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbee:	1b5b      	subs	r3, r3, r5
 800bbf0:	1e5a      	subs	r2, r3, #1
 800bbf2:	bf45      	ittet	mi
 800bbf4:	f1c3 0301 	rsbmi	r3, r3, #1
 800bbf8:	9305      	strmi	r3, [sp, #20]
 800bbfa:	2300      	movpl	r3, #0
 800bbfc:	2300      	movmi	r3, #0
 800bbfe:	9206      	str	r2, [sp, #24]
 800bc00:	bf54      	ite	pl
 800bc02:	9305      	strpl	r3, [sp, #20]
 800bc04:	9306      	strmi	r3, [sp, #24]
 800bc06:	f1bb 0f00 	cmp.w	fp, #0
 800bc0a:	db3c      	blt.n	800bc86 <_dtoa_r+0x24e>
 800bc0c:	9b06      	ldr	r3, [sp, #24]
 800bc0e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bc12:	445b      	add	r3, fp
 800bc14:	9306      	str	r3, [sp, #24]
 800bc16:	2300      	movs	r3, #0
 800bc18:	9308      	str	r3, [sp, #32]
 800bc1a:	9b07      	ldr	r3, [sp, #28]
 800bc1c:	2b09      	cmp	r3, #9
 800bc1e:	d868      	bhi.n	800bcf2 <_dtoa_r+0x2ba>
 800bc20:	2b05      	cmp	r3, #5
 800bc22:	bfc4      	itt	gt
 800bc24:	3b04      	subgt	r3, #4
 800bc26:	9307      	strgt	r3, [sp, #28]
 800bc28:	9b07      	ldr	r3, [sp, #28]
 800bc2a:	f1a3 0302 	sub.w	r3, r3, #2
 800bc2e:	bfcc      	ite	gt
 800bc30:	2500      	movgt	r5, #0
 800bc32:	2501      	movle	r5, #1
 800bc34:	2b03      	cmp	r3, #3
 800bc36:	f200 8085 	bhi.w	800bd44 <_dtoa_r+0x30c>
 800bc3a:	e8df f003 	tbb	[pc, r3]
 800bc3e:	3b2e      	.short	0x3b2e
 800bc40:	5839      	.short	0x5839
 800bc42:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bc46:	441d      	add	r5, r3
 800bc48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bc4c:	2b20      	cmp	r3, #32
 800bc4e:	bfc1      	itttt	gt
 800bc50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bc54:	fa08 f803 	lslgt.w	r8, r8, r3
 800bc58:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bc5c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bc60:	bfd6      	itet	le
 800bc62:	f1c3 0320 	rsble	r3, r3, #32
 800bc66:	ea48 0003 	orrgt.w	r0, r8, r3
 800bc6a:	fa06 f003 	lslle.w	r0, r6, r3
 800bc6e:	f7f4 fc69 	bl	8000544 <__aeabi_ui2d>
 800bc72:	2201      	movs	r2, #1
 800bc74:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bc78:	3d01      	subs	r5, #1
 800bc7a:	920e      	str	r2, [sp, #56]	; 0x38
 800bc7c:	e76f      	b.n	800bb5e <_dtoa_r+0x126>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e7b3      	b.n	800bbea <_dtoa_r+0x1b2>
 800bc82:	900c      	str	r0, [sp, #48]	; 0x30
 800bc84:	e7b2      	b.n	800bbec <_dtoa_r+0x1b4>
 800bc86:	9b05      	ldr	r3, [sp, #20]
 800bc88:	eba3 030b 	sub.w	r3, r3, fp
 800bc8c:	9305      	str	r3, [sp, #20]
 800bc8e:	f1cb 0300 	rsb	r3, fp, #0
 800bc92:	9308      	str	r3, [sp, #32]
 800bc94:	2300      	movs	r3, #0
 800bc96:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc98:	e7bf      	b.n	800bc1a <_dtoa_r+0x1e2>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	dc52      	bgt.n	800bd4a <_dtoa_r+0x312>
 800bca4:	2301      	movs	r3, #1
 800bca6:	9301      	str	r3, [sp, #4]
 800bca8:	9304      	str	r3, [sp, #16]
 800bcaa:	461a      	mov	r2, r3
 800bcac:	920a      	str	r2, [sp, #40]	; 0x28
 800bcae:	e00b      	b.n	800bcc8 <_dtoa_r+0x290>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e7f3      	b.n	800bc9c <_dtoa_r+0x264>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcba:	445b      	add	r3, fp
 800bcbc:	9301      	str	r3, [sp, #4]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	9304      	str	r3, [sp, #16]
 800bcc4:	bfb8      	it	lt
 800bcc6:	2301      	movlt	r3, #1
 800bcc8:	69e0      	ldr	r0, [r4, #28]
 800bcca:	2100      	movs	r1, #0
 800bccc:	2204      	movs	r2, #4
 800bcce:	f102 0614 	add.w	r6, r2, #20
 800bcd2:	429e      	cmp	r6, r3
 800bcd4:	d93d      	bls.n	800bd52 <_dtoa_r+0x31a>
 800bcd6:	6041      	str	r1, [r0, #4]
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f001 fc43 	bl	800d564 <_Balloc>
 800bcde:	9000      	str	r0, [sp, #0]
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d139      	bne.n	800bd58 <_dtoa_r+0x320>
 800bce4:	4b16      	ldr	r3, [pc, #88]	; (800bd40 <_dtoa_r+0x308>)
 800bce6:	4602      	mov	r2, r0
 800bce8:	f240 11af 	movw	r1, #431	; 0x1af
 800bcec:	e6bd      	b.n	800ba6a <_dtoa_r+0x32>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e7e1      	b.n	800bcb6 <_dtoa_r+0x27e>
 800bcf2:	2501      	movs	r5, #1
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	9307      	str	r3, [sp, #28]
 800bcf8:	9509      	str	r5, [sp, #36]	; 0x24
 800bcfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcfe:	9301      	str	r3, [sp, #4]
 800bd00:	9304      	str	r3, [sp, #16]
 800bd02:	2200      	movs	r2, #0
 800bd04:	2312      	movs	r3, #18
 800bd06:	e7d1      	b.n	800bcac <_dtoa_r+0x274>
 800bd08:	636f4361 	.word	0x636f4361
 800bd0c:	3fd287a7 	.word	0x3fd287a7
 800bd10:	8b60c8b3 	.word	0x8b60c8b3
 800bd14:	3fc68a28 	.word	0x3fc68a28
 800bd18:	509f79fb 	.word	0x509f79fb
 800bd1c:	3fd34413 	.word	0x3fd34413
 800bd20:	08010b8f 	.word	0x08010b8f
 800bd24:	08010ba6 	.word	0x08010ba6
 800bd28:	7ff00000 	.word	0x7ff00000
 800bd2c:	08010b8b 	.word	0x08010b8b
 800bd30:	08010b82 	.word	0x08010b82
 800bd34:	08010c37 	.word	0x08010c37
 800bd38:	3ff80000 	.word	0x3ff80000
 800bd3c:	08010cc0 	.word	0x08010cc0
 800bd40:	08010bfe 	.word	0x08010bfe
 800bd44:	2301      	movs	r3, #1
 800bd46:	9309      	str	r3, [sp, #36]	; 0x24
 800bd48:	e7d7      	b.n	800bcfa <_dtoa_r+0x2c2>
 800bd4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	9304      	str	r3, [sp, #16]
 800bd50:	e7ba      	b.n	800bcc8 <_dtoa_r+0x290>
 800bd52:	3101      	adds	r1, #1
 800bd54:	0052      	lsls	r2, r2, #1
 800bd56:	e7ba      	b.n	800bcce <_dtoa_r+0x296>
 800bd58:	69e3      	ldr	r3, [r4, #28]
 800bd5a:	9a00      	ldr	r2, [sp, #0]
 800bd5c:	601a      	str	r2, [r3, #0]
 800bd5e:	9b04      	ldr	r3, [sp, #16]
 800bd60:	2b0e      	cmp	r3, #14
 800bd62:	f200 80a8 	bhi.w	800beb6 <_dtoa_r+0x47e>
 800bd66:	2d00      	cmp	r5, #0
 800bd68:	f000 80a5 	beq.w	800beb6 <_dtoa_r+0x47e>
 800bd6c:	f1bb 0f00 	cmp.w	fp, #0
 800bd70:	dd38      	ble.n	800bde4 <_dtoa_r+0x3ac>
 800bd72:	4bc0      	ldr	r3, [pc, #768]	; (800c074 <_dtoa_r+0x63c>)
 800bd74:	f00b 020f 	and.w	r2, fp, #15
 800bd78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bd80:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bd84:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bd88:	d019      	beq.n	800bdbe <_dtoa_r+0x386>
 800bd8a:	4bbb      	ldr	r3, [pc, #748]	; (800c078 <_dtoa_r+0x640>)
 800bd8c:	ec51 0b18 	vmov	r0, r1, d8
 800bd90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd94:	f7f4 fd7a 	bl	800088c <__aeabi_ddiv>
 800bd98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd9c:	f008 080f 	and.w	r8, r8, #15
 800bda0:	2503      	movs	r5, #3
 800bda2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c078 <_dtoa_r+0x640>
 800bda6:	f1b8 0f00 	cmp.w	r8, #0
 800bdaa:	d10a      	bne.n	800bdc2 <_dtoa_r+0x38a>
 800bdac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdb0:	4632      	mov	r2, r6
 800bdb2:	463b      	mov	r3, r7
 800bdb4:	f7f4 fd6a 	bl	800088c <__aeabi_ddiv>
 800bdb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdbc:	e02b      	b.n	800be16 <_dtoa_r+0x3de>
 800bdbe:	2502      	movs	r5, #2
 800bdc0:	e7ef      	b.n	800bda2 <_dtoa_r+0x36a>
 800bdc2:	f018 0f01 	tst.w	r8, #1
 800bdc6:	d008      	beq.n	800bdda <_dtoa_r+0x3a2>
 800bdc8:	4630      	mov	r0, r6
 800bdca:	4639      	mov	r1, r7
 800bdcc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bdd0:	f7f4 fc32 	bl	8000638 <__aeabi_dmul>
 800bdd4:	3501      	adds	r5, #1
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	460f      	mov	r7, r1
 800bdda:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bdde:	f109 0908 	add.w	r9, r9, #8
 800bde2:	e7e0      	b.n	800bda6 <_dtoa_r+0x36e>
 800bde4:	f000 809f 	beq.w	800bf26 <_dtoa_r+0x4ee>
 800bde8:	f1cb 0600 	rsb	r6, fp, #0
 800bdec:	4ba1      	ldr	r3, [pc, #644]	; (800c074 <_dtoa_r+0x63c>)
 800bdee:	4fa2      	ldr	r7, [pc, #648]	; (800c078 <_dtoa_r+0x640>)
 800bdf0:	f006 020f 	and.w	r2, r6, #15
 800bdf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	ec51 0b18 	vmov	r0, r1, d8
 800be00:	f7f4 fc1a 	bl	8000638 <__aeabi_dmul>
 800be04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be08:	1136      	asrs	r6, r6, #4
 800be0a:	2300      	movs	r3, #0
 800be0c:	2502      	movs	r5, #2
 800be0e:	2e00      	cmp	r6, #0
 800be10:	d17e      	bne.n	800bf10 <_dtoa_r+0x4d8>
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1d0      	bne.n	800bdb8 <_dtoa_r+0x380>
 800be16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f000 8084 	beq.w	800bf2a <_dtoa_r+0x4f2>
 800be22:	4b96      	ldr	r3, [pc, #600]	; (800c07c <_dtoa_r+0x644>)
 800be24:	2200      	movs	r2, #0
 800be26:	4640      	mov	r0, r8
 800be28:	4649      	mov	r1, r9
 800be2a:	f7f4 fe77 	bl	8000b1c <__aeabi_dcmplt>
 800be2e:	2800      	cmp	r0, #0
 800be30:	d07b      	beq.n	800bf2a <_dtoa_r+0x4f2>
 800be32:	9b04      	ldr	r3, [sp, #16]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d078      	beq.n	800bf2a <_dtoa_r+0x4f2>
 800be38:	9b01      	ldr	r3, [sp, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	dd39      	ble.n	800beb2 <_dtoa_r+0x47a>
 800be3e:	4b90      	ldr	r3, [pc, #576]	; (800c080 <_dtoa_r+0x648>)
 800be40:	2200      	movs	r2, #0
 800be42:	4640      	mov	r0, r8
 800be44:	4649      	mov	r1, r9
 800be46:	f7f4 fbf7 	bl	8000638 <__aeabi_dmul>
 800be4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be4e:	9e01      	ldr	r6, [sp, #4]
 800be50:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800be54:	3501      	adds	r5, #1
 800be56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800be5a:	4628      	mov	r0, r5
 800be5c:	f7f4 fb82 	bl	8000564 <__aeabi_i2d>
 800be60:	4642      	mov	r2, r8
 800be62:	464b      	mov	r3, r9
 800be64:	f7f4 fbe8 	bl	8000638 <__aeabi_dmul>
 800be68:	4b86      	ldr	r3, [pc, #536]	; (800c084 <_dtoa_r+0x64c>)
 800be6a:	2200      	movs	r2, #0
 800be6c:	f7f4 fa2e 	bl	80002cc <__adddf3>
 800be70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800be74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be78:	9303      	str	r3, [sp, #12]
 800be7a:	2e00      	cmp	r6, #0
 800be7c:	d158      	bne.n	800bf30 <_dtoa_r+0x4f8>
 800be7e:	4b82      	ldr	r3, [pc, #520]	; (800c088 <_dtoa_r+0x650>)
 800be80:	2200      	movs	r2, #0
 800be82:	4640      	mov	r0, r8
 800be84:	4649      	mov	r1, r9
 800be86:	f7f4 fa1f 	bl	80002c8 <__aeabi_dsub>
 800be8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be8e:	4680      	mov	r8, r0
 800be90:	4689      	mov	r9, r1
 800be92:	f7f4 fe61 	bl	8000b58 <__aeabi_dcmpgt>
 800be96:	2800      	cmp	r0, #0
 800be98:	f040 8296 	bne.w	800c3c8 <_dtoa_r+0x990>
 800be9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bea0:	4640      	mov	r0, r8
 800bea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bea6:	4649      	mov	r1, r9
 800bea8:	f7f4 fe38 	bl	8000b1c <__aeabi_dcmplt>
 800beac:	2800      	cmp	r0, #0
 800beae:	f040 8289 	bne.w	800c3c4 <_dtoa_r+0x98c>
 800beb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800beb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f2c0 814e 	blt.w	800c15a <_dtoa_r+0x722>
 800bebe:	f1bb 0f0e 	cmp.w	fp, #14
 800bec2:	f300 814a 	bgt.w	800c15a <_dtoa_r+0x722>
 800bec6:	4b6b      	ldr	r3, [pc, #428]	; (800c074 <_dtoa_r+0x63c>)
 800bec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800becc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f280 80dc 	bge.w	800c090 <_dtoa_r+0x658>
 800bed8:	9b04      	ldr	r3, [sp, #16]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f300 80d8 	bgt.w	800c090 <_dtoa_r+0x658>
 800bee0:	f040 826f 	bne.w	800c3c2 <_dtoa_r+0x98a>
 800bee4:	4b68      	ldr	r3, [pc, #416]	; (800c088 <_dtoa_r+0x650>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	4640      	mov	r0, r8
 800beea:	4649      	mov	r1, r9
 800beec:	f7f4 fba4 	bl	8000638 <__aeabi_dmul>
 800bef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bef4:	f7f4 fe26 	bl	8000b44 <__aeabi_dcmpge>
 800bef8:	9e04      	ldr	r6, [sp, #16]
 800befa:	4637      	mov	r7, r6
 800befc:	2800      	cmp	r0, #0
 800befe:	f040 8245 	bne.w	800c38c <_dtoa_r+0x954>
 800bf02:	9d00      	ldr	r5, [sp, #0]
 800bf04:	2331      	movs	r3, #49	; 0x31
 800bf06:	f805 3b01 	strb.w	r3, [r5], #1
 800bf0a:	f10b 0b01 	add.w	fp, fp, #1
 800bf0e:	e241      	b.n	800c394 <_dtoa_r+0x95c>
 800bf10:	07f2      	lsls	r2, r6, #31
 800bf12:	d505      	bpl.n	800bf20 <_dtoa_r+0x4e8>
 800bf14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf18:	f7f4 fb8e 	bl	8000638 <__aeabi_dmul>
 800bf1c:	3501      	adds	r5, #1
 800bf1e:	2301      	movs	r3, #1
 800bf20:	1076      	asrs	r6, r6, #1
 800bf22:	3708      	adds	r7, #8
 800bf24:	e773      	b.n	800be0e <_dtoa_r+0x3d6>
 800bf26:	2502      	movs	r5, #2
 800bf28:	e775      	b.n	800be16 <_dtoa_r+0x3de>
 800bf2a:	9e04      	ldr	r6, [sp, #16]
 800bf2c:	465f      	mov	r7, fp
 800bf2e:	e792      	b.n	800be56 <_dtoa_r+0x41e>
 800bf30:	9900      	ldr	r1, [sp, #0]
 800bf32:	4b50      	ldr	r3, [pc, #320]	; (800c074 <_dtoa_r+0x63c>)
 800bf34:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf38:	4431      	add	r1, r6
 800bf3a:	9102      	str	r1, [sp, #8]
 800bf3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf3e:	eeb0 9a47 	vmov.f32	s18, s14
 800bf42:	eef0 9a67 	vmov.f32	s19, s15
 800bf46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bf4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf4e:	2900      	cmp	r1, #0
 800bf50:	d044      	beq.n	800bfdc <_dtoa_r+0x5a4>
 800bf52:	494e      	ldr	r1, [pc, #312]	; (800c08c <_dtoa_r+0x654>)
 800bf54:	2000      	movs	r0, #0
 800bf56:	f7f4 fc99 	bl	800088c <__aeabi_ddiv>
 800bf5a:	ec53 2b19 	vmov	r2, r3, d9
 800bf5e:	f7f4 f9b3 	bl	80002c8 <__aeabi_dsub>
 800bf62:	9d00      	ldr	r5, [sp, #0]
 800bf64:	ec41 0b19 	vmov	d9, r0, r1
 800bf68:	4649      	mov	r1, r9
 800bf6a:	4640      	mov	r0, r8
 800bf6c:	f7f4 fe14 	bl	8000b98 <__aeabi_d2iz>
 800bf70:	4606      	mov	r6, r0
 800bf72:	f7f4 faf7 	bl	8000564 <__aeabi_i2d>
 800bf76:	4602      	mov	r2, r0
 800bf78:	460b      	mov	r3, r1
 800bf7a:	4640      	mov	r0, r8
 800bf7c:	4649      	mov	r1, r9
 800bf7e:	f7f4 f9a3 	bl	80002c8 <__aeabi_dsub>
 800bf82:	3630      	adds	r6, #48	; 0x30
 800bf84:	f805 6b01 	strb.w	r6, [r5], #1
 800bf88:	ec53 2b19 	vmov	r2, r3, d9
 800bf8c:	4680      	mov	r8, r0
 800bf8e:	4689      	mov	r9, r1
 800bf90:	f7f4 fdc4 	bl	8000b1c <__aeabi_dcmplt>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d164      	bne.n	800c062 <_dtoa_r+0x62a>
 800bf98:	4642      	mov	r2, r8
 800bf9a:	464b      	mov	r3, r9
 800bf9c:	4937      	ldr	r1, [pc, #220]	; (800c07c <_dtoa_r+0x644>)
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	f7f4 f992 	bl	80002c8 <__aeabi_dsub>
 800bfa4:	ec53 2b19 	vmov	r2, r3, d9
 800bfa8:	f7f4 fdb8 	bl	8000b1c <__aeabi_dcmplt>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	f040 80b6 	bne.w	800c11e <_dtoa_r+0x6e6>
 800bfb2:	9b02      	ldr	r3, [sp, #8]
 800bfb4:	429d      	cmp	r5, r3
 800bfb6:	f43f af7c 	beq.w	800beb2 <_dtoa_r+0x47a>
 800bfba:	4b31      	ldr	r3, [pc, #196]	; (800c080 <_dtoa_r+0x648>)
 800bfbc:	ec51 0b19 	vmov	r0, r1, d9
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f7f4 fb39 	bl	8000638 <__aeabi_dmul>
 800bfc6:	4b2e      	ldr	r3, [pc, #184]	; (800c080 <_dtoa_r+0x648>)
 800bfc8:	ec41 0b19 	vmov	d9, r0, r1
 800bfcc:	2200      	movs	r2, #0
 800bfce:	4640      	mov	r0, r8
 800bfd0:	4649      	mov	r1, r9
 800bfd2:	f7f4 fb31 	bl	8000638 <__aeabi_dmul>
 800bfd6:	4680      	mov	r8, r0
 800bfd8:	4689      	mov	r9, r1
 800bfda:	e7c5      	b.n	800bf68 <_dtoa_r+0x530>
 800bfdc:	ec51 0b17 	vmov	r0, r1, d7
 800bfe0:	f7f4 fb2a 	bl	8000638 <__aeabi_dmul>
 800bfe4:	9b02      	ldr	r3, [sp, #8]
 800bfe6:	9d00      	ldr	r5, [sp, #0]
 800bfe8:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfea:	ec41 0b19 	vmov	d9, r0, r1
 800bfee:	4649      	mov	r1, r9
 800bff0:	4640      	mov	r0, r8
 800bff2:	f7f4 fdd1 	bl	8000b98 <__aeabi_d2iz>
 800bff6:	4606      	mov	r6, r0
 800bff8:	f7f4 fab4 	bl	8000564 <__aeabi_i2d>
 800bffc:	3630      	adds	r6, #48	; 0x30
 800bffe:	4602      	mov	r2, r0
 800c000:	460b      	mov	r3, r1
 800c002:	4640      	mov	r0, r8
 800c004:	4649      	mov	r1, r9
 800c006:	f7f4 f95f 	bl	80002c8 <__aeabi_dsub>
 800c00a:	f805 6b01 	strb.w	r6, [r5], #1
 800c00e:	9b02      	ldr	r3, [sp, #8]
 800c010:	429d      	cmp	r5, r3
 800c012:	4680      	mov	r8, r0
 800c014:	4689      	mov	r9, r1
 800c016:	f04f 0200 	mov.w	r2, #0
 800c01a:	d124      	bne.n	800c066 <_dtoa_r+0x62e>
 800c01c:	4b1b      	ldr	r3, [pc, #108]	; (800c08c <_dtoa_r+0x654>)
 800c01e:	ec51 0b19 	vmov	r0, r1, d9
 800c022:	f7f4 f953 	bl	80002cc <__adddf3>
 800c026:	4602      	mov	r2, r0
 800c028:	460b      	mov	r3, r1
 800c02a:	4640      	mov	r0, r8
 800c02c:	4649      	mov	r1, r9
 800c02e:	f7f4 fd93 	bl	8000b58 <__aeabi_dcmpgt>
 800c032:	2800      	cmp	r0, #0
 800c034:	d173      	bne.n	800c11e <_dtoa_r+0x6e6>
 800c036:	ec53 2b19 	vmov	r2, r3, d9
 800c03a:	4914      	ldr	r1, [pc, #80]	; (800c08c <_dtoa_r+0x654>)
 800c03c:	2000      	movs	r0, #0
 800c03e:	f7f4 f943 	bl	80002c8 <__aeabi_dsub>
 800c042:	4602      	mov	r2, r0
 800c044:	460b      	mov	r3, r1
 800c046:	4640      	mov	r0, r8
 800c048:	4649      	mov	r1, r9
 800c04a:	f7f4 fd67 	bl	8000b1c <__aeabi_dcmplt>
 800c04e:	2800      	cmp	r0, #0
 800c050:	f43f af2f 	beq.w	800beb2 <_dtoa_r+0x47a>
 800c054:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c056:	1e6b      	subs	r3, r5, #1
 800c058:	930f      	str	r3, [sp, #60]	; 0x3c
 800c05a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c05e:	2b30      	cmp	r3, #48	; 0x30
 800c060:	d0f8      	beq.n	800c054 <_dtoa_r+0x61c>
 800c062:	46bb      	mov	fp, r7
 800c064:	e04a      	b.n	800c0fc <_dtoa_r+0x6c4>
 800c066:	4b06      	ldr	r3, [pc, #24]	; (800c080 <_dtoa_r+0x648>)
 800c068:	f7f4 fae6 	bl	8000638 <__aeabi_dmul>
 800c06c:	4680      	mov	r8, r0
 800c06e:	4689      	mov	r9, r1
 800c070:	e7bd      	b.n	800bfee <_dtoa_r+0x5b6>
 800c072:	bf00      	nop
 800c074:	08010cc0 	.word	0x08010cc0
 800c078:	08010c98 	.word	0x08010c98
 800c07c:	3ff00000 	.word	0x3ff00000
 800c080:	40240000 	.word	0x40240000
 800c084:	401c0000 	.word	0x401c0000
 800c088:	40140000 	.word	0x40140000
 800c08c:	3fe00000 	.word	0x3fe00000
 800c090:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c094:	9d00      	ldr	r5, [sp, #0]
 800c096:	4642      	mov	r2, r8
 800c098:	464b      	mov	r3, r9
 800c09a:	4630      	mov	r0, r6
 800c09c:	4639      	mov	r1, r7
 800c09e:	f7f4 fbf5 	bl	800088c <__aeabi_ddiv>
 800c0a2:	f7f4 fd79 	bl	8000b98 <__aeabi_d2iz>
 800c0a6:	9001      	str	r0, [sp, #4]
 800c0a8:	f7f4 fa5c 	bl	8000564 <__aeabi_i2d>
 800c0ac:	4642      	mov	r2, r8
 800c0ae:	464b      	mov	r3, r9
 800c0b0:	f7f4 fac2 	bl	8000638 <__aeabi_dmul>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	4639      	mov	r1, r7
 800c0bc:	f7f4 f904 	bl	80002c8 <__aeabi_dsub>
 800c0c0:	9e01      	ldr	r6, [sp, #4]
 800c0c2:	9f04      	ldr	r7, [sp, #16]
 800c0c4:	3630      	adds	r6, #48	; 0x30
 800c0c6:	f805 6b01 	strb.w	r6, [r5], #1
 800c0ca:	9e00      	ldr	r6, [sp, #0]
 800c0cc:	1bae      	subs	r6, r5, r6
 800c0ce:	42b7      	cmp	r7, r6
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	d134      	bne.n	800c140 <_dtoa_r+0x708>
 800c0d6:	f7f4 f8f9 	bl	80002cc <__adddf3>
 800c0da:	4642      	mov	r2, r8
 800c0dc:	464b      	mov	r3, r9
 800c0de:	4606      	mov	r6, r0
 800c0e0:	460f      	mov	r7, r1
 800c0e2:	f7f4 fd39 	bl	8000b58 <__aeabi_dcmpgt>
 800c0e6:	b9c8      	cbnz	r0, 800c11c <_dtoa_r+0x6e4>
 800c0e8:	4642      	mov	r2, r8
 800c0ea:	464b      	mov	r3, r9
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	f7f4 fd0a 	bl	8000b08 <__aeabi_dcmpeq>
 800c0f4:	b110      	cbz	r0, 800c0fc <_dtoa_r+0x6c4>
 800c0f6:	9b01      	ldr	r3, [sp, #4]
 800c0f8:	07db      	lsls	r3, r3, #31
 800c0fa:	d40f      	bmi.n	800c11c <_dtoa_r+0x6e4>
 800c0fc:	4651      	mov	r1, sl
 800c0fe:	4620      	mov	r0, r4
 800c100:	f001 fa70 	bl	800d5e4 <_Bfree>
 800c104:	2300      	movs	r3, #0
 800c106:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c108:	702b      	strb	r3, [r5, #0]
 800c10a:	f10b 0301 	add.w	r3, fp, #1
 800c10e:	6013      	str	r3, [r2, #0]
 800c110:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c112:	2b00      	cmp	r3, #0
 800c114:	f43f ace2 	beq.w	800badc <_dtoa_r+0xa4>
 800c118:	601d      	str	r5, [r3, #0]
 800c11a:	e4df      	b.n	800badc <_dtoa_r+0xa4>
 800c11c:	465f      	mov	r7, fp
 800c11e:	462b      	mov	r3, r5
 800c120:	461d      	mov	r5, r3
 800c122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c126:	2a39      	cmp	r2, #57	; 0x39
 800c128:	d106      	bne.n	800c138 <_dtoa_r+0x700>
 800c12a:	9a00      	ldr	r2, [sp, #0]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d1f7      	bne.n	800c120 <_dtoa_r+0x6e8>
 800c130:	9900      	ldr	r1, [sp, #0]
 800c132:	2230      	movs	r2, #48	; 0x30
 800c134:	3701      	adds	r7, #1
 800c136:	700a      	strb	r2, [r1, #0]
 800c138:	781a      	ldrb	r2, [r3, #0]
 800c13a:	3201      	adds	r2, #1
 800c13c:	701a      	strb	r2, [r3, #0]
 800c13e:	e790      	b.n	800c062 <_dtoa_r+0x62a>
 800c140:	4ba3      	ldr	r3, [pc, #652]	; (800c3d0 <_dtoa_r+0x998>)
 800c142:	2200      	movs	r2, #0
 800c144:	f7f4 fa78 	bl	8000638 <__aeabi_dmul>
 800c148:	2200      	movs	r2, #0
 800c14a:	2300      	movs	r3, #0
 800c14c:	4606      	mov	r6, r0
 800c14e:	460f      	mov	r7, r1
 800c150:	f7f4 fcda 	bl	8000b08 <__aeabi_dcmpeq>
 800c154:	2800      	cmp	r0, #0
 800c156:	d09e      	beq.n	800c096 <_dtoa_r+0x65e>
 800c158:	e7d0      	b.n	800c0fc <_dtoa_r+0x6c4>
 800c15a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c15c:	2a00      	cmp	r2, #0
 800c15e:	f000 80ca 	beq.w	800c2f6 <_dtoa_r+0x8be>
 800c162:	9a07      	ldr	r2, [sp, #28]
 800c164:	2a01      	cmp	r2, #1
 800c166:	f300 80ad 	bgt.w	800c2c4 <_dtoa_r+0x88c>
 800c16a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c16c:	2a00      	cmp	r2, #0
 800c16e:	f000 80a5 	beq.w	800c2bc <_dtoa_r+0x884>
 800c172:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c176:	9e08      	ldr	r6, [sp, #32]
 800c178:	9d05      	ldr	r5, [sp, #20]
 800c17a:	9a05      	ldr	r2, [sp, #20]
 800c17c:	441a      	add	r2, r3
 800c17e:	9205      	str	r2, [sp, #20]
 800c180:	9a06      	ldr	r2, [sp, #24]
 800c182:	2101      	movs	r1, #1
 800c184:	441a      	add	r2, r3
 800c186:	4620      	mov	r0, r4
 800c188:	9206      	str	r2, [sp, #24]
 800c18a:	f001 fae1 	bl	800d750 <__i2b>
 800c18e:	4607      	mov	r7, r0
 800c190:	b165      	cbz	r5, 800c1ac <_dtoa_r+0x774>
 800c192:	9b06      	ldr	r3, [sp, #24]
 800c194:	2b00      	cmp	r3, #0
 800c196:	dd09      	ble.n	800c1ac <_dtoa_r+0x774>
 800c198:	42ab      	cmp	r3, r5
 800c19a:	9a05      	ldr	r2, [sp, #20]
 800c19c:	bfa8      	it	ge
 800c19e:	462b      	movge	r3, r5
 800c1a0:	1ad2      	subs	r2, r2, r3
 800c1a2:	9205      	str	r2, [sp, #20]
 800c1a4:	9a06      	ldr	r2, [sp, #24]
 800c1a6:	1aed      	subs	r5, r5, r3
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	9306      	str	r3, [sp, #24]
 800c1ac:	9b08      	ldr	r3, [sp, #32]
 800c1ae:	b1f3      	cbz	r3, 800c1ee <_dtoa_r+0x7b6>
 800c1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f000 80a3 	beq.w	800c2fe <_dtoa_r+0x8c6>
 800c1b8:	2e00      	cmp	r6, #0
 800c1ba:	dd10      	ble.n	800c1de <_dtoa_r+0x7a6>
 800c1bc:	4639      	mov	r1, r7
 800c1be:	4632      	mov	r2, r6
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f001 fb85 	bl	800d8d0 <__pow5mult>
 800c1c6:	4652      	mov	r2, sl
 800c1c8:	4601      	mov	r1, r0
 800c1ca:	4607      	mov	r7, r0
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f001 fad5 	bl	800d77c <__multiply>
 800c1d2:	4651      	mov	r1, sl
 800c1d4:	4680      	mov	r8, r0
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f001 fa04 	bl	800d5e4 <_Bfree>
 800c1dc:	46c2      	mov	sl, r8
 800c1de:	9b08      	ldr	r3, [sp, #32]
 800c1e0:	1b9a      	subs	r2, r3, r6
 800c1e2:	d004      	beq.n	800c1ee <_dtoa_r+0x7b6>
 800c1e4:	4651      	mov	r1, sl
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f001 fb72 	bl	800d8d0 <__pow5mult>
 800c1ec:	4682      	mov	sl, r0
 800c1ee:	2101      	movs	r1, #1
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f001 faad 	bl	800d750 <__i2b>
 800c1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	f340 8081 	ble.w	800c302 <_dtoa_r+0x8ca>
 800c200:	461a      	mov	r2, r3
 800c202:	4601      	mov	r1, r0
 800c204:	4620      	mov	r0, r4
 800c206:	f001 fb63 	bl	800d8d0 <__pow5mult>
 800c20a:	9b07      	ldr	r3, [sp, #28]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	4606      	mov	r6, r0
 800c210:	dd7a      	ble.n	800c308 <_dtoa_r+0x8d0>
 800c212:	f04f 0800 	mov.w	r8, #0
 800c216:	6933      	ldr	r3, [r6, #16]
 800c218:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c21c:	6918      	ldr	r0, [r3, #16]
 800c21e:	f001 fa49 	bl	800d6b4 <__hi0bits>
 800c222:	f1c0 0020 	rsb	r0, r0, #32
 800c226:	9b06      	ldr	r3, [sp, #24]
 800c228:	4418      	add	r0, r3
 800c22a:	f010 001f 	ands.w	r0, r0, #31
 800c22e:	f000 8094 	beq.w	800c35a <_dtoa_r+0x922>
 800c232:	f1c0 0320 	rsb	r3, r0, #32
 800c236:	2b04      	cmp	r3, #4
 800c238:	f340 8085 	ble.w	800c346 <_dtoa_r+0x90e>
 800c23c:	9b05      	ldr	r3, [sp, #20]
 800c23e:	f1c0 001c 	rsb	r0, r0, #28
 800c242:	4403      	add	r3, r0
 800c244:	9305      	str	r3, [sp, #20]
 800c246:	9b06      	ldr	r3, [sp, #24]
 800c248:	4403      	add	r3, r0
 800c24a:	4405      	add	r5, r0
 800c24c:	9306      	str	r3, [sp, #24]
 800c24e:	9b05      	ldr	r3, [sp, #20]
 800c250:	2b00      	cmp	r3, #0
 800c252:	dd05      	ble.n	800c260 <_dtoa_r+0x828>
 800c254:	4651      	mov	r1, sl
 800c256:	461a      	mov	r2, r3
 800c258:	4620      	mov	r0, r4
 800c25a:	f001 fb93 	bl	800d984 <__lshift>
 800c25e:	4682      	mov	sl, r0
 800c260:	9b06      	ldr	r3, [sp, #24]
 800c262:	2b00      	cmp	r3, #0
 800c264:	dd05      	ble.n	800c272 <_dtoa_r+0x83a>
 800c266:	4631      	mov	r1, r6
 800c268:	461a      	mov	r2, r3
 800c26a:	4620      	mov	r0, r4
 800c26c:	f001 fb8a 	bl	800d984 <__lshift>
 800c270:	4606      	mov	r6, r0
 800c272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c274:	2b00      	cmp	r3, #0
 800c276:	d072      	beq.n	800c35e <_dtoa_r+0x926>
 800c278:	4631      	mov	r1, r6
 800c27a:	4650      	mov	r0, sl
 800c27c:	f001 fbee 	bl	800da5c <__mcmp>
 800c280:	2800      	cmp	r0, #0
 800c282:	da6c      	bge.n	800c35e <_dtoa_r+0x926>
 800c284:	2300      	movs	r3, #0
 800c286:	4651      	mov	r1, sl
 800c288:	220a      	movs	r2, #10
 800c28a:	4620      	mov	r0, r4
 800c28c:	f001 f9cc 	bl	800d628 <__multadd>
 800c290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c292:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c296:	4682      	mov	sl, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f000 81b0 	beq.w	800c5fe <_dtoa_r+0xbc6>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	220a      	movs	r2, #10
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f001 f9bf 	bl	800d628 <__multadd>
 800c2aa:	9b01      	ldr	r3, [sp, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	4607      	mov	r7, r0
 800c2b0:	f300 8096 	bgt.w	800c3e0 <_dtoa_r+0x9a8>
 800c2b4:	9b07      	ldr	r3, [sp, #28]
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	dc59      	bgt.n	800c36e <_dtoa_r+0x936>
 800c2ba:	e091      	b.n	800c3e0 <_dtoa_r+0x9a8>
 800c2bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c2c2:	e758      	b.n	800c176 <_dtoa_r+0x73e>
 800c2c4:	9b04      	ldr	r3, [sp, #16]
 800c2c6:	1e5e      	subs	r6, r3, #1
 800c2c8:	9b08      	ldr	r3, [sp, #32]
 800c2ca:	42b3      	cmp	r3, r6
 800c2cc:	bfbf      	itttt	lt
 800c2ce:	9b08      	ldrlt	r3, [sp, #32]
 800c2d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c2d2:	9608      	strlt	r6, [sp, #32]
 800c2d4:	1af3      	sublt	r3, r6, r3
 800c2d6:	bfb4      	ite	lt
 800c2d8:	18d2      	addlt	r2, r2, r3
 800c2da:	1b9e      	subge	r6, r3, r6
 800c2dc:	9b04      	ldr	r3, [sp, #16]
 800c2de:	bfbc      	itt	lt
 800c2e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c2e2:	2600      	movlt	r6, #0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	bfb7      	itett	lt
 800c2e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c2ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c2f0:	1a9d      	sublt	r5, r3, r2
 800c2f2:	2300      	movlt	r3, #0
 800c2f4:	e741      	b.n	800c17a <_dtoa_r+0x742>
 800c2f6:	9e08      	ldr	r6, [sp, #32]
 800c2f8:	9d05      	ldr	r5, [sp, #20]
 800c2fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c2fc:	e748      	b.n	800c190 <_dtoa_r+0x758>
 800c2fe:	9a08      	ldr	r2, [sp, #32]
 800c300:	e770      	b.n	800c1e4 <_dtoa_r+0x7ac>
 800c302:	9b07      	ldr	r3, [sp, #28]
 800c304:	2b01      	cmp	r3, #1
 800c306:	dc19      	bgt.n	800c33c <_dtoa_r+0x904>
 800c308:	9b02      	ldr	r3, [sp, #8]
 800c30a:	b9bb      	cbnz	r3, 800c33c <_dtoa_r+0x904>
 800c30c:	9b03      	ldr	r3, [sp, #12]
 800c30e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c312:	b99b      	cbnz	r3, 800c33c <_dtoa_r+0x904>
 800c314:	9b03      	ldr	r3, [sp, #12]
 800c316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c31a:	0d1b      	lsrs	r3, r3, #20
 800c31c:	051b      	lsls	r3, r3, #20
 800c31e:	b183      	cbz	r3, 800c342 <_dtoa_r+0x90a>
 800c320:	9b05      	ldr	r3, [sp, #20]
 800c322:	3301      	adds	r3, #1
 800c324:	9305      	str	r3, [sp, #20]
 800c326:	9b06      	ldr	r3, [sp, #24]
 800c328:	3301      	adds	r3, #1
 800c32a:	9306      	str	r3, [sp, #24]
 800c32c:	f04f 0801 	mov.w	r8, #1
 800c330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c332:	2b00      	cmp	r3, #0
 800c334:	f47f af6f 	bne.w	800c216 <_dtoa_r+0x7de>
 800c338:	2001      	movs	r0, #1
 800c33a:	e774      	b.n	800c226 <_dtoa_r+0x7ee>
 800c33c:	f04f 0800 	mov.w	r8, #0
 800c340:	e7f6      	b.n	800c330 <_dtoa_r+0x8f8>
 800c342:	4698      	mov	r8, r3
 800c344:	e7f4      	b.n	800c330 <_dtoa_r+0x8f8>
 800c346:	d082      	beq.n	800c24e <_dtoa_r+0x816>
 800c348:	9a05      	ldr	r2, [sp, #20]
 800c34a:	331c      	adds	r3, #28
 800c34c:	441a      	add	r2, r3
 800c34e:	9205      	str	r2, [sp, #20]
 800c350:	9a06      	ldr	r2, [sp, #24]
 800c352:	441a      	add	r2, r3
 800c354:	441d      	add	r5, r3
 800c356:	9206      	str	r2, [sp, #24]
 800c358:	e779      	b.n	800c24e <_dtoa_r+0x816>
 800c35a:	4603      	mov	r3, r0
 800c35c:	e7f4      	b.n	800c348 <_dtoa_r+0x910>
 800c35e:	9b04      	ldr	r3, [sp, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	dc37      	bgt.n	800c3d4 <_dtoa_r+0x99c>
 800c364:	9b07      	ldr	r3, [sp, #28]
 800c366:	2b02      	cmp	r3, #2
 800c368:	dd34      	ble.n	800c3d4 <_dtoa_r+0x99c>
 800c36a:	9b04      	ldr	r3, [sp, #16]
 800c36c:	9301      	str	r3, [sp, #4]
 800c36e:	9b01      	ldr	r3, [sp, #4]
 800c370:	b963      	cbnz	r3, 800c38c <_dtoa_r+0x954>
 800c372:	4631      	mov	r1, r6
 800c374:	2205      	movs	r2, #5
 800c376:	4620      	mov	r0, r4
 800c378:	f001 f956 	bl	800d628 <__multadd>
 800c37c:	4601      	mov	r1, r0
 800c37e:	4606      	mov	r6, r0
 800c380:	4650      	mov	r0, sl
 800c382:	f001 fb6b 	bl	800da5c <__mcmp>
 800c386:	2800      	cmp	r0, #0
 800c388:	f73f adbb 	bgt.w	800bf02 <_dtoa_r+0x4ca>
 800c38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c38e:	9d00      	ldr	r5, [sp, #0]
 800c390:	ea6f 0b03 	mvn.w	fp, r3
 800c394:	f04f 0800 	mov.w	r8, #0
 800c398:	4631      	mov	r1, r6
 800c39a:	4620      	mov	r0, r4
 800c39c:	f001 f922 	bl	800d5e4 <_Bfree>
 800c3a0:	2f00      	cmp	r7, #0
 800c3a2:	f43f aeab 	beq.w	800c0fc <_dtoa_r+0x6c4>
 800c3a6:	f1b8 0f00 	cmp.w	r8, #0
 800c3aa:	d005      	beq.n	800c3b8 <_dtoa_r+0x980>
 800c3ac:	45b8      	cmp	r8, r7
 800c3ae:	d003      	beq.n	800c3b8 <_dtoa_r+0x980>
 800c3b0:	4641      	mov	r1, r8
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f001 f916 	bl	800d5e4 <_Bfree>
 800c3b8:	4639      	mov	r1, r7
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f001 f912 	bl	800d5e4 <_Bfree>
 800c3c0:	e69c      	b.n	800c0fc <_dtoa_r+0x6c4>
 800c3c2:	2600      	movs	r6, #0
 800c3c4:	4637      	mov	r7, r6
 800c3c6:	e7e1      	b.n	800c38c <_dtoa_r+0x954>
 800c3c8:	46bb      	mov	fp, r7
 800c3ca:	4637      	mov	r7, r6
 800c3cc:	e599      	b.n	800bf02 <_dtoa_r+0x4ca>
 800c3ce:	bf00      	nop
 800c3d0:	40240000 	.word	0x40240000
 800c3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f000 80c8 	beq.w	800c56c <_dtoa_r+0xb34>
 800c3dc:	9b04      	ldr	r3, [sp, #16]
 800c3de:	9301      	str	r3, [sp, #4]
 800c3e0:	2d00      	cmp	r5, #0
 800c3e2:	dd05      	ble.n	800c3f0 <_dtoa_r+0x9b8>
 800c3e4:	4639      	mov	r1, r7
 800c3e6:	462a      	mov	r2, r5
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f001 facb 	bl	800d984 <__lshift>
 800c3ee:	4607      	mov	r7, r0
 800c3f0:	f1b8 0f00 	cmp.w	r8, #0
 800c3f4:	d05b      	beq.n	800c4ae <_dtoa_r+0xa76>
 800c3f6:	6879      	ldr	r1, [r7, #4]
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f001 f8b3 	bl	800d564 <_Balloc>
 800c3fe:	4605      	mov	r5, r0
 800c400:	b928      	cbnz	r0, 800c40e <_dtoa_r+0x9d6>
 800c402:	4b83      	ldr	r3, [pc, #524]	; (800c610 <_dtoa_r+0xbd8>)
 800c404:	4602      	mov	r2, r0
 800c406:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c40a:	f7ff bb2e 	b.w	800ba6a <_dtoa_r+0x32>
 800c40e:	693a      	ldr	r2, [r7, #16]
 800c410:	3202      	adds	r2, #2
 800c412:	0092      	lsls	r2, r2, #2
 800c414:	f107 010c 	add.w	r1, r7, #12
 800c418:	300c      	adds	r0, #12
 800c41a:	f001 fed7 	bl	800e1cc <memcpy>
 800c41e:	2201      	movs	r2, #1
 800c420:	4629      	mov	r1, r5
 800c422:	4620      	mov	r0, r4
 800c424:	f001 faae 	bl	800d984 <__lshift>
 800c428:	9b00      	ldr	r3, [sp, #0]
 800c42a:	3301      	adds	r3, #1
 800c42c:	9304      	str	r3, [sp, #16]
 800c42e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c432:	4413      	add	r3, r2
 800c434:	9308      	str	r3, [sp, #32]
 800c436:	9b02      	ldr	r3, [sp, #8]
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	46b8      	mov	r8, r7
 800c43e:	9306      	str	r3, [sp, #24]
 800c440:	4607      	mov	r7, r0
 800c442:	9b04      	ldr	r3, [sp, #16]
 800c444:	4631      	mov	r1, r6
 800c446:	3b01      	subs	r3, #1
 800c448:	4650      	mov	r0, sl
 800c44a:	9301      	str	r3, [sp, #4]
 800c44c:	f7ff fa6a 	bl	800b924 <quorem>
 800c450:	4641      	mov	r1, r8
 800c452:	9002      	str	r0, [sp, #8]
 800c454:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c458:	4650      	mov	r0, sl
 800c45a:	f001 faff 	bl	800da5c <__mcmp>
 800c45e:	463a      	mov	r2, r7
 800c460:	9005      	str	r0, [sp, #20]
 800c462:	4631      	mov	r1, r6
 800c464:	4620      	mov	r0, r4
 800c466:	f001 fb15 	bl	800da94 <__mdiff>
 800c46a:	68c2      	ldr	r2, [r0, #12]
 800c46c:	4605      	mov	r5, r0
 800c46e:	bb02      	cbnz	r2, 800c4b2 <_dtoa_r+0xa7a>
 800c470:	4601      	mov	r1, r0
 800c472:	4650      	mov	r0, sl
 800c474:	f001 faf2 	bl	800da5c <__mcmp>
 800c478:	4602      	mov	r2, r0
 800c47a:	4629      	mov	r1, r5
 800c47c:	4620      	mov	r0, r4
 800c47e:	9209      	str	r2, [sp, #36]	; 0x24
 800c480:	f001 f8b0 	bl	800d5e4 <_Bfree>
 800c484:	9b07      	ldr	r3, [sp, #28]
 800c486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c488:	9d04      	ldr	r5, [sp, #16]
 800c48a:	ea43 0102 	orr.w	r1, r3, r2
 800c48e:	9b06      	ldr	r3, [sp, #24]
 800c490:	4319      	orrs	r1, r3
 800c492:	d110      	bne.n	800c4b6 <_dtoa_r+0xa7e>
 800c494:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c498:	d029      	beq.n	800c4ee <_dtoa_r+0xab6>
 800c49a:	9b05      	ldr	r3, [sp, #20]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	dd02      	ble.n	800c4a6 <_dtoa_r+0xa6e>
 800c4a0:	9b02      	ldr	r3, [sp, #8]
 800c4a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c4a6:	9b01      	ldr	r3, [sp, #4]
 800c4a8:	f883 9000 	strb.w	r9, [r3]
 800c4ac:	e774      	b.n	800c398 <_dtoa_r+0x960>
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	e7ba      	b.n	800c428 <_dtoa_r+0x9f0>
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	e7e1      	b.n	800c47a <_dtoa_r+0xa42>
 800c4b6:	9b05      	ldr	r3, [sp, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	db04      	blt.n	800c4c6 <_dtoa_r+0xa8e>
 800c4bc:	9907      	ldr	r1, [sp, #28]
 800c4be:	430b      	orrs	r3, r1
 800c4c0:	9906      	ldr	r1, [sp, #24]
 800c4c2:	430b      	orrs	r3, r1
 800c4c4:	d120      	bne.n	800c508 <_dtoa_r+0xad0>
 800c4c6:	2a00      	cmp	r2, #0
 800c4c8:	dded      	ble.n	800c4a6 <_dtoa_r+0xa6e>
 800c4ca:	4651      	mov	r1, sl
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f001 fa58 	bl	800d984 <__lshift>
 800c4d4:	4631      	mov	r1, r6
 800c4d6:	4682      	mov	sl, r0
 800c4d8:	f001 fac0 	bl	800da5c <__mcmp>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	dc03      	bgt.n	800c4e8 <_dtoa_r+0xab0>
 800c4e0:	d1e1      	bne.n	800c4a6 <_dtoa_r+0xa6e>
 800c4e2:	f019 0f01 	tst.w	r9, #1
 800c4e6:	d0de      	beq.n	800c4a6 <_dtoa_r+0xa6e>
 800c4e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c4ec:	d1d8      	bne.n	800c4a0 <_dtoa_r+0xa68>
 800c4ee:	9a01      	ldr	r2, [sp, #4]
 800c4f0:	2339      	movs	r3, #57	; 0x39
 800c4f2:	7013      	strb	r3, [r2, #0]
 800c4f4:	462b      	mov	r3, r5
 800c4f6:	461d      	mov	r5, r3
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c4fe:	2a39      	cmp	r2, #57	; 0x39
 800c500:	d06c      	beq.n	800c5dc <_dtoa_r+0xba4>
 800c502:	3201      	adds	r2, #1
 800c504:	701a      	strb	r2, [r3, #0]
 800c506:	e747      	b.n	800c398 <_dtoa_r+0x960>
 800c508:	2a00      	cmp	r2, #0
 800c50a:	dd07      	ble.n	800c51c <_dtoa_r+0xae4>
 800c50c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c510:	d0ed      	beq.n	800c4ee <_dtoa_r+0xab6>
 800c512:	9a01      	ldr	r2, [sp, #4]
 800c514:	f109 0301 	add.w	r3, r9, #1
 800c518:	7013      	strb	r3, [r2, #0]
 800c51a:	e73d      	b.n	800c398 <_dtoa_r+0x960>
 800c51c:	9b04      	ldr	r3, [sp, #16]
 800c51e:	9a08      	ldr	r2, [sp, #32]
 800c520:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c524:	4293      	cmp	r3, r2
 800c526:	d043      	beq.n	800c5b0 <_dtoa_r+0xb78>
 800c528:	4651      	mov	r1, sl
 800c52a:	2300      	movs	r3, #0
 800c52c:	220a      	movs	r2, #10
 800c52e:	4620      	mov	r0, r4
 800c530:	f001 f87a 	bl	800d628 <__multadd>
 800c534:	45b8      	cmp	r8, r7
 800c536:	4682      	mov	sl, r0
 800c538:	f04f 0300 	mov.w	r3, #0
 800c53c:	f04f 020a 	mov.w	r2, #10
 800c540:	4641      	mov	r1, r8
 800c542:	4620      	mov	r0, r4
 800c544:	d107      	bne.n	800c556 <_dtoa_r+0xb1e>
 800c546:	f001 f86f 	bl	800d628 <__multadd>
 800c54a:	4680      	mov	r8, r0
 800c54c:	4607      	mov	r7, r0
 800c54e:	9b04      	ldr	r3, [sp, #16]
 800c550:	3301      	adds	r3, #1
 800c552:	9304      	str	r3, [sp, #16]
 800c554:	e775      	b.n	800c442 <_dtoa_r+0xa0a>
 800c556:	f001 f867 	bl	800d628 <__multadd>
 800c55a:	4639      	mov	r1, r7
 800c55c:	4680      	mov	r8, r0
 800c55e:	2300      	movs	r3, #0
 800c560:	220a      	movs	r2, #10
 800c562:	4620      	mov	r0, r4
 800c564:	f001 f860 	bl	800d628 <__multadd>
 800c568:	4607      	mov	r7, r0
 800c56a:	e7f0      	b.n	800c54e <_dtoa_r+0xb16>
 800c56c:	9b04      	ldr	r3, [sp, #16]
 800c56e:	9301      	str	r3, [sp, #4]
 800c570:	9d00      	ldr	r5, [sp, #0]
 800c572:	4631      	mov	r1, r6
 800c574:	4650      	mov	r0, sl
 800c576:	f7ff f9d5 	bl	800b924 <quorem>
 800c57a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c57e:	9b00      	ldr	r3, [sp, #0]
 800c580:	f805 9b01 	strb.w	r9, [r5], #1
 800c584:	1aea      	subs	r2, r5, r3
 800c586:	9b01      	ldr	r3, [sp, #4]
 800c588:	4293      	cmp	r3, r2
 800c58a:	dd07      	ble.n	800c59c <_dtoa_r+0xb64>
 800c58c:	4651      	mov	r1, sl
 800c58e:	2300      	movs	r3, #0
 800c590:	220a      	movs	r2, #10
 800c592:	4620      	mov	r0, r4
 800c594:	f001 f848 	bl	800d628 <__multadd>
 800c598:	4682      	mov	sl, r0
 800c59a:	e7ea      	b.n	800c572 <_dtoa_r+0xb3a>
 800c59c:	9b01      	ldr	r3, [sp, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	bfc8      	it	gt
 800c5a2:	461d      	movgt	r5, r3
 800c5a4:	9b00      	ldr	r3, [sp, #0]
 800c5a6:	bfd8      	it	le
 800c5a8:	2501      	movle	r5, #1
 800c5aa:	441d      	add	r5, r3
 800c5ac:	f04f 0800 	mov.w	r8, #0
 800c5b0:	4651      	mov	r1, sl
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	f001 f9e5 	bl	800d984 <__lshift>
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	4682      	mov	sl, r0
 800c5be:	f001 fa4d 	bl	800da5c <__mcmp>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	dc96      	bgt.n	800c4f4 <_dtoa_r+0xabc>
 800c5c6:	d102      	bne.n	800c5ce <_dtoa_r+0xb96>
 800c5c8:	f019 0f01 	tst.w	r9, #1
 800c5cc:	d192      	bne.n	800c4f4 <_dtoa_r+0xabc>
 800c5ce:	462b      	mov	r3, r5
 800c5d0:	461d      	mov	r5, r3
 800c5d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5d6:	2a30      	cmp	r2, #48	; 0x30
 800c5d8:	d0fa      	beq.n	800c5d0 <_dtoa_r+0xb98>
 800c5da:	e6dd      	b.n	800c398 <_dtoa_r+0x960>
 800c5dc:	9a00      	ldr	r2, [sp, #0]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d189      	bne.n	800c4f6 <_dtoa_r+0xabe>
 800c5e2:	f10b 0b01 	add.w	fp, fp, #1
 800c5e6:	2331      	movs	r3, #49	; 0x31
 800c5e8:	e796      	b.n	800c518 <_dtoa_r+0xae0>
 800c5ea:	4b0a      	ldr	r3, [pc, #40]	; (800c614 <_dtoa_r+0xbdc>)
 800c5ec:	f7ff ba99 	b.w	800bb22 <_dtoa_r+0xea>
 800c5f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f47f aa6d 	bne.w	800bad2 <_dtoa_r+0x9a>
 800c5f8:	4b07      	ldr	r3, [pc, #28]	; (800c618 <_dtoa_r+0xbe0>)
 800c5fa:	f7ff ba92 	b.w	800bb22 <_dtoa_r+0xea>
 800c5fe:	9b01      	ldr	r3, [sp, #4]
 800c600:	2b00      	cmp	r3, #0
 800c602:	dcb5      	bgt.n	800c570 <_dtoa_r+0xb38>
 800c604:	9b07      	ldr	r3, [sp, #28]
 800c606:	2b02      	cmp	r3, #2
 800c608:	f73f aeb1 	bgt.w	800c36e <_dtoa_r+0x936>
 800c60c:	e7b0      	b.n	800c570 <_dtoa_r+0xb38>
 800c60e:	bf00      	nop
 800c610:	08010bfe 	.word	0x08010bfe
 800c614:	08010c36 	.word	0x08010c36
 800c618:	08010b82 	.word	0x08010b82

0800c61c <_free_r>:
 800c61c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c61e:	2900      	cmp	r1, #0
 800c620:	d044      	beq.n	800c6ac <_free_r+0x90>
 800c622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c626:	9001      	str	r0, [sp, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f1a1 0404 	sub.w	r4, r1, #4
 800c62e:	bfb8      	it	lt
 800c630:	18e4      	addlt	r4, r4, r3
 800c632:	f000 ff8b 	bl	800d54c <__malloc_lock>
 800c636:	4a1e      	ldr	r2, [pc, #120]	; (800c6b0 <_free_r+0x94>)
 800c638:	9801      	ldr	r0, [sp, #4]
 800c63a:	6813      	ldr	r3, [r2, #0]
 800c63c:	b933      	cbnz	r3, 800c64c <_free_r+0x30>
 800c63e:	6063      	str	r3, [r4, #4]
 800c640:	6014      	str	r4, [r2, #0]
 800c642:	b003      	add	sp, #12
 800c644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c648:	f000 bf86 	b.w	800d558 <__malloc_unlock>
 800c64c:	42a3      	cmp	r3, r4
 800c64e:	d908      	bls.n	800c662 <_free_r+0x46>
 800c650:	6825      	ldr	r5, [r4, #0]
 800c652:	1961      	adds	r1, r4, r5
 800c654:	428b      	cmp	r3, r1
 800c656:	bf01      	itttt	eq
 800c658:	6819      	ldreq	r1, [r3, #0]
 800c65a:	685b      	ldreq	r3, [r3, #4]
 800c65c:	1949      	addeq	r1, r1, r5
 800c65e:	6021      	streq	r1, [r4, #0]
 800c660:	e7ed      	b.n	800c63e <_free_r+0x22>
 800c662:	461a      	mov	r2, r3
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	b10b      	cbz	r3, 800c66c <_free_r+0x50>
 800c668:	42a3      	cmp	r3, r4
 800c66a:	d9fa      	bls.n	800c662 <_free_r+0x46>
 800c66c:	6811      	ldr	r1, [r2, #0]
 800c66e:	1855      	adds	r5, r2, r1
 800c670:	42a5      	cmp	r5, r4
 800c672:	d10b      	bne.n	800c68c <_free_r+0x70>
 800c674:	6824      	ldr	r4, [r4, #0]
 800c676:	4421      	add	r1, r4
 800c678:	1854      	adds	r4, r2, r1
 800c67a:	42a3      	cmp	r3, r4
 800c67c:	6011      	str	r1, [r2, #0]
 800c67e:	d1e0      	bne.n	800c642 <_free_r+0x26>
 800c680:	681c      	ldr	r4, [r3, #0]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	6053      	str	r3, [r2, #4]
 800c686:	440c      	add	r4, r1
 800c688:	6014      	str	r4, [r2, #0]
 800c68a:	e7da      	b.n	800c642 <_free_r+0x26>
 800c68c:	d902      	bls.n	800c694 <_free_r+0x78>
 800c68e:	230c      	movs	r3, #12
 800c690:	6003      	str	r3, [r0, #0]
 800c692:	e7d6      	b.n	800c642 <_free_r+0x26>
 800c694:	6825      	ldr	r5, [r4, #0]
 800c696:	1961      	adds	r1, r4, r5
 800c698:	428b      	cmp	r3, r1
 800c69a:	bf04      	itt	eq
 800c69c:	6819      	ldreq	r1, [r3, #0]
 800c69e:	685b      	ldreq	r3, [r3, #4]
 800c6a0:	6063      	str	r3, [r4, #4]
 800c6a2:	bf04      	itt	eq
 800c6a4:	1949      	addeq	r1, r1, r5
 800c6a6:	6021      	streq	r1, [r4, #0]
 800c6a8:	6054      	str	r4, [r2, #4]
 800c6aa:	e7ca      	b.n	800c642 <_free_r+0x26>
 800c6ac:	b003      	add	sp, #12
 800c6ae:	bd30      	pop	{r4, r5, pc}
 800c6b0:	2000784c 	.word	0x2000784c

0800c6b4 <__ssputs_r>:
 800c6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b8:	688e      	ldr	r6, [r1, #8]
 800c6ba:	461f      	mov	r7, r3
 800c6bc:	42be      	cmp	r6, r7
 800c6be:	680b      	ldr	r3, [r1, #0]
 800c6c0:	4682      	mov	sl, r0
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	4690      	mov	r8, r2
 800c6c6:	d82c      	bhi.n	800c722 <__ssputs_r+0x6e>
 800c6c8:	898a      	ldrh	r2, [r1, #12]
 800c6ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6ce:	d026      	beq.n	800c71e <__ssputs_r+0x6a>
 800c6d0:	6965      	ldr	r5, [r4, #20]
 800c6d2:	6909      	ldr	r1, [r1, #16]
 800c6d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6d8:	eba3 0901 	sub.w	r9, r3, r1
 800c6dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6e0:	1c7b      	adds	r3, r7, #1
 800c6e2:	444b      	add	r3, r9
 800c6e4:	106d      	asrs	r5, r5, #1
 800c6e6:	429d      	cmp	r5, r3
 800c6e8:	bf38      	it	cc
 800c6ea:	461d      	movcc	r5, r3
 800c6ec:	0553      	lsls	r3, r2, #21
 800c6ee:	d527      	bpl.n	800c740 <__ssputs_r+0x8c>
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	f000 fc75 	bl	800cfe0 <_malloc_r>
 800c6f6:	4606      	mov	r6, r0
 800c6f8:	b360      	cbz	r0, 800c754 <__ssputs_r+0xa0>
 800c6fa:	6921      	ldr	r1, [r4, #16]
 800c6fc:	464a      	mov	r2, r9
 800c6fe:	f001 fd65 	bl	800e1cc <memcpy>
 800c702:	89a3      	ldrh	r3, [r4, #12]
 800c704:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c70c:	81a3      	strh	r3, [r4, #12]
 800c70e:	6126      	str	r6, [r4, #16]
 800c710:	6165      	str	r5, [r4, #20]
 800c712:	444e      	add	r6, r9
 800c714:	eba5 0509 	sub.w	r5, r5, r9
 800c718:	6026      	str	r6, [r4, #0]
 800c71a:	60a5      	str	r5, [r4, #8]
 800c71c:	463e      	mov	r6, r7
 800c71e:	42be      	cmp	r6, r7
 800c720:	d900      	bls.n	800c724 <__ssputs_r+0x70>
 800c722:	463e      	mov	r6, r7
 800c724:	6820      	ldr	r0, [r4, #0]
 800c726:	4632      	mov	r2, r6
 800c728:	4641      	mov	r1, r8
 800c72a:	f001 fd03 	bl	800e134 <memmove>
 800c72e:	68a3      	ldr	r3, [r4, #8]
 800c730:	1b9b      	subs	r3, r3, r6
 800c732:	60a3      	str	r3, [r4, #8]
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	4433      	add	r3, r6
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	2000      	movs	r0, #0
 800c73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c740:	462a      	mov	r2, r5
 800c742:	f001 fad7 	bl	800dcf4 <_realloc_r>
 800c746:	4606      	mov	r6, r0
 800c748:	2800      	cmp	r0, #0
 800c74a:	d1e0      	bne.n	800c70e <__ssputs_r+0x5a>
 800c74c:	6921      	ldr	r1, [r4, #16]
 800c74e:	4650      	mov	r0, sl
 800c750:	f7ff ff64 	bl	800c61c <_free_r>
 800c754:	230c      	movs	r3, #12
 800c756:	f8ca 3000 	str.w	r3, [sl]
 800c75a:	89a3      	ldrh	r3, [r4, #12]
 800c75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c760:	81a3      	strh	r3, [r4, #12]
 800c762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c766:	e7e9      	b.n	800c73c <__ssputs_r+0x88>

0800c768 <_svfiprintf_r>:
 800c768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c76c:	4698      	mov	r8, r3
 800c76e:	898b      	ldrh	r3, [r1, #12]
 800c770:	061b      	lsls	r3, r3, #24
 800c772:	b09d      	sub	sp, #116	; 0x74
 800c774:	4607      	mov	r7, r0
 800c776:	460d      	mov	r5, r1
 800c778:	4614      	mov	r4, r2
 800c77a:	d50e      	bpl.n	800c79a <_svfiprintf_r+0x32>
 800c77c:	690b      	ldr	r3, [r1, #16]
 800c77e:	b963      	cbnz	r3, 800c79a <_svfiprintf_r+0x32>
 800c780:	2140      	movs	r1, #64	; 0x40
 800c782:	f000 fc2d 	bl	800cfe0 <_malloc_r>
 800c786:	6028      	str	r0, [r5, #0]
 800c788:	6128      	str	r0, [r5, #16]
 800c78a:	b920      	cbnz	r0, 800c796 <_svfiprintf_r+0x2e>
 800c78c:	230c      	movs	r3, #12
 800c78e:	603b      	str	r3, [r7, #0]
 800c790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c794:	e0d0      	b.n	800c938 <_svfiprintf_r+0x1d0>
 800c796:	2340      	movs	r3, #64	; 0x40
 800c798:	616b      	str	r3, [r5, #20]
 800c79a:	2300      	movs	r3, #0
 800c79c:	9309      	str	r3, [sp, #36]	; 0x24
 800c79e:	2320      	movs	r3, #32
 800c7a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7a8:	2330      	movs	r3, #48	; 0x30
 800c7aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c950 <_svfiprintf_r+0x1e8>
 800c7ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7b2:	f04f 0901 	mov.w	r9, #1
 800c7b6:	4623      	mov	r3, r4
 800c7b8:	469a      	mov	sl, r3
 800c7ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7be:	b10a      	cbz	r2, 800c7c4 <_svfiprintf_r+0x5c>
 800c7c0:	2a25      	cmp	r2, #37	; 0x25
 800c7c2:	d1f9      	bne.n	800c7b8 <_svfiprintf_r+0x50>
 800c7c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c7c8:	d00b      	beq.n	800c7e2 <_svfiprintf_r+0x7a>
 800c7ca:	465b      	mov	r3, fp
 800c7cc:	4622      	mov	r2, r4
 800c7ce:	4629      	mov	r1, r5
 800c7d0:	4638      	mov	r0, r7
 800c7d2:	f7ff ff6f 	bl	800c6b4 <__ssputs_r>
 800c7d6:	3001      	adds	r0, #1
 800c7d8:	f000 80a9 	beq.w	800c92e <_svfiprintf_r+0x1c6>
 800c7dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7de:	445a      	add	r2, fp
 800c7e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f000 80a1 	beq.w	800c92e <_svfiprintf_r+0x1c6>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7f6:	f10a 0a01 	add.w	sl, sl, #1
 800c7fa:	9304      	str	r3, [sp, #16]
 800c7fc:	9307      	str	r3, [sp, #28]
 800c7fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c802:	931a      	str	r3, [sp, #104]	; 0x68
 800c804:	4654      	mov	r4, sl
 800c806:	2205      	movs	r2, #5
 800c808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c80c:	4850      	ldr	r0, [pc, #320]	; (800c950 <_svfiprintf_r+0x1e8>)
 800c80e:	f7f3 fcff 	bl	8000210 <memchr>
 800c812:	9a04      	ldr	r2, [sp, #16]
 800c814:	b9d8      	cbnz	r0, 800c84e <_svfiprintf_r+0xe6>
 800c816:	06d0      	lsls	r0, r2, #27
 800c818:	bf44      	itt	mi
 800c81a:	2320      	movmi	r3, #32
 800c81c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c820:	0711      	lsls	r1, r2, #28
 800c822:	bf44      	itt	mi
 800c824:	232b      	movmi	r3, #43	; 0x2b
 800c826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c82a:	f89a 3000 	ldrb.w	r3, [sl]
 800c82e:	2b2a      	cmp	r3, #42	; 0x2a
 800c830:	d015      	beq.n	800c85e <_svfiprintf_r+0xf6>
 800c832:	9a07      	ldr	r2, [sp, #28]
 800c834:	4654      	mov	r4, sl
 800c836:	2000      	movs	r0, #0
 800c838:	f04f 0c0a 	mov.w	ip, #10
 800c83c:	4621      	mov	r1, r4
 800c83e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c842:	3b30      	subs	r3, #48	; 0x30
 800c844:	2b09      	cmp	r3, #9
 800c846:	d94d      	bls.n	800c8e4 <_svfiprintf_r+0x17c>
 800c848:	b1b0      	cbz	r0, 800c878 <_svfiprintf_r+0x110>
 800c84a:	9207      	str	r2, [sp, #28]
 800c84c:	e014      	b.n	800c878 <_svfiprintf_r+0x110>
 800c84e:	eba0 0308 	sub.w	r3, r0, r8
 800c852:	fa09 f303 	lsl.w	r3, r9, r3
 800c856:	4313      	orrs	r3, r2
 800c858:	9304      	str	r3, [sp, #16]
 800c85a:	46a2      	mov	sl, r4
 800c85c:	e7d2      	b.n	800c804 <_svfiprintf_r+0x9c>
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	1d19      	adds	r1, r3, #4
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	9103      	str	r1, [sp, #12]
 800c866:	2b00      	cmp	r3, #0
 800c868:	bfbb      	ittet	lt
 800c86a:	425b      	neglt	r3, r3
 800c86c:	f042 0202 	orrlt.w	r2, r2, #2
 800c870:	9307      	strge	r3, [sp, #28]
 800c872:	9307      	strlt	r3, [sp, #28]
 800c874:	bfb8      	it	lt
 800c876:	9204      	strlt	r2, [sp, #16]
 800c878:	7823      	ldrb	r3, [r4, #0]
 800c87a:	2b2e      	cmp	r3, #46	; 0x2e
 800c87c:	d10c      	bne.n	800c898 <_svfiprintf_r+0x130>
 800c87e:	7863      	ldrb	r3, [r4, #1]
 800c880:	2b2a      	cmp	r3, #42	; 0x2a
 800c882:	d134      	bne.n	800c8ee <_svfiprintf_r+0x186>
 800c884:	9b03      	ldr	r3, [sp, #12]
 800c886:	1d1a      	adds	r2, r3, #4
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	9203      	str	r2, [sp, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	bfb8      	it	lt
 800c890:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c894:	3402      	adds	r4, #2
 800c896:	9305      	str	r3, [sp, #20]
 800c898:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c960 <_svfiprintf_r+0x1f8>
 800c89c:	7821      	ldrb	r1, [r4, #0]
 800c89e:	2203      	movs	r2, #3
 800c8a0:	4650      	mov	r0, sl
 800c8a2:	f7f3 fcb5 	bl	8000210 <memchr>
 800c8a6:	b138      	cbz	r0, 800c8b8 <_svfiprintf_r+0x150>
 800c8a8:	9b04      	ldr	r3, [sp, #16]
 800c8aa:	eba0 000a 	sub.w	r0, r0, sl
 800c8ae:	2240      	movs	r2, #64	; 0x40
 800c8b0:	4082      	lsls	r2, r0
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	3401      	adds	r4, #1
 800c8b6:	9304      	str	r3, [sp, #16]
 800c8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8bc:	4825      	ldr	r0, [pc, #148]	; (800c954 <_svfiprintf_r+0x1ec>)
 800c8be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8c2:	2206      	movs	r2, #6
 800c8c4:	f7f3 fca4 	bl	8000210 <memchr>
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	d038      	beq.n	800c93e <_svfiprintf_r+0x1d6>
 800c8cc:	4b22      	ldr	r3, [pc, #136]	; (800c958 <_svfiprintf_r+0x1f0>)
 800c8ce:	bb1b      	cbnz	r3, 800c918 <_svfiprintf_r+0x1b0>
 800c8d0:	9b03      	ldr	r3, [sp, #12]
 800c8d2:	3307      	adds	r3, #7
 800c8d4:	f023 0307 	bic.w	r3, r3, #7
 800c8d8:	3308      	adds	r3, #8
 800c8da:	9303      	str	r3, [sp, #12]
 800c8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8de:	4433      	add	r3, r6
 800c8e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8e2:	e768      	b.n	800c7b6 <_svfiprintf_r+0x4e>
 800c8e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8e8:	460c      	mov	r4, r1
 800c8ea:	2001      	movs	r0, #1
 800c8ec:	e7a6      	b.n	800c83c <_svfiprintf_r+0xd4>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	3401      	adds	r4, #1
 800c8f2:	9305      	str	r3, [sp, #20]
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	f04f 0c0a 	mov.w	ip, #10
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c900:	3a30      	subs	r2, #48	; 0x30
 800c902:	2a09      	cmp	r2, #9
 800c904:	d903      	bls.n	800c90e <_svfiprintf_r+0x1a6>
 800c906:	2b00      	cmp	r3, #0
 800c908:	d0c6      	beq.n	800c898 <_svfiprintf_r+0x130>
 800c90a:	9105      	str	r1, [sp, #20]
 800c90c:	e7c4      	b.n	800c898 <_svfiprintf_r+0x130>
 800c90e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c912:	4604      	mov	r4, r0
 800c914:	2301      	movs	r3, #1
 800c916:	e7f0      	b.n	800c8fa <_svfiprintf_r+0x192>
 800c918:	ab03      	add	r3, sp, #12
 800c91a:	9300      	str	r3, [sp, #0]
 800c91c:	462a      	mov	r2, r5
 800c91e:	4b0f      	ldr	r3, [pc, #60]	; (800c95c <_svfiprintf_r+0x1f4>)
 800c920:	a904      	add	r1, sp, #16
 800c922:	4638      	mov	r0, r7
 800c924:	f7fe f9c6 	bl	800acb4 <_printf_float>
 800c928:	1c42      	adds	r2, r0, #1
 800c92a:	4606      	mov	r6, r0
 800c92c:	d1d6      	bne.n	800c8dc <_svfiprintf_r+0x174>
 800c92e:	89ab      	ldrh	r3, [r5, #12]
 800c930:	065b      	lsls	r3, r3, #25
 800c932:	f53f af2d 	bmi.w	800c790 <_svfiprintf_r+0x28>
 800c936:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c938:	b01d      	add	sp, #116	; 0x74
 800c93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93e:	ab03      	add	r3, sp, #12
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	462a      	mov	r2, r5
 800c944:	4b05      	ldr	r3, [pc, #20]	; (800c95c <_svfiprintf_r+0x1f4>)
 800c946:	a904      	add	r1, sp, #16
 800c948:	4638      	mov	r0, r7
 800c94a:	f7fe fc57 	bl	800b1fc <_printf_i>
 800c94e:	e7eb      	b.n	800c928 <_svfiprintf_r+0x1c0>
 800c950:	08010c0f 	.word	0x08010c0f
 800c954:	08010c19 	.word	0x08010c19
 800c958:	0800acb5 	.word	0x0800acb5
 800c95c:	0800c6b5 	.word	0x0800c6b5
 800c960:	08010c15 	.word	0x08010c15

0800c964 <_sungetc_r>:
 800c964:	b538      	push	{r3, r4, r5, lr}
 800c966:	1c4b      	adds	r3, r1, #1
 800c968:	4614      	mov	r4, r2
 800c96a:	d103      	bne.n	800c974 <_sungetc_r+0x10>
 800c96c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c970:	4628      	mov	r0, r5
 800c972:	bd38      	pop	{r3, r4, r5, pc}
 800c974:	8993      	ldrh	r3, [r2, #12]
 800c976:	f023 0320 	bic.w	r3, r3, #32
 800c97a:	8193      	strh	r3, [r2, #12]
 800c97c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c97e:	6852      	ldr	r2, [r2, #4]
 800c980:	b2cd      	uxtb	r5, r1
 800c982:	b18b      	cbz	r3, 800c9a8 <_sungetc_r+0x44>
 800c984:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c986:	4293      	cmp	r3, r2
 800c988:	dd08      	ble.n	800c99c <_sungetc_r+0x38>
 800c98a:	6823      	ldr	r3, [r4, #0]
 800c98c:	1e5a      	subs	r2, r3, #1
 800c98e:	6022      	str	r2, [r4, #0]
 800c990:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c994:	6863      	ldr	r3, [r4, #4]
 800c996:	3301      	adds	r3, #1
 800c998:	6063      	str	r3, [r4, #4]
 800c99a:	e7e9      	b.n	800c970 <_sungetc_r+0xc>
 800c99c:	4621      	mov	r1, r4
 800c99e:	f001 f96f 	bl	800dc80 <__submore>
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	d0f1      	beq.n	800c98a <_sungetc_r+0x26>
 800c9a6:	e7e1      	b.n	800c96c <_sungetc_r+0x8>
 800c9a8:	6921      	ldr	r1, [r4, #16]
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	b151      	cbz	r1, 800c9c4 <_sungetc_r+0x60>
 800c9ae:	4299      	cmp	r1, r3
 800c9b0:	d208      	bcs.n	800c9c4 <_sungetc_r+0x60>
 800c9b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c9b6:	42a9      	cmp	r1, r5
 800c9b8:	d104      	bne.n	800c9c4 <_sungetc_r+0x60>
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	3201      	adds	r2, #1
 800c9be:	6023      	str	r3, [r4, #0]
 800c9c0:	6062      	str	r2, [r4, #4]
 800c9c2:	e7d5      	b.n	800c970 <_sungetc_r+0xc>
 800c9c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c9c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9cc:	6363      	str	r3, [r4, #52]	; 0x34
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	63a3      	str	r3, [r4, #56]	; 0x38
 800c9d2:	4623      	mov	r3, r4
 800c9d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c9d8:	6023      	str	r3, [r4, #0]
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e7dc      	b.n	800c998 <_sungetc_r+0x34>

0800c9de <__ssrefill_r>:
 800c9de:	b510      	push	{r4, lr}
 800c9e0:	460c      	mov	r4, r1
 800c9e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c9e4:	b169      	cbz	r1, 800ca02 <__ssrefill_r+0x24>
 800c9e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9ea:	4299      	cmp	r1, r3
 800c9ec:	d001      	beq.n	800c9f2 <__ssrefill_r+0x14>
 800c9ee:	f7ff fe15 	bl	800c61c <_free_r>
 800c9f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9f4:	6063      	str	r3, [r4, #4]
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	6360      	str	r0, [r4, #52]	; 0x34
 800c9fa:	b113      	cbz	r3, 800ca02 <__ssrefill_r+0x24>
 800c9fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c9fe:	6023      	str	r3, [r4, #0]
 800ca00:	bd10      	pop	{r4, pc}
 800ca02:	6923      	ldr	r3, [r4, #16]
 800ca04:	6023      	str	r3, [r4, #0]
 800ca06:	2300      	movs	r3, #0
 800ca08:	6063      	str	r3, [r4, #4]
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	f043 0320 	orr.w	r3, r3, #32
 800ca10:	81a3      	strh	r3, [r4, #12]
 800ca12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca16:	e7f3      	b.n	800ca00 <__ssrefill_r+0x22>

0800ca18 <__ssvfiscanf_r>:
 800ca18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ca22:	2100      	movs	r1, #0
 800ca24:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ca28:	49a6      	ldr	r1, [pc, #664]	; (800ccc4 <__ssvfiscanf_r+0x2ac>)
 800ca2a:	91a0      	str	r1, [sp, #640]	; 0x280
 800ca2c:	f10d 0804 	add.w	r8, sp, #4
 800ca30:	49a5      	ldr	r1, [pc, #660]	; (800ccc8 <__ssvfiscanf_r+0x2b0>)
 800ca32:	4fa6      	ldr	r7, [pc, #664]	; (800cccc <__ssvfiscanf_r+0x2b4>)
 800ca34:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ccd0 <__ssvfiscanf_r+0x2b8>
 800ca38:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ca3c:	4606      	mov	r6, r0
 800ca3e:	91a1      	str	r1, [sp, #644]	; 0x284
 800ca40:	9300      	str	r3, [sp, #0]
 800ca42:	7813      	ldrb	r3, [r2, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f000 815a 	beq.w	800ccfe <__ssvfiscanf_r+0x2e6>
 800ca4a:	5cf9      	ldrb	r1, [r7, r3]
 800ca4c:	f011 0108 	ands.w	r1, r1, #8
 800ca50:	f102 0501 	add.w	r5, r2, #1
 800ca54:	d019      	beq.n	800ca8a <__ssvfiscanf_r+0x72>
 800ca56:	6863      	ldr	r3, [r4, #4]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	dd0f      	ble.n	800ca7c <__ssvfiscanf_r+0x64>
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	781a      	ldrb	r2, [r3, #0]
 800ca60:	5cba      	ldrb	r2, [r7, r2]
 800ca62:	0712      	lsls	r2, r2, #28
 800ca64:	d401      	bmi.n	800ca6a <__ssvfiscanf_r+0x52>
 800ca66:	462a      	mov	r2, r5
 800ca68:	e7eb      	b.n	800ca42 <__ssvfiscanf_r+0x2a>
 800ca6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ca6c:	3201      	adds	r2, #1
 800ca6e:	9245      	str	r2, [sp, #276]	; 0x114
 800ca70:	6862      	ldr	r2, [r4, #4]
 800ca72:	3301      	adds	r3, #1
 800ca74:	3a01      	subs	r2, #1
 800ca76:	6062      	str	r2, [r4, #4]
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	e7ec      	b.n	800ca56 <__ssvfiscanf_r+0x3e>
 800ca7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4630      	mov	r0, r6
 800ca82:	4798      	blx	r3
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d0e9      	beq.n	800ca5c <__ssvfiscanf_r+0x44>
 800ca88:	e7ed      	b.n	800ca66 <__ssvfiscanf_r+0x4e>
 800ca8a:	2b25      	cmp	r3, #37	; 0x25
 800ca8c:	d012      	beq.n	800cab4 <__ssvfiscanf_r+0x9c>
 800ca8e:	469a      	mov	sl, r3
 800ca90:	6863      	ldr	r3, [r4, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f340 8091 	ble.w	800cbba <__ssvfiscanf_r+0x1a2>
 800ca98:	6822      	ldr	r2, [r4, #0]
 800ca9a:	7813      	ldrb	r3, [r2, #0]
 800ca9c:	4553      	cmp	r3, sl
 800ca9e:	f040 812e 	bne.w	800ccfe <__ssvfiscanf_r+0x2e6>
 800caa2:	6863      	ldr	r3, [r4, #4]
 800caa4:	3b01      	subs	r3, #1
 800caa6:	6063      	str	r3, [r4, #4]
 800caa8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800caaa:	3201      	adds	r2, #1
 800caac:	3301      	adds	r3, #1
 800caae:	6022      	str	r2, [r4, #0]
 800cab0:	9345      	str	r3, [sp, #276]	; 0x114
 800cab2:	e7d8      	b.n	800ca66 <__ssvfiscanf_r+0x4e>
 800cab4:	9141      	str	r1, [sp, #260]	; 0x104
 800cab6:	9143      	str	r1, [sp, #268]	; 0x10c
 800cab8:	7853      	ldrb	r3, [r2, #1]
 800caba:	2b2a      	cmp	r3, #42	; 0x2a
 800cabc:	bf02      	ittt	eq
 800cabe:	2310      	moveq	r3, #16
 800cac0:	1c95      	addeq	r5, r2, #2
 800cac2:	9341      	streq	r3, [sp, #260]	; 0x104
 800cac4:	220a      	movs	r2, #10
 800cac6:	46aa      	mov	sl, r5
 800cac8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cacc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cad0:	2b09      	cmp	r3, #9
 800cad2:	d91c      	bls.n	800cb0e <__ssvfiscanf_r+0xf6>
 800cad4:	487e      	ldr	r0, [pc, #504]	; (800ccd0 <__ssvfiscanf_r+0x2b8>)
 800cad6:	2203      	movs	r2, #3
 800cad8:	f7f3 fb9a 	bl	8000210 <memchr>
 800cadc:	b138      	cbz	r0, 800caee <__ssvfiscanf_r+0xd6>
 800cade:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cae0:	eba0 0009 	sub.w	r0, r0, r9
 800cae4:	2301      	movs	r3, #1
 800cae6:	4083      	lsls	r3, r0
 800cae8:	4313      	orrs	r3, r2
 800caea:	9341      	str	r3, [sp, #260]	; 0x104
 800caec:	4655      	mov	r5, sl
 800caee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800caf2:	2b78      	cmp	r3, #120	; 0x78
 800caf4:	d806      	bhi.n	800cb04 <__ssvfiscanf_r+0xec>
 800caf6:	2b57      	cmp	r3, #87	; 0x57
 800caf8:	d810      	bhi.n	800cb1c <__ssvfiscanf_r+0x104>
 800cafa:	2b25      	cmp	r3, #37	; 0x25
 800cafc:	d0c7      	beq.n	800ca8e <__ssvfiscanf_r+0x76>
 800cafe:	d857      	bhi.n	800cbb0 <__ssvfiscanf_r+0x198>
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d065      	beq.n	800cbd0 <__ssvfiscanf_r+0x1b8>
 800cb04:	2303      	movs	r3, #3
 800cb06:	9347      	str	r3, [sp, #284]	; 0x11c
 800cb08:	230a      	movs	r3, #10
 800cb0a:	9342      	str	r3, [sp, #264]	; 0x108
 800cb0c:	e076      	b.n	800cbfc <__ssvfiscanf_r+0x1e4>
 800cb0e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cb10:	fb02 1103 	mla	r1, r2, r3, r1
 800cb14:	3930      	subs	r1, #48	; 0x30
 800cb16:	9143      	str	r1, [sp, #268]	; 0x10c
 800cb18:	4655      	mov	r5, sl
 800cb1a:	e7d4      	b.n	800cac6 <__ssvfiscanf_r+0xae>
 800cb1c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800cb20:	2a20      	cmp	r2, #32
 800cb22:	d8ef      	bhi.n	800cb04 <__ssvfiscanf_r+0xec>
 800cb24:	a101      	add	r1, pc, #4	; (adr r1, 800cb2c <__ssvfiscanf_r+0x114>)
 800cb26:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb2a:	bf00      	nop
 800cb2c:	0800cbdf 	.word	0x0800cbdf
 800cb30:	0800cb05 	.word	0x0800cb05
 800cb34:	0800cb05 	.word	0x0800cb05
 800cb38:	0800cc3d 	.word	0x0800cc3d
 800cb3c:	0800cb05 	.word	0x0800cb05
 800cb40:	0800cb05 	.word	0x0800cb05
 800cb44:	0800cb05 	.word	0x0800cb05
 800cb48:	0800cb05 	.word	0x0800cb05
 800cb4c:	0800cb05 	.word	0x0800cb05
 800cb50:	0800cb05 	.word	0x0800cb05
 800cb54:	0800cb05 	.word	0x0800cb05
 800cb58:	0800cc53 	.word	0x0800cc53
 800cb5c:	0800cc39 	.word	0x0800cc39
 800cb60:	0800cbb7 	.word	0x0800cbb7
 800cb64:	0800cbb7 	.word	0x0800cbb7
 800cb68:	0800cbb7 	.word	0x0800cbb7
 800cb6c:	0800cb05 	.word	0x0800cb05
 800cb70:	0800cbf5 	.word	0x0800cbf5
 800cb74:	0800cb05 	.word	0x0800cb05
 800cb78:	0800cb05 	.word	0x0800cb05
 800cb7c:	0800cb05 	.word	0x0800cb05
 800cb80:	0800cb05 	.word	0x0800cb05
 800cb84:	0800cc63 	.word	0x0800cc63
 800cb88:	0800cc31 	.word	0x0800cc31
 800cb8c:	0800cbd7 	.word	0x0800cbd7
 800cb90:	0800cb05 	.word	0x0800cb05
 800cb94:	0800cb05 	.word	0x0800cb05
 800cb98:	0800cc5f 	.word	0x0800cc5f
 800cb9c:	0800cb05 	.word	0x0800cb05
 800cba0:	0800cc39 	.word	0x0800cc39
 800cba4:	0800cb05 	.word	0x0800cb05
 800cba8:	0800cb05 	.word	0x0800cb05
 800cbac:	0800cbdf 	.word	0x0800cbdf
 800cbb0:	3b45      	subs	r3, #69	; 0x45
 800cbb2:	2b02      	cmp	r3, #2
 800cbb4:	d8a6      	bhi.n	800cb04 <__ssvfiscanf_r+0xec>
 800cbb6:	2305      	movs	r3, #5
 800cbb8:	e01f      	b.n	800cbfa <__ssvfiscanf_r+0x1e2>
 800cbba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cbbc:	4621      	mov	r1, r4
 800cbbe:	4630      	mov	r0, r6
 800cbc0:	4798      	blx	r3
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	f43f af68 	beq.w	800ca98 <__ssvfiscanf_r+0x80>
 800cbc8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	f040 808d 	bne.w	800ccea <__ssvfiscanf_r+0x2d2>
 800cbd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbd4:	e08f      	b.n	800ccf6 <__ssvfiscanf_r+0x2de>
 800cbd6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cbd8:	f042 0220 	orr.w	r2, r2, #32
 800cbdc:	9241      	str	r2, [sp, #260]	; 0x104
 800cbde:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cbe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbe4:	9241      	str	r2, [sp, #260]	; 0x104
 800cbe6:	2210      	movs	r2, #16
 800cbe8:	2b6f      	cmp	r3, #111	; 0x6f
 800cbea:	9242      	str	r2, [sp, #264]	; 0x108
 800cbec:	bf34      	ite	cc
 800cbee:	2303      	movcc	r3, #3
 800cbf0:	2304      	movcs	r3, #4
 800cbf2:	e002      	b.n	800cbfa <__ssvfiscanf_r+0x1e2>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	9342      	str	r3, [sp, #264]	; 0x108
 800cbf8:	2303      	movs	r3, #3
 800cbfa:	9347      	str	r3, [sp, #284]	; 0x11c
 800cbfc:	6863      	ldr	r3, [r4, #4]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	dd3d      	ble.n	800cc7e <__ssvfiscanf_r+0x266>
 800cc02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cc04:	0659      	lsls	r1, r3, #25
 800cc06:	d404      	bmi.n	800cc12 <__ssvfiscanf_r+0x1fa>
 800cc08:	6823      	ldr	r3, [r4, #0]
 800cc0a:	781a      	ldrb	r2, [r3, #0]
 800cc0c:	5cba      	ldrb	r2, [r7, r2]
 800cc0e:	0712      	lsls	r2, r2, #28
 800cc10:	d43c      	bmi.n	800cc8c <__ssvfiscanf_r+0x274>
 800cc12:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	dc4b      	bgt.n	800ccb0 <__ssvfiscanf_r+0x298>
 800cc18:	466b      	mov	r3, sp
 800cc1a:	4622      	mov	r2, r4
 800cc1c:	a941      	add	r1, sp, #260	; 0x104
 800cc1e:	4630      	mov	r0, r6
 800cc20:	f000 fa5e 	bl	800d0e0 <_scanf_chars>
 800cc24:	2801      	cmp	r0, #1
 800cc26:	d06a      	beq.n	800ccfe <__ssvfiscanf_r+0x2e6>
 800cc28:	2802      	cmp	r0, #2
 800cc2a:	f47f af1c 	bne.w	800ca66 <__ssvfiscanf_r+0x4e>
 800cc2e:	e7cb      	b.n	800cbc8 <__ssvfiscanf_r+0x1b0>
 800cc30:	2308      	movs	r3, #8
 800cc32:	9342      	str	r3, [sp, #264]	; 0x108
 800cc34:	2304      	movs	r3, #4
 800cc36:	e7e0      	b.n	800cbfa <__ssvfiscanf_r+0x1e2>
 800cc38:	220a      	movs	r2, #10
 800cc3a:	e7d5      	b.n	800cbe8 <__ssvfiscanf_r+0x1d0>
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	4640      	mov	r0, r8
 800cc40:	f000 fb9c 	bl	800d37c <__sccl>
 800cc44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cc46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc4a:	9341      	str	r3, [sp, #260]	; 0x104
 800cc4c:	4605      	mov	r5, r0
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e7d3      	b.n	800cbfa <__ssvfiscanf_r+0x1e2>
 800cc52:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cc54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc58:	9341      	str	r3, [sp, #260]	; 0x104
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	e7cd      	b.n	800cbfa <__ssvfiscanf_r+0x1e2>
 800cc5e:	2302      	movs	r3, #2
 800cc60:	e7cb      	b.n	800cbfa <__ssvfiscanf_r+0x1e2>
 800cc62:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cc64:	06c3      	lsls	r3, r0, #27
 800cc66:	f53f aefe 	bmi.w	800ca66 <__ssvfiscanf_r+0x4e>
 800cc6a:	9b00      	ldr	r3, [sp, #0]
 800cc6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cc6e:	1d19      	adds	r1, r3, #4
 800cc70:	9100      	str	r1, [sp, #0]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	07c0      	lsls	r0, r0, #31
 800cc76:	bf4c      	ite	mi
 800cc78:	801a      	strhmi	r2, [r3, #0]
 800cc7a:	601a      	strpl	r2, [r3, #0]
 800cc7c:	e6f3      	b.n	800ca66 <__ssvfiscanf_r+0x4e>
 800cc7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cc80:	4621      	mov	r1, r4
 800cc82:	4630      	mov	r0, r6
 800cc84:	4798      	blx	r3
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d0bb      	beq.n	800cc02 <__ssvfiscanf_r+0x1ea>
 800cc8a:	e79d      	b.n	800cbc8 <__ssvfiscanf_r+0x1b0>
 800cc8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cc8e:	3201      	adds	r2, #1
 800cc90:	9245      	str	r2, [sp, #276]	; 0x114
 800cc92:	6862      	ldr	r2, [r4, #4]
 800cc94:	3a01      	subs	r2, #1
 800cc96:	2a00      	cmp	r2, #0
 800cc98:	6062      	str	r2, [r4, #4]
 800cc9a:	dd02      	ble.n	800cca2 <__ssvfiscanf_r+0x28a>
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	6023      	str	r3, [r4, #0]
 800cca0:	e7b2      	b.n	800cc08 <__ssvfiscanf_r+0x1f0>
 800cca2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cca4:	4621      	mov	r1, r4
 800cca6:	4630      	mov	r0, r6
 800cca8:	4798      	blx	r3
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d0ac      	beq.n	800cc08 <__ssvfiscanf_r+0x1f0>
 800ccae:	e78b      	b.n	800cbc8 <__ssvfiscanf_r+0x1b0>
 800ccb0:	2b04      	cmp	r3, #4
 800ccb2:	dc0f      	bgt.n	800ccd4 <__ssvfiscanf_r+0x2bc>
 800ccb4:	466b      	mov	r3, sp
 800ccb6:	4622      	mov	r2, r4
 800ccb8:	a941      	add	r1, sp, #260	; 0x104
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f000 fa6a 	bl	800d194 <_scanf_i>
 800ccc0:	e7b0      	b.n	800cc24 <__ssvfiscanf_r+0x20c>
 800ccc2:	bf00      	nop
 800ccc4:	0800c965 	.word	0x0800c965
 800ccc8:	0800c9df 	.word	0x0800c9df
 800cccc:	08010d9f 	.word	0x08010d9f
 800ccd0:	08010c15 	.word	0x08010c15
 800ccd4:	4b0b      	ldr	r3, [pc, #44]	; (800cd04 <__ssvfiscanf_r+0x2ec>)
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f43f aec5 	beq.w	800ca66 <__ssvfiscanf_r+0x4e>
 800ccdc:	466b      	mov	r3, sp
 800ccde:	4622      	mov	r2, r4
 800cce0:	a941      	add	r1, sp, #260	; 0x104
 800cce2:	4630      	mov	r0, r6
 800cce4:	f3af 8000 	nop.w
 800cce8:	e79c      	b.n	800cc24 <__ssvfiscanf_r+0x20c>
 800ccea:	89a3      	ldrh	r3, [r4, #12]
 800ccec:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ccf0:	bf18      	it	ne
 800ccf2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800ccf6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ccfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccfe:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cd00:	e7f9      	b.n	800ccf6 <__ssvfiscanf_r+0x2de>
 800cd02:	bf00      	nop
 800cd04:	00000000 	.word	0x00000000

0800cd08 <__sfputc_r>:
 800cd08:	6893      	ldr	r3, [r2, #8]
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	b410      	push	{r4}
 800cd10:	6093      	str	r3, [r2, #8]
 800cd12:	da08      	bge.n	800cd26 <__sfputc_r+0x1e>
 800cd14:	6994      	ldr	r4, [r2, #24]
 800cd16:	42a3      	cmp	r3, r4
 800cd18:	db01      	blt.n	800cd1e <__sfputc_r+0x16>
 800cd1a:	290a      	cmp	r1, #10
 800cd1c:	d103      	bne.n	800cd26 <__sfputc_r+0x1e>
 800cd1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd22:	f001 b90f 	b.w	800df44 <__swbuf_r>
 800cd26:	6813      	ldr	r3, [r2, #0]
 800cd28:	1c58      	adds	r0, r3, #1
 800cd2a:	6010      	str	r0, [r2, #0]
 800cd2c:	7019      	strb	r1, [r3, #0]
 800cd2e:	4608      	mov	r0, r1
 800cd30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <__sfputs_r>:
 800cd36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd38:	4606      	mov	r6, r0
 800cd3a:	460f      	mov	r7, r1
 800cd3c:	4614      	mov	r4, r2
 800cd3e:	18d5      	adds	r5, r2, r3
 800cd40:	42ac      	cmp	r4, r5
 800cd42:	d101      	bne.n	800cd48 <__sfputs_r+0x12>
 800cd44:	2000      	movs	r0, #0
 800cd46:	e007      	b.n	800cd58 <__sfputs_r+0x22>
 800cd48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd4c:	463a      	mov	r2, r7
 800cd4e:	4630      	mov	r0, r6
 800cd50:	f7ff ffda 	bl	800cd08 <__sfputc_r>
 800cd54:	1c43      	adds	r3, r0, #1
 800cd56:	d1f3      	bne.n	800cd40 <__sfputs_r+0xa>
 800cd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd5c <_vfiprintf_r>:
 800cd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd60:	460d      	mov	r5, r1
 800cd62:	b09d      	sub	sp, #116	; 0x74
 800cd64:	4614      	mov	r4, r2
 800cd66:	4698      	mov	r8, r3
 800cd68:	4606      	mov	r6, r0
 800cd6a:	b118      	cbz	r0, 800cd74 <_vfiprintf_r+0x18>
 800cd6c:	6a03      	ldr	r3, [r0, #32]
 800cd6e:	b90b      	cbnz	r3, 800cd74 <_vfiprintf_r+0x18>
 800cd70:	f7fe fcb8 	bl	800b6e4 <__sinit>
 800cd74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd76:	07d9      	lsls	r1, r3, #31
 800cd78:	d405      	bmi.n	800cd86 <_vfiprintf_r+0x2a>
 800cd7a:	89ab      	ldrh	r3, [r5, #12]
 800cd7c:	059a      	lsls	r2, r3, #22
 800cd7e:	d402      	bmi.n	800cd86 <_vfiprintf_r+0x2a>
 800cd80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd82:	f7fe fdae 	bl	800b8e2 <__retarget_lock_acquire_recursive>
 800cd86:	89ab      	ldrh	r3, [r5, #12]
 800cd88:	071b      	lsls	r3, r3, #28
 800cd8a:	d501      	bpl.n	800cd90 <_vfiprintf_r+0x34>
 800cd8c:	692b      	ldr	r3, [r5, #16]
 800cd8e:	b99b      	cbnz	r3, 800cdb8 <_vfiprintf_r+0x5c>
 800cd90:	4629      	mov	r1, r5
 800cd92:	4630      	mov	r0, r6
 800cd94:	f001 f914 	bl	800dfc0 <__swsetup_r>
 800cd98:	b170      	cbz	r0, 800cdb8 <_vfiprintf_r+0x5c>
 800cd9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd9c:	07dc      	lsls	r4, r3, #31
 800cd9e:	d504      	bpl.n	800cdaa <_vfiprintf_r+0x4e>
 800cda0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cda4:	b01d      	add	sp, #116	; 0x74
 800cda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdaa:	89ab      	ldrh	r3, [r5, #12]
 800cdac:	0598      	lsls	r0, r3, #22
 800cdae:	d4f7      	bmi.n	800cda0 <_vfiprintf_r+0x44>
 800cdb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdb2:	f7fe fd97 	bl	800b8e4 <__retarget_lock_release_recursive>
 800cdb6:	e7f3      	b.n	800cda0 <_vfiprintf_r+0x44>
 800cdb8:	2300      	movs	r3, #0
 800cdba:	9309      	str	r3, [sp, #36]	; 0x24
 800cdbc:	2320      	movs	r3, #32
 800cdbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdc6:	2330      	movs	r3, #48	; 0x30
 800cdc8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cf7c <_vfiprintf_r+0x220>
 800cdcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdd0:	f04f 0901 	mov.w	r9, #1
 800cdd4:	4623      	mov	r3, r4
 800cdd6:	469a      	mov	sl, r3
 800cdd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cddc:	b10a      	cbz	r2, 800cde2 <_vfiprintf_r+0x86>
 800cdde:	2a25      	cmp	r2, #37	; 0x25
 800cde0:	d1f9      	bne.n	800cdd6 <_vfiprintf_r+0x7a>
 800cde2:	ebba 0b04 	subs.w	fp, sl, r4
 800cde6:	d00b      	beq.n	800ce00 <_vfiprintf_r+0xa4>
 800cde8:	465b      	mov	r3, fp
 800cdea:	4622      	mov	r2, r4
 800cdec:	4629      	mov	r1, r5
 800cdee:	4630      	mov	r0, r6
 800cdf0:	f7ff ffa1 	bl	800cd36 <__sfputs_r>
 800cdf4:	3001      	adds	r0, #1
 800cdf6:	f000 80a9 	beq.w	800cf4c <_vfiprintf_r+0x1f0>
 800cdfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdfc:	445a      	add	r2, fp
 800cdfe:	9209      	str	r2, [sp, #36]	; 0x24
 800ce00:	f89a 3000 	ldrb.w	r3, [sl]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f000 80a1 	beq.w	800cf4c <_vfiprintf_r+0x1f0>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce14:	f10a 0a01 	add.w	sl, sl, #1
 800ce18:	9304      	str	r3, [sp, #16]
 800ce1a:	9307      	str	r3, [sp, #28]
 800ce1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce20:	931a      	str	r3, [sp, #104]	; 0x68
 800ce22:	4654      	mov	r4, sl
 800ce24:	2205      	movs	r2, #5
 800ce26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce2a:	4854      	ldr	r0, [pc, #336]	; (800cf7c <_vfiprintf_r+0x220>)
 800ce2c:	f7f3 f9f0 	bl	8000210 <memchr>
 800ce30:	9a04      	ldr	r2, [sp, #16]
 800ce32:	b9d8      	cbnz	r0, 800ce6c <_vfiprintf_r+0x110>
 800ce34:	06d1      	lsls	r1, r2, #27
 800ce36:	bf44      	itt	mi
 800ce38:	2320      	movmi	r3, #32
 800ce3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce3e:	0713      	lsls	r3, r2, #28
 800ce40:	bf44      	itt	mi
 800ce42:	232b      	movmi	r3, #43	; 0x2b
 800ce44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce48:	f89a 3000 	ldrb.w	r3, [sl]
 800ce4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ce4e:	d015      	beq.n	800ce7c <_vfiprintf_r+0x120>
 800ce50:	9a07      	ldr	r2, [sp, #28]
 800ce52:	4654      	mov	r4, sl
 800ce54:	2000      	movs	r0, #0
 800ce56:	f04f 0c0a 	mov.w	ip, #10
 800ce5a:	4621      	mov	r1, r4
 800ce5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce60:	3b30      	subs	r3, #48	; 0x30
 800ce62:	2b09      	cmp	r3, #9
 800ce64:	d94d      	bls.n	800cf02 <_vfiprintf_r+0x1a6>
 800ce66:	b1b0      	cbz	r0, 800ce96 <_vfiprintf_r+0x13a>
 800ce68:	9207      	str	r2, [sp, #28]
 800ce6a:	e014      	b.n	800ce96 <_vfiprintf_r+0x13a>
 800ce6c:	eba0 0308 	sub.w	r3, r0, r8
 800ce70:	fa09 f303 	lsl.w	r3, r9, r3
 800ce74:	4313      	orrs	r3, r2
 800ce76:	9304      	str	r3, [sp, #16]
 800ce78:	46a2      	mov	sl, r4
 800ce7a:	e7d2      	b.n	800ce22 <_vfiprintf_r+0xc6>
 800ce7c:	9b03      	ldr	r3, [sp, #12]
 800ce7e:	1d19      	adds	r1, r3, #4
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	9103      	str	r1, [sp, #12]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	bfbb      	ittet	lt
 800ce88:	425b      	neglt	r3, r3
 800ce8a:	f042 0202 	orrlt.w	r2, r2, #2
 800ce8e:	9307      	strge	r3, [sp, #28]
 800ce90:	9307      	strlt	r3, [sp, #28]
 800ce92:	bfb8      	it	lt
 800ce94:	9204      	strlt	r2, [sp, #16]
 800ce96:	7823      	ldrb	r3, [r4, #0]
 800ce98:	2b2e      	cmp	r3, #46	; 0x2e
 800ce9a:	d10c      	bne.n	800ceb6 <_vfiprintf_r+0x15a>
 800ce9c:	7863      	ldrb	r3, [r4, #1]
 800ce9e:	2b2a      	cmp	r3, #42	; 0x2a
 800cea0:	d134      	bne.n	800cf0c <_vfiprintf_r+0x1b0>
 800cea2:	9b03      	ldr	r3, [sp, #12]
 800cea4:	1d1a      	adds	r2, r3, #4
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	9203      	str	r2, [sp, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	bfb8      	it	lt
 800ceae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ceb2:	3402      	adds	r4, #2
 800ceb4:	9305      	str	r3, [sp, #20]
 800ceb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cf8c <_vfiprintf_r+0x230>
 800ceba:	7821      	ldrb	r1, [r4, #0]
 800cebc:	2203      	movs	r2, #3
 800cebe:	4650      	mov	r0, sl
 800cec0:	f7f3 f9a6 	bl	8000210 <memchr>
 800cec4:	b138      	cbz	r0, 800ced6 <_vfiprintf_r+0x17a>
 800cec6:	9b04      	ldr	r3, [sp, #16]
 800cec8:	eba0 000a 	sub.w	r0, r0, sl
 800cecc:	2240      	movs	r2, #64	; 0x40
 800cece:	4082      	lsls	r2, r0
 800ced0:	4313      	orrs	r3, r2
 800ced2:	3401      	adds	r4, #1
 800ced4:	9304      	str	r3, [sp, #16]
 800ced6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceda:	4829      	ldr	r0, [pc, #164]	; (800cf80 <_vfiprintf_r+0x224>)
 800cedc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cee0:	2206      	movs	r2, #6
 800cee2:	f7f3 f995 	bl	8000210 <memchr>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d03f      	beq.n	800cf6a <_vfiprintf_r+0x20e>
 800ceea:	4b26      	ldr	r3, [pc, #152]	; (800cf84 <_vfiprintf_r+0x228>)
 800ceec:	bb1b      	cbnz	r3, 800cf36 <_vfiprintf_r+0x1da>
 800ceee:	9b03      	ldr	r3, [sp, #12]
 800cef0:	3307      	adds	r3, #7
 800cef2:	f023 0307 	bic.w	r3, r3, #7
 800cef6:	3308      	adds	r3, #8
 800cef8:	9303      	str	r3, [sp, #12]
 800cefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cefc:	443b      	add	r3, r7
 800cefe:	9309      	str	r3, [sp, #36]	; 0x24
 800cf00:	e768      	b.n	800cdd4 <_vfiprintf_r+0x78>
 800cf02:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf06:	460c      	mov	r4, r1
 800cf08:	2001      	movs	r0, #1
 800cf0a:	e7a6      	b.n	800ce5a <_vfiprintf_r+0xfe>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	3401      	adds	r4, #1
 800cf10:	9305      	str	r3, [sp, #20]
 800cf12:	4619      	mov	r1, r3
 800cf14:	f04f 0c0a 	mov.w	ip, #10
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf1e:	3a30      	subs	r2, #48	; 0x30
 800cf20:	2a09      	cmp	r2, #9
 800cf22:	d903      	bls.n	800cf2c <_vfiprintf_r+0x1d0>
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d0c6      	beq.n	800ceb6 <_vfiprintf_r+0x15a>
 800cf28:	9105      	str	r1, [sp, #20]
 800cf2a:	e7c4      	b.n	800ceb6 <_vfiprintf_r+0x15a>
 800cf2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf30:	4604      	mov	r4, r0
 800cf32:	2301      	movs	r3, #1
 800cf34:	e7f0      	b.n	800cf18 <_vfiprintf_r+0x1bc>
 800cf36:	ab03      	add	r3, sp, #12
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	462a      	mov	r2, r5
 800cf3c:	4b12      	ldr	r3, [pc, #72]	; (800cf88 <_vfiprintf_r+0x22c>)
 800cf3e:	a904      	add	r1, sp, #16
 800cf40:	4630      	mov	r0, r6
 800cf42:	f7fd feb7 	bl	800acb4 <_printf_float>
 800cf46:	4607      	mov	r7, r0
 800cf48:	1c78      	adds	r0, r7, #1
 800cf4a:	d1d6      	bne.n	800cefa <_vfiprintf_r+0x19e>
 800cf4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf4e:	07d9      	lsls	r1, r3, #31
 800cf50:	d405      	bmi.n	800cf5e <_vfiprintf_r+0x202>
 800cf52:	89ab      	ldrh	r3, [r5, #12]
 800cf54:	059a      	lsls	r2, r3, #22
 800cf56:	d402      	bmi.n	800cf5e <_vfiprintf_r+0x202>
 800cf58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf5a:	f7fe fcc3 	bl	800b8e4 <__retarget_lock_release_recursive>
 800cf5e:	89ab      	ldrh	r3, [r5, #12]
 800cf60:	065b      	lsls	r3, r3, #25
 800cf62:	f53f af1d 	bmi.w	800cda0 <_vfiprintf_r+0x44>
 800cf66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf68:	e71c      	b.n	800cda4 <_vfiprintf_r+0x48>
 800cf6a:	ab03      	add	r3, sp, #12
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	462a      	mov	r2, r5
 800cf70:	4b05      	ldr	r3, [pc, #20]	; (800cf88 <_vfiprintf_r+0x22c>)
 800cf72:	a904      	add	r1, sp, #16
 800cf74:	4630      	mov	r0, r6
 800cf76:	f7fe f941 	bl	800b1fc <_printf_i>
 800cf7a:	e7e4      	b.n	800cf46 <_vfiprintf_r+0x1ea>
 800cf7c:	08010c0f 	.word	0x08010c0f
 800cf80:	08010c19 	.word	0x08010c19
 800cf84:	0800acb5 	.word	0x0800acb5
 800cf88:	0800cd37 	.word	0x0800cd37
 800cf8c:	08010c15 	.word	0x08010c15

0800cf90 <malloc>:
 800cf90:	4b02      	ldr	r3, [pc, #8]	; (800cf9c <malloc+0xc>)
 800cf92:	4601      	mov	r1, r0
 800cf94:	6818      	ldr	r0, [r3, #0]
 800cf96:	f000 b823 	b.w	800cfe0 <_malloc_r>
 800cf9a:	bf00      	nop
 800cf9c:	2000009c 	.word	0x2000009c

0800cfa0 <sbrk_aligned>:
 800cfa0:	b570      	push	{r4, r5, r6, lr}
 800cfa2:	4e0e      	ldr	r6, [pc, #56]	; (800cfdc <sbrk_aligned+0x3c>)
 800cfa4:	460c      	mov	r4, r1
 800cfa6:	6831      	ldr	r1, [r6, #0]
 800cfa8:	4605      	mov	r5, r0
 800cfaa:	b911      	cbnz	r1, 800cfb2 <sbrk_aligned+0x12>
 800cfac:	f001 f8fe 	bl	800e1ac <_sbrk_r>
 800cfb0:	6030      	str	r0, [r6, #0]
 800cfb2:	4621      	mov	r1, r4
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	f001 f8f9 	bl	800e1ac <_sbrk_r>
 800cfba:	1c43      	adds	r3, r0, #1
 800cfbc:	d00a      	beq.n	800cfd4 <sbrk_aligned+0x34>
 800cfbe:	1cc4      	adds	r4, r0, #3
 800cfc0:	f024 0403 	bic.w	r4, r4, #3
 800cfc4:	42a0      	cmp	r0, r4
 800cfc6:	d007      	beq.n	800cfd8 <sbrk_aligned+0x38>
 800cfc8:	1a21      	subs	r1, r4, r0
 800cfca:	4628      	mov	r0, r5
 800cfcc:	f001 f8ee 	bl	800e1ac <_sbrk_r>
 800cfd0:	3001      	adds	r0, #1
 800cfd2:	d101      	bne.n	800cfd8 <sbrk_aligned+0x38>
 800cfd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cfd8:	4620      	mov	r0, r4
 800cfda:	bd70      	pop	{r4, r5, r6, pc}
 800cfdc:	20007850 	.word	0x20007850

0800cfe0 <_malloc_r>:
 800cfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfe4:	1ccd      	adds	r5, r1, #3
 800cfe6:	f025 0503 	bic.w	r5, r5, #3
 800cfea:	3508      	adds	r5, #8
 800cfec:	2d0c      	cmp	r5, #12
 800cfee:	bf38      	it	cc
 800cff0:	250c      	movcc	r5, #12
 800cff2:	2d00      	cmp	r5, #0
 800cff4:	4607      	mov	r7, r0
 800cff6:	db01      	blt.n	800cffc <_malloc_r+0x1c>
 800cff8:	42a9      	cmp	r1, r5
 800cffa:	d905      	bls.n	800d008 <_malloc_r+0x28>
 800cffc:	230c      	movs	r3, #12
 800cffe:	603b      	str	r3, [r7, #0]
 800d000:	2600      	movs	r6, #0
 800d002:	4630      	mov	r0, r6
 800d004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d008:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d0dc <_malloc_r+0xfc>
 800d00c:	f000 fa9e 	bl	800d54c <__malloc_lock>
 800d010:	f8d8 3000 	ldr.w	r3, [r8]
 800d014:	461c      	mov	r4, r3
 800d016:	bb5c      	cbnz	r4, 800d070 <_malloc_r+0x90>
 800d018:	4629      	mov	r1, r5
 800d01a:	4638      	mov	r0, r7
 800d01c:	f7ff ffc0 	bl	800cfa0 <sbrk_aligned>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	4604      	mov	r4, r0
 800d024:	d155      	bne.n	800d0d2 <_malloc_r+0xf2>
 800d026:	f8d8 4000 	ldr.w	r4, [r8]
 800d02a:	4626      	mov	r6, r4
 800d02c:	2e00      	cmp	r6, #0
 800d02e:	d145      	bne.n	800d0bc <_malloc_r+0xdc>
 800d030:	2c00      	cmp	r4, #0
 800d032:	d048      	beq.n	800d0c6 <_malloc_r+0xe6>
 800d034:	6823      	ldr	r3, [r4, #0]
 800d036:	4631      	mov	r1, r6
 800d038:	4638      	mov	r0, r7
 800d03a:	eb04 0903 	add.w	r9, r4, r3
 800d03e:	f001 f8b5 	bl	800e1ac <_sbrk_r>
 800d042:	4581      	cmp	r9, r0
 800d044:	d13f      	bne.n	800d0c6 <_malloc_r+0xe6>
 800d046:	6821      	ldr	r1, [r4, #0]
 800d048:	1a6d      	subs	r5, r5, r1
 800d04a:	4629      	mov	r1, r5
 800d04c:	4638      	mov	r0, r7
 800d04e:	f7ff ffa7 	bl	800cfa0 <sbrk_aligned>
 800d052:	3001      	adds	r0, #1
 800d054:	d037      	beq.n	800d0c6 <_malloc_r+0xe6>
 800d056:	6823      	ldr	r3, [r4, #0]
 800d058:	442b      	add	r3, r5
 800d05a:	6023      	str	r3, [r4, #0]
 800d05c:	f8d8 3000 	ldr.w	r3, [r8]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d038      	beq.n	800d0d6 <_malloc_r+0xf6>
 800d064:	685a      	ldr	r2, [r3, #4]
 800d066:	42a2      	cmp	r2, r4
 800d068:	d12b      	bne.n	800d0c2 <_malloc_r+0xe2>
 800d06a:	2200      	movs	r2, #0
 800d06c:	605a      	str	r2, [r3, #4]
 800d06e:	e00f      	b.n	800d090 <_malloc_r+0xb0>
 800d070:	6822      	ldr	r2, [r4, #0]
 800d072:	1b52      	subs	r2, r2, r5
 800d074:	d41f      	bmi.n	800d0b6 <_malloc_r+0xd6>
 800d076:	2a0b      	cmp	r2, #11
 800d078:	d917      	bls.n	800d0aa <_malloc_r+0xca>
 800d07a:	1961      	adds	r1, r4, r5
 800d07c:	42a3      	cmp	r3, r4
 800d07e:	6025      	str	r5, [r4, #0]
 800d080:	bf18      	it	ne
 800d082:	6059      	strne	r1, [r3, #4]
 800d084:	6863      	ldr	r3, [r4, #4]
 800d086:	bf08      	it	eq
 800d088:	f8c8 1000 	streq.w	r1, [r8]
 800d08c:	5162      	str	r2, [r4, r5]
 800d08e:	604b      	str	r3, [r1, #4]
 800d090:	4638      	mov	r0, r7
 800d092:	f104 060b 	add.w	r6, r4, #11
 800d096:	f000 fa5f 	bl	800d558 <__malloc_unlock>
 800d09a:	f026 0607 	bic.w	r6, r6, #7
 800d09e:	1d23      	adds	r3, r4, #4
 800d0a0:	1af2      	subs	r2, r6, r3
 800d0a2:	d0ae      	beq.n	800d002 <_malloc_r+0x22>
 800d0a4:	1b9b      	subs	r3, r3, r6
 800d0a6:	50a3      	str	r3, [r4, r2]
 800d0a8:	e7ab      	b.n	800d002 <_malloc_r+0x22>
 800d0aa:	42a3      	cmp	r3, r4
 800d0ac:	6862      	ldr	r2, [r4, #4]
 800d0ae:	d1dd      	bne.n	800d06c <_malloc_r+0x8c>
 800d0b0:	f8c8 2000 	str.w	r2, [r8]
 800d0b4:	e7ec      	b.n	800d090 <_malloc_r+0xb0>
 800d0b6:	4623      	mov	r3, r4
 800d0b8:	6864      	ldr	r4, [r4, #4]
 800d0ba:	e7ac      	b.n	800d016 <_malloc_r+0x36>
 800d0bc:	4634      	mov	r4, r6
 800d0be:	6876      	ldr	r6, [r6, #4]
 800d0c0:	e7b4      	b.n	800d02c <_malloc_r+0x4c>
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	e7cc      	b.n	800d060 <_malloc_r+0x80>
 800d0c6:	230c      	movs	r3, #12
 800d0c8:	603b      	str	r3, [r7, #0]
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	f000 fa44 	bl	800d558 <__malloc_unlock>
 800d0d0:	e797      	b.n	800d002 <_malloc_r+0x22>
 800d0d2:	6025      	str	r5, [r4, #0]
 800d0d4:	e7dc      	b.n	800d090 <_malloc_r+0xb0>
 800d0d6:	605b      	str	r3, [r3, #4]
 800d0d8:	deff      	udf	#255	; 0xff
 800d0da:	bf00      	nop
 800d0dc:	2000784c 	.word	0x2000784c

0800d0e0 <_scanf_chars>:
 800d0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0e4:	4615      	mov	r5, r2
 800d0e6:	688a      	ldr	r2, [r1, #8]
 800d0e8:	4680      	mov	r8, r0
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	b932      	cbnz	r2, 800d0fc <_scanf_chars+0x1c>
 800d0ee:	698a      	ldr	r2, [r1, #24]
 800d0f0:	2a00      	cmp	r2, #0
 800d0f2:	bf0c      	ite	eq
 800d0f4:	2201      	moveq	r2, #1
 800d0f6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800d0fa:	608a      	str	r2, [r1, #8]
 800d0fc:	6822      	ldr	r2, [r4, #0]
 800d0fe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d190 <_scanf_chars+0xb0>
 800d102:	06d1      	lsls	r1, r2, #27
 800d104:	bf5f      	itttt	pl
 800d106:	681a      	ldrpl	r2, [r3, #0]
 800d108:	1d11      	addpl	r1, r2, #4
 800d10a:	6019      	strpl	r1, [r3, #0]
 800d10c:	6816      	ldrpl	r6, [r2, #0]
 800d10e:	2700      	movs	r7, #0
 800d110:	69a0      	ldr	r0, [r4, #24]
 800d112:	b188      	cbz	r0, 800d138 <_scanf_chars+0x58>
 800d114:	2801      	cmp	r0, #1
 800d116:	d107      	bne.n	800d128 <_scanf_chars+0x48>
 800d118:	682a      	ldr	r2, [r5, #0]
 800d11a:	7811      	ldrb	r1, [r2, #0]
 800d11c:	6962      	ldr	r2, [r4, #20]
 800d11e:	5c52      	ldrb	r2, [r2, r1]
 800d120:	b952      	cbnz	r2, 800d138 <_scanf_chars+0x58>
 800d122:	2f00      	cmp	r7, #0
 800d124:	d031      	beq.n	800d18a <_scanf_chars+0xaa>
 800d126:	e022      	b.n	800d16e <_scanf_chars+0x8e>
 800d128:	2802      	cmp	r0, #2
 800d12a:	d120      	bne.n	800d16e <_scanf_chars+0x8e>
 800d12c:	682b      	ldr	r3, [r5, #0]
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d134:	071b      	lsls	r3, r3, #28
 800d136:	d41a      	bmi.n	800d16e <_scanf_chars+0x8e>
 800d138:	6823      	ldr	r3, [r4, #0]
 800d13a:	06da      	lsls	r2, r3, #27
 800d13c:	bf5e      	ittt	pl
 800d13e:	682b      	ldrpl	r3, [r5, #0]
 800d140:	781b      	ldrbpl	r3, [r3, #0]
 800d142:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d146:	682a      	ldr	r2, [r5, #0]
 800d148:	686b      	ldr	r3, [r5, #4]
 800d14a:	3201      	adds	r2, #1
 800d14c:	602a      	str	r2, [r5, #0]
 800d14e:	68a2      	ldr	r2, [r4, #8]
 800d150:	3b01      	subs	r3, #1
 800d152:	3a01      	subs	r2, #1
 800d154:	606b      	str	r3, [r5, #4]
 800d156:	3701      	adds	r7, #1
 800d158:	60a2      	str	r2, [r4, #8]
 800d15a:	b142      	cbz	r2, 800d16e <_scanf_chars+0x8e>
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	dcd7      	bgt.n	800d110 <_scanf_chars+0x30>
 800d160:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d164:	4629      	mov	r1, r5
 800d166:	4640      	mov	r0, r8
 800d168:	4798      	blx	r3
 800d16a:	2800      	cmp	r0, #0
 800d16c:	d0d0      	beq.n	800d110 <_scanf_chars+0x30>
 800d16e:	6823      	ldr	r3, [r4, #0]
 800d170:	f013 0310 	ands.w	r3, r3, #16
 800d174:	d105      	bne.n	800d182 <_scanf_chars+0xa2>
 800d176:	68e2      	ldr	r2, [r4, #12]
 800d178:	3201      	adds	r2, #1
 800d17a:	60e2      	str	r2, [r4, #12]
 800d17c:	69a2      	ldr	r2, [r4, #24]
 800d17e:	b102      	cbz	r2, 800d182 <_scanf_chars+0xa2>
 800d180:	7033      	strb	r3, [r6, #0]
 800d182:	6923      	ldr	r3, [r4, #16]
 800d184:	443b      	add	r3, r7
 800d186:	6123      	str	r3, [r4, #16]
 800d188:	2000      	movs	r0, #0
 800d18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d18e:	bf00      	nop
 800d190:	08010d9f 	.word	0x08010d9f

0800d194 <_scanf_i>:
 800d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d198:	4698      	mov	r8, r3
 800d19a:	4b74      	ldr	r3, [pc, #464]	; (800d36c <_scanf_i+0x1d8>)
 800d19c:	460c      	mov	r4, r1
 800d19e:	4682      	mov	sl, r0
 800d1a0:	4616      	mov	r6, r2
 800d1a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d1a6:	b087      	sub	sp, #28
 800d1a8:	ab03      	add	r3, sp, #12
 800d1aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d1ae:	4b70      	ldr	r3, [pc, #448]	; (800d370 <_scanf_i+0x1dc>)
 800d1b0:	69a1      	ldr	r1, [r4, #24]
 800d1b2:	4a70      	ldr	r2, [pc, #448]	; (800d374 <_scanf_i+0x1e0>)
 800d1b4:	2903      	cmp	r1, #3
 800d1b6:	bf18      	it	ne
 800d1b8:	461a      	movne	r2, r3
 800d1ba:	68a3      	ldr	r3, [r4, #8]
 800d1bc:	9201      	str	r2, [sp, #4]
 800d1be:	1e5a      	subs	r2, r3, #1
 800d1c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d1c4:	bf88      	it	hi
 800d1c6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d1ca:	4627      	mov	r7, r4
 800d1cc:	bf82      	ittt	hi
 800d1ce:	eb03 0905 	addhi.w	r9, r3, r5
 800d1d2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d1d6:	60a3      	strhi	r3, [r4, #8]
 800d1d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d1dc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d1e0:	bf98      	it	ls
 800d1e2:	f04f 0900 	movls.w	r9, #0
 800d1e6:	6023      	str	r3, [r4, #0]
 800d1e8:	463d      	mov	r5, r7
 800d1ea:	f04f 0b00 	mov.w	fp, #0
 800d1ee:	6831      	ldr	r1, [r6, #0]
 800d1f0:	ab03      	add	r3, sp, #12
 800d1f2:	7809      	ldrb	r1, [r1, #0]
 800d1f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d1f8:	2202      	movs	r2, #2
 800d1fa:	f7f3 f809 	bl	8000210 <memchr>
 800d1fe:	b328      	cbz	r0, 800d24c <_scanf_i+0xb8>
 800d200:	f1bb 0f01 	cmp.w	fp, #1
 800d204:	d159      	bne.n	800d2ba <_scanf_i+0x126>
 800d206:	6862      	ldr	r2, [r4, #4]
 800d208:	b92a      	cbnz	r2, 800d216 <_scanf_i+0x82>
 800d20a:	6822      	ldr	r2, [r4, #0]
 800d20c:	2308      	movs	r3, #8
 800d20e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d212:	6063      	str	r3, [r4, #4]
 800d214:	6022      	str	r2, [r4, #0]
 800d216:	6822      	ldr	r2, [r4, #0]
 800d218:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d21c:	6022      	str	r2, [r4, #0]
 800d21e:	68a2      	ldr	r2, [r4, #8]
 800d220:	1e51      	subs	r1, r2, #1
 800d222:	60a1      	str	r1, [r4, #8]
 800d224:	b192      	cbz	r2, 800d24c <_scanf_i+0xb8>
 800d226:	6832      	ldr	r2, [r6, #0]
 800d228:	1c51      	adds	r1, r2, #1
 800d22a:	6031      	str	r1, [r6, #0]
 800d22c:	7812      	ldrb	r2, [r2, #0]
 800d22e:	f805 2b01 	strb.w	r2, [r5], #1
 800d232:	6872      	ldr	r2, [r6, #4]
 800d234:	3a01      	subs	r2, #1
 800d236:	2a00      	cmp	r2, #0
 800d238:	6072      	str	r2, [r6, #4]
 800d23a:	dc07      	bgt.n	800d24c <_scanf_i+0xb8>
 800d23c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d240:	4631      	mov	r1, r6
 800d242:	4650      	mov	r0, sl
 800d244:	4790      	blx	r2
 800d246:	2800      	cmp	r0, #0
 800d248:	f040 8085 	bne.w	800d356 <_scanf_i+0x1c2>
 800d24c:	f10b 0b01 	add.w	fp, fp, #1
 800d250:	f1bb 0f03 	cmp.w	fp, #3
 800d254:	d1cb      	bne.n	800d1ee <_scanf_i+0x5a>
 800d256:	6863      	ldr	r3, [r4, #4]
 800d258:	b90b      	cbnz	r3, 800d25e <_scanf_i+0xca>
 800d25a:	230a      	movs	r3, #10
 800d25c:	6063      	str	r3, [r4, #4]
 800d25e:	6863      	ldr	r3, [r4, #4]
 800d260:	4945      	ldr	r1, [pc, #276]	; (800d378 <_scanf_i+0x1e4>)
 800d262:	6960      	ldr	r0, [r4, #20]
 800d264:	1ac9      	subs	r1, r1, r3
 800d266:	f000 f889 	bl	800d37c <__sccl>
 800d26a:	f04f 0b00 	mov.w	fp, #0
 800d26e:	68a3      	ldr	r3, [r4, #8]
 800d270:	6822      	ldr	r2, [r4, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d03d      	beq.n	800d2f2 <_scanf_i+0x15e>
 800d276:	6831      	ldr	r1, [r6, #0]
 800d278:	6960      	ldr	r0, [r4, #20]
 800d27a:	f891 c000 	ldrb.w	ip, [r1]
 800d27e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d282:	2800      	cmp	r0, #0
 800d284:	d035      	beq.n	800d2f2 <_scanf_i+0x15e>
 800d286:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d28a:	d124      	bne.n	800d2d6 <_scanf_i+0x142>
 800d28c:	0510      	lsls	r0, r2, #20
 800d28e:	d522      	bpl.n	800d2d6 <_scanf_i+0x142>
 800d290:	f10b 0b01 	add.w	fp, fp, #1
 800d294:	f1b9 0f00 	cmp.w	r9, #0
 800d298:	d003      	beq.n	800d2a2 <_scanf_i+0x10e>
 800d29a:	3301      	adds	r3, #1
 800d29c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d2a0:	60a3      	str	r3, [r4, #8]
 800d2a2:	6873      	ldr	r3, [r6, #4]
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	6073      	str	r3, [r6, #4]
 800d2aa:	dd1b      	ble.n	800d2e4 <_scanf_i+0x150>
 800d2ac:	6833      	ldr	r3, [r6, #0]
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	6033      	str	r3, [r6, #0]
 800d2b2:	68a3      	ldr	r3, [r4, #8]
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	60a3      	str	r3, [r4, #8]
 800d2b8:	e7d9      	b.n	800d26e <_scanf_i+0xda>
 800d2ba:	f1bb 0f02 	cmp.w	fp, #2
 800d2be:	d1ae      	bne.n	800d21e <_scanf_i+0x8a>
 800d2c0:	6822      	ldr	r2, [r4, #0]
 800d2c2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d2c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d2ca:	d1bf      	bne.n	800d24c <_scanf_i+0xb8>
 800d2cc:	2310      	movs	r3, #16
 800d2ce:	6063      	str	r3, [r4, #4]
 800d2d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2d4:	e7a2      	b.n	800d21c <_scanf_i+0x88>
 800d2d6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d2da:	6022      	str	r2, [r4, #0]
 800d2dc:	780b      	ldrb	r3, [r1, #0]
 800d2de:	f805 3b01 	strb.w	r3, [r5], #1
 800d2e2:	e7de      	b.n	800d2a2 <_scanf_i+0x10e>
 800d2e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d2e8:	4631      	mov	r1, r6
 800d2ea:	4650      	mov	r0, sl
 800d2ec:	4798      	blx	r3
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d0df      	beq.n	800d2b2 <_scanf_i+0x11e>
 800d2f2:	6823      	ldr	r3, [r4, #0]
 800d2f4:	05d9      	lsls	r1, r3, #23
 800d2f6:	d50d      	bpl.n	800d314 <_scanf_i+0x180>
 800d2f8:	42bd      	cmp	r5, r7
 800d2fa:	d909      	bls.n	800d310 <_scanf_i+0x17c>
 800d2fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d300:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d304:	4632      	mov	r2, r6
 800d306:	4650      	mov	r0, sl
 800d308:	4798      	blx	r3
 800d30a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800d30e:	464d      	mov	r5, r9
 800d310:	42bd      	cmp	r5, r7
 800d312:	d028      	beq.n	800d366 <_scanf_i+0x1d2>
 800d314:	6822      	ldr	r2, [r4, #0]
 800d316:	f012 0210 	ands.w	r2, r2, #16
 800d31a:	d113      	bne.n	800d344 <_scanf_i+0x1b0>
 800d31c:	702a      	strb	r2, [r5, #0]
 800d31e:	6863      	ldr	r3, [r4, #4]
 800d320:	9e01      	ldr	r6, [sp, #4]
 800d322:	4639      	mov	r1, r7
 800d324:	4650      	mov	r0, sl
 800d326:	47b0      	blx	r6
 800d328:	f8d8 3000 	ldr.w	r3, [r8]
 800d32c:	6821      	ldr	r1, [r4, #0]
 800d32e:	1d1a      	adds	r2, r3, #4
 800d330:	f8c8 2000 	str.w	r2, [r8]
 800d334:	f011 0f20 	tst.w	r1, #32
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	d00f      	beq.n	800d35c <_scanf_i+0x1c8>
 800d33c:	6018      	str	r0, [r3, #0]
 800d33e:	68e3      	ldr	r3, [r4, #12]
 800d340:	3301      	adds	r3, #1
 800d342:	60e3      	str	r3, [r4, #12]
 800d344:	6923      	ldr	r3, [r4, #16]
 800d346:	1bed      	subs	r5, r5, r7
 800d348:	445d      	add	r5, fp
 800d34a:	442b      	add	r3, r5
 800d34c:	6123      	str	r3, [r4, #16]
 800d34e:	2000      	movs	r0, #0
 800d350:	b007      	add	sp, #28
 800d352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d356:	f04f 0b00 	mov.w	fp, #0
 800d35a:	e7ca      	b.n	800d2f2 <_scanf_i+0x15e>
 800d35c:	07ca      	lsls	r2, r1, #31
 800d35e:	bf4c      	ite	mi
 800d360:	8018      	strhmi	r0, [r3, #0]
 800d362:	6018      	strpl	r0, [r3, #0]
 800d364:	e7eb      	b.n	800d33e <_scanf_i+0x1aa>
 800d366:	2001      	movs	r0, #1
 800d368:	e7f2      	b.n	800d350 <_scanf_i+0x1bc>
 800d36a:	bf00      	nop
 800d36c:	0800eb94 	.word	0x0800eb94
 800d370:	0800df41 	.word	0x0800df41
 800d374:	0800de59 	.word	0x0800de59
 800d378:	08010c30 	.word	0x08010c30

0800d37c <__sccl>:
 800d37c:	b570      	push	{r4, r5, r6, lr}
 800d37e:	780b      	ldrb	r3, [r1, #0]
 800d380:	4604      	mov	r4, r0
 800d382:	2b5e      	cmp	r3, #94	; 0x5e
 800d384:	bf0b      	itete	eq
 800d386:	784b      	ldrbeq	r3, [r1, #1]
 800d388:	1c4a      	addne	r2, r1, #1
 800d38a:	1c8a      	addeq	r2, r1, #2
 800d38c:	2100      	movne	r1, #0
 800d38e:	bf08      	it	eq
 800d390:	2101      	moveq	r1, #1
 800d392:	3801      	subs	r0, #1
 800d394:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d398:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d39c:	42a8      	cmp	r0, r5
 800d39e:	d1fb      	bne.n	800d398 <__sccl+0x1c>
 800d3a0:	b90b      	cbnz	r3, 800d3a6 <__sccl+0x2a>
 800d3a2:	1e50      	subs	r0, r2, #1
 800d3a4:	bd70      	pop	{r4, r5, r6, pc}
 800d3a6:	f081 0101 	eor.w	r1, r1, #1
 800d3aa:	54e1      	strb	r1, [r4, r3]
 800d3ac:	4610      	mov	r0, r2
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d3b4:	2d2d      	cmp	r5, #45	; 0x2d
 800d3b6:	d005      	beq.n	800d3c4 <__sccl+0x48>
 800d3b8:	2d5d      	cmp	r5, #93	; 0x5d
 800d3ba:	d016      	beq.n	800d3ea <__sccl+0x6e>
 800d3bc:	2d00      	cmp	r5, #0
 800d3be:	d0f1      	beq.n	800d3a4 <__sccl+0x28>
 800d3c0:	462b      	mov	r3, r5
 800d3c2:	e7f2      	b.n	800d3aa <__sccl+0x2e>
 800d3c4:	7846      	ldrb	r6, [r0, #1]
 800d3c6:	2e5d      	cmp	r6, #93	; 0x5d
 800d3c8:	d0fa      	beq.n	800d3c0 <__sccl+0x44>
 800d3ca:	42b3      	cmp	r3, r6
 800d3cc:	dcf8      	bgt.n	800d3c0 <__sccl+0x44>
 800d3ce:	3002      	adds	r0, #2
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	3201      	adds	r2, #1
 800d3d4:	4296      	cmp	r6, r2
 800d3d6:	54a1      	strb	r1, [r4, r2]
 800d3d8:	dcfb      	bgt.n	800d3d2 <__sccl+0x56>
 800d3da:	1af2      	subs	r2, r6, r3
 800d3dc:	3a01      	subs	r2, #1
 800d3de:	1c5d      	adds	r5, r3, #1
 800d3e0:	42b3      	cmp	r3, r6
 800d3e2:	bfa8      	it	ge
 800d3e4:	2200      	movge	r2, #0
 800d3e6:	18ab      	adds	r3, r5, r2
 800d3e8:	e7e1      	b.n	800d3ae <__sccl+0x32>
 800d3ea:	4610      	mov	r0, r2
 800d3ec:	e7da      	b.n	800d3a4 <__sccl+0x28>
	...

0800d3f0 <__sflush_r>:
 800d3f0:	898a      	ldrh	r2, [r1, #12]
 800d3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f6:	4605      	mov	r5, r0
 800d3f8:	0710      	lsls	r0, r2, #28
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	d458      	bmi.n	800d4b0 <__sflush_r+0xc0>
 800d3fe:	684b      	ldr	r3, [r1, #4]
 800d400:	2b00      	cmp	r3, #0
 800d402:	dc05      	bgt.n	800d410 <__sflush_r+0x20>
 800d404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d406:	2b00      	cmp	r3, #0
 800d408:	dc02      	bgt.n	800d410 <__sflush_r+0x20>
 800d40a:	2000      	movs	r0, #0
 800d40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d412:	2e00      	cmp	r6, #0
 800d414:	d0f9      	beq.n	800d40a <__sflush_r+0x1a>
 800d416:	2300      	movs	r3, #0
 800d418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d41c:	682f      	ldr	r7, [r5, #0]
 800d41e:	6a21      	ldr	r1, [r4, #32]
 800d420:	602b      	str	r3, [r5, #0]
 800d422:	d032      	beq.n	800d48a <__sflush_r+0x9a>
 800d424:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	075a      	lsls	r2, r3, #29
 800d42a:	d505      	bpl.n	800d438 <__sflush_r+0x48>
 800d42c:	6863      	ldr	r3, [r4, #4]
 800d42e:	1ac0      	subs	r0, r0, r3
 800d430:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d432:	b10b      	cbz	r3, 800d438 <__sflush_r+0x48>
 800d434:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d436:	1ac0      	subs	r0, r0, r3
 800d438:	2300      	movs	r3, #0
 800d43a:	4602      	mov	r2, r0
 800d43c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d43e:	6a21      	ldr	r1, [r4, #32]
 800d440:	4628      	mov	r0, r5
 800d442:	47b0      	blx	r6
 800d444:	1c43      	adds	r3, r0, #1
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	d106      	bne.n	800d458 <__sflush_r+0x68>
 800d44a:	6829      	ldr	r1, [r5, #0]
 800d44c:	291d      	cmp	r1, #29
 800d44e:	d82b      	bhi.n	800d4a8 <__sflush_r+0xb8>
 800d450:	4a29      	ldr	r2, [pc, #164]	; (800d4f8 <__sflush_r+0x108>)
 800d452:	410a      	asrs	r2, r1
 800d454:	07d6      	lsls	r6, r2, #31
 800d456:	d427      	bmi.n	800d4a8 <__sflush_r+0xb8>
 800d458:	2200      	movs	r2, #0
 800d45a:	6062      	str	r2, [r4, #4]
 800d45c:	04d9      	lsls	r1, r3, #19
 800d45e:	6922      	ldr	r2, [r4, #16]
 800d460:	6022      	str	r2, [r4, #0]
 800d462:	d504      	bpl.n	800d46e <__sflush_r+0x7e>
 800d464:	1c42      	adds	r2, r0, #1
 800d466:	d101      	bne.n	800d46c <__sflush_r+0x7c>
 800d468:	682b      	ldr	r3, [r5, #0]
 800d46a:	b903      	cbnz	r3, 800d46e <__sflush_r+0x7e>
 800d46c:	6560      	str	r0, [r4, #84]	; 0x54
 800d46e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d470:	602f      	str	r7, [r5, #0]
 800d472:	2900      	cmp	r1, #0
 800d474:	d0c9      	beq.n	800d40a <__sflush_r+0x1a>
 800d476:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d47a:	4299      	cmp	r1, r3
 800d47c:	d002      	beq.n	800d484 <__sflush_r+0x94>
 800d47e:	4628      	mov	r0, r5
 800d480:	f7ff f8cc 	bl	800c61c <_free_r>
 800d484:	2000      	movs	r0, #0
 800d486:	6360      	str	r0, [r4, #52]	; 0x34
 800d488:	e7c0      	b.n	800d40c <__sflush_r+0x1c>
 800d48a:	2301      	movs	r3, #1
 800d48c:	4628      	mov	r0, r5
 800d48e:	47b0      	blx	r6
 800d490:	1c41      	adds	r1, r0, #1
 800d492:	d1c8      	bne.n	800d426 <__sflush_r+0x36>
 800d494:	682b      	ldr	r3, [r5, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d0c5      	beq.n	800d426 <__sflush_r+0x36>
 800d49a:	2b1d      	cmp	r3, #29
 800d49c:	d001      	beq.n	800d4a2 <__sflush_r+0xb2>
 800d49e:	2b16      	cmp	r3, #22
 800d4a0:	d101      	bne.n	800d4a6 <__sflush_r+0xb6>
 800d4a2:	602f      	str	r7, [r5, #0]
 800d4a4:	e7b1      	b.n	800d40a <__sflush_r+0x1a>
 800d4a6:	89a3      	ldrh	r3, [r4, #12]
 800d4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4ac:	81a3      	strh	r3, [r4, #12]
 800d4ae:	e7ad      	b.n	800d40c <__sflush_r+0x1c>
 800d4b0:	690f      	ldr	r7, [r1, #16]
 800d4b2:	2f00      	cmp	r7, #0
 800d4b4:	d0a9      	beq.n	800d40a <__sflush_r+0x1a>
 800d4b6:	0793      	lsls	r3, r2, #30
 800d4b8:	680e      	ldr	r6, [r1, #0]
 800d4ba:	bf08      	it	eq
 800d4bc:	694b      	ldreq	r3, [r1, #20]
 800d4be:	600f      	str	r7, [r1, #0]
 800d4c0:	bf18      	it	ne
 800d4c2:	2300      	movne	r3, #0
 800d4c4:	eba6 0807 	sub.w	r8, r6, r7
 800d4c8:	608b      	str	r3, [r1, #8]
 800d4ca:	f1b8 0f00 	cmp.w	r8, #0
 800d4ce:	dd9c      	ble.n	800d40a <__sflush_r+0x1a>
 800d4d0:	6a21      	ldr	r1, [r4, #32]
 800d4d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d4d4:	4643      	mov	r3, r8
 800d4d6:	463a      	mov	r2, r7
 800d4d8:	4628      	mov	r0, r5
 800d4da:	47b0      	blx	r6
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	dc06      	bgt.n	800d4ee <__sflush_r+0xfe>
 800d4e0:	89a3      	ldrh	r3, [r4, #12]
 800d4e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4e6:	81a3      	strh	r3, [r4, #12]
 800d4e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4ec:	e78e      	b.n	800d40c <__sflush_r+0x1c>
 800d4ee:	4407      	add	r7, r0
 800d4f0:	eba8 0800 	sub.w	r8, r8, r0
 800d4f4:	e7e9      	b.n	800d4ca <__sflush_r+0xda>
 800d4f6:	bf00      	nop
 800d4f8:	dfbffffe 	.word	0xdfbffffe

0800d4fc <_fflush_r>:
 800d4fc:	b538      	push	{r3, r4, r5, lr}
 800d4fe:	690b      	ldr	r3, [r1, #16]
 800d500:	4605      	mov	r5, r0
 800d502:	460c      	mov	r4, r1
 800d504:	b913      	cbnz	r3, 800d50c <_fflush_r+0x10>
 800d506:	2500      	movs	r5, #0
 800d508:	4628      	mov	r0, r5
 800d50a:	bd38      	pop	{r3, r4, r5, pc}
 800d50c:	b118      	cbz	r0, 800d516 <_fflush_r+0x1a>
 800d50e:	6a03      	ldr	r3, [r0, #32]
 800d510:	b90b      	cbnz	r3, 800d516 <_fflush_r+0x1a>
 800d512:	f7fe f8e7 	bl	800b6e4 <__sinit>
 800d516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d0f3      	beq.n	800d506 <_fflush_r+0xa>
 800d51e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d520:	07d0      	lsls	r0, r2, #31
 800d522:	d404      	bmi.n	800d52e <_fflush_r+0x32>
 800d524:	0599      	lsls	r1, r3, #22
 800d526:	d402      	bmi.n	800d52e <_fflush_r+0x32>
 800d528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d52a:	f7fe f9da 	bl	800b8e2 <__retarget_lock_acquire_recursive>
 800d52e:	4628      	mov	r0, r5
 800d530:	4621      	mov	r1, r4
 800d532:	f7ff ff5d 	bl	800d3f0 <__sflush_r>
 800d536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d538:	07da      	lsls	r2, r3, #31
 800d53a:	4605      	mov	r5, r0
 800d53c:	d4e4      	bmi.n	800d508 <_fflush_r+0xc>
 800d53e:	89a3      	ldrh	r3, [r4, #12]
 800d540:	059b      	lsls	r3, r3, #22
 800d542:	d4e1      	bmi.n	800d508 <_fflush_r+0xc>
 800d544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d546:	f7fe f9cd 	bl	800b8e4 <__retarget_lock_release_recursive>
 800d54a:	e7dd      	b.n	800d508 <_fflush_r+0xc>

0800d54c <__malloc_lock>:
 800d54c:	4801      	ldr	r0, [pc, #4]	; (800d554 <__malloc_lock+0x8>)
 800d54e:	f7fe b9c8 	b.w	800b8e2 <__retarget_lock_acquire_recursive>
 800d552:	bf00      	nop
 800d554:	20007848 	.word	0x20007848

0800d558 <__malloc_unlock>:
 800d558:	4801      	ldr	r0, [pc, #4]	; (800d560 <__malloc_unlock+0x8>)
 800d55a:	f7fe b9c3 	b.w	800b8e4 <__retarget_lock_release_recursive>
 800d55e:	bf00      	nop
 800d560:	20007848 	.word	0x20007848

0800d564 <_Balloc>:
 800d564:	b570      	push	{r4, r5, r6, lr}
 800d566:	69c6      	ldr	r6, [r0, #28]
 800d568:	4604      	mov	r4, r0
 800d56a:	460d      	mov	r5, r1
 800d56c:	b976      	cbnz	r6, 800d58c <_Balloc+0x28>
 800d56e:	2010      	movs	r0, #16
 800d570:	f7ff fd0e 	bl	800cf90 <malloc>
 800d574:	4602      	mov	r2, r0
 800d576:	61e0      	str	r0, [r4, #28]
 800d578:	b920      	cbnz	r0, 800d584 <_Balloc+0x20>
 800d57a:	4b18      	ldr	r3, [pc, #96]	; (800d5dc <_Balloc+0x78>)
 800d57c:	4818      	ldr	r0, [pc, #96]	; (800d5e0 <_Balloc+0x7c>)
 800d57e:	216b      	movs	r1, #107	; 0x6b
 800d580:	f7fe f9b2 	bl	800b8e8 <__assert_func>
 800d584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d588:	6006      	str	r6, [r0, #0]
 800d58a:	60c6      	str	r6, [r0, #12]
 800d58c:	69e6      	ldr	r6, [r4, #28]
 800d58e:	68f3      	ldr	r3, [r6, #12]
 800d590:	b183      	cbz	r3, 800d5b4 <_Balloc+0x50>
 800d592:	69e3      	ldr	r3, [r4, #28]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d59a:	b9b8      	cbnz	r0, 800d5cc <_Balloc+0x68>
 800d59c:	2101      	movs	r1, #1
 800d59e:	fa01 f605 	lsl.w	r6, r1, r5
 800d5a2:	1d72      	adds	r2, r6, #5
 800d5a4:	0092      	lsls	r2, r2, #2
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	f000 fe25 	bl	800e1f6 <_calloc_r>
 800d5ac:	b160      	cbz	r0, 800d5c8 <_Balloc+0x64>
 800d5ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5b2:	e00e      	b.n	800d5d2 <_Balloc+0x6e>
 800d5b4:	2221      	movs	r2, #33	; 0x21
 800d5b6:	2104      	movs	r1, #4
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f000 fe1c 	bl	800e1f6 <_calloc_r>
 800d5be:	69e3      	ldr	r3, [r4, #28]
 800d5c0:	60f0      	str	r0, [r6, #12]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d1e4      	bne.n	800d592 <_Balloc+0x2e>
 800d5c8:	2000      	movs	r0, #0
 800d5ca:	bd70      	pop	{r4, r5, r6, pc}
 800d5cc:	6802      	ldr	r2, [r0, #0]
 800d5ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5d8:	e7f7      	b.n	800d5ca <_Balloc+0x66>
 800d5da:	bf00      	nop
 800d5dc:	08010b8f 	.word	0x08010b8f
 800d5e0:	08010c3b 	.word	0x08010c3b

0800d5e4 <_Bfree>:
 800d5e4:	b570      	push	{r4, r5, r6, lr}
 800d5e6:	69c6      	ldr	r6, [r0, #28]
 800d5e8:	4605      	mov	r5, r0
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	b976      	cbnz	r6, 800d60c <_Bfree+0x28>
 800d5ee:	2010      	movs	r0, #16
 800d5f0:	f7ff fcce 	bl	800cf90 <malloc>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	61e8      	str	r0, [r5, #28]
 800d5f8:	b920      	cbnz	r0, 800d604 <_Bfree+0x20>
 800d5fa:	4b09      	ldr	r3, [pc, #36]	; (800d620 <_Bfree+0x3c>)
 800d5fc:	4809      	ldr	r0, [pc, #36]	; (800d624 <_Bfree+0x40>)
 800d5fe:	218f      	movs	r1, #143	; 0x8f
 800d600:	f7fe f972 	bl	800b8e8 <__assert_func>
 800d604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d608:	6006      	str	r6, [r0, #0]
 800d60a:	60c6      	str	r6, [r0, #12]
 800d60c:	b13c      	cbz	r4, 800d61e <_Bfree+0x3a>
 800d60e:	69eb      	ldr	r3, [r5, #28]
 800d610:	6862      	ldr	r2, [r4, #4]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d618:	6021      	str	r1, [r4, #0]
 800d61a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d61e:	bd70      	pop	{r4, r5, r6, pc}
 800d620:	08010b8f 	.word	0x08010b8f
 800d624:	08010c3b 	.word	0x08010c3b

0800d628 <__multadd>:
 800d628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d62c:	690d      	ldr	r5, [r1, #16]
 800d62e:	4607      	mov	r7, r0
 800d630:	460c      	mov	r4, r1
 800d632:	461e      	mov	r6, r3
 800d634:	f101 0c14 	add.w	ip, r1, #20
 800d638:	2000      	movs	r0, #0
 800d63a:	f8dc 3000 	ldr.w	r3, [ip]
 800d63e:	b299      	uxth	r1, r3
 800d640:	fb02 6101 	mla	r1, r2, r1, r6
 800d644:	0c1e      	lsrs	r6, r3, #16
 800d646:	0c0b      	lsrs	r3, r1, #16
 800d648:	fb02 3306 	mla	r3, r2, r6, r3
 800d64c:	b289      	uxth	r1, r1
 800d64e:	3001      	adds	r0, #1
 800d650:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d654:	4285      	cmp	r5, r0
 800d656:	f84c 1b04 	str.w	r1, [ip], #4
 800d65a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d65e:	dcec      	bgt.n	800d63a <__multadd+0x12>
 800d660:	b30e      	cbz	r6, 800d6a6 <__multadd+0x7e>
 800d662:	68a3      	ldr	r3, [r4, #8]
 800d664:	42ab      	cmp	r3, r5
 800d666:	dc19      	bgt.n	800d69c <__multadd+0x74>
 800d668:	6861      	ldr	r1, [r4, #4]
 800d66a:	4638      	mov	r0, r7
 800d66c:	3101      	adds	r1, #1
 800d66e:	f7ff ff79 	bl	800d564 <_Balloc>
 800d672:	4680      	mov	r8, r0
 800d674:	b928      	cbnz	r0, 800d682 <__multadd+0x5a>
 800d676:	4602      	mov	r2, r0
 800d678:	4b0c      	ldr	r3, [pc, #48]	; (800d6ac <__multadd+0x84>)
 800d67a:	480d      	ldr	r0, [pc, #52]	; (800d6b0 <__multadd+0x88>)
 800d67c:	21ba      	movs	r1, #186	; 0xba
 800d67e:	f7fe f933 	bl	800b8e8 <__assert_func>
 800d682:	6922      	ldr	r2, [r4, #16]
 800d684:	3202      	adds	r2, #2
 800d686:	f104 010c 	add.w	r1, r4, #12
 800d68a:	0092      	lsls	r2, r2, #2
 800d68c:	300c      	adds	r0, #12
 800d68e:	f000 fd9d 	bl	800e1cc <memcpy>
 800d692:	4621      	mov	r1, r4
 800d694:	4638      	mov	r0, r7
 800d696:	f7ff ffa5 	bl	800d5e4 <_Bfree>
 800d69a:	4644      	mov	r4, r8
 800d69c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6a0:	3501      	adds	r5, #1
 800d6a2:	615e      	str	r6, [r3, #20]
 800d6a4:	6125      	str	r5, [r4, #16]
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ac:	08010bfe 	.word	0x08010bfe
 800d6b0:	08010c3b 	.word	0x08010c3b

0800d6b4 <__hi0bits>:
 800d6b4:	0c03      	lsrs	r3, r0, #16
 800d6b6:	041b      	lsls	r3, r3, #16
 800d6b8:	b9d3      	cbnz	r3, 800d6f0 <__hi0bits+0x3c>
 800d6ba:	0400      	lsls	r0, r0, #16
 800d6bc:	2310      	movs	r3, #16
 800d6be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d6c2:	bf04      	itt	eq
 800d6c4:	0200      	lsleq	r0, r0, #8
 800d6c6:	3308      	addeq	r3, #8
 800d6c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d6cc:	bf04      	itt	eq
 800d6ce:	0100      	lsleq	r0, r0, #4
 800d6d0:	3304      	addeq	r3, #4
 800d6d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d6d6:	bf04      	itt	eq
 800d6d8:	0080      	lsleq	r0, r0, #2
 800d6da:	3302      	addeq	r3, #2
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	db05      	blt.n	800d6ec <__hi0bits+0x38>
 800d6e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d6e4:	f103 0301 	add.w	r3, r3, #1
 800d6e8:	bf08      	it	eq
 800d6ea:	2320      	moveq	r3, #32
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	4770      	bx	lr
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	e7e4      	b.n	800d6be <__hi0bits+0xa>

0800d6f4 <__lo0bits>:
 800d6f4:	6803      	ldr	r3, [r0, #0]
 800d6f6:	f013 0207 	ands.w	r2, r3, #7
 800d6fa:	d00c      	beq.n	800d716 <__lo0bits+0x22>
 800d6fc:	07d9      	lsls	r1, r3, #31
 800d6fe:	d422      	bmi.n	800d746 <__lo0bits+0x52>
 800d700:	079a      	lsls	r2, r3, #30
 800d702:	bf49      	itett	mi
 800d704:	085b      	lsrmi	r3, r3, #1
 800d706:	089b      	lsrpl	r3, r3, #2
 800d708:	6003      	strmi	r3, [r0, #0]
 800d70a:	2201      	movmi	r2, #1
 800d70c:	bf5c      	itt	pl
 800d70e:	6003      	strpl	r3, [r0, #0]
 800d710:	2202      	movpl	r2, #2
 800d712:	4610      	mov	r0, r2
 800d714:	4770      	bx	lr
 800d716:	b299      	uxth	r1, r3
 800d718:	b909      	cbnz	r1, 800d71e <__lo0bits+0x2a>
 800d71a:	0c1b      	lsrs	r3, r3, #16
 800d71c:	2210      	movs	r2, #16
 800d71e:	b2d9      	uxtb	r1, r3
 800d720:	b909      	cbnz	r1, 800d726 <__lo0bits+0x32>
 800d722:	3208      	adds	r2, #8
 800d724:	0a1b      	lsrs	r3, r3, #8
 800d726:	0719      	lsls	r1, r3, #28
 800d728:	bf04      	itt	eq
 800d72a:	091b      	lsreq	r3, r3, #4
 800d72c:	3204      	addeq	r2, #4
 800d72e:	0799      	lsls	r1, r3, #30
 800d730:	bf04      	itt	eq
 800d732:	089b      	lsreq	r3, r3, #2
 800d734:	3202      	addeq	r2, #2
 800d736:	07d9      	lsls	r1, r3, #31
 800d738:	d403      	bmi.n	800d742 <__lo0bits+0x4e>
 800d73a:	085b      	lsrs	r3, r3, #1
 800d73c:	f102 0201 	add.w	r2, r2, #1
 800d740:	d003      	beq.n	800d74a <__lo0bits+0x56>
 800d742:	6003      	str	r3, [r0, #0]
 800d744:	e7e5      	b.n	800d712 <__lo0bits+0x1e>
 800d746:	2200      	movs	r2, #0
 800d748:	e7e3      	b.n	800d712 <__lo0bits+0x1e>
 800d74a:	2220      	movs	r2, #32
 800d74c:	e7e1      	b.n	800d712 <__lo0bits+0x1e>
	...

0800d750 <__i2b>:
 800d750:	b510      	push	{r4, lr}
 800d752:	460c      	mov	r4, r1
 800d754:	2101      	movs	r1, #1
 800d756:	f7ff ff05 	bl	800d564 <_Balloc>
 800d75a:	4602      	mov	r2, r0
 800d75c:	b928      	cbnz	r0, 800d76a <__i2b+0x1a>
 800d75e:	4b05      	ldr	r3, [pc, #20]	; (800d774 <__i2b+0x24>)
 800d760:	4805      	ldr	r0, [pc, #20]	; (800d778 <__i2b+0x28>)
 800d762:	f240 1145 	movw	r1, #325	; 0x145
 800d766:	f7fe f8bf 	bl	800b8e8 <__assert_func>
 800d76a:	2301      	movs	r3, #1
 800d76c:	6144      	str	r4, [r0, #20]
 800d76e:	6103      	str	r3, [r0, #16]
 800d770:	bd10      	pop	{r4, pc}
 800d772:	bf00      	nop
 800d774:	08010bfe 	.word	0x08010bfe
 800d778:	08010c3b 	.word	0x08010c3b

0800d77c <__multiply>:
 800d77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d780:	4691      	mov	r9, r2
 800d782:	690a      	ldr	r2, [r1, #16]
 800d784:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d788:	429a      	cmp	r2, r3
 800d78a:	bfb8      	it	lt
 800d78c:	460b      	movlt	r3, r1
 800d78e:	460c      	mov	r4, r1
 800d790:	bfbc      	itt	lt
 800d792:	464c      	movlt	r4, r9
 800d794:	4699      	movlt	r9, r3
 800d796:	6927      	ldr	r7, [r4, #16]
 800d798:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d79c:	68a3      	ldr	r3, [r4, #8]
 800d79e:	6861      	ldr	r1, [r4, #4]
 800d7a0:	eb07 060a 	add.w	r6, r7, sl
 800d7a4:	42b3      	cmp	r3, r6
 800d7a6:	b085      	sub	sp, #20
 800d7a8:	bfb8      	it	lt
 800d7aa:	3101      	addlt	r1, #1
 800d7ac:	f7ff feda 	bl	800d564 <_Balloc>
 800d7b0:	b930      	cbnz	r0, 800d7c0 <__multiply+0x44>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	4b44      	ldr	r3, [pc, #272]	; (800d8c8 <__multiply+0x14c>)
 800d7b6:	4845      	ldr	r0, [pc, #276]	; (800d8cc <__multiply+0x150>)
 800d7b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d7bc:	f7fe f894 	bl	800b8e8 <__assert_func>
 800d7c0:	f100 0514 	add.w	r5, r0, #20
 800d7c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d7c8:	462b      	mov	r3, r5
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	4543      	cmp	r3, r8
 800d7ce:	d321      	bcc.n	800d814 <__multiply+0x98>
 800d7d0:	f104 0314 	add.w	r3, r4, #20
 800d7d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d7d8:	f109 0314 	add.w	r3, r9, #20
 800d7dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d7e0:	9202      	str	r2, [sp, #8]
 800d7e2:	1b3a      	subs	r2, r7, r4
 800d7e4:	3a15      	subs	r2, #21
 800d7e6:	f022 0203 	bic.w	r2, r2, #3
 800d7ea:	3204      	adds	r2, #4
 800d7ec:	f104 0115 	add.w	r1, r4, #21
 800d7f0:	428f      	cmp	r7, r1
 800d7f2:	bf38      	it	cc
 800d7f4:	2204      	movcc	r2, #4
 800d7f6:	9201      	str	r2, [sp, #4]
 800d7f8:	9a02      	ldr	r2, [sp, #8]
 800d7fa:	9303      	str	r3, [sp, #12]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d80c      	bhi.n	800d81a <__multiply+0x9e>
 800d800:	2e00      	cmp	r6, #0
 800d802:	dd03      	ble.n	800d80c <__multiply+0x90>
 800d804:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d05b      	beq.n	800d8c4 <__multiply+0x148>
 800d80c:	6106      	str	r6, [r0, #16]
 800d80e:	b005      	add	sp, #20
 800d810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d814:	f843 2b04 	str.w	r2, [r3], #4
 800d818:	e7d8      	b.n	800d7cc <__multiply+0x50>
 800d81a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d81e:	f1ba 0f00 	cmp.w	sl, #0
 800d822:	d024      	beq.n	800d86e <__multiply+0xf2>
 800d824:	f104 0e14 	add.w	lr, r4, #20
 800d828:	46a9      	mov	r9, r5
 800d82a:	f04f 0c00 	mov.w	ip, #0
 800d82e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d832:	f8d9 1000 	ldr.w	r1, [r9]
 800d836:	fa1f fb82 	uxth.w	fp, r2
 800d83a:	b289      	uxth	r1, r1
 800d83c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d840:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d844:	f8d9 2000 	ldr.w	r2, [r9]
 800d848:	4461      	add	r1, ip
 800d84a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d84e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d852:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d856:	b289      	uxth	r1, r1
 800d858:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d85c:	4577      	cmp	r7, lr
 800d85e:	f849 1b04 	str.w	r1, [r9], #4
 800d862:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d866:	d8e2      	bhi.n	800d82e <__multiply+0xb2>
 800d868:	9a01      	ldr	r2, [sp, #4]
 800d86a:	f845 c002 	str.w	ip, [r5, r2]
 800d86e:	9a03      	ldr	r2, [sp, #12]
 800d870:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d874:	3304      	adds	r3, #4
 800d876:	f1b9 0f00 	cmp.w	r9, #0
 800d87a:	d021      	beq.n	800d8c0 <__multiply+0x144>
 800d87c:	6829      	ldr	r1, [r5, #0]
 800d87e:	f104 0c14 	add.w	ip, r4, #20
 800d882:	46ae      	mov	lr, r5
 800d884:	f04f 0a00 	mov.w	sl, #0
 800d888:	f8bc b000 	ldrh.w	fp, [ip]
 800d88c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d890:	fb09 220b 	mla	r2, r9, fp, r2
 800d894:	4452      	add	r2, sl
 800d896:	b289      	uxth	r1, r1
 800d898:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d89c:	f84e 1b04 	str.w	r1, [lr], #4
 800d8a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d8a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d8a8:	f8be 1000 	ldrh.w	r1, [lr]
 800d8ac:	fb09 110a 	mla	r1, r9, sl, r1
 800d8b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d8b4:	4567      	cmp	r7, ip
 800d8b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d8ba:	d8e5      	bhi.n	800d888 <__multiply+0x10c>
 800d8bc:	9a01      	ldr	r2, [sp, #4]
 800d8be:	50a9      	str	r1, [r5, r2]
 800d8c0:	3504      	adds	r5, #4
 800d8c2:	e799      	b.n	800d7f8 <__multiply+0x7c>
 800d8c4:	3e01      	subs	r6, #1
 800d8c6:	e79b      	b.n	800d800 <__multiply+0x84>
 800d8c8:	08010bfe 	.word	0x08010bfe
 800d8cc:	08010c3b 	.word	0x08010c3b

0800d8d0 <__pow5mult>:
 800d8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8d4:	4615      	mov	r5, r2
 800d8d6:	f012 0203 	ands.w	r2, r2, #3
 800d8da:	4606      	mov	r6, r0
 800d8dc:	460f      	mov	r7, r1
 800d8de:	d007      	beq.n	800d8f0 <__pow5mult+0x20>
 800d8e0:	4c25      	ldr	r4, [pc, #148]	; (800d978 <__pow5mult+0xa8>)
 800d8e2:	3a01      	subs	r2, #1
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d8ea:	f7ff fe9d 	bl	800d628 <__multadd>
 800d8ee:	4607      	mov	r7, r0
 800d8f0:	10ad      	asrs	r5, r5, #2
 800d8f2:	d03d      	beq.n	800d970 <__pow5mult+0xa0>
 800d8f4:	69f4      	ldr	r4, [r6, #28]
 800d8f6:	b97c      	cbnz	r4, 800d918 <__pow5mult+0x48>
 800d8f8:	2010      	movs	r0, #16
 800d8fa:	f7ff fb49 	bl	800cf90 <malloc>
 800d8fe:	4602      	mov	r2, r0
 800d900:	61f0      	str	r0, [r6, #28]
 800d902:	b928      	cbnz	r0, 800d910 <__pow5mult+0x40>
 800d904:	4b1d      	ldr	r3, [pc, #116]	; (800d97c <__pow5mult+0xac>)
 800d906:	481e      	ldr	r0, [pc, #120]	; (800d980 <__pow5mult+0xb0>)
 800d908:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d90c:	f7fd ffec 	bl	800b8e8 <__assert_func>
 800d910:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d914:	6004      	str	r4, [r0, #0]
 800d916:	60c4      	str	r4, [r0, #12]
 800d918:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d91c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d920:	b94c      	cbnz	r4, 800d936 <__pow5mult+0x66>
 800d922:	f240 2171 	movw	r1, #625	; 0x271
 800d926:	4630      	mov	r0, r6
 800d928:	f7ff ff12 	bl	800d750 <__i2b>
 800d92c:	2300      	movs	r3, #0
 800d92e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d932:	4604      	mov	r4, r0
 800d934:	6003      	str	r3, [r0, #0]
 800d936:	f04f 0900 	mov.w	r9, #0
 800d93a:	07eb      	lsls	r3, r5, #31
 800d93c:	d50a      	bpl.n	800d954 <__pow5mult+0x84>
 800d93e:	4639      	mov	r1, r7
 800d940:	4622      	mov	r2, r4
 800d942:	4630      	mov	r0, r6
 800d944:	f7ff ff1a 	bl	800d77c <__multiply>
 800d948:	4639      	mov	r1, r7
 800d94a:	4680      	mov	r8, r0
 800d94c:	4630      	mov	r0, r6
 800d94e:	f7ff fe49 	bl	800d5e4 <_Bfree>
 800d952:	4647      	mov	r7, r8
 800d954:	106d      	asrs	r5, r5, #1
 800d956:	d00b      	beq.n	800d970 <__pow5mult+0xa0>
 800d958:	6820      	ldr	r0, [r4, #0]
 800d95a:	b938      	cbnz	r0, 800d96c <__pow5mult+0x9c>
 800d95c:	4622      	mov	r2, r4
 800d95e:	4621      	mov	r1, r4
 800d960:	4630      	mov	r0, r6
 800d962:	f7ff ff0b 	bl	800d77c <__multiply>
 800d966:	6020      	str	r0, [r4, #0]
 800d968:	f8c0 9000 	str.w	r9, [r0]
 800d96c:	4604      	mov	r4, r0
 800d96e:	e7e4      	b.n	800d93a <__pow5mult+0x6a>
 800d970:	4638      	mov	r0, r7
 800d972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d976:	bf00      	nop
 800d978:	08010d88 	.word	0x08010d88
 800d97c:	08010b8f 	.word	0x08010b8f
 800d980:	08010c3b 	.word	0x08010c3b

0800d984 <__lshift>:
 800d984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d988:	460c      	mov	r4, r1
 800d98a:	6849      	ldr	r1, [r1, #4]
 800d98c:	6923      	ldr	r3, [r4, #16]
 800d98e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d992:	68a3      	ldr	r3, [r4, #8]
 800d994:	4607      	mov	r7, r0
 800d996:	4691      	mov	r9, r2
 800d998:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d99c:	f108 0601 	add.w	r6, r8, #1
 800d9a0:	42b3      	cmp	r3, r6
 800d9a2:	db0b      	blt.n	800d9bc <__lshift+0x38>
 800d9a4:	4638      	mov	r0, r7
 800d9a6:	f7ff fddd 	bl	800d564 <_Balloc>
 800d9aa:	4605      	mov	r5, r0
 800d9ac:	b948      	cbnz	r0, 800d9c2 <__lshift+0x3e>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	4b28      	ldr	r3, [pc, #160]	; (800da54 <__lshift+0xd0>)
 800d9b2:	4829      	ldr	r0, [pc, #164]	; (800da58 <__lshift+0xd4>)
 800d9b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d9b8:	f7fd ff96 	bl	800b8e8 <__assert_func>
 800d9bc:	3101      	adds	r1, #1
 800d9be:	005b      	lsls	r3, r3, #1
 800d9c0:	e7ee      	b.n	800d9a0 <__lshift+0x1c>
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	f100 0114 	add.w	r1, r0, #20
 800d9c8:	f100 0210 	add.w	r2, r0, #16
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	4553      	cmp	r3, sl
 800d9d0:	db33      	blt.n	800da3a <__lshift+0xb6>
 800d9d2:	6920      	ldr	r0, [r4, #16]
 800d9d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d9d8:	f104 0314 	add.w	r3, r4, #20
 800d9dc:	f019 091f 	ands.w	r9, r9, #31
 800d9e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d9e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d9e8:	d02b      	beq.n	800da42 <__lshift+0xbe>
 800d9ea:	f1c9 0e20 	rsb	lr, r9, #32
 800d9ee:	468a      	mov	sl, r1
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	6818      	ldr	r0, [r3, #0]
 800d9f4:	fa00 f009 	lsl.w	r0, r0, r9
 800d9f8:	4310      	orrs	r0, r2
 800d9fa:	f84a 0b04 	str.w	r0, [sl], #4
 800d9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800da02:	459c      	cmp	ip, r3
 800da04:	fa22 f20e 	lsr.w	r2, r2, lr
 800da08:	d8f3      	bhi.n	800d9f2 <__lshift+0x6e>
 800da0a:	ebac 0304 	sub.w	r3, ip, r4
 800da0e:	3b15      	subs	r3, #21
 800da10:	f023 0303 	bic.w	r3, r3, #3
 800da14:	3304      	adds	r3, #4
 800da16:	f104 0015 	add.w	r0, r4, #21
 800da1a:	4584      	cmp	ip, r0
 800da1c:	bf38      	it	cc
 800da1e:	2304      	movcc	r3, #4
 800da20:	50ca      	str	r2, [r1, r3]
 800da22:	b10a      	cbz	r2, 800da28 <__lshift+0xa4>
 800da24:	f108 0602 	add.w	r6, r8, #2
 800da28:	3e01      	subs	r6, #1
 800da2a:	4638      	mov	r0, r7
 800da2c:	612e      	str	r6, [r5, #16]
 800da2e:	4621      	mov	r1, r4
 800da30:	f7ff fdd8 	bl	800d5e4 <_Bfree>
 800da34:	4628      	mov	r0, r5
 800da36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800da3e:	3301      	adds	r3, #1
 800da40:	e7c5      	b.n	800d9ce <__lshift+0x4a>
 800da42:	3904      	subs	r1, #4
 800da44:	f853 2b04 	ldr.w	r2, [r3], #4
 800da48:	f841 2f04 	str.w	r2, [r1, #4]!
 800da4c:	459c      	cmp	ip, r3
 800da4e:	d8f9      	bhi.n	800da44 <__lshift+0xc0>
 800da50:	e7ea      	b.n	800da28 <__lshift+0xa4>
 800da52:	bf00      	nop
 800da54:	08010bfe 	.word	0x08010bfe
 800da58:	08010c3b 	.word	0x08010c3b

0800da5c <__mcmp>:
 800da5c:	b530      	push	{r4, r5, lr}
 800da5e:	6902      	ldr	r2, [r0, #16]
 800da60:	690c      	ldr	r4, [r1, #16]
 800da62:	1b12      	subs	r2, r2, r4
 800da64:	d10e      	bne.n	800da84 <__mcmp+0x28>
 800da66:	f100 0314 	add.w	r3, r0, #20
 800da6a:	3114      	adds	r1, #20
 800da6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800da70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800da74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800da78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800da7c:	42a5      	cmp	r5, r4
 800da7e:	d003      	beq.n	800da88 <__mcmp+0x2c>
 800da80:	d305      	bcc.n	800da8e <__mcmp+0x32>
 800da82:	2201      	movs	r2, #1
 800da84:	4610      	mov	r0, r2
 800da86:	bd30      	pop	{r4, r5, pc}
 800da88:	4283      	cmp	r3, r0
 800da8a:	d3f3      	bcc.n	800da74 <__mcmp+0x18>
 800da8c:	e7fa      	b.n	800da84 <__mcmp+0x28>
 800da8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da92:	e7f7      	b.n	800da84 <__mcmp+0x28>

0800da94 <__mdiff>:
 800da94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da98:	460c      	mov	r4, r1
 800da9a:	4606      	mov	r6, r0
 800da9c:	4611      	mov	r1, r2
 800da9e:	4620      	mov	r0, r4
 800daa0:	4690      	mov	r8, r2
 800daa2:	f7ff ffdb 	bl	800da5c <__mcmp>
 800daa6:	1e05      	subs	r5, r0, #0
 800daa8:	d110      	bne.n	800dacc <__mdiff+0x38>
 800daaa:	4629      	mov	r1, r5
 800daac:	4630      	mov	r0, r6
 800daae:	f7ff fd59 	bl	800d564 <_Balloc>
 800dab2:	b930      	cbnz	r0, 800dac2 <__mdiff+0x2e>
 800dab4:	4b3a      	ldr	r3, [pc, #232]	; (800dba0 <__mdiff+0x10c>)
 800dab6:	4602      	mov	r2, r0
 800dab8:	f240 2137 	movw	r1, #567	; 0x237
 800dabc:	4839      	ldr	r0, [pc, #228]	; (800dba4 <__mdiff+0x110>)
 800dabe:	f7fd ff13 	bl	800b8e8 <__assert_func>
 800dac2:	2301      	movs	r3, #1
 800dac4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dacc:	bfa4      	itt	ge
 800dace:	4643      	movge	r3, r8
 800dad0:	46a0      	movge	r8, r4
 800dad2:	4630      	mov	r0, r6
 800dad4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dad8:	bfa6      	itte	ge
 800dada:	461c      	movge	r4, r3
 800dadc:	2500      	movge	r5, #0
 800dade:	2501      	movlt	r5, #1
 800dae0:	f7ff fd40 	bl	800d564 <_Balloc>
 800dae4:	b920      	cbnz	r0, 800daf0 <__mdiff+0x5c>
 800dae6:	4b2e      	ldr	r3, [pc, #184]	; (800dba0 <__mdiff+0x10c>)
 800dae8:	4602      	mov	r2, r0
 800daea:	f240 2145 	movw	r1, #581	; 0x245
 800daee:	e7e5      	b.n	800dabc <__mdiff+0x28>
 800daf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800daf4:	6926      	ldr	r6, [r4, #16]
 800daf6:	60c5      	str	r5, [r0, #12]
 800daf8:	f104 0914 	add.w	r9, r4, #20
 800dafc:	f108 0514 	add.w	r5, r8, #20
 800db00:	f100 0e14 	add.w	lr, r0, #20
 800db04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800db08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800db0c:	f108 0210 	add.w	r2, r8, #16
 800db10:	46f2      	mov	sl, lr
 800db12:	2100      	movs	r1, #0
 800db14:	f859 3b04 	ldr.w	r3, [r9], #4
 800db18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800db1c:	fa11 f88b 	uxtah	r8, r1, fp
 800db20:	b299      	uxth	r1, r3
 800db22:	0c1b      	lsrs	r3, r3, #16
 800db24:	eba8 0801 	sub.w	r8, r8, r1
 800db28:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800db2c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800db30:	fa1f f888 	uxth.w	r8, r8
 800db34:	1419      	asrs	r1, r3, #16
 800db36:	454e      	cmp	r6, r9
 800db38:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800db3c:	f84a 3b04 	str.w	r3, [sl], #4
 800db40:	d8e8      	bhi.n	800db14 <__mdiff+0x80>
 800db42:	1b33      	subs	r3, r6, r4
 800db44:	3b15      	subs	r3, #21
 800db46:	f023 0303 	bic.w	r3, r3, #3
 800db4a:	3304      	adds	r3, #4
 800db4c:	3415      	adds	r4, #21
 800db4e:	42a6      	cmp	r6, r4
 800db50:	bf38      	it	cc
 800db52:	2304      	movcc	r3, #4
 800db54:	441d      	add	r5, r3
 800db56:	4473      	add	r3, lr
 800db58:	469e      	mov	lr, r3
 800db5a:	462e      	mov	r6, r5
 800db5c:	4566      	cmp	r6, ip
 800db5e:	d30e      	bcc.n	800db7e <__mdiff+0xea>
 800db60:	f10c 0203 	add.w	r2, ip, #3
 800db64:	1b52      	subs	r2, r2, r5
 800db66:	f022 0203 	bic.w	r2, r2, #3
 800db6a:	3d03      	subs	r5, #3
 800db6c:	45ac      	cmp	ip, r5
 800db6e:	bf38      	it	cc
 800db70:	2200      	movcc	r2, #0
 800db72:	4413      	add	r3, r2
 800db74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800db78:	b17a      	cbz	r2, 800db9a <__mdiff+0x106>
 800db7a:	6107      	str	r7, [r0, #16]
 800db7c:	e7a4      	b.n	800dac8 <__mdiff+0x34>
 800db7e:	f856 8b04 	ldr.w	r8, [r6], #4
 800db82:	fa11 f288 	uxtah	r2, r1, r8
 800db86:	1414      	asrs	r4, r2, #16
 800db88:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800db8c:	b292      	uxth	r2, r2
 800db8e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800db92:	f84e 2b04 	str.w	r2, [lr], #4
 800db96:	1421      	asrs	r1, r4, #16
 800db98:	e7e0      	b.n	800db5c <__mdiff+0xc8>
 800db9a:	3f01      	subs	r7, #1
 800db9c:	e7ea      	b.n	800db74 <__mdiff+0xe0>
 800db9e:	bf00      	nop
 800dba0:	08010bfe 	.word	0x08010bfe
 800dba4:	08010c3b 	.word	0x08010c3b

0800dba8 <__d2b>:
 800dba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbac:	460f      	mov	r7, r1
 800dbae:	2101      	movs	r1, #1
 800dbb0:	ec59 8b10 	vmov	r8, r9, d0
 800dbb4:	4616      	mov	r6, r2
 800dbb6:	f7ff fcd5 	bl	800d564 <_Balloc>
 800dbba:	4604      	mov	r4, r0
 800dbbc:	b930      	cbnz	r0, 800dbcc <__d2b+0x24>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	4b24      	ldr	r3, [pc, #144]	; (800dc54 <__d2b+0xac>)
 800dbc2:	4825      	ldr	r0, [pc, #148]	; (800dc58 <__d2b+0xb0>)
 800dbc4:	f240 310f 	movw	r1, #783	; 0x30f
 800dbc8:	f7fd fe8e 	bl	800b8e8 <__assert_func>
 800dbcc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dbd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dbd4:	bb2d      	cbnz	r5, 800dc22 <__d2b+0x7a>
 800dbd6:	9301      	str	r3, [sp, #4]
 800dbd8:	f1b8 0300 	subs.w	r3, r8, #0
 800dbdc:	d026      	beq.n	800dc2c <__d2b+0x84>
 800dbde:	4668      	mov	r0, sp
 800dbe0:	9300      	str	r3, [sp, #0]
 800dbe2:	f7ff fd87 	bl	800d6f4 <__lo0bits>
 800dbe6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dbea:	b1e8      	cbz	r0, 800dc28 <__d2b+0x80>
 800dbec:	f1c0 0320 	rsb	r3, r0, #32
 800dbf0:	fa02 f303 	lsl.w	r3, r2, r3
 800dbf4:	430b      	orrs	r3, r1
 800dbf6:	40c2      	lsrs	r2, r0
 800dbf8:	6163      	str	r3, [r4, #20]
 800dbfa:	9201      	str	r2, [sp, #4]
 800dbfc:	9b01      	ldr	r3, [sp, #4]
 800dbfe:	61a3      	str	r3, [r4, #24]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	bf14      	ite	ne
 800dc04:	2202      	movne	r2, #2
 800dc06:	2201      	moveq	r2, #1
 800dc08:	6122      	str	r2, [r4, #16]
 800dc0a:	b1bd      	cbz	r5, 800dc3c <__d2b+0x94>
 800dc0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dc10:	4405      	add	r5, r0
 800dc12:	603d      	str	r5, [r7, #0]
 800dc14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dc18:	6030      	str	r0, [r6, #0]
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	b003      	add	sp, #12
 800dc1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc26:	e7d6      	b.n	800dbd6 <__d2b+0x2e>
 800dc28:	6161      	str	r1, [r4, #20]
 800dc2a:	e7e7      	b.n	800dbfc <__d2b+0x54>
 800dc2c:	a801      	add	r0, sp, #4
 800dc2e:	f7ff fd61 	bl	800d6f4 <__lo0bits>
 800dc32:	9b01      	ldr	r3, [sp, #4]
 800dc34:	6163      	str	r3, [r4, #20]
 800dc36:	3020      	adds	r0, #32
 800dc38:	2201      	movs	r2, #1
 800dc3a:	e7e5      	b.n	800dc08 <__d2b+0x60>
 800dc3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc44:	6038      	str	r0, [r7, #0]
 800dc46:	6918      	ldr	r0, [r3, #16]
 800dc48:	f7ff fd34 	bl	800d6b4 <__hi0bits>
 800dc4c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dc50:	e7e2      	b.n	800dc18 <__d2b+0x70>
 800dc52:	bf00      	nop
 800dc54:	08010bfe 	.word	0x08010bfe
 800dc58:	08010c3b 	.word	0x08010c3b

0800dc5c <fiprintf>:
 800dc5c:	b40e      	push	{r1, r2, r3}
 800dc5e:	b503      	push	{r0, r1, lr}
 800dc60:	4601      	mov	r1, r0
 800dc62:	ab03      	add	r3, sp, #12
 800dc64:	4805      	ldr	r0, [pc, #20]	; (800dc7c <fiprintf+0x20>)
 800dc66:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc6a:	6800      	ldr	r0, [r0, #0]
 800dc6c:	9301      	str	r3, [sp, #4]
 800dc6e:	f7ff f875 	bl	800cd5c <_vfiprintf_r>
 800dc72:	b002      	add	sp, #8
 800dc74:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc78:	b003      	add	sp, #12
 800dc7a:	4770      	bx	lr
 800dc7c:	2000009c 	.word	0x2000009c

0800dc80 <__submore>:
 800dc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc84:	460c      	mov	r4, r1
 800dc86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dc88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc8c:	4299      	cmp	r1, r3
 800dc8e:	d11d      	bne.n	800dccc <__submore+0x4c>
 800dc90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dc94:	f7ff f9a4 	bl	800cfe0 <_malloc_r>
 800dc98:	b918      	cbnz	r0, 800dca2 <__submore+0x22>
 800dc9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dca6:	63a3      	str	r3, [r4, #56]	; 0x38
 800dca8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dcac:	6360      	str	r0, [r4, #52]	; 0x34
 800dcae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800dcb2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dcb6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800dcba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dcbe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800dcc2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800dcc6:	6020      	str	r0, [r4, #0]
 800dcc8:	2000      	movs	r0, #0
 800dcca:	e7e8      	b.n	800dc9e <__submore+0x1e>
 800dccc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dcce:	0077      	lsls	r7, r6, #1
 800dcd0:	463a      	mov	r2, r7
 800dcd2:	f000 f80f 	bl	800dcf4 <_realloc_r>
 800dcd6:	4605      	mov	r5, r0
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	d0de      	beq.n	800dc9a <__submore+0x1a>
 800dcdc:	eb00 0806 	add.w	r8, r0, r6
 800dce0:	4601      	mov	r1, r0
 800dce2:	4632      	mov	r2, r6
 800dce4:	4640      	mov	r0, r8
 800dce6:	f000 fa71 	bl	800e1cc <memcpy>
 800dcea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800dcee:	f8c4 8000 	str.w	r8, [r4]
 800dcf2:	e7e9      	b.n	800dcc8 <__submore+0x48>

0800dcf4 <_realloc_r>:
 800dcf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcf8:	4680      	mov	r8, r0
 800dcfa:	4614      	mov	r4, r2
 800dcfc:	460e      	mov	r6, r1
 800dcfe:	b921      	cbnz	r1, 800dd0a <_realloc_r+0x16>
 800dd00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd04:	4611      	mov	r1, r2
 800dd06:	f7ff b96b 	b.w	800cfe0 <_malloc_r>
 800dd0a:	b92a      	cbnz	r2, 800dd18 <_realloc_r+0x24>
 800dd0c:	f7fe fc86 	bl	800c61c <_free_r>
 800dd10:	4625      	mov	r5, r4
 800dd12:	4628      	mov	r0, r5
 800dd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd18:	f000 fa95 	bl	800e246 <_malloc_usable_size_r>
 800dd1c:	4284      	cmp	r4, r0
 800dd1e:	4607      	mov	r7, r0
 800dd20:	d802      	bhi.n	800dd28 <_realloc_r+0x34>
 800dd22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd26:	d812      	bhi.n	800dd4e <_realloc_r+0x5a>
 800dd28:	4621      	mov	r1, r4
 800dd2a:	4640      	mov	r0, r8
 800dd2c:	f7ff f958 	bl	800cfe0 <_malloc_r>
 800dd30:	4605      	mov	r5, r0
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d0ed      	beq.n	800dd12 <_realloc_r+0x1e>
 800dd36:	42bc      	cmp	r4, r7
 800dd38:	4622      	mov	r2, r4
 800dd3a:	4631      	mov	r1, r6
 800dd3c:	bf28      	it	cs
 800dd3e:	463a      	movcs	r2, r7
 800dd40:	f000 fa44 	bl	800e1cc <memcpy>
 800dd44:	4631      	mov	r1, r6
 800dd46:	4640      	mov	r0, r8
 800dd48:	f7fe fc68 	bl	800c61c <_free_r>
 800dd4c:	e7e1      	b.n	800dd12 <_realloc_r+0x1e>
 800dd4e:	4635      	mov	r5, r6
 800dd50:	e7df      	b.n	800dd12 <_realloc_r+0x1e>
	...

0800dd54 <_strtol_l.constprop.0>:
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd5a:	d001      	beq.n	800dd60 <_strtol_l.constprop.0+0xc>
 800dd5c:	2b24      	cmp	r3, #36	; 0x24
 800dd5e:	d906      	bls.n	800dd6e <_strtol_l.constprop.0+0x1a>
 800dd60:	f7fd fd94 	bl	800b88c <__errno>
 800dd64:	2316      	movs	r3, #22
 800dd66:	6003      	str	r3, [r0, #0]
 800dd68:	2000      	movs	r0, #0
 800dd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd6e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800de54 <_strtol_l.constprop.0+0x100>
 800dd72:	460d      	mov	r5, r1
 800dd74:	462e      	mov	r6, r5
 800dd76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd7a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800dd7e:	f017 0708 	ands.w	r7, r7, #8
 800dd82:	d1f7      	bne.n	800dd74 <_strtol_l.constprop.0+0x20>
 800dd84:	2c2d      	cmp	r4, #45	; 0x2d
 800dd86:	d132      	bne.n	800ddee <_strtol_l.constprop.0+0x9a>
 800dd88:	782c      	ldrb	r4, [r5, #0]
 800dd8a:	2701      	movs	r7, #1
 800dd8c:	1cb5      	adds	r5, r6, #2
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d05b      	beq.n	800de4a <_strtol_l.constprop.0+0xf6>
 800dd92:	2b10      	cmp	r3, #16
 800dd94:	d109      	bne.n	800ddaa <_strtol_l.constprop.0+0x56>
 800dd96:	2c30      	cmp	r4, #48	; 0x30
 800dd98:	d107      	bne.n	800ddaa <_strtol_l.constprop.0+0x56>
 800dd9a:	782c      	ldrb	r4, [r5, #0]
 800dd9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dda0:	2c58      	cmp	r4, #88	; 0x58
 800dda2:	d14d      	bne.n	800de40 <_strtol_l.constprop.0+0xec>
 800dda4:	786c      	ldrb	r4, [r5, #1]
 800dda6:	2310      	movs	r3, #16
 800dda8:	3502      	adds	r5, #2
 800ddaa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ddae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ddb2:	f04f 0e00 	mov.w	lr, #0
 800ddb6:	fbb8 f9f3 	udiv	r9, r8, r3
 800ddba:	4676      	mov	r6, lr
 800ddbc:	fb03 8a19 	mls	sl, r3, r9, r8
 800ddc0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ddc4:	f1bc 0f09 	cmp.w	ip, #9
 800ddc8:	d816      	bhi.n	800ddf8 <_strtol_l.constprop.0+0xa4>
 800ddca:	4664      	mov	r4, ip
 800ddcc:	42a3      	cmp	r3, r4
 800ddce:	dd24      	ble.n	800de1a <_strtol_l.constprop.0+0xc6>
 800ddd0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800ddd4:	d008      	beq.n	800dde8 <_strtol_l.constprop.0+0x94>
 800ddd6:	45b1      	cmp	r9, r6
 800ddd8:	d31c      	bcc.n	800de14 <_strtol_l.constprop.0+0xc0>
 800ddda:	d101      	bne.n	800dde0 <_strtol_l.constprop.0+0x8c>
 800dddc:	45a2      	cmp	sl, r4
 800ddde:	db19      	blt.n	800de14 <_strtol_l.constprop.0+0xc0>
 800dde0:	fb06 4603 	mla	r6, r6, r3, r4
 800dde4:	f04f 0e01 	mov.w	lr, #1
 800dde8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddec:	e7e8      	b.n	800ddc0 <_strtol_l.constprop.0+0x6c>
 800ddee:	2c2b      	cmp	r4, #43	; 0x2b
 800ddf0:	bf04      	itt	eq
 800ddf2:	782c      	ldrbeq	r4, [r5, #0]
 800ddf4:	1cb5      	addeq	r5, r6, #2
 800ddf6:	e7ca      	b.n	800dd8e <_strtol_l.constprop.0+0x3a>
 800ddf8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ddfc:	f1bc 0f19 	cmp.w	ip, #25
 800de00:	d801      	bhi.n	800de06 <_strtol_l.constprop.0+0xb2>
 800de02:	3c37      	subs	r4, #55	; 0x37
 800de04:	e7e2      	b.n	800ddcc <_strtol_l.constprop.0+0x78>
 800de06:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800de0a:	f1bc 0f19 	cmp.w	ip, #25
 800de0e:	d804      	bhi.n	800de1a <_strtol_l.constprop.0+0xc6>
 800de10:	3c57      	subs	r4, #87	; 0x57
 800de12:	e7db      	b.n	800ddcc <_strtol_l.constprop.0+0x78>
 800de14:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800de18:	e7e6      	b.n	800dde8 <_strtol_l.constprop.0+0x94>
 800de1a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800de1e:	d105      	bne.n	800de2c <_strtol_l.constprop.0+0xd8>
 800de20:	2322      	movs	r3, #34	; 0x22
 800de22:	6003      	str	r3, [r0, #0]
 800de24:	4646      	mov	r6, r8
 800de26:	b942      	cbnz	r2, 800de3a <_strtol_l.constprop.0+0xe6>
 800de28:	4630      	mov	r0, r6
 800de2a:	e79e      	b.n	800dd6a <_strtol_l.constprop.0+0x16>
 800de2c:	b107      	cbz	r7, 800de30 <_strtol_l.constprop.0+0xdc>
 800de2e:	4276      	negs	r6, r6
 800de30:	2a00      	cmp	r2, #0
 800de32:	d0f9      	beq.n	800de28 <_strtol_l.constprop.0+0xd4>
 800de34:	f1be 0f00 	cmp.w	lr, #0
 800de38:	d000      	beq.n	800de3c <_strtol_l.constprop.0+0xe8>
 800de3a:	1e69      	subs	r1, r5, #1
 800de3c:	6011      	str	r1, [r2, #0]
 800de3e:	e7f3      	b.n	800de28 <_strtol_l.constprop.0+0xd4>
 800de40:	2430      	movs	r4, #48	; 0x30
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1b1      	bne.n	800ddaa <_strtol_l.constprop.0+0x56>
 800de46:	2308      	movs	r3, #8
 800de48:	e7af      	b.n	800ddaa <_strtol_l.constprop.0+0x56>
 800de4a:	2c30      	cmp	r4, #48	; 0x30
 800de4c:	d0a5      	beq.n	800dd9a <_strtol_l.constprop.0+0x46>
 800de4e:	230a      	movs	r3, #10
 800de50:	e7ab      	b.n	800ddaa <_strtol_l.constprop.0+0x56>
 800de52:	bf00      	nop
 800de54:	08010d9f 	.word	0x08010d9f

0800de58 <_strtol_r>:
 800de58:	f7ff bf7c 	b.w	800dd54 <_strtol_l.constprop.0>

0800de5c <_strtoul_l.constprop.0>:
 800de5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de60:	4f36      	ldr	r7, [pc, #216]	; (800df3c <_strtoul_l.constprop.0+0xe0>)
 800de62:	4686      	mov	lr, r0
 800de64:	460d      	mov	r5, r1
 800de66:	4628      	mov	r0, r5
 800de68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de6c:	5d3e      	ldrb	r6, [r7, r4]
 800de6e:	f016 0608 	ands.w	r6, r6, #8
 800de72:	d1f8      	bne.n	800de66 <_strtoul_l.constprop.0+0xa>
 800de74:	2c2d      	cmp	r4, #45	; 0x2d
 800de76:	d130      	bne.n	800deda <_strtoul_l.constprop.0+0x7e>
 800de78:	782c      	ldrb	r4, [r5, #0]
 800de7a:	2601      	movs	r6, #1
 800de7c:	1c85      	adds	r5, r0, #2
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d057      	beq.n	800df32 <_strtoul_l.constprop.0+0xd6>
 800de82:	2b10      	cmp	r3, #16
 800de84:	d109      	bne.n	800de9a <_strtoul_l.constprop.0+0x3e>
 800de86:	2c30      	cmp	r4, #48	; 0x30
 800de88:	d107      	bne.n	800de9a <_strtoul_l.constprop.0+0x3e>
 800de8a:	7828      	ldrb	r0, [r5, #0]
 800de8c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800de90:	2858      	cmp	r0, #88	; 0x58
 800de92:	d149      	bne.n	800df28 <_strtoul_l.constprop.0+0xcc>
 800de94:	786c      	ldrb	r4, [r5, #1]
 800de96:	2310      	movs	r3, #16
 800de98:	3502      	adds	r5, #2
 800de9a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800de9e:	2700      	movs	r7, #0
 800dea0:	fbb8 f8f3 	udiv	r8, r8, r3
 800dea4:	fb03 f908 	mul.w	r9, r3, r8
 800dea8:	ea6f 0909 	mvn.w	r9, r9
 800deac:	4638      	mov	r0, r7
 800deae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800deb2:	f1bc 0f09 	cmp.w	ip, #9
 800deb6:	d815      	bhi.n	800dee4 <_strtoul_l.constprop.0+0x88>
 800deb8:	4664      	mov	r4, ip
 800deba:	42a3      	cmp	r3, r4
 800debc:	dd23      	ble.n	800df06 <_strtoul_l.constprop.0+0xaa>
 800debe:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800dec2:	d007      	beq.n	800ded4 <_strtoul_l.constprop.0+0x78>
 800dec4:	4580      	cmp	r8, r0
 800dec6:	d31b      	bcc.n	800df00 <_strtoul_l.constprop.0+0xa4>
 800dec8:	d101      	bne.n	800dece <_strtoul_l.constprop.0+0x72>
 800deca:	45a1      	cmp	r9, r4
 800decc:	db18      	blt.n	800df00 <_strtoul_l.constprop.0+0xa4>
 800dece:	fb00 4003 	mla	r0, r0, r3, r4
 800ded2:	2701      	movs	r7, #1
 800ded4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ded8:	e7e9      	b.n	800deae <_strtoul_l.constprop.0+0x52>
 800deda:	2c2b      	cmp	r4, #43	; 0x2b
 800dedc:	bf04      	itt	eq
 800dede:	782c      	ldrbeq	r4, [r5, #0]
 800dee0:	1c85      	addeq	r5, r0, #2
 800dee2:	e7cc      	b.n	800de7e <_strtoul_l.constprop.0+0x22>
 800dee4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dee8:	f1bc 0f19 	cmp.w	ip, #25
 800deec:	d801      	bhi.n	800def2 <_strtoul_l.constprop.0+0x96>
 800deee:	3c37      	subs	r4, #55	; 0x37
 800def0:	e7e3      	b.n	800deba <_strtoul_l.constprop.0+0x5e>
 800def2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800def6:	f1bc 0f19 	cmp.w	ip, #25
 800defa:	d804      	bhi.n	800df06 <_strtoul_l.constprop.0+0xaa>
 800defc:	3c57      	subs	r4, #87	; 0x57
 800defe:	e7dc      	b.n	800deba <_strtoul_l.constprop.0+0x5e>
 800df00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800df04:	e7e6      	b.n	800ded4 <_strtoul_l.constprop.0+0x78>
 800df06:	1c7b      	adds	r3, r7, #1
 800df08:	d106      	bne.n	800df18 <_strtoul_l.constprop.0+0xbc>
 800df0a:	2322      	movs	r3, #34	; 0x22
 800df0c:	f8ce 3000 	str.w	r3, [lr]
 800df10:	4638      	mov	r0, r7
 800df12:	b932      	cbnz	r2, 800df22 <_strtoul_l.constprop.0+0xc6>
 800df14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df18:	b106      	cbz	r6, 800df1c <_strtoul_l.constprop.0+0xc0>
 800df1a:	4240      	negs	r0, r0
 800df1c:	2a00      	cmp	r2, #0
 800df1e:	d0f9      	beq.n	800df14 <_strtoul_l.constprop.0+0xb8>
 800df20:	b107      	cbz	r7, 800df24 <_strtoul_l.constprop.0+0xc8>
 800df22:	1e69      	subs	r1, r5, #1
 800df24:	6011      	str	r1, [r2, #0]
 800df26:	e7f5      	b.n	800df14 <_strtoul_l.constprop.0+0xb8>
 800df28:	2430      	movs	r4, #48	; 0x30
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1b5      	bne.n	800de9a <_strtoul_l.constprop.0+0x3e>
 800df2e:	2308      	movs	r3, #8
 800df30:	e7b3      	b.n	800de9a <_strtoul_l.constprop.0+0x3e>
 800df32:	2c30      	cmp	r4, #48	; 0x30
 800df34:	d0a9      	beq.n	800de8a <_strtoul_l.constprop.0+0x2e>
 800df36:	230a      	movs	r3, #10
 800df38:	e7af      	b.n	800de9a <_strtoul_l.constprop.0+0x3e>
 800df3a:	bf00      	nop
 800df3c:	08010d9f 	.word	0x08010d9f

0800df40 <_strtoul_r>:
 800df40:	f7ff bf8c 	b.w	800de5c <_strtoul_l.constprop.0>

0800df44 <__swbuf_r>:
 800df44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df46:	460e      	mov	r6, r1
 800df48:	4614      	mov	r4, r2
 800df4a:	4605      	mov	r5, r0
 800df4c:	b118      	cbz	r0, 800df56 <__swbuf_r+0x12>
 800df4e:	6a03      	ldr	r3, [r0, #32]
 800df50:	b90b      	cbnz	r3, 800df56 <__swbuf_r+0x12>
 800df52:	f7fd fbc7 	bl	800b6e4 <__sinit>
 800df56:	69a3      	ldr	r3, [r4, #24]
 800df58:	60a3      	str	r3, [r4, #8]
 800df5a:	89a3      	ldrh	r3, [r4, #12]
 800df5c:	071a      	lsls	r2, r3, #28
 800df5e:	d525      	bpl.n	800dfac <__swbuf_r+0x68>
 800df60:	6923      	ldr	r3, [r4, #16]
 800df62:	b31b      	cbz	r3, 800dfac <__swbuf_r+0x68>
 800df64:	6823      	ldr	r3, [r4, #0]
 800df66:	6922      	ldr	r2, [r4, #16]
 800df68:	1a98      	subs	r0, r3, r2
 800df6a:	6963      	ldr	r3, [r4, #20]
 800df6c:	b2f6      	uxtb	r6, r6
 800df6e:	4283      	cmp	r3, r0
 800df70:	4637      	mov	r7, r6
 800df72:	dc04      	bgt.n	800df7e <__swbuf_r+0x3a>
 800df74:	4621      	mov	r1, r4
 800df76:	4628      	mov	r0, r5
 800df78:	f7ff fac0 	bl	800d4fc <_fflush_r>
 800df7c:	b9e0      	cbnz	r0, 800dfb8 <__swbuf_r+0x74>
 800df7e:	68a3      	ldr	r3, [r4, #8]
 800df80:	3b01      	subs	r3, #1
 800df82:	60a3      	str	r3, [r4, #8]
 800df84:	6823      	ldr	r3, [r4, #0]
 800df86:	1c5a      	adds	r2, r3, #1
 800df88:	6022      	str	r2, [r4, #0]
 800df8a:	701e      	strb	r6, [r3, #0]
 800df8c:	6962      	ldr	r2, [r4, #20]
 800df8e:	1c43      	adds	r3, r0, #1
 800df90:	429a      	cmp	r2, r3
 800df92:	d004      	beq.n	800df9e <__swbuf_r+0x5a>
 800df94:	89a3      	ldrh	r3, [r4, #12]
 800df96:	07db      	lsls	r3, r3, #31
 800df98:	d506      	bpl.n	800dfa8 <__swbuf_r+0x64>
 800df9a:	2e0a      	cmp	r6, #10
 800df9c:	d104      	bne.n	800dfa8 <__swbuf_r+0x64>
 800df9e:	4621      	mov	r1, r4
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	f7ff faab 	bl	800d4fc <_fflush_r>
 800dfa6:	b938      	cbnz	r0, 800dfb8 <__swbuf_r+0x74>
 800dfa8:	4638      	mov	r0, r7
 800dfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfac:	4621      	mov	r1, r4
 800dfae:	4628      	mov	r0, r5
 800dfb0:	f000 f806 	bl	800dfc0 <__swsetup_r>
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	d0d5      	beq.n	800df64 <__swbuf_r+0x20>
 800dfb8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dfbc:	e7f4      	b.n	800dfa8 <__swbuf_r+0x64>
	...

0800dfc0 <__swsetup_r>:
 800dfc0:	b538      	push	{r3, r4, r5, lr}
 800dfc2:	4b2a      	ldr	r3, [pc, #168]	; (800e06c <__swsetup_r+0xac>)
 800dfc4:	4605      	mov	r5, r0
 800dfc6:	6818      	ldr	r0, [r3, #0]
 800dfc8:	460c      	mov	r4, r1
 800dfca:	b118      	cbz	r0, 800dfd4 <__swsetup_r+0x14>
 800dfcc:	6a03      	ldr	r3, [r0, #32]
 800dfce:	b90b      	cbnz	r3, 800dfd4 <__swsetup_r+0x14>
 800dfd0:	f7fd fb88 	bl	800b6e4 <__sinit>
 800dfd4:	89a3      	ldrh	r3, [r4, #12]
 800dfd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfda:	0718      	lsls	r0, r3, #28
 800dfdc:	d422      	bmi.n	800e024 <__swsetup_r+0x64>
 800dfde:	06d9      	lsls	r1, r3, #27
 800dfe0:	d407      	bmi.n	800dff2 <__swsetup_r+0x32>
 800dfe2:	2309      	movs	r3, #9
 800dfe4:	602b      	str	r3, [r5, #0]
 800dfe6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dfea:	81a3      	strh	r3, [r4, #12]
 800dfec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dff0:	e034      	b.n	800e05c <__swsetup_r+0x9c>
 800dff2:	0758      	lsls	r0, r3, #29
 800dff4:	d512      	bpl.n	800e01c <__swsetup_r+0x5c>
 800dff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dff8:	b141      	cbz	r1, 800e00c <__swsetup_r+0x4c>
 800dffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dffe:	4299      	cmp	r1, r3
 800e000:	d002      	beq.n	800e008 <__swsetup_r+0x48>
 800e002:	4628      	mov	r0, r5
 800e004:	f7fe fb0a 	bl	800c61c <_free_r>
 800e008:	2300      	movs	r3, #0
 800e00a:	6363      	str	r3, [r4, #52]	; 0x34
 800e00c:	89a3      	ldrh	r3, [r4, #12]
 800e00e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e012:	81a3      	strh	r3, [r4, #12]
 800e014:	2300      	movs	r3, #0
 800e016:	6063      	str	r3, [r4, #4]
 800e018:	6923      	ldr	r3, [r4, #16]
 800e01a:	6023      	str	r3, [r4, #0]
 800e01c:	89a3      	ldrh	r3, [r4, #12]
 800e01e:	f043 0308 	orr.w	r3, r3, #8
 800e022:	81a3      	strh	r3, [r4, #12]
 800e024:	6923      	ldr	r3, [r4, #16]
 800e026:	b94b      	cbnz	r3, 800e03c <__swsetup_r+0x7c>
 800e028:	89a3      	ldrh	r3, [r4, #12]
 800e02a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e02e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e032:	d003      	beq.n	800e03c <__swsetup_r+0x7c>
 800e034:	4621      	mov	r1, r4
 800e036:	4628      	mov	r0, r5
 800e038:	f000 f840 	bl	800e0bc <__smakebuf_r>
 800e03c:	89a0      	ldrh	r0, [r4, #12]
 800e03e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e042:	f010 0301 	ands.w	r3, r0, #1
 800e046:	d00a      	beq.n	800e05e <__swsetup_r+0x9e>
 800e048:	2300      	movs	r3, #0
 800e04a:	60a3      	str	r3, [r4, #8]
 800e04c:	6963      	ldr	r3, [r4, #20]
 800e04e:	425b      	negs	r3, r3
 800e050:	61a3      	str	r3, [r4, #24]
 800e052:	6923      	ldr	r3, [r4, #16]
 800e054:	b943      	cbnz	r3, 800e068 <__swsetup_r+0xa8>
 800e056:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e05a:	d1c4      	bne.n	800dfe6 <__swsetup_r+0x26>
 800e05c:	bd38      	pop	{r3, r4, r5, pc}
 800e05e:	0781      	lsls	r1, r0, #30
 800e060:	bf58      	it	pl
 800e062:	6963      	ldrpl	r3, [r4, #20]
 800e064:	60a3      	str	r3, [r4, #8]
 800e066:	e7f4      	b.n	800e052 <__swsetup_r+0x92>
 800e068:	2000      	movs	r0, #0
 800e06a:	e7f7      	b.n	800e05c <__swsetup_r+0x9c>
 800e06c:	2000009c 	.word	0x2000009c

0800e070 <__swhatbuf_r>:
 800e070:	b570      	push	{r4, r5, r6, lr}
 800e072:	460c      	mov	r4, r1
 800e074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e078:	2900      	cmp	r1, #0
 800e07a:	b096      	sub	sp, #88	; 0x58
 800e07c:	4615      	mov	r5, r2
 800e07e:	461e      	mov	r6, r3
 800e080:	da0d      	bge.n	800e09e <__swhatbuf_r+0x2e>
 800e082:	89a3      	ldrh	r3, [r4, #12]
 800e084:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e088:	f04f 0100 	mov.w	r1, #0
 800e08c:	bf0c      	ite	eq
 800e08e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e092:	2340      	movne	r3, #64	; 0x40
 800e094:	2000      	movs	r0, #0
 800e096:	6031      	str	r1, [r6, #0]
 800e098:	602b      	str	r3, [r5, #0]
 800e09a:	b016      	add	sp, #88	; 0x58
 800e09c:	bd70      	pop	{r4, r5, r6, pc}
 800e09e:	466a      	mov	r2, sp
 800e0a0:	f000 f862 	bl	800e168 <_fstat_r>
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	dbec      	blt.n	800e082 <__swhatbuf_r+0x12>
 800e0a8:	9901      	ldr	r1, [sp, #4]
 800e0aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e0ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e0b2:	4259      	negs	r1, r3
 800e0b4:	4159      	adcs	r1, r3
 800e0b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0ba:	e7eb      	b.n	800e094 <__swhatbuf_r+0x24>

0800e0bc <__smakebuf_r>:
 800e0bc:	898b      	ldrh	r3, [r1, #12]
 800e0be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0c0:	079d      	lsls	r5, r3, #30
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	460c      	mov	r4, r1
 800e0c6:	d507      	bpl.n	800e0d8 <__smakebuf_r+0x1c>
 800e0c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	6123      	str	r3, [r4, #16]
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	6163      	str	r3, [r4, #20]
 800e0d4:	b002      	add	sp, #8
 800e0d6:	bd70      	pop	{r4, r5, r6, pc}
 800e0d8:	ab01      	add	r3, sp, #4
 800e0da:	466a      	mov	r2, sp
 800e0dc:	f7ff ffc8 	bl	800e070 <__swhatbuf_r>
 800e0e0:	9900      	ldr	r1, [sp, #0]
 800e0e2:	4605      	mov	r5, r0
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	f7fe ff7b 	bl	800cfe0 <_malloc_r>
 800e0ea:	b948      	cbnz	r0, 800e100 <__smakebuf_r+0x44>
 800e0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0f0:	059a      	lsls	r2, r3, #22
 800e0f2:	d4ef      	bmi.n	800e0d4 <__smakebuf_r+0x18>
 800e0f4:	f023 0303 	bic.w	r3, r3, #3
 800e0f8:	f043 0302 	orr.w	r3, r3, #2
 800e0fc:	81a3      	strh	r3, [r4, #12]
 800e0fe:	e7e3      	b.n	800e0c8 <__smakebuf_r+0xc>
 800e100:	89a3      	ldrh	r3, [r4, #12]
 800e102:	6020      	str	r0, [r4, #0]
 800e104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e108:	81a3      	strh	r3, [r4, #12]
 800e10a:	9b00      	ldr	r3, [sp, #0]
 800e10c:	6163      	str	r3, [r4, #20]
 800e10e:	9b01      	ldr	r3, [sp, #4]
 800e110:	6120      	str	r0, [r4, #16]
 800e112:	b15b      	cbz	r3, 800e12c <__smakebuf_r+0x70>
 800e114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e118:	4630      	mov	r0, r6
 800e11a:	f000 f837 	bl	800e18c <_isatty_r>
 800e11e:	b128      	cbz	r0, 800e12c <__smakebuf_r+0x70>
 800e120:	89a3      	ldrh	r3, [r4, #12]
 800e122:	f023 0303 	bic.w	r3, r3, #3
 800e126:	f043 0301 	orr.w	r3, r3, #1
 800e12a:	81a3      	strh	r3, [r4, #12]
 800e12c:	89a3      	ldrh	r3, [r4, #12]
 800e12e:	431d      	orrs	r5, r3
 800e130:	81a5      	strh	r5, [r4, #12]
 800e132:	e7cf      	b.n	800e0d4 <__smakebuf_r+0x18>

0800e134 <memmove>:
 800e134:	4288      	cmp	r0, r1
 800e136:	b510      	push	{r4, lr}
 800e138:	eb01 0402 	add.w	r4, r1, r2
 800e13c:	d902      	bls.n	800e144 <memmove+0x10>
 800e13e:	4284      	cmp	r4, r0
 800e140:	4623      	mov	r3, r4
 800e142:	d807      	bhi.n	800e154 <memmove+0x20>
 800e144:	1e43      	subs	r3, r0, #1
 800e146:	42a1      	cmp	r1, r4
 800e148:	d008      	beq.n	800e15c <memmove+0x28>
 800e14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e152:	e7f8      	b.n	800e146 <memmove+0x12>
 800e154:	4402      	add	r2, r0
 800e156:	4601      	mov	r1, r0
 800e158:	428a      	cmp	r2, r1
 800e15a:	d100      	bne.n	800e15e <memmove+0x2a>
 800e15c:	bd10      	pop	{r4, pc}
 800e15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e166:	e7f7      	b.n	800e158 <memmove+0x24>

0800e168 <_fstat_r>:
 800e168:	b538      	push	{r3, r4, r5, lr}
 800e16a:	4d07      	ldr	r5, [pc, #28]	; (800e188 <_fstat_r+0x20>)
 800e16c:	2300      	movs	r3, #0
 800e16e:	4604      	mov	r4, r0
 800e170:	4608      	mov	r0, r1
 800e172:	4611      	mov	r1, r2
 800e174:	602b      	str	r3, [r5, #0]
 800e176:	f7f5 fed8 	bl	8003f2a <_fstat>
 800e17a:	1c43      	adds	r3, r0, #1
 800e17c:	d102      	bne.n	800e184 <_fstat_r+0x1c>
 800e17e:	682b      	ldr	r3, [r5, #0]
 800e180:	b103      	cbz	r3, 800e184 <_fstat_r+0x1c>
 800e182:	6023      	str	r3, [r4, #0]
 800e184:	bd38      	pop	{r3, r4, r5, pc}
 800e186:	bf00      	nop
 800e188:	20007844 	.word	0x20007844

0800e18c <_isatty_r>:
 800e18c:	b538      	push	{r3, r4, r5, lr}
 800e18e:	4d06      	ldr	r5, [pc, #24]	; (800e1a8 <_isatty_r+0x1c>)
 800e190:	2300      	movs	r3, #0
 800e192:	4604      	mov	r4, r0
 800e194:	4608      	mov	r0, r1
 800e196:	602b      	str	r3, [r5, #0]
 800e198:	f7f5 fed7 	bl	8003f4a <_isatty>
 800e19c:	1c43      	adds	r3, r0, #1
 800e19e:	d102      	bne.n	800e1a6 <_isatty_r+0x1a>
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	b103      	cbz	r3, 800e1a6 <_isatty_r+0x1a>
 800e1a4:	6023      	str	r3, [r4, #0]
 800e1a6:	bd38      	pop	{r3, r4, r5, pc}
 800e1a8:	20007844 	.word	0x20007844

0800e1ac <_sbrk_r>:
 800e1ac:	b538      	push	{r3, r4, r5, lr}
 800e1ae:	4d06      	ldr	r5, [pc, #24]	; (800e1c8 <_sbrk_r+0x1c>)
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	4608      	mov	r0, r1
 800e1b6:	602b      	str	r3, [r5, #0]
 800e1b8:	f7f5 fee0 	bl	8003f7c <_sbrk>
 800e1bc:	1c43      	adds	r3, r0, #1
 800e1be:	d102      	bne.n	800e1c6 <_sbrk_r+0x1a>
 800e1c0:	682b      	ldr	r3, [r5, #0]
 800e1c2:	b103      	cbz	r3, 800e1c6 <_sbrk_r+0x1a>
 800e1c4:	6023      	str	r3, [r4, #0]
 800e1c6:	bd38      	pop	{r3, r4, r5, pc}
 800e1c8:	20007844 	.word	0x20007844

0800e1cc <memcpy>:
 800e1cc:	440a      	add	r2, r1
 800e1ce:	4291      	cmp	r1, r2
 800e1d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e1d4:	d100      	bne.n	800e1d8 <memcpy+0xc>
 800e1d6:	4770      	bx	lr
 800e1d8:	b510      	push	{r4, lr}
 800e1da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1e2:	4291      	cmp	r1, r2
 800e1e4:	d1f9      	bne.n	800e1da <memcpy+0xe>
 800e1e6:	bd10      	pop	{r4, pc}

0800e1e8 <abort>:
 800e1e8:	b508      	push	{r3, lr}
 800e1ea:	2006      	movs	r0, #6
 800e1ec:	f000 f868 	bl	800e2c0 <raise>
 800e1f0:	2001      	movs	r0, #1
 800e1f2:	f7f5 fe4b 	bl	8003e8c <_exit>

0800e1f6 <_calloc_r>:
 800e1f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1f8:	fba1 2402 	umull	r2, r4, r1, r2
 800e1fc:	b94c      	cbnz	r4, 800e212 <_calloc_r+0x1c>
 800e1fe:	4611      	mov	r1, r2
 800e200:	9201      	str	r2, [sp, #4]
 800e202:	f7fe feed 	bl	800cfe0 <_malloc_r>
 800e206:	9a01      	ldr	r2, [sp, #4]
 800e208:	4605      	mov	r5, r0
 800e20a:	b930      	cbnz	r0, 800e21a <_calloc_r+0x24>
 800e20c:	4628      	mov	r0, r5
 800e20e:	b003      	add	sp, #12
 800e210:	bd30      	pop	{r4, r5, pc}
 800e212:	220c      	movs	r2, #12
 800e214:	6002      	str	r2, [r0, #0]
 800e216:	2500      	movs	r5, #0
 800e218:	e7f8      	b.n	800e20c <_calloc_r+0x16>
 800e21a:	4621      	mov	r1, r4
 800e21c:	f7fd fae4 	bl	800b7e8 <memset>
 800e220:	e7f4      	b.n	800e20c <_calloc_r+0x16>

0800e222 <__ascii_mbtowc>:
 800e222:	b082      	sub	sp, #8
 800e224:	b901      	cbnz	r1, 800e228 <__ascii_mbtowc+0x6>
 800e226:	a901      	add	r1, sp, #4
 800e228:	b142      	cbz	r2, 800e23c <__ascii_mbtowc+0x1a>
 800e22a:	b14b      	cbz	r3, 800e240 <__ascii_mbtowc+0x1e>
 800e22c:	7813      	ldrb	r3, [r2, #0]
 800e22e:	600b      	str	r3, [r1, #0]
 800e230:	7812      	ldrb	r2, [r2, #0]
 800e232:	1e10      	subs	r0, r2, #0
 800e234:	bf18      	it	ne
 800e236:	2001      	movne	r0, #1
 800e238:	b002      	add	sp, #8
 800e23a:	4770      	bx	lr
 800e23c:	4610      	mov	r0, r2
 800e23e:	e7fb      	b.n	800e238 <__ascii_mbtowc+0x16>
 800e240:	f06f 0001 	mvn.w	r0, #1
 800e244:	e7f8      	b.n	800e238 <__ascii_mbtowc+0x16>

0800e246 <_malloc_usable_size_r>:
 800e246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e24a:	1f18      	subs	r0, r3, #4
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	bfbc      	itt	lt
 800e250:	580b      	ldrlt	r3, [r1, r0]
 800e252:	18c0      	addlt	r0, r0, r3
 800e254:	4770      	bx	lr

0800e256 <__ascii_wctomb>:
 800e256:	b149      	cbz	r1, 800e26c <__ascii_wctomb+0x16>
 800e258:	2aff      	cmp	r2, #255	; 0xff
 800e25a:	bf85      	ittet	hi
 800e25c:	238a      	movhi	r3, #138	; 0x8a
 800e25e:	6003      	strhi	r3, [r0, #0]
 800e260:	700a      	strbls	r2, [r1, #0]
 800e262:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e266:	bf98      	it	ls
 800e268:	2001      	movls	r0, #1
 800e26a:	4770      	bx	lr
 800e26c:	4608      	mov	r0, r1
 800e26e:	4770      	bx	lr

0800e270 <_raise_r>:
 800e270:	291f      	cmp	r1, #31
 800e272:	b538      	push	{r3, r4, r5, lr}
 800e274:	4604      	mov	r4, r0
 800e276:	460d      	mov	r5, r1
 800e278:	d904      	bls.n	800e284 <_raise_r+0x14>
 800e27a:	2316      	movs	r3, #22
 800e27c:	6003      	str	r3, [r0, #0]
 800e27e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e282:	bd38      	pop	{r3, r4, r5, pc}
 800e284:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e286:	b112      	cbz	r2, 800e28e <_raise_r+0x1e>
 800e288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e28c:	b94b      	cbnz	r3, 800e2a2 <_raise_r+0x32>
 800e28e:	4620      	mov	r0, r4
 800e290:	f000 f830 	bl	800e2f4 <_getpid_r>
 800e294:	462a      	mov	r2, r5
 800e296:	4601      	mov	r1, r0
 800e298:	4620      	mov	r0, r4
 800e29a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e29e:	f000 b817 	b.w	800e2d0 <_kill_r>
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d00a      	beq.n	800e2bc <_raise_r+0x4c>
 800e2a6:	1c59      	adds	r1, r3, #1
 800e2a8:	d103      	bne.n	800e2b2 <_raise_r+0x42>
 800e2aa:	2316      	movs	r3, #22
 800e2ac:	6003      	str	r3, [r0, #0]
 800e2ae:	2001      	movs	r0, #1
 800e2b0:	e7e7      	b.n	800e282 <_raise_r+0x12>
 800e2b2:	2400      	movs	r4, #0
 800e2b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	4798      	blx	r3
 800e2bc:	2000      	movs	r0, #0
 800e2be:	e7e0      	b.n	800e282 <_raise_r+0x12>

0800e2c0 <raise>:
 800e2c0:	4b02      	ldr	r3, [pc, #8]	; (800e2cc <raise+0xc>)
 800e2c2:	4601      	mov	r1, r0
 800e2c4:	6818      	ldr	r0, [r3, #0]
 800e2c6:	f7ff bfd3 	b.w	800e270 <_raise_r>
 800e2ca:	bf00      	nop
 800e2cc:	2000009c 	.word	0x2000009c

0800e2d0 <_kill_r>:
 800e2d0:	b538      	push	{r3, r4, r5, lr}
 800e2d2:	4d07      	ldr	r5, [pc, #28]	; (800e2f0 <_kill_r+0x20>)
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	4608      	mov	r0, r1
 800e2da:	4611      	mov	r1, r2
 800e2dc:	602b      	str	r3, [r5, #0]
 800e2de:	f7f5 fdc5 	bl	8003e6c <_kill>
 800e2e2:	1c43      	adds	r3, r0, #1
 800e2e4:	d102      	bne.n	800e2ec <_kill_r+0x1c>
 800e2e6:	682b      	ldr	r3, [r5, #0]
 800e2e8:	b103      	cbz	r3, 800e2ec <_kill_r+0x1c>
 800e2ea:	6023      	str	r3, [r4, #0]
 800e2ec:	bd38      	pop	{r3, r4, r5, pc}
 800e2ee:	bf00      	nop
 800e2f0:	20007844 	.word	0x20007844

0800e2f4 <_getpid_r>:
 800e2f4:	f7f5 bdb2 	b.w	8003e5c <_getpid>

0800e2f8 <sqrt>:
 800e2f8:	b538      	push	{r3, r4, r5, lr}
 800e2fa:	ed2d 8b02 	vpush	{d8}
 800e2fe:	ec55 4b10 	vmov	r4, r5, d0
 800e302:	f000 f825 	bl	800e350 <__ieee754_sqrt>
 800e306:	4622      	mov	r2, r4
 800e308:	462b      	mov	r3, r5
 800e30a:	4620      	mov	r0, r4
 800e30c:	4629      	mov	r1, r5
 800e30e:	eeb0 8a40 	vmov.f32	s16, s0
 800e312:	eef0 8a60 	vmov.f32	s17, s1
 800e316:	f7f2 fc29 	bl	8000b6c <__aeabi_dcmpun>
 800e31a:	b990      	cbnz	r0, 800e342 <sqrt+0x4a>
 800e31c:	2200      	movs	r2, #0
 800e31e:	2300      	movs	r3, #0
 800e320:	4620      	mov	r0, r4
 800e322:	4629      	mov	r1, r5
 800e324:	f7f2 fbfa 	bl	8000b1c <__aeabi_dcmplt>
 800e328:	b158      	cbz	r0, 800e342 <sqrt+0x4a>
 800e32a:	f7fd faaf 	bl	800b88c <__errno>
 800e32e:	2321      	movs	r3, #33	; 0x21
 800e330:	6003      	str	r3, [r0, #0]
 800e332:	2200      	movs	r2, #0
 800e334:	2300      	movs	r3, #0
 800e336:	4610      	mov	r0, r2
 800e338:	4619      	mov	r1, r3
 800e33a:	f7f2 faa7 	bl	800088c <__aeabi_ddiv>
 800e33e:	ec41 0b18 	vmov	d8, r0, r1
 800e342:	eeb0 0a48 	vmov.f32	s0, s16
 800e346:	eef0 0a68 	vmov.f32	s1, s17
 800e34a:	ecbd 8b02 	vpop	{d8}
 800e34e:	bd38      	pop	{r3, r4, r5, pc}

0800e350 <__ieee754_sqrt>:
 800e350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e354:	ec55 4b10 	vmov	r4, r5, d0
 800e358:	4e67      	ldr	r6, [pc, #412]	; (800e4f8 <__ieee754_sqrt+0x1a8>)
 800e35a:	43ae      	bics	r6, r5
 800e35c:	ee10 0a10 	vmov	r0, s0
 800e360:	ee10 2a10 	vmov	r2, s0
 800e364:	4629      	mov	r1, r5
 800e366:	462b      	mov	r3, r5
 800e368:	d10d      	bne.n	800e386 <__ieee754_sqrt+0x36>
 800e36a:	f7f2 f965 	bl	8000638 <__aeabi_dmul>
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	4620      	mov	r0, r4
 800e374:	4629      	mov	r1, r5
 800e376:	f7f1 ffa9 	bl	80002cc <__adddf3>
 800e37a:	4604      	mov	r4, r0
 800e37c:	460d      	mov	r5, r1
 800e37e:	ec45 4b10 	vmov	d0, r4, r5
 800e382:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e386:	2d00      	cmp	r5, #0
 800e388:	dc0b      	bgt.n	800e3a2 <__ieee754_sqrt+0x52>
 800e38a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e38e:	4326      	orrs	r6, r4
 800e390:	d0f5      	beq.n	800e37e <__ieee754_sqrt+0x2e>
 800e392:	b135      	cbz	r5, 800e3a2 <__ieee754_sqrt+0x52>
 800e394:	f7f1 ff98 	bl	80002c8 <__aeabi_dsub>
 800e398:	4602      	mov	r2, r0
 800e39a:	460b      	mov	r3, r1
 800e39c:	f7f2 fa76 	bl	800088c <__aeabi_ddiv>
 800e3a0:	e7eb      	b.n	800e37a <__ieee754_sqrt+0x2a>
 800e3a2:	1509      	asrs	r1, r1, #20
 800e3a4:	f000 808d 	beq.w	800e4c2 <__ieee754_sqrt+0x172>
 800e3a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3ac:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800e3b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e3b4:	07c9      	lsls	r1, r1, #31
 800e3b6:	bf5c      	itt	pl
 800e3b8:	005b      	lslpl	r3, r3, #1
 800e3ba:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800e3be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e3c2:	bf58      	it	pl
 800e3c4:	0052      	lslpl	r2, r2, #1
 800e3c6:	2500      	movs	r5, #0
 800e3c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e3cc:	1076      	asrs	r6, r6, #1
 800e3ce:	0052      	lsls	r2, r2, #1
 800e3d0:	f04f 0e16 	mov.w	lr, #22
 800e3d4:	46ac      	mov	ip, r5
 800e3d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e3da:	eb0c 0001 	add.w	r0, ip, r1
 800e3de:	4298      	cmp	r0, r3
 800e3e0:	bfde      	ittt	le
 800e3e2:	1a1b      	suble	r3, r3, r0
 800e3e4:	eb00 0c01 	addle.w	ip, r0, r1
 800e3e8:	186d      	addle	r5, r5, r1
 800e3ea:	005b      	lsls	r3, r3, #1
 800e3ec:	f1be 0e01 	subs.w	lr, lr, #1
 800e3f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e3f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e3f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e3fc:	d1ed      	bne.n	800e3da <__ieee754_sqrt+0x8a>
 800e3fe:	4674      	mov	r4, lr
 800e400:	2720      	movs	r7, #32
 800e402:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e406:	4563      	cmp	r3, ip
 800e408:	eb01 000e 	add.w	r0, r1, lr
 800e40c:	dc02      	bgt.n	800e414 <__ieee754_sqrt+0xc4>
 800e40e:	d113      	bne.n	800e438 <__ieee754_sqrt+0xe8>
 800e410:	4290      	cmp	r0, r2
 800e412:	d811      	bhi.n	800e438 <__ieee754_sqrt+0xe8>
 800e414:	2800      	cmp	r0, #0
 800e416:	eb00 0e01 	add.w	lr, r0, r1
 800e41a:	da57      	bge.n	800e4cc <__ieee754_sqrt+0x17c>
 800e41c:	f1be 0f00 	cmp.w	lr, #0
 800e420:	db54      	blt.n	800e4cc <__ieee754_sqrt+0x17c>
 800e422:	f10c 0801 	add.w	r8, ip, #1
 800e426:	eba3 030c 	sub.w	r3, r3, ip
 800e42a:	4290      	cmp	r0, r2
 800e42c:	bf88      	it	hi
 800e42e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800e432:	1a12      	subs	r2, r2, r0
 800e434:	440c      	add	r4, r1
 800e436:	46c4      	mov	ip, r8
 800e438:	005b      	lsls	r3, r3, #1
 800e43a:	3f01      	subs	r7, #1
 800e43c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e440:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e444:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e448:	d1dd      	bne.n	800e406 <__ieee754_sqrt+0xb6>
 800e44a:	4313      	orrs	r3, r2
 800e44c:	d01b      	beq.n	800e486 <__ieee754_sqrt+0x136>
 800e44e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e4fc <__ieee754_sqrt+0x1ac>
 800e452:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800e500 <__ieee754_sqrt+0x1b0>
 800e456:	e9da 0100 	ldrd	r0, r1, [sl]
 800e45a:	e9db 2300 	ldrd	r2, r3, [fp]
 800e45e:	f7f1 ff33 	bl	80002c8 <__aeabi_dsub>
 800e462:	e9da 8900 	ldrd	r8, r9, [sl]
 800e466:	4602      	mov	r2, r0
 800e468:	460b      	mov	r3, r1
 800e46a:	4640      	mov	r0, r8
 800e46c:	4649      	mov	r1, r9
 800e46e:	f7f2 fb5f 	bl	8000b30 <__aeabi_dcmple>
 800e472:	b140      	cbz	r0, 800e486 <__ieee754_sqrt+0x136>
 800e474:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800e478:	e9da 0100 	ldrd	r0, r1, [sl]
 800e47c:	e9db 2300 	ldrd	r2, r3, [fp]
 800e480:	d126      	bne.n	800e4d0 <__ieee754_sqrt+0x180>
 800e482:	3501      	adds	r5, #1
 800e484:	463c      	mov	r4, r7
 800e486:	106a      	asrs	r2, r5, #1
 800e488:	0863      	lsrs	r3, r4, #1
 800e48a:	07e9      	lsls	r1, r5, #31
 800e48c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e490:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e494:	bf48      	it	mi
 800e496:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e49a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800e49e:	461c      	mov	r4, r3
 800e4a0:	e76d      	b.n	800e37e <__ieee754_sqrt+0x2e>
 800e4a2:	0ad3      	lsrs	r3, r2, #11
 800e4a4:	3815      	subs	r0, #21
 800e4a6:	0552      	lsls	r2, r2, #21
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d0fa      	beq.n	800e4a2 <__ieee754_sqrt+0x152>
 800e4ac:	02dc      	lsls	r4, r3, #11
 800e4ae:	d50a      	bpl.n	800e4c6 <__ieee754_sqrt+0x176>
 800e4b0:	f1c1 0420 	rsb	r4, r1, #32
 800e4b4:	fa22 f404 	lsr.w	r4, r2, r4
 800e4b8:	1e4d      	subs	r5, r1, #1
 800e4ba:	408a      	lsls	r2, r1
 800e4bc:	4323      	orrs	r3, r4
 800e4be:	1b41      	subs	r1, r0, r5
 800e4c0:	e772      	b.n	800e3a8 <__ieee754_sqrt+0x58>
 800e4c2:	4608      	mov	r0, r1
 800e4c4:	e7f0      	b.n	800e4a8 <__ieee754_sqrt+0x158>
 800e4c6:	005b      	lsls	r3, r3, #1
 800e4c8:	3101      	adds	r1, #1
 800e4ca:	e7ef      	b.n	800e4ac <__ieee754_sqrt+0x15c>
 800e4cc:	46e0      	mov	r8, ip
 800e4ce:	e7aa      	b.n	800e426 <__ieee754_sqrt+0xd6>
 800e4d0:	f7f1 fefc 	bl	80002cc <__adddf3>
 800e4d4:	e9da 8900 	ldrd	r8, r9, [sl]
 800e4d8:	4602      	mov	r2, r0
 800e4da:	460b      	mov	r3, r1
 800e4dc:	4640      	mov	r0, r8
 800e4de:	4649      	mov	r1, r9
 800e4e0:	f7f2 fb1c 	bl	8000b1c <__aeabi_dcmplt>
 800e4e4:	b120      	cbz	r0, 800e4f0 <__ieee754_sqrt+0x1a0>
 800e4e6:	1ca0      	adds	r0, r4, #2
 800e4e8:	bf08      	it	eq
 800e4ea:	3501      	addeq	r5, #1
 800e4ec:	3402      	adds	r4, #2
 800e4ee:	e7ca      	b.n	800e486 <__ieee754_sqrt+0x136>
 800e4f0:	3401      	adds	r4, #1
 800e4f2:	f024 0401 	bic.w	r4, r4, #1
 800e4f6:	e7c6      	b.n	800e486 <__ieee754_sqrt+0x136>
 800e4f8:	7ff00000 	.word	0x7ff00000
 800e4fc:	20000210 	.word	0x20000210
 800e500:	20000218 	.word	0x20000218

0800e504 <round>:
 800e504:	ec53 2b10 	vmov	r2, r3, d0
 800e508:	b570      	push	{r4, r5, r6, lr}
 800e50a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800e50e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800e512:	2813      	cmp	r0, #19
 800e514:	ee10 5a10 	vmov	r5, s0
 800e518:	4619      	mov	r1, r3
 800e51a:	dc18      	bgt.n	800e54e <round+0x4a>
 800e51c:	2800      	cmp	r0, #0
 800e51e:	da09      	bge.n	800e534 <round+0x30>
 800e520:	3001      	adds	r0, #1
 800e522:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800e526:	d103      	bne.n	800e530 <round+0x2c>
 800e528:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800e52c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e530:	2300      	movs	r3, #0
 800e532:	e02a      	b.n	800e58a <round+0x86>
 800e534:	4c16      	ldr	r4, [pc, #88]	; (800e590 <round+0x8c>)
 800e536:	4104      	asrs	r4, r0
 800e538:	ea03 0604 	and.w	r6, r3, r4
 800e53c:	4316      	orrs	r6, r2
 800e53e:	d011      	beq.n	800e564 <round+0x60>
 800e540:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e544:	4103      	asrs	r3, r0
 800e546:	440b      	add	r3, r1
 800e548:	ea23 0104 	bic.w	r1, r3, r4
 800e54c:	e7f0      	b.n	800e530 <round+0x2c>
 800e54e:	2833      	cmp	r0, #51	; 0x33
 800e550:	dd0b      	ble.n	800e56a <round+0x66>
 800e552:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e556:	d105      	bne.n	800e564 <round+0x60>
 800e558:	ee10 0a10 	vmov	r0, s0
 800e55c:	f7f1 feb6 	bl	80002cc <__adddf3>
 800e560:	4602      	mov	r2, r0
 800e562:	460b      	mov	r3, r1
 800e564:	ec43 2b10 	vmov	d0, r2, r3
 800e568:	bd70      	pop	{r4, r5, r6, pc}
 800e56a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800e56e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e572:	40f4      	lsrs	r4, r6
 800e574:	4214      	tst	r4, r2
 800e576:	d0f5      	beq.n	800e564 <round+0x60>
 800e578:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800e57c:	2301      	movs	r3, #1
 800e57e:	4083      	lsls	r3, r0
 800e580:	195b      	adds	r3, r3, r5
 800e582:	bf28      	it	cs
 800e584:	3101      	addcs	r1, #1
 800e586:	ea23 0304 	bic.w	r3, r3, r4
 800e58a:	461a      	mov	r2, r3
 800e58c:	460b      	mov	r3, r1
 800e58e:	e7e9      	b.n	800e564 <round+0x60>
 800e590:	000fffff 	.word	0x000fffff

0800e594 <trunc>:
 800e594:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800e598:	ec5c bb10 	vmov	fp, ip, d0
 800e59c:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800e5a0:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800e5a4:	2913      	cmp	r1, #19
 800e5a6:	4664      	mov	r4, ip
 800e5a8:	dc11      	bgt.n	800e5ce <trunc+0x3a>
 800e5aa:	2900      	cmp	r1, #0
 800e5ac:	bfa7      	ittee	ge
 800e5ae:	4b15      	ldrge	r3, [pc, #84]	; (800e604 <trunc+0x70>)
 800e5b0:	fa43 f101 	asrge.w	r1, r3, r1
 800e5b4:	2200      	movlt	r2, #0
 800e5b6:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800e5ba:	bfa4      	itt	ge
 800e5bc:	2200      	movge	r2, #0
 800e5be:	ea01 030c 	andge.w	r3, r1, ip
 800e5c2:	4693      	mov	fp, r2
 800e5c4:	469c      	mov	ip, r3
 800e5c6:	ec4c bb10 	vmov	d0, fp, ip
 800e5ca:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800e5ce:	2933      	cmp	r1, #51	; 0x33
 800e5d0:	dd0d      	ble.n	800e5ee <trunc+0x5a>
 800e5d2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e5d6:	d1f6      	bne.n	800e5c6 <trunc+0x32>
 800e5d8:	4663      	mov	r3, ip
 800e5da:	ee10 2a10 	vmov	r2, s0
 800e5de:	ee10 0a10 	vmov	r0, s0
 800e5e2:	4621      	mov	r1, r4
 800e5e4:	f7f1 fe72 	bl	80002cc <__adddf3>
 800e5e8:	4683      	mov	fp, r0
 800e5ea:	468c      	mov	ip, r1
 800e5ec:	e7eb      	b.n	800e5c6 <trunc+0x32>
 800e5ee:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800e5f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5f6:	40c3      	lsrs	r3, r0
 800e5f8:	ea2b 0603 	bic.w	r6, fp, r3
 800e5fc:	46b3      	mov	fp, r6
 800e5fe:	46a4      	mov	ip, r4
 800e600:	e7e1      	b.n	800e5c6 <trunc+0x32>
 800e602:	bf00      	nop
 800e604:	fff00000 	.word	0xfff00000

0800e608 <_init>:
 800e608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60a:	bf00      	nop
 800e60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e60e:	bc08      	pop	{r3}
 800e610:	469e      	mov	lr, r3
 800e612:	4770      	bx	lr

0800e614 <_fini>:
 800e614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e616:	bf00      	nop
 800e618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e61a:	bc08      	pop	{r3}
 800e61c:	469e      	mov	lr, r3
 800e61e:	4770      	bx	lr
