
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aeac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f04  0800b07c  0800b07c  0001b07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf80  0800cf80  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf80  0800cf80  0001cf80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf88  0800cf88  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf88  0800cf88  0001cf88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf8c  0800cf8c  0001cf8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800cf90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c7c  200000b8  0800d048  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006d34  0800d048  00026d34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015678  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e6  00000000  00000000  000357a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00038c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2a  00000000  00000000  0003a038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026776  00000000  00000000  0003af62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019dda  00000000  00000000  000616d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2b33  00000000  00000000  0007b4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e00  00000000  00000000  0015dfe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00163de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b064 	.word	0x0800b064

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	0800b064 	.word	0x0800b064

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b970 	b.w	8000f20 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	d965      	bls.n	8000d3a <__udivmoddi4+0xe2>
 8000c6e:	fab2 f382 	clz	r3, r2
 8000c72:	b143      	cbz	r3, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c78:	f1c3 0220 	rsb	r2, r3, #32
 8000c7c:	409f      	lsls	r7, r3
 8000c7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c82:	4317      	orrs	r7, r2
 8000c84:	409c      	lsls	r4, r3
 8000c86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c8a:	fa1f f58c 	uxth.w	r5, ip
 8000c8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c92:	0c22      	lsrs	r2, r4, #16
 8000c94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c9c:	fb01 f005 	mul.w	r0, r1, r5
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cac:	f080 811c 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f240 8119 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4462      	add	r2, ip
 8000cba:	1a12      	subs	r2, r2, r0
 8000cbc:	b2a4      	uxth	r4, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cca:	fb00 f505 	mul.w	r5, r0, r5
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x90>
 8000cd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x294>
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x294>
 8000ce4:	4464      	add	r4, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11e      	cbz	r6, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40dc      	lsrs	r4, r3
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0xbc>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80ed 	beq.w	8000ee2 <__udivmoddi4+0x28a>
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	fab3 f183 	clz	r1, r3
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	d149      	bne.n	8000db0 <__udivmoddi4+0x158>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	d302      	bcc.n	8000d26 <__udivmoddi4+0xce>
 8000d20:	4282      	cmp	r2, r0
 8000d22:	f200 80f8 	bhi.w	8000f16 <__udivmoddi4+0x2be>
 8000d26:	1a84      	subs	r4, r0, r2
 8000d28:	eb65 0203 	sbc.w	r2, r5, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d0e2      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	e9c6 4700 	strd	r4, r7, [r6]
 8000d38:	e7df      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d3a:	b902      	cbnz	r2, 8000d3e <__udivmoddi4+0xe6>
 8000d3c:	deff      	udf	#255	; 0xff
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8090 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2101      	movs	r1, #1
 8000d54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d58:	fb07 2015 	mls	r0, r7, r5, r2
 8000d5c:	0c22      	lsrs	r2, r4, #16
 8000d5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d62:	fb0e f005 	mul.w	r0, lr, r5
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4290      	cmp	r0, r2
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2b8>
 8000d7a:	4645      	mov	r5, r8
 8000d7c:	1a12      	subs	r2, r2, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d84:	fb07 2210 	mls	r2, r7, r0, r2
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x14e>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x14c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2c2>
 8000da4:	4610      	mov	r0, r2
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dae:	e79f      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000db0:	f1c1 0720 	rsb	r7, r1, #32
 8000db4:	408b      	lsls	r3, r1
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc6:	40fd      	lsrs	r5, r7
 8000dc8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dcc:	4323      	orrs	r3, r4
 8000dce:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dda:	0c1c      	lsrs	r4, r3, #16
 8000ddc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000de0:	fb08 f50e 	mul.w	r5, r8, lr
 8000de4:	42a5      	cmp	r5, r4
 8000de6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dea:	fa00 f001 	lsl.w	r0, r0, r1
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2b4>
 8000dfc:	42a5      	cmp	r5, r4
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2b4>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4464      	add	r4, ip
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	b29d      	uxth	r5, r3
 8000e0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e10:	fb09 4413 	mls	r4, r9, r3, r4
 8000e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2e:	3b02      	subs	r3, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fba3 9502 	umull	r9, r5, r3, r2
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46ae      	mov	lr, r5
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x29c>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x298>
 8000e48:	b156      	cbz	r6, 8000e60 <__udivmoddi4+0x208>
 8000e4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e52:	fa04 f707 	lsl.w	r7, r4, r7
 8000e56:	40ca      	lsrs	r2, r1
 8000e58:	40cc      	lsrs	r4, r1
 8000e5a:	4317      	orrs	r7, r2
 8000e5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	f1c3 0120 	rsb	r1, r3, #32
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	fa20 f201 	lsr.w	r2, r0, r1
 8000e74:	fa25 f101 	lsr.w	r1, r5, r1
 8000e78:	409d      	lsls	r5, r3
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1510 	mls	r5, r7, r0, r1
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e92:	fb00 f50e 	mul.w	r5, r0, lr
 8000e96:	428d      	cmp	r5, r1
 8000e98:	fa04 f403 	lsl.w	r4, r4, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x258>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000ea8:	428d      	cmp	r5, r1
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1b49      	subs	r1, r1, r5
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ebc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec4:	4291      	cmp	r1, r2
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x282>
 8000ec8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ecc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed2:	4291      	cmp	r1, r2
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed6:	3d02      	subs	r5, #2
 8000ed8:	4462      	add	r2, ip
 8000eda:	1a52      	subs	r2, r2, r1
 8000edc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0xfc>
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e708      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000ee8:	4639      	mov	r1, r7
 8000eea:	e6e6      	b.n	8000cba <__udivmoddi4+0x62>
 8000eec:	4610      	mov	r0, r2
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x90>
 8000ef0:	4548      	cmp	r0, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000efc:	3b01      	subs	r3, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000f00:	4645      	mov	r5, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x282>
 8000f04:	462b      	mov	r3, r5
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x258>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f10:	3d02      	subs	r5, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f16:	4608      	mov	r0, r1
 8000f18:	e70a      	b.n	8000d30 <__udivmoddi4+0xd8>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x14e>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <calc_process_dma_buffer+0x24>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d002      	beq.n	8000f48 <calc_process_dma_buffer+0x24>
		return -1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f46:	e0a8      	b.n	800109a <calc_process_dma_buffer+0x176>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8000f50:	7c7b      	ldrb	r3, [r7, #17]
 8000f52:	3301      	adds	r3, #1
 8000f54:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 8000f5c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8000f60:	82bb      	strh	r3, [r7, #20]
 8000f62:	e001      	b.n	8000f68 <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 8000f64:	2300      	movs	r3, #0
 8000f66:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8000f68:	8abb      	ldrh	r3, [r7, #20]
 8000f6a:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 8000f6e:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 8000f70:	7c7a      	ldrb	r2, [r7, #17]
 8000f72:	494c      	ldr	r1, [pc, #304]	; (80010a4 <calc_process_dma_buffer+0x180>)
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f82:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 8000f84:	7c7a      	ldrb	r2, [r7, #17]
 8000f86:	4947      	ldr	r1, [pc, #284]	; (80010a4 <calc_process_dma_buffer+0x180>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	3302      	adds	r3, #2
 8000f94:	2200      	movs	r2, #0
 8000f96:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 8000f98:	7c3a      	ldrb	r2, [r7, #16]
 8000f9a:	4942      	ldr	r1, [pc, #264]	; (80010a4 <calc_process_dma_buffer+0x180>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000faa:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 8000fac:	7c3a      	ldrb	r2, [r7, #16]
 8000fae:	493d      	ldr	r1, [pc, #244]	; (80010a4 <calc_process_dma_buffer+0x180>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	3302      	adds	r3, #2
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 8000fc0:	7c7a      	ldrb	r2, [r7, #17]
 8000fc2:	4938      	ldr	r1, [pc, #224]	; (80010a4 <calc_process_dma_buffer+0x180>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	3304      	adds	r3, #4
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd4:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 8000fd6:	7c7a      	ldrb	r2, [r7, #17]
 8000fd8:	4932      	ldr	r1, [pc, #200]	; (80010a4 <calc_process_dma_buffer+0x180>)
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3308      	adds	r3, #8
 8000fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fea:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 8000fec:	7c3a      	ldrb	r2, [r7, #16]
 8000fee:	492d      	ldr	r1, [pc, #180]	; (80010a4 <calc_process_dma_buffer+0x180>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001000:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8001002:	7c3a      	ldrb	r2, [r7, #16]
 8001004:	4927      	ldr	r1, [pc, #156]	; (80010a4 <calc_process_dma_buffer+0x180>)
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	3308      	adds	r3, #8
 8001012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001016:	601a      	str	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001018:	8abb      	ldrh	r3, [r7, #20]
 800101a:	82fb      	strh	r3, [r7, #22]
 800101c:	e030      	b.n	8001080 <calc_process_dma_buffer+0x15c>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 800101e:	8af9      	ldrh	r1, [r7, #22]
 8001020:	7c7a      	ldrb	r2, [r7, #17]
 8001022:	8a7b      	ldrh	r3, [r7, #18]
 8001024:	4c20      	ldr	r4, [pc, #128]	; (80010a8 <calc_process_dma_buffer+0x184>)
 8001026:	6838      	ldr	r0, [r7, #0]
 8001028:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 800102c:	fb05 f000 	mul.w	r0, r5, r0
 8001030:	4401      	add	r1, r0
 8001032:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 8001036:	491d      	ldr	r1, [pc, #116]	; (80010ac <calc_process_dma_buffer+0x188>)
 8001038:	f44f 7052 	mov.w	r0, #840	; 0x348
 800103c:	fb00 f202 	mul.w	r2, r0, r2
 8001040:	4413      	add	r3, r2
 8001042:	4622      	mov	r2, r4
 8001044:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 8001048:	8afb      	ldrh	r3, [r7, #22]
 800104a:	1c59      	adds	r1, r3, #1
 800104c:	7c3a      	ldrb	r2, [r7, #16]
 800104e:	8a7b      	ldrh	r3, [r7, #18]
 8001050:	1c58      	adds	r0, r3, #1
 8001052:	8278      	strh	r0, [r7, #18]
 8001054:	461d      	mov	r5, r3
 8001056:	4814      	ldr	r0, [pc, #80]	; (80010a8 <calc_process_dma_buffer+0x184>)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 800105e:	fb04 f303 	mul.w	r3, r4, r3
 8001062:	440b      	add	r3, r1
 8001064:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8001068:	4910      	ldr	r1, [pc, #64]	; (80010ac <calc_process_dma_buffer+0x188>)
 800106a:	f44f 7352 	mov.w	r3, #840	; 0x348
 800106e:	fb02 f303 	mul.w	r3, r2, r3
 8001072:	442b      	add	r3, r5
 8001074:	4602      	mov	r2, r0
 8001076:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 800107a:	8afb      	ldrh	r3, [r7, #22]
 800107c:	3302      	adds	r3, #2
 800107e:	82fb      	strh	r3, [r7, #22]
 8001080:	8afa      	ldrh	r2, [r7, #22]
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	429a      	cmp	r2, r3
 8001086:	d9ca      	bls.n	800101e <calc_process_dma_buffer+0xfa>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 8001088:	7c7b      	ldrb	r3, [r7, #17]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f93c 	bl	8001308 <calc_downsample>
	calc_downsample(raw_buf_second);
 8001090:	7c3b      	ldrb	r3, [r7, #16]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f938 	bl	8001308 <calc_downsample>
	return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdb0      	pop	{r4, r5, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000d4 	.word	0x200000d4
 80010a8:	200007b0 	.word	0x200007b0
 80010ac:	20003c30 	.word	0x20003c30

080010b0 <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	f200 8117 	bhi.w	80012f4 <calc_zero_detector+0x244>
	uint8_t detected = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	0fda      	lsrs	r2, r3, #31
 80010d2:	4413      	add	r3, r2
 80010d4:	105b      	asrs	r3, r3, #1
 80010d6:	461a      	mov	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4413      	add	r3, r2
 80010dc:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	0fda      	lsrs	r2, r3, #31
 80010e2:	4413      	add	r3, r2
 80010e4:	105b      	asrs	r3, r3, #1
 80010e6:	425b      	negs	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	4413      	add	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 80010f0:	2301      	movs	r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	e0df      	b.n	80012b6 <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	4981      	ldr	r1, [pc, #516]	; (8001300 <calc_zero_detector+0x250>)
 80010fa:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80010fe:	fb03 f202 	mul.w	r2, r3, r2
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4413      	add	r3, r2
 8001106:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800110a:	461a      	mov	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4293      	cmp	r3, r2
 8001110:	f300 80ce 	bgt.w	80012b0 <calc_zero_detector+0x200>
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	497a      	ldr	r1, [pc, #488]	; (8001300 <calc_zero_detector+0x250>)
 8001118:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800111c:	fb03 f202 	mul.w	r2, r3, r2
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4413      	add	r3, r2
 8001124:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001128:	461a      	mov	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	4293      	cmp	r3, r2
 800112e:	f2c0 80bf 	blt.w	80012b0 <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	4972      	ldr	r1, [pc, #456]	; (8001300 <calc_zero_detector+0x250>)
 8001136:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800113a:	fb03 f202 	mul.w	r2, r3, r2
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4413      	add	r3, r2
 8001142:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001146:	461a      	mov	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4293      	cmp	r3, r2
 800114c:	da3d      	bge.n	80011ca <calc_zero_detector+0x11a>
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	3b01      	subs	r3, #1
 8001154:	496a      	ldr	r1, [pc, #424]	; (8001300 <calc_zero_detector+0x250>)
 8001156:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800115a:	fb00 f202 	mul.w	r2, r0, r2
 800115e:	4413      	add	r3, r2
 8001160:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001164:	461a      	mov	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	4293      	cmp	r3, r2
 800116a:	db2e      	blt.n	80011ca <calc_zero_detector+0x11a>
				detected++;
 800116c:	7ffb      	ldrb	r3, [r7, #31]
 800116e:	3301      	adds	r3, #1
 8001170:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	2b01      	cmp	r3, #1
 8001176:	dd11      	ble.n	800119c <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	3b02      	subs	r3, #2
 800117e:	4960      	ldr	r1, [pc, #384]	; (8001300 <calc_zero_detector+0x250>)
 8001180:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001184:	fb00 f202 	mul.w	r2, r0, r2
 8001188:	4413      	add	r3, r2
 800118a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800118e:	461a      	mov	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4293      	cmp	r3, r2
 8001194:	dd02      	ble.n	800119c <calc_zero_detector+0xec>
						detected++;
 8001196:	7ffb      	ldrb	r3, [r7, #31]
 8001198:	3301      	adds	r3, #1
 800119a:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	3302      	adds	r3, #2
 80011a0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80011a4:	d211      	bcs.n	80011ca <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	3302      	adds	r3, #2
 80011ac:	4954      	ldr	r1, [pc, #336]	; (8001300 <calc_zero_detector+0x250>)
 80011ae:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80011b2:	fb00 f202 	mul.w	r2, r0, r2
 80011b6:	4413      	add	r3, r2
 80011b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011bc:	461a      	mov	r2, r3
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	4293      	cmp	r3, r2
 80011c2:	da02      	bge.n	80011ca <calc_zero_detector+0x11a>
						detected++;
 80011c4:	7ffb      	ldrb	r3, [r7, #31]
 80011c6:	3301      	adds	r3, #1
 80011c8:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d90f      	bls.n	80011f0 <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	494c      	ldr	r1, [pc, #304]	; (8001304 <calc_zero_detector+0x254>)
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	3304      	adds	r3, #4
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	601a      	str	r2, [r3, #0]
				detected = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 80011e8:	7fbb      	ldrb	r3, [r7, #30]
 80011ea:	3301      	adds	r3, #1
 80011ec:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 80011ee:	e05f      	b.n	80012b0 <calc_zero_detector+0x200>
			}
			detected = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	4942      	ldr	r1, [pc, #264]	; (8001300 <calc_zero_detector+0x250>)
 80011f8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80011fc:	fb03 f202 	mul.w	r2, r3, r2
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	4413      	add	r3, r2
 8001204:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001208:	461a      	mov	r2, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	4293      	cmp	r3, r2
 800120e:	dd4f      	ble.n	80012b0 <calc_zero_detector+0x200>
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	3b01      	subs	r3, #1
 8001216:	493a      	ldr	r1, [pc, #232]	; (8001300 <calc_zero_detector+0x250>)
 8001218:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800121c:	fb00 f202 	mul.w	r2, r0, r2
 8001220:	4413      	add	r3, r2
 8001222:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001226:	461a      	mov	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4293      	cmp	r3, r2
 800122c:	dc40      	bgt.n	80012b0 <calc_zero_detector+0x200>
				detected++;
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	3301      	adds	r3, #1
 8001232:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2b01      	cmp	r3, #1
 8001238:	dd11      	ble.n	800125e <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	3b02      	subs	r3, #2
 8001240:	492f      	ldr	r1, [pc, #188]	; (8001300 <calc_zero_detector+0x250>)
 8001242:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001246:	fb00 f202 	mul.w	r2, r0, r2
 800124a:	4413      	add	r3, r2
 800124c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001250:	461a      	mov	r2, r3
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	4293      	cmp	r3, r2
 8001256:	dc02      	bgt.n	800125e <calc_zero_detector+0x1ae>
						detected++;
 8001258:	7ffb      	ldrb	r3, [r7, #31]
 800125a:	3301      	adds	r3, #1
 800125c:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	3302      	adds	r3, #2
 8001262:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001266:	d211      	bcs.n	800128c <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	3302      	adds	r3, #2
 800126e:	4924      	ldr	r1, [pc, #144]	; (8001300 <calc_zero_detector+0x250>)
 8001270:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001274:	fb00 f202 	mul.w	r2, r0, r2
 8001278:	4413      	add	r3, r2
 800127a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800127e:	461a      	mov	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4293      	cmp	r3, r2
 8001284:	dd02      	ble.n	800128c <calc_zero_detector+0x1dc>
						detected++;
 8001286:	7ffb      	ldrb	r3, [r7, #31]
 8001288:	3301      	adds	r3, #1
 800128a:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 800128c:	7ffb      	ldrb	r3, [r7, #31]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d90c      	bls.n	80012ac <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	491b      	ldr	r1, [pc, #108]	; (8001304 <calc_zero_detector+0x254>)
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3308      	adds	r3, #8
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	601a      	str	r2, [r3, #0]
					detect_count++;
 80012a6:	7fbb      	ldrb	r3, [r7, #30]
 80012a8:	3301      	adds	r3, #1
 80012aa:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	3301      	adds	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80012bc:	f4ff af1b 	bcc.w	80010f6 <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected
	if (detect_count > 2) {
 80012c0:	7fbb      	ldrb	r3, [r7, #30]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d917      	bls.n	80012f6 <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 80012c6:	7bfa      	ldrb	r2, [r7, #15]
 80012c8:	490e      	ldr	r1, [pc, #56]	; (8001304 <calc_zero_detector+0x254>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	3308      	adds	r3, #8
 80012d6:	f06f 0208 	mvn.w	r2, #8
 80012da:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	4909      	ldr	r1, [pc, #36]	; (8001304 <calc_zero_detector+0x254>)
 80012e0:	4613      	mov	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	3304      	adds	r3, #4
 80012ec:	f06f 0208 	mvn.w	r2, #8
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e000      	b.n	80012f6 <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80012f4:	bf00      	nop
	}
}
 80012f6:	3724      	adds	r7, #36	; 0x24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	20005670 	.word	0x20005670
 8001304:	200000d4 	.word	0x200000d4

08001308 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing) for both channel
 */
void calc_downsample(uint8_t bufnum) {
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 8001312:	2300      	movs	r3, #0
 8001314:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b03      	cmp	r3, #3
 800131a:	f200 80b8 	bhi.w	800148e <calc_downsample+0x186>
	for (int i=1; i < ADC_NUM_DATA; i+=2) {
 800131e:	2301      	movs	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	e083      	b.n	800142c <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	495c      	ldr	r1, [pc, #368]	; (8001498 <calc_downsample+0x190>)
 8001328:	f44f 7252 	mov.w	r2, #840	; 0x348
 800132c:	fb03 f202 	mul.w	r2, r3, r2
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	4413      	add	r3, r2
 8001334:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001338:	461c      	mov	r4, r3
 800133a:	79fa      	ldrb	r2, [r7, #7]
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	3b01      	subs	r3, #1
 8001340:	4955      	ldr	r1, [pc, #340]	; (8001498 <calc_downsample+0x190>)
 8001342:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001346:	fb00 f202 	mul.w	r2, r0, r2
 800134a:	4413      	add	r3, r2
 800134c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001350:	4423      	add	r3, r4
 8001352:	79f9      	ldrb	r1, [r7, #7]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	3201      	adds	r2, #1
 8001358:	484f      	ldr	r0, [pc, #316]	; (8001498 <calc_downsample+0x190>)
 800135a:	f44f 7452 	mov.w	r4, #840	; 0x348
 800135e:	fb04 f101 	mul.w	r1, r4, r1
 8001362:	440a      	add	r2, r1
 8001364:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001368:	4413      	add	r3, r2
 800136a:	4a4c      	ldr	r2, [pc, #304]	; (800149c <calc_downsample+0x194>)
 800136c:	fb82 1203 	smull	r1, r2, r2, r3
 8001370:	17db      	asrs	r3, r3, #31
 8001372:	1ad1      	subs	r1, r2, r3
 8001374:	79fa      	ldrb	r2, [r7, #7]
 8001376:	8bfb      	ldrh	r3, [r7, #30]
 8001378:	b28c      	uxth	r4, r1
 800137a:	4949      	ldr	r1, [pc, #292]	; (80014a0 <calc_downsample+0x198>)
 800137c:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001380:	fb00 f202 	mul.w	r2, r0, r2
 8001384:	4413      	add	r3, r2
 8001386:	4622      	mov	r2, r4
 8001388:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 800138c:	79fa      	ldrb	r2, [r7, #7]
 800138e:	4945      	ldr	r1, [pc, #276]	; (80014a4 <calc_downsample+0x19c>)
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	82bb      	strh	r3, [r7, #20]
 800139e:	79fa      	ldrb	r2, [r7, #7]
 80013a0:	8bfb      	ldrh	r3, [r7, #30]
 80013a2:	493f      	ldr	r1, [pc, #252]	; (80014a0 <calc_downsample+0x198>)
 80013a4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80013a8:	fb00 f202 	mul.w	r2, r0, r2
 80013ac:	4413      	add	r3, r2
 80013ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013b2:	827b      	strh	r3, [r7, #18]
 80013b4:	8a7a      	ldrh	r2, [r7, #18]
 80013b6:	8abb      	ldrh	r3, [r7, #20]
 80013b8:	4293      	cmp	r3, r2
 80013ba:	bf28      	it	cs
 80013bc:	4613      	movcs	r3, r2
 80013be:	b29b      	uxth	r3, r3
 80013c0:	79fa      	ldrb	r2, [r7, #7]
 80013c2:	b298      	uxth	r0, r3
 80013c4:	4937      	ldr	r1, [pc, #220]	; (80014a4 <calc_downsample+0x19c>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	4602      	mov	r2, r0
 80013d2:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 80013d4:	79fa      	ldrb	r2, [r7, #7]
 80013d6:	4933      	ldr	r1, [pc, #204]	; (80014a4 <calc_downsample+0x19c>)
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	3302      	adds	r3, #2
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	823b      	strh	r3, [r7, #16]
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	8bfb      	ldrh	r3, [r7, #30]
 80013ec:	492c      	ldr	r1, [pc, #176]	; (80014a0 <calc_downsample+0x198>)
 80013ee:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80013f2:	fb00 f202 	mul.w	r2, r0, r2
 80013f6:	4413      	add	r3, r2
 80013f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013fc:	81fb      	strh	r3, [r7, #14]
 80013fe:	89fa      	ldrh	r2, [r7, #14]
 8001400:	8a3b      	ldrh	r3, [r7, #16]
 8001402:	4293      	cmp	r3, r2
 8001404:	bf38      	it	cc
 8001406:	4613      	movcc	r3, r2
 8001408:	b29b      	uxth	r3, r3
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	b298      	uxth	r0, r3
 800140e:	4925      	ldr	r1, [pc, #148]	; (80014a4 <calc_downsample+0x19c>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	3302      	adds	r3, #2
 800141c:	4602      	mov	r2, r0
 800141e:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 8001420:	8bfb      	ldrh	r3, [r7, #30]
 8001422:	3301      	adds	r3, #1
 8001424:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA; i+=2) {
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	3302      	adds	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001432:	f4ff af77 	bcc.w	8001324 <calc_downsample+0x1c>
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8001436:	79fa      	ldrb	r2, [r7, #7]
 8001438:	491a      	ldr	r1, [pc, #104]	; (80014a4 <calc_downsample+0x19c>)
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	3302      	adds	r3, #2
 8001446:	8819      	ldrh	r1, [r3, #0]
 8001448:	79fa      	ldrb	r2, [r7, #7]
 800144a:	4816      	ldr	r0, [pc, #88]	; (80014a4 <calc_downsample+0x19c>)
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4403      	add	r3, r0
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	1acb      	subs	r3, r1, r3
 800145a:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 800145c:	8afb      	ldrh	r3, [r7, #22]
 800145e:	085b      	lsrs	r3, r3, #1
 8001460:	b29b      	uxth	r3, r3
 8001462:	4618      	mov	r0, r3
 8001464:	79fa      	ldrb	r2, [r7, #7]
 8001466:	490f      	ldr	r1, [pc, #60]	; (80014a4 <calc_downsample+0x19c>)
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	18c1      	adds	r1, r0, r3
 8001476:	8afb      	ldrh	r3, [r7, #22]
 8001478:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <calc_downsample+0x1a0>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	b29b      	uxth	r3, r3
 8001482:	461a      	mov	r2, r3
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fe12 	bl	80010b0 <calc_zero_detector>
 800148c:	e000      	b.n	8001490 <calc_downsample+0x188>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800148e:	bf00      	nop
}
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	20003c30 	.word	0x20003c30
 800149c:	55555556 	.word	0x55555556
 80014a0:	20005670 	.word	0x20005670
 80014a4:	200000d4 	.word	0x200000d4
 80014a8:	cccccccd 	.word	0xcccccccd

080014ac <calc_show_buffer>:

/*
 * Show the adc_raw_buf contents in terminal
 */
void calc_show_buffer(uint8_t buf_num) {
 80014ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014b0:	b088      	sub	sp, #32
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
	uint16_t address = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	837b      	strh	r3, [r7, #26]
	uint64_t squared_acc = 0;
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint16_t rms_value, adc_raw;
	//uint16_t adc_raw_min = adc_raw_buf[buf_num][0];
	//uint16_t adc_raw_max = adc_raw_min;
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	f200 80b0 	bhi.w	8001634 <calc_show_buffer+0x188>
	term_print("Buffer %d\r\n", buf_num);
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4619      	mov	r1, r3
 80014d8:	4859      	ldr	r0, [pc, #356]	; (8001640 <calc_show_buffer+0x194>)
 80014da:	f001 fe23 	bl	8003124 <term_print>
	term_print("%3d: ", 0);
 80014de:	2100      	movs	r1, #0
 80014e0:	4858      	ldr	r0, [pc, #352]	; (8001644 <calc_show_buffer+0x198>)
 80014e2:	f001 fe1f 	bl	8003124 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	e044      	b.n	8001576 <calc_show_buffer+0xca>
		if (count >= 20) {
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	2b13      	cmp	r3, #19
 80014f0:	dd06      	ble.n	8001500 <calc_show_buffer+0x54>
			count =0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
			term_print("\r\n%3d: ", address);
 80014f6:	8b7b      	ldrh	r3, [r7, #26]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4853      	ldr	r0, [pc, #332]	; (8001648 <calc_show_buffer+0x19c>)
 80014fc:	f001 fe12 	bl	8003124 <term_print>
		}
		adc_raw = adc_raw_buf[buf_num][i];
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	4952      	ldr	r1, [pc, #328]	; (800164c <calc_show_buffer+0x1a0>)
 8001504:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001508:	fb03 f202 	mul.w	r2, r3, r2
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001514:	813b      	strh	r3, [r7, #8]
		term_print("%04u ", adc_raw);
 8001516:	893b      	ldrh	r3, [r7, #8]
 8001518:	4619      	mov	r1, r3
 800151a:	484d      	ldr	r0, [pc, #308]	; (8001650 <calc_show_buffer+0x1a4>)
 800151c:	f001 fe02 	bl	8003124 <term_print>

		squared_acc += adc_raw_buf[buf_num][i] * adc_raw_buf[buf_num][i];
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	494a      	ldr	r1, [pc, #296]	; (800164c <calc_show_buffer+0x1a0>)
 8001524:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001528:	fb03 f202 	mul.w	r2, r3, r2
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001534:	4618      	mov	r0, r3
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	4944      	ldr	r1, [pc, #272]	; (800164c <calc_show_buffer+0x1a0>)
 800153a:	f44f 7252 	mov.w	r2, #840	; 0x348
 800153e:	fb03 f202 	mul.w	r2, r3, r2
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4413      	add	r3, r2
 8001546:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800154a:	fb00 f303 	mul.w	r3, r0, r3
 800154e:	17da      	asrs	r2, r3, #31
 8001550:	461c      	mov	r4, r3
 8001552:	4615      	mov	r5, r2
 8001554:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001558:	eb12 0804 	adds.w	r8, r2, r4
 800155c:	eb43 0905 	adc.w	r9, r3, r5
 8001560:	e9c7 8904 	strd	r8, r9, [r7, #16]
		count++; address++;
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	3301      	adds	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	8b7b      	ldrh	r3, [r7, #26]
 800156c:	3301      	adds	r3, #1
 800156e:	837b      	strh	r3, [r7, #26]
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3301      	adds	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 800157c:	d3b6      	bcc.n	80014ec <calc_show_buffer+0x40>
	}
	rms_value = (uint16_t) sqrt((squared_acc / ADC_NUM_DATA));
 800157e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001582:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	f7ff fb4d 	bl	8000c28 <__aeabi_uldivmod>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff f819 	bl	80005cc <__aeabi_ul2d>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	ec43 2b10 	vmov	d0, r2, r3
 80015a2:	f009 fbd7 	bl	800ad54 <sqrt>
 80015a6:	ec53 2b10 	vmov	r2, r3, d0
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f7ff fb1b 	bl	8000be8 <__aeabi_d2uiz>
 80015b2:	4603      	mov	r3, r0
 80015b4:	817b      	strh	r3, [r7, #10]
	term_print("\r\nMin: %dmV Max: %dmV ", calc_adc_raw_to_mv_int(sample_buf_meta[buf_num].min), calc_adc_raw_to_mv_int(sample_buf_meta[buf_num].max) );
 80015b6:	79fa      	ldrb	r2, [r7, #7]
 80015b8:	4926      	ldr	r1, [pc, #152]	; (8001654 <calc_show_buffer+0x1a8>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 f882 	bl	80016d0 <calc_adc_raw_to_mv_int>
 80015cc:	4604      	mov	r4, r0
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	4920      	ldr	r1, [pc, #128]	; (8001654 <calc_show_buffer+0x1a8>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	3302      	adds	r3, #2
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f875 	bl	80016d0 <calc_adc_raw_to_mv_int>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	4621      	mov	r1, r4
 80015ec:	481a      	ldr	r0, [pc, #104]	; (8001658 <calc_show_buffer+0x1ac>)
 80015ee:	f001 fd99 	bl	8003124 <term_print>
	term_print("RMS: %dmV [%u]\r\n", calc_adc_raw_to_mv_int(rms_value), rms_value);
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f86b 	bl	80016d0 <calc_adc_raw_to_mv_int>
 80015fa:	4601      	mov	r1, r0
 80015fc:	897b      	ldrh	r3, [r7, #10]
 80015fe:	461a      	mov	r2, r3
 8001600:	4816      	ldr	r0, [pc, #88]	; (800165c <calc_show_buffer+0x1b0>)
 8001602:	f001 fd8f 	bl	8003124 <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[buf_num].zero_cross_pos, sample_buf_meta[buf_num].zero_cross_neg);
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	4912      	ldr	r1, [pc, #72]	; (8001654 <calc_show_buffer+0x1a8>)
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	3304      	adds	r3, #4
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	79fa      	ldrb	r2, [r7, #7]
 800161a:	480e      	ldr	r0, [pc, #56]	; (8001654 <calc_show_buffer+0x1a8>)
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4403      	add	r3, r0
 8001626:	3308      	adds	r3, #8
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <calc_show_buffer+0x1b4>)
 800162e:	f001 fd79 	bl	8003124 <term_print>
 8001632:	e000      	b.n	8001636 <calc_show_buffer+0x18a>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8001634:	bf00      	nop

}
 8001636:	3720      	adds	r7, #32
 8001638:	46bd      	mov	sp, r7
 800163a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800163e:	bf00      	nop
 8001640:	0800b07c 	.word	0x0800b07c
 8001644:	0800b088 	.word	0x0800b088
 8001648:	0800b090 	.word	0x0800b090
 800164c:	20003c30 	.word	0x20003c30
 8001650:	0800b098 	.word	0x0800b098
 8001654:	200000d4 	.word	0x200000d4
 8001658:	0800b0a0 	.word	0x0800b0a0
 800165c:	0800b0b8 	.word	0x0800b0b8
 8001660:	0800b0cc 	.word	0x0800b0cc

08001664 <calc_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void calc_csv_buffer(uint8_t buf_num) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
	if (buf_num > 3) { return; }
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d821      	bhi.n	80016b8 <calc_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	4619      	mov	r1, r3
 8001678:	4811      	ldr	r0, [pc, #68]	; (80016c0 <calc_csv_buffer+0x5c>)
 800167a:	f001 fd53 	bl	8003124 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	e011      	b.n	80016a8 <calc_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	490f      	ldr	r1, [pc, #60]	; (80016c4 <calc_csv_buffer+0x60>)
 8001688:	f44f 7252 	mov.w	r2, #840	; 0x348
 800168c:	fb03 f202 	mul.w	r2, r3, r2
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001698:	461a      	mov	r2, r3
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	480a      	ldr	r0, [pc, #40]	; (80016c8 <calc_csv_buffer+0x64>)
 800169e:	f001 fd41 	bl	8003124 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3301      	adds	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 80016ae:	d3e9      	bcc.n	8001684 <calc_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <calc_csv_buffer+0x68>)
 80016b2:	f001 fd37 	bl	8003124 <term_print>
 80016b6:	e000      	b.n	80016ba <calc_csv_buffer+0x56>
	if (buf_num > 3) { return; }
 80016b8:	bf00      	nop
}
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	0800b07c 	.word	0x0800b07c
 80016c4:	20003c30 	.word	0x20003c30
 80016c8:	0800b0ec 	.word	0x0800b0ec
 80016cc:	0800b0f4 	.word	0x0800b0f4

080016d0 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns mv as int
 */
int calc_adc_raw_to_mv_int(uint16_t adc_raw) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f817 	bl	8001710 <calc_adc_raw_to_mv_float>
 80016e2:	ee10 3a10 	vmov	r3, s0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff4e 	bl	8000588 <__aeabi_f2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	ec43 2b10 	vmov	d0, r2, r3
 80016f4:	f009 fc34 	bl	800af60 <round>
 80016f8:	ec53 2b10 	vmov	r2, r3, d0
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa4a 	bl	8000b98 <__aeabi_d2iz>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(uint16_t adc_raw) {
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001724:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001744 <calc_adc_raw_to_mv_float+0x34>
 8001728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001748 <calc_adc_raw_to_mv_float+0x38>
 8001730:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001734:	eeb0 0a67 	vmov.f32	s0, s15
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	457ff000 	.word	0x457ff000
 8001748:	454e4000 	.word	0x454e4000

0800174c <cmd_error>:
extern uint8_t led_cmd;
extern uint8_t tft_display;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4803      	ldr	r0, [pc, #12]	; (8001764 <cmd_error+0x18>)
 8001758:	f001 fce4 	bl	8003124 <term_print>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	0800b0fc 	.word	0x0800b0fc

08001768 <cmd_t>:


int cmd_t(uint8_t* cmd_str) {
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3301      	adds	r3, #1
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b74      	cmp	r3, #116	; 0x74
 8001778:	d014      	beq.n	80017a4 <cmd_t+0x3c>
 800177a:	2b74      	cmp	r3, #116	; 0x74
 800177c:	dc17      	bgt.n	80017ae <cmd_t+0x46>
 800177e:	2b54      	cmp	r3, #84	; 0x54
 8001780:	d010      	beq.n	80017a4 <cmd_t+0x3c>
 8001782:	2b54      	cmp	r3, #84	; 0x54
 8001784:	dc13      	bgt.n	80017ae <cmd_t+0x46>
 8001786:	2b30      	cmp	r3, #48	; 0x30
 8001788:	d002      	beq.n	8001790 <cmd_t+0x28>
 800178a:	2b31      	cmp	r3, #49	; 0x31
 800178c:	d005      	beq.n	800179a <cmd_t+0x32>
 800178e:	e00e      	b.n	80017ae <cmd_t+0x46>
	case '0':
		tft_display = 1;
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <cmd_t+0x58>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
		return 0;
 8001796:	2300      	movs	r3, #0
 8001798:	e00b      	b.n	80017b2 <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <cmd_t+0x58>)
 800179c:	2202      	movs	r2, #2
 800179e:	701a      	strb	r2, [r3, #0]
		return 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e006      	b.n	80017b2 <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <cmd_t+0x58>)
 80017a6:	2209      	movs	r2, #9
 80017a8:	701a      	strb	r2, [r3, #0]
		return 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e001      	b.n	80017b2 <cmd_t+0x4a>
	}
	return -1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	2000079e 	.word	0x2000079e

080017c4 <cmd_help>:


int cmd_help(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <cmd_help+0x34>)
 80017ca:	f001 fcab 	bl	8003124 <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 80017ce:	480b      	ldr	r0, [pc, #44]	; (80017fc <cmd_help+0x38>)
 80017d0:	f001 fca8 	bl	8003124 <term_print>
#ifdef USE_DISPLAY
	term_print("D[1..4]: Display ADC channel 1 - 4 on TFT display\r\n");
 80017d4:	480a      	ldr	r0, [pc, #40]	; (8001800 <cmd_help+0x3c>)
 80017d6:	f001 fca5 	bl	8003124 <term_print>
#endif
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 80017da:	480a      	ldr	r0, [pc, #40]	; (8001804 <cmd_help+0x40>)
 80017dc:	f001 fca2 	bl	8003124 <term_print>
	term_print("R: Restart ADC conversion\r\n");
 80017e0:	4809      	ldr	r0, [pc, #36]	; (8001808 <cmd_help+0x44>)
 80017e2:	f001 fc9f 	bl	8003124 <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 80017e6:	4809      	ldr	r0, [pc, #36]	; (800180c <cmd_help+0x48>)
 80017e8:	f001 fc9c 	bl	8003124 <term_print>
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <cmd_help+0x4c>)
 80017ee:	f001 fc99 	bl	8003124 <term_print>
	return 0;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	0800b114 	.word	0x0800b114
 80017fc:	0800b128 	.word	0x0800b128
 8001800:	0800b160 	.word	0x0800b160
 8001804:	0800b194 	.word	0x0800b194
 8001808:	0800b1d4 	.word	0x0800b1d4
 800180c:	0800b1f0 	.word	0x0800b1f0
 8001810:	0800b224 	.word	0x0800b224

08001814 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	int retval = -1;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001820:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	3b3f      	subs	r3, #63	; 0x3f
 8001828:	2b35      	cmp	r3, #53	; 0x35
 800182a:	f200 80a5 	bhi.w	8001978 <cmd_process+0x164>
 800182e:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <cmd_process+0x20>)
 8001830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001834:	08001973 	.word	0x08001973
 8001838:	08001979 	.word	0x08001979
 800183c:	08001979 	.word	0x08001979
 8001840:	08001979 	.word	0x08001979
 8001844:	0800190d 	.word	0x0800190d
 8001848:	08001921 	.word	0x08001921
 800184c:	08001979 	.word	0x08001979
 8001850:	08001979 	.word	0x08001979
 8001854:	08001979 	.word	0x08001979
 8001858:	08001973 	.word	0x08001973
 800185c:	08001979 	.word	0x08001979
 8001860:	08001979 	.word	0x08001979
 8001864:	08001979 	.word	0x08001979
 8001868:	08001935 	.word	0x08001935
 800186c:	08001979 	.word	0x08001979
 8001870:	08001979 	.word	0x08001979
 8001874:	08001979 	.word	0x08001979
 8001878:	08001979 	.word	0x08001979
 800187c:	08001979 	.word	0x08001979
 8001880:	08001949 	.word	0x08001949
 8001884:	08001955 	.word	0x08001955
 8001888:	08001969 	.word	0x08001969
 800188c:	08001979 	.word	0x08001979
 8001890:	08001979 	.word	0x08001979
 8001894:	08001979 	.word	0x08001979
 8001898:	08001979 	.word	0x08001979
 800189c:	08001979 	.word	0x08001979
 80018a0:	08001979 	.word	0x08001979
 80018a4:	08001979 	.word	0x08001979
 80018a8:	08001979 	.word	0x08001979
 80018ac:	08001979 	.word	0x08001979
 80018b0:	08001979 	.word	0x08001979
 80018b4:	08001979 	.word	0x08001979
 80018b8:	08001979 	.word	0x08001979
 80018bc:	08001979 	.word	0x08001979
 80018c0:	08001979 	.word	0x08001979
 80018c4:	0800190d 	.word	0x0800190d
 80018c8:	08001921 	.word	0x08001921
 80018cc:	08001979 	.word	0x08001979
 80018d0:	08001979 	.word	0x08001979
 80018d4:	08001979 	.word	0x08001979
 80018d8:	08001973 	.word	0x08001973
 80018dc:	08001979 	.word	0x08001979
 80018e0:	08001979 	.word	0x08001979
 80018e4:	08001979 	.word	0x08001979
 80018e8:	08001935 	.word	0x08001935
 80018ec:	08001979 	.word	0x08001979
 80018f0:	08001979 	.word	0x08001979
 80018f4:	08001979 	.word	0x08001979
 80018f8:	08001979 	.word	0x08001979
 80018fc:	08001979 	.word	0x08001979
 8001900:	08001949 	.word	0x08001949
 8001904:	08001955 	.word	0x08001955
 8001908:	08001969 	.word	0x08001969
	case 'C':
	case 'c':
		csv_buffer = cmd_str[1] - 0x30;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3301      	adds	r3, #1
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	3b30      	subs	r3, #48	; 0x30
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <cmd_process+0x170>)
 8001918:	701a      	strb	r2, [r3, #0]
		retval = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
		break;
 800191e:	e02b      	b.n	8001978 <cmd_process+0x164>
#ifdef USE_DISPLAY
	case 'D':
	case 'd':
		cmd_display_buffer = cmd_str[1] - 0x30;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3301      	adds	r3, #1
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	3b30      	subs	r3, #48	; 0x30
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <cmd_process+0x174>)
 800192c:	701a      	strb	r2, [r3, #0]
		retval = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
		break;
 8001932:	e021      	b.n	8001978 <cmd_process+0x164>
#endif
	case 'L':
	case 'l':
		led_cmd = cmd_str[1] - 0x30 + 1;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3301      	adds	r3, #1
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3b2f      	subs	r3, #47	; 0x2f
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <cmd_process+0x178>)
 8001940:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
		break;
 8001946:	e017      	b.n	8001978 <cmd_process+0x164>
	case 'R':
	case 'r':
		adc_restart = 1;
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <cmd_process+0x17c>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
		retval = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
		break;
 8001952:	e011      	b.n	8001978 <cmd_process+0x164>
	case 'S':
	case 's':
		show_buffer = cmd_str[1] - 0x30;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3301      	adds	r3, #1
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	3b30      	subs	r3, #48	; 0x30
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <cmd_process+0x180>)
 8001960:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
		break;
 8001966:	e007      	b.n	8001978 <cmd_process+0x164>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff fefd 	bl	8001768 <cmd_t>
 800196e:	60f8      	str	r0, [r7, #12]
		break;
 8001970:	e002      	b.n	8001978 <cmd_process+0x164>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 8001972:	f7ff ff27 	bl	80017c4 <cmd_help>
 8001976:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 8001978:	68fb      	ldr	r3, [r7, #12]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000079c 	.word	0x2000079c
 8001988:	2000079b 	.word	0x2000079b
 800198c:	2000079d 	.word	0x2000079d
 8001990:	20000799 	.word	0x20000799
 8001994:	2000079a 	.word	0x2000079a

08001998 <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7fe fc35 	bl	8000210 <strlen>
 80019a6:	4603      	mov	r3, r0
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <CMD_Handler+0x3c>)
 80019ac:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <CMD_Handler+0x3c>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d105      	bne.n	80019c2 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff fec8 	bl	800174c <cmd_error>
		return -1;
 80019bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c0:	e003      	b.n	80019ca <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ff26 	bl	8001814 <cmd_process>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000104 	.word	0x20000104

080019d8 <draw_curve>:
uint16_t curve_y[DISPLAY_X];	// store the curve before drawing, enables overwrite on next curve
uint16_t curve_len = 0;
char str[32];
uint8_t lastbuf = 9;

void draw_curve(uint16_t colour) {
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b087      	sub	sp, #28
 80019dc:	af02      	add	r7, sp, #8
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
	for (int x=1; x<curve_len; x++) {
 80019e2:	2301      	movs	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	e019      	b.n	8001a1c <draw_curve+0x44>
		Displ_Line(x-1, curve_y[x-1], x, curve_y[x], colour);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b218      	sxth	r0, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <draw_curve+0x5c>)
 80019f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019fc:	b219      	sxth	r1, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4c0c      	ldr	r4, [pc, #48]	; (8001a34 <draw_curve+0x5c>)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001a0a:	b21c      	sxth	r4, r3
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	4623      	mov	r3, r4
 8001a12:	f002 f962 	bl	8003cda <Displ_Line>
	for (int x=1; x<curve_len; x++) {
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <draw_curve+0x60>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4293      	cmp	r3, r2
 8001a26:	dbdf      	blt.n	80019e8 <draw_curve+0x10>
	}
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd90      	pop	{r4, r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000108 	.word	0x20000108
 8001a38:	200004c8 	.word	0x200004c8

08001a3c <display_show_curve>:
/*
 * Show a ADC channel curve on TFT display
 * parameter bufnum: adc_raw_buf index to ADC channel
 * Disp_CLS() takes a long time to run so we draw the previous curve in black to remove it
 */
void display_show_curve(uint8_t bufnum) {
 8001a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a3e:	b095      	sub	sp, #84	; 0x54
 8001a40:	af06      	add	r7, sp, #24
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	f200 821b 	bhi.w	8001e84 <display_show_curve+0x448>

	int y_offset = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
	int y_max = DISPLAY_Y -1;		// max Y pixel position
 8001a52:	f240 133f 	movw	r3, #319	; 0x13f
 8001a56:	61fb      	str	r3, [r7, #28]
	int x_max = ADC_NUM_DATA / 2;	// we have twice as many readings as pixels on the display
 8001a58:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8001a5c:	61bb      	str	r3, [r7, #24]
	int value = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
	int buf_index = 1;
 8001a62:	2301      	movs	r3, #1
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
	int y_grid_100 = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
	int y_grid_50 = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
	int y_grid_25 = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]

	int scale_factor = 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
	float fScale = (float)DISPLAY_Y / (float)sample_buf_meta[bufnum].max;
 8001a76:	79fa      	ldrb	r2, [r7, #7]
 8001a78:	4924      	ldr	r1, [pc, #144]	; (8001b0c <display_show_curve+0xd0>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	3302      	adds	r3, #2
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a90:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001b10 <display_show_curve+0xd4>
 8001a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a98:	edc7 7a02 	vstr	s15, [r7, #8]
	if (fScale < 1) {
 8001a9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	d534      	bpl.n	8001b18 <display_show_curve+0xdc>
		scale_factor = trunc(1/fScale)+1; // divisor
 8001aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ab2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ab6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001aba:	ee16 0a90 	vmov	r0, s13
 8001abe:	f7fe fd63 	bl	8000588 <__aeabi_f2d>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	ec43 2b10 	vmov	d0, r2, r3
 8001aca:	f009 fa91 	bl	800aff0 <trunc>
 8001ace:	ec51 0b10 	vmov	r0, r1, d0
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <display_show_curve+0xd8>)
 8001ad8:	f7fe fbf8 	bl	80002cc <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f858 	bl	8000b98 <__aeabi_d2iz>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
		value = sample_buf_meta[bufnum].max / scale_factor;
 8001aec:	79fa      	ldrb	r2, [r7, #7]
 8001aee:	4907      	ldr	r1, [pc, #28]	; (8001b0c <display_show_curve+0xd0>)
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	3302      	adds	r3, #2
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b02:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
 8001b08:	e025      	b.n	8001b56 <display_show_curve+0x11a>
 8001b0a:	bf00      	nop
 8001b0c:	200000d4 	.word	0x200000d4
 8001b10:	43a00000 	.word	0x43a00000
 8001b14:	3ff00000 	.word	0x3ff00000
	} else {
		scale_factor = trunc(fScale);	// multiplier
 8001b18:	68b8      	ldr	r0, [r7, #8]
 8001b1a:	f7fe fd35 	bl	8000588 <__aeabi_f2d>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	ec43 2b10 	vmov	d0, r2, r3
 8001b26:	f009 fa63 	bl	800aff0 <trunc>
 8001b2a:	ec53 2b10 	vmov	r2, r3, d0
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7ff f831 	bl	8000b98 <__aeabi_d2iz>
 8001b36:	4603      	mov	r3, r0
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
		value = sample_buf_meta[bufnum].max * scale_factor;
 8001b3a:	79fa      	ldrb	r2, [r7, #7]
 8001b3c:	49ae      	ldr	r1, [pc, #696]	; (8001df8 <display_show_curve+0x3bc>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	3302      	adds	r3, #2
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
	}
	y_grid_100 = y_max - value + y_offset;
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	6a3a      	ldr	r2, [r7, #32]
 8001b5e:	4413      	add	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
	y_grid_50 = y_max - value/2 + y_offset;
 8001b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b64:	0fda      	lsrs	r2, r3, #31
 8001b66:	4413      	add	r3, r2
 8001b68:	105b      	asrs	r3, r3, #1
 8001b6a:	425b      	negs	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	4413      	add	r3, r2
 8001b72:	6a3a      	ldr	r2, [r7, #32]
 8001b74:	4413      	add	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
	y_grid_25 = y_max - value/4 + y_offset;
 8001b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da00      	bge.n	8001b80 <display_show_curve+0x144>
 8001b7e:	3303      	adds	r3, #3
 8001b80:	109b      	asrs	r3, r3, #2
 8001b82:	425b      	negs	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	4413      	add	r3, r2
 8001b8a:	6a3a      	ldr	r2, [r7, #32]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
	} else {
		Displ_CLS(BLACK);
		curve_len = 0;
	}*/

	Displ_CLS(BLACK);
 8001b90:	2000      	movs	r0, #0
 8001b92:	f001 feb9 	bl	8003908 <Displ_CLS>

	// Draw grid lines
	Displ_Line(0, y_grid_100, x_max, y_grid_100, WHITE);	// 100%
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	b219      	sxth	r1, r3
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	b21a      	sxth	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	b21b      	sxth	r3, r3
 8001ba2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ba6:	9000      	str	r0, [sp, #0]
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f002 f896 	bl	8003cda <Displ_Line>
	Displ_Line(0, y_grid_50, x_max, y_grid_50, WHITE);	// 50%
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	b219      	sxth	r1, r3
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bbe:	9000      	str	r0, [sp, #0]
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f002 f88a 	bl	8003cda <Displ_Line>
	Displ_Line(0, DISPLAY_Y-1, x_max, DISPLAY_Y-1, WHITE);	// Zero
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	f240 133f 	movw	r3, #319	; 0x13f
 8001bd4:	f240 113f 	movw	r1, #319	; 0x13f
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f002 f87e 	bl	8003cda <Displ_Line>

	// Display grid values
	snprintf(str,32,"%d",calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max));
 8001bde:	79fa      	ldrb	r2, [r7, #7]
 8001be0:	4985      	ldr	r1, [pc, #532]	; (8001df8 <display_show_curve+0x3bc>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	3302      	adds	r3, #2
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fd6d 	bl	80016d0 <calc_adc_raw_to_mv_int>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a80      	ldr	r2, [pc, #512]	; (8001dfc <display_show_curve+0x3c0>)
 8001bfa:	2120      	movs	r1, #32
 8001bfc:	4880      	ldr	r0, [pc, #512]	; (8001e00 <display_show_curve+0x3c4>)
 8001bfe:	f007 ff4d 	bl	8009a9c <sniprintf>
	value = Font16.Width * strlen(str);
 8001c02:	4b80      	ldr	r3, [pc, #512]	; (8001e04 <display_show_curve+0x3c8>)
 8001c04:	889b      	ldrh	r3, [r3, #4]
 8001c06:	461c      	mov	r4, r3
 8001c08:	487d      	ldr	r0, [pc, #500]	; (8001e00 <display_show_curve+0x3c4>)
 8001c0a:	f7fe fb01 	bl	8000210 <strlen>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	fb04 f303 	mul.w	r3, r4, r3
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
	Displ_WString(x_max, y_grid_100, str , Font16, 1, BLACK, WHITE);
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	b29c      	uxth	r4, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	b29d      	uxth	r5, r3
 8001c1e:	4b79      	ldr	r3, [pc, #484]	; (8001e04 <display_show_curve+0x3c8>)
 8001c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c24:	9204      	str	r2, [sp, #16]
 8001c26:	2200      	movs	r2, #0
 8001c28:	9203      	str	r2, [sp, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	9202      	str	r2, [sp, #8]
 8001c2e:	466e      	mov	r6, sp
 8001c30:	1d1a      	adds	r2, r3, #4
 8001c32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c36:	e886 0003 	stmia.w	r6, {r0, r1}
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a70      	ldr	r2, [pc, #448]	; (8001e00 <display_show_curve+0x3c4>)
 8001c3e:	4629      	mov	r1, r5
 8001c40:	4620      	mov	r0, r4
 8001c42:	f002 fe03 	bl	800484c <Displ_WString>
	snprintf(str,32,"%d",calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max/2));
 8001c46:	79fa      	ldrb	r2, [r7, #7]
 8001c48:	496b      	ldr	r1, [pc, #428]	; (8001df8 <display_show_curve+0x3bc>)
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	3302      	adds	r3, #2
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	085b      	lsrs	r3, r3, #1
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fd37 	bl	80016d0 <calc_adc_raw_to_mv_int>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a65      	ldr	r2, [pc, #404]	; (8001dfc <display_show_curve+0x3c0>)
 8001c66:	2120      	movs	r1, #32
 8001c68:	4865      	ldr	r0, [pc, #404]	; (8001e00 <display_show_curve+0x3c4>)
 8001c6a:	f007 ff17 	bl	8009a9c <sniprintf>
	value = Font16.Width * strlen(str);
 8001c6e:	4b65      	ldr	r3, [pc, #404]	; (8001e04 <display_show_curve+0x3c8>)
 8001c70:	889b      	ldrh	r3, [r3, #4]
 8001c72:	461c      	mov	r4, r3
 8001c74:	4862      	ldr	r0, [pc, #392]	; (8001e00 <display_show_curve+0x3c4>)
 8001c76:	f7fe facb 	bl	8000210 <strlen>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	fb04 f303 	mul.w	r3, r4, r3
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
	Displ_WString(x_max, y_grid_50-Font16.Height/2, str , Font16, 1, BLACK, WHITE);
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	b29c      	uxth	r4, r3
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	4b5e      	ldr	r3, [pc, #376]	; (8001e04 <display_show_curve+0x3c8>)
 8001c8c:	88db      	ldrh	r3, [r3, #6]
 8001c8e:	085b      	lsrs	r3, r3, #1
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	b29d      	uxth	r5, r3
 8001c96:	4b5b      	ldr	r3, [pc, #364]	; (8001e04 <display_show_curve+0x3c8>)
 8001c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9c:	9204      	str	r2, [sp, #16]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	9203      	str	r2, [sp, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	9202      	str	r2, [sp, #8]
 8001ca6:	466e      	mov	r6, sp
 8001ca8:	1d1a      	adds	r2, r3, #4
 8001caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cae:	e886 0003 	stmia.w	r6, {r0, r1}
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <display_show_curve+0x3c4>)
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f002 fdc7 	bl	800484c <Displ_WString>
	Displ_WString(x_max, DISPLAY_Y-Font16.Height, "0" , Font16, 1, BLACK, WHITE);
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	b29c      	uxth	r4, r3
 8001cc2:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <display_show_curve+0x3c8>)
 8001cc4:	88db      	ldrh	r3, [r3, #6]
 8001cc6:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001cca:	b29d      	uxth	r5, r3
 8001ccc:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <display_show_curve+0x3c8>)
 8001cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd2:	9204      	str	r2, [sp, #16]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	9203      	str	r2, [sp, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	9202      	str	r2, [sp, #8]
 8001cdc:	466e      	mov	r6, sp
 8001cde:	1d1a      	adds	r2, r3, #4
 8001ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ce4:	e886 0003 	stmia.w	r6, {r0, r1}
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a47      	ldr	r2, [pc, #284]	; (8001e08 <display_show_curve+0x3cc>)
 8001cec:	4629      	mov	r1, r5
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f002 fdac 	bl	800484c <Displ_WString>

	Displ_WString(x_max, y_grid_25 - Font20.Height/2, "mV" , Font20, 1, WHITE, BLACK);
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	b29c      	uxth	r4, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <display_show_curve+0x3d0>)
 8001cfe:	88db      	ldrh	r3, [r3, #6]
 8001d00:	085b      	lsrs	r3, r3, #1
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	b29d      	uxth	r5, r3
 8001d08:	4b40      	ldr	r3, [pc, #256]	; (8001e0c <display_show_curve+0x3d0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	9204      	str	r2, [sp, #16]
 8001d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d12:	9203      	str	r2, [sp, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	9202      	str	r2, [sp, #8]
 8001d18:	466e      	mov	r6, sp
 8001d1a:	1d1a      	adds	r2, r3, #4
 8001d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d20:	e886 0003 	stmia.w	r6, {r0, r1}
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a3a      	ldr	r2, [pc, #232]	; (8001e10 <display_show_curve+0x3d4>)
 8001d28:	4629      	mov	r1, r5
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f002 fd8e 	bl	800484c <Displ_WString>

	// calculate the new curve
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 8001d30:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	d53f      	bpl.n	8001dc2 <display_show_curve+0x386>
		// calculate start of first line
		curve_y[0] = y_max - (sample_buf[bufnum][0] / scale_factor + y_offset) ;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	4932      	ldr	r1, [pc, #200]	; (8001e14 <display_show_curve+0x3d8>)
 8001d4a:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001d4e:	fb00 f303 	mul.w	r3, r0, r3
 8001d52:	440b      	add	r3, r1
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	4619      	mov	r1, r3
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	fb91 f3f3 	sdiv	r3, r1, r3
 8001d5e:	b299      	uxth	r1, r3
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	440b      	add	r3, r1
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <display_show_curve+0x3dc>)
 8001d6e:	801a      	strh	r2, [r3, #0]
		for (int pos_x=1; pos_x < SAMPLE_BUF_SIZE; pos_x++) {
 8001d70:	2301      	movs	r3, #1
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d74:	e020      	b.n	8001db8 <display_show_curve+0x37c>
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = y_max - (sample_buf[bufnum][pos_x] / scale_factor + y_offset);
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	4825      	ldr	r0, [pc, #148]	; (8001e14 <display_show_curve+0x3d8>)
 8001d7e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8001d82:	fb03 f101 	mul.w	r1, r3, r1
 8001d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d88:	440b      	add	r3, r1
 8001d8a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	fb91 f3f3 	sdiv	r3, r1, r3
 8001d96:	b299      	uxth	r1, r3
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	b299      	uxth	r1, r3
 8001da4:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <display_show_curve+0x3dc>)
 8001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			// advance readings buffer by twice
			buf_index+=2;
 8001dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dae:	3302      	adds	r3, #2
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
		for (int pos_x=1; pos_x < SAMPLE_BUF_SIZE; pos_x++) {
 8001db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db4:	3301      	adds	r3, #1
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001dbe:	d3da      	bcc.n	8001d76 <display_show_curve+0x33a>
 8001dc0:	e051      	b.n	8001e66 <display_show_curve+0x42a>
		}
	} else {
		// calculate start of first line
		curve_y[0] = y_max - (sample_buf[bufnum][0] * scale_factor + y_offset) ;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	4912      	ldr	r1, [pc, #72]	; (8001e14 <display_show_curve+0x3d8>)
 8001dca:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001dce:	fb00 f303 	mul.w	r3, r0, r3
 8001dd2:	440b      	add	r3, r1
 8001dd4:	8819      	ldrh	r1, [r3, #0]
 8001dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	fb11 f303 	smulbb	r3, r1, r3
 8001dde:	b299      	uxth	r1, r3
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	440b      	add	r3, r1
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <display_show_curve+0x3dc>)
 8001dee:	801a      	strh	r2, [r3, #0]
		for (int pos_x=1; pos_x < SAMPLE_BUF_SIZE; pos_x++) {
 8001df0:	2301      	movs	r3, #1
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
 8001df4:	e033      	b.n	8001e5e <display_show_curve+0x422>
 8001df6:	bf00      	nop
 8001df8:	200000d4 	.word	0x200000d4
 8001dfc:	0800b240 	.word	0x0800b240
 8001e00:	200004cc 	.word	0x200004cc
 8001e04:	2000000c 	.word	0x2000000c
 8001e08:	0800b244 	.word	0x0800b244
 8001e0c:	20000018 	.word	0x20000018
 8001e10:	0800b248 	.word	0x0800b248
 8001e14:	20005670 	.word	0x20005670
 8001e18:	20000108 	.word	0x20000108
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = y_max - sample_buf[bufnum][pos_x] * scale_factor + y_offset;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	481a      	ldr	r0, [pc, #104]	; (8001e8c <display_show_curve+0x450>)
 8001e24:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8001e28:	fb03 f101 	mul.w	r1, r3, r1
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	440b      	add	r3, r1
 8001e30:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8001e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	fb11 f303 	smulbb	r3, r1, r3
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4413      	add	r3, r2
 8001e48:	b299      	uxth	r1, r3
 8001e4a:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <display_show_curve+0x454>)
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			// advance readings buffer by twice
			buf_index+=2;
 8001e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e54:	3302      	adds	r3, #2
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
		for (int pos_x=1; pos_x < SAMPLE_BUF_SIZE; pos_x++) {
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001e64:	d3da      	bcc.n	8001e1c <display_show_curve+0x3e0>
		}
	}

	curve_len = SAMPLE_BUF_SIZE;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <display_show_curve+0x458>)
 8001e68:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001e6c:	801a      	strh	r2, [r3, #0]
	draw_curve(channel_colour[bufnum]);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <display_show_curve+0x45c>)
 8001e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fdae 	bl	80019d8 <draw_curve>
	lastbuf = bufnum;
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <display_show_curve+0x460>)
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	7013      	strb	r3, [r2, #0]
 8001e82:	e000      	b.n	8001e86 <display_show_curve+0x44a>
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 8001e84:	bf00      	nop
}
 8001e86:	373c      	adds	r7, #60	; 0x3c
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8c:	20005670 	.word	0x20005670
 8001e90:	20000108 	.word	0x20000108
 8001e94:	200004c8 	.word	0x200004c8
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000008 	.word	0x20000008

08001ea0 <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	  if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8001ea4:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001ea8:	490d      	ldr	r1, [pc, #52]	; (8001ee0 <start_adcs+0x40>)
 8001eaa:	480e      	ldr	r0, [pc, #56]	; (8001ee4 <start_adcs+0x44>)
 8001eac:	f003 fb08 	bl	80054c0 <HAL_ADC_Start_DMA>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d004      	beq.n	8001ec0 <start_adcs+0x20>
		  term_print("Error starting ADC1 DMA\r\n");
 8001eb6:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <start_adcs+0x48>)
 8001eb8:	f001 f934 	bl	8003124 <term_print>
	  	  Error_Handler();
 8001ebc:	f000 fdaa 	bl	8002a14 <Error_Handler>
	  }
	  //Start ADC2 - keeps running via TIM2
	  if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8001ec0:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001ec4:	4909      	ldr	r1, [pc, #36]	; (8001eec <start_adcs+0x4c>)
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <start_adcs+0x50>)
 8001ec8:	f003 fafa 	bl	80054c0 <HAL_ADC_Start_DMA>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <start_adcs+0x3c>
		  term_print("Error starting ADC2 DMA\r\n");
 8001ed2:	4808      	ldr	r0, [pc, #32]	; (8001ef4 <start_adcs+0x54>)
 8001ed4:	f001 f926 	bl	8003124 <term_print>
	   	  Error_Handler();
 8001ed8:	f000 fd9c 	bl	8002a14 <Error_Handler>
	  }
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200007b0 	.word	0x200007b0
 8001ee4:	200004ec 	.word	0x200004ec
 8001ee8:	0800b24c 	.word	0x0800b24c
 8001eec:	200021f0 	.word	0x200021f0
 8001ef0:	20000534 	.word	0x20000534
 8001ef4:	0800b268 	.word	0x0800b268

08001ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001efe:	f003 fa05 	bl	800530c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f02:	f000 f9cb 	bl	800229c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f06:	f000 fbe5 	bl	80026d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f0a:	f000 fba5 	bl	8002658 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f0e:	f000 fb79 	bl	8002604 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001f12:	f000 fb2b 	bl	800256c <MX_TIM2_Init>
  MX_ADC1_Init();
 8001f16:	f000 fa33 	bl	8002380 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f1a:	f000 fa91 	bl	8002440 <MX_ADC2_Init>
  MX_SPI2_Init();
 8001f1e:	f000 faef 	bl	8002500 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

#ifdef USE_DISPLAY
  // TFT Display
  Displ_Init(Displ_Orientat_90); // initialize the display and set the initial display orientation (90°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8001f22:	2001      	movs	r0, #1
 8001f24:	f001 fa82 	bl	800342c <Displ_Init>
#endif

  // Start UART receive via interrupt
  if (HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) != HAL_OK) {
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4975      	ldr	r1, [pc, #468]	; (8002100 <main+0x208>)
 8001f2c:	4875      	ldr	r0, [pc, #468]	; (8002104 <main+0x20c>)
 8001f2e:	f006 fe1c 	bl	8008b6a <HAL_UART_Receive_IT>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <main+0x44>
    Error_Handler();
 8001f38:	f000 fd6c 	bl	8002a14 <Error_Handler>
  }

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8001f3c:	4872      	ldr	r0, [pc, #456]	; (8002108 <main+0x210>)
 8001f3e:	f006 f8f9 	bl	8008134 <HAL_TIM_Base_Start_IT>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <main+0x54>
     Error_Handler();
 8001f48:	f000 fd64 	bl	8002a14 <Error_Handler>
  }

  // Start ADCs
  start_adcs();
 8001f4c:	f7ff ffa8 	bl	8001ea0 <start_adcs>

#ifdef USE_DISPLAY
  // Draw initial TFT Display
  Displ_CLS(BLACK);			// after initialization (above) and before turning on backlight (below), you can draw the initial display appearance.
 8001f50:	2000      	movs	r0, #0
 8001f52:	f001 fcd9 	bl	8003908 <Displ_CLS>
  Displ_Line(0, 160, 479, 160, BLUE);
 8001f56:	231f      	movs	r3, #31
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	23a0      	movs	r3, #160	; 0xa0
 8001f5c:	f240 12df 	movw	r2, #479	; 0x1df
 8001f60:	21a0      	movs	r1, #160	; 0xa0
 8001f62:	2000      	movs	r0, #0
 8001f64:	f001 feb9 	bl	8003cda <Displ_Line>
  Displ_Line(0, 140, 240, 140, RED);
 8001f68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	238c      	movs	r3, #140	; 0x8c
 8001f70:	22f0      	movs	r2, #240	; 0xf0
 8001f72:	218c      	movs	r1, #140	; 0x8c
 8001f74:	2000      	movs	r0, #0
 8001f76:	f001 feb0 	bl	8003cda <Displ_Line>
  Displ_WString(10, 10, "10,10" , Font20, 1, RED, WHITE);
 8001f7a:	4b64      	ldr	r3, [pc, #400]	; (800210c <main+0x214>)
 8001f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f80:	9204      	str	r2, [sp, #16]
 8001f82:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001f86:	9203      	str	r2, [sp, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	9202      	str	r2, [sp, #8]
 8001f8c:	466c      	mov	r4, sp
 8001f8e:	1d1a      	adds	r2, r3, #4
 8001f90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f94:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a5d      	ldr	r2, [pc, #372]	; (8002110 <main+0x218>)
 8001f9c:	210a      	movs	r1, #10
 8001f9e:	200a      	movs	r0, #10
 8001fa0:	f002 fc54 	bl	800484c <Displ_WString>
  Displ_WString(380, 10, "380,10" , Font20, 1, RED, WHITE);
 8001fa4:	4b59      	ldr	r3, [pc, #356]	; (800210c <main+0x214>)
 8001fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001faa:	9204      	str	r2, [sp, #16]
 8001fac:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001fb0:	9203      	str	r2, [sp, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	9202      	str	r2, [sp, #8]
 8001fb6:	466c      	mov	r4, sp
 8001fb8:	1d1a      	adds	r2, r3, #4
 8001fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fbe:	e884 0003 	stmia.w	r4, {r0, r1}
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a53      	ldr	r2, [pc, #332]	; (8002114 <main+0x21c>)
 8001fc6:	210a      	movs	r1, #10
 8001fc8:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8001fcc:	f002 fc3e 	bl	800484c <Displ_WString>
  Displ_WString(10, 300, "10,300" , Font20, 1, RED, WHITE);
 8001fd0:	4b4e      	ldr	r3, [pc, #312]	; (800210c <main+0x214>)
 8001fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd6:	9204      	str	r2, [sp, #16]
 8001fd8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001fdc:	9203      	str	r2, [sp, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	9202      	str	r2, [sp, #8]
 8001fe2:	466c      	mov	r4, sp
 8001fe4:	1d1a      	adds	r2, r3, #4
 8001fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fea:	e884 0003 	stmia.w	r4, {r0, r1}
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a49      	ldr	r2, [pc, #292]	; (8002118 <main+0x220>)
 8001ff2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001ff6:	200a      	movs	r0, #10
 8001ff8:	f002 fc28 	bl	800484c <Displ_WString>
  Displ_BackLight('1');
 8001ffc:	2031      	movs	r0, #49	; 0x31
 8001ffe:	f002 fc65 	bl	80048cc <Displ_BackLight>
#endif

  // Startup success message
   if (HAL_UART_Transmit(&huart2, startup_msg, sizeof(startup_msg), 1000) != HAL_OK) {
 8002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002006:	2212      	movs	r2, #18
 8002008:	4944      	ldr	r1, [pc, #272]	; (800211c <main+0x224>)
 800200a:	483e      	ldr	r0, [pc, #248]	; (8002104 <main+0x20c>)
 800200c:	f006 fd1b 	bl	8008a46 <HAL_UART_Transmit>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <main+0x122>
    Error_Handler();
 8002016:	f000 fcfd 	bl	8002a14 <Error_Handler>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Handle UART communication
	  if (rx_cmd_ready) {
 800201a:	4b41      	ldr	r3, [pc, #260]	; (8002120 <main+0x228>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <main+0x13c>
		  CMD_Handler((uint8_t*)rx_buff);
 8002022:	4840      	ldr	r0, [pc, #256]	; (8002124 <main+0x22c>)
 8002024:	f7ff fcb8 	bl	8001998 <CMD_Handler>
		  rx_count = 0;
 8002028:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <main+0x230>)
 800202a:	2200      	movs	r2, #0
 800202c:	801a      	strh	r2, [r3, #0]
		  rx_cmd_ready = 0;
 800202e:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <main+0x228>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
	  }

	  if (adc_restart) {
 8002034:	4b3d      	ldr	r3, [pc, #244]	; (800212c <main+0x234>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d004      	beq.n	8002046 <main+0x14e>
		  adc_restart = 0;
 800203c:	4b3b      	ldr	r3, [pc, #236]	; (800212c <main+0x234>)
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
		  start_adcs();
 8002042:	f7ff ff2d 	bl	8001ea0 <start_adcs>
	  }

	  if (show_buffer) {
 8002046:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <main+0x238>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <main+0x16a>
		  calc_show_buffer(show_buffer-1);
 800204e:	4b38      	ldr	r3, [pc, #224]	; (8002130 <main+0x238>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	3b01      	subs	r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fa28 	bl	80014ac <calc_show_buffer>
		  show_buffer = 0;
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <main+0x238>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
	  }
	  if (csv_buffer) {
 8002062:	4b34      	ldr	r3, [pc, #208]	; (8002134 <main+0x23c>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <main+0x186>
  	  	  calc_csv_buffer(csv_buffer-1);
 800206a:	4b32      	ldr	r3, [pc, #200]	; (8002134 <main+0x23c>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	3b01      	subs	r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff faf6 	bl	8001664 <calc_csv_buffer>
	  	  csv_buffer = 0;
 8002078:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <main+0x23c>)
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
	  }

#ifdef USE_DISPLAY
	  if (cmd_display_buffer) {
 800207e:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <main+0x240>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <main+0x1a2>
		  display_show_curve(cmd_display_buffer-1);
 8002086:	4b2c      	ldr	r3, [pc, #176]	; (8002138 <main+0x240>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	3b01      	subs	r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fcd4 	bl	8001a3c <display_show_curve>
	  	  cmd_display_buffer = 0;
 8002094:	4b28      	ldr	r3, [pc, #160]	; (8002138 <main+0x240>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
	  }

	  if (tft_display) {
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <main+0x244>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d020      	beq.n	80020e4 <main+0x1ec>
		  if (tft_display == 9) {
 80020a2:	4b26      	ldr	r3, [pc, #152]	; (800213c <main+0x244>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b09      	cmp	r3, #9
 80020a8:	d10e      	bne.n	80020c8 <main+0x1d0>
			  term_print("Running TFT performance test ...\r\n");
 80020aa:	4825      	ldr	r0, [pc, #148]	; (8002140 <main+0x248>)
 80020ac:	f001 f83a 	bl	8003124 <term_print>
			  Displ_BackLight('1');
 80020b0:	2031      	movs	r0, #49	; 0x31
 80020b2:	f002 fc0b 	bl	80048cc <Displ_BackLight>
			  //Displ_PerfTest();
			  Displ_TestAll();
 80020b6:	f003 f8d3 	bl	8005260 <Displ_TestAll>
			  Displ_BackLight('0');
 80020ba:	2030      	movs	r0, #48	; 0x30
 80020bc:	f002 fc06 	bl	80048cc <Displ_BackLight>
			  term_print("....completed\r\n");
 80020c0:	4820      	ldr	r0, [pc, #128]	; (8002144 <main+0x24c>)
 80020c2:	f001 f82f 	bl	8003124 <term_print>
 80020c6:	e00a      	b.n	80020de <main+0x1e6>
		  } else {
			  if (tft_display == 1) {
 80020c8:	4b1c      	ldr	r3, [pc, #112]	; (800213c <main+0x244>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d103      	bne.n	80020d8 <main+0x1e0>
				  Displ_BackLight('0');
 80020d0:	2030      	movs	r0, #48	; 0x30
 80020d2:	f002 fbfb 	bl	80048cc <Displ_BackLight>
 80020d6:	e002      	b.n	80020de <main+0x1e6>
			  } else {
				  Displ_BackLight('1');
 80020d8:	2031      	movs	r0, #49	; 0x31
 80020da:	f002 fbf7 	bl	80048cc <Displ_BackLight>
			  }
		  }
		  tft_display = 0;
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <main+0x244>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
	  }
#endif

	  if (led_cmd) {
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <main+0x250>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d039      	beq.n	8002160 <main+0x268>
		  if (led_cmd > 1) {
 80020ec:	4b16      	ldr	r3, [pc, #88]	; (8002148 <main+0x250>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d92d      	bls.n	8002150 <main+0x258>
			  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80020f4:	2201      	movs	r2, #1
 80020f6:	2120      	movs	r1, #32
 80020f8:	4814      	ldr	r0, [pc, #80]	; (800214c <main+0x254>)
 80020fa:	f004 fc61 	bl	80069c0 <HAL_GPIO_WritePin>
 80020fe:	e02c      	b.n	800215a <main+0x262>
 8002100:	20000782 	.word	0x20000782
 8002104:	2000073c 	.word	0x2000073c
 8002108:	200006f4 	.word	0x200006f4
 800210c:	20000018 	.word	0x20000018
 8002110:	0800b284 	.word	0x0800b284
 8002114:	0800b28c 	.word	0x0800b28c
 8002118:	0800b294 	.word	0x0800b294
 800211c:	20000024 	.word	0x20000024
 8002120:	20000798 	.word	0x20000798
 8002124:	20000784 	.word	0x20000784
 8002128:	20000780 	.word	0x20000780
 800212c:	20000799 	.word	0x20000799
 8002130:	2000079a 	.word	0x2000079a
 8002134:	2000079c 	.word	0x2000079c
 8002138:	2000079b 	.word	0x2000079b
 800213c:	2000079e 	.word	0x2000079e
 8002140:	0800b29c 	.word	0x0800b29c
 8002144:	0800b2c0 	.word	0x0800b2c0
 8002148:	2000079d 	.word	0x2000079d
 800214c:	40020000 	.word	0x40020000
		  } else {
			  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002150:	2200      	movs	r2, #0
 8002152:	2120      	movs	r1, #32
 8002154:	4846      	ldr	r0, [pc, #280]	; (8002270 <main+0x378>)
 8002156:	f004 fc33 	bl	80069c0 <HAL_GPIO_WritePin>
		  }
		  led_cmd = 0;
 800215a:	4b46      	ldr	r3, [pc, #280]	; (8002274 <main+0x37c>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]

	  //HAL_Delay(800);

	  // Check if we have missed processing DMA data sets
	  // This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
	  if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 8002160:	4b45      	ldr	r3, [pc, #276]	; (8002278 <main+0x380>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	dc0b      	bgt.n	8002180 <main+0x288>
 8002168:	4b44      	ldr	r3, [pc, #272]	; (800227c <main+0x384>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	dc07      	bgt.n	8002180 <main+0x288>
 8002170:	4b43      	ldr	r3, [pc, #268]	; (8002280 <main+0x388>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	dc03      	bgt.n	8002180 <main+0x288>
 8002178:	4b42      	ldr	r3, [pc, #264]	; (8002284 <main+0x38c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	dd28      	ble.n	80021d2 <main+0x2da>
		  term_print("Processing missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
 8002180:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <main+0x380>)
 8002182:	6819      	ldr	r1, [r3, #0]
 8002184:	4b3d      	ldr	r3, [pc, #244]	; (800227c <main+0x384>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <main+0x388>)
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <main+0x38c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	4603      	mov	r3, r0
 8002194:	483c      	ldr	r0, [pc, #240]	; (8002288 <main+0x390>)
 8002196:	f000 ffc5 	bl	8003124 <term_print>
		  if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 800219a:	4b37      	ldr	r3, [pc, #220]	; (8002278 <main+0x380>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	dd02      	ble.n	80021a8 <main+0x2b0>
 80021a2:	4b35      	ldr	r3, [pc, #212]	; (8002278 <main+0x380>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
		  if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 80021a8:	4b34      	ldr	r3, [pc, #208]	; (800227c <main+0x384>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	dd02      	ble.n	80021b6 <main+0x2be>
 80021b0:	4b32      	ldr	r3, [pc, #200]	; (800227c <main+0x384>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 80021b6:	4b32      	ldr	r3, [pc, #200]	; (8002280 <main+0x388>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	dd02      	ble.n	80021c4 <main+0x2cc>
 80021be:	4b30      	ldr	r3, [pc, #192]	; (8002280 <main+0x388>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 80021c4:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <main+0x38c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	dd02      	ble.n	80021d2 <main+0x2da>
 80021cc:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <main+0x38c>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
	  }

	  // Process DMA buffers
	  if (adc1_dma_l_count > 0) {
 80021d2:	4b29      	ldr	r3, [pc, #164]	; (8002278 <main+0x380>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	dd0e      	ble.n	80021f8 <main+0x300>
		  if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 80021da:	2100      	movs	r1, #0
 80021dc:	2000      	movs	r0, #0
 80021de:	f7fe fea1 	bl	8000f24 <calc_process_dma_buffer>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <main+0x2f6>
			  term_print("Processing ADC1 DMA 1st half failed\r\n");
 80021e8:	4828      	ldr	r0, [pc, #160]	; (800228c <main+0x394>)
 80021ea:	f000 ff9b 	bl	8003124 <term_print>
		  }
		  adc1_dma_l_count--;
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <main+0x380>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	4a20      	ldr	r2, [pc, #128]	; (8002278 <main+0x380>)
 80021f6:	6013      	str	r3, [r2, #0]
	  }
	  if (adc1_dma_h_count > 0) {
 80021f8:	4b20      	ldr	r3, [pc, #128]	; (800227c <main+0x384>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	dd0e      	ble.n	800221e <main+0x326>
	  	  if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 8002200:	2100      	movs	r1, #0
 8002202:	2001      	movs	r0, #1
 8002204:	f7fe fe8e 	bl	8000f24 <calc_process_dma_buffer>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <main+0x31c>
	  		term_print("Processing ADC1 DMA 2nd half failed\r\n");
 800220e:	4820      	ldr	r0, [pc, #128]	; (8002290 <main+0x398>)
 8002210:	f000 ff88 	bl	8003124 <term_print>
	  	  }
	  	  adc1_dma_h_count--;
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <main+0x384>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3b01      	subs	r3, #1
 800221a:	4a18      	ldr	r2, [pc, #96]	; (800227c <main+0x384>)
 800221c:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_l_count > 0) {
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <main+0x388>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	dd0e      	ble.n	8002244 <main+0x34c>
	  	  if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 8002226:	2101      	movs	r1, #1
 8002228:	2000      	movs	r0, #0
 800222a:	f7fe fe7b 	bl	8000f24 <calc_process_dma_buffer>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <main+0x342>
	  		term_print("Processing ADC2 DMA 1st half failed\r\n");
 8002234:	4817      	ldr	r0, [pc, #92]	; (8002294 <main+0x39c>)
 8002236:	f000 ff75 	bl	8003124 <term_print>
	  	  }
	  	  adc2_dma_l_count--;
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <main+0x388>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	3b01      	subs	r3, #1
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <main+0x388>)
 8002242:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_h_count > 0) {
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <main+0x38c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f77f aee6 	ble.w	800201a <main+0x122>
	  	  if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 800224e:	2101      	movs	r1, #1
 8002250:	2001      	movs	r0, #1
 8002252:	f7fe fe67 	bl	8000f24 <calc_process_dma_buffer>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <main+0x36a>
	  		term_print("Processing ADC2 DMA 2nd half failed\r\n");
 800225c:	480e      	ldr	r0, [pc, #56]	; (8002298 <main+0x3a0>)
 800225e:	f000 ff61 	bl	8003124 <term_print>
	  	  }
	   	  adc2_dma_h_count--;
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <main+0x38c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3b01      	subs	r3, #1
 8002268:	4a06      	ldr	r2, [pc, #24]	; (8002284 <main+0x38c>)
 800226a:	6013      	str	r3, [r2, #0]
	  if (rx_cmd_ready) {
 800226c:	e6d5      	b.n	800201a <main+0x122>
 800226e:	bf00      	nop
 8002270:	40020000 	.word	0x40020000
 8002274:	2000079d 	.word	0x2000079d
 8002278:	200007a0 	.word	0x200007a0
 800227c:	200007a4 	.word	0x200007a4
 8002280:	200007a8 	.word	0x200007a8
 8002284:	200007ac 	.word	0x200007ac
 8002288:	0800b2d0 	.word	0x0800b2d0
 800228c:	0800b2fc 	.word	0x0800b2fc
 8002290:	0800b324 	.word	0x0800b324
 8002294:	0800b34c 	.word	0x0800b34c
 8002298:	0800b374 	.word	0x0800b374

0800229c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b094      	sub	sp, #80	; 0x50
 80022a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	2234      	movs	r2, #52	; 0x34
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f007 fd38 	bl	8009d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b0:	f107 0308 	add.w	r3, r7, #8
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <SystemClock_Config+0xdc>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	4a2b      	ldr	r2, [pc, #172]	; (8002378 <SystemClock_Config+0xdc>)
 80022ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ce:	6413      	str	r3, [r2, #64]	; 0x40
 80022d0:	4b29      	ldr	r3, [pc, #164]	; (8002378 <SystemClock_Config+0xdc>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022dc:	2300      	movs	r3, #0
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	4b26      	ldr	r3, [pc, #152]	; (800237c <SystemClock_Config+0xe0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a25      	ldr	r2, [pc, #148]	; (800237c <SystemClock_Config+0xe0>)
 80022e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b23      	ldr	r3, [pc, #140]	; (800237c <SystemClock_Config+0xe0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022f8:	2302      	movs	r3, #2
 80022fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022fc:	2301      	movs	r3, #1
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002300:	2310      	movs	r3, #16
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002304:	2302      	movs	r3, #2
 8002306:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002308:	2300      	movs	r3, #0
 800230a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800230c:	2308      	movs	r3, #8
 800230e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002310:	23b4      	movs	r3, #180	; 0xb4
 8002312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002314:	2302      	movs	r3, #2
 8002316:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002318:	2302      	movs	r3, #2
 800231a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800231c:	2302      	movs	r3, #2
 800231e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002320:	f107 031c 	add.w	r3, r7, #28
 8002324:	4618      	mov	r0, r3
 8002326:	f004 ff3d 	bl	80071a4 <HAL_RCC_OscConfig>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002330:	f000 fb70 	bl	8002a14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002334:	f004 fb9c 	bl	8006a70 <HAL_PWREx_EnableOverDrive>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800233e:	f000 fb69 	bl	8002a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002342:	230f      	movs	r3, #15
 8002344:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002346:	2302      	movs	r3, #2
 8002348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800234e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002352:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002358:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	2105      	movs	r1, #5
 8002360:	4618      	mov	r0, r3
 8002362:	f004 fbd5 	bl	8006b10 <HAL_RCC_ClockConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800236c:	f000 fb52 	bl	8002a14 <Error_Handler>
  }
}
 8002370:	bf00      	nop
 8002372:	3750      	adds	r7, #80	; 0x50
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40023800 	.word	0x40023800
 800237c:	40007000 	.word	0x40007000

08002380 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002386:	463b      	mov	r3, r7
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002392:	4b29      	ldr	r3, [pc, #164]	; (8002438 <MX_ADC1_Init+0xb8>)
 8002394:	4a29      	ldr	r2, [pc, #164]	; (800243c <MX_ADC1_Init+0xbc>)
 8002396:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <MX_ADC1_Init+0xb8>)
 800239a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800239e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <MX_ADC1_Init+0xb8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <MX_ADC1_Init+0xb8>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <MX_ADC1_Init+0xb8>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023b2:	4b21      	ldr	r3, [pc, #132]	; (8002438 <MX_ADC1_Init+0xb8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80023ba:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <MX_ADC1_Init+0xb8>)
 80023bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <MX_ADC1_Init+0xb8>)
 80023c4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80023c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ca:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <MX_ADC1_Init+0xb8>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <MX_ADC1_Init+0xb8>)
 80023d2:	2202      	movs	r2, #2
 80023d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <MX_ADC1_Init+0xb8>)
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <MX_ADC1_Init+0xb8>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023e4:	4814      	ldr	r0, [pc, #80]	; (8002438 <MX_ADC1_Init+0xb8>)
 80023e6:	f003 f827 	bl	8005438 <HAL_ADC_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80023f0:	f000 fb10 	bl	8002a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80023f8:	2301      	movs	r3, #1
 80023fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80023fc:	2303      	movs	r3, #3
 80023fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	4619      	mov	r1, r3
 8002404:	480c      	ldr	r0, [pc, #48]	; (8002438 <MX_ADC1_Init+0xb8>)
 8002406:	f003 f96b 	bl	80056e0 <HAL_ADC_ConfigChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002410:	f000 fb00 	bl	8002a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002414:	230a      	movs	r3, #10
 8002416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002418:	2302      	movs	r3, #2
 800241a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800241c:	463b      	mov	r3, r7
 800241e:	4619      	mov	r1, r3
 8002420:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_ADC1_Init+0xb8>)
 8002422:	f003 f95d 	bl	80056e0 <HAL_ADC_ConfigChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800242c:	f000 faf2 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200004ec 	.word	0x200004ec
 800243c:	40012000 	.word	0x40012000

08002440 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002446:	463b      	mov	r3, r7
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002452:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <MX_ADC2_Init+0xb8>)
 8002454:	4a29      	ldr	r2, [pc, #164]	; (80024fc <MX_ADC2_Init+0xbc>)
 8002456:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <MX_ADC2_Init+0xb8>)
 800245a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800245e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <MX_ADC2_Init+0xb8>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8002466:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <MX_ADC2_Init+0xb8>)
 8002468:	2201      	movs	r2, #1
 800246a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <MX_ADC2_Init+0xb8>)
 800246e:	2200      	movs	r2, #0
 8002470:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002472:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <MX_ADC2_Init+0xb8>)
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800247a:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <MX_ADC2_Init+0xb8>)
 800247c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002480:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <MX_ADC2_Init+0xb8>)
 8002484:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002488:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800248a:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <MX_ADC2_Init+0xb8>)
 800248c:	2200      	movs	r2, #0
 800248e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <MX_ADC2_Init+0xb8>)
 8002492:	2202      	movs	r2, #2
 8002494:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <MX_ADC2_Init+0xb8>)
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <MX_ADC2_Init+0xb8>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80024a4:	4814      	ldr	r0, [pc, #80]	; (80024f8 <MX_ADC2_Init+0xb8>)
 80024a6:	f002 ffc7 	bl	8005438 <HAL_ADC_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80024b0:	f000 fab0 	bl	8002a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80024b4:	2301      	movs	r3, #1
 80024b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80024b8:	2301      	movs	r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80024bc:	2303      	movs	r3, #3
 80024be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024c0:	463b      	mov	r3, r7
 80024c2:	4619      	mov	r1, r3
 80024c4:	480c      	ldr	r0, [pc, #48]	; (80024f8 <MX_ADC2_Init+0xb8>)
 80024c6:	f003 f90b 	bl	80056e0 <HAL_ADC_ConfigChannel>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80024d0:	f000 faa0 	bl	8002a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80024d4:	230b      	movs	r3, #11
 80024d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80024d8:	2302      	movs	r3, #2
 80024da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024dc:	463b      	mov	r3, r7
 80024de:	4619      	mov	r1, r3
 80024e0:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_ADC2_Init+0xb8>)
 80024e2:	f003 f8fd 	bl	80056e0 <HAL_ADC_ConfigChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80024ec:	f000 fa92 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000534 	.word	0x20000534
 80024fc:	40012100 	.word	0x40012100

08002500 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002504:	4b17      	ldr	r3, [pc, #92]	; (8002564 <MX_SPI2_Init+0x64>)
 8002506:	4a18      	ldr	r2, [pc, #96]	; (8002568 <MX_SPI2_Init+0x68>)
 8002508:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <MX_SPI2_Init+0x64>)
 800250c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002510:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <MX_SPI2_Init+0x64>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <MX_SPI2_Init+0x64>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <MX_SPI2_Init+0x64>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <MX_SPI2_Init+0x64>)
 8002526:	2200      	movs	r2, #0
 8002528:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <MX_SPI2_Init+0x64>)
 800252c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002530:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <MX_SPI2_Init+0x64>)
 8002534:	2200      	movs	r2, #0
 8002536:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <MX_SPI2_Init+0x64>)
 800253a:	2200      	movs	r2, #0
 800253c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <MX_SPI2_Init+0x64>)
 8002540:	2200      	movs	r2, #0
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <MX_SPI2_Init+0x64>)
 8002546:	2200      	movs	r2, #0
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <MX_SPI2_Init+0x64>)
 800254c:	220a      	movs	r2, #10
 800254e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002550:	4804      	ldr	r0, [pc, #16]	; (8002564 <MX_SPI2_Init+0x64>)
 8002552:	f005 f8c5 	bl	80076e0 <HAL_SPI_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800255c:	f000 fa5a 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	2000063c 	.word	0x2000063c
 8002568:	40003800 	.word	0x40003800

0800256c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002572:	f107 0308 	add.w	r3, r7, #8
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002580:	463b      	mov	r3, r7
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <MX_TIM2_Init+0x94>)
 800258a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800258e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <MX_TIM2_Init+0x94>)
 8002592:	2200      	movs	r2, #0
 8002594:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <MX_TIM2_Init+0x94>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <MX_TIM2_Init+0x94>)
 800259e:	f640 02ee 	movw	r2, #2286	; 0x8ee
 80025a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a4:	4b16      	ldr	r3, [pc, #88]	; (8002600 <MX_TIM2_Init+0x94>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <MX_TIM2_Init+0x94>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025b0:	4813      	ldr	r0, [pc, #76]	; (8002600 <MX_TIM2_Init+0x94>)
 80025b2:	f005 fd6f 	bl	8008094 <HAL_TIM_Base_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025bc:	f000 fa2a 	bl	8002a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025c6:	f107 0308 	add.w	r3, r7, #8
 80025ca:	4619      	mov	r1, r3
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <MX_TIM2_Init+0x94>)
 80025ce:	f005 ff29 	bl	8008424 <HAL_TIM_ConfigClockSource>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80025d8:	f000 fa1c 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025dc:	2320      	movs	r3, #32
 80025de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025e4:	463b      	mov	r3, r7
 80025e6:	4619      	mov	r1, r3
 80025e8:	4805      	ldr	r0, [pc, #20]	; (8002600 <MX_TIM2_Init+0x94>)
 80025ea:	f006 f94f 	bl	800888c <HAL_TIMEx_MasterConfigSynchronization>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025f4:	f000 fa0e 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025f8:	bf00      	nop
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200006f4 	.word	0x200006f4

08002604 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <MX_USART2_UART_Init+0x50>)
 800260c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 8002610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 800262a:	220c      	movs	r2, #12
 800262c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_USART2_UART_Init+0x4c>)
 800263c:	f006 f9b6 	bl	80089ac <HAL_UART_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002646:	f000 f9e5 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2000073c 	.word	0x2000073c
 8002654:	40004400 	.word	0x40004400

08002658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <MX_DMA_Init+0x78>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a1a      	ldr	r2, [pc, #104]	; (80026d0 <MX_DMA_Init+0x78>)
 8002668:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <MX_DMA_Init+0x78>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_DMA_Init+0x78>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <MX_DMA_Init+0x78>)
 8002684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_DMA_Init+0x78>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	200f      	movs	r0, #15
 800269c:	f003 fbab 	bl	8005df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80026a0:	200f      	movs	r0, #15
 80026a2:	f003 fbc4 	bl	8005e2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2100      	movs	r1, #0
 80026aa:	2038      	movs	r0, #56	; 0x38
 80026ac:	f003 fba3 	bl	8005df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026b0:	2038      	movs	r0, #56	; 0x38
 80026b2:	f003 fbbc 	bl	8005e2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	203a      	movs	r0, #58	; 0x3a
 80026bc:	f003 fb9b 	bl	8005df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80026c0:	203a      	movs	r0, #58	; 0x3a
 80026c2:	f003 fbb4 	bl	8005e2e <HAL_NVIC_EnableIRQ>

}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	4b57      	ldr	r3, [pc, #348]	; (800284c <MX_GPIO_Init+0x178>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a56      	ldr	r2, [pc, #344]	; (800284c <MX_GPIO_Init+0x178>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b54      	ldr	r3, [pc, #336]	; (800284c <MX_GPIO_Init+0x178>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b50      	ldr	r3, [pc, #320]	; (800284c <MX_GPIO_Init+0x178>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a4f      	ldr	r2, [pc, #316]	; (800284c <MX_GPIO_Init+0x178>)
 8002710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b4d      	ldr	r3, [pc, #308]	; (800284c <MX_GPIO_Init+0x178>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	4b49      	ldr	r3, [pc, #292]	; (800284c <MX_GPIO_Init+0x178>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a48      	ldr	r2, [pc, #288]	; (800284c <MX_GPIO_Init+0x178>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b46      	ldr	r3, [pc, #280]	; (800284c <MX_GPIO_Init+0x178>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	4b42      	ldr	r3, [pc, #264]	; (800284c <MX_GPIO_Init+0x178>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a41      	ldr	r2, [pc, #260]	; (800284c <MX_GPIO_Init+0x178>)
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b3f      	ldr	r3, [pc, #252]	; (800284c <MX_GPIO_Init+0x178>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin, GPIO_PIN_RESET);
 800275a:	2200      	movs	r2, #0
 800275c:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8002760:	483b      	ldr	r0, [pc, #236]	; (8002850 <MX_GPIO_Init+0x17c>)
 8002762:	f004 f92d 	bl	80069c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8002766:	2201      	movs	r2, #1
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	483a      	ldr	r0, [pc, #232]	; (8002854 <MX_GPIO_Init+0x180>)
 800276c:	f004 f928 	bl	80069c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8002770:	2201      	movs	r2, #1
 8002772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002776:	4836      	ldr	r0, [pc, #216]	; (8002850 <MX_GPIO_Init+0x17c>)
 8002778:	f004 f922 	bl	80069c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 800277c:	2200      	movs	r2, #0
 800277e:	2140      	movs	r1, #64	; 0x40
 8002780:	4835      	ldr	r0, [pc, #212]	; (8002858 <MX_GPIO_Init+0x184>)
 8002782:	f004 f91d 	bl	80069c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800278a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800278c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	482d      	ldr	r0, [pc, #180]	; (8002854 <MX_GPIO_Init+0x180>)
 800279e:	f003 ff63 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin;
 80027a2:	f44f 638c 	mov.w	r3, #1120	; 0x460
 80027a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a8:	2301      	movs	r3, #1
 80027aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4619      	mov	r1, r3
 80027ba:	4825      	ldr	r0, [pc, #148]	; (8002850 <MX_GPIO_Init+0x17c>)
 80027bc:	f003 ff54 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c4:	2301      	movs	r3, #1
 80027c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027cc:	2302      	movs	r3, #2
 80027ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	4619      	mov	r1, r3
 80027d6:	481e      	ldr	r0, [pc, #120]	; (8002850 <MX_GPIO_Init+0x17c>)
 80027d8:	f003 ff46 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e0:	2301      	movs	r3, #1
 80027e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	4818      	ldr	r0, [pc, #96]	; (8002854 <MX_GPIO_Init+0x180>)
 80027f4:	f003 ff38 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 80027f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fe:	2301      	movs	r3, #1
 8002800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 800280a:	f107 0314 	add.w	r3, r7, #20
 800280e:	4619      	mov	r1, r3
 8002810:	480f      	ldr	r0, [pc, #60]	; (8002850 <MX_GPIO_Init+0x17c>)
 8002812:	f003 ff29 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin;
 8002816:	2340      	movs	r3, #64	; 0x40
 8002818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281a:	2301      	movs	r3, #1
 800281c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002822:	2300      	movs	r3, #0
 8002824:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_RST_GPIO_Port, &GPIO_InitStruct);
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	4619      	mov	r1, r3
 800282c:	480a      	ldr	r0, [pc, #40]	; (8002858 <MX_GPIO_Init+0x184>)
 800282e:	f003 ff1b 	bl	8006668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002832:	2200      	movs	r2, #0
 8002834:	2100      	movs	r1, #0
 8002836:	2028      	movs	r0, #40	; 0x28
 8002838:	f003 fadd 	bl	8005df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800283c:	2028      	movs	r0, #40	; 0x28
 800283e:	f003 faf6 	bl	8005e2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002842:	bf00      	nop
 8002844:	3728      	adds	r7, #40	; 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40020000 	.word	0x40020000
 8002854:	40020800 	.word	0x40020800
 8002858:	40020400 	.word	0x40020400

0800285c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <HAL_ADC_ConvCpltCallback+0x34>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d105      	bne.n	8002878 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_ADC_ConvCpltCallback+0x38>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	4a08      	ldr	r2, [pc, #32]	; (8002894 <HAL_ADC_ConvCpltCallback+0x38>)
 8002874:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 8002876:	e004      	b.n	8002882 <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_ADC_ConvCpltCallback+0x3c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3301      	adds	r3, #1
 800287e:	4a06      	ldr	r2, [pc, #24]	; (8002898 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002880:	6013      	str	r3, [r2, #0]
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	200004ec 	.word	0x200004ec
 8002894:	200007a4 	.word	0x200007a4
 8002898:	200007ac 	.word	0x200007ac

0800289c <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d105      	bne.n	80028b8 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80028b4:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 80028b6:	e004      	b.n	80028c2 <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 80028b8:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	3301      	adds	r3, #1
 80028be:	4a06      	ldr	r2, [pc, #24]	; (80028d8 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80028c0:	6013      	str	r3, [r2, #0]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	200004ec 	.word	0x200004ec
 80028d4:	200007a0 	.word	0x200007a0
 80028d8:	200007a8 	.word	0x200007a8

080028dc <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a22      	ldr	r2, [pc, #136]	; (8002970 <HAL_ADC_ErrorCallback+0x94>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d102      	bne.n	80028f2 <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 80028ec:	2301      	movs	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e001      	b.n	80028f6 <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 80028f2:	2302      	movs	r3, #2
 80028f4:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d82c      	bhi.n	8002958 <HAL_ADC_ErrorCallback+0x7c>
 80028fe:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <HAL_ADC_ErrorCallback+0x28>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	08002919 	.word	0x08002919
 8002908:	08002929 	.word	0x08002929
 800290c:	08002939 	.word	0x08002939
 8002910:	08002959 	.word	0x08002959
 8002914:	08002949 	.word	0x08002949
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	461a      	mov	r2, r3
 800291e:	68f9      	ldr	r1, [r7, #12]
 8002920:	4814      	ldr	r0, [pc, #80]	; (8002974 <HAL_ADC_ErrorCallback+0x98>)
 8002922:	f000 fbff 	bl	8003124 <term_print>
		break;
 8002926:	e01e      	b.n	8002966 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	461a      	mov	r2, r3
 800292e:	68f9      	ldr	r1, [r7, #12]
 8002930:	4811      	ldr	r0, [pc, #68]	; (8002978 <HAL_ADC_ErrorCallback+0x9c>)
 8002932:	f000 fbf7 	bl	8003124 <term_print>
		break;
 8002936:	e016      	b.n	8002966 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	461a      	mov	r2, r3
 800293e:	68f9      	ldr	r1, [r7, #12]
 8002940:	480e      	ldr	r0, [pc, #56]	; (800297c <HAL_ADC_ErrorCallback+0xa0>)
 8002942:	f000 fbef 	bl	8003124 <term_print>
		break;
 8002946:	e00e      	b.n	8002966 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	461a      	mov	r2, r3
 800294e:	68f9      	ldr	r1, [r7, #12]
 8002950:	480b      	ldr	r0, [pc, #44]	; (8002980 <HAL_ADC_ErrorCallback+0xa4>)
 8002952:	f000 fbe7 	bl	8003124 <term_print>
		break;
 8002956:	e006      	b.n	8002966 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295c:	4619      	mov	r1, r3
 800295e:	4809      	ldr	r0, [pc, #36]	; (8002984 <HAL_ADC_ErrorCallback+0xa8>)
 8002960:	f000 fbe0 	bl	8003124 <term_print>
	}
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200004ec 	.word	0x200004ec
 8002974:	0800b39c 	.word	0x0800b39c
 8002978:	0800b3b8 	.word	0x0800b3b8
 800297c:	0800b3dc 	.word	0x0800b3dc
 8002980:	0800b3fc 	.word	0x0800b3fc
 8002984:	0800b418 	.word	0x0800b418

08002988 <HAL_UART_RxCpltCallback>:

// UART has received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	if (rx_count >= sizeof(rx_buff)) {
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_UART_RxCpltCallback+0x78>)
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	2b13      	cmp	r3, #19
 8002996:	d902      	bls.n	800299e <HAL_UART_RxCpltCallback+0x16>
		rx_count = 0;		// wrap back to start
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_UART_RxCpltCallback+0x78>)
 800299a:	2200      	movs	r2, #0
 800299c:	801a      	strh	r2, [r3, #0]
	}
	if ( HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) == HAL_UART_ERROR_NONE) {
 800299e:	2201      	movs	r2, #1
 80029a0:	4918      	ldr	r1, [pc, #96]	; (8002a04 <HAL_UART_RxCpltCallback+0x7c>)
 80029a2:	4819      	ldr	r0, [pc, #100]	; (8002a08 <HAL_UART_RxCpltCallback+0x80>)
 80029a4:	f006 f8e1 	bl	8008b6a <HAL_UART_Receive_IT>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d124      	bne.n	80029f8 <HAL_UART_RxCpltCallback+0x70>
		// check for End of input (CR or LF)
		if ( (rx_byte != 0x0A) && (rx_byte !=  0x0D) ) {
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_UART_RxCpltCallback+0x7c>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b0a      	cmp	r3, #10
 80029b4:	d00f      	beq.n	80029d6 <HAL_UART_RxCpltCallback+0x4e>
 80029b6:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <HAL_UART_RxCpltCallback+0x7c>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b0d      	cmp	r3, #13
 80029bc:	d00b      	beq.n	80029d6 <HAL_UART_RxCpltCallback+0x4e>
			rx_buff[rx_count++] = rx_byte;
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_UART_RxCpltCallback+0x78>)
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	b291      	uxth	r1, r2
 80029c6:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <HAL_UART_RxCpltCallback+0x78>)
 80029c8:	8011      	strh	r1, [r2, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_UART_RxCpltCallback+0x7c>)
 80029ce:	7819      	ldrb	r1, [r3, #0]
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_UART_RxCpltCallback+0x84>)
 80029d2:	5499      	strb	r1, [r3, r2]
				rx_cmd_ready = 1;
				rx_buff[rx_count++] = 0;	// end of string
			}
		}
	} // else { rx_error_count++; } // this should never happen
}
 80029d4:	e010      	b.n	80029f8 <HAL_UART_RxCpltCallback+0x70>
			if (rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_UART_RxCpltCallback+0x78>)
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <HAL_UART_RxCpltCallback+0x70>
				rx_cmd_ready = 1;
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_UART_RxCpltCallback+0x88>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
				rx_buff[rx_count++] = 0;	// end of string
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_UART_RxCpltCallback+0x78>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	b291      	uxth	r1, r2
 80029ec:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <HAL_UART_RxCpltCallback+0x78>)
 80029ee:	8011      	strh	r1, [r2, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_UART_RxCpltCallback+0x84>)
 80029f4:	2100      	movs	r1, #0
 80029f6:	5499      	strb	r1, [r3, r2]
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000780 	.word	0x20000780
 8002a04:	20000782 	.word	0x20000782
 8002a08:	2000073c 	.word	0x2000073c
 8002a0c:	20000784 	.word	0x20000784
 8002a10:	20000798 	.word	0x20000798

08002a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8002a18:	4802      	ldr	r0, [pc, #8]	; (8002a24 <Error_Handler+0x10>)
 8002a1a:	f007 f96f 	bl	8009cfc <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a1e:	b672      	cpsid	i
}
 8002a20:	bf00      	nop
    __disable_irq();
    while (1)
 8002a22:	e7fe      	b.n	8002a22 <Error_Handler+0xe>
 8002a24:	0800b438 	.word	0x0800b438

08002a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <HAL_MspInit+0x4c>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a0f      	ldr	r2, [pc, #60]	; (8002a74 <HAL_MspInit+0x4c>)
 8002a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <HAL_MspInit+0x4c>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_MspInit+0x4c>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <HAL_MspInit+0x4c>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_MspInit+0x4c>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a66:	2007      	movs	r0, #7
 8002a68:	f003 f9ba 	bl	8005de0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40023800 	.word	0x40023800

08002a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08e      	sub	sp, #56	; 0x38
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a79      	ldr	r2, [pc, #484]	; (8002c7c <HAL_ADC_MspInit+0x204>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d173      	bne.n	8002b82 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
 8002a9e:	4b78      	ldr	r3, [pc, #480]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	4a77      	ldr	r2, [pc, #476]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aaa:	4b75      	ldr	r3, [pc, #468]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	623b      	str	r3, [r7, #32]
 8002ab4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	4b71      	ldr	r3, [pc, #452]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a70      	ldr	r2, [pc, #448]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002ac0:	f043 0304 	orr.w	r3, r3, #4
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b6e      	ldr	r3, [pc, #440]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	4b6a      	ldr	r3, [pc, #424]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a69      	ldr	r2, [pc, #420]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b67      	ldr	r3, [pc, #412]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002aee:	2301      	movs	r3, #1
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af2:	2303      	movs	r3, #3
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afe:	4619      	mov	r1, r3
 8002b00:	4860      	ldr	r0, [pc, #384]	; (8002c84 <HAL_ADC_MspInit+0x20c>)
 8002b02:	f003 fdb1 	bl	8006668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b06:	2301      	movs	r3, #1
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b16:	4619      	mov	r1, r3
 8002b18:	485b      	ldr	r0, [pc, #364]	; (8002c88 <HAL_ADC_MspInit+0x210>)
 8002b1a:	f003 fda5 	bl	8006668 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002b1e:	4b5b      	ldr	r3, [pc, #364]	; (8002c8c <HAL_ADC_MspInit+0x214>)
 8002b20:	4a5b      	ldr	r2, [pc, #364]	; (8002c90 <HAL_ADC_MspInit+0x218>)
 8002b22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_ADC_MspInit+0x214>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b2a:	4b58      	ldr	r3, [pc, #352]	; (8002c8c <HAL_ADC_MspInit+0x214>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b30:	4b56      	ldr	r3, [pc, #344]	; (8002c8c <HAL_ADC_MspInit+0x214>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b36:	4b55      	ldr	r3, [pc, #340]	; (8002c8c <HAL_ADC_MspInit+0x214>)
 8002b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b3e:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_ADC_MspInit+0x214>)
 8002b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b46:	4b51      	ldr	r3, [pc, #324]	; (8002c8c <HAL_ADC_MspInit+0x214>)
 8002b48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b4e:	4b4f      	ldr	r3, [pc, #316]	; (8002c8c <HAL_ADC_MspInit+0x214>)
 8002b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b56:	4b4d      	ldr	r3, [pc, #308]	; (8002c8c <HAL_ADC_MspInit+0x214>)
 8002b58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b5c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b5e:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <HAL_ADC_MspInit+0x214>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b64:	4849      	ldr	r0, [pc, #292]	; (8002c8c <HAL_ADC_MspInit+0x214>)
 8002b66:	f003 f97d 	bl	8005e64 <HAL_DMA_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8002b70:	f7ff ff50 	bl	8002a14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a45      	ldr	r2, [pc, #276]	; (8002c8c <HAL_ADC_MspInit+0x214>)
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38
 8002b7a:	4a44      	ldr	r2, [pc, #272]	; (8002c8c <HAL_ADC_MspInit+0x214>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002b80:	e078      	b.n	8002c74 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a43      	ldr	r2, [pc, #268]	; (8002c94 <HAL_ADC_MspInit+0x21c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d173      	bne.n	8002c74 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	4a3a      	ldr	r2, [pc, #232]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b9a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9c:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	4a33      	ldr	r2, [pc, #204]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb8:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	4a2c      	ldr	r2, [pc, #176]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd4:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <HAL_ADC_MspInit+0x208>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002be0:	2302      	movs	r3, #2
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002be4:	2303      	movs	r3, #3
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4824      	ldr	r0, [pc, #144]	; (8002c84 <HAL_ADC_MspInit+0x20c>)
 8002bf4:	f003 fd38 	bl	8006668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c08:	4619      	mov	r1, r3
 8002c0a:	481f      	ldr	r0, [pc, #124]	; (8002c88 <HAL_ADC_MspInit+0x210>)
 8002c0c:	f003 fd2c 	bl	8006668 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002c10:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <HAL_ADC_MspInit+0x220>)
 8002c12:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <HAL_ADC_MspInit+0x224>)
 8002c14:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_ADC_MspInit+0x220>)
 8002c18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c1c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_ADC_MspInit+0x220>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c24:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <HAL_ADC_MspInit+0x220>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_ADC_MspInit+0x220>)
 8002c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c30:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c32:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <HAL_ADC_MspInit+0x220>)
 8002c34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c38:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_ADC_MspInit+0x220>)
 8002c3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c40:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_ADC_MspInit+0x220>)
 8002c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c48:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c4a:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_ADC_MspInit+0x220>)
 8002c4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c50:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_ADC_MspInit+0x220>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002c58:	480f      	ldr	r0, [pc, #60]	; (8002c98 <HAL_ADC_MspInit+0x220>)
 8002c5a:	f003 f903 	bl	8005e64 <HAL_DMA_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 8002c64:	f7ff fed6 	bl	8002a14 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a0b      	ldr	r2, [pc, #44]	; (8002c98 <HAL_ADC_MspInit+0x220>)
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_ADC_MspInit+0x220>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002c74:	bf00      	nop
 8002c76:	3738      	adds	r7, #56	; 0x38
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40012000 	.word	0x40012000
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020800 	.word	0x40020800
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	2000057c 	.word	0x2000057c
 8002c90:	40026410 	.word	0x40026410
 8002c94:	40012100 	.word	0x40012100
 8002c98:	200005dc 	.word	0x200005dc
 8002c9c:	40026440 	.word	0x40026440

08002ca0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a43      	ldr	r2, [pc, #268]	; (8002dcc <HAL_SPI_MspInit+0x12c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d17f      	bne.n	8002dc2 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	4b42      	ldr	r3, [pc, #264]	; (8002dd0 <HAL_SPI_MspInit+0x130>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4a41      	ldr	r2, [pc, #260]	; (8002dd0 <HAL_SPI_MspInit+0x130>)
 8002ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd2:	4b3f      	ldr	r3, [pc, #252]	; (8002dd0 <HAL_SPI_MspInit+0x130>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	4b3b      	ldr	r3, [pc, #236]	; (8002dd0 <HAL_SPI_MspInit+0x130>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a3a      	ldr	r2, [pc, #232]	; (8002dd0 <HAL_SPI_MspInit+0x130>)
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b38      	ldr	r3, [pc, #224]	; (8002dd0 <HAL_SPI_MspInit+0x130>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <HAL_SPI_MspInit+0x130>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a33      	ldr	r2, [pc, #204]	; (8002dd0 <HAL_SPI_MspInit+0x130>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <HAL_SPI_MspInit+0x130>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8002d16:	230c      	movs	r3, #12
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d22:	2303      	movs	r3, #3
 8002d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d26:	2305      	movs	r3, #5
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4828      	ldr	r0, [pc, #160]	; (8002dd4 <HAL_SPI_MspInit+0x134>)
 8002d32:	f003 fc99 	bl	8006668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 8002d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d48:	2305      	movs	r3, #5
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	4619      	mov	r1, r3
 8002d52:	4821      	ldr	r0, [pc, #132]	; (8002dd8 <HAL_SPI_MspInit+0x138>)
 8002d54:	f003 fc88 	bl	8006668 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002d58:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_SPI_MspInit+0x13c>)
 8002d5a:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <HAL_SPI_MspInit+0x140>)
 8002d5c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002d5e:	4b1f      	ldr	r3, [pc, #124]	; (8002ddc <HAL_SPI_MspInit+0x13c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_SPI_MspInit+0x13c>)
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <HAL_SPI_MspInit+0x13c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_SPI_MspInit+0x13c>)
 8002d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d76:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d78:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_SPI_MspInit+0x13c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d7e:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <HAL_SPI_MspInit+0x13c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002d84:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_SPI_MspInit+0x13c>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d8a:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <HAL_SPI_MspInit+0x13c>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_SPI_MspInit+0x13c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002d96:	4811      	ldr	r0, [pc, #68]	; (8002ddc <HAL_SPI_MspInit+0x13c>)
 8002d98:	f003 f864 	bl	8005e64 <HAL_DMA_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8002da2:	f7ff fe37 	bl	8002a14 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <HAL_SPI_MspInit+0x13c>)
 8002daa:	649a      	str	r2, [r3, #72]	; 0x48
 8002dac:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <HAL_SPI_MspInit+0x13c>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2100      	movs	r1, #0
 8002db6:	2024      	movs	r0, #36	; 0x24
 8002db8:	f003 f81d 	bl	8005df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002dbc:	2024      	movs	r0, #36	; 0x24
 8002dbe:	f003 f836 	bl	8005e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002dc2:	bf00      	nop
 8002dc4:	3728      	adds	r7, #40	; 0x28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40003800 	.word	0x40003800
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40020800 	.word	0x40020800
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	20000694 	.word	0x20000694
 8002de0:	40026070 	.word	0x40026070

08002de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d115      	bne.n	8002e22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <HAL_TIM_Base_MspInit+0x48>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a0b      	ldr	r2, [pc, #44]	; (8002e2c <HAL_TIM_Base_MspInit+0x48>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_TIM_Base_MspInit+0x48>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2100      	movs	r1, #0
 8002e16:	201c      	movs	r0, #28
 8002e18:	f002 ffed 	bl	8005df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e1c:	201c      	movs	r0, #28
 8002e1e:	f003 f806 	bl	8005e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800

08002e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <HAL_UART_MspInit+0x94>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d133      	bne.n	8002eba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e8a:	230c      	movs	r3, #12
 8002e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9e:	f107 0314 	add.w	r3, r7, #20
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4809      	ldr	r0, [pc, #36]	; (8002ecc <HAL_UART_MspInit+0x9c>)
 8002ea6:	f003 fbdf 	bl	8006668 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	2026      	movs	r0, #38	; 0x26
 8002eb0:	f002 ffa1 	bl	8005df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002eb4:	2026      	movs	r0, #38	; 0x26
 8002eb6:	f002 ffba 	bl	8005e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002eba:	bf00      	nop
 8002ebc:	3728      	adds	r7, #40	; 0x28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40004400 	.word	0x40004400
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40020000 	.word	0x40020000

08002ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <NMI_Handler+0x4>

08002ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eda:	e7fe      	b.n	8002eda <HardFault_Handler+0x4>

08002edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ee0:	e7fe      	b.n	8002ee0 <MemManage_Handler+0x4>

08002ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee6:	e7fe      	b.n	8002ee6 <BusFault_Handler+0x4>

08002ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eec:	e7fe      	b.n	8002eec <UsageFault_Handler+0x4>

08002eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f1c:	f002 fa48 	bl	80053b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <DMA1_Stream4_IRQHandler+0x10>)
 8002f2a:	f003 f933 	bl	8006194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000694 	.word	0x20000694

08002f38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f3c:	4804      	ldr	r0, [pc, #16]	; (8002f50 <TIM2_IRQHandler+0x18>)
 8002f3e:	f005 f969 	bl	8008214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 8002f42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f46:	4803      	ldr	r0, [pc, #12]	; (8002f54 <TIM2_IRQHandler+0x1c>)
 8002f48:	f003 fd53 	bl	80069f2 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8002f4c:	bf00      	nop
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	200006f4 	.word	0x200006f4
 8002f54:	40020000 	.word	0x40020000

08002f58 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002f5c:	4802      	ldr	r0, [pc, #8]	; (8002f68 <SPI2_IRQHandler+0x10>)
 8002f5e:	f004 fe3b 	bl	8007bd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000063c 	.word	0x2000063c

08002f6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f70:	4802      	ldr	r0, [pc, #8]	; (8002f7c <USART2_IRQHandler+0x10>)
 8002f72:	f005 fe2b 	bl	8008bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	2000073c 	.word	0x2000073c

08002f80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002f84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f88:	f003 fd4e 	bl	8006a28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f94:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <DMA2_Stream0_IRQHandler+0x10>)
 8002f96:	f003 f8fd 	bl	8006194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2000057c 	.word	0x2000057c

08002fa4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002fa8:	4802      	ldr	r0, [pc, #8]	; (8002fb4 <DMA2_Stream2_IRQHandler+0x10>)
 8002faa:	f003 f8f3 	bl	8006194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	200005dc 	.word	0x200005dc

08002fb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e00a      	b.n	8002fe0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fca:	f3af 8000 	nop.w
 8002fce:	4601      	mov	r1, r0
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	60ba      	str	r2, [r7, #8]
 8002fd6:	b2ca      	uxtb	r2, r1
 8002fd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	dbf0      	blt.n	8002fca <_read+0x12>
  }

  return len;
 8002fe8:	687b      	ldr	r3, [r7, #4]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b086      	sub	sp, #24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e009      	b.n	8003018 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	60ba      	str	r2, [r7, #8]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	3301      	adds	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	429a      	cmp	r2, r3
 800301e:	dbf1      	blt.n	8003004 <_write+0x12>
  }
  return len;
 8003020:	687b      	ldr	r3, [r7, #4]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <_close>:

int _close(int file)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003052:	605a      	str	r2, [r3, #4]
  return 0;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <_isatty>:

int _isatty(int file)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800306a:	2301      	movs	r3, #1
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800309c:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <_sbrk+0x5c>)
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <_sbrk+0x60>)
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030a8:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <_sbrk+0x64>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030b0:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <_sbrk+0x64>)
 80030b2:	4a12      	ldr	r2, [pc, #72]	; (80030fc <_sbrk+0x68>)
 80030b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <_sbrk+0x64>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d207      	bcs.n	80030d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030c4:	f006 fe34 	bl	8009d30 <__errno>
 80030c8:	4603      	mov	r3, r0
 80030ca:	220c      	movs	r2, #12
 80030cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030d2:	e009      	b.n	80030e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <_sbrk+0x64>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030da:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <_sbrk+0x64>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <_sbrk+0x64>)
 80030e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030e6:	68fb      	ldr	r3, [r7, #12]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20020000 	.word	0x20020000
 80030f4:	00000400 	.word	0x00000400
 80030f8:	20006390 	.word	0x20006390
 80030fc:	20006d38 	.word	0x20006d38

08003100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <SystemInit+0x20>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	4a05      	ldr	r2, [pc, #20]	; (8003120 <SystemInit+0x20>)
 800310c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 8003124:	b40f      	push	{r0, r1, r2, r3}
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	2140      	movs	r1, #64	; 0x40
 8003138:	480a      	ldr	r0, [pc, #40]	; (8003164 <term_print+0x40>)
 800313a:	f006 fdd1 	bl	8009ce0 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 800313e:	4809      	ldr	r0, [pc, #36]	; (8003164 <term_print+0x40>)
 8003140:	f7fd f866 	bl	8000210 <strlen>
 8003144:	4603      	mov	r3, r0
 8003146:	b29a      	uxth	r2, r3
 8003148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800314c:	4905      	ldr	r1, [pc, #20]	; (8003164 <term_print+0x40>)
 800314e:	4806      	ldr	r0, [pc, #24]	; (8003168 <term_print+0x44>)
 8003150:	f005 fc79 	bl	8008a46 <HAL_UART_Transmit>
 8003154:	4603      	mov	r3, r0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003160:	b004      	add	sp, #16
 8003162:	4770      	bx	lr
 8003164:	20006394 	.word	0x20006394
 8003168:	2000073c 	.word	0x2000073c

0800316c <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8003170:	2180      	movs	r1, #128	; 0x80
 8003172:	480f      	ldr	r0, [pc, #60]	; (80031b0 <Displ_Select+0x44>)
 8003174:	f003 fc0c 	bl	8006990 <HAL_GPIO_ReadPin>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d015      	beq.n	80031aa <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 800317e:	2201      	movs	r2, #1
 8003180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003184:	480b      	ldr	r0, [pc, #44]	; (80031b4 <Displ_Select+0x48>)
 8003186:	f003 fc1b 	bl	80069c0 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <Displ_Select+0x4c>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	490a      	ldr	r1, [pc, #40]	; (80031b8 <Displ_Select+0x4c>)
 8003190:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8003194:	4013      	ands	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
 8003198:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <Displ_Select+0x4c>)
 800319a:	4a07      	ldr	r2, [pc, #28]	; (80031b8 <Displ_Select+0x4c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 80031a0:	2200      	movs	r2, #0
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	4802      	ldr	r0, [pc, #8]	; (80031b0 <Displ_Select+0x44>)
 80031a6:	f003 fc0b 	bl	80069c0 <HAL_GPIO_WritePin>
		}
	}
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40020800 	.word	0x40020800
 80031b4:	40020000 	.word	0x40020000
 80031b8:	40003800 	.word	0x40003800

080031bc <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6039      	str	r1, [r7, #0]
 80031c4:	4611      	mov	r1, r2
 80031c6:	461a      	mov	r2, r3
 80031c8:	4603      	mov	r3, r0
 80031ca:	71fb      	strb	r3, [r7, #7]
 80031cc:	460b      	mov	r3, r1
 80031ce:	80bb      	strh	r3, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 80031d4:	bf00      	nop
 80031d6:	4b39      	ldr	r3, [pc, #228]	; (80032bc <Displ_Transmit+0x100>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0fa      	beq.n	80031d6 <Displ_Transmit+0x1a>

	Displ_Select();
 80031e0:	f7ff ffc4 	bl	800316c <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	461a      	mov	r2, r3
 80031e8:	2180      	movs	r1, #128	; 0x80
 80031ea:	4835      	ldr	r0, [pc, #212]	; (80032c0 <Displ_Transmit+0x104>)
 80031ec:	f003 fbe8 	bl	80069c0 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 80031f0:	79bb      	ldrb	r3, [r7, #6]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d043      	beq.n	800327e <Displ_Transmit+0xc2>
			*data32=__REV16(*data32);
		}
#else
//if display color format is RGB666: convert RGB565 received by TouchGFX and swap bytes

		uint8_t *buf8Pos=dispBuffer1; 							//using a local pointer
 80031f6:	4b33      	ldr	r3, [pc, #204]	; (80032c4 <Displ_Transmit+0x108>)
 80031f8:	617b      	str	r3, [r7, #20]

		uint16_t *limit=(uint16_t*)(data+dataSize);
 80031fa:	88bb      	ldrh	r3, [r7, #4]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	4413      	add	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
		for (uint16_t *data16=(uint16_t*)data; (data16<limit) & ((buf8Pos-dispBuffer1)<(SIZEBUF-3)); data16++) {
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	e020      	b.n	800324a <Displ_Transmit+0x8e>

			*(buf8Pos++)=((*data16 & 0xF800)>>8);  // R color
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	121b      	asrs	r3, r3, #8
 800320e:	b2da      	uxtb	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	1c59      	adds	r1, r3, #1
 8003214:	6179      	str	r1, [r7, #20]
 8003216:	f022 0207 	bic.w	r2, r2, #7
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
			*(buf8Pos++)=((*data16 & 0x07E0)>>3);  // G color
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	10db      	asrs	r3, r3, #3
 8003224:	b2da      	uxtb	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	1c59      	adds	r1, r3, #1
 800322a:	6179      	str	r1, [r7, #20]
 800322c:	f022 0203 	bic.w	r2, r2, #3
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]
			*(buf8Pos++)=((*data16 & 0x001F)<<3);  // B color
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	00d9      	lsls	r1, r3, #3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	617a      	str	r2, [r7, #20]
 8003240:	b2ca      	uxtb	r2, r1
 8003242:	701a      	strb	r2, [r3, #0]
		for (uint16_t *data16=(uint16_t*)data; (data16<limit) & ((buf8Pos-dispBuffer1)<(SIZEBUF-3)); data16++) {
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	3302      	adds	r3, #2
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	429a      	cmp	r2, r3
 8003250:	bf34      	ite	cc
 8003252:	2301      	movcc	r3, #1
 8003254:	2300      	movcs	r3, #0
 8003256:	b2da      	uxtb	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	491a      	ldr	r1, [pc, #104]	; (80032c4 <Displ_Transmit+0x108>)
 800325c:	1a5b      	subs	r3, r3, r1
 800325e:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8003262:	bfd4      	ite	le
 8003264:	2301      	movle	r3, #1
 8003266:	2300      	movgt	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	4013      	ands	r3, r2
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ca      	bne.n	8003208 <Displ_Transmit+0x4c>
		}

		data=dispBuffer1; 				//data (pointer to data to transfer via SPI) has to point to converted buffer
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <Displ_Transmit+0x108>)
 8003274:	603b      	str	r3, [r7, #0]
		dataSize=(buf8Pos-dispBuffer1);	//and dataSize has to contain the converted buffer size
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <Displ_Transmit+0x108>)
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	80bb      	strh	r3, [r7, #4]
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 800327e:	88bb      	ldrh	r3, [r7, #4]
 8003280:	2b13      	cmp	r3, #19
 8003282:	d80d      	bhi.n	80032a0 <Displ_Transmit+0xe4>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8003284:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <Displ_Transmit+0x100>)
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 800328a:	88ba      	ldrh	r2, [r7, #4]
 800328c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003290:	6839      	ldr	r1, [r7, #0]
 8003292:	480d      	ldr	r0, [pc, #52]	; (80032c8 <Displ_Transmit+0x10c>)
 8003294:	f004 faad 	bl	80077f2 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <Displ_Transmit+0x100>)
 800329a:	2201      	movs	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 800329e:	e008      	b.n	80032b2 <Displ_Transmit+0xf6>
			Displ_SpiAvailable=0;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <Displ_Transmit+0x100>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 80032a6:	88bb      	ldrh	r3, [r7, #4]
 80032a8:	461a      	mov	r2, r3
 80032aa:	6839      	ldr	r1, [r7, #0]
 80032ac:	4806      	ldr	r0, [pc, #24]	; (80032c8 <Displ_Transmit+0x10c>)
 80032ae:	f004 fbdd 	bl	8007a6c <HAL_SPI_Transmit_DMA>
	}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	2000003c 	.word	0x2000003c
 80032c0:	40020000 	.word	0x40020000
 80032c4:	200063dc 	.word	0x200063dc
 80032c8:	2000063c 	.word	0x2000063c

080032cc <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 80032d6:	1df9      	adds	r1, r7, #7
 80032d8:	2300      	movs	r3, #0
 80032da:	2201      	movs	r2, #1
 80032dc:	2000      	movs	r0, #0
 80032de:	f7ff ff6d 	bl	80031bc <Displ_Transmit>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	4613      	mov	r3, r2
 80032f6:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	b29a      	uxth	r2, r3
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	68f9      	ldr	r1, [r7, #12]
 8003306:	2001      	movs	r0, #1
 8003308:	f7ff ff58 	bl	80031bc <Displ_Transmit>
 800330c:	e000      	b.n	8003310 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 800330e:	bf00      	nop
}
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
	Displ_Select();
 800331c:	f7ff ff26 	bl	800316c <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8003320:	2200      	movs	r2, #0
 8003322:	2140      	movs	r1, #64	; 0x40
 8003324:	4819      	ldr	r0, [pc, #100]	; (800338c <ILI9XXX_Init+0x74>)
 8003326:	f003 fb4b 	bl	80069c0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800332a:	2001      	movs	r0, #1
 800332c:	f002 f860 	bl	80053f0 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8003330:	2201      	movs	r2, #1
 8003332:	2140      	movs	r1, #64	; 0x40
 8003334:	4815      	ldr	r0, [pc, #84]	; (800338c <ILI9XXX_Init+0x74>)
 8003336:	f003 fb43 	bl	80069c0 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 800333a:	20a5      	movs	r0, #165	; 0xa5
 800333c:	f002 f858 	bl	80053f0 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8003340:	203a      	movs	r0, #58	; 0x3a
 8003342:	f7ff ffc3 	bl	80032cc <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
 8003346:	2200      	movs	r2, #0
 8003348:	2101      	movs	r1, #1
 800334a:	4811      	ldr	r0, [pc, #68]	; (8003390 <ILI9XXX_Init+0x78>)
 800334c:	f7ff ffcd 	bl	80032ea <Displ_WriteData>
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8003350:	20b0      	movs	r0, #176	; 0xb0
 8003352:	f7ff ffbb 	bl	80032cc <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8003356:	2200      	movs	r2, #0
 8003358:	2101      	movs	r1, #1
 800335a:	480e      	ldr	r0, [pc, #56]	; (8003394 <ILI9XXX_Init+0x7c>)
 800335c:	f7ff ffc5 	bl	80032ea <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8003360:	20b0      	movs	r0, #176	; 0xb0
 8003362:	f7ff ffb3 	bl	80032cc <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8003366:	2200      	movs	r2, #0
 8003368:	2101      	movs	r1, #1
 800336a:	480a      	ldr	r0, [pc, #40]	; (8003394 <ILI9XXX_Init+0x7c>)
 800336c:	f7ff ffbd 	bl	80032ea <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8003370:	2011      	movs	r0, #17
 8003372:	f7ff ffab 	bl	80032cc <Displ_WriteCommand>
	HAL_Delay(120);
 8003376:	2078      	movs	r0, #120	; 0x78
 8003378:	f002 f83a 	bl	80053f0 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 800337c:	2029      	movs	r0, #41	; 0x29
 800337e:	f7ff ffa5 	bl	80032cc <Displ_WriteCommand>
	HAL_Delay(5);
 8003382:	2005      	movs	r0, #5
 8003384:	f002 f834 	bl	80053f0 <HAL_Delay>

}
 8003388:	bf00      	nop
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40020400 	.word	0x40020400
 8003390:	0800b46c 	.word	0x0800b46c
 8003394:	0800b470 	.word	0x0800b470

08003398 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4604      	mov	r4, r0
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4623      	mov	r3, r4
 80033a8:	80fb      	strh	r3, [r7, #6]
 80033aa:	4603      	mov	r3, r0
 80033ac:	80bb      	strh	r3, [r7, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	807b      	strh	r3, [r7, #2]
 80033b2:	4613      	mov	r3, r2
 80033b4:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 80033b6:	887b      	ldrh	r3, [r7, #2]
 80033b8:	061a      	lsls	r2, r3, #24
 80033ba:	887b      	ldrh	r3, [r7, #2]
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033c2:	431a      	orrs	r2, r3
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	4313      	orrs	r3, r2
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	0a12      	lsrs	r2, r2, #8
 80033d0:	b292      	uxth	r2, r2
 80033d2:	431a      	orrs	r2, r3
 80033d4:	4b14      	ldr	r3, [pc, #80]	; (8003428 <Displ_SetAddressWindow+0x90>)
 80033d6:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 80033d8:	202a      	movs	r0, #42	; 0x2a
 80033da:	f7ff ff77 	bl	80032cc <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2104      	movs	r1, #4
 80033e2:	4811      	ldr	r0, [pc, #68]	; (8003428 <Displ_SetAddressWindow+0x90>)
 80033e4:	f7ff ff81 	bl	80032ea <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 80033e8:	883b      	ldrh	r3, [r7, #0]
 80033ea:	061a      	lsls	r2, r3, #24
 80033ec:	883b      	ldrh	r3, [r7, #0]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033f4:	431a      	orrs	r2, r3
 80033f6:	88bb      	ldrh	r3, [r7, #4]
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4313      	orrs	r3, r2
 80033fe:	88ba      	ldrh	r2, [r7, #4]
 8003400:	0a12      	lsrs	r2, r2, #8
 8003402:	b292      	uxth	r2, r2
 8003404:	431a      	orrs	r2, r3
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <Displ_SetAddressWindow+0x90>)
 8003408:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 800340a:	202b      	movs	r0, #43	; 0x2b
 800340c:	f7ff ff5e 	bl	80032cc <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8003410:	2200      	movs	r2, #0
 8003412:	2104      	movs	r1, #4
 8003414:	4804      	ldr	r0, [pc, #16]	; (8003428 <Displ_SetAddressWindow+0x90>)
 8003416:	f7ff ff68 	bl	80032ea <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 800341a:	202c      	movs	r0, #44	; 0x2c
 800341c:	f7ff ff56 	bl	80032cc <Displ_WriteCommand>
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bd90      	pop	{r4, r7, pc}
 8003428:	20006bdc 	.word	0x20006bdc

0800342c <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8003436:	2201      	movs	r2, #1
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	4809      	ldr	r0, [pc, #36]	; (8003460 <Displ_Init+0x34>)
 800343c:	f003 fac0 	bl	80069c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8003440:	2201      	movs	r2, #1
 8003442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003446:	4807      	ldr	r0, [pc, #28]	; (8003464 <Displ_Init+0x38>)
 8003448:	f003 faba 	bl	80069c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 800344c:	f7ff ff64 	bl	8003318 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f808 	bl	8003468 <Displ_Orientation>
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40020800 	.word	0x40020800
 8003464:	40020000 	.word	0x40020000

08003468 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d83b      	bhi.n	80034f0 <Displ_Orientation+0x88>
 8003478:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <Displ_Orientation+0x18>)
 800347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347e:	bf00      	nop
 8003480:	08003491 	.word	0x08003491
 8003484:	080034a9 	.word	0x080034a9
 8003488:	080034c1 	.word	0x080034c1
 800348c:	080034d9 	.word	0x080034d9
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8003490:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <Displ_Orientation+0xa8>)
 8003492:	2288      	movs	r2, #136	; 0x88
 8003494:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8003496:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <Displ_Orientation+0xac>)
 8003498:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800349c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <Displ_Orientation+0xb0>)
 80034a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80034a4:	801a      	strh	r2, [r3, #0]
			break;
 80034a6:	e023      	b.n	80034f0 <Displ_Orientation+0x88>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 80034a8:	4b19      	ldr	r3, [pc, #100]	; (8003510 <Displ_Orientation+0xa8>)
 80034aa:	22e8      	movs	r2, #232	; 0xe8
 80034ac:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80034ae:	4b19      	ldr	r3, [pc, #100]	; (8003514 <Displ_Orientation+0xac>)
 80034b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80034b4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80034b6:	4b18      	ldr	r3, [pc, #96]	; (8003518 <Displ_Orientation+0xb0>)
 80034b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80034bc:	801a      	strh	r2, [r3, #0]
			break;
 80034be:	e017      	b.n	80034f0 <Displ_Orientation+0x88>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 80034c0:	4b13      	ldr	r3, [pc, #76]	; (8003510 <Displ_Orientation+0xa8>)
 80034c2:	2248      	movs	r2, #72	; 0x48
 80034c4:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <Displ_Orientation+0xac>)
 80034c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80034cc:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <Displ_Orientation+0xb0>)
 80034d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80034d4:	801a      	strh	r2, [r3, #0]
			break;
 80034d6:	e00b      	b.n	80034f0 <Displ_Orientation+0x88>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 80034d8:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <Displ_Orientation+0xa8>)
 80034da:	2228      	movs	r2, #40	; 0x28
 80034dc:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80034de:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <Displ_Orientation+0xac>)
 80034e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80034e4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <Displ_Orientation+0xb0>)
 80034e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80034ec:	801a      	strh	r2, [r3, #0]
			break;
 80034ee:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 80034f0:	2036      	movs	r0, #54	; 0x36
 80034f2:	f7ff feeb 	bl	80032cc <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 80034f6:	2200      	movs	r2, #0
 80034f8:	2101      	movs	r1, #1
 80034fa:	4805      	ldr	r0, [pc, #20]	; (8003510 <Displ_Orientation+0xa8>)
 80034fc:	f7ff fef5 	bl	80032ea <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8003500:	4a06      	ldr	r2, [pc, #24]	; (800351c <Displ_Orientation+0xb4>)
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	7013      	strb	r3, [r2, #0]
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20006be0 	.word	0x20006be0
 8003514:	200063d8 	.word	0x200063d8
 8003518:	200063d6 	.word	0x200063d6
 800351c:	200063d4 	.word	0x200063d4

08003520 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a05      	ldr	r2, [pc, #20]	; (8003544 <HAL_SPI_ErrorCallback+0x24>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d102      	bne.n	8003538 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_SPI_ErrorCallback+0x28>)
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
	}
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	40003800 	.word	0x40003800
 8003548:	2000003c 	.word	0x2000003c

0800354c <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a05      	ldr	r2, [pc, #20]	; (8003570 <HAL_SPI_TxCpltCallback+0x24>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d102      	bne.n	8003564 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 800355e:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_SPI_TxCpltCallback+0x28>)
 8003560:	2201      	movs	r2, #1
 8003562:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	40003800 	.word	0x40003800
 8003574:	2000003c 	.word	0x2000003c

08003578 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b08b      	sub	sp, #44	; 0x2c
 800357c:	af00      	add	r7, sp, #0
 800357e:	4604      	mov	r4, r0
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	461a      	mov	r2, r3
 8003586:	4623      	mov	r3, r4
 8003588:	80fb      	strh	r3, [r7, #6]
 800358a:	4603      	mov	r3, r0
 800358c:	80bb      	strh	r3, [r7, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	807b      	strh	r3, [r7, #2]
 8003592:	4613      	mov	r3, r2
 8003594:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	4a59      	ldr	r2, [pc, #356]	; (8003700 <Displ_FillArea+0x188>)
 800359a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800359e:	4293      	cmp	r3, r2
 80035a0:	f280 80aa 	bge.w	80036f8 <Displ_FillArea+0x180>
 80035a4:	88bb      	ldrh	r3, [r7, #4]
 80035a6:	4a57      	ldr	r2, [pc, #348]	; (8003704 <Displ_FillArea+0x18c>)
 80035a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80035ac:	4293      	cmp	r3, r2
 80035ae:	f280 80a3 	bge.w	80036f8 <Displ_FillArea+0x180>
 80035b2:	887b      	ldrh	r3, [r7, #2]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 809f 	beq.w	80036f8 <Displ_FillArea+0x180>
 80035ba:	883b      	ldrh	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 809b 	beq.w	80036f8 <Displ_FillArea+0x180>

	x1=x + w - 1;
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	887b      	ldrh	r3, [r7, #2]
 80035c6:	4413      	add	r3, r2
 80035c8:	3b01      	subs	r3, #1
 80035ca:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 80035cc:	4b4c      	ldr	r3, [pc, #304]	; (8003700 <Displ_FillArea+0x188>)
 80035ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d2:	461a      	mov	r2, r3
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d903      	bls.n	80035e2 <Displ_FillArea+0x6a>
		x1=_width;
 80035da:	4b49      	ldr	r3, [pc, #292]	; (8003700 <Displ_FillArea+0x188>)
 80035dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e0:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 80035e2:	88ba      	ldrh	r2, [r7, #4]
 80035e4:	883b      	ldrh	r3, [r7, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	3b01      	subs	r3, #1
 80035ea:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 80035ec:	4b45      	ldr	r3, [pc, #276]	; (8003704 <Displ_FillArea+0x18c>)
 80035ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f2:	461a      	mov	r2, r3
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d903      	bls.n	8003602 <Displ_FillArea+0x8a>
		y1=_height;
 80035fa:	4b42      	ldr	r3, [pc, #264]	; (8003704 <Displ_FillArea+0x18c>)
 80035fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003600:	61fb      	str	r3, [r7, #28]

#endif
#ifdef Z_RGB666 // setting up dispBuffer in RGB666 format
	uint32_t datasize;

	uint8_t Rbyte=(color & 0xF800)>>8;
 8003602:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003604:	121b      	asrs	r3, r3, #8
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f023 0307 	bic.w	r3, r3, #7
 800360c:	75fb      	strb	r3, [r7, #23]
	uint8_t Gbyte=(color & 0x07E0)>>3;
 800360e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003610:	10db      	asrs	r3, r3, #3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f023 0303 	bic.w	r3, r3, #3
 8003618:	75bb      	strb	r3, [r7, #22]
	uint8_t Bbyte=(color & 0x001F)<<3;
 800361a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	757b      	strb	r3, [r7, #21]

	area=(((y1-y+1)*(x1-x+1))*3); 		// area to fill in bytes (3 bytes per pixel)
 8003620:	88bb      	ldrh	r3, [r7, #4]
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	3301      	adds	r3, #1
 8003628:	88fa      	ldrh	r2, [r7, #6]
 800362a:	6a39      	ldr	r1, [r7, #32]
 800362c:	1a8a      	subs	r2, r1, r2
 800362e:	3201      	adds	r2, #1
 8003630:	fb03 f202 	mul.w	r2, r3, r2
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
	uint8_t *buf8Pos=dispBuffer; 		//using a local pointer: changing values next
 800363c:	4b32      	ldr	r3, [pc, #200]	; (8003708 <Displ_FillArea+0x190>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	61bb      	str	r3, [r7, #24]

	datasize = (area<(SIZEBUF-3) ? area : (SIZEBUF-3));  //as buf8Pos receives 3 bytes each cycle we must be sure that SIZEBUF will be not overridden in the next loop
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8003648:	4293      	cmp	r3, r2
 800364a:	bf28      	it	cs
 800364c:	4613      	movcs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

	k=0;
 8003650:	2300      	movs	r3, #0
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
	while ((buf8Pos-dispBuffer)<=datasize){
 8003654:	e00e      	b.n	8003674 <Displ_FillArea+0xfc>
		*(buf8Pos++)=Rbyte;
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	61ba      	str	r2, [r7, #24]
 800365c:	7dfa      	ldrb	r2, [r7, #23]
 800365e:	701a      	strb	r2, [r3, #0]
		*(buf8Pos++)=Gbyte;
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	61ba      	str	r2, [r7, #24]
 8003666:	7dba      	ldrb	r2, [r7, #22]
 8003668:	701a      	strb	r2, [r3, #0]
		*(buf8Pos++)=Bbyte;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	61ba      	str	r2, [r7, #24]
 8003670:	7d7a      	ldrb	r2, [r7, #21]
 8003672:	701a      	strb	r2, [r3, #0]
	while ((buf8Pos-dispBuffer)<=datasize){
 8003674:	4b24      	ldr	r3, [pc, #144]	; (8003708 <Displ_FillArea+0x190>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	461a      	mov	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4293      	cmp	r3, r2
 8003682:	d2e8      	bcs.n	8003656 <Displ_FillArea+0xde>
	}
	datasize=(buf8Pos-dispBuffer);
 8003684:	4b20      	ldr	r3, [pc, #128]	; (8003708 <Displ_FillArea+0x190>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	60fb      	str	r3, [r7, #12]
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	b29a      	uxth	r2, r3
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	b29b      	uxth	r3, r3
 8003696:	88b9      	ldrh	r1, [r7, #4]
 8003698:	88f8      	ldrh	r0, [r7, #6]
 800369a:	f7ff fe7d 	bl	8003398 <Displ_SetAddressWindow>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
#endif
#ifdef Z_RGB666 // transferring RGB666 format dispBuffer
	times=(area/datasize);  					//how many times buffer must be sent via SPI.
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	60bb      	str	r3, [r7, #8]
	for  (k=0;k<times;k++) {
 80036a8:	2300      	movs	r3, #0
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
 80036ac:	e009      	b.n	80036c2 <Displ_FillArea+0x14a>
		Displ_WriteData(dispBuffer,datasize,0);
 80036ae:	4b16      	ldr	r3, [pc, #88]	; (8003708 <Displ_FillArea+0x190>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	68f9      	ldr	r1, [r7, #12]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fe17 	bl	80032ea <Displ_WriteData>
	for  (k=0;k<times;k++) {
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	3301      	adds	r3, #1
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
 80036c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3f1      	bcc.n	80036ae <Displ_FillArea+0x136>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
 80036ca:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <Displ_FillArea+0x190>)
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2200      	movs	r2, #0
 80036dc:	4619      	mov	r1, r3
 80036de:	f7ff fe04 	bl	80032ea <Displ_WriteData>
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <Displ_FillArea+0x190>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a09      	ldr	r2, [pc, #36]	; (800370c <Displ_FillArea+0x194>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d101      	bne.n	80036f0 <Displ_FillArea+0x178>
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <Displ_FillArea+0x198>)
 80036ee:	e000      	b.n	80036f2 <Displ_FillArea+0x17a>
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <Displ_FillArea+0x194>)
 80036f2:	4a05      	ldr	r2, [pc, #20]	; (8003708 <Displ_FillArea+0x190>)
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e000      	b.n	80036fa <Displ_FillArea+0x182>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80036f8:	bf00      	nop

}
 80036fa:	372c      	adds	r7, #44	; 0x2c
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd90      	pop	{r4, r7, pc}
 8003700:	200063d6 	.word	0x200063d6
 8003704:	200063d8 	.word	0x200063d8
 8003708:	20000040 	.word	0x20000040
 800370c:	200063dc 	.word	0x200063dc
 8003710:	200067dc 	.word	0x200067dc

08003714 <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af02      	add	r7, sp, #8
 800371a:	4603      	mov	r3, r0
 800371c:	80fb      	strh	r3, [r7, #6]
 800371e:	460b      	mov	r3, r1
 8003720:	80bb      	strh	r3, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	4a0b      	ldr	r2, [pc, #44]	; (8003758 <Displ_Pixel+0x44>)
 800372a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800372e:	4293      	cmp	r3, r2
 8003730:	da0e      	bge.n	8003750 <Displ_Pixel+0x3c>
 8003732:	88bb      	ldrh	r3, [r7, #4]
 8003734:	4a09      	ldr	r2, [pc, #36]	; (800375c <Displ_Pixel+0x48>)
 8003736:	f9b2 2000 	ldrsh.w	r2, [r2]
 800373a:	4293      	cmp	r3, r2
 800373c:	da08      	bge.n	8003750 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 800373e:	88b9      	ldrh	r1, [r7, #4]
 8003740:	88f8      	ldrh	r0, [r7, #6]
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	2301      	movs	r3, #1
 8003748:	2201      	movs	r2, #1
 800374a:	f7ff ff15 	bl	8003578 <Displ_FillArea>
 800374e:	e000      	b.n	8003752 <Displ_Pixel+0x3e>
        return;
 8003750:	bf00      	nop

}
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	200063d6 	.word	0x200063d6
 800375c:	200063d8 	.word	0x200063d8

08003760 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	4604      	mov	r4, r0
 8003768:	4608      	mov	r0, r1
 800376a:	4611      	mov	r1, r2
 800376c:	461a      	mov	r2, r3
 800376e:	4623      	mov	r3, r4
 8003770:	80fb      	strh	r3, [r7, #6]
 8003772:	4603      	mov	r3, r0
 8003774:	80bb      	strh	r3, [r7, #4]
 8003776:	460b      	mov	r3, r1
 8003778:	807b      	strh	r3, [r7, #2]
 800377a:	4613      	mov	r3, r2
 800377c:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800377e:	887b      	ldrh	r3, [r7, #2]
 8003780:	f1c3 0301 	rsb	r3, r3, #1
 8003784:	b29b      	uxth	r3, r3
 8003786:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003788:	2301      	movs	r3, #1
 800378a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800378c:	887b      	ldrh	r3, [r7, #2]
 800378e:	461a      	mov	r2, r3
 8003790:	03d2      	lsls	r2, r2, #15
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	b29b      	uxth	r3, r3
 8003798:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800379e:	887b      	ldrh	r3, [r7, #2]
 80037a0:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 80037a2:	88f8      	ldrh	r0, [r7, #6]
 80037a4:	88ba      	ldrh	r2, [r7, #4]
 80037a6:	887b      	ldrh	r3, [r7, #2]
 80037a8:	4413      	add	r3, r2
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	883a      	ldrh	r2, [r7, #0]
 80037ae:	4619      	mov	r1, r3
 80037b0:	f7ff ffb0 	bl	8003714 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 80037b4:	88f8      	ldrh	r0, [r7, #6]
 80037b6:	88ba      	ldrh	r2, [r7, #4]
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	b29b      	uxth	r3, r3
 80037be:	883a      	ldrh	r2, [r7, #0]
 80037c0:	4619      	mov	r1, r3
 80037c2:	f7ff ffa7 	bl	8003714 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 80037c6:	88fa      	ldrh	r2, [r7, #6]
 80037c8:	887b      	ldrh	r3, [r7, #2]
 80037ca:	4413      	add	r3, r2
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	88b9      	ldrh	r1, [r7, #4]
 80037d0:	883a      	ldrh	r2, [r7, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff ff9e 	bl	8003714 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 80037d8:	88fa      	ldrh	r2, [r7, #6]
 80037da:	887b      	ldrh	r3, [r7, #2]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	b29b      	uxth	r3, r3
 80037e0:	88b9      	ldrh	r1, [r7, #4]
 80037e2:	883a      	ldrh	r2, [r7, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ff95 	bl	8003714 <Displ_Pixel>

    while (x<y) {
 80037ea:	e081      	b.n	80038f0 <Displ_drawCircle+0x190>
        if (f >= 0) {
 80037ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	db0e      	blt.n	8003812 <Displ_drawCircle+0xb2>
            y--;
 80037f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003800:	8a7b      	ldrh	r3, [r7, #18]
 8003802:	3302      	adds	r3, #2
 8003804:	b29b      	uxth	r3, r3
 8003806:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8003808:	8afa      	ldrh	r2, [r7, #22]
 800380a:	8a7b      	ldrh	r3, [r7, #18]
 800380c:	4413      	add	r3, r2
 800380e:	b29b      	uxth	r3, r3
 8003810:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8003812:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003816:	b29b      	uxth	r3, r3
 8003818:	3301      	adds	r3, #1
 800381a:	b29b      	uxth	r3, r3
 800381c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800381e:	8abb      	ldrh	r3, [r7, #20]
 8003820:	3302      	adds	r3, #2
 8003822:	b29b      	uxth	r3, r3
 8003824:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8003826:	8afa      	ldrh	r2, [r7, #22]
 8003828:	8abb      	ldrh	r3, [r7, #20]
 800382a:	4413      	add	r3, r2
 800382c:	b29b      	uxth	r3, r3
 800382e:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8003830:	88fa      	ldrh	r2, [r7, #6]
 8003832:	8a3b      	ldrh	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	b298      	uxth	r0, r3
 8003838:	88ba      	ldrh	r2, [r7, #4]
 800383a:	89fb      	ldrh	r3, [r7, #14]
 800383c:	4413      	add	r3, r2
 800383e:	b29b      	uxth	r3, r3
 8003840:	883a      	ldrh	r2, [r7, #0]
 8003842:	4619      	mov	r1, r3
 8003844:	f7ff ff66 	bl	8003714 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8003848:	88fa      	ldrh	r2, [r7, #6]
 800384a:	8a3b      	ldrh	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	b298      	uxth	r0, r3
 8003850:	88ba      	ldrh	r2, [r7, #4]
 8003852:	89fb      	ldrh	r3, [r7, #14]
 8003854:	4413      	add	r3, r2
 8003856:	b29b      	uxth	r3, r3
 8003858:	883a      	ldrh	r2, [r7, #0]
 800385a:	4619      	mov	r1, r3
 800385c:	f7ff ff5a 	bl	8003714 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	8a3b      	ldrh	r3, [r7, #16]
 8003864:	4413      	add	r3, r2
 8003866:	b298      	uxth	r0, r3
 8003868:	88ba      	ldrh	r2, [r7, #4]
 800386a:	89fb      	ldrh	r3, [r7, #14]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	b29b      	uxth	r3, r3
 8003870:	883a      	ldrh	r2, [r7, #0]
 8003872:	4619      	mov	r1, r3
 8003874:	f7ff ff4e 	bl	8003714 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	8a3b      	ldrh	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	b298      	uxth	r0, r3
 8003880:	88ba      	ldrh	r2, [r7, #4]
 8003882:	89fb      	ldrh	r3, [r7, #14]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	b29b      	uxth	r3, r3
 8003888:	883a      	ldrh	r2, [r7, #0]
 800388a:	4619      	mov	r1, r3
 800388c:	f7ff ff42 	bl	8003714 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	89fb      	ldrh	r3, [r7, #14]
 8003894:	4413      	add	r3, r2
 8003896:	b298      	uxth	r0, r3
 8003898:	88ba      	ldrh	r2, [r7, #4]
 800389a:	8a3b      	ldrh	r3, [r7, #16]
 800389c:	4413      	add	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	883a      	ldrh	r2, [r7, #0]
 80038a2:	4619      	mov	r1, r3
 80038a4:	f7ff ff36 	bl	8003714 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 80038a8:	88fa      	ldrh	r2, [r7, #6]
 80038aa:	89fb      	ldrh	r3, [r7, #14]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	b298      	uxth	r0, r3
 80038b0:	88ba      	ldrh	r2, [r7, #4]
 80038b2:	8a3b      	ldrh	r3, [r7, #16]
 80038b4:	4413      	add	r3, r2
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	883a      	ldrh	r2, [r7, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	f7ff ff2a 	bl	8003714 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 80038c0:	88fa      	ldrh	r2, [r7, #6]
 80038c2:	89fb      	ldrh	r3, [r7, #14]
 80038c4:	4413      	add	r3, r2
 80038c6:	b298      	uxth	r0, r3
 80038c8:	88ba      	ldrh	r2, [r7, #4]
 80038ca:	8a3b      	ldrh	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	883a      	ldrh	r2, [r7, #0]
 80038d2:	4619      	mov	r1, r3
 80038d4:	f7ff ff1e 	bl	8003714 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 80038d8:	88fa      	ldrh	r2, [r7, #6]
 80038da:	89fb      	ldrh	r3, [r7, #14]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	b298      	uxth	r0, r3
 80038e0:	88ba      	ldrh	r2, [r7, #4]
 80038e2:	8a3b      	ldrh	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	883a      	ldrh	r2, [r7, #0]
 80038ea:	4619      	mov	r1, r3
 80038ec:	f7ff ff12 	bl	8003714 <Displ_Pixel>
    while (x<y) {
 80038f0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80038f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	f6ff af77 	blt.w	80037ec <Displ_drawCircle+0x8c>
    }
}
 80038fe:	bf00      	nop
 8003900:	bf00      	nop
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	bd90      	pop	{r4, r7, pc}

08003908 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af02      	add	r7, sp, #8
 800390e:	4603      	mov	r3, r0
 8003910:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <Displ_CLS+0x30>)
 8003914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003918:	b29a      	uxth	r2, r3
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <Displ_CLS+0x34>)
 800391c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003920:	b299      	uxth	r1, r3
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	460b      	mov	r3, r1
 8003928:	2100      	movs	r1, #0
 800392a:	2000      	movs	r0, #0
 800392c:	f7ff fe24 	bl	8003578 <Displ_FillArea>
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200063d6 	.word	0x200063d6
 800393c:	200063d8 	.word	0x200063d8

08003940 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	4604      	mov	r4, r0
 8003948:	4608      	mov	r0, r1
 800394a:	4611      	mov	r1, r2
 800394c:	461a      	mov	r2, r3
 800394e:	4623      	mov	r3, r4
 8003950:	80fb      	strh	r3, [r7, #6]
 8003952:	4603      	mov	r3, r0
 8003954:	80bb      	strh	r3, [r7, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	807b      	strh	r3, [r7, #2]
 800395a:	4613      	mov	r3, r2
 800395c:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	f1c3 0301 	rsb	r3, r3, #1
 8003964:	b29b      	uxth	r3, r3
 8003966:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003968:	2301      	movs	r3, #1
 800396a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800396c:	887b      	ldrh	r3, [r7, #2]
 800396e:	461a      	mov	r2, r3
 8003970:	03d2      	lsls	r2, r2, #15
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	b29b      	uxth	r3, r3
 8003978:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800397e:	887b      	ldrh	r3, [r7, #2]
 8003980:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8003982:	e095      	b.n	8003ab0 <drawCircleHelper+0x170>
        if (f >= 0) {
 8003984:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003988:	2b00      	cmp	r3, #0
 800398a:	db0e      	blt.n	80039aa <drawCircleHelper+0x6a>
            y--;
 800398c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29b      	uxth	r3, r3
 8003996:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003998:	8a7b      	ldrh	r3, [r7, #18]
 800399a:	3302      	adds	r3, #2
 800399c:	b29b      	uxth	r3, r3
 800399e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 80039a0:	8afa      	ldrh	r2, [r7, #22]
 80039a2:	8a7b      	ldrh	r3, [r7, #18]
 80039a4:	4413      	add	r3, r2
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80039aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80039b6:	8abb      	ldrh	r3, [r7, #20]
 80039b8:	3302      	adds	r3, #2
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 80039be:	8afa      	ldrh	r2, [r7, #22]
 80039c0:	8abb      	ldrh	r3, [r7, #20]
 80039c2:	4413      	add	r3, r2
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 80039c8:	787b      	ldrb	r3, [r7, #1]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d017      	beq.n	8003a02 <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	8a3b      	ldrh	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	b298      	uxth	r0, r3
 80039da:	88ba      	ldrh	r2, [r7, #4]
 80039dc:	89fb      	ldrh	r3, [r7, #14]
 80039de:	4413      	add	r3, r2
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80039e4:	4619      	mov	r1, r3
 80039e6:	f7ff fe95 	bl	8003714 <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 80039ea:	88fa      	ldrh	r2, [r7, #6]
 80039ec:	89fb      	ldrh	r3, [r7, #14]
 80039ee:	4413      	add	r3, r2
 80039f0:	b298      	uxth	r0, r3
 80039f2:	88ba      	ldrh	r2, [r7, #4]
 80039f4:	8a3b      	ldrh	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80039fc:	4619      	mov	r1, r3
 80039fe:	f7ff fe89 	bl	8003714 <Displ_Pixel>
        }
        if (cornername & 0x2) {
 8003a02:	787b      	ldrb	r3, [r7, #1]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d017      	beq.n	8003a3c <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	8a3b      	ldrh	r3, [r7, #16]
 8003a10:	4413      	add	r3, r2
 8003a12:	b298      	uxth	r0, r3
 8003a14:	88ba      	ldrh	r2, [r7, #4]
 8003a16:	89fb      	ldrh	r3, [r7, #14]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f7ff fe78 	bl	8003714 <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 8003a24:	88fa      	ldrh	r2, [r7, #6]
 8003a26:	89fb      	ldrh	r3, [r7, #14]
 8003a28:	4413      	add	r3, r2
 8003a2a:	b298      	uxth	r0, r3
 8003a2c:	88ba      	ldrh	r2, [r7, #4]
 8003a2e:	8a3b      	ldrh	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003a36:	4619      	mov	r1, r3
 8003a38:	f7ff fe6c 	bl	8003714 <Displ_Pixel>
        }
        if (cornername & 0x8) {
 8003a3c:	787b      	ldrb	r3, [r7, #1]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d017      	beq.n	8003a76 <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	89fb      	ldrh	r3, [r7, #14]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	b298      	uxth	r0, r3
 8003a4e:	88ba      	ldrh	r2, [r7, #4]
 8003a50:	8a3b      	ldrh	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f7ff fe5b 	bl	8003714 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	8a3b      	ldrh	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	b298      	uxth	r0, r3
 8003a66:	88ba      	ldrh	r2, [r7, #4]
 8003a68:	89fb      	ldrh	r3, [r7, #14]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003a70:	4619      	mov	r1, r3
 8003a72:	f7ff fe4f 	bl	8003714 <Displ_Pixel>
        }
        if (cornername & 0x1) {
 8003a76:	787b      	ldrb	r3, [r7, #1]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d017      	beq.n	8003ab0 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8003a80:	88fa      	ldrh	r2, [r7, #6]
 8003a82:	89fb      	ldrh	r3, [r7, #14]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	b298      	uxth	r0, r3
 8003a88:	88ba      	ldrh	r2, [r7, #4]
 8003a8a:	8a3b      	ldrh	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003a92:	4619      	mov	r1, r3
 8003a94:	f7ff fe3e 	bl	8003714 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 8003a98:	88fa      	ldrh	r2, [r7, #6]
 8003a9a:	8a3b      	ldrh	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	b298      	uxth	r0, r3
 8003aa0:	88ba      	ldrh	r2, [r7, #4]
 8003aa2:	89fb      	ldrh	r3, [r7, #14]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f7ff fe32 	bl	8003714 <Displ_Pixel>
    while (x<y) {
 8003ab0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003ab4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	f6ff af63 	blt.w	8003984 <drawCircleHelper+0x44>
        }
    }
}
 8003abe:	bf00      	nop
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd90      	pop	{r4, r7, pc}

08003ac8 <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8003ac8:	b590      	push	{r4, r7, lr}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	4604      	mov	r4, r0
 8003ad0:	4608      	mov	r0, r1
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	80fb      	strh	r3, [r7, #6]
 8003ada:	4603      	mov	r3, r0
 8003adc:	80bb      	strh	r3, [r7, #4]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	807b      	strh	r3, [r7, #2]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8003ae6:	887b      	ldrh	r3, [r7, #2]
 8003ae8:	f1c3 0301 	rsb	r3, r3, #1
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8003af0:	2301      	movs	r3, #1
 8003af2:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8003af4:	887b      	ldrh	r3, [r7, #2]
 8003af6:	461a      	mov	r2, r3
 8003af8:	03d2      	lsls	r2, r2, #15
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8003b06:	887b      	ldrh	r3, [r7, #2]
 8003b08:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8003b0a:	e0a7      	b.n	8003c5c <fillCircleHelper+0x194>
    if (f >= 0) {
 8003b0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	db0e      	blt.n	8003b32 <fillCircleHelper+0x6a>
      y--;
 8003b14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8003b20:	8a7b      	ldrh	r3, [r7, #18]
 8003b22:	3302      	adds	r3, #2
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8003b28:	8afa      	ldrh	r2, [r7, #22]
 8003b2a:	8a7b      	ldrh	r3, [r7, #18]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8003b32:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3301      	adds	r3, #1
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8003b3e:	8abb      	ldrh	r3, [r7, #20]
 8003b40:	3302      	adds	r3, #2
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8003b46:	8afa      	ldrh	r2, [r7, #22]
 8003b48:	8abb      	ldrh	r3, [r7, #20]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8003b50:	787b      	ldrb	r3, [r7, #1]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d03d      	beq.n	8003bd6 <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	8a3b      	ldrh	r3, [r7, #16]
 8003b5e:	4413      	add	r3, r2
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	b218      	sxth	r0, r3
 8003b64:	88ba      	ldrh	r2, [r7, #4]
 8003b66:	89fb      	ldrh	r3, [r7, #14]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	b219      	sxth	r1, r3
 8003b6e:	88fa      	ldrh	r2, [r7, #6]
 8003b70:	8a3b      	ldrh	r3, [r7, #16]
 8003b72:	4413      	add	r3, r2
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	b21c      	sxth	r4, r3
 8003b78:	88ba      	ldrh	r2, [r7, #4]
 8003b7a:	89fb      	ldrh	r3, [r7, #14]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b82:	4413      	add	r3, r2
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3301      	adds	r3, #1
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	b21a      	sxth	r2, r3
 8003b8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	4613      	mov	r3, r2
 8003b92:	4622      	mov	r2, r4
 8003b94:	f000 f8a1 	bl	8003cda <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 8003b98:	88fa      	ldrh	r2, [r7, #6]
 8003b9a:	89fb      	ldrh	r3, [r7, #14]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	b218      	sxth	r0, r3
 8003ba2:	88ba      	ldrh	r2, [r7, #4]
 8003ba4:	8a3b      	ldrh	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	b219      	sxth	r1, r3
 8003bac:	88fa      	ldrh	r2, [r7, #6]
 8003bae:	89fb      	ldrh	r3, [r7, #14]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	b21c      	sxth	r4, r3
 8003bb6:	88ba      	ldrh	r2, [r7, #4]
 8003bb8:	8a3b      	ldrh	r3, [r7, #16]
 8003bba:	4413      	add	r3, r2
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003bc0:	4413      	add	r3, r2
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	b21a      	sxth	r2, r3
 8003bca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	f000 f882 	bl	8003cda <Displ_Line>
    }
    if (cornername & 0x2) {
 8003bd6:	787b      	ldrb	r3, [r7, #1]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d03d      	beq.n	8003c5c <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 8003be0:	88fa      	ldrh	r2, [r7, #6]
 8003be2:	8a3b      	ldrh	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	b218      	sxth	r0, r3
 8003bea:	88ba      	ldrh	r2, [r7, #4]
 8003bec:	89fb      	ldrh	r3, [r7, #14]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	b219      	sxth	r1, r3
 8003bf4:	88fa      	ldrh	r2, [r7, #6]
 8003bf6:	8a3b      	ldrh	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	b21c      	sxth	r4, r3
 8003bfe:	88ba      	ldrh	r2, [r7, #4]
 8003c00:	89fb      	ldrh	r3, [r7, #14]
 8003c02:	4413      	add	r3, r2
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c08:	4413      	add	r3, r2
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	b21a      	sxth	r2, r3
 8003c12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	4613      	mov	r3, r2
 8003c18:	4622      	mov	r2, r4
 8003c1a:	f000 f85e 	bl	8003cda <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	89fb      	ldrh	r3, [r7, #14]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	b218      	sxth	r0, r3
 8003c28:	88ba      	ldrh	r2, [r7, #4]
 8003c2a:	8a3b      	ldrh	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	b219      	sxth	r1, r3
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	89fb      	ldrh	r3, [r7, #14]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	b21c      	sxth	r4, r3
 8003c3c:	88ba      	ldrh	r2, [r7, #4]
 8003c3e:	8a3b      	ldrh	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c46:	4413      	add	r3, r2
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	b21a      	sxth	r2, r3
 8003c50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	4613      	mov	r3, r2
 8003c56:	4622      	mov	r2, r4
 8003c58:	f000 f83f 	bl	8003cda <Displ_Line>
  while (x<y) {
 8003c5c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003c60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	f6ff af51 	blt.w	8003b0c <fillCircleHelper+0x44>
    }
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	bf00      	nop
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd90      	pop	{r4, r7, pc}

08003c74 <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	461a      	mov	r2, r3
 8003c82:	4623      	mov	r3, r4
 8003c84:	80fb      	strh	r3, [r7, #6]
 8003c86:	4603      	mov	r3, r0
 8003c88:	80bb      	strh	r3, [r7, #4]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	807b      	strh	r3, [r7, #2]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 8003c92:	88ba      	ldrh	r2, [r7, #4]
 8003c94:	887b      	ldrh	r3, [r7, #2]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	b219      	sxth	r1, r3
 8003c9c:	88ba      	ldrh	r2, [r7, #4]
 8003c9e:	887b      	ldrh	r3, [r7, #2]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	b21c      	sxth	r4, r3
 8003ca6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003caa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003cae:	883b      	ldrh	r3, [r7, #0]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	f000 f811 	bl	8003cda <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8003cb8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003cbc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003cc0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003cc4:	883b      	ldrh	r3, [r7, #0]
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2303      	movs	r3, #3
 8003cce:	f7ff fefb 	bl	8003ac8 <fillCircleHelper>
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd90      	pop	{r4, r7, pc}

08003cda <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003cda:	b590      	push	{r4, r7, lr}
 8003cdc:	b08b      	sub	sp, #44	; 0x2c
 8003cde:	af02      	add	r7, sp, #8
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	4608      	mov	r0, r1
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4623      	mov	r3, r4
 8003cea:	80fb      	strh	r3, [r7, #6]
 8003cec:	4603      	mov	r3, r0
 8003cee:	80bb      	strh	r3, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8003cf8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d123      	bne.n	8003d4c <Displ_Line+0x72>
    	if (y1>y0){
 8003d04:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003d08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	dd0e      	ble.n	8003d2e <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8003d10:	88f8      	ldrh	r0, [r7, #6]
 8003d12:	88b9      	ldrh	r1, [r7, #4]
 8003d14:	883a      	ldrh	r2, [r7, #0]
 8003d16:	88bb      	ldrh	r3, [r7, #4]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	2201      	movs	r2, #1
 8003d28:	f7ff fc26 	bl	8003578 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8003d2c:	e103      	b.n	8003f36 <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8003d2e:	88f8      	ldrh	r0, [r7, #6]
 8003d30:	8839      	ldrh	r1, [r7, #0]
 8003d32:	88ba      	ldrh	r2, [r7, #4]
 8003d34:	883b      	ldrh	r3, [r7, #0]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	2201      	movs	r2, #1
 8003d46:	f7ff fc17 	bl	8003578 <Displ_FillArea>
    	return;
 8003d4a:	e0f4      	b.n	8003f36 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8003d4c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003d50:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d121      	bne.n	8003d9c <Displ_Line+0xc2>
    	if (x1>x0)
 8003d58:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003d5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	dd0d      	ble.n	8003d80 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8003d64:	88f8      	ldrh	r0, [r7, #6]
 8003d66:	88b9      	ldrh	r1, [r7, #4]
 8003d68:	887a      	ldrh	r2, [r7, #2]
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3301      	adds	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f7ff fbfd 	bl	8003578 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8003d7e:	e0da      	b.n	8003f36 <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8003d80:	8878      	ldrh	r0, [r7, #2]
 8003d82:	8839      	ldrh	r1, [r7, #0]
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	2301      	movs	r3, #1
 8003d96:	f7ff fbef 	bl	8003578 <Displ_FillArea>
    	return;
 8003d9a:	e0cc      	b.n	8003f36 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8003d9c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003da0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	dd05      	ble.n	8003db4 <Displ_Line+0xda>
 8003da8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003dac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003db0:	1ad2      	subs	r2, r2, r3
 8003db2:	e004      	b.n	8003dbe <Displ_Line+0xe4>
 8003db4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003db8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003dbc:	1ad2      	subs	r2, r2, r3
 8003dbe:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dc6:	4299      	cmp	r1, r3
 8003dc8:	dd05      	ble.n	8003dd6 <Displ_Line+0xfc>
 8003dca:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dd2:	1acb      	subs	r3, r1, r3
 8003dd4:	e004      	b.n	8003de0 <Displ_Line+0x106>
 8003dd6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003dda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003dde:	1acb      	subs	r3, r1, r3
 8003de0:	429a      	cmp	r2, r3
 8003de2:	bfcc      	ite	gt
 8003de4:	2301      	movgt	r3, #1
 8003de6:	2300      	movle	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8003dec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00b      	beq.n	8003e0c <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	827b      	strh	r3, [r7, #18]
 8003df8:	88bb      	ldrh	r3, [r7, #4]
 8003dfa:	80fb      	strh	r3, [r7, #6]
 8003dfc:	8a7b      	ldrh	r3, [r7, #18]
 8003dfe:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8003e00:	887b      	ldrh	r3, [r7, #2]
 8003e02:	823b      	strh	r3, [r7, #16]
 8003e04:	883b      	ldrh	r3, [r7, #0]
 8003e06:	807b      	strh	r3, [r7, #2]
 8003e08:	8a3b      	ldrh	r3, [r7, #16]
 8003e0a:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8003e0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	dd0b      	ble.n	8003e30 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	81fb      	strh	r3, [r7, #14]
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	80fb      	strh	r3, [r7, #6]
 8003e20:	89fb      	ldrh	r3, [r7, #14]
 8003e22:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8003e24:	88bb      	ldrh	r3, [r7, #4]
 8003e26:	81bb      	strh	r3, [r7, #12]
 8003e28:	883b      	ldrh	r3, [r7, #0]
 8003e2a:	80bb      	strh	r3, [r7, #4]
 8003e2c:	89bb      	ldrh	r3, [r7, #12]
 8003e2e:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8003e30:	887a      	ldrh	r2, [r7, #2]
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8003e3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e3e:	105b      	asrs	r3, r3, #1
 8003e40:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8003e42:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003e46:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	da07      	bge.n	8003e5e <Displ_Line+0x184>
        dy = y1-y0;
 8003e4e:	883a      	ldrh	r2, [r7, #0]
 8003e50:	88bb      	ldrh	r3, [r7, #4]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	837b      	strh	r3, [r7, #26]
 8003e5c:	e007      	b.n	8003e6e <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8003e5e:	88ba      	ldrh	r2, [r7, #4]
 8003e60:	883b      	ldrh	r3, [r7, #0]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8003e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e6c:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	83bb      	strh	r3, [r7, #28]
 8003e76:	e03a      	b.n	8003eee <Displ_Line+0x214>
    	l++;
 8003e78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8003e84:	8b3a      	ldrh	r2, [r7, #24]
 8003e86:	8afb      	ldrh	r3, [r7, #22]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8003e8e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	da25      	bge.n	8003ee2 <Displ_Line+0x208>
        	if (steep) {
 8003e96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 8003e9e:	88b8      	ldrh	r0, [r7, #4]
 8003ea0:	88f9      	ldrh	r1, [r7, #6]
 8003ea2:	8bfa      	ldrh	r2, [r7, #30]
 8003ea4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f7ff fb64 	bl	8003578 <Displ_FillArea>
 8003eb0:	e007      	b.n	8003ec2 <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 8003eb2:	88f8      	ldrh	r0, [r7, #6]
 8003eb4:	88b9      	ldrh	r1, [r7, #4]
 8003eb6:	8bfa      	ldrh	r2, [r7, #30]
 8003eb8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f7ff fb5b 	bl	8003578 <Displ_FillArea>
            }
            y0 += ystep;
 8003ec2:	88ba      	ldrh	r2, [r7, #4]
 8003ec4:	8b7b      	ldrh	r3, [r7, #26]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	80bb      	strh	r3, [r7, #4]
            l=0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8003ed0:	8bbb      	ldrh	r3, [r7, #28]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8003ed8:	8b3a      	ldrh	r2, [r7, #24]
 8003eda:	897b      	ldrh	r3, [r7, #10]
 8003edc:	4413      	add	r3, r2
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8003ee2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3301      	adds	r3, #1
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	83bb      	strh	r3, [r7, #28]
 8003eee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003ef2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	ddbe      	ble.n	8003e78 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8003efa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d019      	beq.n	8003f36 <Displ_Line+0x25c>
    	if (steep) {
 8003f02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 8003f0a:	88b8      	ldrh	r0, [r7, #4]
 8003f0c:	88f9      	ldrh	r1, [r7, #6]
 8003f0e:	8bfb      	ldrh	r3, [r7, #30]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f7ff fb2c 	bl	8003578 <Displ_FillArea>
 8003f20:	e009      	b.n	8003f36 <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 8003f22:	88f8      	ldrh	r0, [r7, #6]
 8003f24:	88b9      	ldrh	r1, [r7, #4]
 8003f26:	8bfb      	ldrh	r3, [r7, #30]
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2301      	movs	r3, #1
 8003f32:	f7ff fb21 	bl	8003578 <Displ_FillArea>
    	}
    }
}
 8003f36:	3724      	adds	r7, #36	; 0x24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd90      	pop	{r4, r7, pc}

08003f3c <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 8003f3c:	b590      	push	{r4, r7, lr}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	4611      	mov	r1, r2
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4623      	mov	r3, r4
 8003f4c:	80fb      	strh	r3, [r7, #6]
 8003f4e:	4603      	mov	r3, r0
 8003f50:	80bb      	strh	r3, [r7, #4]
 8003f52:	460b      	mov	r3, r1
 8003f54:	807b      	strh	r3, [r7, #2]
 8003f56:	4613      	mov	r3, r2
 8003f58:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 8003f5a:	88f8      	ldrh	r0, [r7, #6]
 8003f5c:	88b9      	ldrh	r1, [r7, #4]
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	8b3c      	ldrh	r4, [r7, #24]
 8003f62:	8bbb      	ldrh	r3, [r7, #28]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	4623      	mov	r3, r4
 8003f68:	f7ff fb06 	bl	8003578 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 8003f6c:	88f8      	ldrh	r0, [r7, #6]
 8003f6e:	88ba      	ldrh	r2, [r7, #4]
 8003f70:	883b      	ldrh	r3, [r7, #0]
 8003f72:	4413      	add	r3, r2
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	8b3b      	ldrh	r3, [r7, #24]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	b299      	uxth	r1, r3
 8003f7c:	887a      	ldrh	r2, [r7, #2]
 8003f7e:	8b3c      	ldrh	r4, [r7, #24]
 8003f80:	8bbb      	ldrh	r3, [r7, #28]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	4623      	mov	r3, r4
 8003f86:	f7ff faf7 	bl	8003578 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 8003f8a:	88f8      	ldrh	r0, [r7, #6]
 8003f8c:	88b9      	ldrh	r1, [r7, #4]
 8003f8e:	8b3a      	ldrh	r2, [r7, #24]
 8003f90:	883c      	ldrh	r4, [r7, #0]
 8003f92:	8bbb      	ldrh	r3, [r7, #28]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	4623      	mov	r3, r4
 8003f98:	f7ff faee 	bl	8003578 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 8003f9c:	88fa      	ldrh	r2, [r7, #6]
 8003f9e:	887b      	ldrh	r3, [r7, #2]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	8b3b      	ldrh	r3, [r7, #24]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	b298      	uxth	r0, r3
 8003faa:	88b9      	ldrh	r1, [r7, #4]
 8003fac:	8b3a      	ldrh	r2, [r7, #24]
 8003fae:	883c      	ldrh	r4, [r7, #0]
 8003fb0:	8bbb      	ldrh	r3, [r7, #28]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4623      	mov	r3, r4
 8003fb6:	f7ff fadf 	bl	8003578 <Displ_FillArea>
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd90      	pop	{r4, r7, pc}

08003fc2 <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8003fc2:	b590      	push	{r4, r7, lr}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af02      	add	r7, sp, #8
 8003fc8:	4604      	mov	r4, r0
 8003fca:	4608      	mov	r0, r1
 8003fcc:	4611      	mov	r1, r2
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4623      	mov	r3, r4
 8003fd2:	80fb      	strh	r3, [r7, #6]
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	80bb      	strh	r3, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	807b      	strh	r3, [r7, #2]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 8003fe0:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003fe4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003fe8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003fec:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003ff0:	8c3b      	ldrh	r3, [r7, #32]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	4623      	mov	r3, r4
 8003ff6:	f7ff fe70 	bl	8003cda <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 8003ffa:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8003ffe:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004002:	f9b7 1000 	ldrsh.w	r1, [r7]
 8004006:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800400a:	8c3b      	ldrh	r3, [r7, #32]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	4623      	mov	r3, r4
 8004010:	f7ff fe63 	bl	8003cda <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 8004014:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004018:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800401c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8004020:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8004024:	8c3b      	ldrh	r3, [r7, #32]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	4623      	mov	r3, r4
 800402a:	f7ff fe56 	bl	8003cda <Displ_Line>
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bd90      	pop	{r4, r7, pc}

08004036 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8004036:	b590      	push	{r4, r7, lr}
 8004038:	b091      	sub	sp, #68	; 0x44
 800403a:	af02      	add	r7, sp, #8
 800403c:	4604      	mov	r4, r0
 800403e:	4608      	mov	r0, r1
 8004040:	4611      	mov	r1, r2
 8004042:	461a      	mov	r2, r3
 8004044:	4623      	mov	r3, r4
 8004046:	80fb      	strh	r3, [r7, #6]
 8004048:	4603      	mov	r3, r0
 800404a:	80bb      	strh	r3, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
 8004050:	4613      	mov	r3, r2
 8004052:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8004054:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004058:	f9b7 3000 	ldrsh.w	r3, [r7]
 800405c:	429a      	cmp	r2, r3
 800405e:	dd0b      	ble.n	8004078 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8004060:	88bb      	ldrh	r3, [r7, #4]
 8004062:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004064:	883b      	ldrh	r3, [r7, #0]
 8004066:	80bb      	strh	r3, [r7, #4]
 8004068:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800406a:	803b      	strh	r3, [r7, #0]
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004070:	887b      	ldrh	r3, [r7, #2]
 8004072:	80fb      	strh	r3, [r7, #6]
 8004074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004076:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8004078:	f9b7 2000 	ldrsh.w	r2, [r7]
 800407c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004080:	429a      	cmp	r2, r3
 8004082:	dd0f      	ble.n	80040a4 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8004084:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004088:	847b      	strh	r3, [r7, #34]	; 0x22
 800408a:	883b      	ldrh	r3, [r7, #0]
 800408c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004090:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004092:	803b      	strh	r3, [r7, #0]
 8004094:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004098:	843b      	strh	r3, [r7, #32]
 800409a:	887b      	ldrh	r3, [r7, #2]
 800409c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80040a0:	8c3b      	ldrh	r3, [r7, #32]
 80040a2:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80040a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80040a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	dd0b      	ble.n	80040c8 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80040b0:	88bb      	ldrh	r3, [r7, #4]
 80040b2:	83fb      	strh	r3, [r7, #30]
 80040b4:	883b      	ldrh	r3, [r7, #0]
 80040b6:	80bb      	strh	r3, [r7, #4]
 80040b8:	8bfb      	ldrh	r3, [r7, #30]
 80040ba:	803b      	strh	r3, [r7, #0]
 80040bc:	88fb      	ldrh	r3, [r7, #6]
 80040be:	83bb      	strh	r3, [r7, #28]
 80040c0:	887b      	ldrh	r3, [r7, #2]
 80040c2:	80fb      	strh	r3, [r7, #6]
 80040c4:	8bbb      	ldrh	r3, [r7, #28]
 80040c6:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80040c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80040cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d136      	bne.n	8004142 <Displ_fillTriangle+0x10c>
        a = b = x0;
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80040d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80040da:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 80040dc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80040e0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80040e4:	429a      	cmp	r2, r3
 80040e6:	da02      	bge.n	80040ee <Displ_fillTriangle+0xb8>
 80040e8:	887b      	ldrh	r3, [r7, #2]
 80040ea:	86fb      	strh	r3, [r7, #54]	; 0x36
 80040ec:	e007      	b.n	80040fe <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 80040ee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80040f2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80040f6:	429a      	cmp	r2, r3
 80040f8:	dd01      	ble.n	80040fe <Displ_fillTriangle+0xc8>
 80040fa:	887b      	ldrh	r3, [r7, #2]
 80040fc:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 80040fe:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8004102:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004106:	429a      	cmp	r2, r3
 8004108:	da03      	bge.n	8004112 <Displ_fillTriangle+0xdc>
 800410a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800410e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004110:	e008      	b.n	8004124 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8004112:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8004116:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800411a:	429a      	cmp	r2, r3
 800411c:	dd02      	ble.n	8004124 <Displ_fillTriangle+0xee>
 800411e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004122:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8004124:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8004128:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800412c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004130:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8004134:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	4623      	mov	r3, r4
 800413c:	f7ff fdcd 	bl	8003cda <Displ_Line>
        return;
 8004140:	e0d2      	b.n	80042e8 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8004142:	887a      	ldrh	r2, [r7, #2]
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	b29b      	uxth	r3, r3
 800414a:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 800414c:	883a      	ldrh	r2, [r7, #0]
 800414e:	88bb      	ldrh	r3, [r7, #4]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	b29b      	uxth	r3, r3
 8004154:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8004156:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	b29b      	uxth	r3, r3
 8004160:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8004162:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004166:	88bb      	ldrh	r3, [r7, #4]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	b29b      	uxth	r3, r3
 800416c:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 800416e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004172:	887b      	ldrh	r3, [r7, #2]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	b29b      	uxth	r3, r3
 8004178:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 800417a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800417e:	883b      	ldrh	r3, [r7, #0]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	b29b      	uxth	r3, r3
 8004184:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8004186:	2300      	movs	r3, #0
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 800418e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004192:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004196:	429a      	cmp	r2, r3
 8004198:	d102      	bne.n	80041a0 <Displ_fillTriangle+0x16a>
 800419a:	883b      	ldrh	r3, [r7, #0]
 800419c:	863b      	strh	r3, [r7, #48]	; 0x30
 800419e:	e003      	b.n	80041a8 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 80041a0:	883b      	ldrh	r3, [r7, #0]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 80041a8:	88bb      	ldrh	r3, [r7, #4]
 80041aa:	867b      	strh	r3, [r7, #50]	; 0x32
 80041ac:	e03d      	b.n	800422a <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 80041ae:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80041b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	4413      	add	r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80041c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80041c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	4413      	add	r3, r2
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 80041d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041dc:	4413      	add	r3, r2
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80041e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80041e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041e6:	4413      	add	r3, r2
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80041ea:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80041ee:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80041f2:	429a      	cmp	r2, r3
 80041f4:	dd05      	ble.n	8004202 <Displ_fillTriangle+0x1cc>
 80041f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041f8:	81bb      	strh	r3, [r7, #12]
 80041fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80041fe:	89bb      	ldrh	r3, [r7, #12]
 8004200:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8004202:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8004206:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800420a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800420e:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8004212:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	4623      	mov	r3, r4
 800421a:	f7ff fd5e 	bl	8003cda <Displ_Line>
    for(y=y0; y<=last; y++) {
 800421e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8004222:	b29b      	uxth	r3, r3
 8004224:	3301      	adds	r3, #1
 8004226:	b29b      	uxth	r3, r3
 8004228:	867b      	strh	r3, [r7, #50]	; 0x32
 800422a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800422e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8004232:	429a      	cmp	r2, r3
 8004234:	ddbb      	ble.n	80041ae <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8004236:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800423a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800423e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004242:	1a8a      	subs	r2, r1, r2
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 800424a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800424e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8004252:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004256:	1a8a      	subs	r2, r1, r2
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 800425e:	e03d      	b.n	80042dc <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8004260:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004266:	fb92 f3f3 	sdiv	r3, r2, r3
 800426a:	b29a      	uxth	r2, r3
 800426c:	887b      	ldrh	r3, [r7, #2]
 800426e:	4413      	add	r3, r2
 8004270:	b29b      	uxth	r3, r3
 8004272:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8004274:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800427a:	fb92 f3f3 	sdiv	r3, r2, r3
 800427e:	b29a      	uxth	r2, r3
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	4413      	add	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8004288:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800428c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800428e:	4413      	add	r3, r2
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8004292:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004298:	4413      	add	r3, r2
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800429c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80042a0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80042a4:	429a      	cmp	r2, r3
 80042a6:	dd05      	ble.n	80042b4 <Displ_fillTriangle+0x27e>
 80042a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80042aa:	81fb      	strh	r3, [r7, #14]
 80042ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80042ae:	86fb      	strh	r3, [r7, #54]	; 0x36
 80042b0:	89fb      	ldrh	r3, [r7, #14]
 80042b2:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 80042b4:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 80042b8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80042bc:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80042c0:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80042c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	4623      	mov	r3, r4
 80042cc:	f7ff fd05 	bl	8003cda <Displ_Line>
    for(; y<=y2; y++) {
 80042d0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3301      	adds	r3, #1
 80042d8:	b29b      	uxth	r3, r3
 80042da:	867b      	strh	r3, [r7, #50]	; 0x32
 80042dc:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80042e0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80042e4:	429a      	cmp	r2, r3
 80042e6:	ddbb      	ble.n	8004260 <Displ_fillTriangle+0x22a>
    }
}
 80042e8:	373c      	adds	r7, #60	; 0x3c
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd90      	pop	{r4, r7, pc}
	...

080042f0 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 80042f0:	b082      	sub	sp, #8
 80042f2:	b590      	push	{r4, r7, lr}
 80042f4:	b08d      	sub	sp, #52	; 0x34
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	647b      	str	r3, [r7, #68]	; 0x44
 80042fa:	4603      	mov	r3, r0
 80042fc:	80fb      	strh	r3, [r7, #6]
 80042fe:	460b      	mov	r3, r1
 8004300:	80bb      	strh	r3, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 8004306:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800430a:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 800430c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004310:	2b02      	cmp	r3, #2
 8004312:	d102      	bne.n	800431a <Displ_WChar+0x2a>
		wsize<<= 1;
 8004314:	7efb      	ldrb	r3, [r7, #27]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 800431a:	2300      	movs	r3, #0
 800431c:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 800431e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004322:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 800432c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	3b20      	subs	r3, #32
 8004332:	4619      	mov	r1, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	4413      	add	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 800433e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004342:	2b02      	cmp	r3, #2
 8004344:	d005      	beq.n	8004352 <Displ_WChar+0x62>
 8004346:	2b03      	cmp	r3, #3
 8004348:	d107      	bne.n	800435a <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 800434a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800434e:	61fb      	str	r3, [r7, #28]
			break;
 8004350:	e005      	b.n	800435e <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 8004352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004356:	61fb      	str	r3, [r7, #28]
			break;
 8004358:	e001      	b.n	800435e <Displ_WChar+0x6e>
		default:
			mask=0x80;
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	61fb      	str	r3, [r7, #28]
#endif

#ifdef Z_RGB666
//  setting up char image in RGB666 format

	uint8_t Rcol=(color & 0xF800)>>8;
 800435e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004362:	121b      	asrs	r3, r3, #8
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f023 0307 	bic.w	r3, r3, #7
 800436a:	73fb      	strb	r3, [r7, #15]
	uint8_t Gcol=(color & 0x07E0)>>3;
 800436c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004370:	10db      	asrs	r3, r3, #3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f023 0303 	bic.w	r3, r3, #3
 8004378:	73bb      	strb	r3, [r7, #14]
	uint8_t Bcol=(color & 0x001F)<<3;
 800437a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	737b      	strb	r3, [r7, #13]
	uint8_t Rbak=(bgcolor & 0xF800)>>8;
 8004382:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004386:	121b      	asrs	r3, r3, #8
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f023 0307 	bic.w	r3, r3, #7
 800438e:	733b      	strb	r3, [r7, #12]
	uint8_t Gbak=(bgcolor & 0x07E0)>>3;
 8004390:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004394:	10db      	asrs	r3, r3, #3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f023 0303 	bic.w	r3, r3, #3
 800439c:	72fb      	strb	r3, [r7, #11]
	uint8_t Bbak=(bgcolor & 0x001F)<<3;
 800439e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	72bb      	strb	r3, [r7, #10]

	for(i = 0; i < (bytes); i+=font.Size){
 80043a6:	2300      	movs	r3, #0
 80043a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043aa:	e0af      	b.n	800450c <Displ_WChar+0x21c>
		b=0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 80043b0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d015      	beq.n	80043e4 <Displ_WChar+0xf4>
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d120      	bne.n	80043fe <Displ_WChar+0x10e>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	4413      	add	r3, r2
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	041a      	lsls	r2, r3, #16
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	3301      	adds	r3, #1
 80043ca:	6939      	ldr	r1, [r7, #16]
 80043cc:	440b      	add	r3, r1
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	4313      	orrs	r3, r2
 80043d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d6:	3202      	adds	r2, #2
 80043d8:	6939      	ldr	r1, [r7, #16]
 80043da:	440a      	add	r2, r1
 80043dc:	7812      	ldrb	r2, [r2, #0]
 80043de:	4313      	orrs	r3, r2
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 80043e2:	e011      	b.n	8004408 <Displ_WChar+0x118>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	4413      	add	r3, r2
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f0:	3201      	adds	r2, #1
 80043f2:	6939      	ldr	r1, [r7, #16]
 80043f4:	440a      	add	r2, r1
 80043f6:	7812      	ldrb	r2, [r2, #0]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 80043fc:	e004      	b.n	8004408 <Displ_WChar+0x118>
			default:
				b=pos[i];
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	4413      	add	r3, r2
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
 800440c:	e072      	b.n	80044f4 <Displ_WChar+0x204>
			if((b << j) & mask)  {
 800440e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	409a      	lsls	r2, r3
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d034      	beq.n	8004486 <Displ_WChar+0x196>
				dispBuffer[bufSize++] = Rcol;
 800441c:	4b53      	ldr	r3, [pc, #332]	; (800456c <Displ_WChar+0x27c>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	1c59      	adds	r1, r3, #1
 8004424:	6239      	str	r1, [r7, #32]
 8004426:	4413      	add	r3, r2
 8004428:	7bfa      	ldrb	r2, [r7, #15]
 800442a:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Gcol;
 800442c:	4b4f      	ldr	r3, [pc, #316]	; (800456c <Displ_WChar+0x27c>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	1c59      	adds	r1, r3, #1
 8004434:	6239      	str	r1, [r7, #32]
 8004436:	4413      	add	r3, r2
 8004438:	7bba      	ldrb	r2, [r7, #14]
 800443a:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Bcol;
 800443c:	4b4b      	ldr	r3, [pc, #300]	; (800456c <Displ_WChar+0x27c>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	1c59      	adds	r1, r3, #1
 8004444:	6239      	str	r1, [r7, #32]
 8004446:	4413      	add	r3, r2
 8004448:	7b7a      	ldrb	r2, [r7, #13]
 800444a:	701a      	strb	r2, [r3, #0]

				if (size==2){
 800444c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004450:	2b02      	cmp	r3, #2
 8004452:	d14c      	bne.n	80044ee <Displ_WChar+0x1fe>
					dispBuffer[bufSize++] = Rcol;
 8004454:	4b45      	ldr	r3, [pc, #276]	; (800456c <Displ_WChar+0x27c>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	1c59      	adds	r1, r3, #1
 800445c:	6239      	str	r1, [r7, #32]
 800445e:	4413      	add	r3, r2
 8004460:	7bfa      	ldrb	r2, [r7, #15]
 8004462:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Gcol;
 8004464:	4b41      	ldr	r3, [pc, #260]	; (800456c <Displ_WChar+0x27c>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	1c59      	adds	r1, r3, #1
 800446c:	6239      	str	r1, [r7, #32]
 800446e:	4413      	add	r3, r2
 8004470:	7bba      	ldrb	r2, [r7, #14]
 8004472:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Bcol;
 8004474:	4b3d      	ldr	r3, [pc, #244]	; (800456c <Displ_WChar+0x27c>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	1c59      	adds	r1, r3, #1
 800447c:	6239      	str	r1, [r7, #32]
 800447e:	4413      	add	r3, r2
 8004480:	7b7a      	ldrb	r2, [r7, #13]
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	e033      	b.n	80044ee <Displ_WChar+0x1fe>
				}
			} else {
				dispBuffer[bufSize++] = Rbak;
 8004486:	4b39      	ldr	r3, [pc, #228]	; (800456c <Displ_WChar+0x27c>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	1c59      	adds	r1, r3, #1
 800448e:	6239      	str	r1, [r7, #32]
 8004490:	4413      	add	r3, r2
 8004492:	7b3a      	ldrb	r2, [r7, #12]
 8004494:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Gbak;
 8004496:	4b35      	ldr	r3, [pc, #212]	; (800456c <Displ_WChar+0x27c>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	1c59      	adds	r1, r3, #1
 800449e:	6239      	str	r1, [r7, #32]
 80044a0:	4413      	add	r3, r2
 80044a2:	7afa      	ldrb	r2, [r7, #11]
 80044a4:	701a      	strb	r2, [r3, #0]
				dispBuffer[bufSize++] = Bbak;
 80044a6:	4b31      	ldr	r3, [pc, #196]	; (800456c <Displ_WChar+0x27c>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	1c59      	adds	r1, r3, #1
 80044ae:	6239      	str	r1, [r7, #32]
 80044b0:	4413      	add	r3, r2
 80044b2:	7aba      	ldrb	r2, [r7, #10]
 80044b4:	701a      	strb	r2, [r3, #0]
				if (size==2) {
 80044b6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d117      	bne.n	80044ee <Displ_WChar+0x1fe>
					dispBuffer[bufSize++] = Rbak;
 80044be:	4b2b      	ldr	r3, [pc, #172]	; (800456c <Displ_WChar+0x27c>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	1c59      	adds	r1, r3, #1
 80044c6:	6239      	str	r1, [r7, #32]
 80044c8:	4413      	add	r3, r2
 80044ca:	7b3a      	ldrb	r2, [r7, #12]
 80044cc:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Gbak;
 80044ce:	4b27      	ldr	r3, [pc, #156]	; (800456c <Displ_WChar+0x27c>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	1c59      	adds	r1, r3, #1
 80044d6:	6239      	str	r1, [r7, #32]
 80044d8:	4413      	add	r3, r2
 80044da:	7afa      	ldrb	r2, [r7, #11]
 80044dc:	701a      	strb	r2, [r3, #0]
					dispBuffer[bufSize++] = Bbak;
 80044de:	4b23      	ldr	r3, [pc, #140]	; (800456c <Displ_WChar+0x27c>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	1c59      	adds	r1, r3, #1
 80044e6:	6239      	str	r1, [r7, #32]
 80044e8:	4413      	add	r3, r2
 80044ea:	7aba      	ldrb	r2, [r7, #10]
 80044ec:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	3301      	adds	r3, #1
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
 80044f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80044f8:	461a      	mov	r2, r3
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d386      	bcc.n	800440e <Displ_WChar+0x11e>
	for(i = 0; i < (bytes); i+=font.Size){
 8004500:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004504:	461a      	mov	r2, r3
 8004506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004508:	4413      	add	r3, r2
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800450c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	429a      	cmp	r2, r3
 8004512:	f4ff af4b 	bcc.w	80043ac <Displ_WChar+0xbc>
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8004516:	7efb      	ldrb	r3, [r7, #27]
 8004518:	b29a      	uxth	r2, r3
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	4413      	add	r3, r2
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29c      	uxth	r4, r3
 8004524:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004528:	88bb      	ldrh	r3, [r7, #4]
 800452a:	4413      	add	r3, r2
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29b      	uxth	r3, r3
 8004532:	88b9      	ldrh	r1, [r7, #4]
 8004534:	88f8      	ldrh	r0, [r7, #6]
 8004536:	4622      	mov	r2, r4
 8004538:	f7fe ff2e 	bl	8003398 <Displ_SetAddressWindow>
	Displ_WriteData(dispBuffer,bufSize,0);
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <Displ_WChar+0x27c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2200      	movs	r2, #0
 8004542:	6a39      	ldr	r1, [r7, #32]
 8004544:	4618      	mov	r0, r3
 8004546:	f7fe fed0 	bl	80032ea <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <Displ_WChar+0x27c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a08      	ldr	r2, [pc, #32]	; (8004570 <Displ_WChar+0x280>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d101      	bne.n	8004558 <Displ_WChar+0x268>
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <Displ_WChar+0x284>)
 8004556:	e000      	b.n	800455a <Displ_WChar+0x26a>
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <Displ_WChar+0x280>)
 800455a:	4a04      	ldr	r2, [pc, #16]	; (800456c <Displ_WChar+0x27c>)
 800455c:	6013      	str	r3, [r2, #0]

}
 800455e:	bf00      	nop
 8004560:	3734      	adds	r7, #52	; 0x34
 8004562:	46bd      	mov	sp, r7
 8004564:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004568:	b002      	add	sp, #8
 800456a:	4770      	bx	lr
 800456c:	20000040 	.word	0x20000040
 8004570:	200063dc 	.word	0x200063dc
 8004574:	200067dc 	.word	0x200067dc

08004578 <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8004578:	b590      	push	{r4, r7, lr}
 800457a:	b087      	sub	sp, #28
 800457c:	af02      	add	r7, sp, #8
 800457e:	4604      	mov	r4, r0
 8004580:	4608      	mov	r0, r1
 8004582:	4611      	mov	r1, r2
 8004584:	461a      	mov	r2, r3
 8004586:	4623      	mov	r3, r4
 8004588:	80fb      	strh	r3, [r7, #6]
 800458a:	4603      	mov	r3, r0
 800458c:	80bb      	strh	r3, [r7, #4]
 800458e:	460b      	mov	r3, r1
 8004590:	807b      	strh	r3, [r7, #2]
 8004592:	4613      	mov	r3, r2
 8004594:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8004596:	f9b7 2000 	ldrsh.w	r2, [r7]
 800459a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800459e:	4293      	cmp	r3, r2
 80045a0:	bfa8      	it	ge
 80045a2:	4613      	movge	r3, r2
 80045a4:	b21b      	sxth	r3, r3
 80045a6:	0fda      	lsrs	r2, r3, #31
 80045a8:	4413      	add	r3, r2
 80045aa:	105b      	asrs	r3, r3, #1
 80045ac:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 80045ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80045b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	dd01      	ble.n	80045be <Displ_drawRoundRect+0x46>
 80045ba:	89fb      	ldrh	r3, [r7, #14]
 80045bc:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 80045be:	88fa      	ldrh	r2, [r7, #6]
 80045c0:	8c3b      	ldrh	r3, [r7, #32]
 80045c2:	4413      	add	r3, r2
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	b218      	sxth	r0, r3
 80045c8:	88fa      	ldrh	r2, [r7, #6]
 80045ca:	887b      	ldrh	r3, [r7, #2]
 80045cc:	4413      	add	r3, r2
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	8c3b      	ldrh	r3, [r7, #32]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29b      	uxth	r3, r3
 80045da:	b21a      	sxth	r2, r3
 80045dc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80045e0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80045e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	4623      	mov	r3, r4
 80045ea:	f7ff fb76 	bl	8003cda <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 80045ee:	88fa      	ldrh	r2, [r7, #6]
 80045f0:	8c3b      	ldrh	r3, [r7, #32]
 80045f2:	4413      	add	r3, r2
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	b218      	sxth	r0, r3
 80045f8:	88ba      	ldrh	r2, [r7, #4]
 80045fa:	883b      	ldrh	r3, [r7, #0]
 80045fc:	4413      	add	r3, r2
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29b      	uxth	r3, r3
 8004604:	b219      	sxth	r1, r3
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	887b      	ldrh	r3, [r7, #2]
 800460a:	4413      	add	r3, r2
 800460c:	b29a      	uxth	r2, r3
 800460e:	8c3b      	ldrh	r3, [r7, #32]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29b      	uxth	r3, r3
 8004618:	b21c      	sxth	r4, r3
 800461a:	88ba      	ldrh	r2, [r7, #4]
 800461c:	883b      	ldrh	r3, [r7, #0]
 800461e:	4413      	add	r3, r2
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29b      	uxth	r3, r3
 8004626:	b21a      	sxth	r2, r3
 8004628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	4622      	mov	r2, r4
 8004630:	f7ff fb53 	bl	8003cda <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 8004634:	88ba      	ldrh	r2, [r7, #4]
 8004636:	8c3b      	ldrh	r3, [r7, #32]
 8004638:	4413      	add	r3, r2
 800463a:	b29b      	uxth	r3, r3
 800463c:	b219      	sxth	r1, r3
 800463e:	88ba      	ldrh	r2, [r7, #4]
 8004640:	883b      	ldrh	r3, [r7, #0]
 8004642:	4413      	add	r3, r2
 8004644:	b29a      	uxth	r2, r3
 8004646:	8c3b      	ldrh	r3, [r7, #32]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29b      	uxth	r3, r3
 8004650:	b21c      	sxth	r4, r3
 8004652:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004656:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800465a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	4623      	mov	r3, r4
 8004660:	f7ff fb3b 	bl	8003cda <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 8004664:	88fa      	ldrh	r2, [r7, #6]
 8004666:	887b      	ldrh	r3, [r7, #2]
 8004668:	4413      	add	r3, r2
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29b      	uxth	r3, r3
 8004670:	b218      	sxth	r0, r3
 8004672:	88ba      	ldrh	r2, [r7, #4]
 8004674:	8c3b      	ldrh	r3, [r7, #32]
 8004676:	4413      	add	r3, r2
 8004678:	b29b      	uxth	r3, r3
 800467a:	b219      	sxth	r1, r3
 800467c:	88fa      	ldrh	r2, [r7, #6]
 800467e:	887b      	ldrh	r3, [r7, #2]
 8004680:	4413      	add	r3, r2
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29b      	uxth	r3, r3
 8004688:	b21c      	sxth	r4, r3
 800468a:	88ba      	ldrh	r2, [r7, #4]
 800468c:	883b      	ldrh	r3, [r7, #0]
 800468e:	4413      	add	r3, r2
 8004690:	b29a      	uxth	r2, r3
 8004692:	8c3b      	ldrh	r3, [r7, #32]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29b      	uxth	r3, r3
 800469c:	b21a      	sxth	r2, r3
 800469e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	4613      	mov	r3, r2
 80046a4:	4622      	mov	r2, r4
 80046a6:	f7ff fb18 	bl	8003cda <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 80046aa:	88fa      	ldrh	r2, [r7, #6]
 80046ac:	8c3b      	ldrh	r3, [r7, #32]
 80046ae:	4413      	add	r3, r2
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	b218      	sxth	r0, r3
 80046b4:	88ba      	ldrh	r2, [r7, #4]
 80046b6:	8c3b      	ldrh	r3, [r7, #32]
 80046b8:	4413      	add	r3, r2
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	b219      	sxth	r1, r3
 80046be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80046c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	2301      	movs	r3, #1
 80046c8:	f7ff f93a 	bl	8003940 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	887b      	ldrh	r3, [r7, #2]
 80046d0:	4413      	add	r3, r2
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	8c3b      	ldrh	r3, [r7, #32]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29b      	uxth	r3, r3
 80046de:	b218      	sxth	r0, r3
 80046e0:	88ba      	ldrh	r2, [r7, #4]
 80046e2:	8c3b      	ldrh	r3, [r7, #32]
 80046e4:	4413      	add	r3, r2
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	b219      	sxth	r1, r3
 80046ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80046ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	2302      	movs	r3, #2
 80046f4:	f7ff f924 	bl	8003940 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	887b      	ldrh	r3, [r7, #2]
 80046fc:	4413      	add	r3, r2
 80046fe:	b29a      	uxth	r2, r3
 8004700:	8c3b      	ldrh	r3, [r7, #32]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29b      	uxth	r3, r3
 800470a:	b218      	sxth	r0, r3
 800470c:	88ba      	ldrh	r2, [r7, #4]
 800470e:	883b      	ldrh	r3, [r7, #0]
 8004710:	4413      	add	r3, r2
 8004712:	b29a      	uxth	r2, r3
 8004714:	8c3b      	ldrh	r3, [r7, #32]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29b      	uxth	r3, r3
 800471e:	b219      	sxth	r1, r3
 8004720:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	2304      	movs	r3, #4
 800472a:	f7ff f909 	bl	8003940 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 800472e:	88fa      	ldrh	r2, [r7, #6]
 8004730:	8c3b      	ldrh	r3, [r7, #32]
 8004732:	4413      	add	r3, r2
 8004734:	b29b      	uxth	r3, r3
 8004736:	b218      	sxth	r0, r3
 8004738:	88ba      	ldrh	r2, [r7, #4]
 800473a:	883b      	ldrh	r3, [r7, #0]
 800473c:	4413      	add	r3, r2
 800473e:	b29a      	uxth	r2, r3
 8004740:	8c3b      	ldrh	r3, [r7, #32]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29b      	uxth	r3, r3
 800474a:	b219      	sxth	r1, r3
 800474c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	2308      	movs	r3, #8
 8004756:	f7ff f8f3 	bl	8003940 <drawCircleHelper>
}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	bd90      	pop	{r4, r7, pc}

08004762 <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8004762:	b590      	push	{r4, r7, lr}
 8004764:	b087      	sub	sp, #28
 8004766:	af02      	add	r7, sp, #8
 8004768:	4604      	mov	r4, r0
 800476a:	4608      	mov	r0, r1
 800476c:	4611      	mov	r1, r2
 800476e:	461a      	mov	r2, r3
 8004770:	4623      	mov	r3, r4
 8004772:	80fb      	strh	r3, [r7, #6]
 8004774:	4603      	mov	r3, r0
 8004776:	80bb      	strh	r3, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	807b      	strh	r3, [r7, #2]
 800477c:	4613      	mov	r3, r2
 800477e:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8004780:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004784:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004788:	4293      	cmp	r3, r2
 800478a:	bfa8      	it	ge
 800478c:	4613      	movge	r3, r2
 800478e:	b21b      	sxth	r3, r3
 8004790:	0fda      	lsrs	r2, r3, #31
 8004792:	4413      	add	r3, r2
 8004794:	105b      	asrs	r3, r3, #1
 8004796:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8004798:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800479c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	dd01      	ble.n	80047a8 <Displ_fillRoundRect+0x46>
 80047a4:	89fb      	ldrh	r3, [r7, #14]
 80047a6:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 80047a8:	88fa      	ldrh	r2, [r7, #6]
 80047aa:	8c3b      	ldrh	r3, [r7, #32]
 80047ac:	4413      	add	r3, r2
 80047ae:	b298      	uxth	r0, r3
 80047b0:	88b9      	ldrh	r1, [r7, #4]
 80047b2:	887a      	ldrh	r2, [r7, #2]
 80047b4:	8c3b      	ldrh	r3, [r7, #32]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	b29a      	uxth	r2, r3
 80047be:	883c      	ldrh	r4, [r7, #0]
 80047c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	4623      	mov	r3, r4
 80047c6:	f7fe fed7 	bl	8003578 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 80047ca:	88fa      	ldrh	r2, [r7, #6]
 80047cc:	887b      	ldrh	r3, [r7, #2]
 80047ce:	4413      	add	r3, r2
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	8c3b      	ldrh	r3, [r7, #32]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29b      	uxth	r3, r3
 80047dc:	b218      	sxth	r0, r3
 80047de:	88ba      	ldrh	r2, [r7, #4]
 80047e0:	8c3b      	ldrh	r3, [r7, #32]
 80047e2:	4413      	add	r3, r2
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	b219      	sxth	r1, r3
 80047e8:	883a      	ldrh	r2, [r7, #0]
 80047ea:	8c3b      	ldrh	r3, [r7, #32]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	b21b      	sxth	r3, r3
 80047fa:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80047fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004800:	9201      	str	r2, [sp, #4]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	2301      	movs	r3, #1
 8004806:	4622      	mov	r2, r4
 8004808:	f7ff f95e 	bl	8003ac8 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800480c:	88fa      	ldrh	r2, [r7, #6]
 800480e:	8c3b      	ldrh	r3, [r7, #32]
 8004810:	4413      	add	r3, r2
 8004812:	b29b      	uxth	r3, r3
 8004814:	b218      	sxth	r0, r3
 8004816:	88ba      	ldrh	r2, [r7, #4]
 8004818:	8c3b      	ldrh	r3, [r7, #32]
 800481a:	4413      	add	r3, r2
 800481c:	b29b      	uxth	r3, r3
 800481e:	b219      	sxth	r1, r3
 8004820:	883a      	ldrh	r2, [r7, #0]
 8004822:	8c3b      	ldrh	r3, [r7, #32]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	b29b      	uxth	r3, r3
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29b      	uxth	r3, r3
 8004830:	b21b      	sxth	r3, r3
 8004832:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8004836:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004838:	9201      	str	r2, [sp, #4]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	2302      	movs	r3, #2
 800483e:	4622      	mov	r2, r4
 8004840:	f7ff f942 	bl	8003ac8 <fillCircleHelper>
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	bd90      	pop	{r4, r7, pc}

0800484c <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 800484c:	b082      	sub	sp, #8
 800484e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004850:	b08b      	sub	sp, #44	; 0x2c
 8004852:	af06      	add	r7, sp, #24
 8004854:	603a      	str	r2, [r7, #0]
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004858:	4603      	mov	r3, r0
 800485a:	80fb      	strh	r3, [r7, #6]
 800485c:	460b      	mov	r3, r1
 800485e:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 8004860:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004862:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 8004864:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004868:	2b01      	cmp	r3, #1
 800486a:	d922      	bls.n	80048b2 <Displ_WString+0x66>
		delta<<=1;
 800486c:	89fb      	ldrh	r3, [r7, #14]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8004872:	e01e      	b.n	80048b2 <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781a      	ldrb	r2, [r3, #0]
 8004878:	88bd      	ldrh	r5, [r7, #4]
 800487a:	88fc      	ldrh	r4, [r7, #6]
 800487c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004880:	9304      	str	r3, [sp, #16]
 8004882:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004884:	9303      	str	r3, [sp, #12]
 8004886:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800488a:	9302      	str	r3, [sp, #8]
 800488c:	466e      	mov	r6, sp
 800488e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004892:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004896:	e886 0003 	stmia.w	r6, {r0, r1}
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	4629      	mov	r1, r5
 800489e:	4620      	mov	r0, r4
 80048a0:	f7ff fd26 	bl	80042f0 <Displ_WChar>
        x += delta;
 80048a4:	88fa      	ldrh	r2, [r7, #6]
 80048a6:	89fb      	ldrh	r3, [r7, #14]
 80048a8:	4413      	add	r3, r2
 80048aa:	80fb      	strh	r3, [r7, #6]
        str++;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	603b      	str	r3, [r7, #0]
    while(*str) {
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1dc      	bne.n	8004874 <Displ_WString+0x28>
    }
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80048c6:	b002      	add	sp, #8
 80048c8:	4770      	bx	lr
	...

080048cc <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	2b51      	cmp	r3, #81	; 0x51
 80048da:	d00a      	beq.n	80048f2 <Displ_BackLight+0x26>
 80048dc:	2b51      	cmp	r3, #81	; 0x51
 80048de:	dc16      	bgt.n	800490e <Displ_BackLight+0x42>
 80048e0:	2b46      	cmp	r3, #70	; 0x46
 80048e2:	d008      	beq.n	80048f6 <Displ_BackLight+0x2a>
 80048e4:	2b46      	cmp	r3, #70	; 0x46
 80048e6:	dc12      	bgt.n	800490e <Displ_BackLight+0x42>
 80048e8:	2b30      	cmp	r3, #48	; 0x30
 80048ea:	d00a      	beq.n	8004902 <Displ_BackLight+0x36>
 80048ec:	2b31      	cmp	r3, #49	; 0x31
 80048ee:	d002      	beq.n	80048f6 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 80048f0:	e00d      	b.n	800490e <Displ_BackLight+0x42>
		__NOP();
 80048f2:	bf00      	nop
		break;
 80048f4:	e00c      	b.n	8004910 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 80048f6:	2201      	movs	r2, #1
 80048f8:	2140      	movs	r1, #64	; 0x40
 80048fa:	480a      	ldr	r0, [pc, #40]	; (8004924 <Displ_BackLight+0x58>)
 80048fc:	f002 f860 	bl	80069c0 <HAL_GPIO_WritePin>
		break;
 8004900:	e006      	b.n	8004910 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8004902:	2200      	movs	r2, #0
 8004904:	2140      	movs	r1, #64	; 0x40
 8004906:	4807      	ldr	r0, [pc, #28]	; (8004924 <Displ_BackLight+0x58>)
 8004908:	f002 f85a 	bl	80069c0 <HAL_GPIO_WritePin>
		break;
 800490c:	e000      	b.n	8004910 <Displ_BackLight+0x44>
		break;
 800490e:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8004910:	2140      	movs	r1, #64	; 0x40
 8004912:	4804      	ldr	r0, [pc, #16]	; (8004924 <Displ_BackLight+0x58>)
 8004914:	f002 f83c 	bl	8006990 <HAL_GPIO_ReadPin>
 8004918:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40020000 	.word	0x40020000

08004928 <testLines>:




void testLines(uint16_t color)
{
 8004928:	b590      	push	{r4, r7, lr}
 800492a:	b08b      	sub	sp, #44	; 0x2c
 800492c:	af02      	add	r7, sp, #8
 800492e:	4603      	mov	r3, r0
 8004930:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8004932:	4b7c      	ldr	r3, [pc, #496]	; (8004b24 <testLines+0x1fc>)
 8004934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004938:	617b      	str	r3, [r7, #20]
                  h = _height;
 800493a:	4b7b      	ldr	r3, [pc, #492]	; (8004b28 <testLines+0x200>)
 800493c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004940:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8004942:	2000      	movs	r0, #0
 8004944:	f7fe ffe0 	bl	8003908 <Displ_CLS>

    x1 = y1 = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	3b01      	subs	r3, #1
 8004954:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	e00f      	b.n	800497c <testLines+0x54>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	b218      	sxth	r0, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	b219      	sxth	r1, r3
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	b21a      	sxth	r2, r3
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	b21c      	sxth	r4, r3
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	4623      	mov	r3, r4
 8004972:	f7ff f9b2 	bl	8003cda <Displ_Line>
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	3306      	adds	r3, #6
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	429a      	cmp	r2, r3
 8004982:	dbeb      	blt.n	800495c <testLines+0x34>
    x2    = w - 1;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	3b01      	subs	r3, #1
 8004988:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	e00f      	b.n	80049b0 <testLines+0x88>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	b218      	sxth	r0, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	b219      	sxth	r1, r3
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	b21a      	sxth	r2, r3
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	b21c      	sxth	r4, r3
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	4623      	mov	r3, r4
 80049a6:	f7ff f998 	bl	8003cda <Displ_Line>
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	3306      	adds	r3, #6
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	dbeb      	blt.n	8004990 <testLines+0x68>

    Displ_CLS(BLACK);
 80049b8:	2000      	movs	r0, #0
 80049ba:	f7fe ffa5 	bl	8003908 <Displ_CLS>

    x1    = w - 1;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	e00f      	b.n	80049f4 <testLines+0xcc>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	b218      	sxth	r0, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	b219      	sxth	r1, r3
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	b21a      	sxth	r2, r3
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	b21c      	sxth	r4, r3
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	4623      	mov	r3, r4
 80049ea:	f7ff f976 	bl	8003cda <Displ_Line>
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3306      	adds	r3, #6
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	dbeb      	blt.n	80049d4 <testLines+0xac>
    x2    = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004a00:	2300      	movs	r3, #0
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	e00f      	b.n	8004a26 <testLines+0xfe>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	b218      	sxth	r0, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	b219      	sxth	r1, r3
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	b21a      	sxth	r2, r3
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	b21c      	sxth	r4, r3
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	4623      	mov	r3, r4
 8004a1c:	f7ff f95d 	bl	8003cda <Displ_Line>
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	3306      	adds	r3, #6
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	dbeb      	blt.n	8004a06 <testLines+0xde>

    Displ_CLS(BLACK);
 8004a2e:	2000      	movs	r0, #0
 8004a30:	f7fe ff6a 	bl	8003908 <Displ_CLS>

    x1    = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
 8004a46:	e00f      	b.n	8004a68 <testLines+0x140>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	b218      	sxth	r0, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	b219      	sxth	r1, r3
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	b21a      	sxth	r2, r3
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	b21c      	sxth	r4, r3
 8004a58:	88fb      	ldrh	r3, [r7, #6]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	4623      	mov	r3, r4
 8004a5e:	f7ff f93c 	bl	8003cda <Displ_Line>
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	3306      	adds	r3, #6
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	dbeb      	blt.n	8004a48 <testLines+0x120>
    x2    = w - 1;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	e00f      	b.n	8004a9c <testLines+0x174>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	b218      	sxth	r0, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	b219      	sxth	r1, r3
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	b21a      	sxth	r2, r3
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	b21c      	sxth	r4, r3
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	4623      	mov	r3, r4
 8004a92:	f7ff f922 	bl	8003cda <Displ_Line>
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	3306      	adds	r3, #6
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	dbeb      	blt.n	8004a7c <testLines+0x154>

    Displ_CLS(BLACK);
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f7fe ff2f 	bl	8003908 <Displ_CLS>

    x1    = w - 1;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e00f      	b.n	8004ae0 <testLines+0x1b8>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	b218      	sxth	r0, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	b219      	sxth	r1, r3
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	b21a      	sxth	r2, r3
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	b21c      	sxth	r4, r3
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	4623      	mov	r3, r4
 8004ad6:	f7ff f900 	bl	8003cda <Displ_Line>
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3306      	adds	r3, #6
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	dbeb      	blt.n	8004ac0 <testLines+0x198>
    x2    = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004aec:	2300      	movs	r3, #0
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	e00f      	b.n	8004b12 <testLines+0x1ea>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	b218      	sxth	r0, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	b219      	sxth	r1, r3
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	b21a      	sxth	r2, r3
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	b21c      	sxth	r4, r3
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	4623      	mov	r3, r4
 8004b08:	f7ff f8e7 	bl	8003cda <Displ_Line>
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	3306      	adds	r3, #6
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	dbeb      	blt.n	8004af2 <testLines+0x1ca>

}
 8004b1a:	bf00      	nop
 8004b1c:	bf00      	nop
 8004b1e:	3724      	adds	r7, #36	; 0x24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd90      	pop	{r4, r7, pc}
 8004b24:	200063d6 	.word	0x200063d6
 8004b28:	200063d8 	.word	0x200063d8

08004b2c <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	4603      	mov	r3, r0
 8004b34:	460a      	mov	r2, r1
 8004b36:	80fb      	strh	r3, [r7, #6]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 8004b3c:	4b20      	ldr	r3, [pc, #128]	; (8004bc0 <testFastLines+0x94>)
 8004b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	4b1f      	ldr	r3, [pc, #124]	; (8004bc4 <testFastLines+0x98>)
 8004b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b4a:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	f7fe fedb 	bl	8003908 <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e011      	b.n	8004b7c <testFastLines+0x50>
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	b219      	sxth	r1, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	b21a      	sxth	r2, r3
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	b218      	sxth	r0, r3
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2000      	movs	r0, #0
 8004b72:	f7ff f8b2 	bl	8003cda <Displ_Line>
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	3305      	adds	r3, #5
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	dbe9      	blt.n	8004b58 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e011      	b.n	8004bae <testFastLines+0x82>
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	b218      	sxth	r0, r3
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	b21a      	sxth	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	b219      	sxth	r1, r3
 8004b9c:	88bb      	ldrh	r3, [r7, #4]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	f7ff f899 	bl	8003cda <Displ_Line>
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3305      	adds	r3, #5
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	dbe9      	blt.n	8004b8a <testFastLines+0x5e>
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	200063d6 	.word	0x200063d6
 8004bc4:	200063d8 	.word	0x200063d8

08004bc8 <testRects>:




void testRects(uint16_t color)
{
 8004bc8:	b590      	push	{r4, r7, lr}
 8004bca:	b08b      	sub	sp, #44	; 0x2c
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	4603      	mov	r3, r0
 8004bd0:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 8004bd2:	4b25      	ldr	r3, [pc, #148]	; (8004c68 <testRects+0xa0>)
 8004bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bd8:	0fda      	lsrs	r2, r3, #31
 8004bda:	4413      	add	r3, r2
 8004bdc:	105b      	asrs	r3, r3, #1
 8004bde:	b21b      	sxth	r3, r3
 8004be0:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 8004be2:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <testRects+0xa4>)
 8004be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004be8:	0fda      	lsrs	r2, r3, #31
 8004bea:	4413      	add	r3, r2
 8004bec:	105b      	asrs	r3, r3, #1
 8004bee:	b21b      	sxth	r3, r3
 8004bf0:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f7fe fe88 	bl	8003908 <Displ_CLS>
	n     = min(_width, _height);
 8004bf8:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <testRects+0xa4>)
 8004bfa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004bfe:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <testRects+0xa0>)
 8004c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c04:	4293      	cmp	r3, r2
 8004c06:	bfa8      	it	ge
 8004c08:	4613      	movge	r3, r2
 8004c0a:	b21b      	sxth	r3, r3
 8004c0c:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 8004c0e:	2302      	movs	r3, #2
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	e020      	b.n	8004c56 <testRects+0x8e>
		i2 = i / 2;
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	0fda      	lsrs	r2, r3, #31
 8004c18:	4413      	add	r3, r2
 8004c1a:	105b      	asrs	r3, r3, #1
 8004c1c:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	b218      	sxth	r0, r3
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	b219      	sxth	r1, r3
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	b21a      	sxth	r2, r3
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	b21c      	sxth	r4, r3
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	2301      	movs	r3, #1
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	4623      	mov	r3, r4
 8004c4c:	f7ff f976 	bl	8003f3c <Displ_Border>
	for (i = 2; i < n; i += 6) {
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	3306      	adds	r3, #6
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	dbda      	blt.n	8004c14 <testRects+0x4c>
	}
}
 8004c5e:	bf00      	nop
 8004c60:	bf00      	nop
 8004c62:	3724      	adds	r7, #36	; 0x24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd90      	pop	{r4, r7, pc}
 8004c68:	200063d6 	.word	0x200063d6
 8004c6c:	200063d8 	.word	0x200063d8

08004c70 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b08b      	sub	sp, #44	; 0x2c
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	4603      	mov	r3, r0
 8004c78:	460a      	mov	r2, r1
 8004c7a:	80fb      	strh	r3, [r7, #6]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8004c80:	4b30      	ldr	r3, [pc, #192]	; (8004d44 <testFilledRects+0xd4>)
 8004c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c86:	0fda      	lsrs	r2, r3, #31
 8004c88:	4413      	add	r3, r2
 8004c8a:	105b      	asrs	r3, r3, #1
 8004c8c:	b21b      	sxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 8004c92:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <testFilledRects+0xd8>)
 8004c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c98:	0fda      	lsrs	r2, r3, #31
 8004c9a:	4413      	add	r3, r2
 8004c9c:	105b      	asrs	r3, r3, #1
 8004c9e:	b21b      	sxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f7fe fe2f 	bl	8003908 <Displ_CLS>
	n = min(_width, _height);
 8004caa:	4b27      	ldr	r3, [pc, #156]	; (8004d48 <testFilledRects+0xd8>)
 8004cac:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004cb0:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <testFilledRects+0xd4>)
 8004cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	bfa8      	it	ge
 8004cba:	4613      	movge	r3, r2
 8004cbc:	b21b      	sxth	r3, r3
 8004cbe:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	e035      	b.n	8004d32 <testFilledRects+0xc2>
		i2    = i / 2;
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	0fda      	lsrs	r2, r3, #31
 8004cca:	4413      	add	r3, r2
 8004ccc:	105b      	asrs	r3, r3, #1
 8004cce:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	b298      	uxth	r0, r3
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	b299      	uxth	r1, r3
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	b29c      	uxth	r4, r3
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	4623      	mov	r3, r4
 8004cf6:	f7fe fc3f 	bl	8003578 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	b218      	sxth	r0, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	b219      	sxth	r1, r3
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	b21a      	sxth	r2, r3
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	b21c      	sxth	r4, r3
 8004d1e:	88bb      	ldrh	r3, [r7, #4]
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	2301      	movs	r3, #1
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	4623      	mov	r3, r4
 8004d28:	f7ff f908 	bl	8003f3c <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	3b06      	subs	r3, #6
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	dcc6      	bgt.n	8004cc6 <testFilledRects+0x56>
	}
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	3724      	adds	r7, #36	; 0x24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd90      	pop	{r4, r7, pc}
 8004d42:	bf00      	nop
 8004d44:	200063d6 	.word	0x200063d6
 8004d48:	200063d8 	.word	0x200063d8

08004d4c <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	460a      	mov	r2, r1
 8004d56:	71fb      	strb	r3, [r7, #7]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8004d5c:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <testFilledCircles+0x74>)
 8004d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	4b17      	ldr	r3, [pc, #92]	; (8004dc4 <testFilledCircles+0x78>)
 8004d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	79fb      	ldrb	r3, [r7, #7]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 8004d72:	2000      	movs	r0, #0
 8004d74:	f7fe fdc8 	bl	8003908 <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	61fb      	str	r3, [r7, #28]
 8004d7c:	e017      	b.n	8004dae <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e00c      	b.n	8004d9e <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	b218      	sxth	r0, r3
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	b219      	sxth	r1, r3
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	b21a      	sxth	r2, r3
 8004d90:	88bb      	ldrh	r3, [r7, #4]
 8004d92:	f7fe ff6f 	bl	8003c74 <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	dbee      	blt.n	8004d84 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	dbe3      	blt.n	8004d7e <testFilledCircles+0x32>
        }
    }
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	3720      	adds	r7, #32
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	200063d6 	.word	0x200063d6
 8004dc4:	200063d8 	.word	0x200063d8

08004dc8 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	460a      	mov	r2, r1
 8004dd2:	71fb      	strb	r3, [r7, #7]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8004dde:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <testCircles+0x7c>)
 8004de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004de4:	461a      	mov	r2, r3
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	4413      	add	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8004dec:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <testCircles+0x80>)
 8004dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004df2:	461a      	mov	r2, r3
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	4413      	add	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	e017      	b.n	8004e30 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8004e00:	2300      	movs	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	e00c      	b.n	8004e20 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	b218      	sxth	r0, r3
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	b219      	sxth	r1, r3
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	b21a      	sxth	r2, r3
 8004e12:	88bb      	ldrh	r3, [r7, #4]
 8004e14:	f7fe fca4 	bl	8003760 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	dbee      	blt.n	8004e06 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	61fb      	str	r3, [r7, #28]
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	dbe3      	blt.n	8004e00 <testCircles+0x38>
        }
    }
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	3720      	adds	r7, #32
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200063d6 	.word	0x200063d6
 8004e48:	200063d8 	.word	0x200063d8

08004e4c <testTriangles>:




void testTriangles()
{
 8004e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e4e:	b089      	sub	sp, #36	; 0x24
 8004e50:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 8004e52:	4b2e      	ldr	r3, [pc, #184]	; (8004f0c <testTriangles+0xc0>)
 8004e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e58:	0fda      	lsrs	r2, r3, #31
 8004e5a:	4413      	add	r3, r2
 8004e5c:	105b      	asrs	r3, r3, #1
 8004e5e:	b21b      	sxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8004e64:	4b2a      	ldr	r3, [pc, #168]	; (8004f10 <testTriangles+0xc4>)
 8004e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e6a:	0fda      	lsrs	r2, r3, #31
 8004e6c:	4413      	add	r3, r2
 8004e6e:	105b      	asrs	r3, r3, #1
 8004e70:	b21b      	sxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8004e76:	2000      	movs	r0, #0
 8004e78:	f7fe fd46 	bl	8003908 <Displ_CLS>
    n     = min(cx, cy);
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4293      	cmp	r3, r2
 8004e82:	bfa8      	it	ge
 8004e84:	4613      	movge	r3, r2
 8004e86:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	e035      	b.n	8004efa <testTriangles+0xae>
    	Displ_drawTriangle(
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8004e9e:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8004eac:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8004eba:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8004ec8:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	b291      	uxth	r1, r2
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	b292      	uxth	r2, r2
 8004ed2:	440a      	add	r2, r1
 8004ed4:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 8004ed6:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8004ed8:	68f9      	ldr	r1, [r7, #12]
 8004eda:	10c9      	asrs	r1, r1, #3
 8004edc:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 8004ede:	f001 011f 	and.w	r1, r1, #31
 8004ee2:	b289      	uxth	r1, r1
 8004ee4:	9102      	str	r1, [sp, #8]
 8004ee6:	9201      	str	r2, [sp, #4]
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	4633      	mov	r3, r6
 8004eec:	462a      	mov	r2, r5
 8004eee:	4621      	mov	r1, r4
 8004ef0:	f7ff f867 	bl	8003fc2 <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3305      	adds	r3, #5
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	dbc5      	blt.n	8004e8e <testTriangles+0x42>
    }
}
 8004f02:	bf00      	nop
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f0c:	200063d6 	.word	0x200063d6
 8004f10:	200063d8 	.word	0x200063d8

08004f14 <testFilledTriangles>:





void testFilledTriangles() {
 8004f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f16:	b089      	sub	sp, #36	; 0x24
 8004f18:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 8004f1a:	4b53      	ldr	r3, [pc, #332]	; (8005068 <testFilledTriangles+0x154>)
 8004f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f20:	0fda      	lsrs	r2, r3, #31
 8004f22:	4413      	add	r3, r2
 8004f24:	105b      	asrs	r3, r3, #1
 8004f26:	b21b      	sxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8004f2c:	4b4f      	ldr	r3, [pc, #316]	; (800506c <testFilledTriangles+0x158>)
 8004f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f32:	0fda      	lsrs	r2, r3, #31
 8004f34:	4413      	add	r3, r2
 8004f36:	105b      	asrs	r3, r3, #1
 8004f38:	b21b      	sxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f7fe fce2 	bl	8003908 <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	bfa8      	it	ge
 8004f4c:	4613      	movge	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	e080      	b.n	8005054 <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	b21c      	sxth	r4, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	b21d      	sxth	r5, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	b21e      	sxth	r6, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	fa0f fc83 	sxth.w	ip, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	b21b      	sxth	r3, r3
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	b291      	uxth	r1, r2
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	b292      	uxth	r2, r2
 8004f98:	440a      	add	r2, r1
 8004f9a:	b292      	uxth	r2, r2
 8004f9c:	b212      	sxth	r2, r2
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	00c9      	lsls	r1, r1, #3
 8004fa2:	b209      	sxth	r1, r1
 8004fa4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8004fa8:	b208      	sxth	r0, r1
 8004faa:	68f9      	ldr	r1, [r7, #12]
 8004fac:	10c9      	asrs	r1, r1, #3
 8004fae:	b209      	sxth	r1, r1
 8004fb0:	f001 011f 	and.w	r1, r1, #31
 8004fb4:	b209      	sxth	r1, r1
 8004fb6:	4301      	orrs	r1, r0
 8004fb8:	b209      	sxth	r1, r1
 8004fba:	b289      	uxth	r1, r1
 8004fbc:	9102      	str	r1, [sp, #8]
 8004fbe:	9201      	str	r2, [sp, #4]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	4663      	mov	r3, ip
 8004fc4:	4632      	mov	r2, r6
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f7ff f834 	bl	8004036 <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	b21c      	sxth	r4, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	b21d      	sxth	r5, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	b21e      	sxth	r6, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	fa0f fc83 	sxth.w	ip, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	b29b      	uxth	r3, r3
 8005006:	4413      	add	r3, r2
 8005008:	b29b      	uxth	r3, r3
 800500a:	b21a      	sxth	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	b299      	uxth	r1, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	b29b      	uxth	r3, r3
 8005014:	440b      	add	r3, r1
 8005016:	b29b      	uxth	r3, r3
 8005018:	b219      	sxth	r1, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	b21b      	sxth	r3, r3
 8005020:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005024:	f023 0307 	bic.w	r3, r3, #7
 8005028:	b218      	sxth	r0, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	b21b      	sxth	r3, r3
 8005030:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8005034:	b21b      	sxth	r3, r3
 8005036:	4303      	orrs	r3, r0
 8005038:	b21b      	sxth	r3, r3
 800503a:	b29b      	uxth	r3, r3
 800503c:	9302      	str	r3, [sp, #8]
 800503e:	9101      	str	r1, [sp, #4]
 8005040:	9200      	str	r2, [sp, #0]
 8005042:	4663      	mov	r3, ip
 8005044:	4632      	mov	r2, r6
 8005046:	4629      	mov	r1, r5
 8005048:	4620      	mov	r0, r4
 800504a:	f7fe ffba 	bl	8003fc2 <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3b05      	subs	r3, #5
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b0a      	cmp	r3, #10
 8005058:	f73f af7b 	bgt.w	8004f52 <testFilledTriangles+0x3e>
    }
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005066:	bf00      	nop
 8005068:	200063d6 	.word	0x200063d6
 800506c:	200063d8 	.word	0x200063d8

08005070 <testRoundRects>:





void testRoundRects() {
 8005070:	b5b0      	push	{r4, r5, r7, lr}
 8005072:	b08a      	sub	sp, #40	; 0x28
 8005074:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8005076:	4b33      	ldr	r3, [pc, #204]	; (8005144 <testRoundRects+0xd4>)
 8005078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800507c:	0fda      	lsrs	r2, r3, #31
 800507e:	4413      	add	r3, r2
 8005080:	105b      	asrs	r3, r3, #1
 8005082:	b21b      	sxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8005088:	4b2f      	ldr	r3, [pc, #188]	; (8005148 <testRoundRects+0xd8>)
 800508a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800508e:	0fda      	lsrs	r2, r3, #31
 8005090:	4413      	add	r3, r2
 8005092:	105b      	asrs	r3, r3, #1
 8005094:	b21b      	sxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 800509a:	2000      	movs	r0, #0
 800509c:	f7fe fc34 	bl	8003908 <Displ_CLS>
    w     = min(_width, _height);
 80050a0:	4b29      	ldr	r3, [pc, #164]	; (8005148 <testRoundRects+0xd8>)
 80050a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80050a6:	4b27      	ldr	r3, [pc, #156]	; (8005144 <testRoundRects+0xd4>)
 80050a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050ac:	4293      	cmp	r3, r2
 80050ae:	bfa8      	it	ge
 80050b0:	4613      	movge	r3, r2
 80050b2:	b21b      	sxth	r3, r3
 80050b4:	60fb      	str	r3, [r7, #12]
    red = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 80050ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80050c4:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
 80050ca:	e031      	b.n	8005130 <testRoundRects+0xc0>
        i2 = i / 2;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	0fda      	lsrs	r2, r3, #31
 80050d0:	4413      	add	r3, r2
 80050d2:	105b      	asrs	r3, r3, #1
 80050d4:	607b      	str	r3, [r7, #4]
        red += step;
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4413      	add	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	b218      	sxth	r0, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	b219      	sxth	r1, r3
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	b21c      	sxth	r4, r3
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	b21d      	sxth	r5, r3
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	2b00      	cmp	r3, #0
 8005106:	da00      	bge.n	800510a <testRoundRects+0x9a>
 8005108:	3307      	adds	r3, #7
 800510a:	10db      	asrs	r3, r3, #3
 800510c:	b21a      	sxth	r2, r3
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	b29b      	uxth	r3, r3
 8005114:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005118:	f023 0307 	bic.w	r3, r3, #7
 800511c:	b29b      	uxth	r3, r3
 800511e:	9301      	str	r3, [sp, #4]
 8005120:	9200      	str	r2, [sp, #0]
 8005122:	462b      	mov	r3, r5
 8005124:	4622      	mov	r2, r4
 8005126:	f7ff fa27 	bl	8004578 <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	3306      	adds	r3, #6
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	429a      	cmp	r2, r3
 8005136:	dbc9      	blt.n	80050cc <testRoundRects+0x5c>
    }
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bdb0      	pop	{r4, r5, r7, pc}
 8005142:	bf00      	nop
 8005144:	200063d6 	.word	0x200063d6
 8005148:	200063d8 	.word	0x200063d8

0800514c <testFilledRoundRects>:





void testFilledRoundRects() {
 800514c:	b5b0      	push	{r4, r5, r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8005152:	4b36      	ldr	r3, [pc, #216]	; (800522c <testFilledRoundRects+0xe0>)
 8005154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005158:	0fda      	lsrs	r2, r3, #31
 800515a:	4413      	add	r3, r2
 800515c:	105b      	asrs	r3, r3, #1
 800515e:	b21b      	sxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8005164:	4b32      	ldr	r3, [pc, #200]	; (8005230 <testFilledRoundRects+0xe4>)
 8005166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800516a:	0fda      	lsrs	r2, r3, #31
 800516c:	4413      	add	r3, r2
 800516e:	105b      	asrs	r3, r3, #1
 8005170:	b21b      	sxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8005176:	2000      	movs	r0, #0
 8005178:	f7fe fbc6 	bl	8003908 <Displ_CLS>
    green = 256;
 800517c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005180:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8005182:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <testFilledRoundRects+0xe4>)
 8005184:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005188:	4b28      	ldr	r3, [pc, #160]	; (800522c <testFilledRoundRects+0xe0>)
 800518a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800518e:	4293      	cmp	r3, r2
 8005190:	bfa8      	it	ge
 8005192:	4613      	movge	r3, r2
 8005194:	b21b      	sxth	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800519c:	fb93 f3f2 	sdiv	r3, r3, r2
 80051a0:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 80051a2:	4b23      	ldr	r3, [pc, #140]	; (8005230 <testFilledRoundRects+0xe4>)
 80051a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80051a8:	4b20      	ldr	r3, [pc, #128]	; (800522c <testFilledRoundRects+0xe0>)
 80051aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051ae:	4293      	cmp	r3, r2
 80051b0:	bfa8      	it	ge
 80051b2:	4613      	movge	r3, r2
 80051b4:	b21b      	sxth	r3, r3
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	e02f      	b.n	800521a <testFilledRoundRects+0xce>
        i2 = i / 2;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	0fda      	lsrs	r2, r3, #31
 80051be:	4413      	add	r3, r2
 80051c0:	105b      	asrs	r3, r3, #1
 80051c2:	603b      	str	r3, [r7, #0]
        green -= step;
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	b218      	sxth	r0, r3
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	b29a      	uxth	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	b219      	sxth	r1, r3
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	b21c      	sxth	r4, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	b21d      	sxth	r5, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	da00      	bge.n	80051f8 <testFilledRoundRects+0xac>
 80051f6:	3307      	adds	r3, #7
 80051f8:	10db      	asrs	r3, r3, #3
 80051fa:	b21b      	sxth	r3, r3
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	00d2      	lsls	r2, r2, #3
 8005200:	b292      	uxth	r2, r2
 8005202:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8005206:	b292      	uxth	r2, r2
 8005208:	9201      	str	r2, [sp, #4]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	462b      	mov	r3, r5
 800520e:	4622      	mov	r2, r4
 8005210:	f7ff faa7 	bl	8004762 <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	3b06      	subs	r3, #6
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b14      	cmp	r3, #20
 800521e:	dccc      	bgt.n	80051ba <testFilledRoundRects+0x6e>
    }
}
 8005220:	bf00      	nop
 8005222:	bf00      	nop
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bdb0      	pop	{r4, r5, r7, pc}
 800522a:	bf00      	nop
 800522c:	200063d6 	.word	0x200063d6
 8005230:	200063d8 	.word	0x200063d8

08005234 <testFillScreen>:




void testFillScreen()
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 8005238:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800523c:	f7fe fb64 	bl	8003908 <Displ_CLS>
	Displ_CLS(GREEN);
 8005240:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8005244:	f7fe fb60 	bl	8003908 <Displ_CLS>
	Displ_CLS(BLUE);
 8005248:	201f      	movs	r0, #31
 800524a:	f7fe fb5d 	bl	8003908 <Displ_CLS>
	Displ_CLS(YELLOW);
 800524e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8005252:	f7fe fb59 	bl	8003908 <Displ_CLS>
	Displ_CLS(BLACK);
 8005256:	2000      	movs	r0, #0
 8005258:	f7fe fb56 	bl	8003908 <Displ_CLS>
}
 800525c:	bf00      	nop
 800525e:	bd80      	pop	{r7, pc}

08005260 <Displ_TestAll>:





void Displ_TestAll (){
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
	testFillScreen();
 8005264:	f7ff ffe6 	bl	8005234 <testFillScreen>
	testLines(CYAN);
 8005268:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800526c:	f7ff fb5c 	bl	8004928 <testLines>
	testFastLines(RED, BLUE);
 8005270:	211f      	movs	r1, #31
 8005272:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005276:	f7ff fc59 	bl	8004b2c <testFastLines>
	testRects(GREEN);
 800527a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800527e:	f7ff fca3 	bl	8004bc8 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8005282:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8005286:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800528a:	f7ff fcf1 	bl	8004c70 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 800528e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8005292:	200a      	movs	r0, #10
 8005294:	f7ff fd5a 	bl	8004d4c <testFilledCircles>
	testCircles(10, WHITE);
 8005298:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800529c:	200a      	movs	r0, #10
 800529e:	f7ff fd93 	bl	8004dc8 <testCircles>
	testTriangles();
 80052a2:	f7ff fdd3 	bl	8004e4c <testTriangles>
	testFilledTriangles();
 80052a6:	f7ff fe35 	bl	8004f14 <testFilledTriangles>
	testRoundRects();
 80052aa:	f7ff fee1 	bl	8005070 <testRoundRects>
	testFilledRoundRects();
 80052ae:	f7ff ff4d 	bl	800514c <testFilledRoundRects>
}
 80052b2:	bf00      	nop
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80052b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052bc:	480d      	ldr	r0, [pc, #52]	; (80052f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052be:	490e      	ldr	r1, [pc, #56]	; (80052f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80052c0:	4a0e      	ldr	r2, [pc, #56]	; (80052fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80052c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052c4:	e002      	b.n	80052cc <LoopCopyDataInit>

080052c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052ca:	3304      	adds	r3, #4

080052cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052d0:	d3f9      	bcc.n	80052c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052d2:	4a0b      	ldr	r2, [pc, #44]	; (8005300 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80052d4:	4c0b      	ldr	r4, [pc, #44]	; (8005304 <LoopFillZerobss+0x26>)
  movs r3, #0
 80052d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052d8:	e001      	b.n	80052de <LoopFillZerobss>

080052da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052dc:	3204      	adds	r2, #4

080052de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052e0:	d3fb      	bcc.n	80052da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80052e2:	f7fd ff0d 	bl	8003100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052e6:	f004 fd29 	bl	8009d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052ea:	f7fc fe05 	bl	8001ef8 <main>
  bx  lr    
 80052ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80052f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80052f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052f8:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80052fc:	0800cf90 	.word	0x0800cf90
  ldr r2, =_sbss
 8005300:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8005304:	20006d34 	.word	0x20006d34

08005308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005308:	e7fe      	b.n	8005308 <ADC_IRQHandler>
	...

0800530c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005310:	4b0e      	ldr	r3, [pc, #56]	; (800534c <HAL_Init+0x40>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a0d      	ldr	r2, [pc, #52]	; (800534c <HAL_Init+0x40>)
 8005316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800531a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <HAL_Init+0x40>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a0a      	ldr	r2, [pc, #40]	; (800534c <HAL_Init+0x40>)
 8005322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005328:	4b08      	ldr	r3, [pc, #32]	; (800534c <HAL_Init+0x40>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a07      	ldr	r2, [pc, #28]	; (800534c <HAL_Init+0x40>)
 800532e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005334:	2003      	movs	r0, #3
 8005336:	f000 fd53 	bl	8005de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800533a:	2000      	movs	r0, #0
 800533c:	f000 f808 	bl	8005350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005340:	f7fd fb72 	bl	8002a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023c00 	.word	0x40023c00

08005350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005358:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <HAL_InitTick+0x54>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <HAL_InitTick+0x58>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	4619      	mov	r1, r3
 8005362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005366:	fbb3 f3f1 	udiv	r3, r3, r1
 800536a:	fbb2 f3f3 	udiv	r3, r2, r3
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fd6b 	bl	8005e4a <HAL_SYSTICK_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e00e      	b.n	800539c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b0f      	cmp	r3, #15
 8005382:	d80a      	bhi.n	800539a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005384:	2200      	movs	r2, #0
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800538c:	f000 fd33 	bl	8005df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005390:	4a06      	ldr	r2, [pc, #24]	; (80053ac <HAL_InitTick+0x5c>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	e000      	b.n	800539c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
}
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000038 	.word	0x20000038
 80053a8:	20000048 	.word	0x20000048
 80053ac:	20000044 	.word	0x20000044

080053b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <HAL_IncTick+0x20>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <HAL_IncTick+0x24>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4413      	add	r3, r2
 80053c0:	4a04      	ldr	r2, [pc, #16]	; (80053d4 <HAL_IncTick+0x24>)
 80053c2:	6013      	str	r3, [r2, #0]
}
 80053c4:	bf00      	nop
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000048 	.word	0x20000048
 80053d4:	20006be4 	.word	0x20006be4

080053d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return uwTick;
 80053dc:	4b03      	ldr	r3, [pc, #12]	; (80053ec <HAL_GetTick+0x14>)
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20006be4 	.word	0x20006be4

080053f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053f8:	f7ff ffee 	bl	80053d8 <HAL_GetTick>
 80053fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005408:	d005      	beq.n	8005416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800540a:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <HAL_Delay+0x44>)
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005416:	bf00      	nop
 8005418:	f7ff ffde 	bl	80053d8 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	429a      	cmp	r2, r3
 8005426:	d8f7      	bhi.n	8005418 <HAL_Delay+0x28>
  {
  }
}
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000048 	.word	0x20000048

08005438 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e033      	b.n	80054b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d109      	bne.n	800546a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fd fb0e 	bl	8002a78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b00      	cmp	r3, #0
 8005474:	d118      	bne.n	80054a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800547e:	f023 0302 	bic.w	r3, r3, #2
 8005482:	f043 0202 	orr.w	r2, r3, #2
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fa5a 	bl	8005944 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	f023 0303 	bic.w	r3, r3, #3
 800549e:	f043 0201 	orr.w	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40
 80054a6:	e001      	b.n	80054ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_ADC_Start_DMA+0x1e>
 80054da:	2302      	movs	r3, #2
 80054dc:	e0e9      	b.n	80056b2 <HAL_ADC_Start_DMA+0x1f2>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d018      	beq.n	8005526 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005504:	4b6d      	ldr	r3, [pc, #436]	; (80056bc <HAL_ADC_Start_DMA+0x1fc>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a6d      	ldr	r2, [pc, #436]	; (80056c0 <HAL_ADC_Start_DMA+0x200>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	0c9a      	lsrs	r2, r3, #18
 8005510:	4613      	mov	r3, r2
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	4413      	add	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005518:	e002      	b.n	8005520 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	3b01      	subs	r3, #1
 800551e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f9      	bne.n	800551a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005534:	d107      	bne.n	8005546 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005544:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b01      	cmp	r3, #1
 8005552:	f040 80a1 	bne.w	8005698 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800555e:	f023 0301 	bic.w	r3, r3, #1
 8005562:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005580:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005594:	d106      	bne.n	80055a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559a:	f023 0206 	bic.w	r2, r3, #6
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	645a      	str	r2, [r3, #68]	; 0x44
 80055a2:	e002      	b.n	80055aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055b2:	4b44      	ldr	r3, [pc, #272]	; (80056c4 <HAL_ADC_Start_DMA+0x204>)
 80055b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	4a43      	ldr	r2, [pc, #268]	; (80056c8 <HAL_ADC_Start_DMA+0x208>)
 80055bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	4a42      	ldr	r2, [pc, #264]	; (80056cc <HAL_ADC_Start_DMA+0x20c>)
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	4a41      	ldr	r2, [pc, #260]	; (80056d0 <HAL_ADC_Start_DMA+0x210>)
 80055cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80055d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80055e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	334c      	adds	r3, #76	; 0x4c
 8005602:	4619      	mov	r1, r3
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f000 fcda 	bl	8005fc0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	2b00      	cmp	r3, #0
 8005616:	d12a      	bne.n	800566e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a2d      	ldr	r2, [pc, #180]	; (80056d4 <HAL_ADC_Start_DMA+0x214>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d015      	beq.n	800564e <HAL_ADC_Start_DMA+0x18e>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a2c      	ldr	r2, [pc, #176]	; (80056d8 <HAL_ADC_Start_DMA+0x218>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d105      	bne.n	8005638 <HAL_ADC_Start_DMA+0x178>
 800562c:	4b25      	ldr	r3, [pc, #148]	; (80056c4 <HAL_ADC_Start_DMA+0x204>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a27      	ldr	r2, [pc, #156]	; (80056dc <HAL_ADC_Start_DMA+0x21c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d136      	bne.n	80056b0 <HAL_ADC_Start_DMA+0x1f0>
 8005642:	4b20      	ldr	r3, [pc, #128]	; (80056c4 <HAL_ADC_Start_DMA+0x204>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b00      	cmp	r3, #0
 800564c:	d130      	bne.n	80056b0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d129      	bne.n	80056b0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800566a:	609a      	str	r2, [r3, #8]
 800566c:	e020      	b.n	80056b0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <HAL_ADC_Start_DMA+0x214>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d11b      	bne.n	80056b0 <HAL_ADC_Start_DMA+0x1f0>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d114      	bne.n	80056b0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005694:	609a      	str	r2, [r3, #8]
 8005696:	e00b      	b.n	80056b0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	f043 0210 	orr.w	r2, r3, #16
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a8:	f043 0201 	orr.w	r2, r3, #1
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20000038 	.word	0x20000038
 80056c0:	431bde83 	.word	0x431bde83
 80056c4:	40012300 	.word	0x40012300
 80056c8:	08005b3d 	.word	0x08005b3d
 80056cc:	08005bf7 	.word	0x08005bf7
 80056d0:	08005c13 	.word	0x08005c13
 80056d4:	40012000 	.word	0x40012000
 80056d8:	40012100 	.word	0x40012100
 80056dc:	40012200 	.word	0x40012200

080056e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_ADC_ConfigChannel+0x1c>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e113      	b.n	8005924 <HAL_ADC_ConfigChannel+0x244>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b09      	cmp	r3, #9
 800570a:	d925      	bls.n	8005758 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68d9      	ldr	r1, [r3, #12]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	b29b      	uxth	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	4613      	mov	r3, r2
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	4413      	add	r3, r2
 8005720:	3b1e      	subs	r3, #30
 8005722:	2207      	movs	r2, #7
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	43da      	mvns	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	400a      	ands	r2, r1
 8005730:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68d9      	ldr	r1, [r3, #12]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	4618      	mov	r0, r3
 8005744:	4603      	mov	r3, r0
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	4403      	add	r3, r0
 800574a:	3b1e      	subs	r3, #30
 800574c:	409a      	lsls	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	60da      	str	r2, [r3, #12]
 8005756:	e022      	b.n	800579e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6919      	ldr	r1, [r3, #16]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	4613      	mov	r3, r2
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	4413      	add	r3, r2
 800576c:	2207      	movs	r2, #7
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	43da      	mvns	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	400a      	ands	r2, r1
 800577a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6919      	ldr	r1, [r3, #16]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	b29b      	uxth	r3, r3
 800578c:	4618      	mov	r0, r3
 800578e:	4603      	mov	r3, r0
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	4403      	add	r3, r0
 8005794:	409a      	lsls	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b06      	cmp	r3, #6
 80057a4:	d824      	bhi.n	80057f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	3b05      	subs	r3, #5
 80057b8:	221f      	movs	r2, #31
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	43da      	mvns	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	400a      	ands	r2, r1
 80057c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	4618      	mov	r0, r3
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	3b05      	subs	r3, #5
 80057e2:	fa00 f203 	lsl.w	r2, r0, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	635a      	str	r2, [r3, #52]	; 0x34
 80057ee:	e04c      	b.n	800588a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b0c      	cmp	r3, #12
 80057f6:	d824      	bhi.n	8005842 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	3b23      	subs	r3, #35	; 0x23
 800580a:	221f      	movs	r2, #31
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	43da      	mvns	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	400a      	ands	r2, r1
 8005818:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	4618      	mov	r0, r3
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	3b23      	subs	r3, #35	; 0x23
 8005834:	fa00 f203 	lsl.w	r2, r0, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
 8005840:	e023      	b.n	800588a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	3b41      	subs	r3, #65	; 0x41
 8005854:	221f      	movs	r2, #31
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43da      	mvns	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	400a      	ands	r2, r1
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	4618      	mov	r0, r3
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	3b41      	subs	r3, #65	; 0x41
 800587e:	fa00 f203 	lsl.w	r2, r0, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800588a:	4b29      	ldr	r3, [pc, #164]	; (8005930 <HAL_ADC_ConfigChannel+0x250>)
 800588c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a28      	ldr	r2, [pc, #160]	; (8005934 <HAL_ADC_ConfigChannel+0x254>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d10f      	bne.n	80058b8 <HAL_ADC_ConfigChannel+0x1d8>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b12      	cmp	r3, #18
 800589e:	d10b      	bne.n	80058b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <HAL_ADC_ConfigChannel+0x254>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d12b      	bne.n	800591a <HAL_ADC_ConfigChannel+0x23a>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <HAL_ADC_ConfigChannel+0x258>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <HAL_ADC_ConfigChannel+0x1f4>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b11      	cmp	r3, #17
 80058d2:	d122      	bne.n	800591a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a11      	ldr	r2, [pc, #68]	; (8005938 <HAL_ADC_ConfigChannel+0x258>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d111      	bne.n	800591a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80058f6:	4b11      	ldr	r3, [pc, #68]	; (800593c <HAL_ADC_ConfigChannel+0x25c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a11      	ldr	r2, [pc, #68]	; (8005940 <HAL_ADC_ConfigChannel+0x260>)
 80058fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005900:	0c9a      	lsrs	r2, r3, #18
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800590c:	e002      	b.n	8005914 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	3b01      	subs	r3, #1
 8005912:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1f9      	bne.n	800590e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	40012300 	.word	0x40012300
 8005934:	40012000 	.word	0x40012000
 8005938:	10000012 	.word	0x10000012
 800593c:	20000038 	.word	0x20000038
 8005940:	431bde83 	.word	0x431bde83

08005944 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800594c:	4b79      	ldr	r3, [pc, #484]	; (8005b34 <ADC_Init+0x1f0>)
 800594e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	431a      	orrs	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005978:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6859      	ldr	r1, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	021a      	lsls	r2, r3, #8
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800599c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6859      	ldr	r1, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6899      	ldr	r1, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	4a58      	ldr	r2, [pc, #352]	; (8005b38 <ADC_Init+0x1f4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d022      	beq.n	8005a22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6899      	ldr	r1, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6899      	ldr	r1, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]
 8005a20:	e00f      	b.n	8005a42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0202 	bic.w	r2, r2, #2
 8005a50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6899      	ldr	r1, [r3, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	7e1b      	ldrb	r3, [r3, #24]
 8005a5c:	005a      	lsls	r2, r3, #1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01b      	beq.n	8005aa8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005a8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6859      	ldr	r1, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	035a      	lsls	r2, r3, #13
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	e007      	b.n	8005ab8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ab6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	051a      	lsls	r2, r3, #20
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005aec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6899      	ldr	r1, [r3, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005afa:	025a      	lsls	r2, r3, #9
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6899      	ldr	r1, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	029a      	lsls	r2, r3, #10
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	609a      	str	r2, [r3, #8]
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40012300 	.word	0x40012300
 8005b38:	0f000001 	.word	0x0f000001

08005b3c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b48:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d13c      	bne.n	8005bd0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d12b      	bne.n	8005bc8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d127      	bne.n	8005bc8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d006      	beq.n	8005b94 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d119      	bne.n	8005bc8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0220 	bic.w	r2, r2, #32
 8005ba2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	f043 0201 	orr.w	r2, r3, #1
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7fc fe47 	bl	800285c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005bce:	e00e      	b.n	8005bee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f7fc fe7d 	bl	80028dc <HAL_ADC_ErrorCallback>
}
 8005be2:	e004      	b.n	8005bee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7fc fe49 	bl	800289c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c0a:	bf00      	nop
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2240      	movs	r2, #64	; 0x40
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2a:	f043 0204 	orr.w	r2, r3, #4
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7fc fe52 	bl	80028dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c50:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <__NVIC_SetPriorityGrouping+0x44>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c72:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <__NVIC_SetPriorityGrouping+0x44>)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	60d3      	str	r3, [r2, #12]
}
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	e000ed00 	.word	0xe000ed00

08005c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c8c:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	0a1b      	lsrs	r3, r3, #8
 8005c92:	f003 0307 	and.w	r3, r3, #7
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	e000ed00 	.word	0xe000ed00

08005ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	db0b      	blt.n	8005cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	f003 021f 	and.w	r2, r3, #31
 8005cbc:	4907      	ldr	r1, [pc, #28]	; (8005cdc <__NVIC_EnableIRQ+0x38>)
 8005cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8005cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	e000e100 	.word	0xe000e100

08005ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	6039      	str	r1, [r7, #0]
 8005cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	db0a      	blt.n	8005d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	490c      	ldr	r1, [pc, #48]	; (8005d2c <__NVIC_SetPriority+0x4c>)
 8005cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfe:	0112      	lsls	r2, r2, #4
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	440b      	add	r3, r1
 8005d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d08:	e00a      	b.n	8005d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	4908      	ldr	r1, [pc, #32]	; (8005d30 <__NVIC_SetPriority+0x50>)
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	3b04      	subs	r3, #4
 8005d18:	0112      	lsls	r2, r2, #4
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	761a      	strb	r2, [r3, #24]
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	e000e100 	.word	0xe000e100
 8005d30:	e000ed00 	.word	0xe000ed00

08005d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f1c3 0307 	rsb	r3, r3, #7
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	bf28      	it	cs
 8005d52:	2304      	movcs	r3, #4
 8005d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d902      	bls.n	8005d64 <NVIC_EncodePriority+0x30>
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	3b03      	subs	r3, #3
 8005d62:	e000      	b.n	8005d66 <NVIC_EncodePriority+0x32>
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43da      	mvns	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	401a      	ands	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	fa01 f303 	lsl.w	r3, r1, r3
 8005d86:	43d9      	mvns	r1, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d8c:	4313      	orrs	r3, r2
         );
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3724      	adds	r7, #36	; 0x24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dac:	d301      	bcc.n	8005db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dae:	2301      	movs	r3, #1
 8005db0:	e00f      	b.n	8005dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005db2:	4a0a      	ldr	r2, [pc, #40]	; (8005ddc <SysTick_Config+0x40>)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dba:	210f      	movs	r1, #15
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc0:	f7ff ff8e 	bl	8005ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <SysTick_Config+0x40>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dca:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <SysTick_Config+0x40>)
 8005dcc:	2207      	movs	r2, #7
 8005dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	e000e010 	.word	0xe000e010

08005de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ff29 	bl	8005c40 <__NVIC_SetPriorityGrouping>
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b086      	sub	sp, #24
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	607a      	str	r2, [r7, #4]
 8005e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e08:	f7ff ff3e 	bl	8005c88 <__NVIC_GetPriorityGrouping>
 8005e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	6978      	ldr	r0, [r7, #20]
 8005e14:	f7ff ff8e 	bl	8005d34 <NVIC_EncodePriority>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1e:	4611      	mov	r1, r2
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff ff5d 	bl	8005ce0 <__NVIC_SetPriority>
}
 8005e26:	bf00      	nop
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	4603      	mov	r3, r0
 8005e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff ff31 	bl	8005ca4 <__NVIC_EnableIRQ>
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff ffa2 	bl	8005d9c <SysTick_Config>
 8005e58:	4603      	mov	r3, r0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005e70:	f7ff fab2 	bl	80053d8 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e099      	b.n	8005fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ea0:	e00f      	b.n	8005ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ea2:	f7ff fa99 	bl	80053d8 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b05      	cmp	r3, #5
 8005eae:	d908      	bls.n	8005ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2203      	movs	r2, #3
 8005eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e078      	b.n	8005fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e8      	bne.n	8005ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4b38      	ldr	r3, [pc, #224]	; (8005fbc <HAL_DMA_Init+0x158>)
 8005edc:	4013      	ands	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d107      	bne.n	8005f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	4313      	orrs	r3, r2
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f023 0307 	bic.w	r3, r3, #7
 8005f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d117      	bne.n	8005f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00e      	beq.n	8005f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fb01 	bl	8006570 <DMA_CheckFifoParam>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d008      	beq.n	8005f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2240      	movs	r2, #64	; 0x40
 8005f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005f82:	2301      	movs	r3, #1
 8005f84:	e016      	b.n	8005fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fab8 	bl	8006504 <DMA_CalcBaseAndBitshift>
 8005f94:	4603      	mov	r3, r0
 8005f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9c:	223f      	movs	r2, #63	; 0x3f
 8005f9e:	409a      	lsls	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	f010803f 	.word	0xf010803f

08005fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_DMA_Start_IT+0x26>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e040      	b.n	8006068 <HAL_DMA_Start_IT+0xa8>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d12f      	bne.n	800605a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 fa4a 	bl	80064a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006018:	223f      	movs	r2, #63	; 0x3f
 800601a:	409a      	lsls	r2, r3
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0216 	orr.w	r2, r2, #22
 800602e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0208 	orr.w	r2, r2, #8
 8006046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	e005      	b.n	8006066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006062:	2302      	movs	r3, #2
 8006064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006066:	7dfb      	ldrb	r3, [r7, #23]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800607e:	f7ff f9ab 	bl	80053d8 <HAL_GetTick>
 8006082:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d008      	beq.n	80060a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2280      	movs	r2, #128	; 0x80
 8006094:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e052      	b.n	8006148 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0216 	bic.w	r2, r2, #22
 80060b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	695a      	ldr	r2, [r3, #20]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d103      	bne.n	80060d2 <HAL_DMA_Abort+0x62>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d007      	beq.n	80060e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0208 	bic.w	r2, r2, #8
 80060e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0201 	bic.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060f2:	e013      	b.n	800611c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060f4:	f7ff f970 	bl	80053d8 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b05      	cmp	r3, #5
 8006100:	d90c      	bls.n	800611c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2220      	movs	r2, #32
 8006106:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2203      	movs	r2, #3
 800610c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e015      	b.n	8006148 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e4      	bne.n	80060f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800612e:	223f      	movs	r2, #63	; 0x3f
 8006130:	409a      	lsls	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d004      	beq.n	800616e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2280      	movs	r2, #128	; 0x80
 8006168:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e00c      	b.n	8006188 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2205      	movs	r2, #5
 8006172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0201 	bic.w	r2, r2, #1
 8006184:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061a0:	4b8e      	ldr	r3, [pc, #568]	; (80063dc <HAL_DMA_IRQHandler+0x248>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a8e      	ldr	r2, [pc, #568]	; (80063e0 <HAL_DMA_IRQHandler+0x24c>)
 80061a6:	fba2 2303 	umull	r2, r3, r2, r3
 80061aa:	0a9b      	lsrs	r3, r3, #10
 80061ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061be:	2208      	movs	r2, #8
 80061c0:	409a      	lsls	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4013      	ands	r3, r2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d01a      	beq.n	8006200 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d013      	beq.n	8006200 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0204 	bic.w	r2, r2, #4
 80061e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ec:	2208      	movs	r2, #8
 80061ee:	409a      	lsls	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f8:	f043 0201 	orr.w	r2, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006204:	2201      	movs	r2, #1
 8006206:	409a      	lsls	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4013      	ands	r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d012      	beq.n	8006236 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00b      	beq.n	8006236 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006222:	2201      	movs	r2, #1
 8006224:	409a      	lsls	r2, r3
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622e:	f043 0202 	orr.w	r2, r3, #2
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800623a:	2204      	movs	r2, #4
 800623c:	409a      	lsls	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4013      	ands	r3, r2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d012      	beq.n	800626c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006258:	2204      	movs	r2, #4
 800625a:	409a      	lsls	r2, r3
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006264:	f043 0204 	orr.w	r2, r3, #4
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006270:	2210      	movs	r2, #16
 8006272:	409a      	lsls	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4013      	ands	r3, r2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d043      	beq.n	8006304 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d03c      	beq.n	8006304 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628e:	2210      	movs	r2, #16
 8006290:	409a      	lsls	r2, r3
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d018      	beq.n	80062d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d108      	bne.n	80062c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d024      	beq.n	8006304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
 80062c2:	e01f      	b.n	8006304 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01b      	beq.n	8006304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	4798      	blx	r3
 80062d4:	e016      	b.n	8006304 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d107      	bne.n	80062f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0208 	bic.w	r2, r2, #8
 80062f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006308:	2220      	movs	r2, #32
 800630a:	409a      	lsls	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4013      	ands	r3, r2
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 808f 	beq.w	8006434 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8087 	beq.w	8006434 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632a:	2220      	movs	r2, #32
 800632c:	409a      	lsls	r2, r3
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b05      	cmp	r3, #5
 800633c:	d136      	bne.n	80063ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0216 	bic.w	r2, r2, #22
 800634c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695a      	ldr	r2, [r3, #20]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800635c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d103      	bne.n	800636e <HAL_DMA_IRQHandler+0x1da>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636a:	2b00      	cmp	r3, #0
 800636c:	d007      	beq.n	800637e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0208 	bic.w	r2, r2, #8
 800637c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006382:	223f      	movs	r2, #63	; 0x3f
 8006384:	409a      	lsls	r2, r3
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d07e      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
        }
        return;
 80063aa:	e079      	b.n	80064a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01d      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10d      	bne.n	80063e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d031      	beq.n	8006434 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
 80063d8:	e02c      	b.n	8006434 <HAL_DMA_IRQHandler+0x2a0>
 80063da:	bf00      	nop
 80063dc:	20000038 	.word	0x20000038
 80063e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d023      	beq.n	8006434 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4798      	blx	r3
 80063f4:	e01e      	b.n	8006434 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10f      	bne.n	8006424 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0210 	bic.w	r2, r2, #16
 8006412:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006438:	2b00      	cmp	r3, #0
 800643a:	d032      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d022      	beq.n	800648e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2205      	movs	r2, #5
 800644c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0201 	bic.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	3301      	adds	r3, #1
 8006464:	60bb      	str	r3, [r7, #8]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	429a      	cmp	r2, r3
 800646a:	d307      	bcc.n	800647c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f2      	bne.n	8006460 <HAL_DMA_IRQHandler+0x2cc>
 800647a:	e000      	b.n	800647e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800647c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
 800649e:	e000      	b.n	80064a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80064a0:	bf00      	nop
    }
  }
}
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80064c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	d108      	bne.n	80064e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80064e6:	e007      	b.n	80064f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	60da      	str	r2, [r3, #12]
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	3b10      	subs	r3, #16
 8006514:	4a14      	ldr	r2, [pc, #80]	; (8006568 <DMA_CalcBaseAndBitshift+0x64>)
 8006516:	fba2 2303 	umull	r2, r3, r2, r3
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800651e:	4a13      	ldr	r2, [pc, #76]	; (800656c <DMA_CalcBaseAndBitshift+0x68>)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b03      	cmp	r3, #3
 8006530:	d909      	bls.n	8006546 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800653a:	f023 0303 	bic.w	r3, r3, #3
 800653e:	1d1a      	adds	r2, r3, #4
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	659a      	str	r2, [r3, #88]	; 0x58
 8006544:	e007      	b.n	8006556 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	aaaaaaab 	.word	0xaaaaaaab
 800656c:	0800cf44 	.word	0x0800cf44

08006570 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006578:	2300      	movs	r3, #0
 800657a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006580:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d11f      	bne.n	80065ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2b03      	cmp	r3, #3
 800658e:	d856      	bhi.n	800663e <DMA_CheckFifoParam+0xce>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <DMA_CheckFifoParam+0x28>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065a9 	.word	0x080065a9
 800659c:	080065bb 	.word	0x080065bb
 80065a0:	080065a9 	.word	0x080065a9
 80065a4:	0800663f 	.word	0x0800663f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d046      	beq.n	8006642 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065b8:	e043      	b.n	8006642 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065c2:	d140      	bne.n	8006646 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065c8:	e03d      	b.n	8006646 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d2:	d121      	bne.n	8006618 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d837      	bhi.n	800664a <DMA_CheckFifoParam+0xda>
 80065da:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <DMA_CheckFifoParam+0x70>)
 80065dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e0:	080065f1 	.word	0x080065f1
 80065e4:	080065f7 	.word	0x080065f7
 80065e8:	080065f1 	.word	0x080065f1
 80065ec:	08006609 	.word	0x08006609
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
      break;
 80065f4:	e030      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d025      	beq.n	800664e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006606:	e022      	b.n	800664e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006610:	d11f      	bne.n	8006652 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006616:	e01c      	b.n	8006652 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d903      	bls.n	8006626 <DMA_CheckFifoParam+0xb6>
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d003      	beq.n	800662c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006624:	e018      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	73fb      	strb	r3, [r7, #15]
      break;
 800662a:	e015      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00e      	beq.n	8006656 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	73fb      	strb	r3, [r7, #15]
      break;
 800663c:	e00b      	b.n	8006656 <DMA_CheckFifoParam+0xe6>
      break;
 800663e:	bf00      	nop
 8006640:	e00a      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      break;
 8006642:	bf00      	nop
 8006644:	e008      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      break;
 8006646:	bf00      	nop
 8006648:	e006      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      break;
 800664a:	bf00      	nop
 800664c:	e004      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      break;
 800664e:	bf00      	nop
 8006650:	e002      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      break;   
 8006652:	bf00      	nop
 8006654:	e000      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      break;
 8006656:	bf00      	nop
    }
  } 
  
  return status; 
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop

08006668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006668:	b480      	push	{r7}
 800666a:	b089      	sub	sp, #36	; 0x24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006676:	2300      	movs	r3, #0
 8006678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800667a:	2300      	movs	r3, #0
 800667c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800667e:	2300      	movs	r3, #0
 8006680:	61fb      	str	r3, [r7, #28]
 8006682:	e165      	b.n	8006950 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006684:	2201      	movs	r2, #1
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4013      	ands	r3, r2
 8006696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	429a      	cmp	r2, r3
 800669e:	f040 8154 	bne.w	800694a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d005      	beq.n	80066ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d130      	bne.n	800671c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	2203      	movs	r2, #3
 80066c6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ca:	43db      	mvns	r3, r3
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4013      	ands	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	fa02 f303 	lsl.w	r3, r2, r3
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066f0:	2201      	movs	r2, #1
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	43db      	mvns	r3, r3
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	4013      	ands	r3, r2
 80066fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	091b      	lsrs	r3, r3, #4
 8006706:	f003 0201 	and.w	r2, r3, #1
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	fa02 f303 	lsl.w	r3, r2, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	4313      	orrs	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f003 0303 	and.w	r3, r3, #3
 8006724:	2b03      	cmp	r3, #3
 8006726:	d017      	beq.n	8006758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	2203      	movs	r2, #3
 8006734:	fa02 f303 	lsl.w	r3, r2, r3
 8006738:	43db      	mvns	r3, r3
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	4013      	ands	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	4313      	orrs	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f003 0303 	and.w	r3, r3, #3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d123      	bne.n	80067ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	08da      	lsrs	r2, r3, #3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3208      	adds	r2, #8
 800676c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	f003 0307 	and.w	r3, r3, #7
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	220f      	movs	r2, #15
 800677c:	fa02 f303 	lsl.w	r3, r2, r3
 8006780:	43db      	mvns	r3, r3
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	4013      	ands	r3, r2
 8006786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	691a      	ldr	r2, [r3, #16]
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	4313      	orrs	r3, r2
 800679c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	08da      	lsrs	r2, r3, #3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3208      	adds	r2, #8
 80067a6:	69b9      	ldr	r1, [r7, #24]
 80067a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	2203      	movs	r2, #3
 80067b8:	fa02 f303 	lsl.w	r3, r2, r3
 80067bc:	43db      	mvns	r3, r3
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	4013      	ands	r3, r2
 80067c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f003 0203 	and.w	r2, r3, #3
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	fa02 f303 	lsl.w	r3, r2, r3
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 80ae 	beq.w	800694a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	4b5d      	ldr	r3, [pc, #372]	; (8006968 <HAL_GPIO_Init+0x300>)
 80067f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f6:	4a5c      	ldr	r2, [pc, #368]	; (8006968 <HAL_GPIO_Init+0x300>)
 80067f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067fc:	6453      	str	r3, [r2, #68]	; 0x44
 80067fe:	4b5a      	ldr	r3, [pc, #360]	; (8006968 <HAL_GPIO_Init+0x300>)
 8006800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800680a:	4a58      	ldr	r2, [pc, #352]	; (800696c <HAL_GPIO_Init+0x304>)
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	089b      	lsrs	r3, r3, #2
 8006810:	3302      	adds	r3, #2
 8006812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	220f      	movs	r2, #15
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	43db      	mvns	r3, r3
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	4013      	ands	r3, r2
 800682c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a4f      	ldr	r2, [pc, #316]	; (8006970 <HAL_GPIO_Init+0x308>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d025      	beq.n	8006882 <HAL_GPIO_Init+0x21a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a4e      	ldr	r2, [pc, #312]	; (8006974 <HAL_GPIO_Init+0x30c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d01f      	beq.n	800687e <HAL_GPIO_Init+0x216>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a4d      	ldr	r2, [pc, #308]	; (8006978 <HAL_GPIO_Init+0x310>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d019      	beq.n	800687a <HAL_GPIO_Init+0x212>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a4c      	ldr	r2, [pc, #304]	; (800697c <HAL_GPIO_Init+0x314>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d013      	beq.n	8006876 <HAL_GPIO_Init+0x20e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a4b      	ldr	r2, [pc, #300]	; (8006980 <HAL_GPIO_Init+0x318>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00d      	beq.n	8006872 <HAL_GPIO_Init+0x20a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a4a      	ldr	r2, [pc, #296]	; (8006984 <HAL_GPIO_Init+0x31c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d007      	beq.n	800686e <HAL_GPIO_Init+0x206>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a49      	ldr	r2, [pc, #292]	; (8006988 <HAL_GPIO_Init+0x320>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d101      	bne.n	800686a <HAL_GPIO_Init+0x202>
 8006866:	2306      	movs	r3, #6
 8006868:	e00c      	b.n	8006884 <HAL_GPIO_Init+0x21c>
 800686a:	2307      	movs	r3, #7
 800686c:	e00a      	b.n	8006884 <HAL_GPIO_Init+0x21c>
 800686e:	2305      	movs	r3, #5
 8006870:	e008      	b.n	8006884 <HAL_GPIO_Init+0x21c>
 8006872:	2304      	movs	r3, #4
 8006874:	e006      	b.n	8006884 <HAL_GPIO_Init+0x21c>
 8006876:	2303      	movs	r3, #3
 8006878:	e004      	b.n	8006884 <HAL_GPIO_Init+0x21c>
 800687a:	2302      	movs	r3, #2
 800687c:	e002      	b.n	8006884 <HAL_GPIO_Init+0x21c>
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <HAL_GPIO_Init+0x21c>
 8006882:	2300      	movs	r3, #0
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	f002 0203 	and.w	r2, r2, #3
 800688a:	0092      	lsls	r2, r2, #2
 800688c:	4093      	lsls	r3, r2
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	4313      	orrs	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006894:	4935      	ldr	r1, [pc, #212]	; (800696c <HAL_GPIO_Init+0x304>)
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	089b      	lsrs	r3, r3, #2
 800689a:	3302      	adds	r3, #2
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068a2:	4b3a      	ldr	r3, [pc, #232]	; (800698c <HAL_GPIO_Init+0x324>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	43db      	mvns	r3, r3
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	4013      	ands	r3, r2
 80068b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068c6:	4a31      	ldr	r2, [pc, #196]	; (800698c <HAL_GPIO_Init+0x324>)
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068cc:	4b2f      	ldr	r3, [pc, #188]	; (800698c <HAL_GPIO_Init+0x324>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	43db      	mvns	r3, r3
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	4013      	ands	r3, r2
 80068da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068f0:	4a26      	ldr	r2, [pc, #152]	; (800698c <HAL_GPIO_Init+0x324>)
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068f6:	4b25      	ldr	r3, [pc, #148]	; (800698c <HAL_GPIO_Init+0x324>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	43db      	mvns	r3, r3
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	4013      	ands	r3, r2
 8006904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800691a:	4a1c      	ldr	r2, [pc, #112]	; (800698c <HAL_GPIO_Init+0x324>)
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006920:	4b1a      	ldr	r3, [pc, #104]	; (800698c <HAL_GPIO_Init+0x324>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	43db      	mvns	r3, r3
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	4013      	ands	r3, r2
 800692e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006944:	4a11      	ldr	r2, [pc, #68]	; (800698c <HAL_GPIO_Init+0x324>)
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	3301      	adds	r3, #1
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	2b0f      	cmp	r3, #15
 8006954:	f67f ae96 	bls.w	8006684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	3724      	adds	r7, #36	; 0x24
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40023800 	.word	0x40023800
 800696c:	40013800 	.word	0x40013800
 8006970:	40020000 	.word	0x40020000
 8006974:	40020400 	.word	0x40020400
 8006978:	40020800 	.word	0x40020800
 800697c:	40020c00 	.word	0x40020c00
 8006980:	40021000 	.word	0x40021000
 8006984:	40021400 	.word	0x40021400
 8006988:	40021800 	.word	0x40021800
 800698c:	40013c00 	.word	0x40013c00

08006990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	887b      	ldrh	r3, [r7, #2]
 80069a2:	4013      	ands	r3, r2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069a8:	2301      	movs	r3, #1
 80069aa:	73fb      	strb	r3, [r7, #15]
 80069ac:	e001      	b.n	80069b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069ae:	2300      	movs	r3, #0
 80069b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	807b      	strh	r3, [r7, #2]
 80069cc:	4613      	mov	r3, r2
 80069ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069d0:	787b      	ldrb	r3, [r7, #1]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069d6:	887a      	ldrh	r2, [r7, #2]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069dc:	e003      	b.n	80069e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069de:	887b      	ldrh	r3, [r7, #2]
 80069e0:	041a      	lsls	r2, r3, #16
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	619a      	str	r2, [r3, #24]
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b085      	sub	sp, #20
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a04:	887a      	ldrh	r2, [r7, #2]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	041a      	lsls	r2, r3, #16
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	43d9      	mvns	r1, r3
 8006a10:	887b      	ldrh	r3, [r7, #2]
 8006a12:	400b      	ands	r3, r1
 8006a14:	431a      	orrs	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	619a      	str	r2, [r3, #24]
}
 8006a1a:	bf00      	nop
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
	...

08006a28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	4603      	mov	r3, r0
 8006a30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006a32:	4b08      	ldr	r3, [pc, #32]	; (8006a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	88fb      	ldrh	r3, [r7, #6]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d006      	beq.n	8006a4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a3e:	4a05      	ldr	r2, [pc, #20]	; (8006a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a40:	88fb      	ldrh	r3, [r7, #6]
 8006a42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 f806 	bl	8006a58 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40013c00 	.word	0x40013c00

08006a58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4603      	mov	r3, r0
 8006a60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
	...

08006a70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	603b      	str	r3, [r7, #0]
 8006a7e:	4b20      	ldr	r3, [pc, #128]	; (8006b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	4a1f      	ldr	r2, [pc, #124]	; (8006b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8006a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a88:	6413      	str	r3, [r2, #64]	; 0x40
 8006a8a:	4b1d      	ldr	r3, [pc, #116]	; (8006b00 <HAL_PWREx_EnableOverDrive+0x90>)
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006a96:	4b1b      	ldr	r3, [pc, #108]	; (8006b04 <HAL_PWREx_EnableOverDrive+0x94>)
 8006a98:	2201      	movs	r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a9c:	f7fe fc9c 	bl	80053d8 <HAL_GetTick>
 8006aa0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006aa2:	e009      	b.n	8006ab8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006aa4:	f7fe fc98 	bl	80053d8 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ab2:	d901      	bls.n	8006ab8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e01f      	b.n	8006af8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ab8:	4b13      	ldr	r3, [pc, #76]	; (8006b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac4:	d1ee      	bne.n	8006aa4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006ac6:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ac8:	2201      	movs	r2, #1
 8006aca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006acc:	f7fe fc84 	bl	80053d8 <HAL_GetTick>
 8006ad0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006ad2:	e009      	b.n	8006ae8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006ad4:	f7fe fc80 	bl	80053d8 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ae2:	d901      	bls.n	8006ae8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e007      	b.n	8006af8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006ae8:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006af4:	d1ee      	bne.n	8006ad4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40023800 	.word	0x40023800
 8006b04:	420e0040 	.word	0x420e0040
 8006b08:	40007000 	.word	0x40007000
 8006b0c:	420e0044 	.word	0x420e0044

08006b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e0cc      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b24:	4b68      	ldr	r3, [pc, #416]	; (8006cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d90c      	bls.n	8006b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b32:	4b65      	ldr	r3, [pc, #404]	; (8006cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3a:	4b63      	ldr	r3, [pc, #396]	; (8006cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e0b8      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d020      	beq.n	8006b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b64:	4b59      	ldr	r3, [pc, #356]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	4a58      	ldr	r2, [pc, #352]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b7c:	4b53      	ldr	r3, [pc, #332]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	4a52      	ldr	r2, [pc, #328]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b88:	4b50      	ldr	r3, [pc, #320]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	494d      	ldr	r1, [pc, #308]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d044      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d107      	bne.n	8006bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bae:	4b47      	ldr	r3, [pc, #284]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d119      	bne.n	8006bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e07f      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d003      	beq.n	8006bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d107      	bne.n	8006bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bce:	4b3f      	ldr	r3, [pc, #252]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d109      	bne.n	8006bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e06f      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bde:	4b3b      	ldr	r3, [pc, #236]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e067      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bee:	4b37      	ldr	r3, [pc, #220]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f023 0203 	bic.w	r2, r3, #3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4934      	ldr	r1, [pc, #208]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c00:	f7fe fbea 	bl	80053d8 <HAL_GetTick>
 8006c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c06:	e00a      	b.n	8006c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c08:	f7fe fbe6 	bl	80053d8 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e04f      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c1e:	4b2b      	ldr	r3, [pc, #172]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 020c 	and.w	r2, r3, #12
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d1eb      	bne.n	8006c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c30:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 030f 	and.w	r3, r3, #15
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d20c      	bcs.n	8006c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c3e:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c46:	4b20      	ldr	r3, [pc, #128]	; (8006cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d001      	beq.n	8006c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e032      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d008      	beq.n	8006c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c64:	4b19      	ldr	r3, [pc, #100]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	4916      	ldr	r1, [pc, #88]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c82:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	490e      	ldr	r1, [pc, #56]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c96:	f000 f855 	bl	8006d44 <HAL_RCC_GetSysClockFreq>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ccc <HAL_RCC_ClockConfig+0x1bc>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	091b      	lsrs	r3, r3, #4
 8006ca2:	f003 030f 	and.w	r3, r3, #15
 8006ca6:	490a      	ldr	r1, [pc, #40]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8006ca8:	5ccb      	ldrb	r3, [r1, r3]
 8006caa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cae:	4a09      	ldr	r2, [pc, #36]	; (8006cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cb2:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe fb4a 	bl	8005350 <HAL_InitTick>

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	40023c00 	.word	0x40023c00
 8006ccc:	40023800 	.word	0x40023800
 8006cd0:	0800cf2c 	.word	0x0800cf2c
 8006cd4:	20000038 	.word	0x20000038
 8006cd8:	20000044 	.word	0x20000044

08006cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ce0:	4b03      	ldr	r3, [pc, #12]	; (8006cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000038 	.word	0x20000038

08006cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006cf8:	f7ff fff0 	bl	8006cdc <HAL_RCC_GetHCLKFreq>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	0a9b      	lsrs	r3, r3, #10
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	4903      	ldr	r1, [pc, #12]	; (8006d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d0a:	5ccb      	ldrb	r3, [r1, r3]
 8006d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	40023800 	.word	0x40023800
 8006d18:	0800cf3c 	.word	0x0800cf3c

08006d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d20:	f7ff ffdc 	bl	8006cdc <HAL_RCC_GetHCLKFreq>
 8006d24:	4602      	mov	r2, r0
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	0b5b      	lsrs	r3, r3, #13
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	4903      	ldr	r1, [pc, #12]	; (8006d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d32:	5ccb      	ldrb	r3, [r1, r3]
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	40023800 	.word	0x40023800
 8006d40:	0800cf3c 	.word	0x0800cf3c

08006d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d48:	b0ae      	sub	sp, #184	; 0xb8
 8006d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d6a:	4bcb      	ldr	r3, [pc, #812]	; (8007098 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 030c 	and.w	r3, r3, #12
 8006d72:	2b0c      	cmp	r3, #12
 8006d74:	f200 8206 	bhi.w	8007184 <HAL_RCC_GetSysClockFreq+0x440>
 8006d78:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7e:	bf00      	nop
 8006d80:	08006db5 	.word	0x08006db5
 8006d84:	08007185 	.word	0x08007185
 8006d88:	08007185 	.word	0x08007185
 8006d8c:	08007185 	.word	0x08007185
 8006d90:	08006dbd 	.word	0x08006dbd
 8006d94:	08007185 	.word	0x08007185
 8006d98:	08007185 	.word	0x08007185
 8006d9c:	08007185 	.word	0x08007185
 8006da0:	08006dc5 	.word	0x08006dc5
 8006da4:	08007185 	.word	0x08007185
 8006da8:	08007185 	.word	0x08007185
 8006dac:	08007185 	.word	0x08007185
 8006db0:	08006fb5 	.word	0x08006fb5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006db4:	4bb9      	ldr	r3, [pc, #740]	; (800709c <HAL_RCC_GetSysClockFreq+0x358>)
 8006db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006dba:	e1e7      	b.n	800718c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dbc:	4bb8      	ldr	r3, [pc, #736]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006dc2:	e1e3      	b.n	800718c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dc4:	4bb4      	ldr	r3, [pc, #720]	; (8007098 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dd0:	4bb1      	ldr	r3, [pc, #708]	; (8007098 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d071      	beq.n	8006ec0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ddc:	4bae      	ldr	r3, [pc, #696]	; (8007098 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	099b      	lsrs	r3, r3, #6
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006de8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e02:	4622      	mov	r2, r4
 8006e04:	462b      	mov	r3, r5
 8006e06:	f04f 0000 	mov.w	r0, #0
 8006e0a:	f04f 0100 	mov.w	r1, #0
 8006e0e:	0159      	lsls	r1, r3, #5
 8006e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e14:	0150      	lsls	r0, r2, #5
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	1a51      	subs	r1, r2, r1
 8006e1e:	6439      	str	r1, [r7, #64]	; 0x40
 8006e20:	4629      	mov	r1, r5
 8006e22:	eb63 0301 	sbc.w	r3, r3, r1
 8006e26:	647b      	str	r3, [r7, #68]	; 0x44
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	f04f 0300 	mov.w	r3, #0
 8006e30:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006e34:	4649      	mov	r1, r9
 8006e36:	018b      	lsls	r3, r1, #6
 8006e38:	4641      	mov	r1, r8
 8006e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e3e:	4641      	mov	r1, r8
 8006e40:	018a      	lsls	r2, r1, #6
 8006e42:	4641      	mov	r1, r8
 8006e44:	1a51      	subs	r1, r2, r1
 8006e46:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e48:	4649      	mov	r1, r9
 8006e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e50:	f04f 0200 	mov.w	r2, #0
 8006e54:	f04f 0300 	mov.w	r3, #0
 8006e58:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	00cb      	lsls	r3, r1, #3
 8006e60:	4641      	mov	r1, r8
 8006e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e66:	4641      	mov	r1, r8
 8006e68:	00ca      	lsls	r2, r1, #3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4622      	mov	r2, r4
 8006e72:	189b      	adds	r3, r3, r2
 8006e74:	633b      	str	r3, [r7, #48]	; 0x30
 8006e76:	462b      	mov	r3, r5
 8006e78:	460a      	mov	r2, r1
 8006e7a:	eb42 0303 	adc.w	r3, r2, r3
 8006e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	024b      	lsls	r3, r1, #9
 8006e90:	4621      	mov	r1, r4
 8006e92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e96:	4621      	mov	r1, r4
 8006e98:	024a      	lsls	r2, r1, #9
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ea8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006eac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006eb0:	f7f9 feba 	bl	8000c28 <__aeabi_uldivmod>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4613      	mov	r3, r2
 8006eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ebe:	e067      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ec0:	4b75      	ldr	r3, [pc, #468]	; (8007098 <HAL_RCC_GetSysClockFreq+0x354>)
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	099b      	lsrs	r3, r3, #6
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ecc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eda:	2300      	movs	r3, #0
 8006edc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ede:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	462b      	mov	r3, r5
 8006ee6:	f04f 0000 	mov.w	r0, #0
 8006eea:	f04f 0100 	mov.w	r1, #0
 8006eee:	0159      	lsls	r1, r3, #5
 8006ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ef4:	0150      	lsls	r0, r2, #5
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4621      	mov	r1, r4
 8006efc:	1a51      	subs	r1, r2, r1
 8006efe:	62b9      	str	r1, [r7, #40]	; 0x28
 8006f00:	4629      	mov	r1, r5
 8006f02:	eb63 0301 	sbc.w	r3, r3, r1
 8006f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006f14:	4649      	mov	r1, r9
 8006f16:	018b      	lsls	r3, r1, #6
 8006f18:	4641      	mov	r1, r8
 8006f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f1e:	4641      	mov	r1, r8
 8006f20:	018a      	lsls	r2, r1, #6
 8006f22:	4641      	mov	r1, r8
 8006f24:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f28:	4649      	mov	r1, r9
 8006f2a:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f42:	4692      	mov	sl, r2
 8006f44:	469b      	mov	fp, r3
 8006f46:	4623      	mov	r3, r4
 8006f48:	eb1a 0303 	adds.w	r3, sl, r3
 8006f4c:	623b      	str	r3, [r7, #32]
 8006f4e:	462b      	mov	r3, r5
 8006f50:	eb4b 0303 	adc.w	r3, fp, r3
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	f04f 0300 	mov.w	r3, #0
 8006f5e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006f62:	4629      	mov	r1, r5
 8006f64:	028b      	lsls	r3, r1, #10
 8006f66:	4621      	mov	r1, r4
 8006f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	028a      	lsls	r2, r1, #10
 8006f70:	4610      	mov	r0, r2
 8006f72:	4619      	mov	r1, r3
 8006f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f78:	2200      	movs	r2, #0
 8006f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8006f7c:	677a      	str	r2, [r7, #116]	; 0x74
 8006f7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006f82:	f7f9 fe51 	bl	8000c28 <__aeabi_uldivmod>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f90:	4b41      	ldr	r3, [pc, #260]	; (8007098 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	0c1b      	lsrs	r3, r3, #16
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006fb2:	e0eb      	b.n	800718c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fb4:	4b38      	ldr	r3, [pc, #224]	; (8007098 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fc0:	4b35      	ldr	r3, [pc, #212]	; (8007098 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d06b      	beq.n	80070a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fcc:	4b32      	ldr	r3, [pc, #200]	; (8007098 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	099b      	lsrs	r3, r3, #6
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fde:	663b      	str	r3, [r7, #96]	; 0x60
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	667b      	str	r3, [r7, #100]	; 0x64
 8006fe4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006fe8:	4622      	mov	r2, r4
 8006fea:	462b      	mov	r3, r5
 8006fec:	f04f 0000 	mov.w	r0, #0
 8006ff0:	f04f 0100 	mov.w	r1, #0
 8006ff4:	0159      	lsls	r1, r3, #5
 8006ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ffa:	0150      	lsls	r0, r2, #5
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4621      	mov	r1, r4
 8007002:	1a51      	subs	r1, r2, r1
 8007004:	61b9      	str	r1, [r7, #24]
 8007006:	4629      	mov	r1, r5
 8007008:	eb63 0301 	sbc.w	r3, r3, r1
 800700c:	61fb      	str	r3, [r7, #28]
 800700e:	f04f 0200 	mov.w	r2, #0
 8007012:	f04f 0300 	mov.w	r3, #0
 8007016:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800701a:	4659      	mov	r1, fp
 800701c:	018b      	lsls	r3, r1, #6
 800701e:	4651      	mov	r1, sl
 8007020:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007024:	4651      	mov	r1, sl
 8007026:	018a      	lsls	r2, r1, #6
 8007028:	4651      	mov	r1, sl
 800702a:	ebb2 0801 	subs.w	r8, r2, r1
 800702e:	4659      	mov	r1, fp
 8007030:	eb63 0901 	sbc.w	r9, r3, r1
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007040:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007044:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007048:	4690      	mov	r8, r2
 800704a:	4699      	mov	r9, r3
 800704c:	4623      	mov	r3, r4
 800704e:	eb18 0303 	adds.w	r3, r8, r3
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	462b      	mov	r3, r5
 8007056:	eb49 0303 	adc.w	r3, r9, r3
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007068:	4629      	mov	r1, r5
 800706a:	024b      	lsls	r3, r1, #9
 800706c:	4621      	mov	r1, r4
 800706e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007072:	4621      	mov	r1, r4
 8007074:	024a      	lsls	r2, r1, #9
 8007076:	4610      	mov	r0, r2
 8007078:	4619      	mov	r1, r3
 800707a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800707e:	2200      	movs	r2, #0
 8007080:	65bb      	str	r3, [r7, #88]	; 0x58
 8007082:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007084:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007088:	f7f9 fdce 	bl	8000c28 <__aeabi_uldivmod>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4613      	mov	r3, r2
 8007092:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007096:	e065      	b.n	8007164 <HAL_RCC_GetSysClockFreq+0x420>
 8007098:	40023800 	.word	0x40023800
 800709c:	00f42400 	.word	0x00f42400
 80070a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070a4:	4b3d      	ldr	r3, [pc, #244]	; (800719c <HAL_RCC_GetSysClockFreq+0x458>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	099b      	lsrs	r3, r3, #6
 80070aa:	2200      	movs	r2, #0
 80070ac:	4618      	mov	r0, r3
 80070ae:	4611      	mov	r1, r2
 80070b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070b4:	653b      	str	r3, [r7, #80]	; 0x50
 80070b6:	2300      	movs	r3, #0
 80070b8:	657b      	str	r3, [r7, #84]	; 0x54
 80070ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80070be:	4642      	mov	r2, r8
 80070c0:	464b      	mov	r3, r9
 80070c2:	f04f 0000 	mov.w	r0, #0
 80070c6:	f04f 0100 	mov.w	r1, #0
 80070ca:	0159      	lsls	r1, r3, #5
 80070cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070d0:	0150      	lsls	r0, r2, #5
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4641      	mov	r1, r8
 80070d8:	1a51      	subs	r1, r2, r1
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	4649      	mov	r1, r9
 80070de:	eb63 0301 	sbc.w	r3, r3, r1
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	f04f 0300 	mov.w	r3, #0
 80070ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80070f0:	4659      	mov	r1, fp
 80070f2:	018b      	lsls	r3, r1, #6
 80070f4:	4651      	mov	r1, sl
 80070f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070fa:	4651      	mov	r1, sl
 80070fc:	018a      	lsls	r2, r1, #6
 80070fe:	4651      	mov	r1, sl
 8007100:	1a54      	subs	r4, r2, r1
 8007102:	4659      	mov	r1, fp
 8007104:	eb63 0501 	sbc.w	r5, r3, r1
 8007108:	f04f 0200 	mov.w	r2, #0
 800710c:	f04f 0300 	mov.w	r3, #0
 8007110:	00eb      	lsls	r3, r5, #3
 8007112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007116:	00e2      	lsls	r2, r4, #3
 8007118:	4614      	mov	r4, r2
 800711a:	461d      	mov	r5, r3
 800711c:	4643      	mov	r3, r8
 800711e:	18e3      	adds	r3, r4, r3
 8007120:	603b      	str	r3, [r7, #0]
 8007122:	464b      	mov	r3, r9
 8007124:	eb45 0303 	adc.w	r3, r5, r3
 8007128:	607b      	str	r3, [r7, #4]
 800712a:	f04f 0200 	mov.w	r2, #0
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007136:	4629      	mov	r1, r5
 8007138:	028b      	lsls	r3, r1, #10
 800713a:	4621      	mov	r1, r4
 800713c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007140:	4621      	mov	r1, r4
 8007142:	028a      	lsls	r2, r1, #10
 8007144:	4610      	mov	r0, r2
 8007146:	4619      	mov	r1, r3
 8007148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800714c:	2200      	movs	r2, #0
 800714e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007150:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007152:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007156:	f7f9 fd67 	bl	8000c28 <__aeabi_uldivmod>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4613      	mov	r3, r2
 8007160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007164:	4b0d      	ldr	r3, [pc, #52]	; (800719c <HAL_RCC_GetSysClockFreq+0x458>)
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	0f1b      	lsrs	r3, r3, #28
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800717a:	fbb2 f3f3 	udiv	r3, r2, r3
 800717e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007182:	e003      	b.n	800718c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007184:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800718a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800718c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007190:	4618      	mov	r0, r3
 8007192:	37b8      	adds	r7, #184	; 0xb8
 8007194:	46bd      	mov	sp, r7
 8007196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800719a:	bf00      	nop
 800719c:	40023800 	.word	0x40023800
 80071a0:	00f42400 	.word	0x00f42400

080071a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e28d      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 8083 	beq.w	80072ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071c4:	4b94      	ldr	r3, [pc, #592]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f003 030c 	and.w	r3, r3, #12
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d019      	beq.n	8007204 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071d0:	4b91      	ldr	r3, [pc, #580]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d106      	bne.n	80071ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071dc:	4b8e      	ldr	r3, [pc, #568]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071e8:	d00c      	beq.n	8007204 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071ea:	4b8b      	ldr	r3, [pc, #556]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071f2:	2b0c      	cmp	r3, #12
 80071f4:	d112      	bne.n	800721c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071f6:	4b88      	ldr	r3, [pc, #544]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007202:	d10b      	bne.n	800721c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007204:	4b84      	ldr	r3, [pc, #528]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d05b      	beq.n	80072c8 <HAL_RCC_OscConfig+0x124>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d157      	bne.n	80072c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e25a      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007224:	d106      	bne.n	8007234 <HAL_RCC_OscConfig+0x90>
 8007226:	4b7c      	ldr	r3, [pc, #496]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a7b      	ldr	r2, [pc, #492]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 800722c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	e01d      	b.n	8007270 <HAL_RCC_OscConfig+0xcc>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800723c:	d10c      	bne.n	8007258 <HAL_RCC_OscConfig+0xb4>
 800723e:	4b76      	ldr	r3, [pc, #472]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a75      	ldr	r2, [pc, #468]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 8007244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	4b73      	ldr	r3, [pc, #460]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a72      	ldr	r2, [pc, #456]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 8007250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	e00b      	b.n	8007270 <HAL_RCC_OscConfig+0xcc>
 8007258:	4b6f      	ldr	r3, [pc, #444]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a6e      	ldr	r2, [pc, #440]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 800725e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	4b6c      	ldr	r3, [pc, #432]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a6b      	ldr	r2, [pc, #428]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 800726a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800726e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d013      	beq.n	80072a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007278:	f7fe f8ae 	bl	80053d8 <HAL_GetTick>
 800727c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800727e:	e008      	b.n	8007292 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007280:	f7fe f8aa 	bl	80053d8 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b64      	cmp	r3, #100	; 0x64
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e21f      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007292:	4b61      	ldr	r3, [pc, #388]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0f0      	beq.n	8007280 <HAL_RCC_OscConfig+0xdc>
 800729e:	e014      	b.n	80072ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a0:	f7fe f89a 	bl	80053d8 <HAL_GetTick>
 80072a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072a6:	e008      	b.n	80072ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072a8:	f7fe f896 	bl	80053d8 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b64      	cmp	r3, #100	; 0x64
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e20b      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072ba:	4b57      	ldr	r3, [pc, #348]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1f0      	bne.n	80072a8 <HAL_RCC_OscConfig+0x104>
 80072c6:	e000      	b.n	80072ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d06f      	beq.n	80073b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072d6:	4b50      	ldr	r3, [pc, #320]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f003 030c 	and.w	r3, r3, #12
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d017      	beq.n	8007312 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072e2:	4b4d      	ldr	r3, [pc, #308]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072ea:	2b08      	cmp	r3, #8
 80072ec:	d105      	bne.n	80072fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072ee:	4b4a      	ldr	r3, [pc, #296]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00b      	beq.n	8007312 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072fa:	4b47      	ldr	r3, [pc, #284]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007302:	2b0c      	cmp	r3, #12
 8007304:	d11c      	bne.n	8007340 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007306:	4b44      	ldr	r3, [pc, #272]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d116      	bne.n	8007340 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007312:	4b41      	ldr	r3, [pc, #260]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <HAL_RCC_OscConfig+0x186>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d001      	beq.n	800732a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e1d3      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800732a:	4b3b      	ldr	r3, [pc, #236]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	4937      	ldr	r1, [pc, #220]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 800733a:	4313      	orrs	r3, r2
 800733c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800733e:	e03a      	b.n	80073b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d020      	beq.n	800738a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007348:	4b34      	ldr	r3, [pc, #208]	; (800741c <HAL_RCC_OscConfig+0x278>)
 800734a:	2201      	movs	r2, #1
 800734c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734e:	f7fe f843 	bl	80053d8 <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007354:	e008      	b.n	8007368 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007356:	f7fe f83f 	bl	80053d8 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d901      	bls.n	8007368 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e1b4      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007368:	4b2b      	ldr	r3, [pc, #172]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0f0      	beq.n	8007356 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007374:	4b28      	ldr	r3, [pc, #160]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	4925      	ldr	r1, [pc, #148]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 8007384:	4313      	orrs	r3, r2
 8007386:	600b      	str	r3, [r1, #0]
 8007388:	e015      	b.n	80073b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800738a:	4b24      	ldr	r3, [pc, #144]	; (800741c <HAL_RCC_OscConfig+0x278>)
 800738c:	2200      	movs	r2, #0
 800738e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007390:	f7fe f822 	bl	80053d8 <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007396:	e008      	b.n	80073aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007398:	f7fe f81e 	bl	80053d8 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e193      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073aa:	4b1b      	ldr	r3, [pc, #108]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1f0      	bne.n	8007398 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d036      	beq.n	8007430 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d016      	beq.n	80073f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073ca:	4b15      	ldr	r3, [pc, #84]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80073cc:	2201      	movs	r2, #1
 80073ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d0:	f7fe f802 	bl	80053d8 <HAL_GetTick>
 80073d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073d6:	e008      	b.n	80073ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073d8:	f7fd fffe 	bl	80053d8 <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d901      	bls.n	80073ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e173      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ea:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <HAL_RCC_OscConfig+0x274>)
 80073ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0f0      	beq.n	80073d8 <HAL_RCC_OscConfig+0x234>
 80073f6:	e01b      	b.n	8007430 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073f8:	4b09      	ldr	r3, [pc, #36]	; (8007420 <HAL_RCC_OscConfig+0x27c>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073fe:	f7fd ffeb 	bl	80053d8 <HAL_GetTick>
 8007402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007404:	e00e      	b.n	8007424 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007406:	f7fd ffe7 	bl	80053d8 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d907      	bls.n	8007424 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e15c      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
 8007418:	40023800 	.word	0x40023800
 800741c:	42470000 	.word	0x42470000
 8007420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007424:	4b8a      	ldr	r3, [pc, #552]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 8007426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1ea      	bne.n	8007406 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0304 	and.w	r3, r3, #4
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 8097 	beq.w	800756c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800743e:	2300      	movs	r3, #0
 8007440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007442:	4b83      	ldr	r3, [pc, #524]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10f      	bne.n	800746e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800744e:	2300      	movs	r3, #0
 8007450:	60bb      	str	r3, [r7, #8]
 8007452:	4b7f      	ldr	r3, [pc, #508]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	4a7e      	ldr	r2, [pc, #504]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 8007458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800745c:	6413      	str	r3, [r2, #64]	; 0x40
 800745e:	4b7c      	ldr	r3, [pc, #496]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007466:	60bb      	str	r3, [r7, #8]
 8007468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800746a:	2301      	movs	r3, #1
 800746c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800746e:	4b79      	ldr	r3, [pc, #484]	; (8007654 <HAL_RCC_OscConfig+0x4b0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007476:	2b00      	cmp	r3, #0
 8007478:	d118      	bne.n	80074ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800747a:	4b76      	ldr	r3, [pc, #472]	; (8007654 <HAL_RCC_OscConfig+0x4b0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a75      	ldr	r2, [pc, #468]	; (8007654 <HAL_RCC_OscConfig+0x4b0>)
 8007480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007486:	f7fd ffa7 	bl	80053d8 <HAL_GetTick>
 800748a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800748c:	e008      	b.n	80074a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800748e:	f7fd ffa3 	bl	80053d8 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d901      	bls.n	80074a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e118      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074a0:	4b6c      	ldr	r3, [pc, #432]	; (8007654 <HAL_RCC_OscConfig+0x4b0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0f0      	beq.n	800748e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d106      	bne.n	80074c2 <HAL_RCC_OscConfig+0x31e>
 80074b4:	4b66      	ldr	r3, [pc, #408]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b8:	4a65      	ldr	r2, [pc, #404]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	6713      	str	r3, [r2, #112]	; 0x70
 80074c0:	e01c      	b.n	80074fc <HAL_RCC_OscConfig+0x358>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	2b05      	cmp	r3, #5
 80074c8:	d10c      	bne.n	80074e4 <HAL_RCC_OscConfig+0x340>
 80074ca:	4b61      	ldr	r3, [pc, #388]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 80074cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ce:	4a60      	ldr	r2, [pc, #384]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 80074d0:	f043 0304 	orr.w	r3, r3, #4
 80074d4:	6713      	str	r3, [r2, #112]	; 0x70
 80074d6:	4b5e      	ldr	r3, [pc, #376]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 80074d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074da:	4a5d      	ldr	r2, [pc, #372]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 80074dc:	f043 0301 	orr.w	r3, r3, #1
 80074e0:	6713      	str	r3, [r2, #112]	; 0x70
 80074e2:	e00b      	b.n	80074fc <HAL_RCC_OscConfig+0x358>
 80074e4:	4b5a      	ldr	r3, [pc, #360]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 80074e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e8:	4a59      	ldr	r2, [pc, #356]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 80074ea:	f023 0301 	bic.w	r3, r3, #1
 80074ee:	6713      	str	r3, [r2, #112]	; 0x70
 80074f0:	4b57      	ldr	r3, [pc, #348]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 80074f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f4:	4a56      	ldr	r2, [pc, #344]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 80074f6:	f023 0304 	bic.w	r3, r3, #4
 80074fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d015      	beq.n	8007530 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007504:	f7fd ff68 	bl	80053d8 <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800750a:	e00a      	b.n	8007522 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800750c:	f7fd ff64 	bl	80053d8 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	f241 3288 	movw	r2, #5000	; 0x1388
 800751a:	4293      	cmp	r3, r2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e0d7      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007522:	4b4b      	ldr	r3, [pc, #300]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 8007524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0ee      	beq.n	800750c <HAL_RCC_OscConfig+0x368>
 800752e:	e014      	b.n	800755a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007530:	f7fd ff52 	bl	80053d8 <HAL_GetTick>
 8007534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007536:	e00a      	b.n	800754e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007538:	f7fd ff4e 	bl	80053d8 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	f241 3288 	movw	r2, #5000	; 0x1388
 8007546:	4293      	cmp	r3, r2
 8007548:	d901      	bls.n	800754e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e0c1      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800754e:	4b40      	ldr	r3, [pc, #256]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 8007550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1ee      	bne.n	8007538 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d105      	bne.n	800756c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007560:	4b3b      	ldr	r3, [pc, #236]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	4a3a      	ldr	r2, [pc, #232]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 8007566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800756a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 80ad 	beq.w	80076d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007576:	4b36      	ldr	r3, [pc, #216]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f003 030c 	and.w	r3, r3, #12
 800757e:	2b08      	cmp	r3, #8
 8007580:	d060      	beq.n	8007644 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	2b02      	cmp	r3, #2
 8007588:	d145      	bne.n	8007616 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800758a:	4b33      	ldr	r3, [pc, #204]	; (8007658 <HAL_RCC_OscConfig+0x4b4>)
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007590:	f7fd ff22 	bl	80053d8 <HAL_GetTick>
 8007594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007596:	e008      	b.n	80075aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007598:	f7fd ff1e 	bl	80053d8 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e093      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075aa:	4b29      	ldr	r3, [pc, #164]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1f0      	bne.n	8007598 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69da      	ldr	r2, [r3, #28]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	431a      	orrs	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	019b      	lsls	r3, r3, #6
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075cc:	085b      	lsrs	r3, r3, #1
 80075ce:	3b01      	subs	r3, #1
 80075d0:	041b      	lsls	r3, r3, #16
 80075d2:	431a      	orrs	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	061b      	lsls	r3, r3, #24
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e0:	071b      	lsls	r3, r3, #28
 80075e2:	491b      	ldr	r1, [pc, #108]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075e8:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <HAL_RCC_OscConfig+0x4b4>)
 80075ea:	2201      	movs	r2, #1
 80075ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ee:	f7fd fef3 	bl	80053d8 <HAL_GetTick>
 80075f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075f4:	e008      	b.n	8007608 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075f6:	f7fd feef 	bl	80053d8 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b02      	cmp	r3, #2
 8007602:	d901      	bls.n	8007608 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e064      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007608:	4b11      	ldr	r3, [pc, #68]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0f0      	beq.n	80075f6 <HAL_RCC_OscConfig+0x452>
 8007614:	e05c      	b.n	80076d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007616:	4b10      	ldr	r3, [pc, #64]	; (8007658 <HAL_RCC_OscConfig+0x4b4>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800761c:	f7fd fedc 	bl	80053d8 <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007624:	f7fd fed8 	bl	80053d8 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e04d      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007636:	4b06      	ldr	r3, [pc, #24]	; (8007650 <HAL_RCC_OscConfig+0x4ac>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1f0      	bne.n	8007624 <HAL_RCC_OscConfig+0x480>
 8007642:	e045      	b.n	80076d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d107      	bne.n	800765c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e040      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
 8007650:	40023800 	.word	0x40023800
 8007654:	40007000 	.word	0x40007000
 8007658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800765c:	4b1f      	ldr	r3, [pc, #124]	; (80076dc <HAL_RCC_OscConfig+0x538>)
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d030      	beq.n	80076cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007674:	429a      	cmp	r2, r3
 8007676:	d129      	bne.n	80076cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007682:	429a      	cmp	r2, r3
 8007684:	d122      	bne.n	80076cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800768c:	4013      	ands	r3, r2
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007694:	4293      	cmp	r3, r2
 8007696:	d119      	bne.n	80076cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	085b      	lsrs	r3, r3, #1
 80076a4:	3b01      	subs	r3, #1
 80076a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d10f      	bne.n	80076cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d107      	bne.n	80076cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d001      	beq.n	80076d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	40023800 	.word	0x40023800

080076e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e07b      	b.n	80077ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d108      	bne.n	800770c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007702:	d009      	beq.n	8007718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	61da      	str	r2, [r3, #28]
 800770a:	e005      	b.n	8007718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7fb fab4 	bl	8002ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2202      	movs	r2, #2
 800773c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800774e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007760:	431a      	orrs	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	431a      	orrs	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	431a      	orrs	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007788:	431a      	orrs	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779c:	ea42 0103 	orr.w	r1, r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	0c1b      	lsrs	r3, r3, #16
 80077b6:	f003 0104 	and.w	r1, r3, #4
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	f003 0210 	and.w	r2, r3, #16
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b088      	sub	sp, #32
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_SPI_Transmit+0x22>
 8007810:	2302      	movs	r3, #2
 8007812:	e126      	b.n	8007a62 <HAL_SPI_Transmit+0x270>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800781c:	f7fd fddc 	bl	80053d8 <HAL_GetTick>
 8007820:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007822:	88fb      	ldrh	r3, [r7, #6]
 8007824:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b01      	cmp	r3, #1
 8007830:	d002      	beq.n	8007838 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007832:	2302      	movs	r3, #2
 8007834:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007836:	e10b      	b.n	8007a50 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <HAL_SPI_Transmit+0x52>
 800783e:	88fb      	ldrh	r3, [r7, #6]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d102      	bne.n	800784a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007848:	e102      	b.n	8007a50 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2203      	movs	r2, #3
 800784e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	88fa      	ldrh	r2, [r7, #6]
 8007862:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	88fa      	ldrh	r2, [r7, #6]
 8007868:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007890:	d10f      	bne.n	80078b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	d007      	beq.n	80078d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078d8:	d14b      	bne.n	8007972 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <HAL_SPI_Transmit+0xf6>
 80078e2:	8afb      	ldrh	r3, [r7, #22]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d13e      	bne.n	8007966 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ec:	881a      	ldrh	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800790c:	e02b      	b.n	8007966 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b02      	cmp	r3, #2
 800791a:	d112      	bne.n	8007942 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007920:	881a      	ldrh	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	1c9a      	adds	r2, r3, #2
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007940:	e011      	b.n	8007966 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007942:	f7fd fd49 	bl	80053d8 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d803      	bhi.n	800795a <HAL_SPI_Transmit+0x168>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007958:	d102      	bne.n	8007960 <HAL_SPI_Transmit+0x16e>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007964:	e074      	b.n	8007a50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800796a:	b29b      	uxth	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1ce      	bne.n	800790e <HAL_SPI_Transmit+0x11c>
 8007970:	e04c      	b.n	8007a0c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_SPI_Transmit+0x18e>
 800797a:	8afb      	ldrh	r3, [r7, #22]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d140      	bne.n	8007a02 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	330c      	adds	r3, #12
 800798a:	7812      	ldrb	r2, [r2, #0]
 800798c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800799c:	b29b      	uxth	r3, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80079a6:	e02c      	b.n	8007a02 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d113      	bne.n	80079de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	330c      	adds	r3, #12
 80079c0:	7812      	ldrb	r2, [r2, #0]
 80079c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	86da      	strh	r2, [r3, #54]	; 0x36
 80079dc:	e011      	b.n	8007a02 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079de:	f7fd fcfb 	bl	80053d8 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d803      	bhi.n	80079f6 <HAL_SPI_Transmit+0x204>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079f4:	d102      	bne.n	80079fc <HAL_SPI_Transmit+0x20a>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d102      	bne.n	8007a02 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a00:	e026      	b.n	8007a50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1cd      	bne.n	80079a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 fafd 	bl	8008010 <SPI_EndRxTxTransaction>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	613b      	str	r3, [r7, #16]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	613b      	str	r3, [r7, #16]
 8007a3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	77fb      	strb	r3, [r7, #31]
 8007a4c:	e000      	b.n	8007a50 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007a4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a60:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3720      	adds	r7, #32
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	4613      	mov	r3, r2
 8007a78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d101      	bne.n	8007a8c <HAL_SPI_Transmit_DMA+0x20>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e09b      	b.n	8007bc4 <HAL_SPI_Transmit_DMA+0x158>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d002      	beq.n	8007aa6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007aa4:	e089      	b.n	8007bba <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <HAL_SPI_Transmit_DMA+0x46>
 8007aac:	88fb      	ldrh	r3, [r7, #6]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d102      	bne.n	8007ab8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ab6:	e080      	b.n	8007bba <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2203      	movs	r2, #3
 8007abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	88fa      	ldrh	r2, [r7, #6]
 8007ad0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	88fa      	ldrh	r2, [r7, #6]
 8007ad6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007afe:	d10f      	bne.n	8007b20 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b24:	4a29      	ldr	r2, [pc, #164]	; (8007bcc <HAL_SPI_Transmit_DMA+0x160>)
 8007b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2c:	4a28      	ldr	r2, [pc, #160]	; (8007bd0 <HAL_SPI_Transmit_DMA+0x164>)
 8007b2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b34:	4a27      	ldr	r2, [pc, #156]	; (8007bd4 <HAL_SPI_Transmit_DMA+0x168>)
 8007b36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b48:	4619      	mov	r1, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	330c      	adds	r3, #12
 8007b50:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b56:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b58:	f7fe fa32 	bl	8005fc0 <HAL_DMA_Start_IT>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00c      	beq.n	8007b7c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b66:	f043 0210 	orr.w	r2, r3, #16
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007b7a:	e01e      	b.n	8007bba <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b86:	2b40      	cmp	r3, #64	; 0x40
 8007b88:	d007      	beq.n	8007b9a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b98:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f042 0220 	orr.w	r2, r2, #32
 8007ba8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f042 0202 	orr.w	r2, r2, #2
 8007bb8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	08007e7d 	.word	0x08007e7d
 8007bd0:	08007dd5 	.word	0x08007dd5
 8007bd4:	08007e99 	.word	0x08007e99

08007bd8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10e      	bne.n	8007c18 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d009      	beq.n	8007c18 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d004      	beq.n	8007c18 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
    return;
 8007c16:	e0ce      	b.n	8007db6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	f003 0302 	and.w	r3, r3, #2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d009      	beq.n	8007c36 <HAL_SPI_IRQHandler+0x5e>
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d004      	beq.n	8007c36 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	4798      	blx	r3
    return;
 8007c34:	e0bf      	b.n	8007db6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	f003 0320 	and.w	r3, r3, #32
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <HAL_SPI_IRQHandler+0x7e>
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d105      	bne.n	8007c56 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 80b0 	beq.w	8007db6 <HAL_SPI_IRQHandler+0x1de>
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	f003 0320 	and.w	r3, r3, #32
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 80aa 	beq.w	8007db6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d023      	beq.n	8007cb4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d011      	beq.n	8007c9c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7c:	f043 0204 	orr.w	r2, r3, #4
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c84:	2300      	movs	r3, #0
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	e00b      	b.n	8007cb4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	613b      	str	r3, [r7, #16]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	613b      	str	r3, [r7, #16]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	613b      	str	r3, [r7, #16]
 8007cb0:	693b      	ldr	r3, [r7, #16]
        return;
 8007cb2:	e080      	b.n	8007db6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d014      	beq.n	8007ce8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc2:	f043 0201 	orr.w	r2, r3, #1
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	60fb      	str	r3, [r7, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00c      	beq.n	8007d0c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf6:	f043 0208 	orr.w	r2, r3, #8
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60bb      	str	r3, [r7, #8]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	60bb      	str	r3, [r7, #8]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d04f      	beq.n	8007db4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d22:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d104      	bne.n	8007d40 <HAL_SPI_IRQHandler+0x168>
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d034      	beq.n	8007daa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 0203 	bic.w	r2, r2, #3
 8007d4e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d011      	beq.n	8007d7c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5c:	4a17      	ldr	r2, [pc, #92]	; (8007dbc <HAL_SPI_IRQHandler+0x1e4>)
 8007d5e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fe f9f3 	bl	8006150 <HAL_DMA_Abort_IT>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d005      	beq.n	8007d7c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d016      	beq.n	8007db2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d88:	4a0c      	ldr	r2, [pc, #48]	; (8007dbc <HAL_SPI_IRQHandler+0x1e4>)
 8007d8a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe f9dd 	bl	8006150 <HAL_DMA_Abort_IT>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00a      	beq.n	8007db2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007da8:	e003      	b.n	8007db2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7fb fbb8 	bl	8003520 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007db0:	e000      	b.n	8007db4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007db2:	bf00      	nop
    return;
 8007db4:	bf00      	nop
  }
}
 8007db6:	3720      	adds	r7, #32
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	08007ed9 	.word	0x08007ed9

08007dc0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007de2:	f7fd faf9 	bl	80053d8 <HAL_GetTick>
 8007de6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007df6:	d03b      	beq.n	8007e70 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0220 	bic.w	r2, r2, #32
 8007e06:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0202 	bic.w	r2, r2, #2
 8007e16:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	2164      	movs	r1, #100	; 0x64
 8007e1c:	6978      	ldr	r0, [r7, #20]
 8007e1e:	f000 f8f7 	bl	8008010 <SPI_EndRxTxTransaction>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d005      	beq.n	8007e34 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2c:	f043 0220 	orr.w	r2, r3, #32
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10a      	bne.n	8007e52 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2200      	movs	r2, #0
 8007e56:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d003      	beq.n	8007e70 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007e68:	6978      	ldr	r0, [r7, #20]
 8007e6a:	f7fb fb59 	bl	8003520 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007e6e:	e002      	b.n	8007e76 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007e70:	6978      	ldr	r0, [r7, #20]
 8007e72:	f7fb fb6b 	bl	800354c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f7ff ff98 	bl	8007dc0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 0203 	bic.w	r2, r2, #3
 8007eb4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eba:	f043 0210 	orr.w	r2, r3, #16
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f7fb fb28 	bl	8003520 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ed0:	bf00      	nop
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f7fb fb14 	bl	8003520 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ef8:	bf00      	nop
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f10:	f7fd fa62 	bl	80053d8 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	1a9b      	subs	r3, r3, r2
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f20:	f7fd fa5a 	bl	80053d8 <HAL_GetTick>
 8007f24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f26:	4b39      	ldr	r3, [pc, #228]	; (800800c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	015b      	lsls	r3, r3, #5
 8007f2c:	0d1b      	lsrs	r3, r3, #20
 8007f2e:	69fa      	ldr	r2, [r7, #28]
 8007f30:	fb02 f303 	mul.w	r3, r2, r3
 8007f34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f36:	e054      	b.n	8007fe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f3e:	d050      	beq.n	8007fe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f40:	f7fd fa4a 	bl	80053d8 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d902      	bls.n	8007f56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d13d      	bne.n	8007fd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f6e:	d111      	bne.n	8007f94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f78:	d004      	beq.n	8007f84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f82:	d107      	bne.n	8007f94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f9c:	d10f      	bne.n	8007fbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e017      	b.n	8008002 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	4013      	ands	r3, r2
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	bf0c      	ite	eq
 8007ff2:	2301      	moveq	r3, #1
 8007ff4:	2300      	movne	r3, #0
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d19b      	bne.n	8007f38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3720      	adds	r7, #32
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	20000038 	.word	0x20000038

08008010 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af02      	add	r7, sp, #8
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800801c:	4b1b      	ldr	r3, [pc, #108]	; (800808c <SPI_EndRxTxTransaction+0x7c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a1b      	ldr	r2, [pc, #108]	; (8008090 <SPI_EndRxTxTransaction+0x80>)
 8008022:	fba2 2303 	umull	r2, r3, r2, r3
 8008026:	0d5b      	lsrs	r3, r3, #21
 8008028:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800802c:	fb02 f303 	mul.w	r3, r2, r3
 8008030:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800803a:	d112      	bne.n	8008062 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2200      	movs	r2, #0
 8008044:	2180      	movs	r1, #128	; 0x80
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f7ff ff5a 	bl	8007f00 <SPI_WaitFlagStateUntilTimeout>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d016      	beq.n	8008080 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008056:	f043 0220 	orr.w	r2, r3, #32
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e00f      	b.n	8008082 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	3b01      	subs	r3, #1
 800806c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008078:	2b80      	cmp	r3, #128	; 0x80
 800807a:	d0f2      	beq.n	8008062 <SPI_EndRxTxTransaction+0x52>
 800807c:	e000      	b.n	8008080 <SPI_EndRxTxTransaction+0x70>
        break;
 800807e:	bf00      	nop
  }

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000038 	.word	0x20000038
 8008090:	165e9f81 	.word	0x165e9f81

08008094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e041      	b.n	800812a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d106      	bne.n	80080c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7fa fe92 	bl	8002de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3304      	adds	r3, #4
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f000 faa0 	bl	8008618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b01      	cmp	r3, #1
 8008146:	d001      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e04e      	b.n	80081ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0201 	orr.w	r2, r2, #1
 8008162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a23      	ldr	r2, [pc, #140]	; (80081f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d022      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008176:	d01d      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a1f      	ldr	r2, [pc, #124]	; (80081fc <HAL_TIM_Base_Start_IT+0xc8>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d018      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a1e      	ldr	r2, [pc, #120]	; (8008200 <HAL_TIM_Base_Start_IT+0xcc>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d013      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1c      	ldr	r2, [pc, #112]	; (8008204 <HAL_TIM_Base_Start_IT+0xd0>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00e      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a1b      	ldr	r2, [pc, #108]	; (8008208 <HAL_TIM_Base_Start_IT+0xd4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d009      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a19      	ldr	r2, [pc, #100]	; (800820c <HAL_TIM_Base_Start_IT+0xd8>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a18      	ldr	r2, [pc, #96]	; (8008210 <HAL_TIM_Base_Start_IT+0xdc>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d111      	bne.n	80081d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2b06      	cmp	r3, #6
 80081c4:	d010      	beq.n	80081e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f042 0201 	orr.w	r2, r2, #1
 80081d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d6:	e007      	b.n	80081e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0201 	orr.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	40010000 	.word	0x40010000
 80081fc:	40000400 	.word	0x40000400
 8008200:	40000800 	.word	0x40000800
 8008204:	40000c00 	.word	0x40000c00
 8008208:	40010400 	.word	0x40010400
 800820c:	40014000 	.word	0x40014000
 8008210:	40001800 	.word	0x40001800

08008214 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b02      	cmp	r3, #2
 8008228:	d122      	bne.n	8008270 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b02      	cmp	r3, #2
 8008236:	d11b      	bne.n	8008270 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0202 	mvn.w	r2, #2
 8008240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f9bf 	bl	80085da <HAL_TIM_IC_CaptureCallback>
 800825c:	e005      	b.n	800826a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f9b1 	bl	80085c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f9c2 	bl	80085ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0304 	and.w	r3, r3, #4
 800827a:	2b04      	cmp	r3, #4
 800827c:	d122      	bne.n	80082c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b04      	cmp	r3, #4
 800828a:	d11b      	bne.n	80082c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f06f 0204 	mvn.w	r2, #4
 8008294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2202      	movs	r2, #2
 800829a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f995 	bl	80085da <HAL_TIM_IC_CaptureCallback>
 80082b0:	e005      	b.n	80082be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f987 	bl	80085c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f998 	bl	80085ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	d122      	bne.n	8008318 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f003 0308 	and.w	r3, r3, #8
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d11b      	bne.n	8008318 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f06f 0208 	mvn.w	r2, #8
 80082e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2204      	movs	r2, #4
 80082ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f96b 	bl	80085da <HAL_TIM_IC_CaptureCallback>
 8008304:	e005      	b.n	8008312 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f95d 	bl	80085c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f96e 	bl	80085ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0310 	and.w	r3, r3, #16
 8008322:	2b10      	cmp	r3, #16
 8008324:	d122      	bne.n	800836c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0310 	and.w	r3, r3, #16
 8008330:	2b10      	cmp	r3, #16
 8008332:	d11b      	bne.n	800836c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0210 	mvn.w	r2, #16
 800833c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2208      	movs	r2, #8
 8008342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f941 	bl	80085da <HAL_TIM_IC_CaptureCallback>
 8008358:	e005      	b.n	8008366 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f933 	bl	80085c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f944 	bl	80085ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b01      	cmp	r3, #1
 8008378:	d10e      	bne.n	8008398 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b01      	cmp	r3, #1
 8008386:	d107      	bne.n	8008398 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f06f 0201 	mvn.w	r2, #1
 8008390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f90d 	bl	80085b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a2:	2b80      	cmp	r3, #128	; 0x80
 80083a4:	d10e      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b0:	2b80      	cmp	r3, #128	; 0x80
 80083b2:	d107      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 faea 	bl	8008998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ce:	2b40      	cmp	r3, #64	; 0x40
 80083d0:	d10e      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083dc:	2b40      	cmp	r3, #64	; 0x40
 80083de:	d107      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f909 	bl	8008602 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	d10e      	bne.n	800841c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b20      	cmp	r3, #32
 800840a:	d107      	bne.n	800841c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f06f 0220 	mvn.w	r2, #32
 8008414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fab4 	bl	8008984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008438:	2b01      	cmp	r3, #1
 800843a:	d101      	bne.n	8008440 <HAL_TIM_ConfigClockSource+0x1c>
 800843c:	2302      	movs	r3, #2
 800843e:	e0b4      	b.n	80085aa <HAL_TIM_ConfigClockSource+0x186>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800845e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008478:	d03e      	beq.n	80084f8 <HAL_TIM_ConfigClockSource+0xd4>
 800847a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800847e:	f200 8087 	bhi.w	8008590 <HAL_TIM_ConfigClockSource+0x16c>
 8008482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008486:	f000 8086 	beq.w	8008596 <HAL_TIM_ConfigClockSource+0x172>
 800848a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800848e:	d87f      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x16c>
 8008490:	2b70      	cmp	r3, #112	; 0x70
 8008492:	d01a      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0xa6>
 8008494:	2b70      	cmp	r3, #112	; 0x70
 8008496:	d87b      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x16c>
 8008498:	2b60      	cmp	r3, #96	; 0x60
 800849a:	d050      	beq.n	800853e <HAL_TIM_ConfigClockSource+0x11a>
 800849c:	2b60      	cmp	r3, #96	; 0x60
 800849e:	d877      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x16c>
 80084a0:	2b50      	cmp	r3, #80	; 0x50
 80084a2:	d03c      	beq.n	800851e <HAL_TIM_ConfigClockSource+0xfa>
 80084a4:	2b50      	cmp	r3, #80	; 0x50
 80084a6:	d873      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x16c>
 80084a8:	2b40      	cmp	r3, #64	; 0x40
 80084aa:	d058      	beq.n	800855e <HAL_TIM_ConfigClockSource+0x13a>
 80084ac:	2b40      	cmp	r3, #64	; 0x40
 80084ae:	d86f      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x16c>
 80084b0:	2b30      	cmp	r3, #48	; 0x30
 80084b2:	d064      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x15a>
 80084b4:	2b30      	cmp	r3, #48	; 0x30
 80084b6:	d86b      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x16c>
 80084b8:	2b20      	cmp	r3, #32
 80084ba:	d060      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x15a>
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d867      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x16c>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d05c      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x15a>
 80084c4:	2b10      	cmp	r3, #16
 80084c6:	d05a      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x15a>
 80084c8:	e062      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	6899      	ldr	r1, [r3, #8]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	f000 f9b7 	bl	800884c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	609a      	str	r2, [r3, #8]
      break;
 80084f6:	e04f      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	6899      	ldr	r1, [r3, #8]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f000 f9a0 	bl	800884c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800851a:	609a      	str	r2, [r3, #8]
      break;
 800851c:	e03c      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6818      	ldr	r0, [r3, #0]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	6859      	ldr	r1, [r3, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	461a      	mov	r2, r3
 800852c:	f000 f914 	bl	8008758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2150      	movs	r1, #80	; 0x50
 8008536:	4618      	mov	r0, r3
 8008538:	f000 f96d 	bl	8008816 <TIM_ITRx_SetConfig>
      break;
 800853c:	e02c      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6818      	ldr	r0, [r3, #0]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	6859      	ldr	r1, [r3, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	461a      	mov	r2, r3
 800854c:	f000 f933 	bl	80087b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2160      	movs	r1, #96	; 0x60
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f95d 	bl	8008816 <TIM_ITRx_SetConfig>
      break;
 800855c:	e01c      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6818      	ldr	r0, [r3, #0]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	6859      	ldr	r1, [r3, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	461a      	mov	r2, r3
 800856c:	f000 f8f4 	bl	8008758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2140      	movs	r1, #64	; 0x40
 8008576:	4618      	mov	r0, r3
 8008578:	f000 f94d 	bl	8008816 <TIM_ITRx_SetConfig>
      break;
 800857c:	e00c      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4619      	mov	r1, r3
 8008588:	4610      	mov	r0, r2
 800858a:	f000 f944 	bl	8008816 <TIM_ITRx_SetConfig>
      break;
 800858e:	e003      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
      break;
 8008594:	e000      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80085ba:	bf00      	nop
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b083      	sub	sp, #12
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085ce:	bf00      	nop
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085da:	b480      	push	{r7}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085e2:	bf00      	nop
 80085e4:	370c      	adds	r7, #12
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085f6:	bf00      	nop
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008602:	b480      	push	{r7}
 8008604:	b083      	sub	sp, #12
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800860a:	bf00      	nop
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
	...

08008618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a40      	ldr	r2, [pc, #256]	; (800872c <TIM_Base_SetConfig+0x114>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d013      	beq.n	8008658 <TIM_Base_SetConfig+0x40>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008636:	d00f      	beq.n	8008658 <TIM_Base_SetConfig+0x40>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a3d      	ldr	r2, [pc, #244]	; (8008730 <TIM_Base_SetConfig+0x118>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d00b      	beq.n	8008658 <TIM_Base_SetConfig+0x40>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a3c      	ldr	r2, [pc, #240]	; (8008734 <TIM_Base_SetConfig+0x11c>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d007      	beq.n	8008658 <TIM_Base_SetConfig+0x40>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a3b      	ldr	r2, [pc, #236]	; (8008738 <TIM_Base_SetConfig+0x120>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d003      	beq.n	8008658 <TIM_Base_SetConfig+0x40>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a3a      	ldr	r2, [pc, #232]	; (800873c <TIM_Base_SetConfig+0x124>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d108      	bne.n	800866a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a2f      	ldr	r2, [pc, #188]	; (800872c <TIM_Base_SetConfig+0x114>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d02b      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008678:	d027      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a2c      	ldr	r2, [pc, #176]	; (8008730 <TIM_Base_SetConfig+0x118>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d023      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a2b      	ldr	r2, [pc, #172]	; (8008734 <TIM_Base_SetConfig+0x11c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d01f      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a2a      	ldr	r2, [pc, #168]	; (8008738 <TIM_Base_SetConfig+0x120>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d01b      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a29      	ldr	r2, [pc, #164]	; (800873c <TIM_Base_SetConfig+0x124>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d017      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a28      	ldr	r2, [pc, #160]	; (8008740 <TIM_Base_SetConfig+0x128>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d013      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a27      	ldr	r2, [pc, #156]	; (8008744 <TIM_Base_SetConfig+0x12c>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00f      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a26      	ldr	r2, [pc, #152]	; (8008748 <TIM_Base_SetConfig+0x130>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d00b      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a25      	ldr	r2, [pc, #148]	; (800874c <TIM_Base_SetConfig+0x134>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d007      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a24      	ldr	r2, [pc, #144]	; (8008750 <TIM_Base_SetConfig+0x138>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d003      	beq.n	80086ca <TIM_Base_SetConfig+0xb2>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a23      	ldr	r2, [pc, #140]	; (8008754 <TIM_Base_SetConfig+0x13c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d108      	bne.n	80086dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	4313      	orrs	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a0a      	ldr	r2, [pc, #40]	; (800872c <TIM_Base_SetConfig+0x114>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d003      	beq.n	8008710 <TIM_Base_SetConfig+0xf8>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a0c      	ldr	r2, [pc, #48]	; (800873c <TIM_Base_SetConfig+0x124>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d103      	bne.n	8008718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	691a      	ldr	r2, [r3, #16]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	615a      	str	r2, [r3, #20]
}
 800871e:	bf00      	nop
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	40010000 	.word	0x40010000
 8008730:	40000400 	.word	0x40000400
 8008734:	40000800 	.word	0x40000800
 8008738:	40000c00 	.word	0x40000c00
 800873c:	40010400 	.word	0x40010400
 8008740:	40014000 	.word	0x40014000
 8008744:	40014400 	.word	0x40014400
 8008748:	40014800 	.word	0x40014800
 800874c:	40001800 	.word	0x40001800
 8008750:	40001c00 	.word	0x40001c00
 8008754:	40002000 	.word	0x40002000

08008758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	f023 0201 	bic.w	r2, r3, #1
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	4313      	orrs	r3, r2
 800878c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f023 030a 	bic.w	r3, r3, #10
 8008794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	4313      	orrs	r3, r2
 800879c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	621a      	str	r2, [r3, #32]
}
 80087aa:	bf00      	nop
 80087ac:	371c      	adds	r7, #28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b087      	sub	sp, #28
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	f023 0210 	bic.w	r2, r3, #16
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	031b      	lsls	r3, r3, #12
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	011b      	lsls	r3, r3, #4
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	621a      	str	r2, [r3, #32]
}
 800880a:	bf00      	nop
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008816:	b480      	push	{r7}
 8008818:	b085      	sub	sp, #20
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4313      	orrs	r3, r2
 8008834:	f043 0307 	orr.w	r3, r3, #7
 8008838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	609a      	str	r2, [r3, #8]
}
 8008840:	bf00      	nop
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	021a      	lsls	r2, r3, #8
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	431a      	orrs	r2, r3
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	4313      	orrs	r3, r2
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	4313      	orrs	r3, r2
 8008878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	609a      	str	r2, [r3, #8]
}
 8008880:	bf00      	nop
 8008882:	371c      	adds	r7, #28
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800889c:	2b01      	cmp	r3, #1
 800889e:	d101      	bne.n	80088a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088a0:	2302      	movs	r3, #2
 80088a2:	e05a      	b.n	800895a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a21      	ldr	r2, [pc, #132]	; (8008968 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d022      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f0:	d01d      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a1d      	ldr	r2, [pc, #116]	; (800896c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d018      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a1b      	ldr	r2, [pc, #108]	; (8008970 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d013      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a1a      	ldr	r2, [pc, #104]	; (8008974 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00e      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a18      	ldr	r2, [pc, #96]	; (8008978 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d009      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a17      	ldr	r2, [pc, #92]	; (800897c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d004      	beq.n	800892e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a15      	ldr	r2, [pc, #84]	; (8008980 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d10c      	bne.n	8008948 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	4313      	orrs	r3, r2
 800893e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	40010000 	.word	0x40010000
 800896c:	40000400 	.word	0x40000400
 8008970:	40000800 	.word	0x40000800
 8008974:	40000c00 	.word	0x40000c00
 8008978:	40010400 	.word	0x40010400
 800897c:	40014000 	.word	0x40014000
 8008980:	40001800 	.word	0x40001800

08008984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e03f      	b.n	8008a3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7fa fa2c 	bl	8002e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2224      	movs	r2, #36	; 0x24
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fddf 	bl	80095b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	695a      	ldr	r2, [r3, #20]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68da      	ldr	r2, [r3, #12]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2220      	movs	r2, #32
 8008a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b08a      	sub	sp, #40	; 0x28
 8008a4a:	af02      	add	r7, sp, #8
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	603b      	str	r3, [r7, #0]
 8008a52:	4613      	mov	r3, r2
 8008a54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b20      	cmp	r3, #32
 8008a64:	d17c      	bne.n	8008b60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <HAL_UART_Transmit+0x2c>
 8008a6c:	88fb      	ldrh	r3, [r7, #6]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e075      	b.n	8008b62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d101      	bne.n	8008a84 <HAL_UART_Transmit+0x3e>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e06e      	b.n	8008b62 <HAL_UART_Transmit+0x11c>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2221      	movs	r2, #33	; 0x21
 8008a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a9a:	f7fc fc9d 	bl	80053d8 <HAL_GetTick>
 8008a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	88fa      	ldrh	r2, [r7, #6]
 8008aa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	88fa      	ldrh	r2, [r7, #6]
 8008aaa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab4:	d108      	bne.n	8008ac8 <HAL_UART_Transmit+0x82>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d104      	bne.n	8008ac8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	61bb      	str	r3, [r7, #24]
 8008ac6:	e003      	b.n	8008ad0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008acc:	2300      	movs	r3, #0
 8008ace:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008ad8:	e02a      	b.n	8008b30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2180      	movs	r1, #128	; 0x80
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 fb1f 	bl	8009128 <UART_WaitOnFlagUntilTimeout>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e036      	b.n	8008b62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10b      	bne.n	8008b12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	3302      	adds	r3, #2
 8008b0e:	61bb      	str	r3, [r7, #24]
 8008b10:	e007      	b.n	8008b22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1cf      	bne.n	8008ada <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2200      	movs	r2, #0
 8008b42:	2140      	movs	r1, #64	; 0x40
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 faef 	bl	8009128 <UART_WaitOnFlagUntilTimeout>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e006      	b.n	8008b62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	e000      	b.n	8008b62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008b60:	2302      	movs	r3, #2
  }
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3720      	adds	r7, #32
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	4613      	mov	r3, r2
 8008b76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d11d      	bne.n	8008bc0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <HAL_UART_Receive_IT+0x26>
 8008b8a:	88fb      	ldrh	r3, [r7, #6]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e016      	b.n	8008bc2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <HAL_UART_Receive_IT+0x38>
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e00f      	b.n	8008bc2 <HAL_UART_Receive_IT+0x58>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008bb0:	88fb      	ldrh	r3, [r7, #6]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 fb24 	bl	8009204 <UART_Start_Receive_IT>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	e000      	b.n	8008bc2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008bc0:	2302      	movs	r3, #2
  }
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b0ba      	sub	sp, #232	; 0xe8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c02:	f003 030f 	and.w	r3, r3, #15
 8008c06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10f      	bne.n	8008c32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d009      	beq.n	8008c32 <HAL_UART_IRQHandler+0x66>
 8008c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c22:	f003 0320 	and.w	r3, r3, #32
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fc07 	bl	800943e <UART_Receive_IT>
      return;
 8008c30:	e256      	b.n	80090e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f000 80de 	beq.w	8008df8 <HAL_UART_IRQHandler+0x22c>
 8008c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d106      	bne.n	8008c56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 80d1 	beq.w	8008df8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <HAL_UART_IRQHandler+0xae>
 8008c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d005      	beq.n	8008c7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c72:	f043 0201 	orr.w	r2, r3, #1
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c7e:	f003 0304 	and.w	r3, r3, #4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00b      	beq.n	8008c9e <HAL_UART_IRQHandler+0xd2>
 8008c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d005      	beq.n	8008c9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c96:	f043 0202 	orr.w	r2, r3, #2
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00b      	beq.n	8008cc2 <HAL_UART_IRQHandler+0xf6>
 8008caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d005      	beq.n	8008cc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	f043 0204 	orr.w	r2, r3, #4
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc6:	f003 0308 	and.w	r3, r3, #8
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d011      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x126>
 8008cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cd2:	f003 0320 	and.w	r3, r3, #32
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d105      	bne.n	8008ce6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d005      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	f043 0208 	orr.w	r2, r3, #8
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 81ed 	beq.w	80090d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d00:	f003 0320 	and.w	r3, r3, #32
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d008      	beq.n	8008d1a <HAL_UART_IRQHandler+0x14e>
 8008d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d0c:	f003 0320 	and.w	r3, r3, #32
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fb92 	bl	800943e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d24:	2b40      	cmp	r3, #64	; 0x40
 8008d26:	bf0c      	ite	eq
 8008d28:	2301      	moveq	r3, #1
 8008d2a:	2300      	movne	r3, #0
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	f003 0308 	and.w	r3, r3, #8
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d103      	bne.n	8008d46 <HAL_UART_IRQHandler+0x17a>
 8008d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d04f      	beq.n	8008de6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa9a 	bl	8009280 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d56:	2b40      	cmp	r3, #64	; 0x40
 8008d58:	d141      	bne.n	8008dde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3314      	adds	r3, #20
 8008d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d68:	e853 3f00 	ldrex	r3, [r3]
 8008d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3314      	adds	r3, #20
 8008d82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1d9      	bne.n	8008d5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d013      	beq.n	8008dd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db2:	4a7d      	ldr	r2, [pc, #500]	; (8008fa8 <HAL_UART_IRQHandler+0x3dc>)
 8008db4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fd f9c8 	bl	8006150 <HAL_DMA_Abort_IT>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d016      	beq.n	8008df4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd4:	e00e      	b.n	8008df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f990 	bl	80090fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ddc:	e00a      	b.n	8008df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f98c 	bl	80090fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de4:	e006      	b.n	8008df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f988 	bl	80090fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008df2:	e170      	b.n	80090d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df4:	bf00      	nop
    return;
 8008df6:	e16e      	b.n	80090d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	f040 814a 	bne.w	8009096 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e06:	f003 0310 	and.w	r3, r3, #16
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f000 8143 	beq.w	8009096 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e14:	f003 0310 	and.w	r3, r3, #16
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 813c 	beq.w	8009096 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60bb      	str	r3, [r7, #8]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60bb      	str	r3, [r7, #8]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	60bb      	str	r3, [r7, #8]
 8008e32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3e:	2b40      	cmp	r3, #64	; 0x40
 8008e40:	f040 80b4 	bne.w	8008fac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 8140 	beq.w	80090da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e62:	429a      	cmp	r2, r3
 8008e64:	f080 8139 	bcs.w	80090da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e7a:	f000 8088 	beq.w	8008f8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	330c      	adds	r3, #12
 8008e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	330c      	adds	r3, #12
 8008ea6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008eaa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008eb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1d9      	bne.n	8008e7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3314      	adds	r3, #20
 8008ed0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008edc:	f023 0301 	bic.w	r3, r3, #1
 8008ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3314      	adds	r3, #20
 8008eea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008eee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ef2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ef6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e1      	bne.n	8008eca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3314      	adds	r3, #20
 8008f0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3314      	adds	r3, #20
 8008f26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e3      	bne.n	8008f06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2220      	movs	r2, #32
 8008f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	330c      	adds	r3, #12
 8008f52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f56:	e853 3f00 	ldrex	r3, [r3]
 8008f5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f5e:	f023 0310 	bic.w	r3, r3, #16
 8008f62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	330c      	adds	r3, #12
 8008f6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f70:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f78:	e841 2300 	strex	r3, r2, [r1]
 8008f7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e3      	bne.n	8008f4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fd f871 	bl	8006070 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f8b6 	bl	8009110 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008fa4:	e099      	b.n	80090da <HAL_UART_IRQHandler+0x50e>
 8008fa6:	bf00      	nop
 8008fa8:	08009347 	.word	0x08009347
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 808b 	beq.w	80090de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f000 8086 	beq.w	80090de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	330c      	adds	r3, #12
 8008fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fdc:	e853 3f00 	ldrex	r3, [r3]
 8008fe0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	330c      	adds	r3, #12
 8008ff2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008ff6:	647a      	str	r2, [r7, #68]	; 0x44
 8008ff8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ffe:	e841 2300 	strex	r3, r2, [r1]
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1e3      	bne.n	8008fd2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3314      	adds	r3, #20
 8009010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	e853 3f00 	ldrex	r3, [r3]
 8009018:	623b      	str	r3, [r7, #32]
   return(result);
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	f023 0301 	bic.w	r3, r3, #1
 8009020:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3314      	adds	r3, #20
 800902a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800902e:	633a      	str	r2, [r7, #48]	; 0x30
 8009030:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009032:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009036:	e841 2300 	strex	r3, r2, [r1]
 800903a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1e3      	bne.n	800900a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2220      	movs	r2, #32
 8009046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	330c      	adds	r3, #12
 8009056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	e853 3f00 	ldrex	r3, [r3]
 800905e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f023 0310 	bic.w	r3, r3, #16
 8009066:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	330c      	adds	r3, #12
 8009070:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009074:	61fa      	str	r2, [r7, #28]
 8009076:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009078:	69b9      	ldr	r1, [r7, #24]
 800907a:	69fa      	ldr	r2, [r7, #28]
 800907c:	e841 2300 	strex	r3, r2, [r1]
 8009080:	617b      	str	r3, [r7, #20]
   return(result);
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1e3      	bne.n	8009050 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f83e 	bl	8009110 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009094:	e023      	b.n	80090de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800909a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d009      	beq.n	80090b6 <HAL_UART_IRQHandler+0x4ea>
 80090a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f95d 	bl	800936e <UART_Transmit_IT>
    return;
 80090b4:	e014      	b.n	80090e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80090b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00e      	beq.n	80090e0 <HAL_UART_IRQHandler+0x514>
 80090c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d008      	beq.n	80090e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f99d 	bl	800940e <UART_EndTransmit_IT>
    return;
 80090d4:	e004      	b.n	80090e0 <HAL_UART_IRQHandler+0x514>
    return;
 80090d6:	bf00      	nop
 80090d8:	e002      	b.n	80090e0 <HAL_UART_IRQHandler+0x514>
      return;
 80090da:	bf00      	nop
 80090dc:	e000      	b.n	80090e0 <HAL_UART_IRQHandler+0x514>
      return;
 80090de:	bf00      	nop
  }
}
 80090e0:	37e8      	adds	r7, #232	; 0xe8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop

080090e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b090      	sub	sp, #64	; 0x40
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	603b      	str	r3, [r7, #0]
 8009134:	4613      	mov	r3, r2
 8009136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009138:	e050      	b.n	80091dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800913a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009140:	d04c      	beq.n	80091dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009144:	2b00      	cmp	r3, #0
 8009146:	d007      	beq.n	8009158 <UART_WaitOnFlagUntilTimeout+0x30>
 8009148:	f7fc f946 	bl	80053d8 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009154:	429a      	cmp	r2, r3
 8009156:	d241      	bcs.n	80091dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	330c      	adds	r3, #12
 800915e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	e853 3f00 	ldrex	r3, [r3]
 8009166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	330c      	adds	r3, #12
 8009176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009178:	637a      	str	r2, [r7, #52]	; 0x34
 800917a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800917e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009180:	e841 2300 	strex	r3, r2, [r1]
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e5      	bne.n	8009158 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3314      	adds	r3, #20
 8009192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	613b      	str	r3, [r7, #16]
   return(result);
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f023 0301 	bic.w	r3, r3, #1
 80091a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3314      	adds	r3, #20
 80091aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091ac:	623a      	str	r2, [r7, #32]
 80091ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	69f9      	ldr	r1, [r7, #28]
 80091b2:	6a3a      	ldr	r2, [r7, #32]
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e5      	bne.n	800918c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2220      	movs	r2, #32
 80091c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e00f      	b.n	80091fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	4013      	ands	r3, r2
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	bf0c      	ite	eq
 80091ec:	2301      	moveq	r3, #1
 80091ee:	2300      	movne	r3, #0
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	461a      	mov	r2, r3
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d09f      	beq.n	800913a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3740      	adds	r7, #64	; 0x40
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	4613      	mov	r3, r2
 8009210:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	88fa      	ldrh	r2, [r7, #6]
 800921c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	88fa      	ldrh	r2, [r7, #6]
 8009222:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2222      	movs	r2, #34	; 0x22
 800922e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d007      	beq.n	8009252 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68da      	ldr	r2, [r3, #12]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009250:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	695a      	ldr	r2, [r3, #20]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f042 0201 	orr.w	r2, r2, #1
 8009260:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68da      	ldr	r2, [r3, #12]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f042 0220 	orr.w	r2, r2, #32
 8009270:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b095      	sub	sp, #84	; 0x54
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	330c      	adds	r3, #12
 800928e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009292:	e853 3f00 	ldrex	r3, [r3]
 8009296:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800929e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	330c      	adds	r3, #12
 80092a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092a8:	643a      	str	r2, [r7, #64]	; 0x40
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092b0:	e841 2300 	strex	r3, r2, [r1]
 80092b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e5      	bne.n	8009288 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3314      	adds	r3, #20
 80092c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	e853 3f00 	ldrex	r3, [r3]
 80092ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	f023 0301 	bic.w	r3, r3, #1
 80092d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3314      	adds	r3, #20
 80092da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e4:	e841 2300 	strex	r3, r2, [r1]
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e5      	bne.n	80092bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d119      	bne.n	800932c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	330c      	adds	r3, #12
 80092fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	e853 3f00 	ldrex	r3, [r3]
 8009306:	60bb      	str	r3, [r7, #8]
   return(result);
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f023 0310 	bic.w	r3, r3, #16
 800930e:	647b      	str	r3, [r7, #68]	; 0x44
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	330c      	adds	r3, #12
 8009316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009318:	61ba      	str	r2, [r7, #24]
 800931a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	6979      	ldr	r1, [r7, #20]
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	613b      	str	r3, [r7, #16]
   return(result);
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e5      	bne.n	80092f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2220      	movs	r2, #32
 8009330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	631a      	str	r2, [r3, #48]	; 0x30
}
 800933a:	bf00      	nop
 800933c:	3754      	adds	r7, #84	; 0x54
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009352:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff fecb 	bl	80090fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800936e:	b480      	push	{r7}
 8009370:	b085      	sub	sp, #20
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b21      	cmp	r3, #33	; 0x21
 8009380:	d13e      	bne.n	8009400 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800938a:	d114      	bne.n	80093b6 <UART_Transmit_IT+0x48>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d110      	bne.n	80093b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a1b      	ldr	r3, [r3, #32]
 8009398:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	1c9a      	adds	r2, r3, #2
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	621a      	str	r2, [r3, #32]
 80093b4:	e008      	b.n	80093c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	1c59      	adds	r1, r3, #1
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6211      	str	r1, [r2, #32]
 80093c0:	781a      	ldrb	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	3b01      	subs	r3, #1
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	4619      	mov	r1, r3
 80093d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10f      	bne.n	80093fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68da      	ldr	r2, [r3, #12]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	e000      	b.n	8009402 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009400:	2302      	movs	r3, #2
  }
}
 8009402:	4618      	mov	r0, r3
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b082      	sub	sp, #8
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68da      	ldr	r2, [r3, #12]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009424:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2220      	movs	r2, #32
 800942a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7ff fe5a 	bl	80090e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b08c      	sub	sp, #48	; 0x30
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b22      	cmp	r3, #34	; 0x22
 8009450:	f040 80ab 	bne.w	80095aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800945c:	d117      	bne.n	800948e <UART_Receive_IT+0x50>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d113      	bne.n	800948e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009466:	2300      	movs	r3, #0
 8009468:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	b29b      	uxth	r3, r3
 8009478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947c:	b29a      	uxth	r2, r3
 800947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009480:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009486:	1c9a      	adds	r2, r3, #2
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	629a      	str	r2, [r3, #40]	; 0x28
 800948c:	e026      	b.n	80094dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009492:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009494:	2300      	movs	r3, #0
 8009496:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a0:	d007      	beq.n	80094b2 <UART_Receive_IT+0x74>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10a      	bne.n	80094c0 <UART_Receive_IT+0x82>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d106      	bne.n	80094c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	e008      	b.n	80094d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d6:	1c5a      	adds	r2, r3, #1
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	3b01      	subs	r3, #1
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	4619      	mov	r1, r3
 80094ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d15a      	bne.n	80095a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68da      	ldr	r2, [r3, #12]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 0220 	bic.w	r2, r2, #32
 80094fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800950e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	695a      	ldr	r2, [r3, #20]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 0201 	bic.w	r2, r2, #1
 800951e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2220      	movs	r2, #32
 8009524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952c:	2b01      	cmp	r3, #1
 800952e:	d135      	bne.n	800959c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	330c      	adds	r3, #12
 800953c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	e853 3f00 	ldrex	r3, [r3]
 8009544:	613b      	str	r3, [r7, #16]
   return(result);
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f023 0310 	bic.w	r3, r3, #16
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	330c      	adds	r3, #12
 8009554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009556:	623a      	str	r2, [r7, #32]
 8009558:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	69f9      	ldr	r1, [r7, #28]
 800955c:	6a3a      	ldr	r2, [r7, #32]
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	61bb      	str	r3, [r7, #24]
   return(result);
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e5      	bne.n	8009536 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0310 	and.w	r3, r3, #16
 8009574:	2b10      	cmp	r3, #16
 8009576:	d10a      	bne.n	800958e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009578:	2300      	movs	r3, #0
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7ff fdbb 	bl	8009110 <HAL_UARTEx_RxEventCallback>
 800959a:	e002      	b.n	80095a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7f9 f9f3 	bl	8002988 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e002      	b.n	80095ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	e000      	b.n	80095ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80095aa:	2302      	movs	r3, #2
  }
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3730      	adds	r7, #48	; 0x30
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095b8:	b0c0      	sub	sp, #256	; 0x100
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80095cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d0:	68d9      	ldr	r1, [r3, #12]
 80095d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	ea40 0301 	orr.w	r3, r0, r1
 80095dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80095de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	431a      	orrs	r2, r3
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	431a      	orrs	r2, r3
 80095f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800960c:	f021 010c 	bic.w	r1, r1, #12
 8009610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800961a:	430b      	orrs	r3, r1
 800961c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800961e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800962a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962e:	6999      	ldr	r1, [r3, #24]
 8009630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	ea40 0301 	orr.w	r3, r0, r1
 800963a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800963c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	4b8f      	ldr	r3, [pc, #572]	; (8009880 <UART_SetConfig+0x2cc>)
 8009644:	429a      	cmp	r2, r3
 8009646:	d005      	beq.n	8009654 <UART_SetConfig+0xa0>
 8009648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	4b8d      	ldr	r3, [pc, #564]	; (8009884 <UART_SetConfig+0x2d0>)
 8009650:	429a      	cmp	r2, r3
 8009652:	d104      	bne.n	800965e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009654:	f7fd fb62 	bl	8006d1c <HAL_RCC_GetPCLK2Freq>
 8009658:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800965c:	e003      	b.n	8009666 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800965e:	f7fd fb49 	bl	8006cf4 <HAL_RCC_GetPCLK1Freq>
 8009662:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800966a:	69db      	ldr	r3, [r3, #28]
 800966c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009670:	f040 810c 	bne.w	800988c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009678:	2200      	movs	r2, #0
 800967a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800967e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009682:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009686:	4622      	mov	r2, r4
 8009688:	462b      	mov	r3, r5
 800968a:	1891      	adds	r1, r2, r2
 800968c:	65b9      	str	r1, [r7, #88]	; 0x58
 800968e:	415b      	adcs	r3, r3
 8009690:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009692:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009696:	4621      	mov	r1, r4
 8009698:	eb12 0801 	adds.w	r8, r2, r1
 800969c:	4629      	mov	r1, r5
 800969e:	eb43 0901 	adc.w	r9, r3, r1
 80096a2:	f04f 0200 	mov.w	r2, #0
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096b6:	4690      	mov	r8, r2
 80096b8:	4699      	mov	r9, r3
 80096ba:	4623      	mov	r3, r4
 80096bc:	eb18 0303 	adds.w	r3, r8, r3
 80096c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80096c4:	462b      	mov	r3, r5
 80096c6:	eb49 0303 	adc.w	r3, r9, r3
 80096ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80096de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80096e2:	460b      	mov	r3, r1
 80096e4:	18db      	adds	r3, r3, r3
 80096e6:	653b      	str	r3, [r7, #80]	; 0x50
 80096e8:	4613      	mov	r3, r2
 80096ea:	eb42 0303 	adc.w	r3, r2, r3
 80096ee:	657b      	str	r3, [r7, #84]	; 0x54
 80096f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80096f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80096f8:	f7f7 fa96 	bl	8000c28 <__aeabi_uldivmod>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	4b61      	ldr	r3, [pc, #388]	; (8009888 <UART_SetConfig+0x2d4>)
 8009702:	fba3 2302 	umull	r2, r3, r3, r2
 8009706:	095b      	lsrs	r3, r3, #5
 8009708:	011c      	lsls	r4, r3, #4
 800970a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800970e:	2200      	movs	r2, #0
 8009710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009714:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009718:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800971c:	4642      	mov	r2, r8
 800971e:	464b      	mov	r3, r9
 8009720:	1891      	adds	r1, r2, r2
 8009722:	64b9      	str	r1, [r7, #72]	; 0x48
 8009724:	415b      	adcs	r3, r3
 8009726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009728:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800972c:	4641      	mov	r1, r8
 800972e:	eb12 0a01 	adds.w	sl, r2, r1
 8009732:	4649      	mov	r1, r9
 8009734:	eb43 0b01 	adc.w	fp, r3, r1
 8009738:	f04f 0200 	mov.w	r2, #0
 800973c:	f04f 0300 	mov.w	r3, #0
 8009740:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009744:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800974c:	4692      	mov	sl, r2
 800974e:	469b      	mov	fp, r3
 8009750:	4643      	mov	r3, r8
 8009752:	eb1a 0303 	adds.w	r3, sl, r3
 8009756:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800975a:	464b      	mov	r3, r9
 800975c:	eb4b 0303 	adc.w	r3, fp, r3
 8009760:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009770:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009774:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009778:	460b      	mov	r3, r1
 800977a:	18db      	adds	r3, r3, r3
 800977c:	643b      	str	r3, [r7, #64]	; 0x40
 800977e:	4613      	mov	r3, r2
 8009780:	eb42 0303 	adc.w	r3, r2, r3
 8009784:	647b      	str	r3, [r7, #68]	; 0x44
 8009786:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800978a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800978e:	f7f7 fa4b 	bl	8000c28 <__aeabi_uldivmod>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	4611      	mov	r1, r2
 8009798:	4b3b      	ldr	r3, [pc, #236]	; (8009888 <UART_SetConfig+0x2d4>)
 800979a:	fba3 2301 	umull	r2, r3, r3, r1
 800979e:	095b      	lsrs	r3, r3, #5
 80097a0:	2264      	movs	r2, #100	; 0x64
 80097a2:	fb02 f303 	mul.w	r3, r2, r3
 80097a6:	1acb      	subs	r3, r1, r3
 80097a8:	00db      	lsls	r3, r3, #3
 80097aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80097ae:	4b36      	ldr	r3, [pc, #216]	; (8009888 <UART_SetConfig+0x2d4>)
 80097b0:	fba3 2302 	umull	r2, r3, r3, r2
 80097b4:	095b      	lsrs	r3, r3, #5
 80097b6:	005b      	lsls	r3, r3, #1
 80097b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097bc:	441c      	add	r4, r3
 80097be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097c2:	2200      	movs	r2, #0
 80097c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80097cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80097d0:	4642      	mov	r2, r8
 80097d2:	464b      	mov	r3, r9
 80097d4:	1891      	adds	r1, r2, r2
 80097d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80097d8:	415b      	adcs	r3, r3
 80097da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097e0:	4641      	mov	r1, r8
 80097e2:	1851      	adds	r1, r2, r1
 80097e4:	6339      	str	r1, [r7, #48]	; 0x30
 80097e6:	4649      	mov	r1, r9
 80097e8:	414b      	adcs	r3, r1
 80097ea:	637b      	str	r3, [r7, #52]	; 0x34
 80097ec:	f04f 0200 	mov.w	r2, #0
 80097f0:	f04f 0300 	mov.w	r3, #0
 80097f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80097f8:	4659      	mov	r1, fp
 80097fa:	00cb      	lsls	r3, r1, #3
 80097fc:	4651      	mov	r1, sl
 80097fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009802:	4651      	mov	r1, sl
 8009804:	00ca      	lsls	r2, r1, #3
 8009806:	4610      	mov	r0, r2
 8009808:	4619      	mov	r1, r3
 800980a:	4603      	mov	r3, r0
 800980c:	4642      	mov	r2, r8
 800980e:	189b      	adds	r3, r3, r2
 8009810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009814:	464b      	mov	r3, r9
 8009816:	460a      	mov	r2, r1
 8009818:	eb42 0303 	adc.w	r3, r2, r3
 800981c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800982c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009830:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009834:	460b      	mov	r3, r1
 8009836:	18db      	adds	r3, r3, r3
 8009838:	62bb      	str	r3, [r7, #40]	; 0x28
 800983a:	4613      	mov	r3, r2
 800983c:	eb42 0303 	adc.w	r3, r2, r3
 8009840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009842:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009846:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800984a:	f7f7 f9ed 	bl	8000c28 <__aeabi_uldivmod>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	4b0d      	ldr	r3, [pc, #52]	; (8009888 <UART_SetConfig+0x2d4>)
 8009854:	fba3 1302 	umull	r1, r3, r3, r2
 8009858:	095b      	lsrs	r3, r3, #5
 800985a:	2164      	movs	r1, #100	; 0x64
 800985c:	fb01 f303 	mul.w	r3, r1, r3
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	00db      	lsls	r3, r3, #3
 8009864:	3332      	adds	r3, #50	; 0x32
 8009866:	4a08      	ldr	r2, [pc, #32]	; (8009888 <UART_SetConfig+0x2d4>)
 8009868:	fba2 2303 	umull	r2, r3, r2, r3
 800986c:	095b      	lsrs	r3, r3, #5
 800986e:	f003 0207 	and.w	r2, r3, #7
 8009872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4422      	add	r2, r4
 800987a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800987c:	e106      	b.n	8009a8c <UART_SetConfig+0x4d8>
 800987e:	bf00      	nop
 8009880:	40011000 	.word	0x40011000
 8009884:	40011400 	.word	0x40011400
 8009888:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800988c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009890:	2200      	movs	r2, #0
 8009892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009896:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800989a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800989e:	4642      	mov	r2, r8
 80098a0:	464b      	mov	r3, r9
 80098a2:	1891      	adds	r1, r2, r2
 80098a4:	6239      	str	r1, [r7, #32]
 80098a6:	415b      	adcs	r3, r3
 80098a8:	627b      	str	r3, [r7, #36]	; 0x24
 80098aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098ae:	4641      	mov	r1, r8
 80098b0:	1854      	adds	r4, r2, r1
 80098b2:	4649      	mov	r1, r9
 80098b4:	eb43 0501 	adc.w	r5, r3, r1
 80098b8:	f04f 0200 	mov.w	r2, #0
 80098bc:	f04f 0300 	mov.w	r3, #0
 80098c0:	00eb      	lsls	r3, r5, #3
 80098c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098c6:	00e2      	lsls	r2, r4, #3
 80098c8:	4614      	mov	r4, r2
 80098ca:	461d      	mov	r5, r3
 80098cc:	4643      	mov	r3, r8
 80098ce:	18e3      	adds	r3, r4, r3
 80098d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098d4:	464b      	mov	r3, r9
 80098d6:	eb45 0303 	adc.w	r3, r5, r3
 80098da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098ee:	f04f 0200 	mov.w	r2, #0
 80098f2:	f04f 0300 	mov.w	r3, #0
 80098f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80098fa:	4629      	mov	r1, r5
 80098fc:	008b      	lsls	r3, r1, #2
 80098fe:	4621      	mov	r1, r4
 8009900:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009904:	4621      	mov	r1, r4
 8009906:	008a      	lsls	r2, r1, #2
 8009908:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800990c:	f7f7 f98c 	bl	8000c28 <__aeabi_uldivmod>
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	4b60      	ldr	r3, [pc, #384]	; (8009a98 <UART_SetConfig+0x4e4>)
 8009916:	fba3 2302 	umull	r2, r3, r3, r2
 800991a:	095b      	lsrs	r3, r3, #5
 800991c:	011c      	lsls	r4, r3, #4
 800991e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009922:	2200      	movs	r2, #0
 8009924:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009928:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800992c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009930:	4642      	mov	r2, r8
 8009932:	464b      	mov	r3, r9
 8009934:	1891      	adds	r1, r2, r2
 8009936:	61b9      	str	r1, [r7, #24]
 8009938:	415b      	adcs	r3, r3
 800993a:	61fb      	str	r3, [r7, #28]
 800993c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009940:	4641      	mov	r1, r8
 8009942:	1851      	adds	r1, r2, r1
 8009944:	6139      	str	r1, [r7, #16]
 8009946:	4649      	mov	r1, r9
 8009948:	414b      	adcs	r3, r1
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	f04f 0200 	mov.w	r2, #0
 8009950:	f04f 0300 	mov.w	r3, #0
 8009954:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009958:	4659      	mov	r1, fp
 800995a:	00cb      	lsls	r3, r1, #3
 800995c:	4651      	mov	r1, sl
 800995e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009962:	4651      	mov	r1, sl
 8009964:	00ca      	lsls	r2, r1, #3
 8009966:	4610      	mov	r0, r2
 8009968:	4619      	mov	r1, r3
 800996a:	4603      	mov	r3, r0
 800996c:	4642      	mov	r2, r8
 800996e:	189b      	adds	r3, r3, r2
 8009970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009974:	464b      	mov	r3, r9
 8009976:	460a      	mov	r2, r1
 8009978:	eb42 0303 	adc.w	r3, r2, r3
 800997c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	67bb      	str	r3, [r7, #120]	; 0x78
 800998a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800998c:	f04f 0200 	mov.w	r2, #0
 8009990:	f04f 0300 	mov.w	r3, #0
 8009994:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009998:	4649      	mov	r1, r9
 800999a:	008b      	lsls	r3, r1, #2
 800999c:	4641      	mov	r1, r8
 800999e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099a2:	4641      	mov	r1, r8
 80099a4:	008a      	lsls	r2, r1, #2
 80099a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80099aa:	f7f7 f93d 	bl	8000c28 <__aeabi_uldivmod>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4611      	mov	r1, r2
 80099b4:	4b38      	ldr	r3, [pc, #224]	; (8009a98 <UART_SetConfig+0x4e4>)
 80099b6:	fba3 2301 	umull	r2, r3, r3, r1
 80099ba:	095b      	lsrs	r3, r3, #5
 80099bc:	2264      	movs	r2, #100	; 0x64
 80099be:	fb02 f303 	mul.w	r3, r2, r3
 80099c2:	1acb      	subs	r3, r1, r3
 80099c4:	011b      	lsls	r3, r3, #4
 80099c6:	3332      	adds	r3, #50	; 0x32
 80099c8:	4a33      	ldr	r2, [pc, #204]	; (8009a98 <UART_SetConfig+0x4e4>)
 80099ca:	fba2 2303 	umull	r2, r3, r2, r3
 80099ce:	095b      	lsrs	r3, r3, #5
 80099d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099d4:	441c      	add	r4, r3
 80099d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099da:	2200      	movs	r2, #0
 80099dc:	673b      	str	r3, [r7, #112]	; 0x70
 80099de:	677a      	str	r2, [r7, #116]	; 0x74
 80099e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80099e4:	4642      	mov	r2, r8
 80099e6:	464b      	mov	r3, r9
 80099e8:	1891      	adds	r1, r2, r2
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	415b      	adcs	r3, r3
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099f4:	4641      	mov	r1, r8
 80099f6:	1851      	adds	r1, r2, r1
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	4649      	mov	r1, r9
 80099fc:	414b      	adcs	r3, r1
 80099fe:	607b      	str	r3, [r7, #4]
 8009a00:	f04f 0200 	mov.w	r2, #0
 8009a04:	f04f 0300 	mov.w	r3, #0
 8009a08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a0c:	4659      	mov	r1, fp
 8009a0e:	00cb      	lsls	r3, r1, #3
 8009a10:	4651      	mov	r1, sl
 8009a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a16:	4651      	mov	r1, sl
 8009a18:	00ca      	lsls	r2, r1, #3
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	4603      	mov	r3, r0
 8009a20:	4642      	mov	r2, r8
 8009a22:	189b      	adds	r3, r3, r2
 8009a24:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a26:	464b      	mov	r3, r9
 8009a28:	460a      	mov	r2, r1
 8009a2a:	eb42 0303 	adc.w	r3, r2, r3
 8009a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	663b      	str	r3, [r7, #96]	; 0x60
 8009a3a:	667a      	str	r2, [r7, #100]	; 0x64
 8009a3c:	f04f 0200 	mov.w	r2, #0
 8009a40:	f04f 0300 	mov.w	r3, #0
 8009a44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009a48:	4649      	mov	r1, r9
 8009a4a:	008b      	lsls	r3, r1, #2
 8009a4c:	4641      	mov	r1, r8
 8009a4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a52:	4641      	mov	r1, r8
 8009a54:	008a      	lsls	r2, r1, #2
 8009a56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009a5a:	f7f7 f8e5 	bl	8000c28 <__aeabi_uldivmod>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4b0d      	ldr	r3, [pc, #52]	; (8009a98 <UART_SetConfig+0x4e4>)
 8009a64:	fba3 1302 	umull	r1, r3, r3, r2
 8009a68:	095b      	lsrs	r3, r3, #5
 8009a6a:	2164      	movs	r1, #100	; 0x64
 8009a6c:	fb01 f303 	mul.w	r3, r1, r3
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	011b      	lsls	r3, r3, #4
 8009a74:	3332      	adds	r3, #50	; 0x32
 8009a76:	4a08      	ldr	r2, [pc, #32]	; (8009a98 <UART_SetConfig+0x4e4>)
 8009a78:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7c:	095b      	lsrs	r3, r3, #5
 8009a7e:	f003 020f 	and.w	r2, r3, #15
 8009a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4422      	add	r2, r4
 8009a8a:	609a      	str	r2, [r3, #8]
}
 8009a8c:	bf00      	nop
 8009a8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009a92:	46bd      	mov	sp, r7
 8009a94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a98:	51eb851f 	.word	0x51eb851f

08009a9c <sniprintf>:
 8009a9c:	b40c      	push	{r2, r3}
 8009a9e:	b530      	push	{r4, r5, lr}
 8009aa0:	4b17      	ldr	r3, [pc, #92]	; (8009b00 <sniprintf+0x64>)
 8009aa2:	1e0c      	subs	r4, r1, #0
 8009aa4:	681d      	ldr	r5, [r3, #0]
 8009aa6:	b09d      	sub	sp, #116	; 0x74
 8009aa8:	da08      	bge.n	8009abc <sniprintf+0x20>
 8009aaa:	238b      	movs	r3, #139	; 0x8b
 8009aac:	602b      	str	r3, [r5, #0]
 8009aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ab2:	b01d      	add	sp, #116	; 0x74
 8009ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ab8:	b002      	add	sp, #8
 8009aba:	4770      	bx	lr
 8009abc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009ac0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009ac4:	bf14      	ite	ne
 8009ac6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009aca:	4623      	moveq	r3, r4
 8009acc:	9304      	str	r3, [sp, #16]
 8009ace:	9307      	str	r3, [sp, #28]
 8009ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ad4:	9002      	str	r0, [sp, #8]
 8009ad6:	9006      	str	r0, [sp, #24]
 8009ad8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009adc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009ade:	ab21      	add	r3, sp, #132	; 0x84
 8009ae0:	a902      	add	r1, sp, #8
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	9301      	str	r3, [sp, #4]
 8009ae6:	f000 f9ab 	bl	8009e40 <_svfiprintf_r>
 8009aea:	1c43      	adds	r3, r0, #1
 8009aec:	bfbc      	itt	lt
 8009aee:	238b      	movlt	r3, #139	; 0x8b
 8009af0:	602b      	strlt	r3, [r5, #0]
 8009af2:	2c00      	cmp	r4, #0
 8009af4:	d0dd      	beq.n	8009ab2 <sniprintf+0x16>
 8009af6:	9b02      	ldr	r3, [sp, #8]
 8009af8:	2200      	movs	r2, #0
 8009afa:	701a      	strb	r2, [r3, #0]
 8009afc:	e7d9      	b.n	8009ab2 <sniprintf+0x16>
 8009afe:	bf00      	nop
 8009b00:	200000a4 	.word	0x200000a4

08009b04 <std>:
 8009b04:	2300      	movs	r3, #0
 8009b06:	b510      	push	{r4, lr}
 8009b08:	4604      	mov	r4, r0
 8009b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b12:	6083      	str	r3, [r0, #8]
 8009b14:	8181      	strh	r1, [r0, #12]
 8009b16:	6643      	str	r3, [r0, #100]	; 0x64
 8009b18:	81c2      	strh	r2, [r0, #14]
 8009b1a:	6183      	str	r3, [r0, #24]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	2208      	movs	r2, #8
 8009b20:	305c      	adds	r0, #92	; 0x5c
 8009b22:	f000 f8fd 	bl	8009d20 <memset>
 8009b26:	4b0d      	ldr	r3, [pc, #52]	; (8009b5c <std+0x58>)
 8009b28:	6263      	str	r3, [r4, #36]	; 0x24
 8009b2a:	4b0d      	ldr	r3, [pc, #52]	; (8009b60 <std+0x5c>)
 8009b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b2e:	4b0d      	ldr	r3, [pc, #52]	; (8009b64 <std+0x60>)
 8009b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b32:	4b0d      	ldr	r3, [pc, #52]	; (8009b68 <std+0x64>)
 8009b34:	6323      	str	r3, [r4, #48]	; 0x30
 8009b36:	4b0d      	ldr	r3, [pc, #52]	; (8009b6c <std+0x68>)
 8009b38:	6224      	str	r4, [r4, #32]
 8009b3a:	429c      	cmp	r4, r3
 8009b3c:	d006      	beq.n	8009b4c <std+0x48>
 8009b3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009b42:	4294      	cmp	r4, r2
 8009b44:	d002      	beq.n	8009b4c <std+0x48>
 8009b46:	33d0      	adds	r3, #208	; 0xd0
 8009b48:	429c      	cmp	r4, r3
 8009b4a:	d105      	bne.n	8009b58 <std+0x54>
 8009b4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b54:	f000 b916 	b.w	8009d84 <__retarget_lock_init_recursive>
 8009b58:	bd10      	pop	{r4, pc}
 8009b5a:	bf00      	nop
 8009b5c:	0800a899 	.word	0x0800a899
 8009b60:	0800a8bb 	.word	0x0800a8bb
 8009b64:	0800a8f3 	.word	0x0800a8f3
 8009b68:	0800a917 	.word	0x0800a917
 8009b6c:	20006be8 	.word	0x20006be8

08009b70 <stdio_exit_handler>:
 8009b70:	4a02      	ldr	r2, [pc, #8]	; (8009b7c <stdio_exit_handler+0xc>)
 8009b72:	4903      	ldr	r1, [pc, #12]	; (8009b80 <stdio_exit_handler+0x10>)
 8009b74:	4803      	ldr	r0, [pc, #12]	; (8009b84 <stdio_exit_handler+0x14>)
 8009b76:	f000 b869 	b.w	8009c4c <_fwalk_sglue>
 8009b7a:	bf00      	nop
 8009b7c:	2000004c 	.word	0x2000004c
 8009b80:	0800a831 	.word	0x0800a831
 8009b84:	20000058 	.word	0x20000058

08009b88 <cleanup_stdio>:
 8009b88:	6841      	ldr	r1, [r0, #4]
 8009b8a:	4b0c      	ldr	r3, [pc, #48]	; (8009bbc <cleanup_stdio+0x34>)
 8009b8c:	4299      	cmp	r1, r3
 8009b8e:	b510      	push	{r4, lr}
 8009b90:	4604      	mov	r4, r0
 8009b92:	d001      	beq.n	8009b98 <cleanup_stdio+0x10>
 8009b94:	f000 fe4c 	bl	800a830 <_fflush_r>
 8009b98:	68a1      	ldr	r1, [r4, #8]
 8009b9a:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <cleanup_stdio+0x38>)
 8009b9c:	4299      	cmp	r1, r3
 8009b9e:	d002      	beq.n	8009ba6 <cleanup_stdio+0x1e>
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f000 fe45 	bl	800a830 <_fflush_r>
 8009ba6:	68e1      	ldr	r1, [r4, #12]
 8009ba8:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <cleanup_stdio+0x3c>)
 8009baa:	4299      	cmp	r1, r3
 8009bac:	d004      	beq.n	8009bb8 <cleanup_stdio+0x30>
 8009bae:	4620      	mov	r0, r4
 8009bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb4:	f000 be3c 	b.w	800a830 <_fflush_r>
 8009bb8:	bd10      	pop	{r4, pc}
 8009bba:	bf00      	nop
 8009bbc:	20006be8 	.word	0x20006be8
 8009bc0:	20006c50 	.word	0x20006c50
 8009bc4:	20006cb8 	.word	0x20006cb8

08009bc8 <global_stdio_init.part.0>:
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	4b0b      	ldr	r3, [pc, #44]	; (8009bf8 <global_stdio_init.part.0+0x30>)
 8009bcc:	4c0b      	ldr	r4, [pc, #44]	; (8009bfc <global_stdio_init.part.0+0x34>)
 8009bce:	4a0c      	ldr	r2, [pc, #48]	; (8009c00 <global_stdio_init.part.0+0x38>)
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2104      	movs	r1, #4
 8009bd8:	f7ff ff94 	bl	8009b04 <std>
 8009bdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009be0:	2201      	movs	r2, #1
 8009be2:	2109      	movs	r1, #9
 8009be4:	f7ff ff8e 	bl	8009b04 <std>
 8009be8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009bec:	2202      	movs	r2, #2
 8009bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf2:	2112      	movs	r1, #18
 8009bf4:	f7ff bf86 	b.w	8009b04 <std>
 8009bf8:	20006d20 	.word	0x20006d20
 8009bfc:	20006be8 	.word	0x20006be8
 8009c00:	08009b71 	.word	0x08009b71

08009c04 <__sfp_lock_acquire>:
 8009c04:	4801      	ldr	r0, [pc, #4]	; (8009c0c <__sfp_lock_acquire+0x8>)
 8009c06:	f000 b8be 	b.w	8009d86 <__retarget_lock_acquire_recursive>
 8009c0a:	bf00      	nop
 8009c0c:	20006d25 	.word	0x20006d25

08009c10 <__sfp_lock_release>:
 8009c10:	4801      	ldr	r0, [pc, #4]	; (8009c18 <__sfp_lock_release+0x8>)
 8009c12:	f000 b8b9 	b.w	8009d88 <__retarget_lock_release_recursive>
 8009c16:	bf00      	nop
 8009c18:	20006d25 	.word	0x20006d25

08009c1c <__sinit>:
 8009c1c:	b510      	push	{r4, lr}
 8009c1e:	4604      	mov	r4, r0
 8009c20:	f7ff fff0 	bl	8009c04 <__sfp_lock_acquire>
 8009c24:	6a23      	ldr	r3, [r4, #32]
 8009c26:	b11b      	cbz	r3, 8009c30 <__sinit+0x14>
 8009c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c2c:	f7ff bff0 	b.w	8009c10 <__sfp_lock_release>
 8009c30:	4b04      	ldr	r3, [pc, #16]	; (8009c44 <__sinit+0x28>)
 8009c32:	6223      	str	r3, [r4, #32]
 8009c34:	4b04      	ldr	r3, [pc, #16]	; (8009c48 <__sinit+0x2c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1f5      	bne.n	8009c28 <__sinit+0xc>
 8009c3c:	f7ff ffc4 	bl	8009bc8 <global_stdio_init.part.0>
 8009c40:	e7f2      	b.n	8009c28 <__sinit+0xc>
 8009c42:	bf00      	nop
 8009c44:	08009b89 	.word	0x08009b89
 8009c48:	20006d20 	.word	0x20006d20

08009c4c <_fwalk_sglue>:
 8009c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c50:	4607      	mov	r7, r0
 8009c52:	4688      	mov	r8, r1
 8009c54:	4614      	mov	r4, r2
 8009c56:	2600      	movs	r6, #0
 8009c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8009c60:	d505      	bpl.n	8009c6e <_fwalk_sglue+0x22>
 8009c62:	6824      	ldr	r4, [r4, #0]
 8009c64:	2c00      	cmp	r4, #0
 8009c66:	d1f7      	bne.n	8009c58 <_fwalk_sglue+0xc>
 8009c68:	4630      	mov	r0, r6
 8009c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c6e:	89ab      	ldrh	r3, [r5, #12]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d907      	bls.n	8009c84 <_fwalk_sglue+0x38>
 8009c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	d003      	beq.n	8009c84 <_fwalk_sglue+0x38>
 8009c7c:	4629      	mov	r1, r5
 8009c7e:	4638      	mov	r0, r7
 8009c80:	47c0      	blx	r8
 8009c82:	4306      	orrs	r6, r0
 8009c84:	3568      	adds	r5, #104	; 0x68
 8009c86:	e7e9      	b.n	8009c5c <_fwalk_sglue+0x10>

08009c88 <_vsniprintf_r>:
 8009c88:	b530      	push	{r4, r5, lr}
 8009c8a:	4614      	mov	r4, r2
 8009c8c:	2c00      	cmp	r4, #0
 8009c8e:	b09b      	sub	sp, #108	; 0x6c
 8009c90:	4605      	mov	r5, r0
 8009c92:	461a      	mov	r2, r3
 8009c94:	da05      	bge.n	8009ca2 <_vsniprintf_r+0x1a>
 8009c96:	238b      	movs	r3, #139	; 0x8b
 8009c98:	6003      	str	r3, [r0, #0]
 8009c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c9e:	b01b      	add	sp, #108	; 0x6c
 8009ca0:	bd30      	pop	{r4, r5, pc}
 8009ca2:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009ca6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009caa:	bf14      	ite	ne
 8009cac:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009cb0:	4623      	moveq	r3, r4
 8009cb2:	9302      	str	r3, [sp, #8]
 8009cb4:	9305      	str	r3, [sp, #20]
 8009cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009cba:	9100      	str	r1, [sp, #0]
 8009cbc:	9104      	str	r1, [sp, #16]
 8009cbe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009cc2:	4669      	mov	r1, sp
 8009cc4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009cc6:	f000 f8bb 	bl	8009e40 <_svfiprintf_r>
 8009cca:	1c43      	adds	r3, r0, #1
 8009ccc:	bfbc      	itt	lt
 8009cce:	238b      	movlt	r3, #139	; 0x8b
 8009cd0:	602b      	strlt	r3, [r5, #0]
 8009cd2:	2c00      	cmp	r4, #0
 8009cd4:	d0e3      	beq.n	8009c9e <_vsniprintf_r+0x16>
 8009cd6:	9b00      	ldr	r3, [sp, #0]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	701a      	strb	r2, [r3, #0]
 8009cdc:	e7df      	b.n	8009c9e <_vsniprintf_r+0x16>
	...

08009ce0 <vsniprintf>:
 8009ce0:	b507      	push	{r0, r1, r2, lr}
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	460a      	mov	r2, r1
 8009ce8:	4601      	mov	r1, r0
 8009cea:	4803      	ldr	r0, [pc, #12]	; (8009cf8 <vsniprintf+0x18>)
 8009cec:	6800      	ldr	r0, [r0, #0]
 8009cee:	f7ff ffcb 	bl	8009c88 <_vsniprintf_r>
 8009cf2:	b003      	add	sp, #12
 8009cf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cf8:	200000a4 	.word	0x200000a4

08009cfc <iprintf>:
 8009cfc:	b40f      	push	{r0, r1, r2, r3}
 8009cfe:	b507      	push	{r0, r1, r2, lr}
 8009d00:	4906      	ldr	r1, [pc, #24]	; (8009d1c <iprintf+0x20>)
 8009d02:	ab04      	add	r3, sp, #16
 8009d04:	6808      	ldr	r0, [r1, #0]
 8009d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d0a:	6881      	ldr	r1, [r0, #8]
 8009d0c:	9301      	str	r3, [sp, #4]
 8009d0e:	f000 f9bf 	bl	800a090 <_vfiprintf_r>
 8009d12:	b003      	add	sp, #12
 8009d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d18:	b004      	add	sp, #16
 8009d1a:	4770      	bx	lr
 8009d1c:	200000a4 	.word	0x200000a4

08009d20 <memset>:
 8009d20:	4402      	add	r2, r0
 8009d22:	4603      	mov	r3, r0
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d100      	bne.n	8009d2a <memset+0xa>
 8009d28:	4770      	bx	lr
 8009d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d2e:	e7f9      	b.n	8009d24 <memset+0x4>

08009d30 <__errno>:
 8009d30:	4b01      	ldr	r3, [pc, #4]	; (8009d38 <__errno+0x8>)
 8009d32:	6818      	ldr	r0, [r3, #0]
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	200000a4 	.word	0x200000a4

08009d3c <__libc_init_array>:
 8009d3c:	b570      	push	{r4, r5, r6, lr}
 8009d3e:	4d0d      	ldr	r5, [pc, #52]	; (8009d74 <__libc_init_array+0x38>)
 8009d40:	4c0d      	ldr	r4, [pc, #52]	; (8009d78 <__libc_init_array+0x3c>)
 8009d42:	1b64      	subs	r4, r4, r5
 8009d44:	10a4      	asrs	r4, r4, #2
 8009d46:	2600      	movs	r6, #0
 8009d48:	42a6      	cmp	r6, r4
 8009d4a:	d109      	bne.n	8009d60 <__libc_init_array+0x24>
 8009d4c:	4d0b      	ldr	r5, [pc, #44]	; (8009d7c <__libc_init_array+0x40>)
 8009d4e:	4c0c      	ldr	r4, [pc, #48]	; (8009d80 <__libc_init_array+0x44>)
 8009d50:	f001 f988 	bl	800b064 <_init>
 8009d54:	1b64      	subs	r4, r4, r5
 8009d56:	10a4      	asrs	r4, r4, #2
 8009d58:	2600      	movs	r6, #0
 8009d5a:	42a6      	cmp	r6, r4
 8009d5c:	d105      	bne.n	8009d6a <__libc_init_array+0x2e>
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}
 8009d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d64:	4798      	blx	r3
 8009d66:	3601      	adds	r6, #1
 8009d68:	e7ee      	b.n	8009d48 <__libc_init_array+0xc>
 8009d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d6e:	4798      	blx	r3
 8009d70:	3601      	adds	r6, #1
 8009d72:	e7f2      	b.n	8009d5a <__libc_init_array+0x1e>
 8009d74:	0800cf88 	.word	0x0800cf88
 8009d78:	0800cf88 	.word	0x0800cf88
 8009d7c:	0800cf88 	.word	0x0800cf88
 8009d80:	0800cf8c 	.word	0x0800cf8c

08009d84 <__retarget_lock_init_recursive>:
 8009d84:	4770      	bx	lr

08009d86 <__retarget_lock_acquire_recursive>:
 8009d86:	4770      	bx	lr

08009d88 <__retarget_lock_release_recursive>:
 8009d88:	4770      	bx	lr

08009d8a <__ssputs_r>:
 8009d8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d8e:	688e      	ldr	r6, [r1, #8]
 8009d90:	461f      	mov	r7, r3
 8009d92:	42be      	cmp	r6, r7
 8009d94:	680b      	ldr	r3, [r1, #0]
 8009d96:	4682      	mov	sl, r0
 8009d98:	460c      	mov	r4, r1
 8009d9a:	4690      	mov	r8, r2
 8009d9c:	d82c      	bhi.n	8009df8 <__ssputs_r+0x6e>
 8009d9e:	898a      	ldrh	r2, [r1, #12]
 8009da0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009da4:	d026      	beq.n	8009df4 <__ssputs_r+0x6a>
 8009da6:	6965      	ldr	r5, [r4, #20]
 8009da8:	6909      	ldr	r1, [r1, #16]
 8009daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dae:	eba3 0901 	sub.w	r9, r3, r1
 8009db2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009db6:	1c7b      	adds	r3, r7, #1
 8009db8:	444b      	add	r3, r9
 8009dba:	106d      	asrs	r5, r5, #1
 8009dbc:	429d      	cmp	r5, r3
 8009dbe:	bf38      	it	cc
 8009dc0:	461d      	movcc	r5, r3
 8009dc2:	0553      	lsls	r3, r2, #21
 8009dc4:	d527      	bpl.n	8009e16 <__ssputs_r+0x8c>
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	f000 fa9c 	bl	800a304 <_malloc_r>
 8009dcc:	4606      	mov	r6, r0
 8009dce:	b360      	cbz	r0, 8009e2a <__ssputs_r+0xa0>
 8009dd0:	6921      	ldr	r1, [r4, #16]
 8009dd2:	464a      	mov	r2, r9
 8009dd4:	f000 ff5c 	bl	800ac90 <memcpy>
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	6126      	str	r6, [r4, #16]
 8009de6:	6165      	str	r5, [r4, #20]
 8009de8:	444e      	add	r6, r9
 8009dea:	eba5 0509 	sub.w	r5, r5, r9
 8009dee:	6026      	str	r6, [r4, #0]
 8009df0:	60a5      	str	r5, [r4, #8]
 8009df2:	463e      	mov	r6, r7
 8009df4:	42be      	cmp	r6, r7
 8009df6:	d900      	bls.n	8009dfa <__ssputs_r+0x70>
 8009df8:	463e      	mov	r6, r7
 8009dfa:	6820      	ldr	r0, [r4, #0]
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	4641      	mov	r1, r8
 8009e00:	f000 feb4 	bl	800ab6c <memmove>
 8009e04:	68a3      	ldr	r3, [r4, #8]
 8009e06:	1b9b      	subs	r3, r3, r6
 8009e08:	60a3      	str	r3, [r4, #8]
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	4433      	add	r3, r6
 8009e0e:	6023      	str	r3, [r4, #0]
 8009e10:	2000      	movs	r0, #0
 8009e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e16:	462a      	mov	r2, r5
 8009e18:	f000 fd81 	bl	800a91e <_realloc_r>
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d1e0      	bne.n	8009de4 <__ssputs_r+0x5a>
 8009e22:	6921      	ldr	r1, [r4, #16]
 8009e24:	4650      	mov	r0, sl
 8009e26:	f000 ff41 	bl	800acac <_free_r>
 8009e2a:	230c      	movs	r3, #12
 8009e2c:	f8ca 3000 	str.w	r3, [sl]
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e36:	81a3      	strh	r3, [r4, #12]
 8009e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e3c:	e7e9      	b.n	8009e12 <__ssputs_r+0x88>
	...

08009e40 <_svfiprintf_r>:
 8009e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e44:	4698      	mov	r8, r3
 8009e46:	898b      	ldrh	r3, [r1, #12]
 8009e48:	061b      	lsls	r3, r3, #24
 8009e4a:	b09d      	sub	sp, #116	; 0x74
 8009e4c:	4607      	mov	r7, r0
 8009e4e:	460d      	mov	r5, r1
 8009e50:	4614      	mov	r4, r2
 8009e52:	d50e      	bpl.n	8009e72 <_svfiprintf_r+0x32>
 8009e54:	690b      	ldr	r3, [r1, #16]
 8009e56:	b963      	cbnz	r3, 8009e72 <_svfiprintf_r+0x32>
 8009e58:	2140      	movs	r1, #64	; 0x40
 8009e5a:	f000 fa53 	bl	800a304 <_malloc_r>
 8009e5e:	6028      	str	r0, [r5, #0]
 8009e60:	6128      	str	r0, [r5, #16]
 8009e62:	b920      	cbnz	r0, 8009e6e <_svfiprintf_r+0x2e>
 8009e64:	230c      	movs	r3, #12
 8009e66:	603b      	str	r3, [r7, #0]
 8009e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e6c:	e0d0      	b.n	800a010 <_svfiprintf_r+0x1d0>
 8009e6e:	2340      	movs	r3, #64	; 0x40
 8009e70:	616b      	str	r3, [r5, #20]
 8009e72:	2300      	movs	r3, #0
 8009e74:	9309      	str	r3, [sp, #36]	; 0x24
 8009e76:	2320      	movs	r3, #32
 8009e78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e80:	2330      	movs	r3, #48	; 0x30
 8009e82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a028 <_svfiprintf_r+0x1e8>
 8009e86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e8a:	f04f 0901 	mov.w	r9, #1
 8009e8e:	4623      	mov	r3, r4
 8009e90:	469a      	mov	sl, r3
 8009e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e96:	b10a      	cbz	r2, 8009e9c <_svfiprintf_r+0x5c>
 8009e98:	2a25      	cmp	r2, #37	; 0x25
 8009e9a:	d1f9      	bne.n	8009e90 <_svfiprintf_r+0x50>
 8009e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8009ea0:	d00b      	beq.n	8009eba <_svfiprintf_r+0x7a>
 8009ea2:	465b      	mov	r3, fp
 8009ea4:	4622      	mov	r2, r4
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	f7ff ff6e 	bl	8009d8a <__ssputs_r>
 8009eae:	3001      	adds	r0, #1
 8009eb0:	f000 80a9 	beq.w	800a006 <_svfiprintf_r+0x1c6>
 8009eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eb6:	445a      	add	r2, fp
 8009eb8:	9209      	str	r2, [sp, #36]	; 0x24
 8009eba:	f89a 3000 	ldrb.w	r3, [sl]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 80a1 	beq.w	800a006 <_svfiprintf_r+0x1c6>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ece:	f10a 0a01 	add.w	sl, sl, #1
 8009ed2:	9304      	str	r3, [sp, #16]
 8009ed4:	9307      	str	r3, [sp, #28]
 8009ed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eda:	931a      	str	r3, [sp, #104]	; 0x68
 8009edc:	4654      	mov	r4, sl
 8009ede:	2205      	movs	r2, #5
 8009ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee4:	4850      	ldr	r0, [pc, #320]	; (800a028 <_svfiprintf_r+0x1e8>)
 8009ee6:	f7f6 f99b 	bl	8000220 <memchr>
 8009eea:	9a04      	ldr	r2, [sp, #16]
 8009eec:	b9d8      	cbnz	r0, 8009f26 <_svfiprintf_r+0xe6>
 8009eee:	06d0      	lsls	r0, r2, #27
 8009ef0:	bf44      	itt	mi
 8009ef2:	2320      	movmi	r3, #32
 8009ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ef8:	0711      	lsls	r1, r2, #28
 8009efa:	bf44      	itt	mi
 8009efc:	232b      	movmi	r3, #43	; 0x2b
 8009efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f02:	f89a 3000 	ldrb.w	r3, [sl]
 8009f06:	2b2a      	cmp	r3, #42	; 0x2a
 8009f08:	d015      	beq.n	8009f36 <_svfiprintf_r+0xf6>
 8009f0a:	9a07      	ldr	r2, [sp, #28]
 8009f0c:	4654      	mov	r4, sl
 8009f0e:	2000      	movs	r0, #0
 8009f10:	f04f 0c0a 	mov.w	ip, #10
 8009f14:	4621      	mov	r1, r4
 8009f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f1a:	3b30      	subs	r3, #48	; 0x30
 8009f1c:	2b09      	cmp	r3, #9
 8009f1e:	d94d      	bls.n	8009fbc <_svfiprintf_r+0x17c>
 8009f20:	b1b0      	cbz	r0, 8009f50 <_svfiprintf_r+0x110>
 8009f22:	9207      	str	r2, [sp, #28]
 8009f24:	e014      	b.n	8009f50 <_svfiprintf_r+0x110>
 8009f26:	eba0 0308 	sub.w	r3, r0, r8
 8009f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	9304      	str	r3, [sp, #16]
 8009f32:	46a2      	mov	sl, r4
 8009f34:	e7d2      	b.n	8009edc <_svfiprintf_r+0x9c>
 8009f36:	9b03      	ldr	r3, [sp, #12]
 8009f38:	1d19      	adds	r1, r3, #4
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	9103      	str	r1, [sp, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	bfbb      	ittet	lt
 8009f42:	425b      	neglt	r3, r3
 8009f44:	f042 0202 	orrlt.w	r2, r2, #2
 8009f48:	9307      	strge	r3, [sp, #28]
 8009f4a:	9307      	strlt	r3, [sp, #28]
 8009f4c:	bfb8      	it	lt
 8009f4e:	9204      	strlt	r2, [sp, #16]
 8009f50:	7823      	ldrb	r3, [r4, #0]
 8009f52:	2b2e      	cmp	r3, #46	; 0x2e
 8009f54:	d10c      	bne.n	8009f70 <_svfiprintf_r+0x130>
 8009f56:	7863      	ldrb	r3, [r4, #1]
 8009f58:	2b2a      	cmp	r3, #42	; 0x2a
 8009f5a:	d134      	bne.n	8009fc6 <_svfiprintf_r+0x186>
 8009f5c:	9b03      	ldr	r3, [sp, #12]
 8009f5e:	1d1a      	adds	r2, r3, #4
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	9203      	str	r2, [sp, #12]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	bfb8      	it	lt
 8009f68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f6c:	3402      	adds	r4, #2
 8009f6e:	9305      	str	r3, [sp, #20]
 8009f70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a038 <_svfiprintf_r+0x1f8>
 8009f74:	7821      	ldrb	r1, [r4, #0]
 8009f76:	2203      	movs	r2, #3
 8009f78:	4650      	mov	r0, sl
 8009f7a:	f7f6 f951 	bl	8000220 <memchr>
 8009f7e:	b138      	cbz	r0, 8009f90 <_svfiprintf_r+0x150>
 8009f80:	9b04      	ldr	r3, [sp, #16]
 8009f82:	eba0 000a 	sub.w	r0, r0, sl
 8009f86:	2240      	movs	r2, #64	; 0x40
 8009f88:	4082      	lsls	r2, r0
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	3401      	adds	r4, #1
 8009f8e:	9304      	str	r3, [sp, #16]
 8009f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f94:	4825      	ldr	r0, [pc, #148]	; (800a02c <_svfiprintf_r+0x1ec>)
 8009f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f9a:	2206      	movs	r2, #6
 8009f9c:	f7f6 f940 	bl	8000220 <memchr>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d038      	beq.n	800a016 <_svfiprintf_r+0x1d6>
 8009fa4:	4b22      	ldr	r3, [pc, #136]	; (800a030 <_svfiprintf_r+0x1f0>)
 8009fa6:	bb1b      	cbnz	r3, 8009ff0 <_svfiprintf_r+0x1b0>
 8009fa8:	9b03      	ldr	r3, [sp, #12]
 8009faa:	3307      	adds	r3, #7
 8009fac:	f023 0307 	bic.w	r3, r3, #7
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	9303      	str	r3, [sp, #12]
 8009fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb6:	4433      	add	r3, r6
 8009fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fba:	e768      	b.n	8009e8e <_svfiprintf_r+0x4e>
 8009fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fc0:	460c      	mov	r4, r1
 8009fc2:	2001      	movs	r0, #1
 8009fc4:	e7a6      	b.n	8009f14 <_svfiprintf_r+0xd4>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	3401      	adds	r4, #1
 8009fca:	9305      	str	r3, [sp, #20]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	f04f 0c0a 	mov.w	ip, #10
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fd8:	3a30      	subs	r2, #48	; 0x30
 8009fda:	2a09      	cmp	r2, #9
 8009fdc:	d903      	bls.n	8009fe6 <_svfiprintf_r+0x1a6>
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0c6      	beq.n	8009f70 <_svfiprintf_r+0x130>
 8009fe2:	9105      	str	r1, [sp, #20]
 8009fe4:	e7c4      	b.n	8009f70 <_svfiprintf_r+0x130>
 8009fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fea:	4604      	mov	r4, r0
 8009fec:	2301      	movs	r3, #1
 8009fee:	e7f0      	b.n	8009fd2 <_svfiprintf_r+0x192>
 8009ff0:	ab03      	add	r3, sp, #12
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	462a      	mov	r2, r5
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	; (800a034 <_svfiprintf_r+0x1f4>)
 8009ff8:	a904      	add	r1, sp, #16
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	f3af 8000 	nop.w
 800a000:	1c42      	adds	r2, r0, #1
 800a002:	4606      	mov	r6, r0
 800a004:	d1d6      	bne.n	8009fb4 <_svfiprintf_r+0x174>
 800a006:	89ab      	ldrh	r3, [r5, #12]
 800a008:	065b      	lsls	r3, r3, #25
 800a00a:	f53f af2d 	bmi.w	8009e68 <_svfiprintf_r+0x28>
 800a00e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a010:	b01d      	add	sp, #116	; 0x74
 800a012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a016:	ab03      	add	r3, sp, #12
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	462a      	mov	r2, r5
 800a01c:	4b05      	ldr	r3, [pc, #20]	; (800a034 <_svfiprintf_r+0x1f4>)
 800a01e:	a904      	add	r1, sp, #16
 800a020:	4638      	mov	r0, r7
 800a022:	f000 fa5d 	bl	800a4e0 <_printf_i>
 800a026:	e7eb      	b.n	800a000 <_svfiprintf_r+0x1c0>
 800a028:	0800cf4c 	.word	0x0800cf4c
 800a02c:	0800cf56 	.word	0x0800cf56
 800a030:	00000000 	.word	0x00000000
 800a034:	08009d8b 	.word	0x08009d8b
 800a038:	0800cf52 	.word	0x0800cf52

0800a03c <__sfputc_r>:
 800a03c:	6893      	ldr	r3, [r2, #8]
 800a03e:	3b01      	subs	r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	b410      	push	{r4}
 800a044:	6093      	str	r3, [r2, #8]
 800a046:	da08      	bge.n	800a05a <__sfputc_r+0x1e>
 800a048:	6994      	ldr	r4, [r2, #24]
 800a04a:	42a3      	cmp	r3, r4
 800a04c:	db01      	blt.n	800a052 <__sfputc_r+0x16>
 800a04e:	290a      	cmp	r1, #10
 800a050:	d103      	bne.n	800a05a <__sfputc_r+0x1e>
 800a052:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a056:	f000 bc91 	b.w	800a97c <__swbuf_r>
 800a05a:	6813      	ldr	r3, [r2, #0]
 800a05c:	1c58      	adds	r0, r3, #1
 800a05e:	6010      	str	r0, [r2, #0]
 800a060:	7019      	strb	r1, [r3, #0]
 800a062:	4608      	mov	r0, r1
 800a064:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <__sfputs_r>:
 800a06a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06c:	4606      	mov	r6, r0
 800a06e:	460f      	mov	r7, r1
 800a070:	4614      	mov	r4, r2
 800a072:	18d5      	adds	r5, r2, r3
 800a074:	42ac      	cmp	r4, r5
 800a076:	d101      	bne.n	800a07c <__sfputs_r+0x12>
 800a078:	2000      	movs	r0, #0
 800a07a:	e007      	b.n	800a08c <__sfputs_r+0x22>
 800a07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a080:	463a      	mov	r2, r7
 800a082:	4630      	mov	r0, r6
 800a084:	f7ff ffda 	bl	800a03c <__sfputc_r>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d1f3      	bne.n	800a074 <__sfputs_r+0xa>
 800a08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a090 <_vfiprintf_r>:
 800a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	460d      	mov	r5, r1
 800a096:	b09d      	sub	sp, #116	; 0x74
 800a098:	4614      	mov	r4, r2
 800a09a:	4698      	mov	r8, r3
 800a09c:	4606      	mov	r6, r0
 800a09e:	b118      	cbz	r0, 800a0a8 <_vfiprintf_r+0x18>
 800a0a0:	6a03      	ldr	r3, [r0, #32]
 800a0a2:	b90b      	cbnz	r3, 800a0a8 <_vfiprintf_r+0x18>
 800a0a4:	f7ff fdba 	bl	8009c1c <__sinit>
 800a0a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0aa:	07d9      	lsls	r1, r3, #31
 800a0ac:	d405      	bmi.n	800a0ba <_vfiprintf_r+0x2a>
 800a0ae:	89ab      	ldrh	r3, [r5, #12]
 800a0b0:	059a      	lsls	r2, r3, #22
 800a0b2:	d402      	bmi.n	800a0ba <_vfiprintf_r+0x2a>
 800a0b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0b6:	f7ff fe66 	bl	8009d86 <__retarget_lock_acquire_recursive>
 800a0ba:	89ab      	ldrh	r3, [r5, #12]
 800a0bc:	071b      	lsls	r3, r3, #28
 800a0be:	d501      	bpl.n	800a0c4 <_vfiprintf_r+0x34>
 800a0c0:	692b      	ldr	r3, [r5, #16]
 800a0c2:	b99b      	cbnz	r3, 800a0ec <_vfiprintf_r+0x5c>
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f000 fc96 	bl	800a9f8 <__swsetup_r>
 800a0cc:	b170      	cbz	r0, 800a0ec <_vfiprintf_r+0x5c>
 800a0ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0d0:	07dc      	lsls	r4, r3, #31
 800a0d2:	d504      	bpl.n	800a0de <_vfiprintf_r+0x4e>
 800a0d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0d8:	b01d      	add	sp, #116	; 0x74
 800a0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0de:	89ab      	ldrh	r3, [r5, #12]
 800a0e0:	0598      	lsls	r0, r3, #22
 800a0e2:	d4f7      	bmi.n	800a0d4 <_vfiprintf_r+0x44>
 800a0e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0e6:	f7ff fe4f 	bl	8009d88 <__retarget_lock_release_recursive>
 800a0ea:	e7f3      	b.n	800a0d4 <_vfiprintf_r+0x44>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f0:	2320      	movs	r3, #32
 800a0f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0fa:	2330      	movs	r3, #48	; 0x30
 800a0fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a2b0 <_vfiprintf_r+0x220>
 800a100:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a104:	f04f 0901 	mov.w	r9, #1
 800a108:	4623      	mov	r3, r4
 800a10a:	469a      	mov	sl, r3
 800a10c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a110:	b10a      	cbz	r2, 800a116 <_vfiprintf_r+0x86>
 800a112:	2a25      	cmp	r2, #37	; 0x25
 800a114:	d1f9      	bne.n	800a10a <_vfiprintf_r+0x7a>
 800a116:	ebba 0b04 	subs.w	fp, sl, r4
 800a11a:	d00b      	beq.n	800a134 <_vfiprintf_r+0xa4>
 800a11c:	465b      	mov	r3, fp
 800a11e:	4622      	mov	r2, r4
 800a120:	4629      	mov	r1, r5
 800a122:	4630      	mov	r0, r6
 800a124:	f7ff ffa1 	bl	800a06a <__sfputs_r>
 800a128:	3001      	adds	r0, #1
 800a12a:	f000 80a9 	beq.w	800a280 <_vfiprintf_r+0x1f0>
 800a12e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a130:	445a      	add	r2, fp
 800a132:	9209      	str	r2, [sp, #36]	; 0x24
 800a134:	f89a 3000 	ldrb.w	r3, [sl]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 80a1 	beq.w	800a280 <_vfiprintf_r+0x1f0>
 800a13e:	2300      	movs	r3, #0
 800a140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a148:	f10a 0a01 	add.w	sl, sl, #1
 800a14c:	9304      	str	r3, [sp, #16]
 800a14e:	9307      	str	r3, [sp, #28]
 800a150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a154:	931a      	str	r3, [sp, #104]	; 0x68
 800a156:	4654      	mov	r4, sl
 800a158:	2205      	movs	r2, #5
 800a15a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a15e:	4854      	ldr	r0, [pc, #336]	; (800a2b0 <_vfiprintf_r+0x220>)
 800a160:	f7f6 f85e 	bl	8000220 <memchr>
 800a164:	9a04      	ldr	r2, [sp, #16]
 800a166:	b9d8      	cbnz	r0, 800a1a0 <_vfiprintf_r+0x110>
 800a168:	06d1      	lsls	r1, r2, #27
 800a16a:	bf44      	itt	mi
 800a16c:	2320      	movmi	r3, #32
 800a16e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a172:	0713      	lsls	r3, r2, #28
 800a174:	bf44      	itt	mi
 800a176:	232b      	movmi	r3, #43	; 0x2b
 800a178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a17c:	f89a 3000 	ldrb.w	r3, [sl]
 800a180:	2b2a      	cmp	r3, #42	; 0x2a
 800a182:	d015      	beq.n	800a1b0 <_vfiprintf_r+0x120>
 800a184:	9a07      	ldr	r2, [sp, #28]
 800a186:	4654      	mov	r4, sl
 800a188:	2000      	movs	r0, #0
 800a18a:	f04f 0c0a 	mov.w	ip, #10
 800a18e:	4621      	mov	r1, r4
 800a190:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a194:	3b30      	subs	r3, #48	; 0x30
 800a196:	2b09      	cmp	r3, #9
 800a198:	d94d      	bls.n	800a236 <_vfiprintf_r+0x1a6>
 800a19a:	b1b0      	cbz	r0, 800a1ca <_vfiprintf_r+0x13a>
 800a19c:	9207      	str	r2, [sp, #28]
 800a19e:	e014      	b.n	800a1ca <_vfiprintf_r+0x13a>
 800a1a0:	eba0 0308 	sub.w	r3, r0, r8
 800a1a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	9304      	str	r3, [sp, #16]
 800a1ac:	46a2      	mov	sl, r4
 800a1ae:	e7d2      	b.n	800a156 <_vfiprintf_r+0xc6>
 800a1b0:	9b03      	ldr	r3, [sp, #12]
 800a1b2:	1d19      	adds	r1, r3, #4
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	9103      	str	r1, [sp, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	bfbb      	ittet	lt
 800a1bc:	425b      	neglt	r3, r3
 800a1be:	f042 0202 	orrlt.w	r2, r2, #2
 800a1c2:	9307      	strge	r3, [sp, #28]
 800a1c4:	9307      	strlt	r3, [sp, #28]
 800a1c6:	bfb8      	it	lt
 800a1c8:	9204      	strlt	r2, [sp, #16]
 800a1ca:	7823      	ldrb	r3, [r4, #0]
 800a1cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a1ce:	d10c      	bne.n	800a1ea <_vfiprintf_r+0x15a>
 800a1d0:	7863      	ldrb	r3, [r4, #1]
 800a1d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1d4:	d134      	bne.n	800a240 <_vfiprintf_r+0x1b0>
 800a1d6:	9b03      	ldr	r3, [sp, #12]
 800a1d8:	1d1a      	adds	r2, r3, #4
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	9203      	str	r2, [sp, #12]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	bfb8      	it	lt
 800a1e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a1e6:	3402      	adds	r4, #2
 800a1e8:	9305      	str	r3, [sp, #20]
 800a1ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a2c0 <_vfiprintf_r+0x230>
 800a1ee:	7821      	ldrb	r1, [r4, #0]
 800a1f0:	2203      	movs	r2, #3
 800a1f2:	4650      	mov	r0, sl
 800a1f4:	f7f6 f814 	bl	8000220 <memchr>
 800a1f8:	b138      	cbz	r0, 800a20a <_vfiprintf_r+0x17a>
 800a1fa:	9b04      	ldr	r3, [sp, #16]
 800a1fc:	eba0 000a 	sub.w	r0, r0, sl
 800a200:	2240      	movs	r2, #64	; 0x40
 800a202:	4082      	lsls	r2, r0
 800a204:	4313      	orrs	r3, r2
 800a206:	3401      	adds	r4, #1
 800a208:	9304      	str	r3, [sp, #16]
 800a20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a20e:	4829      	ldr	r0, [pc, #164]	; (800a2b4 <_vfiprintf_r+0x224>)
 800a210:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a214:	2206      	movs	r2, #6
 800a216:	f7f6 f803 	bl	8000220 <memchr>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d03f      	beq.n	800a29e <_vfiprintf_r+0x20e>
 800a21e:	4b26      	ldr	r3, [pc, #152]	; (800a2b8 <_vfiprintf_r+0x228>)
 800a220:	bb1b      	cbnz	r3, 800a26a <_vfiprintf_r+0x1da>
 800a222:	9b03      	ldr	r3, [sp, #12]
 800a224:	3307      	adds	r3, #7
 800a226:	f023 0307 	bic.w	r3, r3, #7
 800a22a:	3308      	adds	r3, #8
 800a22c:	9303      	str	r3, [sp, #12]
 800a22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a230:	443b      	add	r3, r7
 800a232:	9309      	str	r3, [sp, #36]	; 0x24
 800a234:	e768      	b.n	800a108 <_vfiprintf_r+0x78>
 800a236:	fb0c 3202 	mla	r2, ip, r2, r3
 800a23a:	460c      	mov	r4, r1
 800a23c:	2001      	movs	r0, #1
 800a23e:	e7a6      	b.n	800a18e <_vfiprintf_r+0xfe>
 800a240:	2300      	movs	r3, #0
 800a242:	3401      	adds	r4, #1
 800a244:	9305      	str	r3, [sp, #20]
 800a246:	4619      	mov	r1, r3
 800a248:	f04f 0c0a 	mov.w	ip, #10
 800a24c:	4620      	mov	r0, r4
 800a24e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a252:	3a30      	subs	r2, #48	; 0x30
 800a254:	2a09      	cmp	r2, #9
 800a256:	d903      	bls.n	800a260 <_vfiprintf_r+0x1d0>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0c6      	beq.n	800a1ea <_vfiprintf_r+0x15a>
 800a25c:	9105      	str	r1, [sp, #20]
 800a25e:	e7c4      	b.n	800a1ea <_vfiprintf_r+0x15a>
 800a260:	fb0c 2101 	mla	r1, ip, r1, r2
 800a264:	4604      	mov	r4, r0
 800a266:	2301      	movs	r3, #1
 800a268:	e7f0      	b.n	800a24c <_vfiprintf_r+0x1bc>
 800a26a:	ab03      	add	r3, sp, #12
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	462a      	mov	r2, r5
 800a270:	4b12      	ldr	r3, [pc, #72]	; (800a2bc <_vfiprintf_r+0x22c>)
 800a272:	a904      	add	r1, sp, #16
 800a274:	4630      	mov	r0, r6
 800a276:	f3af 8000 	nop.w
 800a27a:	4607      	mov	r7, r0
 800a27c:	1c78      	adds	r0, r7, #1
 800a27e:	d1d6      	bne.n	800a22e <_vfiprintf_r+0x19e>
 800a280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a282:	07d9      	lsls	r1, r3, #31
 800a284:	d405      	bmi.n	800a292 <_vfiprintf_r+0x202>
 800a286:	89ab      	ldrh	r3, [r5, #12]
 800a288:	059a      	lsls	r2, r3, #22
 800a28a:	d402      	bmi.n	800a292 <_vfiprintf_r+0x202>
 800a28c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a28e:	f7ff fd7b 	bl	8009d88 <__retarget_lock_release_recursive>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	065b      	lsls	r3, r3, #25
 800a296:	f53f af1d 	bmi.w	800a0d4 <_vfiprintf_r+0x44>
 800a29a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a29c:	e71c      	b.n	800a0d8 <_vfiprintf_r+0x48>
 800a29e:	ab03      	add	r3, sp, #12
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	4b05      	ldr	r3, [pc, #20]	; (800a2bc <_vfiprintf_r+0x22c>)
 800a2a6:	a904      	add	r1, sp, #16
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f000 f919 	bl	800a4e0 <_printf_i>
 800a2ae:	e7e4      	b.n	800a27a <_vfiprintf_r+0x1ea>
 800a2b0:	0800cf4c 	.word	0x0800cf4c
 800a2b4:	0800cf56 	.word	0x0800cf56
 800a2b8:	00000000 	.word	0x00000000
 800a2bc:	0800a06b 	.word	0x0800a06b
 800a2c0:	0800cf52 	.word	0x0800cf52

0800a2c4 <sbrk_aligned>:
 800a2c4:	b570      	push	{r4, r5, r6, lr}
 800a2c6:	4e0e      	ldr	r6, [pc, #56]	; (800a300 <sbrk_aligned+0x3c>)
 800a2c8:	460c      	mov	r4, r1
 800a2ca:	6831      	ldr	r1, [r6, #0]
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	b911      	cbnz	r1, 800a2d6 <sbrk_aligned+0x12>
 800a2d0:	f000 fcbc 	bl	800ac4c <_sbrk_r>
 800a2d4:	6030      	str	r0, [r6, #0]
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	4628      	mov	r0, r5
 800a2da:	f000 fcb7 	bl	800ac4c <_sbrk_r>
 800a2de:	1c43      	adds	r3, r0, #1
 800a2e0:	d00a      	beq.n	800a2f8 <sbrk_aligned+0x34>
 800a2e2:	1cc4      	adds	r4, r0, #3
 800a2e4:	f024 0403 	bic.w	r4, r4, #3
 800a2e8:	42a0      	cmp	r0, r4
 800a2ea:	d007      	beq.n	800a2fc <sbrk_aligned+0x38>
 800a2ec:	1a21      	subs	r1, r4, r0
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	f000 fcac 	bl	800ac4c <_sbrk_r>
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	d101      	bne.n	800a2fc <sbrk_aligned+0x38>
 800a2f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	bd70      	pop	{r4, r5, r6, pc}
 800a300:	20006d2c 	.word	0x20006d2c

0800a304 <_malloc_r>:
 800a304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a308:	1ccd      	adds	r5, r1, #3
 800a30a:	f025 0503 	bic.w	r5, r5, #3
 800a30e:	3508      	adds	r5, #8
 800a310:	2d0c      	cmp	r5, #12
 800a312:	bf38      	it	cc
 800a314:	250c      	movcc	r5, #12
 800a316:	2d00      	cmp	r5, #0
 800a318:	4607      	mov	r7, r0
 800a31a:	db01      	blt.n	800a320 <_malloc_r+0x1c>
 800a31c:	42a9      	cmp	r1, r5
 800a31e:	d905      	bls.n	800a32c <_malloc_r+0x28>
 800a320:	230c      	movs	r3, #12
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	2600      	movs	r6, #0
 800a326:	4630      	mov	r0, r6
 800a328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a32c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a400 <_malloc_r+0xfc>
 800a330:	f000 faa6 	bl	800a880 <__malloc_lock>
 800a334:	f8d8 3000 	ldr.w	r3, [r8]
 800a338:	461c      	mov	r4, r3
 800a33a:	bb5c      	cbnz	r4, 800a394 <_malloc_r+0x90>
 800a33c:	4629      	mov	r1, r5
 800a33e:	4638      	mov	r0, r7
 800a340:	f7ff ffc0 	bl	800a2c4 <sbrk_aligned>
 800a344:	1c43      	adds	r3, r0, #1
 800a346:	4604      	mov	r4, r0
 800a348:	d155      	bne.n	800a3f6 <_malloc_r+0xf2>
 800a34a:	f8d8 4000 	ldr.w	r4, [r8]
 800a34e:	4626      	mov	r6, r4
 800a350:	2e00      	cmp	r6, #0
 800a352:	d145      	bne.n	800a3e0 <_malloc_r+0xdc>
 800a354:	2c00      	cmp	r4, #0
 800a356:	d048      	beq.n	800a3ea <_malloc_r+0xe6>
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	4631      	mov	r1, r6
 800a35c:	4638      	mov	r0, r7
 800a35e:	eb04 0903 	add.w	r9, r4, r3
 800a362:	f000 fc73 	bl	800ac4c <_sbrk_r>
 800a366:	4581      	cmp	r9, r0
 800a368:	d13f      	bne.n	800a3ea <_malloc_r+0xe6>
 800a36a:	6821      	ldr	r1, [r4, #0]
 800a36c:	1a6d      	subs	r5, r5, r1
 800a36e:	4629      	mov	r1, r5
 800a370:	4638      	mov	r0, r7
 800a372:	f7ff ffa7 	bl	800a2c4 <sbrk_aligned>
 800a376:	3001      	adds	r0, #1
 800a378:	d037      	beq.n	800a3ea <_malloc_r+0xe6>
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	442b      	add	r3, r5
 800a37e:	6023      	str	r3, [r4, #0]
 800a380:	f8d8 3000 	ldr.w	r3, [r8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d038      	beq.n	800a3fa <_malloc_r+0xf6>
 800a388:	685a      	ldr	r2, [r3, #4]
 800a38a:	42a2      	cmp	r2, r4
 800a38c:	d12b      	bne.n	800a3e6 <_malloc_r+0xe2>
 800a38e:	2200      	movs	r2, #0
 800a390:	605a      	str	r2, [r3, #4]
 800a392:	e00f      	b.n	800a3b4 <_malloc_r+0xb0>
 800a394:	6822      	ldr	r2, [r4, #0]
 800a396:	1b52      	subs	r2, r2, r5
 800a398:	d41f      	bmi.n	800a3da <_malloc_r+0xd6>
 800a39a:	2a0b      	cmp	r2, #11
 800a39c:	d917      	bls.n	800a3ce <_malloc_r+0xca>
 800a39e:	1961      	adds	r1, r4, r5
 800a3a0:	42a3      	cmp	r3, r4
 800a3a2:	6025      	str	r5, [r4, #0]
 800a3a4:	bf18      	it	ne
 800a3a6:	6059      	strne	r1, [r3, #4]
 800a3a8:	6863      	ldr	r3, [r4, #4]
 800a3aa:	bf08      	it	eq
 800a3ac:	f8c8 1000 	streq.w	r1, [r8]
 800a3b0:	5162      	str	r2, [r4, r5]
 800a3b2:	604b      	str	r3, [r1, #4]
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	f104 060b 	add.w	r6, r4, #11
 800a3ba:	f000 fa67 	bl	800a88c <__malloc_unlock>
 800a3be:	f026 0607 	bic.w	r6, r6, #7
 800a3c2:	1d23      	adds	r3, r4, #4
 800a3c4:	1af2      	subs	r2, r6, r3
 800a3c6:	d0ae      	beq.n	800a326 <_malloc_r+0x22>
 800a3c8:	1b9b      	subs	r3, r3, r6
 800a3ca:	50a3      	str	r3, [r4, r2]
 800a3cc:	e7ab      	b.n	800a326 <_malloc_r+0x22>
 800a3ce:	42a3      	cmp	r3, r4
 800a3d0:	6862      	ldr	r2, [r4, #4]
 800a3d2:	d1dd      	bne.n	800a390 <_malloc_r+0x8c>
 800a3d4:	f8c8 2000 	str.w	r2, [r8]
 800a3d8:	e7ec      	b.n	800a3b4 <_malloc_r+0xb0>
 800a3da:	4623      	mov	r3, r4
 800a3dc:	6864      	ldr	r4, [r4, #4]
 800a3de:	e7ac      	b.n	800a33a <_malloc_r+0x36>
 800a3e0:	4634      	mov	r4, r6
 800a3e2:	6876      	ldr	r6, [r6, #4]
 800a3e4:	e7b4      	b.n	800a350 <_malloc_r+0x4c>
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	e7cc      	b.n	800a384 <_malloc_r+0x80>
 800a3ea:	230c      	movs	r3, #12
 800a3ec:	603b      	str	r3, [r7, #0]
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	f000 fa4c 	bl	800a88c <__malloc_unlock>
 800a3f4:	e797      	b.n	800a326 <_malloc_r+0x22>
 800a3f6:	6025      	str	r5, [r4, #0]
 800a3f8:	e7dc      	b.n	800a3b4 <_malloc_r+0xb0>
 800a3fa:	605b      	str	r3, [r3, #4]
 800a3fc:	deff      	udf	#255	; 0xff
 800a3fe:	bf00      	nop
 800a400:	20006d28 	.word	0x20006d28

0800a404 <_printf_common>:
 800a404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a408:	4616      	mov	r6, r2
 800a40a:	4699      	mov	r9, r3
 800a40c:	688a      	ldr	r2, [r1, #8]
 800a40e:	690b      	ldr	r3, [r1, #16]
 800a410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a414:	4293      	cmp	r3, r2
 800a416:	bfb8      	it	lt
 800a418:	4613      	movlt	r3, r2
 800a41a:	6033      	str	r3, [r6, #0]
 800a41c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a420:	4607      	mov	r7, r0
 800a422:	460c      	mov	r4, r1
 800a424:	b10a      	cbz	r2, 800a42a <_printf_common+0x26>
 800a426:	3301      	adds	r3, #1
 800a428:	6033      	str	r3, [r6, #0]
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	0699      	lsls	r1, r3, #26
 800a42e:	bf42      	ittt	mi
 800a430:	6833      	ldrmi	r3, [r6, #0]
 800a432:	3302      	addmi	r3, #2
 800a434:	6033      	strmi	r3, [r6, #0]
 800a436:	6825      	ldr	r5, [r4, #0]
 800a438:	f015 0506 	ands.w	r5, r5, #6
 800a43c:	d106      	bne.n	800a44c <_printf_common+0x48>
 800a43e:	f104 0a19 	add.w	sl, r4, #25
 800a442:	68e3      	ldr	r3, [r4, #12]
 800a444:	6832      	ldr	r2, [r6, #0]
 800a446:	1a9b      	subs	r3, r3, r2
 800a448:	42ab      	cmp	r3, r5
 800a44a:	dc26      	bgt.n	800a49a <_printf_common+0x96>
 800a44c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a450:	1e13      	subs	r3, r2, #0
 800a452:	6822      	ldr	r2, [r4, #0]
 800a454:	bf18      	it	ne
 800a456:	2301      	movne	r3, #1
 800a458:	0692      	lsls	r2, r2, #26
 800a45a:	d42b      	bmi.n	800a4b4 <_printf_common+0xb0>
 800a45c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a460:	4649      	mov	r1, r9
 800a462:	4638      	mov	r0, r7
 800a464:	47c0      	blx	r8
 800a466:	3001      	adds	r0, #1
 800a468:	d01e      	beq.n	800a4a8 <_printf_common+0xa4>
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	6922      	ldr	r2, [r4, #16]
 800a46e:	f003 0306 	and.w	r3, r3, #6
 800a472:	2b04      	cmp	r3, #4
 800a474:	bf02      	ittt	eq
 800a476:	68e5      	ldreq	r5, [r4, #12]
 800a478:	6833      	ldreq	r3, [r6, #0]
 800a47a:	1aed      	subeq	r5, r5, r3
 800a47c:	68a3      	ldr	r3, [r4, #8]
 800a47e:	bf0c      	ite	eq
 800a480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a484:	2500      	movne	r5, #0
 800a486:	4293      	cmp	r3, r2
 800a488:	bfc4      	itt	gt
 800a48a:	1a9b      	subgt	r3, r3, r2
 800a48c:	18ed      	addgt	r5, r5, r3
 800a48e:	2600      	movs	r6, #0
 800a490:	341a      	adds	r4, #26
 800a492:	42b5      	cmp	r5, r6
 800a494:	d11a      	bne.n	800a4cc <_printf_common+0xc8>
 800a496:	2000      	movs	r0, #0
 800a498:	e008      	b.n	800a4ac <_printf_common+0xa8>
 800a49a:	2301      	movs	r3, #1
 800a49c:	4652      	mov	r2, sl
 800a49e:	4649      	mov	r1, r9
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	47c0      	blx	r8
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	d103      	bne.n	800a4b0 <_printf_common+0xac>
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b0:	3501      	adds	r5, #1
 800a4b2:	e7c6      	b.n	800a442 <_printf_common+0x3e>
 800a4b4:	18e1      	adds	r1, r4, r3
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	2030      	movs	r0, #48	; 0x30
 800a4ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4be:	4422      	add	r2, r4
 800a4c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4c8:	3302      	adds	r3, #2
 800a4ca:	e7c7      	b.n	800a45c <_printf_common+0x58>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	4622      	mov	r2, r4
 800a4d0:	4649      	mov	r1, r9
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	47c0      	blx	r8
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	d0e6      	beq.n	800a4a8 <_printf_common+0xa4>
 800a4da:	3601      	adds	r6, #1
 800a4dc:	e7d9      	b.n	800a492 <_printf_common+0x8e>
	...

0800a4e0 <_printf_i>:
 800a4e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e4:	7e0f      	ldrb	r7, [r1, #24]
 800a4e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a4e8:	2f78      	cmp	r7, #120	; 0x78
 800a4ea:	4691      	mov	r9, r2
 800a4ec:	4680      	mov	r8, r0
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	469a      	mov	sl, r3
 800a4f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a4f6:	d807      	bhi.n	800a508 <_printf_i+0x28>
 800a4f8:	2f62      	cmp	r7, #98	; 0x62
 800a4fa:	d80a      	bhi.n	800a512 <_printf_i+0x32>
 800a4fc:	2f00      	cmp	r7, #0
 800a4fe:	f000 80d4 	beq.w	800a6aa <_printf_i+0x1ca>
 800a502:	2f58      	cmp	r7, #88	; 0x58
 800a504:	f000 80c0 	beq.w	800a688 <_printf_i+0x1a8>
 800a508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a50c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a510:	e03a      	b.n	800a588 <_printf_i+0xa8>
 800a512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a516:	2b15      	cmp	r3, #21
 800a518:	d8f6      	bhi.n	800a508 <_printf_i+0x28>
 800a51a:	a101      	add	r1, pc, #4	; (adr r1, 800a520 <_printf_i+0x40>)
 800a51c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a520:	0800a579 	.word	0x0800a579
 800a524:	0800a58d 	.word	0x0800a58d
 800a528:	0800a509 	.word	0x0800a509
 800a52c:	0800a509 	.word	0x0800a509
 800a530:	0800a509 	.word	0x0800a509
 800a534:	0800a509 	.word	0x0800a509
 800a538:	0800a58d 	.word	0x0800a58d
 800a53c:	0800a509 	.word	0x0800a509
 800a540:	0800a509 	.word	0x0800a509
 800a544:	0800a509 	.word	0x0800a509
 800a548:	0800a509 	.word	0x0800a509
 800a54c:	0800a691 	.word	0x0800a691
 800a550:	0800a5b9 	.word	0x0800a5b9
 800a554:	0800a64b 	.word	0x0800a64b
 800a558:	0800a509 	.word	0x0800a509
 800a55c:	0800a509 	.word	0x0800a509
 800a560:	0800a6b3 	.word	0x0800a6b3
 800a564:	0800a509 	.word	0x0800a509
 800a568:	0800a5b9 	.word	0x0800a5b9
 800a56c:	0800a509 	.word	0x0800a509
 800a570:	0800a509 	.word	0x0800a509
 800a574:	0800a653 	.word	0x0800a653
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	1d1a      	adds	r2, r3, #4
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	602a      	str	r2, [r5, #0]
 800a580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a588:	2301      	movs	r3, #1
 800a58a:	e09f      	b.n	800a6cc <_printf_i+0x1ec>
 800a58c:	6820      	ldr	r0, [r4, #0]
 800a58e:	682b      	ldr	r3, [r5, #0]
 800a590:	0607      	lsls	r7, r0, #24
 800a592:	f103 0104 	add.w	r1, r3, #4
 800a596:	6029      	str	r1, [r5, #0]
 800a598:	d501      	bpl.n	800a59e <_printf_i+0xbe>
 800a59a:	681e      	ldr	r6, [r3, #0]
 800a59c:	e003      	b.n	800a5a6 <_printf_i+0xc6>
 800a59e:	0646      	lsls	r6, r0, #25
 800a5a0:	d5fb      	bpl.n	800a59a <_printf_i+0xba>
 800a5a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a5a6:	2e00      	cmp	r6, #0
 800a5a8:	da03      	bge.n	800a5b2 <_printf_i+0xd2>
 800a5aa:	232d      	movs	r3, #45	; 0x2d
 800a5ac:	4276      	negs	r6, r6
 800a5ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5b2:	485a      	ldr	r0, [pc, #360]	; (800a71c <_printf_i+0x23c>)
 800a5b4:	230a      	movs	r3, #10
 800a5b6:	e012      	b.n	800a5de <_printf_i+0xfe>
 800a5b8:	682b      	ldr	r3, [r5, #0]
 800a5ba:	6820      	ldr	r0, [r4, #0]
 800a5bc:	1d19      	adds	r1, r3, #4
 800a5be:	6029      	str	r1, [r5, #0]
 800a5c0:	0605      	lsls	r5, r0, #24
 800a5c2:	d501      	bpl.n	800a5c8 <_printf_i+0xe8>
 800a5c4:	681e      	ldr	r6, [r3, #0]
 800a5c6:	e002      	b.n	800a5ce <_printf_i+0xee>
 800a5c8:	0641      	lsls	r1, r0, #25
 800a5ca:	d5fb      	bpl.n	800a5c4 <_printf_i+0xe4>
 800a5cc:	881e      	ldrh	r6, [r3, #0]
 800a5ce:	4853      	ldr	r0, [pc, #332]	; (800a71c <_printf_i+0x23c>)
 800a5d0:	2f6f      	cmp	r7, #111	; 0x6f
 800a5d2:	bf0c      	ite	eq
 800a5d4:	2308      	moveq	r3, #8
 800a5d6:	230a      	movne	r3, #10
 800a5d8:	2100      	movs	r1, #0
 800a5da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5de:	6865      	ldr	r5, [r4, #4]
 800a5e0:	60a5      	str	r5, [r4, #8]
 800a5e2:	2d00      	cmp	r5, #0
 800a5e4:	bfa2      	ittt	ge
 800a5e6:	6821      	ldrge	r1, [r4, #0]
 800a5e8:	f021 0104 	bicge.w	r1, r1, #4
 800a5ec:	6021      	strge	r1, [r4, #0]
 800a5ee:	b90e      	cbnz	r6, 800a5f4 <_printf_i+0x114>
 800a5f0:	2d00      	cmp	r5, #0
 800a5f2:	d04b      	beq.n	800a68c <_printf_i+0x1ac>
 800a5f4:	4615      	mov	r5, r2
 800a5f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a5fa:	fb03 6711 	mls	r7, r3, r1, r6
 800a5fe:	5dc7      	ldrb	r7, [r0, r7]
 800a600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a604:	4637      	mov	r7, r6
 800a606:	42bb      	cmp	r3, r7
 800a608:	460e      	mov	r6, r1
 800a60a:	d9f4      	bls.n	800a5f6 <_printf_i+0x116>
 800a60c:	2b08      	cmp	r3, #8
 800a60e:	d10b      	bne.n	800a628 <_printf_i+0x148>
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	07de      	lsls	r6, r3, #31
 800a614:	d508      	bpl.n	800a628 <_printf_i+0x148>
 800a616:	6923      	ldr	r3, [r4, #16]
 800a618:	6861      	ldr	r1, [r4, #4]
 800a61a:	4299      	cmp	r1, r3
 800a61c:	bfde      	ittt	le
 800a61e:	2330      	movle	r3, #48	; 0x30
 800a620:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a624:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a628:	1b52      	subs	r2, r2, r5
 800a62a:	6122      	str	r2, [r4, #16]
 800a62c:	f8cd a000 	str.w	sl, [sp]
 800a630:	464b      	mov	r3, r9
 800a632:	aa03      	add	r2, sp, #12
 800a634:	4621      	mov	r1, r4
 800a636:	4640      	mov	r0, r8
 800a638:	f7ff fee4 	bl	800a404 <_printf_common>
 800a63c:	3001      	adds	r0, #1
 800a63e:	d14a      	bne.n	800a6d6 <_printf_i+0x1f6>
 800a640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a644:	b004      	add	sp, #16
 800a646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	f043 0320 	orr.w	r3, r3, #32
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	4833      	ldr	r0, [pc, #204]	; (800a720 <_printf_i+0x240>)
 800a654:	2778      	movs	r7, #120	; 0x78
 800a656:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	6829      	ldr	r1, [r5, #0]
 800a65e:	061f      	lsls	r7, r3, #24
 800a660:	f851 6b04 	ldr.w	r6, [r1], #4
 800a664:	d402      	bmi.n	800a66c <_printf_i+0x18c>
 800a666:	065f      	lsls	r7, r3, #25
 800a668:	bf48      	it	mi
 800a66a:	b2b6      	uxthmi	r6, r6
 800a66c:	07df      	lsls	r7, r3, #31
 800a66e:	bf48      	it	mi
 800a670:	f043 0320 	orrmi.w	r3, r3, #32
 800a674:	6029      	str	r1, [r5, #0]
 800a676:	bf48      	it	mi
 800a678:	6023      	strmi	r3, [r4, #0]
 800a67a:	b91e      	cbnz	r6, 800a684 <_printf_i+0x1a4>
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	f023 0320 	bic.w	r3, r3, #32
 800a682:	6023      	str	r3, [r4, #0]
 800a684:	2310      	movs	r3, #16
 800a686:	e7a7      	b.n	800a5d8 <_printf_i+0xf8>
 800a688:	4824      	ldr	r0, [pc, #144]	; (800a71c <_printf_i+0x23c>)
 800a68a:	e7e4      	b.n	800a656 <_printf_i+0x176>
 800a68c:	4615      	mov	r5, r2
 800a68e:	e7bd      	b.n	800a60c <_printf_i+0x12c>
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	6826      	ldr	r6, [r4, #0]
 800a694:	6961      	ldr	r1, [r4, #20]
 800a696:	1d18      	adds	r0, r3, #4
 800a698:	6028      	str	r0, [r5, #0]
 800a69a:	0635      	lsls	r5, r6, #24
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	d501      	bpl.n	800a6a4 <_printf_i+0x1c4>
 800a6a0:	6019      	str	r1, [r3, #0]
 800a6a2:	e002      	b.n	800a6aa <_printf_i+0x1ca>
 800a6a4:	0670      	lsls	r0, r6, #25
 800a6a6:	d5fb      	bpl.n	800a6a0 <_printf_i+0x1c0>
 800a6a8:	8019      	strh	r1, [r3, #0]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	6123      	str	r3, [r4, #16]
 800a6ae:	4615      	mov	r5, r2
 800a6b0:	e7bc      	b.n	800a62c <_printf_i+0x14c>
 800a6b2:	682b      	ldr	r3, [r5, #0]
 800a6b4:	1d1a      	adds	r2, r3, #4
 800a6b6:	602a      	str	r2, [r5, #0]
 800a6b8:	681d      	ldr	r5, [r3, #0]
 800a6ba:	6862      	ldr	r2, [r4, #4]
 800a6bc:	2100      	movs	r1, #0
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f7f5 fdae 	bl	8000220 <memchr>
 800a6c4:	b108      	cbz	r0, 800a6ca <_printf_i+0x1ea>
 800a6c6:	1b40      	subs	r0, r0, r5
 800a6c8:	6060      	str	r0, [r4, #4]
 800a6ca:	6863      	ldr	r3, [r4, #4]
 800a6cc:	6123      	str	r3, [r4, #16]
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6d4:	e7aa      	b.n	800a62c <_printf_i+0x14c>
 800a6d6:	6923      	ldr	r3, [r4, #16]
 800a6d8:	462a      	mov	r2, r5
 800a6da:	4649      	mov	r1, r9
 800a6dc:	4640      	mov	r0, r8
 800a6de:	47d0      	blx	sl
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d0ad      	beq.n	800a640 <_printf_i+0x160>
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	079b      	lsls	r3, r3, #30
 800a6e8:	d413      	bmi.n	800a712 <_printf_i+0x232>
 800a6ea:	68e0      	ldr	r0, [r4, #12]
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	4298      	cmp	r0, r3
 800a6f0:	bfb8      	it	lt
 800a6f2:	4618      	movlt	r0, r3
 800a6f4:	e7a6      	b.n	800a644 <_printf_i+0x164>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	47d0      	blx	sl
 800a700:	3001      	adds	r0, #1
 800a702:	d09d      	beq.n	800a640 <_printf_i+0x160>
 800a704:	3501      	adds	r5, #1
 800a706:	68e3      	ldr	r3, [r4, #12]
 800a708:	9903      	ldr	r1, [sp, #12]
 800a70a:	1a5b      	subs	r3, r3, r1
 800a70c:	42ab      	cmp	r3, r5
 800a70e:	dcf2      	bgt.n	800a6f6 <_printf_i+0x216>
 800a710:	e7eb      	b.n	800a6ea <_printf_i+0x20a>
 800a712:	2500      	movs	r5, #0
 800a714:	f104 0619 	add.w	r6, r4, #25
 800a718:	e7f5      	b.n	800a706 <_printf_i+0x226>
 800a71a:	bf00      	nop
 800a71c:	0800cf5d 	.word	0x0800cf5d
 800a720:	0800cf6e 	.word	0x0800cf6e

0800a724 <__sflush_r>:
 800a724:	898a      	ldrh	r2, [r1, #12]
 800a726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a72a:	4605      	mov	r5, r0
 800a72c:	0710      	lsls	r0, r2, #28
 800a72e:	460c      	mov	r4, r1
 800a730:	d458      	bmi.n	800a7e4 <__sflush_r+0xc0>
 800a732:	684b      	ldr	r3, [r1, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	dc05      	bgt.n	800a744 <__sflush_r+0x20>
 800a738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	dc02      	bgt.n	800a744 <__sflush_r+0x20>
 800a73e:	2000      	movs	r0, #0
 800a740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a746:	2e00      	cmp	r6, #0
 800a748:	d0f9      	beq.n	800a73e <__sflush_r+0x1a>
 800a74a:	2300      	movs	r3, #0
 800a74c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a750:	682f      	ldr	r7, [r5, #0]
 800a752:	6a21      	ldr	r1, [r4, #32]
 800a754:	602b      	str	r3, [r5, #0]
 800a756:	d032      	beq.n	800a7be <__sflush_r+0x9a>
 800a758:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	075a      	lsls	r2, r3, #29
 800a75e:	d505      	bpl.n	800a76c <__sflush_r+0x48>
 800a760:	6863      	ldr	r3, [r4, #4]
 800a762:	1ac0      	subs	r0, r0, r3
 800a764:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a766:	b10b      	cbz	r3, 800a76c <__sflush_r+0x48>
 800a768:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a76a:	1ac0      	subs	r0, r0, r3
 800a76c:	2300      	movs	r3, #0
 800a76e:	4602      	mov	r2, r0
 800a770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a772:	6a21      	ldr	r1, [r4, #32]
 800a774:	4628      	mov	r0, r5
 800a776:	47b0      	blx	r6
 800a778:	1c43      	adds	r3, r0, #1
 800a77a:	89a3      	ldrh	r3, [r4, #12]
 800a77c:	d106      	bne.n	800a78c <__sflush_r+0x68>
 800a77e:	6829      	ldr	r1, [r5, #0]
 800a780:	291d      	cmp	r1, #29
 800a782:	d82b      	bhi.n	800a7dc <__sflush_r+0xb8>
 800a784:	4a29      	ldr	r2, [pc, #164]	; (800a82c <__sflush_r+0x108>)
 800a786:	410a      	asrs	r2, r1
 800a788:	07d6      	lsls	r6, r2, #31
 800a78a:	d427      	bmi.n	800a7dc <__sflush_r+0xb8>
 800a78c:	2200      	movs	r2, #0
 800a78e:	6062      	str	r2, [r4, #4]
 800a790:	04d9      	lsls	r1, r3, #19
 800a792:	6922      	ldr	r2, [r4, #16]
 800a794:	6022      	str	r2, [r4, #0]
 800a796:	d504      	bpl.n	800a7a2 <__sflush_r+0x7e>
 800a798:	1c42      	adds	r2, r0, #1
 800a79a:	d101      	bne.n	800a7a0 <__sflush_r+0x7c>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	b903      	cbnz	r3, 800a7a2 <__sflush_r+0x7e>
 800a7a0:	6560      	str	r0, [r4, #84]	; 0x54
 800a7a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7a4:	602f      	str	r7, [r5, #0]
 800a7a6:	2900      	cmp	r1, #0
 800a7a8:	d0c9      	beq.n	800a73e <__sflush_r+0x1a>
 800a7aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7ae:	4299      	cmp	r1, r3
 800a7b0:	d002      	beq.n	800a7b8 <__sflush_r+0x94>
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	f000 fa7a 	bl	800acac <_free_r>
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	6360      	str	r0, [r4, #52]	; 0x34
 800a7bc:	e7c0      	b.n	800a740 <__sflush_r+0x1c>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	47b0      	blx	r6
 800a7c4:	1c41      	adds	r1, r0, #1
 800a7c6:	d1c8      	bne.n	800a75a <__sflush_r+0x36>
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d0c5      	beq.n	800a75a <__sflush_r+0x36>
 800a7ce:	2b1d      	cmp	r3, #29
 800a7d0:	d001      	beq.n	800a7d6 <__sflush_r+0xb2>
 800a7d2:	2b16      	cmp	r3, #22
 800a7d4:	d101      	bne.n	800a7da <__sflush_r+0xb6>
 800a7d6:	602f      	str	r7, [r5, #0]
 800a7d8:	e7b1      	b.n	800a73e <__sflush_r+0x1a>
 800a7da:	89a3      	ldrh	r3, [r4, #12]
 800a7dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7e0:	81a3      	strh	r3, [r4, #12]
 800a7e2:	e7ad      	b.n	800a740 <__sflush_r+0x1c>
 800a7e4:	690f      	ldr	r7, [r1, #16]
 800a7e6:	2f00      	cmp	r7, #0
 800a7e8:	d0a9      	beq.n	800a73e <__sflush_r+0x1a>
 800a7ea:	0793      	lsls	r3, r2, #30
 800a7ec:	680e      	ldr	r6, [r1, #0]
 800a7ee:	bf08      	it	eq
 800a7f0:	694b      	ldreq	r3, [r1, #20]
 800a7f2:	600f      	str	r7, [r1, #0]
 800a7f4:	bf18      	it	ne
 800a7f6:	2300      	movne	r3, #0
 800a7f8:	eba6 0807 	sub.w	r8, r6, r7
 800a7fc:	608b      	str	r3, [r1, #8]
 800a7fe:	f1b8 0f00 	cmp.w	r8, #0
 800a802:	dd9c      	ble.n	800a73e <__sflush_r+0x1a>
 800a804:	6a21      	ldr	r1, [r4, #32]
 800a806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a808:	4643      	mov	r3, r8
 800a80a:	463a      	mov	r2, r7
 800a80c:	4628      	mov	r0, r5
 800a80e:	47b0      	blx	r6
 800a810:	2800      	cmp	r0, #0
 800a812:	dc06      	bgt.n	800a822 <__sflush_r+0xfe>
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a81a:	81a3      	strh	r3, [r4, #12]
 800a81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a820:	e78e      	b.n	800a740 <__sflush_r+0x1c>
 800a822:	4407      	add	r7, r0
 800a824:	eba8 0800 	sub.w	r8, r8, r0
 800a828:	e7e9      	b.n	800a7fe <__sflush_r+0xda>
 800a82a:	bf00      	nop
 800a82c:	dfbffffe 	.word	0xdfbffffe

0800a830 <_fflush_r>:
 800a830:	b538      	push	{r3, r4, r5, lr}
 800a832:	690b      	ldr	r3, [r1, #16]
 800a834:	4605      	mov	r5, r0
 800a836:	460c      	mov	r4, r1
 800a838:	b913      	cbnz	r3, 800a840 <_fflush_r+0x10>
 800a83a:	2500      	movs	r5, #0
 800a83c:	4628      	mov	r0, r5
 800a83e:	bd38      	pop	{r3, r4, r5, pc}
 800a840:	b118      	cbz	r0, 800a84a <_fflush_r+0x1a>
 800a842:	6a03      	ldr	r3, [r0, #32]
 800a844:	b90b      	cbnz	r3, 800a84a <_fflush_r+0x1a>
 800a846:	f7ff f9e9 	bl	8009c1c <__sinit>
 800a84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d0f3      	beq.n	800a83a <_fflush_r+0xa>
 800a852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a854:	07d0      	lsls	r0, r2, #31
 800a856:	d404      	bmi.n	800a862 <_fflush_r+0x32>
 800a858:	0599      	lsls	r1, r3, #22
 800a85a:	d402      	bmi.n	800a862 <_fflush_r+0x32>
 800a85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a85e:	f7ff fa92 	bl	8009d86 <__retarget_lock_acquire_recursive>
 800a862:	4628      	mov	r0, r5
 800a864:	4621      	mov	r1, r4
 800a866:	f7ff ff5d 	bl	800a724 <__sflush_r>
 800a86a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a86c:	07da      	lsls	r2, r3, #31
 800a86e:	4605      	mov	r5, r0
 800a870:	d4e4      	bmi.n	800a83c <_fflush_r+0xc>
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	059b      	lsls	r3, r3, #22
 800a876:	d4e1      	bmi.n	800a83c <_fflush_r+0xc>
 800a878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a87a:	f7ff fa85 	bl	8009d88 <__retarget_lock_release_recursive>
 800a87e:	e7dd      	b.n	800a83c <_fflush_r+0xc>

0800a880 <__malloc_lock>:
 800a880:	4801      	ldr	r0, [pc, #4]	; (800a888 <__malloc_lock+0x8>)
 800a882:	f7ff ba80 	b.w	8009d86 <__retarget_lock_acquire_recursive>
 800a886:	bf00      	nop
 800a888:	20006d24 	.word	0x20006d24

0800a88c <__malloc_unlock>:
 800a88c:	4801      	ldr	r0, [pc, #4]	; (800a894 <__malloc_unlock+0x8>)
 800a88e:	f7ff ba7b 	b.w	8009d88 <__retarget_lock_release_recursive>
 800a892:	bf00      	nop
 800a894:	20006d24 	.word	0x20006d24

0800a898 <__sread>:
 800a898:	b510      	push	{r4, lr}
 800a89a:	460c      	mov	r4, r1
 800a89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a0:	f000 f9c2 	bl	800ac28 <_read_r>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	bfab      	itete	ge
 800a8a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a8ac:	181b      	addge	r3, r3, r0
 800a8ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8b2:	bfac      	ite	ge
 800a8b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8b6:	81a3      	strhlt	r3, [r4, #12]
 800a8b8:	bd10      	pop	{r4, pc}

0800a8ba <__swrite>:
 800a8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8be:	461f      	mov	r7, r3
 800a8c0:	898b      	ldrh	r3, [r1, #12]
 800a8c2:	05db      	lsls	r3, r3, #23
 800a8c4:	4605      	mov	r5, r0
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	4616      	mov	r6, r2
 800a8ca:	d505      	bpl.n	800a8d8 <__swrite+0x1e>
 800a8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f000 f996 	bl	800ac04 <_lseek_r>
 800a8d8:	89a3      	ldrh	r3, [r4, #12]
 800a8da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8e2:	81a3      	strh	r3, [r4, #12]
 800a8e4:	4632      	mov	r2, r6
 800a8e6:	463b      	mov	r3, r7
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ee:	f000 b9bd 	b.w	800ac6c <_write_r>

0800a8f2 <__sseek>:
 800a8f2:	b510      	push	{r4, lr}
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8fa:	f000 f983 	bl	800ac04 <_lseek_r>
 800a8fe:	1c43      	adds	r3, r0, #1
 800a900:	89a3      	ldrh	r3, [r4, #12]
 800a902:	bf15      	itete	ne
 800a904:	6560      	strne	r0, [r4, #84]	; 0x54
 800a906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a90a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a90e:	81a3      	strheq	r3, [r4, #12]
 800a910:	bf18      	it	ne
 800a912:	81a3      	strhne	r3, [r4, #12]
 800a914:	bd10      	pop	{r4, pc}

0800a916 <__sclose>:
 800a916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91a:	f000 b941 	b.w	800aba0 <_close_r>

0800a91e <_realloc_r>:
 800a91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a922:	4680      	mov	r8, r0
 800a924:	4614      	mov	r4, r2
 800a926:	460e      	mov	r6, r1
 800a928:	b921      	cbnz	r1, 800a934 <_realloc_r+0x16>
 800a92a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a92e:	4611      	mov	r1, r2
 800a930:	f7ff bce8 	b.w	800a304 <_malloc_r>
 800a934:	b92a      	cbnz	r2, 800a942 <_realloc_r+0x24>
 800a936:	f000 f9b9 	bl	800acac <_free_r>
 800a93a:	4625      	mov	r5, r4
 800a93c:	4628      	mov	r0, r5
 800a93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a942:	f000 f9ff 	bl	800ad44 <_malloc_usable_size_r>
 800a946:	4284      	cmp	r4, r0
 800a948:	4607      	mov	r7, r0
 800a94a:	d802      	bhi.n	800a952 <_realloc_r+0x34>
 800a94c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a950:	d812      	bhi.n	800a978 <_realloc_r+0x5a>
 800a952:	4621      	mov	r1, r4
 800a954:	4640      	mov	r0, r8
 800a956:	f7ff fcd5 	bl	800a304 <_malloc_r>
 800a95a:	4605      	mov	r5, r0
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d0ed      	beq.n	800a93c <_realloc_r+0x1e>
 800a960:	42bc      	cmp	r4, r7
 800a962:	4622      	mov	r2, r4
 800a964:	4631      	mov	r1, r6
 800a966:	bf28      	it	cs
 800a968:	463a      	movcs	r2, r7
 800a96a:	f000 f991 	bl	800ac90 <memcpy>
 800a96e:	4631      	mov	r1, r6
 800a970:	4640      	mov	r0, r8
 800a972:	f000 f99b 	bl	800acac <_free_r>
 800a976:	e7e1      	b.n	800a93c <_realloc_r+0x1e>
 800a978:	4635      	mov	r5, r6
 800a97a:	e7df      	b.n	800a93c <_realloc_r+0x1e>

0800a97c <__swbuf_r>:
 800a97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97e:	460e      	mov	r6, r1
 800a980:	4614      	mov	r4, r2
 800a982:	4605      	mov	r5, r0
 800a984:	b118      	cbz	r0, 800a98e <__swbuf_r+0x12>
 800a986:	6a03      	ldr	r3, [r0, #32]
 800a988:	b90b      	cbnz	r3, 800a98e <__swbuf_r+0x12>
 800a98a:	f7ff f947 	bl	8009c1c <__sinit>
 800a98e:	69a3      	ldr	r3, [r4, #24]
 800a990:	60a3      	str	r3, [r4, #8]
 800a992:	89a3      	ldrh	r3, [r4, #12]
 800a994:	071a      	lsls	r2, r3, #28
 800a996:	d525      	bpl.n	800a9e4 <__swbuf_r+0x68>
 800a998:	6923      	ldr	r3, [r4, #16]
 800a99a:	b31b      	cbz	r3, 800a9e4 <__swbuf_r+0x68>
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	6922      	ldr	r2, [r4, #16]
 800a9a0:	1a98      	subs	r0, r3, r2
 800a9a2:	6963      	ldr	r3, [r4, #20]
 800a9a4:	b2f6      	uxtb	r6, r6
 800a9a6:	4283      	cmp	r3, r0
 800a9a8:	4637      	mov	r7, r6
 800a9aa:	dc04      	bgt.n	800a9b6 <__swbuf_r+0x3a>
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	f7ff ff3e 	bl	800a830 <_fflush_r>
 800a9b4:	b9e0      	cbnz	r0, 800a9f0 <__swbuf_r+0x74>
 800a9b6:	68a3      	ldr	r3, [r4, #8]
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	60a3      	str	r3, [r4, #8]
 800a9bc:	6823      	ldr	r3, [r4, #0]
 800a9be:	1c5a      	adds	r2, r3, #1
 800a9c0:	6022      	str	r2, [r4, #0]
 800a9c2:	701e      	strb	r6, [r3, #0]
 800a9c4:	6962      	ldr	r2, [r4, #20]
 800a9c6:	1c43      	adds	r3, r0, #1
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d004      	beq.n	800a9d6 <__swbuf_r+0x5a>
 800a9cc:	89a3      	ldrh	r3, [r4, #12]
 800a9ce:	07db      	lsls	r3, r3, #31
 800a9d0:	d506      	bpl.n	800a9e0 <__swbuf_r+0x64>
 800a9d2:	2e0a      	cmp	r6, #10
 800a9d4:	d104      	bne.n	800a9e0 <__swbuf_r+0x64>
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	4628      	mov	r0, r5
 800a9da:	f7ff ff29 	bl	800a830 <_fflush_r>
 800a9de:	b938      	cbnz	r0, 800a9f0 <__swbuf_r+0x74>
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9e4:	4621      	mov	r1, r4
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f000 f806 	bl	800a9f8 <__swsetup_r>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	d0d5      	beq.n	800a99c <__swbuf_r+0x20>
 800a9f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a9f4:	e7f4      	b.n	800a9e0 <__swbuf_r+0x64>
	...

0800a9f8 <__swsetup_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4b2a      	ldr	r3, [pc, #168]	; (800aaa4 <__swsetup_r+0xac>)
 800a9fc:	4605      	mov	r5, r0
 800a9fe:	6818      	ldr	r0, [r3, #0]
 800aa00:	460c      	mov	r4, r1
 800aa02:	b118      	cbz	r0, 800aa0c <__swsetup_r+0x14>
 800aa04:	6a03      	ldr	r3, [r0, #32]
 800aa06:	b90b      	cbnz	r3, 800aa0c <__swsetup_r+0x14>
 800aa08:	f7ff f908 	bl	8009c1c <__sinit>
 800aa0c:	89a3      	ldrh	r3, [r4, #12]
 800aa0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa12:	0718      	lsls	r0, r3, #28
 800aa14:	d422      	bmi.n	800aa5c <__swsetup_r+0x64>
 800aa16:	06d9      	lsls	r1, r3, #27
 800aa18:	d407      	bmi.n	800aa2a <__swsetup_r+0x32>
 800aa1a:	2309      	movs	r3, #9
 800aa1c:	602b      	str	r3, [r5, #0]
 800aa1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa22:	81a3      	strh	r3, [r4, #12]
 800aa24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa28:	e034      	b.n	800aa94 <__swsetup_r+0x9c>
 800aa2a:	0758      	lsls	r0, r3, #29
 800aa2c:	d512      	bpl.n	800aa54 <__swsetup_r+0x5c>
 800aa2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa30:	b141      	cbz	r1, 800aa44 <__swsetup_r+0x4c>
 800aa32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa36:	4299      	cmp	r1, r3
 800aa38:	d002      	beq.n	800aa40 <__swsetup_r+0x48>
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	f000 f936 	bl	800acac <_free_r>
 800aa40:	2300      	movs	r3, #0
 800aa42:	6363      	str	r3, [r4, #52]	; 0x34
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa4a:	81a3      	strh	r3, [r4, #12]
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	6063      	str	r3, [r4, #4]
 800aa50:	6923      	ldr	r3, [r4, #16]
 800aa52:	6023      	str	r3, [r4, #0]
 800aa54:	89a3      	ldrh	r3, [r4, #12]
 800aa56:	f043 0308 	orr.w	r3, r3, #8
 800aa5a:	81a3      	strh	r3, [r4, #12]
 800aa5c:	6923      	ldr	r3, [r4, #16]
 800aa5e:	b94b      	cbnz	r3, 800aa74 <__swsetup_r+0x7c>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa6a:	d003      	beq.n	800aa74 <__swsetup_r+0x7c>
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	4628      	mov	r0, r5
 800aa70:	f000 f840 	bl	800aaf4 <__smakebuf_r>
 800aa74:	89a0      	ldrh	r0, [r4, #12]
 800aa76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa7a:	f010 0301 	ands.w	r3, r0, #1
 800aa7e:	d00a      	beq.n	800aa96 <__swsetup_r+0x9e>
 800aa80:	2300      	movs	r3, #0
 800aa82:	60a3      	str	r3, [r4, #8]
 800aa84:	6963      	ldr	r3, [r4, #20]
 800aa86:	425b      	negs	r3, r3
 800aa88:	61a3      	str	r3, [r4, #24]
 800aa8a:	6923      	ldr	r3, [r4, #16]
 800aa8c:	b943      	cbnz	r3, 800aaa0 <__swsetup_r+0xa8>
 800aa8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa92:	d1c4      	bne.n	800aa1e <__swsetup_r+0x26>
 800aa94:	bd38      	pop	{r3, r4, r5, pc}
 800aa96:	0781      	lsls	r1, r0, #30
 800aa98:	bf58      	it	pl
 800aa9a:	6963      	ldrpl	r3, [r4, #20]
 800aa9c:	60a3      	str	r3, [r4, #8]
 800aa9e:	e7f4      	b.n	800aa8a <__swsetup_r+0x92>
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	e7f7      	b.n	800aa94 <__swsetup_r+0x9c>
 800aaa4:	200000a4 	.word	0x200000a4

0800aaa8 <__swhatbuf_r>:
 800aaa8:	b570      	push	{r4, r5, r6, lr}
 800aaaa:	460c      	mov	r4, r1
 800aaac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab0:	2900      	cmp	r1, #0
 800aab2:	b096      	sub	sp, #88	; 0x58
 800aab4:	4615      	mov	r5, r2
 800aab6:	461e      	mov	r6, r3
 800aab8:	da0d      	bge.n	800aad6 <__swhatbuf_r+0x2e>
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aac0:	f04f 0100 	mov.w	r1, #0
 800aac4:	bf0c      	ite	eq
 800aac6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aaca:	2340      	movne	r3, #64	; 0x40
 800aacc:	2000      	movs	r0, #0
 800aace:	6031      	str	r1, [r6, #0]
 800aad0:	602b      	str	r3, [r5, #0]
 800aad2:	b016      	add	sp, #88	; 0x58
 800aad4:	bd70      	pop	{r4, r5, r6, pc}
 800aad6:	466a      	mov	r2, sp
 800aad8:	f000 f872 	bl	800abc0 <_fstat_r>
 800aadc:	2800      	cmp	r0, #0
 800aade:	dbec      	blt.n	800aaba <__swhatbuf_r+0x12>
 800aae0:	9901      	ldr	r1, [sp, #4]
 800aae2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aae6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aaea:	4259      	negs	r1, r3
 800aaec:	4159      	adcs	r1, r3
 800aaee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaf2:	e7eb      	b.n	800aacc <__swhatbuf_r+0x24>

0800aaf4 <__smakebuf_r>:
 800aaf4:	898b      	ldrh	r3, [r1, #12]
 800aaf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aaf8:	079d      	lsls	r5, r3, #30
 800aafa:	4606      	mov	r6, r0
 800aafc:	460c      	mov	r4, r1
 800aafe:	d507      	bpl.n	800ab10 <__smakebuf_r+0x1c>
 800ab00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	6123      	str	r3, [r4, #16]
 800ab08:	2301      	movs	r3, #1
 800ab0a:	6163      	str	r3, [r4, #20]
 800ab0c:	b002      	add	sp, #8
 800ab0e:	bd70      	pop	{r4, r5, r6, pc}
 800ab10:	ab01      	add	r3, sp, #4
 800ab12:	466a      	mov	r2, sp
 800ab14:	f7ff ffc8 	bl	800aaa8 <__swhatbuf_r>
 800ab18:	9900      	ldr	r1, [sp, #0]
 800ab1a:	4605      	mov	r5, r0
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	f7ff fbf1 	bl	800a304 <_malloc_r>
 800ab22:	b948      	cbnz	r0, 800ab38 <__smakebuf_r+0x44>
 800ab24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab28:	059a      	lsls	r2, r3, #22
 800ab2a:	d4ef      	bmi.n	800ab0c <__smakebuf_r+0x18>
 800ab2c:	f023 0303 	bic.w	r3, r3, #3
 800ab30:	f043 0302 	orr.w	r3, r3, #2
 800ab34:	81a3      	strh	r3, [r4, #12]
 800ab36:	e7e3      	b.n	800ab00 <__smakebuf_r+0xc>
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	6020      	str	r0, [r4, #0]
 800ab3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab40:	81a3      	strh	r3, [r4, #12]
 800ab42:	9b00      	ldr	r3, [sp, #0]
 800ab44:	6163      	str	r3, [r4, #20]
 800ab46:	9b01      	ldr	r3, [sp, #4]
 800ab48:	6120      	str	r0, [r4, #16]
 800ab4a:	b15b      	cbz	r3, 800ab64 <__smakebuf_r+0x70>
 800ab4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab50:	4630      	mov	r0, r6
 800ab52:	f000 f847 	bl	800abe4 <_isatty_r>
 800ab56:	b128      	cbz	r0, 800ab64 <__smakebuf_r+0x70>
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	f023 0303 	bic.w	r3, r3, #3
 800ab5e:	f043 0301 	orr.w	r3, r3, #1
 800ab62:	81a3      	strh	r3, [r4, #12]
 800ab64:	89a3      	ldrh	r3, [r4, #12]
 800ab66:	431d      	orrs	r5, r3
 800ab68:	81a5      	strh	r5, [r4, #12]
 800ab6a:	e7cf      	b.n	800ab0c <__smakebuf_r+0x18>

0800ab6c <memmove>:
 800ab6c:	4288      	cmp	r0, r1
 800ab6e:	b510      	push	{r4, lr}
 800ab70:	eb01 0402 	add.w	r4, r1, r2
 800ab74:	d902      	bls.n	800ab7c <memmove+0x10>
 800ab76:	4284      	cmp	r4, r0
 800ab78:	4623      	mov	r3, r4
 800ab7a:	d807      	bhi.n	800ab8c <memmove+0x20>
 800ab7c:	1e43      	subs	r3, r0, #1
 800ab7e:	42a1      	cmp	r1, r4
 800ab80:	d008      	beq.n	800ab94 <memmove+0x28>
 800ab82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab8a:	e7f8      	b.n	800ab7e <memmove+0x12>
 800ab8c:	4402      	add	r2, r0
 800ab8e:	4601      	mov	r1, r0
 800ab90:	428a      	cmp	r2, r1
 800ab92:	d100      	bne.n	800ab96 <memmove+0x2a>
 800ab94:	bd10      	pop	{r4, pc}
 800ab96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab9e:	e7f7      	b.n	800ab90 <memmove+0x24>

0800aba0 <_close_r>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	4d06      	ldr	r5, [pc, #24]	; (800abbc <_close_r+0x1c>)
 800aba4:	2300      	movs	r3, #0
 800aba6:	4604      	mov	r4, r0
 800aba8:	4608      	mov	r0, r1
 800abaa:	602b      	str	r3, [r5, #0]
 800abac:	f7f8 fa3d 	bl	800302a <_close>
 800abb0:	1c43      	adds	r3, r0, #1
 800abb2:	d102      	bne.n	800abba <_close_r+0x1a>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	b103      	cbz	r3, 800abba <_close_r+0x1a>
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	bd38      	pop	{r3, r4, r5, pc}
 800abbc:	20006d30 	.word	0x20006d30

0800abc0 <_fstat_r>:
 800abc0:	b538      	push	{r3, r4, r5, lr}
 800abc2:	4d07      	ldr	r5, [pc, #28]	; (800abe0 <_fstat_r+0x20>)
 800abc4:	2300      	movs	r3, #0
 800abc6:	4604      	mov	r4, r0
 800abc8:	4608      	mov	r0, r1
 800abca:	4611      	mov	r1, r2
 800abcc:	602b      	str	r3, [r5, #0]
 800abce:	f7f8 fa38 	bl	8003042 <_fstat>
 800abd2:	1c43      	adds	r3, r0, #1
 800abd4:	d102      	bne.n	800abdc <_fstat_r+0x1c>
 800abd6:	682b      	ldr	r3, [r5, #0]
 800abd8:	b103      	cbz	r3, 800abdc <_fstat_r+0x1c>
 800abda:	6023      	str	r3, [r4, #0]
 800abdc:	bd38      	pop	{r3, r4, r5, pc}
 800abde:	bf00      	nop
 800abe0:	20006d30 	.word	0x20006d30

0800abe4 <_isatty_r>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	4d06      	ldr	r5, [pc, #24]	; (800ac00 <_isatty_r+0x1c>)
 800abe8:	2300      	movs	r3, #0
 800abea:	4604      	mov	r4, r0
 800abec:	4608      	mov	r0, r1
 800abee:	602b      	str	r3, [r5, #0]
 800abf0:	f7f8 fa37 	bl	8003062 <_isatty>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	d102      	bne.n	800abfe <_isatty_r+0x1a>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	b103      	cbz	r3, 800abfe <_isatty_r+0x1a>
 800abfc:	6023      	str	r3, [r4, #0]
 800abfe:	bd38      	pop	{r3, r4, r5, pc}
 800ac00:	20006d30 	.word	0x20006d30

0800ac04 <_lseek_r>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	4d07      	ldr	r5, [pc, #28]	; (800ac24 <_lseek_r+0x20>)
 800ac08:	4604      	mov	r4, r0
 800ac0a:	4608      	mov	r0, r1
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	2200      	movs	r2, #0
 800ac10:	602a      	str	r2, [r5, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	f7f8 fa30 	bl	8003078 <_lseek>
 800ac18:	1c43      	adds	r3, r0, #1
 800ac1a:	d102      	bne.n	800ac22 <_lseek_r+0x1e>
 800ac1c:	682b      	ldr	r3, [r5, #0]
 800ac1e:	b103      	cbz	r3, 800ac22 <_lseek_r+0x1e>
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	bd38      	pop	{r3, r4, r5, pc}
 800ac24:	20006d30 	.word	0x20006d30

0800ac28 <_read_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4d07      	ldr	r5, [pc, #28]	; (800ac48 <_read_r+0x20>)
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	4608      	mov	r0, r1
 800ac30:	4611      	mov	r1, r2
 800ac32:	2200      	movs	r2, #0
 800ac34:	602a      	str	r2, [r5, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	f7f8 f9be 	bl	8002fb8 <_read>
 800ac3c:	1c43      	adds	r3, r0, #1
 800ac3e:	d102      	bne.n	800ac46 <_read_r+0x1e>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	b103      	cbz	r3, 800ac46 <_read_r+0x1e>
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
 800ac48:	20006d30 	.word	0x20006d30

0800ac4c <_sbrk_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4d06      	ldr	r5, [pc, #24]	; (800ac68 <_sbrk_r+0x1c>)
 800ac50:	2300      	movs	r3, #0
 800ac52:	4604      	mov	r4, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	f7f8 fa1c 	bl	8003094 <_sbrk>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d102      	bne.n	800ac66 <_sbrk_r+0x1a>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	b103      	cbz	r3, 800ac66 <_sbrk_r+0x1a>
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	20006d30 	.word	0x20006d30

0800ac6c <_write_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4d07      	ldr	r5, [pc, #28]	; (800ac8c <_write_r+0x20>)
 800ac70:	4604      	mov	r4, r0
 800ac72:	4608      	mov	r0, r1
 800ac74:	4611      	mov	r1, r2
 800ac76:	2200      	movs	r2, #0
 800ac78:	602a      	str	r2, [r5, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	f7f8 f9b9 	bl	8002ff2 <_write>
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	d102      	bne.n	800ac8a <_write_r+0x1e>
 800ac84:	682b      	ldr	r3, [r5, #0]
 800ac86:	b103      	cbz	r3, 800ac8a <_write_r+0x1e>
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	bd38      	pop	{r3, r4, r5, pc}
 800ac8c:	20006d30 	.word	0x20006d30

0800ac90 <memcpy>:
 800ac90:	440a      	add	r2, r1
 800ac92:	4291      	cmp	r1, r2
 800ac94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac98:	d100      	bne.n	800ac9c <memcpy+0xc>
 800ac9a:	4770      	bx	lr
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aca6:	4291      	cmp	r1, r2
 800aca8:	d1f9      	bne.n	800ac9e <memcpy+0xe>
 800acaa:	bd10      	pop	{r4, pc}

0800acac <_free_r>:
 800acac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acae:	2900      	cmp	r1, #0
 800acb0:	d044      	beq.n	800ad3c <_free_r+0x90>
 800acb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acb6:	9001      	str	r0, [sp, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f1a1 0404 	sub.w	r4, r1, #4
 800acbe:	bfb8      	it	lt
 800acc0:	18e4      	addlt	r4, r4, r3
 800acc2:	f7ff fddd 	bl	800a880 <__malloc_lock>
 800acc6:	4a1e      	ldr	r2, [pc, #120]	; (800ad40 <_free_r+0x94>)
 800acc8:	9801      	ldr	r0, [sp, #4]
 800acca:	6813      	ldr	r3, [r2, #0]
 800accc:	b933      	cbnz	r3, 800acdc <_free_r+0x30>
 800acce:	6063      	str	r3, [r4, #4]
 800acd0:	6014      	str	r4, [r2, #0]
 800acd2:	b003      	add	sp, #12
 800acd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acd8:	f7ff bdd8 	b.w	800a88c <__malloc_unlock>
 800acdc:	42a3      	cmp	r3, r4
 800acde:	d908      	bls.n	800acf2 <_free_r+0x46>
 800ace0:	6825      	ldr	r5, [r4, #0]
 800ace2:	1961      	adds	r1, r4, r5
 800ace4:	428b      	cmp	r3, r1
 800ace6:	bf01      	itttt	eq
 800ace8:	6819      	ldreq	r1, [r3, #0]
 800acea:	685b      	ldreq	r3, [r3, #4]
 800acec:	1949      	addeq	r1, r1, r5
 800acee:	6021      	streq	r1, [r4, #0]
 800acf0:	e7ed      	b.n	800acce <_free_r+0x22>
 800acf2:	461a      	mov	r2, r3
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	b10b      	cbz	r3, 800acfc <_free_r+0x50>
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	d9fa      	bls.n	800acf2 <_free_r+0x46>
 800acfc:	6811      	ldr	r1, [r2, #0]
 800acfe:	1855      	adds	r5, r2, r1
 800ad00:	42a5      	cmp	r5, r4
 800ad02:	d10b      	bne.n	800ad1c <_free_r+0x70>
 800ad04:	6824      	ldr	r4, [r4, #0]
 800ad06:	4421      	add	r1, r4
 800ad08:	1854      	adds	r4, r2, r1
 800ad0a:	42a3      	cmp	r3, r4
 800ad0c:	6011      	str	r1, [r2, #0]
 800ad0e:	d1e0      	bne.n	800acd2 <_free_r+0x26>
 800ad10:	681c      	ldr	r4, [r3, #0]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	6053      	str	r3, [r2, #4]
 800ad16:	440c      	add	r4, r1
 800ad18:	6014      	str	r4, [r2, #0]
 800ad1a:	e7da      	b.n	800acd2 <_free_r+0x26>
 800ad1c:	d902      	bls.n	800ad24 <_free_r+0x78>
 800ad1e:	230c      	movs	r3, #12
 800ad20:	6003      	str	r3, [r0, #0]
 800ad22:	e7d6      	b.n	800acd2 <_free_r+0x26>
 800ad24:	6825      	ldr	r5, [r4, #0]
 800ad26:	1961      	adds	r1, r4, r5
 800ad28:	428b      	cmp	r3, r1
 800ad2a:	bf04      	itt	eq
 800ad2c:	6819      	ldreq	r1, [r3, #0]
 800ad2e:	685b      	ldreq	r3, [r3, #4]
 800ad30:	6063      	str	r3, [r4, #4]
 800ad32:	bf04      	itt	eq
 800ad34:	1949      	addeq	r1, r1, r5
 800ad36:	6021      	streq	r1, [r4, #0]
 800ad38:	6054      	str	r4, [r2, #4]
 800ad3a:	e7ca      	b.n	800acd2 <_free_r+0x26>
 800ad3c:	b003      	add	sp, #12
 800ad3e:	bd30      	pop	{r4, r5, pc}
 800ad40:	20006d28 	.word	0x20006d28

0800ad44 <_malloc_usable_size_r>:
 800ad44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad48:	1f18      	subs	r0, r3, #4
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	bfbc      	itt	lt
 800ad4e:	580b      	ldrlt	r3, [r1, r0]
 800ad50:	18c0      	addlt	r0, r0, r3
 800ad52:	4770      	bx	lr

0800ad54 <sqrt>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	ed2d 8b02 	vpush	{d8}
 800ad5a:	ec55 4b10 	vmov	r4, r5, d0
 800ad5e:	f000 f825 	bl	800adac <__ieee754_sqrt>
 800ad62:	4622      	mov	r2, r4
 800ad64:	462b      	mov	r3, r5
 800ad66:	4620      	mov	r0, r4
 800ad68:	4629      	mov	r1, r5
 800ad6a:	eeb0 8a40 	vmov.f32	s16, s0
 800ad6e:	eef0 8a60 	vmov.f32	s17, s1
 800ad72:	f7f5 fefb 	bl	8000b6c <__aeabi_dcmpun>
 800ad76:	b990      	cbnz	r0, 800ad9e <sqrt+0x4a>
 800ad78:	2200      	movs	r2, #0
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	4629      	mov	r1, r5
 800ad80:	f7f5 fecc 	bl	8000b1c <__aeabi_dcmplt>
 800ad84:	b158      	cbz	r0, 800ad9e <sqrt+0x4a>
 800ad86:	f7fe ffd3 	bl	8009d30 <__errno>
 800ad8a:	2321      	movs	r3, #33	; 0x21
 800ad8c:	6003      	str	r3, [r0, #0]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2300      	movs	r3, #0
 800ad92:	4610      	mov	r0, r2
 800ad94:	4619      	mov	r1, r3
 800ad96:	f7f5 fd79 	bl	800088c <__aeabi_ddiv>
 800ad9a:	ec41 0b18 	vmov	d8, r0, r1
 800ad9e:	eeb0 0a48 	vmov.f32	s0, s16
 800ada2:	eef0 0a68 	vmov.f32	s1, s17
 800ada6:	ecbd 8b02 	vpop	{d8}
 800adaa:	bd38      	pop	{r3, r4, r5, pc}

0800adac <__ieee754_sqrt>:
 800adac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb0:	ec55 4b10 	vmov	r4, r5, d0
 800adb4:	4e67      	ldr	r6, [pc, #412]	; (800af54 <__ieee754_sqrt+0x1a8>)
 800adb6:	43ae      	bics	r6, r5
 800adb8:	ee10 0a10 	vmov	r0, s0
 800adbc:	ee10 2a10 	vmov	r2, s0
 800adc0:	4629      	mov	r1, r5
 800adc2:	462b      	mov	r3, r5
 800adc4:	d10d      	bne.n	800ade2 <__ieee754_sqrt+0x36>
 800adc6:	f7f5 fc37 	bl	8000638 <__aeabi_dmul>
 800adca:	4602      	mov	r2, r0
 800adcc:	460b      	mov	r3, r1
 800adce:	4620      	mov	r0, r4
 800add0:	4629      	mov	r1, r5
 800add2:	f7f5 fa7b 	bl	80002cc <__adddf3>
 800add6:	4604      	mov	r4, r0
 800add8:	460d      	mov	r5, r1
 800adda:	ec45 4b10 	vmov	d0, r4, r5
 800adde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade2:	2d00      	cmp	r5, #0
 800ade4:	dc0b      	bgt.n	800adfe <__ieee754_sqrt+0x52>
 800ade6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800adea:	4326      	orrs	r6, r4
 800adec:	d0f5      	beq.n	800adda <__ieee754_sqrt+0x2e>
 800adee:	b135      	cbz	r5, 800adfe <__ieee754_sqrt+0x52>
 800adf0:	f7f5 fa6a 	bl	80002c8 <__aeabi_dsub>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	f7f5 fd48 	bl	800088c <__aeabi_ddiv>
 800adfc:	e7eb      	b.n	800add6 <__ieee754_sqrt+0x2a>
 800adfe:	1509      	asrs	r1, r1, #20
 800ae00:	f000 808d 	beq.w	800af1e <__ieee754_sqrt+0x172>
 800ae04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae08:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ae0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae10:	07c9      	lsls	r1, r1, #31
 800ae12:	bf5c      	itt	pl
 800ae14:	005b      	lslpl	r3, r3, #1
 800ae16:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ae1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae1e:	bf58      	it	pl
 800ae20:	0052      	lslpl	r2, r2, #1
 800ae22:	2500      	movs	r5, #0
 800ae24:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ae28:	1076      	asrs	r6, r6, #1
 800ae2a:	0052      	lsls	r2, r2, #1
 800ae2c:	f04f 0e16 	mov.w	lr, #22
 800ae30:	46ac      	mov	ip, r5
 800ae32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae36:	eb0c 0001 	add.w	r0, ip, r1
 800ae3a:	4298      	cmp	r0, r3
 800ae3c:	bfde      	ittt	le
 800ae3e:	1a1b      	suble	r3, r3, r0
 800ae40:	eb00 0c01 	addle.w	ip, r0, r1
 800ae44:	186d      	addle	r5, r5, r1
 800ae46:	005b      	lsls	r3, r3, #1
 800ae48:	f1be 0e01 	subs.w	lr, lr, #1
 800ae4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ae50:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ae54:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ae58:	d1ed      	bne.n	800ae36 <__ieee754_sqrt+0x8a>
 800ae5a:	4674      	mov	r4, lr
 800ae5c:	2720      	movs	r7, #32
 800ae5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ae62:	4563      	cmp	r3, ip
 800ae64:	eb01 000e 	add.w	r0, r1, lr
 800ae68:	dc02      	bgt.n	800ae70 <__ieee754_sqrt+0xc4>
 800ae6a:	d113      	bne.n	800ae94 <__ieee754_sqrt+0xe8>
 800ae6c:	4290      	cmp	r0, r2
 800ae6e:	d811      	bhi.n	800ae94 <__ieee754_sqrt+0xe8>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	eb00 0e01 	add.w	lr, r0, r1
 800ae76:	da57      	bge.n	800af28 <__ieee754_sqrt+0x17c>
 800ae78:	f1be 0f00 	cmp.w	lr, #0
 800ae7c:	db54      	blt.n	800af28 <__ieee754_sqrt+0x17c>
 800ae7e:	f10c 0801 	add.w	r8, ip, #1
 800ae82:	eba3 030c 	sub.w	r3, r3, ip
 800ae86:	4290      	cmp	r0, r2
 800ae88:	bf88      	it	hi
 800ae8a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800ae8e:	1a12      	subs	r2, r2, r0
 800ae90:	440c      	add	r4, r1
 800ae92:	46c4      	mov	ip, r8
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	3f01      	subs	r7, #1
 800ae98:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ae9c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800aea0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800aea4:	d1dd      	bne.n	800ae62 <__ieee754_sqrt+0xb6>
 800aea6:	4313      	orrs	r3, r2
 800aea8:	d01b      	beq.n	800aee2 <__ieee754_sqrt+0x136>
 800aeaa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800af58 <__ieee754_sqrt+0x1ac>
 800aeae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800af5c <__ieee754_sqrt+0x1b0>
 800aeb2:	e9da 0100 	ldrd	r0, r1, [sl]
 800aeb6:	e9db 2300 	ldrd	r2, r3, [fp]
 800aeba:	f7f5 fa05 	bl	80002c8 <__aeabi_dsub>
 800aebe:	e9da 8900 	ldrd	r8, r9, [sl]
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	4640      	mov	r0, r8
 800aec8:	4649      	mov	r1, r9
 800aeca:	f7f5 fe31 	bl	8000b30 <__aeabi_dcmple>
 800aece:	b140      	cbz	r0, 800aee2 <__ieee754_sqrt+0x136>
 800aed0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800aed4:	e9da 0100 	ldrd	r0, r1, [sl]
 800aed8:	e9db 2300 	ldrd	r2, r3, [fp]
 800aedc:	d126      	bne.n	800af2c <__ieee754_sqrt+0x180>
 800aede:	3501      	adds	r5, #1
 800aee0:	463c      	mov	r4, r7
 800aee2:	106a      	asrs	r2, r5, #1
 800aee4:	0863      	lsrs	r3, r4, #1
 800aee6:	07e9      	lsls	r1, r5, #31
 800aee8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800aeec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800aef0:	bf48      	it	mi
 800aef2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800aef6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800aefa:	461c      	mov	r4, r3
 800aefc:	e76d      	b.n	800adda <__ieee754_sqrt+0x2e>
 800aefe:	0ad3      	lsrs	r3, r2, #11
 800af00:	3815      	subs	r0, #21
 800af02:	0552      	lsls	r2, r2, #21
 800af04:	2b00      	cmp	r3, #0
 800af06:	d0fa      	beq.n	800aefe <__ieee754_sqrt+0x152>
 800af08:	02dc      	lsls	r4, r3, #11
 800af0a:	d50a      	bpl.n	800af22 <__ieee754_sqrt+0x176>
 800af0c:	f1c1 0420 	rsb	r4, r1, #32
 800af10:	fa22 f404 	lsr.w	r4, r2, r4
 800af14:	1e4d      	subs	r5, r1, #1
 800af16:	408a      	lsls	r2, r1
 800af18:	4323      	orrs	r3, r4
 800af1a:	1b41      	subs	r1, r0, r5
 800af1c:	e772      	b.n	800ae04 <__ieee754_sqrt+0x58>
 800af1e:	4608      	mov	r0, r1
 800af20:	e7f0      	b.n	800af04 <__ieee754_sqrt+0x158>
 800af22:	005b      	lsls	r3, r3, #1
 800af24:	3101      	adds	r1, #1
 800af26:	e7ef      	b.n	800af08 <__ieee754_sqrt+0x15c>
 800af28:	46e0      	mov	r8, ip
 800af2a:	e7aa      	b.n	800ae82 <__ieee754_sqrt+0xd6>
 800af2c:	f7f5 f9ce 	bl	80002cc <__adddf3>
 800af30:	e9da 8900 	ldrd	r8, r9, [sl]
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	4640      	mov	r0, r8
 800af3a:	4649      	mov	r1, r9
 800af3c:	f7f5 fdee 	bl	8000b1c <__aeabi_dcmplt>
 800af40:	b120      	cbz	r0, 800af4c <__ieee754_sqrt+0x1a0>
 800af42:	1ca0      	adds	r0, r4, #2
 800af44:	bf08      	it	eq
 800af46:	3501      	addeq	r5, #1
 800af48:	3402      	adds	r4, #2
 800af4a:	e7ca      	b.n	800aee2 <__ieee754_sqrt+0x136>
 800af4c:	3401      	adds	r4, #1
 800af4e:	f024 0401 	bic.w	r4, r4, #1
 800af52:	e7c6      	b.n	800aee2 <__ieee754_sqrt+0x136>
 800af54:	7ff00000 	.word	0x7ff00000
 800af58:	200000a8 	.word	0x200000a8
 800af5c:	200000b0 	.word	0x200000b0

0800af60 <round>:
 800af60:	ec53 2b10 	vmov	r2, r3, d0
 800af64:	b570      	push	{r4, r5, r6, lr}
 800af66:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800af6a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800af6e:	2813      	cmp	r0, #19
 800af70:	ee10 5a10 	vmov	r5, s0
 800af74:	4619      	mov	r1, r3
 800af76:	dc18      	bgt.n	800afaa <round+0x4a>
 800af78:	2800      	cmp	r0, #0
 800af7a:	da09      	bge.n	800af90 <round+0x30>
 800af7c:	3001      	adds	r0, #1
 800af7e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800af82:	d103      	bne.n	800af8c <round+0x2c>
 800af84:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800af88:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800af8c:	2300      	movs	r3, #0
 800af8e:	e02a      	b.n	800afe6 <round+0x86>
 800af90:	4c16      	ldr	r4, [pc, #88]	; (800afec <round+0x8c>)
 800af92:	4104      	asrs	r4, r0
 800af94:	ea03 0604 	and.w	r6, r3, r4
 800af98:	4316      	orrs	r6, r2
 800af9a:	d011      	beq.n	800afc0 <round+0x60>
 800af9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800afa0:	4103      	asrs	r3, r0
 800afa2:	440b      	add	r3, r1
 800afa4:	ea23 0104 	bic.w	r1, r3, r4
 800afa8:	e7f0      	b.n	800af8c <round+0x2c>
 800afaa:	2833      	cmp	r0, #51	; 0x33
 800afac:	dd0b      	ble.n	800afc6 <round+0x66>
 800afae:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800afb2:	d105      	bne.n	800afc0 <round+0x60>
 800afb4:	ee10 0a10 	vmov	r0, s0
 800afb8:	f7f5 f988 	bl	80002cc <__adddf3>
 800afbc:	4602      	mov	r2, r0
 800afbe:	460b      	mov	r3, r1
 800afc0:	ec43 2b10 	vmov	d0, r2, r3
 800afc4:	bd70      	pop	{r4, r5, r6, pc}
 800afc6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800afca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800afce:	40f4      	lsrs	r4, r6
 800afd0:	4214      	tst	r4, r2
 800afd2:	d0f5      	beq.n	800afc0 <round+0x60>
 800afd4:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800afd8:	2301      	movs	r3, #1
 800afda:	4083      	lsls	r3, r0
 800afdc:	195b      	adds	r3, r3, r5
 800afde:	bf28      	it	cs
 800afe0:	3101      	addcs	r1, #1
 800afe2:	ea23 0304 	bic.w	r3, r3, r4
 800afe6:	461a      	mov	r2, r3
 800afe8:	460b      	mov	r3, r1
 800afea:	e7e9      	b.n	800afc0 <round+0x60>
 800afec:	000fffff 	.word	0x000fffff

0800aff0 <trunc>:
 800aff0:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800aff4:	ec5c bb10 	vmov	fp, ip, d0
 800aff8:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800affc:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800b000:	2913      	cmp	r1, #19
 800b002:	4664      	mov	r4, ip
 800b004:	dc11      	bgt.n	800b02a <trunc+0x3a>
 800b006:	2900      	cmp	r1, #0
 800b008:	bfa7      	ittee	ge
 800b00a:	4b15      	ldrge	r3, [pc, #84]	; (800b060 <trunc+0x70>)
 800b00c:	fa43 f101 	asrge.w	r1, r3, r1
 800b010:	2200      	movlt	r2, #0
 800b012:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800b016:	bfa4      	itt	ge
 800b018:	2200      	movge	r2, #0
 800b01a:	ea01 030c 	andge.w	r3, r1, ip
 800b01e:	4693      	mov	fp, r2
 800b020:	469c      	mov	ip, r3
 800b022:	ec4c bb10 	vmov	d0, fp, ip
 800b026:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800b02a:	2933      	cmp	r1, #51	; 0x33
 800b02c:	dd0d      	ble.n	800b04a <trunc+0x5a>
 800b02e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b032:	d1f6      	bne.n	800b022 <trunc+0x32>
 800b034:	4663      	mov	r3, ip
 800b036:	ee10 2a10 	vmov	r2, s0
 800b03a:	ee10 0a10 	vmov	r0, s0
 800b03e:	4621      	mov	r1, r4
 800b040:	f7f5 f944 	bl	80002cc <__adddf3>
 800b044:	4683      	mov	fp, r0
 800b046:	468c      	mov	ip, r1
 800b048:	e7eb      	b.n	800b022 <trunc+0x32>
 800b04a:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800b04e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b052:	40c3      	lsrs	r3, r0
 800b054:	ea2b 0603 	bic.w	r6, fp, r3
 800b058:	46b3      	mov	fp, r6
 800b05a:	46a4      	mov	ip, r4
 800b05c:	e7e1      	b.n	800b022 <trunc+0x32>
 800b05e:	bf00      	nop
 800b060:	fff00000 	.word	0xfff00000

0800b064 <_init>:
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	bf00      	nop
 800b068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b06a:	bc08      	pop	{r3}
 800b06c:	469e      	mov	lr, r3
 800b06e:	4770      	bx	lr

0800b070 <_fini>:
 800b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b072:	bf00      	nop
 800b074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b076:	bc08      	pop	{r3}
 800b078:	469e      	mov	lr, r3
 800b07a:	4770      	bx	lr
