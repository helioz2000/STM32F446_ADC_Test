
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800a128  0800a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a54c  0800a54c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800a54c  0800a54c  0001a54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a554  0800a554  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a554  0800a554  0001a554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a558  0800a558  0001a558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a55c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b38  20000098  0800a5f4  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005bd0  0800a5f4  00025bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146dc  00000000  00000000  0002010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fa6  00000000  00000000  000347e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  00037790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee9  00000000  00000000  00038aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c65  00000000  00000000  00039991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c3b  00000000  00000000  0005f5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2814  00000000  00000000  00077231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005af8  00000000  00000000  00159a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015f540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a110 	.word	0x0800a110

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	0800a110 	.word	0x0800a110

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b970 	b.w	8000f20 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	d965      	bls.n	8000d3a <__udivmoddi4+0xe2>
 8000c6e:	fab2 f382 	clz	r3, r2
 8000c72:	b143      	cbz	r3, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c78:	f1c3 0220 	rsb	r2, r3, #32
 8000c7c:	409f      	lsls	r7, r3
 8000c7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c82:	4317      	orrs	r7, r2
 8000c84:	409c      	lsls	r4, r3
 8000c86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c8a:	fa1f f58c 	uxth.w	r5, ip
 8000c8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c92:	0c22      	lsrs	r2, r4, #16
 8000c94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c9c:	fb01 f005 	mul.w	r0, r1, r5
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cac:	f080 811c 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f240 8119 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4462      	add	r2, ip
 8000cba:	1a12      	subs	r2, r2, r0
 8000cbc:	b2a4      	uxth	r4, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cca:	fb00 f505 	mul.w	r5, r0, r5
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x90>
 8000cd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x294>
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x294>
 8000ce4:	4464      	add	r4, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11e      	cbz	r6, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40dc      	lsrs	r4, r3
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0xbc>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80ed 	beq.w	8000ee2 <__udivmoddi4+0x28a>
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	fab3 f183 	clz	r1, r3
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	d149      	bne.n	8000db0 <__udivmoddi4+0x158>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	d302      	bcc.n	8000d26 <__udivmoddi4+0xce>
 8000d20:	4282      	cmp	r2, r0
 8000d22:	f200 80f8 	bhi.w	8000f16 <__udivmoddi4+0x2be>
 8000d26:	1a84      	subs	r4, r0, r2
 8000d28:	eb65 0203 	sbc.w	r2, r5, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d0e2      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	e9c6 4700 	strd	r4, r7, [r6]
 8000d38:	e7df      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d3a:	b902      	cbnz	r2, 8000d3e <__udivmoddi4+0xe6>
 8000d3c:	deff      	udf	#255	; 0xff
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8090 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2101      	movs	r1, #1
 8000d54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d58:	fb07 2015 	mls	r0, r7, r5, r2
 8000d5c:	0c22      	lsrs	r2, r4, #16
 8000d5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d62:	fb0e f005 	mul.w	r0, lr, r5
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4290      	cmp	r0, r2
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2b8>
 8000d7a:	4645      	mov	r5, r8
 8000d7c:	1a12      	subs	r2, r2, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d84:	fb07 2210 	mls	r2, r7, r0, r2
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x14e>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x14c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2c2>
 8000da4:	4610      	mov	r0, r2
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dae:	e79f      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000db0:	f1c1 0720 	rsb	r7, r1, #32
 8000db4:	408b      	lsls	r3, r1
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc6:	40fd      	lsrs	r5, r7
 8000dc8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dcc:	4323      	orrs	r3, r4
 8000dce:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dda:	0c1c      	lsrs	r4, r3, #16
 8000ddc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000de0:	fb08 f50e 	mul.w	r5, r8, lr
 8000de4:	42a5      	cmp	r5, r4
 8000de6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dea:	fa00 f001 	lsl.w	r0, r0, r1
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2b4>
 8000dfc:	42a5      	cmp	r5, r4
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2b4>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4464      	add	r4, ip
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	b29d      	uxth	r5, r3
 8000e0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e10:	fb09 4413 	mls	r4, r9, r3, r4
 8000e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2e:	3b02      	subs	r3, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fba3 9502 	umull	r9, r5, r3, r2
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46ae      	mov	lr, r5
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x29c>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x298>
 8000e48:	b156      	cbz	r6, 8000e60 <__udivmoddi4+0x208>
 8000e4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e52:	fa04 f707 	lsl.w	r7, r4, r7
 8000e56:	40ca      	lsrs	r2, r1
 8000e58:	40cc      	lsrs	r4, r1
 8000e5a:	4317      	orrs	r7, r2
 8000e5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	f1c3 0120 	rsb	r1, r3, #32
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	fa20 f201 	lsr.w	r2, r0, r1
 8000e74:	fa25 f101 	lsr.w	r1, r5, r1
 8000e78:	409d      	lsls	r5, r3
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1510 	mls	r5, r7, r0, r1
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e92:	fb00 f50e 	mul.w	r5, r0, lr
 8000e96:	428d      	cmp	r5, r1
 8000e98:	fa04 f403 	lsl.w	r4, r4, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x258>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000ea8:	428d      	cmp	r5, r1
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1b49      	subs	r1, r1, r5
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ebc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec4:	4291      	cmp	r1, r2
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x282>
 8000ec8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ecc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed2:	4291      	cmp	r1, r2
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed6:	3d02      	subs	r5, #2
 8000ed8:	4462      	add	r2, ip
 8000eda:	1a52      	subs	r2, r2, r1
 8000edc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0xfc>
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e708      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000ee8:	4639      	mov	r1, r7
 8000eea:	e6e6      	b.n	8000cba <__udivmoddi4+0x62>
 8000eec:	4610      	mov	r0, r2
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x90>
 8000ef0:	4548      	cmp	r0, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000efc:	3b01      	subs	r3, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000f00:	4645      	mov	r5, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x282>
 8000f04:	462b      	mov	r3, r5
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x258>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f10:	3d02      	subs	r5, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f16:	4608      	mov	r0, r1
 8000f18:	e70a      	b.n	8000d30 <__udivmoddi4+0xd8>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x14e>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <calc_process_dma_buffer>:
 * Process the DMA buffer
 * parameter second_half: > 0 to process 2nd half of buffer, 0 = 1st half of buffer
 * parameter adc_num: 0 = ADC1, 1 = ADC2 (use ADC1_IDX or ADC2_IDX)
 * returns: -1 on failure, 0 if OK
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8000f24:	b4b0      	push	{r4, r5, r7}
 8000f26:	b08b      	sub	sp, #44	; 0x2c
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <calc_process_dma_buffer+0x24>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d002      	beq.n	8000f48 <calc_process_dma_buffer+0x24>
		return -1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f46:	e16c      	b.n	8001222 <calc_process_dma_buffer+0x2fe>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first entry in DMA buffer
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	raw_buf_second = raw_buf_first + 1; // destination index for second entry in DMA buffer
 8000f52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f56:	3301      	adds	r3, #1
 8000f58:	f887 3020 	strb.w	r3, [r7, #32]
	// first or second half of DMA buffer?
	if (second_half) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <calc_process_dma_buffer+0x46>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 8000f62:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8000f66:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f68:	e001      	b.n	8000f6e <calc_process_dma_buffer+0x4a>
	} else {
		dma_buf_start = 0;	// first half
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	84bb      	strh	r3, [r7, #36]	; 0x24
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8000f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f70:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 8000f74:	83fb      	strh	r3, [r7, #30]

	adc_raw_meta[raw_buf_first].min = adc_dma_buf[adc_num][0];
 8000f76:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000f7a:	49ac      	ldr	r1, [pc, #688]	; (800122c <calc_process_dma_buffer+0x308>)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000f82:	fb00 f303 	mul.w	r3, r0, r3
 8000f86:	440b      	add	r3, r1
 8000f88:	8818      	ldrh	r0, [r3, #0]
 8000f8a:	49a9      	ldr	r1, [pc, #676]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	4602      	mov	r2, r0
 8000f98:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_first].max = adc_dma_buf[adc_num][0];
 8000f9a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000f9e:	49a3      	ldr	r1, [pc, #652]	; (800122c <calc_process_dma_buffer+0x308>)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000fa6:	fb00 f303 	mul.w	r3, r0, r3
 8000faa:	440b      	add	r3, r1
 8000fac:	8818      	ldrh	r0, [r3, #0]
 8000fae:	49a0      	ldr	r1, [pc, #640]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	3302      	adds	r3, #2
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].min = adc_dma_buf[adc_num][1];
 8000fc0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fc4:	4999      	ldr	r1, [pc, #612]	; (800122c <calc_process_dma_buffer+0x308>)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000fcc:	fb00 f303 	mul.w	r3, r0, r3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	8818      	ldrh	r0, [r3, #0]
 8000fd6:	4996      	ldr	r1, [pc, #600]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].max = adc_dma_buf[adc_num][1];
 8000fe6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fea:	4990      	ldr	r1, [pc, #576]	; (800122c <calc_process_dma_buffer+0x308>)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000ff2:	fb00 f303 	mul.w	r3, r0, r3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	8818      	ldrh	r0, [r3, #0]
 8000ffc:	498c      	ldr	r1, [pc, #560]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	3302      	adds	r3, #2
 800100a:	4602      	mov	r2, r0
 800100c:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_first].zero_cross1 = -1;
 800100e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001012:	4987      	ldr	r1, [pc, #540]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	3304      	adds	r3, #4
 8001020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001024:	601a      	str	r2, [r3, #0]
	adc_raw_meta[raw_buf_first].zero_cross2 = -1;
 8001026:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800102a:	4981      	ldr	r1, [pc, #516]	; (8001230 <calc_process_dma_buffer+0x30c>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3308      	adds	r3, #8
 8001038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800103c:	601a      	str	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].zero_cross1 = -1;
 800103e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001042:	497b      	ldr	r1, [pc, #492]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	3304      	adds	r3, #4
 8001050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001054:	601a      	str	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].zero_cross2 = -1;
 8001056:	f897 2020 	ldrb.w	r2, [r7, #32]
 800105a:	4975      	ldr	r1, [pc, #468]	; (8001230 <calc_process_dma_buffer+0x30c>)
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3308      	adds	r3, #8
 8001068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800106c:	601a      	str	r2, [r3, #0]
	// split DMA buffer and copy into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 800106e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001070:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001072:	e0d0      	b.n	8001216 <calc_process_dma_buffer+0x2f2>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 8001074:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001076:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800107a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800107c:	4c6b      	ldr	r4, [pc, #428]	; (800122c <calc_process_dma_buffer+0x308>)
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 8001084:	fb05 f000 	mul.w	r0, r5, r0
 8001088:	4401      	add	r1, r0
 800108a:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800108e:	4969      	ldr	r1, [pc, #420]	; (8001234 <calc_process_dma_buffer+0x310>)
 8001090:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001094:	fb00 f202 	mul.w	r2, r0, r2
 8001098:	4413      	add	r3, r2
 800109a:	4622      	mov	r2, r4
 800109c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 80010a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010a2:	1c59      	adds	r1, r3, #1
 80010a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010aa:	1c58      	adds	r0, r3, #1
 80010ac:	8478      	strh	r0, [r7, #34]	; 0x22
 80010ae:	461d      	mov	r5, r3
 80010b0:	485e      	ldr	r0, [pc, #376]	; (800122c <calc_process_dma_buffer+0x308>)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 80010b8:	fb04 f303 	mul.w	r3, r4, r3
 80010bc:	440b      	add	r3, r1
 80010be:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80010c2:	495c      	ldr	r1, [pc, #368]	; (8001234 <calc_process_dma_buffer+0x310>)
 80010c4:	f44f 7352 	mov.w	r3, #840	; 0x348
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	442b      	add	r3, r5
 80010ce:	4602      	mov	r2, r0
 80010d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_meta[raw_buf_first].min = MIN(adc_raw_meta[raw_buf_first].min, adc_dma_buf[adc_num][i]);
 80010d4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80010d8:	4955      	ldr	r1, [pc, #340]	; (8001230 <calc_process_dma_buffer+0x30c>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	83bb      	strh	r3, [r7, #28]
 80010e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ea:	4950      	ldr	r1, [pc, #320]	; (800122c <calc_process_dma_buffer+0x308>)
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 80010f2:	fb00 f202 	mul.w	r2, r0, r2
 80010f6:	4413      	add	r3, r2
 80010f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010fc:	837b      	strh	r3, [r7, #26]
 80010fe:	8b7a      	ldrh	r2, [r7, #26]
 8001100:	8bbb      	ldrh	r3, [r7, #28]
 8001102:	4293      	cmp	r3, r2
 8001104:	bf28      	it	cs
 8001106:	4613      	movcs	r3, r2
 8001108:	b29b      	uxth	r3, r3
 800110a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800110e:	b298      	uxth	r0, r3
 8001110:	4947      	ldr	r1, [pc, #284]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	4602      	mov	r2, r0
 800111e:	801a      	strh	r2, [r3, #0]
		adc_raw_meta[raw_buf_first].max = MAX(adc_raw_meta[raw_buf_first].max, adc_dma_buf[adc_num][i]);
 8001120:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001124:	4942      	ldr	r1, [pc, #264]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3302      	adds	r3, #2
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	833b      	strh	r3, [r7, #24]
 8001136:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001138:	493c      	ldr	r1, [pc, #240]	; (800122c <calc_process_dma_buffer+0x308>)
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 8001140:	fb00 f202 	mul.w	r2, r0, r2
 8001144:	4413      	add	r3, r2
 8001146:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800114a:	82fb      	strh	r3, [r7, #22]
 800114c:	8afa      	ldrh	r2, [r7, #22]
 800114e:	8b3b      	ldrh	r3, [r7, #24]
 8001150:	4293      	cmp	r3, r2
 8001152:	bf38      	it	cc
 8001154:	4613      	movcc	r3, r2
 8001156:	b29b      	uxth	r3, r3
 8001158:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800115c:	b298      	uxth	r0, r3
 800115e:	4934      	ldr	r1, [pc, #208]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	3302      	adds	r3, #2
 800116c:	4602      	mov	r2, r0
 800116e:	801a      	strh	r2, [r3, #0]
		adc_raw_meta[raw_buf_second].min = MIN(adc_raw_meta[raw_buf_second].min, adc_dma_buf[adc_num][i+1]);
 8001170:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001174:	492e      	ldr	r1, [pc, #184]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	82bb      	strh	r3, [r7, #20]
 8001184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001186:	3301      	adds	r3, #1
 8001188:	4928      	ldr	r1, [pc, #160]	; (800122c <calc_process_dma_buffer+0x308>)
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 8001190:	fb00 f202 	mul.w	r2, r0, r2
 8001194:	4413      	add	r3, r2
 8001196:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800119a:	827b      	strh	r3, [r7, #18]
 800119c:	8a7a      	ldrh	r2, [r7, #18]
 800119e:	8abb      	ldrh	r3, [r7, #20]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	bf28      	it	cs
 80011a4:	4613      	movcs	r3, r2
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011ac:	b298      	uxth	r0, r3
 80011ae:	4920      	ldr	r1, [pc, #128]	; (8001230 <calc_process_dma_buffer+0x30c>)
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	4602      	mov	r2, r0
 80011bc:	801a      	strh	r2, [r3, #0]
		adc_raw_meta[raw_buf_second].max = MAX(adc_raw_meta[raw_buf_second].max, adc_dma_buf[adc_num][i+1]);
 80011be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011c2:	491b      	ldr	r1, [pc, #108]	; (8001230 <calc_process_dma_buffer+0x30c>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	3302      	adds	r3, #2
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	823b      	strh	r3, [r7, #16]
 80011d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011d6:	3301      	adds	r3, #1
 80011d8:	4914      	ldr	r1, [pc, #80]	; (800122c <calc_process_dma_buffer+0x308>)
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 80011e0:	fb00 f202 	mul.w	r2, r0, r2
 80011e4:	4413      	add	r3, r2
 80011e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011ea:	81fb      	strh	r3, [r7, #14]
 80011ec:	89fa      	ldrh	r2, [r7, #14]
 80011ee:	8a3b      	ldrh	r3, [r7, #16]
 80011f0:	4293      	cmp	r3, r2
 80011f2:	bf38      	it	cc
 80011f4:	4613      	movcc	r3, r2
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011fc:	b298      	uxth	r0, r3
 80011fe:	490c      	ldr	r1, [pc, #48]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3302      	adds	r3, #2
 800120c:	4602      	mov	r2, r0
 800120e:	801a      	strh	r2, [r3, #0]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001210:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001212:	3302      	adds	r3, #2
 8001214:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001216:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001218:	8bfb      	ldrh	r3, [r7, #30]
 800121a:	429a      	cmp	r2, r3
 800121c:	f67f af2a 	bls.w	8001074 <calc_process_dma_buffer+0x150>
	}
	return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	372c      	adds	r7, #44	; 0x2c
 8001226:	46bd      	mov	sp, r7
 8001228:	bcb0      	pop	{r4, r5, r7}
 800122a:	4770      	bx	lr
 800122c:	20001dec 	.word	0x20001dec
 8001230:	20001af4 	.word	0x20001af4
 8001234:	200000b4 	.word	0x200000b4

08001238 <calc_display_buffer>:

void calc_display_buffer(uint8_t buf_num) {
 8001238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800123c:	b08a      	sub	sp, #40	; 0x28
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t address = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint64_t squared_acc = 0;
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t rms_value, adc_raw;
	uint8_t gt_zero_count = 0, lt_zero_count = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	74fb      	strb	r3, [r7, #19]
 800125c:	2300      	movs	r3, #0
 800125e:	74bb      	strb	r3, [r7, #18]
	//uint16_t adc_raw_min = adc_raw_buf[buf_num][0];
	//uint16_t adc_raw_max = adc_raw_min;
	if (buf_num > 3) { return; }
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b03      	cmp	r3, #3
 8001264:	f200 809a 	bhi.w	800139c <calc_display_buffer+0x164>
	printf("Buffer %d\r\n", buf_num);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4619      	mov	r1, r3
 800126c:	484e      	ldr	r0, [pc, #312]	; (80013a8 <calc_display_buffer+0x170>)
 800126e:	f007 ff33 	bl	80090d8 <iprintf>
	printf("%3d: ", 0);
 8001272:	2100      	movs	r1, #0
 8001274:	484d      	ldr	r0, [pc, #308]	; (80013ac <calc_display_buffer+0x174>)
 8001276:	f007 ff2f 	bl	80090d8 <iprintf>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e044      	b.n	800130a <calc_display_buffer+0xd2>
		if (count >= 20) {
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	2b13      	cmp	r3, #19
 8001284:	dd06      	ble.n	8001294 <calc_display_buffer+0x5c>
			count =0;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
			printf("\r\n%3d: ", address);
 800128a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800128c:	4619      	mov	r1, r3
 800128e:	4848      	ldr	r0, [pc, #288]	; (80013b0 <calc_display_buffer+0x178>)
 8001290:	f007 ff22 	bl	80090d8 <iprintf>
		}
		adc_raw = adc_raw_buf[buf_num][i];
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4947      	ldr	r1, [pc, #284]	; (80013b4 <calc_display_buffer+0x17c>)
 8001298:	f44f 7252 	mov.w	r2, #840	; 0x348
 800129c:	fb03 f202 	mul.w	r2, r3, r2
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	4413      	add	r3, r2
 80012a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012a8:	81fb      	strh	r3, [r7, #14]
		printf("%04u ", adc_raw);
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	4619      	mov	r1, r3
 80012ae:	4842      	ldr	r0, [pc, #264]	; (80013b8 <calc_display_buffer+0x180>)
 80012b0:	f007 ff12 	bl	80090d8 <iprintf>

		squared_acc += adc_raw_buf[buf_num][i] * adc_raw_buf[buf_num][i];
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	493f      	ldr	r1, [pc, #252]	; (80013b4 <calc_display_buffer+0x17c>)
 80012b8:	f44f 7252 	mov.w	r2, #840	; 0x348
 80012bc:	fb03 f202 	mul.w	r2, r3, r2
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012c8:	4618      	mov	r0, r3
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4939      	ldr	r1, [pc, #228]	; (80013b4 <calc_display_buffer+0x17c>)
 80012ce:	f44f 7252 	mov.w	r2, #840	; 0x348
 80012d2:	fb03 f202 	mul.w	r2, r3, r2
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	4413      	add	r3, r2
 80012da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012de:	fb00 f303 	mul.w	r3, r0, r3
 80012e2:	17da      	asrs	r2, r3, #31
 80012e4:	461c      	mov	r4, r3
 80012e6:	4615      	mov	r5, r2
 80012e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012ec:	eb12 0804 	adds.w	r8, r2, r4
 80012f0:	eb43 0905 	adc.w	r9, r3, r5
 80012f4:	e9c7 8906 	strd	r8, r9, [r7, #24]
		count++; address++;
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	3301      	adds	r3, #1
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
 80012fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001300:	3301      	adds	r3, #1
 8001302:	847b      	strh	r3, [r7, #34]	; 0x22
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3301      	adds	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001310:	d3b6      	bcc.n	8001280 <calc_display_buffer+0x48>
	}
	rms_value = (uint16_t) sqrt((squared_acc / ADC_NUM_DATA));
 8001312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001316:	f44f 7252 	mov.w	r2, #840	; 0x348
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	f7ff fc83 	bl	8000c28 <__aeabi_uldivmod>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff f94f 	bl	80005cc <__aeabi_ul2d>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	ec43 2b10 	vmov	d0, r2, r3
 8001336:	f008 fd9d 	bl	8009e74 <sqrt>
 800133a:	ec53 2b10 	vmov	r2, r3, d0
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fc51 	bl	8000be8 <__aeabi_d2uiz>
 8001346:	4603      	mov	r3, r0
 8001348:	823b      	strh	r3, [r7, #16]
	printf("\r\nMin: %dmV Max: %dmV ", calc_adc_raw_to_mv_int(adc_raw_meta[buf_num].min), calc_adc_raw_to_mv_int(adc_raw_meta[buf_num].max) );
 800134a:	79fa      	ldrb	r2, [r7, #7]
 800134c:	491b      	ldr	r1, [pc, #108]	; (80013bc <calc_display_buffer+0x184>)
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f86a 	bl	8001434 <calc_adc_raw_to_mv_int>
 8001360:	4604      	mov	r4, r0
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	4915      	ldr	r1, [pc, #84]	; (80013bc <calc_display_buffer+0x184>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	3302      	adds	r3, #2
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f85d 	bl	8001434 <calc_adc_raw_to_mv_int>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	4621      	mov	r1, r4
 8001380:	480f      	ldr	r0, [pc, #60]	; (80013c0 <calc_display_buffer+0x188>)
 8001382:	f007 fea9 	bl	80090d8 <iprintf>
	printf("RMS: %dmV [%u]\r\n", calc_adc_raw_to_mv_int(rms_value), rms_value);
 8001386:	8a3b      	ldrh	r3, [r7, #16]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f853 	bl	8001434 <calc_adc_raw_to_mv_int>
 800138e:	4601      	mov	r1, r0
 8001390:	8a3b      	ldrh	r3, [r7, #16]
 8001392:	461a      	mov	r2, r3
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <calc_display_buffer+0x18c>)
 8001396:	f007 fe9f 	bl	80090d8 <iprintf>
 800139a:	e000      	b.n	800139e <calc_display_buffer+0x166>
	if (buf_num > 3) { return; }
 800139c:	bf00      	nop

}
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013a6:	bf00      	nop
 80013a8:	0800a128 	.word	0x0800a128
 80013ac:	0800a134 	.word	0x0800a134
 80013b0:	0800a13c 	.word	0x0800a13c
 80013b4:	200000b4 	.word	0x200000b4
 80013b8:	0800a144 	.word	0x0800a144
 80013bc:	20001af4 	.word	0x20001af4
 80013c0:	0800a14c 	.word	0x0800a14c
 80013c4:	0800a164 	.word	0x0800a164

080013c8 <calc_csv_buffer>:

void calc_csv_buffer(uint8_t buf_num) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	if (buf_num > 3) { return; }
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d821      	bhi.n	800141c <calc_csv_buffer+0x54>
	printf("Buffer %d\r\n", buf_num);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4619      	mov	r1, r3
 80013dc:	4811      	ldr	r0, [pc, #68]	; (8001424 <calc_csv_buffer+0x5c>)
 80013de:	f007 fe7b 	bl	80090d8 <iprintf>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e011      	b.n	800140c <calc_csv_buffer+0x44>
		printf("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	490f      	ldr	r1, [pc, #60]	; (8001428 <calc_csv_buffer+0x60>)
 80013ec:	f44f 7252 	mov.w	r2, #840	; 0x348
 80013f0:	fb03 f202 	mul.w	r2, r3, r2
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013fc:	461a      	mov	r2, r3
 80013fe:	68f9      	ldr	r1, [r7, #12]
 8001400:	480a      	ldr	r0, [pc, #40]	; (800142c <calc_csv_buffer+0x64>)
 8001402:	f007 fe69 	bl	80090d8 <iprintf>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3301      	adds	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001412:	d3e9      	bcc.n	80013e8 <calc_csv_buffer+0x20>
	}
	printf("\r\n\r\n");
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <calc_csv_buffer+0x68>)
 8001416:	f007 fec5 	bl	80091a4 <puts>
 800141a:	e000      	b.n	800141e <calc_csv_buffer+0x56>
	if (buf_num > 3) { return; }
 800141c:	bf00      	nop
}
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	0800a128 	.word	0x0800a128
 8001428:	200000b4 	.word	0x200000b4
 800142c:	0800a178 	.word	0x0800a178
 8001430:	0800a180 	.word	0x0800a180

08001434 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns mv as int
 */
int calc_adc_raw_to_mv_int(uint16_t adc_raw) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f817 	bl	8001474 <calc_adc_raw_to_mv_float>
 8001446:	ee10 3a10 	vmov	r3, s0
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f89c 	bl	8000588 <__aeabi_f2d>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	ec43 2b10 	vmov	d0, r2, r3
 8001458:	f008 fe12 	bl	800a080 <round>
 800145c:	ec53 2b10 	vmov	r2, r3, d0
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb98 	bl	8000b98 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <calc_adc_raw_to_mv_float>:

float calc_adc_raw_to_mv_float(uint16_t adc_raw) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001488:	eddf 6a07 	vldr	s13, [pc, #28]	; 80014a8 <calc_adc_raw_to_mv_float+0x34>
 800148c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001490:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014ac <calc_adc_raw_to_mv_float+0x38>
 8001494:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001498:	eeb0 0a67 	vmov.f32	s0, s15
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	457ff000 	.word	0x457ff000
 80014ac:	454e4000 	.word	0x454e4000

080014b0 <cmd_error>:
extern uint8_t led_cmd;
extern uint8_t tft_display;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	printf("Error in command <%s>\r\n", cmd_str);
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4803      	ldr	r0, [pc, #12]	; (80014c8 <cmd_error+0x18>)
 80014bc:	f007 fe0c 	bl	80090d8 <iprintf>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	0800a184 	.word	0x0800a184

080014cc <cmd_t>:


int cmd_t(uint8_t* cmd_str) {
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3301      	adds	r3, #1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b74      	cmp	r3, #116	; 0x74
 80014dc:	d014      	beq.n	8001508 <cmd_t+0x3c>
 80014de:	2b74      	cmp	r3, #116	; 0x74
 80014e0:	dc17      	bgt.n	8001512 <cmd_t+0x46>
 80014e2:	2b54      	cmp	r3, #84	; 0x54
 80014e4:	d010      	beq.n	8001508 <cmd_t+0x3c>
 80014e6:	2b54      	cmp	r3, #84	; 0x54
 80014e8:	dc13      	bgt.n	8001512 <cmd_t+0x46>
 80014ea:	2b30      	cmp	r3, #48	; 0x30
 80014ec:	d002      	beq.n	80014f4 <cmd_t+0x28>
 80014ee:	2b31      	cmp	r3, #49	; 0x31
 80014f0:	d005      	beq.n	80014fe <cmd_t+0x32>
 80014f2:	e00e      	b.n	8001512 <cmd_t+0x46>
	case '0':
		tft_display = 1;
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <cmd_t+0x58>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
		return 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e00b      	b.n	8001516 <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <cmd_t+0x58>)
 8001500:	2202      	movs	r2, #2
 8001502:	701a      	strb	r2, [r3, #0]
		return 0;
 8001504:	2300      	movs	r3, #0
 8001506:	e006      	b.n	8001516 <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <cmd_t+0x58>)
 800150a:	2209      	movs	r2, #9
 800150c:	701a      	strb	r2, [r3, #0]
		return 0;
 800150e:	2300      	movs	r3, #0
 8001510:	e001      	b.n	8001516 <cmd_t+0x4a>
	}
	return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20001dd9 	.word	0x20001dd9

08001528 <cmd_help>:


int cmd_help(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	printf("\r\nCommand Help:\r\n");
 800152c:	480a      	ldr	r0, [pc, #40]	; (8001558 <cmd_help+0x30>)
 800152e:	f007 fe39 	bl	80091a4 <puts>
	printf("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 8001532:	480a      	ldr	r0, [pc, #40]	; (800155c <cmd_help+0x34>)
 8001534:	f007 fe36 	bl	80091a4 <puts>
	printf("D[1..4]: Display ADC channel 1 - 4 buffer content\r\n");
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <cmd_help+0x38>)
 800153a:	f007 fe33 	bl	80091a4 <puts>
	printf("R: Restart ADC conversion\r\n");
 800153e:	4809      	ldr	r0, [pc, #36]	; (8001564 <cmd_help+0x3c>)
 8001540:	f007 fe30 	bl	80091a4 <puts>
	printf("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 8001544:	4808      	ldr	r0, [pc, #32]	; (8001568 <cmd_help+0x40>)
 8001546:	f007 fe2d 	bl	80091a4 <puts>
	printf("L[0,1]: LED L2 OFF / ON\r\n");
 800154a:	4808      	ldr	r0, [pc, #32]	; (800156c <cmd_help+0x44>)
 800154c:	f007 fe2a 	bl	80091a4 <puts>
	return 0;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	0800a19c 	.word	0x0800a19c
 800155c:	0800a1b0 	.word	0x0800a1b0
 8001560:	0800a1e8 	.word	0x0800a1e8
 8001564:	0800a21c 	.word	0x0800a21c
 8001568:	0800a238 	.word	0x0800a238
 800156c:	0800a26c 	.word	0x0800a26c

08001570 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	int retval = -1;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800157c:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	3b3f      	subs	r3, #63	; 0x3f
 8001584:	2b35      	cmp	r3, #53	; 0x35
 8001586:	f200 809b 	bhi.w	80016c0 <cmd_process+0x150>
 800158a:	a201      	add	r2, pc, #4	; (adr r2, 8001590 <cmd_process+0x20>)
 800158c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001590:	080016bb 	.word	0x080016bb
 8001594:	080016c1 	.word	0x080016c1
 8001598:	080016c1 	.word	0x080016c1
 800159c:	080016c1 	.word	0x080016c1
 80015a0:	08001669 	.word	0x08001669
 80015a4:	0800167d 	.word	0x0800167d
 80015a8:	080016c1 	.word	0x080016c1
 80015ac:	080016c1 	.word	0x080016c1
 80015b0:	080016c1 	.word	0x080016c1
 80015b4:	080016bb 	.word	0x080016bb
 80015b8:	080016c1 	.word	0x080016c1
 80015bc:	080016c1 	.word	0x080016c1
 80015c0:	080016c1 	.word	0x080016c1
 80015c4:	08001691 	.word	0x08001691
 80015c8:	080016c1 	.word	0x080016c1
 80015cc:	080016c1 	.word	0x080016c1
 80015d0:	080016c1 	.word	0x080016c1
 80015d4:	080016c1 	.word	0x080016c1
 80015d8:	080016c1 	.word	0x080016c1
 80015dc:	080016a5 	.word	0x080016a5
 80015e0:	080016c1 	.word	0x080016c1
 80015e4:	080016b1 	.word	0x080016b1
 80015e8:	080016c1 	.word	0x080016c1
 80015ec:	080016c1 	.word	0x080016c1
 80015f0:	080016c1 	.word	0x080016c1
 80015f4:	080016c1 	.word	0x080016c1
 80015f8:	080016c1 	.word	0x080016c1
 80015fc:	080016c1 	.word	0x080016c1
 8001600:	080016c1 	.word	0x080016c1
 8001604:	080016c1 	.word	0x080016c1
 8001608:	080016c1 	.word	0x080016c1
 800160c:	080016c1 	.word	0x080016c1
 8001610:	080016c1 	.word	0x080016c1
 8001614:	080016c1 	.word	0x080016c1
 8001618:	080016c1 	.word	0x080016c1
 800161c:	080016c1 	.word	0x080016c1
 8001620:	08001669 	.word	0x08001669
 8001624:	0800167d 	.word	0x0800167d
 8001628:	080016c1 	.word	0x080016c1
 800162c:	080016c1 	.word	0x080016c1
 8001630:	080016c1 	.word	0x080016c1
 8001634:	080016bb 	.word	0x080016bb
 8001638:	080016c1 	.word	0x080016c1
 800163c:	080016c1 	.word	0x080016c1
 8001640:	080016c1 	.word	0x080016c1
 8001644:	08001691 	.word	0x08001691
 8001648:	080016c1 	.word	0x080016c1
 800164c:	080016c1 	.word	0x080016c1
 8001650:	080016c1 	.word	0x080016c1
 8001654:	080016c1 	.word	0x080016c1
 8001658:	080016c1 	.word	0x080016c1
 800165c:	080016a5 	.word	0x080016a5
 8001660:	080016c1 	.word	0x080016c1
 8001664:	080016b1 	.word	0x080016b1
	case 'C':
	case 'c':
		csv_buffer = cmd_str[1] - 0x30;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3301      	adds	r3, #1
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	3b30      	subs	r3, #48	; 0x30
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <cmd_process+0x15c>)
 8001674:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
		break;
 800167a:	e021      	b.n	80016c0 <cmd_process+0x150>
	case 'D':
	case 'd':
		display_buffer = cmd_str[1] - 0x30;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3301      	adds	r3, #1
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	3b30      	subs	r3, #48	; 0x30
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <cmd_process+0x160>)
 8001688:	701a      	strb	r2, [r3, #0]
		retval = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
		break;
 800168e:	e017      	b.n	80016c0 <cmd_process+0x150>
	case 'L':
	case 'l':
		led_cmd = cmd_str[1] - 0x30 + 1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3301      	adds	r3, #1
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	3b2f      	subs	r3, #47	; 0x2f
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <cmd_process+0x164>)
 800169c:	701a      	strb	r2, [r3, #0]
		retval = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
		break;
 80016a2:	e00d      	b.n	80016c0 <cmd_process+0x150>
	case 'R':
	case 'r':
		adc_restart = 1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <cmd_process+0x168>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
		retval = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
		break;
 80016ae:	e007      	b.n	80016c0 <cmd_process+0x150>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff0b 	bl	80014cc <cmd_t>
 80016b6:	60f8      	str	r0, [r7, #12]
		break;
 80016b8:	e002      	b.n	80016c0 <cmd_process+0x150>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 80016ba:	f7ff ff35 	bl	8001528 <cmd_help>
 80016be:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 80016c0:	68fb      	ldr	r3, [r7, #12]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20001dd7 	.word	0x20001dd7
 80016d0:	20001dd6 	.word	0x20001dd6
 80016d4:	20001dd8 	.word	0x20001dd8
 80016d8:	20001dd5 	.word	0x20001dd5

080016dc <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7fe fd93 	bl	8000210 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <CMD_Handler+0x3c>)
 80016f0:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <CMD_Handler+0x3c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d105      	bne.n	8001706 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fed8 	bl	80014b0 <cmd_error>
		return -1;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001704:	e003      	b.n	800170e <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ff32 	bl	8001570 <cmd_process>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20001b24 	.word	0x20001b24

0800171c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001724:	1d39      	adds	r1, r7, #4
 8001726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172a:	2201      	movs	r2, #1
 800172c:	4803      	ldr	r0, [pc, #12]	; (800173c <__io_putchar+0x20>)
 800172e:	f006 fbe6 	bl	8007efe <HAL_UART_Transmit>
  return ch;
 8001732:	687b      	ldr	r3, [r7, #4]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20001d78 	.word	0x20001d78

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001746:	f003 f83d 	bl	80047c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174a:	f000 f9ab 	bl	8001aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174e:	f000 fbc5 	bl	8001edc <MX_GPIO_Init>
  MX_DMA_Init();
 8001752:	f000 fb85 	bl	8001e60 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001756:	f000 fb59 	bl	8001e0c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800175a:	f000 fb0b 	bl	8001d74 <MX_TIM2_Init>
  MX_ADC1_Init();
 800175e:	f000 fa13 	bl	8001b88 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001762:	f000 fa71 	bl	8001c48 <MX_ADC2_Init>
  MX_SPI2_Init();
 8001766:	f000 facf 	bl	8001d08 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  // TFT Display
  Displ_BackLight('1');
 800176a:	2031      	movs	r0, #49	; 0x31
 800176c:	f002 fb0a 	bl	8003d84 <Displ_BackLight>
  Displ_Init(Displ_Orientat_0);		// initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8001770:	2000      	movs	r0, #0
 8001772:	f001 fa3b 	bl	8002bec <Displ_Init>
  printf("Displ_Init - done\r\n");
 8001776:	485f      	ldr	r0, [pc, #380]	; (80018f4 <main+0x1b4>)
 8001778:	f007 fd14 	bl	80091a4 <puts>
  Displ_CLS(BLACK);			// after initialization (above) and before turning on backlight (below), you can draw the initial display appearance.
 800177c:	2000      	movs	r0, #0
 800177e:	f001 fca3 	bl	80030c8 <Displ_CLS>
  printf("Displ_CLS - done\r\n");
 8001782:	485d      	ldr	r0, [pc, #372]	; (80018f8 <main+0x1b8>)
 8001784:	f007 fd0e 	bl	80091a4 <puts>


  // Start UART receive via interrupt
  if (HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) != HAL_OK) {
 8001788:	2201      	movs	r2, #1
 800178a:	495c      	ldr	r1, [pc, #368]	; (80018fc <main+0x1bc>)
 800178c:	485c      	ldr	r0, [pc, #368]	; (8001900 <main+0x1c0>)
 800178e:	f006 fc48 	bl	8008022 <HAL_UART_Receive_IT>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <main+0x5c>
    Error_Handler();
 8001798:	f000 fd40 	bl	800221c <Error_Handler>
  }

  // Start Timer for ADC readings
    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 800179c:	4859      	ldr	r0, [pc, #356]	; (8001904 <main+0x1c4>)
 800179e:	f005 ff25 	bl	80075ec <HAL_TIM_Base_Start_IT>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <main+0x6c>
      Error_Handler();
 80017a8:	f000 fd38 	bl	800221c <Error_Handler>
    }

  // Start ADC1 - keeps running via TIM2
  if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 80017ac:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80017b0:	4955      	ldr	r1, [pc, #340]	; (8001908 <main+0x1c8>)
 80017b2:	4856      	ldr	r0, [pc, #344]	; (800190c <main+0x1cc>)
 80017b4:	f003 f8e0 	bl	8004978 <HAL_ADC_Start_DMA>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d004      	beq.n	80017c8 <main+0x88>
  	printf("Error starting ADC1 DMA\r\n");
 80017be:	4854      	ldr	r0, [pc, #336]	; (8001910 <main+0x1d0>)
 80017c0:	f007 fcf0 	bl	80091a4 <puts>
  	Error_Handler();
 80017c4:	f000 fd2a 	bl	800221c <Error_Handler>
  }
  //Start ADC2 - keeps running via TIM2
  if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 80017c8:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80017cc:	4951      	ldr	r1, [pc, #324]	; (8001914 <main+0x1d4>)
 80017ce:	4852      	ldr	r0, [pc, #328]	; (8001918 <main+0x1d8>)
 80017d0:	f003 f8d2 	bl	8004978 <HAL_ADC_Start_DMA>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d004      	beq.n	80017e4 <main+0xa4>
   	printf("Error starting ADC2 DMA\r\n");
 80017da:	4850      	ldr	r0, [pc, #320]	; (800191c <main+0x1dc>)
 80017dc:	f007 fce2 	bl	80091a4 <puts>
   	Error_Handler();
 80017e0:	f000 fd1c 	bl	800221c <Error_Handler>
  }

  // Startup success message
   if (HAL_UART_Transmit(&huart2, startup_msg, sizeof(startup_msg), 1000) != HAL_OK) {
 80017e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e8:	2212      	movs	r2, #18
 80017ea:	494d      	ldr	r1, [pc, #308]	; (8001920 <main+0x1e0>)
 80017ec:	4844      	ldr	r0, [pc, #272]	; (8001900 <main+0x1c0>)
 80017ee:	f006 fb86 	bl	8007efe <HAL_UART_Transmit>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <main+0xbc>
    Error_Handler();
 80017f8:	f000 fd10 	bl	800221c <Error_Handler>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Handle UART communication
	  if (rx_cmd_ready) {
 80017fc:	4b49      	ldr	r3, [pc, #292]	; (8001924 <main+0x1e4>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <main+0xd6>
		  CMD_Handler((uint8_t*)rx_buff);
 8001804:	4848      	ldr	r0, [pc, #288]	; (8001928 <main+0x1e8>)
 8001806:	f7ff ff69 	bl	80016dc <CMD_Handler>
		  rx_count = 0;
 800180a:	4b48      	ldr	r3, [pc, #288]	; (800192c <main+0x1ec>)
 800180c:	2200      	movs	r2, #0
 800180e:	801a      	strh	r2, [r3, #0]
		  rx_cmd_ready = 0;
 8001810:	4b44      	ldr	r3, [pc, #272]	; (8001924 <main+0x1e4>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
	  }

	  if (adc_restart) {
 8001816:	4b46      	ldr	r3, [pc, #280]	; (8001930 <main+0x1f0>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d01a      	beq.n	8001854 <main+0x114>
		  adc_restart = 0;
 800181e:	4b44      	ldr	r3, [pc, #272]	; (8001930 <main+0x1f0>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
		  //HAL_ADC_Start_IT (&hadc1);
		  if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8001824:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001828:	4937      	ldr	r1, [pc, #220]	; (8001908 <main+0x1c8>)
 800182a:	4838      	ldr	r0, [pc, #224]	; (800190c <main+0x1cc>)
 800182c:	f003 f8a4 	bl	8004978 <HAL_ADC_Start_DMA>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <main+0xfc>
			printf("Error re-starting ADC1 DMA\r\n");
 8001836:	483f      	ldr	r0, [pc, #252]	; (8001934 <main+0x1f4>)
 8001838:	f007 fcb4 	bl	80091a4 <puts>
		  }
		  if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 800183c:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001840:	4934      	ldr	r1, [pc, #208]	; (8001914 <main+0x1d4>)
 8001842:	4835      	ldr	r0, [pc, #212]	; (8001918 <main+0x1d8>)
 8001844:	f003 f898 	bl	8004978 <HAL_ADC_Start_DMA>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <main+0x114>
		  	printf("Error re-starting ADC2 DMA\r\n");
 800184e:	483a      	ldr	r0, [pc, #232]	; (8001938 <main+0x1f8>)
 8001850:	f007 fca8 	bl	80091a4 <puts>
		  }
	  }

	  if (display_buffer) {
 8001854:	4b39      	ldr	r3, [pc, #228]	; (800193c <main+0x1fc>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <main+0x130>
		  calc_display_buffer(display_buffer-1);
 800185c:	4b37      	ldr	r3, [pc, #220]	; (800193c <main+0x1fc>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	3b01      	subs	r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fce7 	bl	8001238 <calc_display_buffer>
		  display_buffer = 0;
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <main+0x1fc>)
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
	  }

	  if (csv_buffer) {
 8001870:	4b33      	ldr	r3, [pc, #204]	; (8001940 <main+0x200>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d009      	beq.n	800188c <main+0x14c>
	  	  calc_csv_buffer(csv_buffer-1);
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <main+0x200>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	3b01      	subs	r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fda1 	bl	80013c8 <calc_csv_buffer>
	  	  csv_buffer = 0;
 8001886:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <main+0x200>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
	  }

	  if (tft_display) {
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <main+0x204>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <main+0x196>
		  if (tft_display == 9) {
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <main+0x204>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b09      	cmp	r3, #9
 800189a:	d10e      	bne.n	80018ba <main+0x17a>
			  printf("Running TFT performance test ...\r\n");
 800189c:	482a      	ldr	r0, [pc, #168]	; (8001948 <main+0x208>)
 800189e:	f007 fc81 	bl	80091a4 <puts>
			  Displ_BackLight('1');
 80018a2:	2031      	movs	r0, #49	; 0x31
 80018a4:	f002 fa6e 	bl	8003d84 <Displ_BackLight>
			  //Displ_PerfTest();
			  Displ_TestAll();
 80018a8:	f002 ff36 	bl	8004718 <Displ_TestAll>
			  Displ_BackLight('0');
 80018ac:	2030      	movs	r0, #48	; 0x30
 80018ae:	f002 fa69 	bl	8003d84 <Displ_BackLight>
			  printf("....completed\r\n");
 80018b2:	4826      	ldr	r0, [pc, #152]	; (800194c <main+0x20c>)
 80018b4:	f007 fc76 	bl	80091a4 <puts>
 80018b8:	e00a      	b.n	80018d0 <main+0x190>
		  } else {
			  if (tft_display == 1) {
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <main+0x204>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d103      	bne.n	80018ca <main+0x18a>
				  Displ_BackLight('0');
 80018c2:	2030      	movs	r0, #48	; 0x30
 80018c4:	f002 fa5e 	bl	8003d84 <Displ_BackLight>
 80018c8:	e002      	b.n	80018d0 <main+0x190>
			  } else {
				  Displ_BackLight('1');
 80018ca:	2031      	movs	r0, #49	; 0x31
 80018cc:	f002 fa5a 	bl	8003d84 <Displ_BackLight>
			  }
		  }
		  tft_display = 0;
 80018d0:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <main+0x204>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
	  }

	  if (led_cmd) {
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <main+0x210>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d044      	beq.n	8001968 <main+0x228>
		  if (led_cmd > 1) {
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <main+0x210>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d938      	bls.n	8001958 <main+0x218>
			  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	2120      	movs	r1, #32
 80018ea:	481a      	ldr	r0, [pc, #104]	; (8001954 <main+0x214>)
 80018ec:	f004 fac4 	bl	8005e78 <HAL_GPIO_WritePin>
 80018f0:	e037      	b.n	8001962 <main+0x222>
 80018f2:	bf00      	nop
 80018f4:	0800a288 	.word	0x0800a288
 80018f8:	0800a29c 	.word	0x0800a29c
 80018fc:	20001dbe 	.word	0x20001dbe
 8001900:	20001d78 	.word	0x20001d78
 8001904:	20001d30 	.word	0x20001d30
 8001908:	20001dec 	.word	0x20001dec
 800190c:	20001b28 	.word	0x20001b28
 8001910:	0800a2b0 	.word	0x0800a2b0
 8001914:	2000382c 	.word	0x2000382c
 8001918:	20001b70 	.word	0x20001b70
 800191c:	0800a2cc 	.word	0x0800a2cc
 8001920:	20000000 	.word	0x20000000
 8001924:	20001dd4 	.word	0x20001dd4
 8001928:	20001dc0 	.word	0x20001dc0
 800192c:	20001dbc 	.word	0x20001dbc
 8001930:	20001dd5 	.word	0x20001dd5
 8001934:	0800a2e8 	.word	0x0800a2e8
 8001938:	0800a304 	.word	0x0800a304
 800193c:	20001dd6 	.word	0x20001dd6
 8001940:	20001dd7 	.word	0x20001dd7
 8001944:	20001dd9 	.word	0x20001dd9
 8001948:	0800a320 	.word	0x0800a320
 800194c:	0800a344 	.word	0x0800a344
 8001950:	20001dd8 	.word	0x20001dd8
 8001954:	40020000 	.word	0x40020000
		  } else {
			  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2120      	movs	r1, #32
 800195c:	4846      	ldr	r0, [pc, #280]	; (8001a78 <main+0x338>)
 800195e:	f004 fa8b 	bl	8005e78 <HAL_GPIO_WritePin>
		  }
		  led_cmd = 0;
 8001962:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <main+0x33c>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]

	  //HAL_Delay(800);

	  // Check if we have missed processing DMA data sets
	  // This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
	  if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 8001968:	4b45      	ldr	r3, [pc, #276]	; (8001a80 <main+0x340>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	dc0b      	bgt.n	8001988 <main+0x248>
 8001970:	4b44      	ldr	r3, [pc, #272]	; (8001a84 <main+0x344>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	dc07      	bgt.n	8001988 <main+0x248>
 8001978:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <main+0x348>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	dc03      	bgt.n	8001988 <main+0x248>
 8001980:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <main+0x34c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	dd28      	ble.n	80019da <main+0x29a>
		  printf("Processing missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
 8001988:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <main+0x340>)
 800198a:	6819      	ldr	r1, [r3, #0]
 800198c:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <main+0x344>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <main+0x348>)
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	4b3d      	ldr	r3, [pc, #244]	; (8001a8c <main+0x34c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	4603      	mov	r3, r0
 800199c:	483c      	ldr	r0, [pc, #240]	; (8001a90 <main+0x350>)
 800199e:	f007 fb9b 	bl	80090d8 <iprintf>
		  if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 80019a2:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <main+0x340>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	dd02      	ble.n	80019b0 <main+0x270>
 80019aa:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <main+0x340>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
		  if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 80019b0:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <main+0x344>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	dd02      	ble.n	80019be <main+0x27e>
 80019b8:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <main+0x344>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 80019be:	4b32      	ldr	r3, [pc, #200]	; (8001a88 <main+0x348>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	dd02      	ble.n	80019cc <main+0x28c>
 80019c6:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <main+0x348>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 80019cc:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <main+0x34c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	dd02      	ble.n	80019da <main+0x29a>
 80019d4:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <main+0x34c>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
	  }

	  // Process DMA buffers
	  if (adc1_dma_l_count > 0) {
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <main+0x340>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	dd0e      	ble.n	8001a00 <main+0x2c0>
		  if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 80019e2:	2100      	movs	r1, #0
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fa9d 	bl	8000f24 <calc_process_dma_buffer>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <main+0x2b6>
			  printf("Processing ADC1 DMA 1st half failed\r\n");
 80019f0:	4828      	ldr	r0, [pc, #160]	; (8001a94 <main+0x354>)
 80019f2:	f007 fbd7 	bl	80091a4 <puts>
		  }
		  adc1_dma_l_count--;
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <main+0x340>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	4a20      	ldr	r2, [pc, #128]	; (8001a80 <main+0x340>)
 80019fe:	6013      	str	r3, [r2, #0]
	  }
	  if (adc1_dma_h_count > 0) {
 8001a00:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <main+0x344>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	dd0e      	ble.n	8001a26 <main+0x2e6>
	  	  if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f7ff fa8a 	bl	8000f24 <calc_process_dma_buffer>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <main+0x2dc>
	  		printf("Processing ADC1 DMA 2nd half failed\r\n");
 8001a16:	4820      	ldr	r0, [pc, #128]	; (8001a98 <main+0x358>)
 8001a18:	f007 fbc4 	bl	80091a4 <puts>
	  	  }
	  	  adc1_dma_h_count--;
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <main+0x344>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <main+0x344>)
 8001a24:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_l_count > 0) {
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <main+0x348>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	dd0e      	ble.n	8001a4c <main+0x30c>
	  	  if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 8001a2e:	2101      	movs	r1, #1
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff fa77 	bl	8000f24 <calc_process_dma_buffer>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <main+0x302>
	  		printf("Processing ADC2 DMA 1st half failed\r\n");
 8001a3c:	4817      	ldr	r0, [pc, #92]	; (8001a9c <main+0x35c>)
 8001a3e:	f007 fbb1 	bl	80091a4 <puts>
	  	  }
	  	  adc2_dma_l_count--;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <main+0x348>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	4a0f      	ldr	r2, [pc, #60]	; (8001a88 <main+0x348>)
 8001a4a:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_h_count > 0) {
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <main+0x34c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f77f aed3 	ble.w	80017fc <main+0xbc>
	  	  if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 8001a56:	2101      	movs	r1, #1
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7ff fa63 	bl	8000f24 <calc_process_dma_buffer>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <main+0x32a>
	  		printf("Processing ADC2 DMA 2nd half failed\r\n");
 8001a64:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <main+0x360>)
 8001a66:	f007 fb9d 	bl	80091a4 <puts>
	  	  }
	   	  adc2_dma_h_count--;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <main+0x34c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <main+0x34c>)
 8001a72:	6013      	str	r3, [r2, #0]
	  if (rx_cmd_ready) {
 8001a74:	e6c2      	b.n	80017fc <main+0xbc>
 8001a76:	bf00      	nop
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	20001dd8 	.word	0x20001dd8
 8001a80:	20001ddc 	.word	0x20001ddc
 8001a84:	20001de0 	.word	0x20001de0
 8001a88:	20001de4 	.word	0x20001de4
 8001a8c:	20001de8 	.word	0x20001de8
 8001a90:	0800a354 	.word	0x0800a354
 8001a94:	0800a380 	.word	0x0800a380
 8001a98:	0800a3a8 	.word	0x0800a3a8
 8001a9c:	0800a3d0 	.word	0x0800a3d0
 8001aa0:	0800a3f8 	.word	0x0800a3f8

08001aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b094      	sub	sp, #80	; 0x50
 8001aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	2234      	movs	r2, #52	; 0x34
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f007 fb7e 	bl	80091b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab8:	f107 0308 	add.w	r3, r7, #8
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <SystemClock_Config+0xdc>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a2b      	ldr	r2, [pc, #172]	; (8001b80 <SystemClock_Config+0xdc>)
 8001ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <SystemClock_Config+0xdc>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <SystemClock_Config+0xe0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a25      	ldr	r2, [pc, #148]	; (8001b84 <SystemClock_Config+0xe0>)
 8001aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <SystemClock_Config+0xe0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b04:	2301      	movs	r3, #1
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b08:	2310      	movs	r3, #16
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b10:	2300      	movs	r3, #0
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b14:	2308      	movs	r3, #8
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b18:	23b4      	movs	r3, #180	; 0xb4
 8001b1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b24:	2302      	movs	r3, #2
 8001b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f004 fd95 	bl	800665c <HAL_RCC_OscConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b38:	f000 fb70 	bl	800221c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b3c:	f004 f9f4 	bl	8005f28 <HAL_PWREx_EnableOverDrive>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b46:	f000 fb69 	bl	800221c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4a:	230f      	movs	r3, #15
 8001b4c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b60:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	2105      	movs	r1, #5
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f004 fa2d 	bl	8005fc8 <HAL_RCC_ClockConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001b74:	f000 fb52 	bl	800221c <Error_Handler>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3750      	adds	r7, #80	; 0x50
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40007000 	.word	0x40007000

08001b88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b8e:	463b      	mov	r3, r7
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001b9c:	4a29      	ldr	r2, [pc, #164]	; (8001c44 <MX_ADC1_Init+0xbc>)
 8001b9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001ba2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ba6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ba8:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001bcc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001bda:	2202      	movs	r2, #2
 8001bdc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bec:	4814      	ldr	r0, [pc, #80]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001bee:	f002 fe7f 	bl	80048f0 <HAL_ADC_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001bf8:	f000 fb10 	bl	800221c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001c04:	2301      	movs	r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c08:	463b      	mov	r3, r7
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480c      	ldr	r0, [pc, #48]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001c0e:	f002 ffc3 	bl	8004b98 <HAL_ADC_ConfigChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001c18:	f000 fb00 	bl	800221c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c1c:	230a      	movs	r3, #10
 8001c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c20:	2302      	movs	r3, #2
 8001c22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c24:	463b      	mov	r3, r7
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_ADC1_Init+0xb8>)
 8001c2a:	f002 ffb5 	bl	8004b98 <HAL_ADC_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001c34:	f000 faf2 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20001b28 	.word	0x20001b28
 8001c44:	40012000 	.word	0x40012000

08001c48 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c4e:	463b      	mov	r3, r7
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001c5a:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001c5c:	4a29      	ldr	r2, [pc, #164]	; (8001d04 <MX_ADC2_Init+0xbc>)
 8001c5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001c60:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001c62:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001c8c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001c90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001cac:	4814      	ldr	r0, [pc, #80]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001cae:	f002 fe1f 	bl	80048f0 <HAL_ADC_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001cb8:	f000 fab0 	bl	800221c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cc8:	463b      	mov	r3, r7
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001cce:	f002 ff63 	bl	8004b98 <HAL_ADC_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001cd8:	f000 faa0 	bl	800221c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001cdc:	230b      	movs	r3, #11
 8001cde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_ADC2_Init+0xb8>)
 8001cea:	f002 ff55 	bl	8004b98 <HAL_ADC_ConfigChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8001cf4:	f000 fa92 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20001b70 	.word	0x20001b70
 8001d04:	40012100 	.word	0x40012100

08001d08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d0c:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d0e:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <MX_SPI2_Init+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d54:	220a      	movs	r2, #10
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d58:	4804      	ldr	r0, [pc, #16]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d5a:	f004 ff1d 	bl	8006b98 <HAL_SPI_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d64:	f000 fa5a 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20001c78 	.word	0x20001c78
 8001d70:	40003800 	.word	0x40003800

08001d74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d88:	463b      	mov	r3, r7
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <MX_TIM2_Init+0x94>)
 8001d92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <MX_TIM2_Init+0x94>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MX_TIM2_Init+0x94>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <MX_TIM2_Init+0x94>)
 8001da6:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8001daa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <MX_TIM2_Init+0x94>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <MX_TIM2_Init+0x94>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001db8:	4813      	ldr	r0, [pc, #76]	; (8001e08 <MX_TIM2_Init+0x94>)
 8001dba:	f005 fbc7 	bl	800754c <HAL_TIM_Base_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001dc4:	f000 fa2a 	bl	800221c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480c      	ldr	r0, [pc, #48]	; (8001e08 <MX_TIM2_Init+0x94>)
 8001dd6:	f005 fd81 	bl	80078dc <HAL_TIM_ConfigClockSource>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001de0:	f000 fa1c 	bl	800221c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001de4:	2320      	movs	r3, #32
 8001de6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dec:	463b      	mov	r3, r7
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_TIM2_Init+0x94>)
 8001df2:	f005 ffa7 	bl	8007d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001dfc:	f000 fa0e 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20001d30 	.word	0x20001d30

08001e0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_USART2_UART_Init+0x4c>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <MX_USART2_UART_Init+0x50>)
 8001e14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <MX_USART2_UART_Init+0x4c>)
 8001e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_USART2_UART_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_USART2_UART_Init+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <MX_USART2_UART_Init+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_USART2_UART_Init+0x4c>)
 8001e32:	220c      	movs	r2, #12
 8001e34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <MX_USART2_UART_Init+0x4c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_USART2_UART_Init+0x4c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_USART2_UART_Init+0x4c>)
 8001e44:	f006 f80e 	bl	8007e64 <HAL_UART_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e4e:	f000 f9e5 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20001d78 	.word	0x20001d78
 8001e5c:	40004400 	.word	0x40004400

08001e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <MX_DMA_Init+0x78>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <MX_DMA_Init+0x78>)
 8001e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <MX_DMA_Init+0x78>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <MX_DMA_Init+0x78>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <MX_DMA_Init+0x78>)
 8001e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <MX_DMA_Init+0x78>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	200f      	movs	r0, #15
 8001ea4:	f003 fa03 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001ea8:	200f      	movs	r0, #15
 8001eaa:	f003 fa1c 	bl	80052e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2038      	movs	r0, #56	; 0x38
 8001eb4:	f003 f9fb 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001eb8:	2038      	movs	r0, #56	; 0x38
 8001eba:	f003 fa14 	bl	80052e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	203a      	movs	r0, #58	; 0x3a
 8001ec4:	f003 f9f3 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ec8:	203a      	movs	r0, #58	; 0x3a
 8001eca:	f003 fa0c 	bl	80052e6 <HAL_NVIC_EnableIRQ>

}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	4b57      	ldr	r3, [pc, #348]	; (8002054 <MX_GPIO_Init+0x178>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a56      	ldr	r2, [pc, #344]	; (8002054 <MX_GPIO_Init+0x178>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b54      	ldr	r3, [pc, #336]	; (8002054 <MX_GPIO_Init+0x178>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b50      	ldr	r3, [pc, #320]	; (8002054 <MX_GPIO_Init+0x178>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a4f      	ldr	r2, [pc, #316]	; (8002054 <MX_GPIO_Init+0x178>)
 8001f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <MX_GPIO_Init+0x178>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	4b49      	ldr	r3, [pc, #292]	; (8002054 <MX_GPIO_Init+0x178>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a48      	ldr	r2, [pc, #288]	; (8002054 <MX_GPIO_Init+0x178>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b46      	ldr	r3, [pc, #280]	; (8002054 <MX_GPIO_Init+0x178>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	4b42      	ldr	r3, [pc, #264]	; (8002054 <MX_GPIO_Init+0x178>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a41      	ldr	r2, [pc, #260]	; (8002054 <MX_GPIO_Init+0x178>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b3f      	ldr	r3, [pc, #252]	; (8002054 <MX_GPIO_Init+0x178>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8001f68:	483b      	ldr	r0, [pc, #236]	; (8002058 <MX_GPIO_Init+0x17c>)
 8001f6a:	f003 ff85 	bl	8005e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	483a      	ldr	r0, [pc, #232]	; (800205c <MX_GPIO_Init+0x180>)
 8001f74:	f003 ff80 	bl	8005e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f7e:	4836      	ldr	r0, [pc, #216]	; (8002058 <MX_GPIO_Init+0x17c>)
 8001f80:	f003 ff7a 	bl	8005e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2140      	movs	r1, #64	; 0x40
 8001f88:	4835      	ldr	r0, [pc, #212]	; (8002060 <MX_GPIO_Init+0x184>)
 8001f8a:	f003 ff75 	bl	8005e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	482d      	ldr	r0, [pc, #180]	; (800205c <MX_GPIO_Init+0x180>)
 8001fa6:	f003 fdbb 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin;
 8001faa:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8001fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4825      	ldr	r0, [pc, #148]	; (8002058 <MX_GPIO_Init+0x17c>)
 8001fc4:	f003 fdac 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	481e      	ldr	r0, [pc, #120]	; (8002058 <MX_GPIO_Init+0x17c>)
 8001fe0:	f003 fd9e 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4818      	ldr	r0, [pc, #96]	; (800205c <MX_GPIO_Init+0x180>)
 8001ffc:	f003 fd90 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8002000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	2301      	movs	r3, #1
 8002008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	480f      	ldr	r0, [pc, #60]	; (8002058 <MX_GPIO_Init+0x17c>)
 800201a:	f003 fd81 	bl	8005b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin;
 800201e:	2340      	movs	r3, #64	; 0x40
 8002020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002022:	2301      	movs	r3, #1
 8002024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_RST_GPIO_Port, &GPIO_InitStruct);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	480a      	ldr	r0, [pc, #40]	; (8002060 <MX_GPIO_Init+0x184>)
 8002036:	f003 fd73 	bl	8005b20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	2028      	movs	r0, #40	; 0x28
 8002040:	f003 f935 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002044:	2028      	movs	r0, #40	; 0x28
 8002046:	f003 f94e 	bl	80052e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800204a:	bf00      	nop
 800204c:	3728      	adds	r7, #40	; 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	40020000 	.word	0x40020000
 800205c:	40020800 	.word	0x40020800
 8002060:	40020400 	.word	0x40020400

08002064 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <HAL_ADC_ConvCpltCallback+0x34>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d105      	bne.n	8002080 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_ADC_ConvCpltCallback+0x38>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3301      	adds	r3, #1
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <HAL_ADC_ConvCpltCallback+0x38>)
 800207c:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 800207e:	e004      	b.n	800208a <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002088:	6013      	str	r3, [r2, #0]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20001b28 	.word	0x20001b28
 800209c:	20001de0 	.word	0x20001de0
 80020a0:	20001de8 	.word	0x20001de8

080020a4 <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d105      	bne.n	80020c0 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a08      	ldr	r2, [pc, #32]	; (80020dc <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80020bc:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 80020be:	e004      	b.n	80020ca <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3301      	adds	r3, #1
 80020c6:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80020c8:	6013      	str	r3, [r2, #0]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20001b28 	.word	0x20001b28
 80020dc:	20001ddc 	.word	0x20001ddc
 80020e0:	20001de4 	.word	0x20001de4

080020e4 <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a22      	ldr	r2, [pc, #136]	; (8002178 <HAL_ADC_ErrorCallback+0x94>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d102      	bne.n	80020fa <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 80020f4:	2301      	movs	r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	e001      	b.n	80020fe <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 80020fa:	2302      	movs	r3, #2
 80020fc:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	2b04      	cmp	r3, #4
 8002104:	d82c      	bhi.n	8002160 <HAL_ADC_ErrorCallback+0x7c>
 8002106:	a201      	add	r2, pc, #4	; (adr r2, 800210c <HAL_ADC_ErrorCallback+0x28>)
 8002108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210c:	08002121 	.word	0x08002121
 8002110:	08002131 	.word	0x08002131
 8002114:	08002141 	.word	0x08002141
 8002118:	08002161 	.word	0x08002161
 800211c:	08002151 	.word	0x08002151
	case HAL_ADC_ERROR_NONE:
		printf("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	461a      	mov	r2, r3
 8002126:	68f9      	ldr	r1, [r7, #12]
 8002128:	4814      	ldr	r0, [pc, #80]	; (800217c <HAL_ADC_ErrorCallback+0x98>)
 800212a:	f006 ffd5 	bl	80090d8 <iprintf>
		break;
 800212e:	e01e      	b.n	800216e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		printf("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	461a      	mov	r2, r3
 8002136:	68f9      	ldr	r1, [r7, #12]
 8002138:	4811      	ldr	r0, [pc, #68]	; (8002180 <HAL_ADC_ErrorCallback+0x9c>)
 800213a:	f006 ffcd 	bl	80090d8 <iprintf>
		break;
 800213e:	e016      	b.n	800216e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		printf("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	461a      	mov	r2, r3
 8002146:	68f9      	ldr	r1, [r7, #12]
 8002148:	480e      	ldr	r0, [pc, #56]	; (8002184 <HAL_ADC_ErrorCallback+0xa0>)
 800214a:	f006 ffc5 	bl	80090d8 <iprintf>
		break;
 800214e:	e00e      	b.n	800216e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		printf("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	461a      	mov	r2, r3
 8002156:	68f9      	ldr	r1, [r7, #12]
 8002158:	480b      	ldr	r0, [pc, #44]	; (8002188 <HAL_ADC_ErrorCallback+0xa4>)
 800215a:	f006 ffbd 	bl	80090d8 <iprintf>
		break;
 800215e:	e006      	b.n	800216e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		printf("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		printf("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	4619      	mov	r1, r3
 8002166:	4809      	ldr	r0, [pc, #36]	; (800218c <HAL_ADC_ErrorCallback+0xa8>)
 8002168:	f006 ffb6 	bl	80090d8 <iprintf>
	}
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20001b28 	.word	0x20001b28
 800217c:	0800a420 	.word	0x0800a420
 8002180:	0800a43c 	.word	0x0800a43c
 8002184:	0800a460 	.word	0x0800a460
 8002188:	0800a480 	.word	0x0800a480
 800218c:	0800a49c 	.word	0x0800a49c

08002190 <HAL_UART_RxCpltCallback>:

// UART has received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	if (rx_count >= sizeof(rx_buff)) {
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_UART_RxCpltCallback+0x78>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	2b13      	cmp	r3, #19
 800219e:	d902      	bls.n	80021a6 <HAL_UART_RxCpltCallback+0x16>
		rx_count = 0;		// wrap back to start
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_UART_RxCpltCallback+0x78>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	801a      	strh	r2, [r3, #0]
	}
	if ( HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) == HAL_UART_ERROR_NONE) {
 80021a6:	2201      	movs	r2, #1
 80021a8:	4918      	ldr	r1, [pc, #96]	; (800220c <HAL_UART_RxCpltCallback+0x7c>)
 80021aa:	4819      	ldr	r0, [pc, #100]	; (8002210 <HAL_UART_RxCpltCallback+0x80>)
 80021ac:	f005 ff39 	bl	8008022 <HAL_UART_Receive_IT>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d124      	bne.n	8002200 <HAL_UART_RxCpltCallback+0x70>
		// check for End of input (CR or LF)
		if ( (rx_byte != 0x0A) && (rx_byte !=  0x0D) ) {
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_UART_RxCpltCallback+0x7c>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b0a      	cmp	r3, #10
 80021bc:	d00f      	beq.n	80021de <HAL_UART_RxCpltCallback+0x4e>
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_UART_RxCpltCallback+0x7c>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b0d      	cmp	r3, #13
 80021c4:	d00b      	beq.n	80021de <HAL_UART_RxCpltCallback+0x4e>
			rx_buff[rx_count++] = rx_byte;
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <HAL_UART_RxCpltCallback+0x78>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	b291      	uxth	r1, r2
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <HAL_UART_RxCpltCallback+0x78>)
 80021d0:	8011      	strh	r1, [r2, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_UART_RxCpltCallback+0x7c>)
 80021d6:	7819      	ldrb	r1, [r3, #0]
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_UART_RxCpltCallback+0x84>)
 80021da:	5499      	strb	r1, [r3, r2]
				rx_cmd_ready = 1;
				rx_buff[rx_count++] = 0;	// end of string
			}
		}
	} // else { rx_error_count++; } // this should never happen
}
 80021dc:	e010      	b.n	8002200 <HAL_UART_RxCpltCallback+0x70>
			if (rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_UART_RxCpltCallback+0x78>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00c      	beq.n	8002200 <HAL_UART_RxCpltCallback+0x70>
				rx_cmd_ready = 1;
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_UART_RxCpltCallback+0x88>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
				rx_buff[rx_count++] = 0;	// end of string
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_UART_RxCpltCallback+0x78>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	b291      	uxth	r1, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_UART_RxCpltCallback+0x78>)
 80021f6:	8011      	strh	r1, [r2, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_UART_RxCpltCallback+0x84>)
 80021fc:	2100      	movs	r1, #0
 80021fe:	5499      	strb	r1, [r3, r2]
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20001dbc 	.word	0x20001dbc
 800220c:	20001dbe 	.word	0x20001dbe
 8002210:	20001d78 	.word	0x20001d78
 8002214:	20001dc0 	.word	0x20001dc0
 8002218:	20001dd4 	.word	0x20001dd4

0800221c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <Error_Handler+0x10>)
 8002222:	f006 ff59 	bl	80090d8 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002226:	b672      	cpsid	i
}
 8002228:	bf00      	nop
    __disable_irq();
    while (1)
 800222a:	e7fe      	b.n	800222a <Error_Handler+0xe>
 800222c:	0800a4bc 	.word	0x0800a4bc

08002230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_MspInit+0x4c>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a0f      	ldr	r2, [pc, #60]	; (800227c <HAL_MspInit+0x4c>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_MspInit+0x4c>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_MspInit+0x4c>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a08      	ldr	r2, [pc, #32]	; (800227c <HAL_MspInit+0x4c>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_MspInit+0x4c>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800226e:	2007      	movs	r0, #7
 8002270:	f003 f812 	bl	8005298 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800

08002280 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08e      	sub	sp, #56	; 0x38
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a79      	ldr	r2, [pc, #484]	; (8002484 <HAL_ADC_MspInit+0x204>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d173      	bne.n	800238a <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
 80022a6:	4b78      	ldr	r3, [pc, #480]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4a77      	ldr	r2, [pc, #476]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b0:	6453      	str	r3, [r2, #68]	; 0x44
 80022b2:	4b75      	ldr	r3, [pc, #468]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	623b      	str	r3, [r7, #32]
 80022bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	4b71      	ldr	r3, [pc, #452]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a70      	ldr	r2, [pc, #448]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b6e      	ldr	r3, [pc, #440]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a69      	ldr	r2, [pc, #420]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b67      	ldr	r3, [pc, #412]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022f6:	2301      	movs	r3, #1
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022fa:	2303      	movs	r3, #3
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002306:	4619      	mov	r1, r3
 8002308:	4860      	ldr	r0, [pc, #384]	; (800248c <HAL_ADC_MspInit+0x20c>)
 800230a:	f003 fc09 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800230e:	2301      	movs	r3, #1
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002312:	2303      	movs	r3, #3
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231e:	4619      	mov	r1, r3
 8002320:	485b      	ldr	r0, [pc, #364]	; (8002490 <HAL_ADC_MspInit+0x210>)
 8002322:	f003 fbfd 	bl	8005b20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002326:	4b5b      	ldr	r3, [pc, #364]	; (8002494 <HAL_ADC_MspInit+0x214>)
 8002328:	4a5b      	ldr	r2, [pc, #364]	; (8002498 <HAL_ADC_MspInit+0x218>)
 800232a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800232c:	4b59      	ldr	r3, [pc, #356]	; (8002494 <HAL_ADC_MspInit+0x214>)
 800232e:	2200      	movs	r2, #0
 8002330:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002332:	4b58      	ldr	r3, [pc, #352]	; (8002494 <HAL_ADC_MspInit+0x214>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002338:	4b56      	ldr	r3, [pc, #344]	; (8002494 <HAL_ADC_MspInit+0x214>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800233e:	4b55      	ldr	r3, [pc, #340]	; (8002494 <HAL_ADC_MspInit+0x214>)
 8002340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002344:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002346:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_ADC_MspInit+0x214>)
 8002348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800234c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800234e:	4b51      	ldr	r3, [pc, #324]	; (8002494 <HAL_ADC_MspInit+0x214>)
 8002350:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002354:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002356:	4b4f      	ldr	r3, [pc, #316]	; (8002494 <HAL_ADC_MspInit+0x214>)
 8002358:	f44f 7280 	mov.w	r2, #256	; 0x100
 800235c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800235e:	4b4d      	ldr	r3, [pc, #308]	; (8002494 <HAL_ADC_MspInit+0x214>)
 8002360:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002364:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002366:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <HAL_ADC_MspInit+0x214>)
 8002368:	2200      	movs	r2, #0
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800236c:	4849      	ldr	r0, [pc, #292]	; (8002494 <HAL_ADC_MspInit+0x214>)
 800236e:	f002 ffd5 	bl	800531c <HAL_DMA_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8002378:	f7ff ff50 	bl	800221c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a45      	ldr	r2, [pc, #276]	; (8002494 <HAL_ADC_MspInit+0x214>)
 8002380:	639a      	str	r2, [r3, #56]	; 0x38
 8002382:	4a44      	ldr	r2, [pc, #272]	; (8002494 <HAL_ADC_MspInit+0x214>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002388:	e078      	b.n	800247c <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a43      	ldr	r2, [pc, #268]	; (800249c <HAL_ADC_MspInit+0x21c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d173      	bne.n	800247c <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <HAL_ADC_MspInit+0x208>)
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	4a3a      	ldr	r2, [pc, #232]	; (8002488 <HAL_ADC_MspInit+0x208>)
 800239e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a2:	6453      	str	r3, [r2, #68]	; 0x44
 80023a4:	4b38      	ldr	r3, [pc, #224]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80023a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b0:	2300      	movs	r3, #0
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	4a33      	ldr	r2, [pc, #204]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80023ba:	f043 0304 	orr.w	r3, r3, #4
 80023be:	6313      	str	r3, [r2, #48]	; 0x30
 80023c0:	4b31      	ldr	r3, [pc, #196]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	4a2c      	ldr	r2, [pc, #176]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6313      	str	r3, [r2, #48]	; 0x30
 80023dc:	4b2a      	ldr	r3, [pc, #168]	; (8002488 <HAL_ADC_MspInit+0x208>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023e8:	2302      	movs	r3, #2
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ec:	2303      	movs	r3, #3
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f8:	4619      	mov	r1, r3
 80023fa:	4824      	ldr	r0, [pc, #144]	; (800248c <HAL_ADC_MspInit+0x20c>)
 80023fc:	f003 fb90 	bl	8005b20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002400:	2302      	movs	r3, #2
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002404:	2303      	movs	r3, #3
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002410:	4619      	mov	r1, r3
 8002412:	481f      	ldr	r0, [pc, #124]	; (8002490 <HAL_ADC_MspInit+0x210>)
 8002414:	f003 fb84 	bl	8005b20 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <HAL_ADC_MspInit+0x220>)
 800241a:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <HAL_ADC_MspInit+0x224>)
 800241c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_ADC_MspInit+0x220>)
 8002420:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002424:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002426:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <HAL_ADC_MspInit+0x220>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800242c:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <HAL_ADC_MspInit+0x220>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_ADC_MspInit+0x220>)
 8002434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002438:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800243a:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <HAL_ADC_MspInit+0x220>)
 800243c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002440:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <HAL_ADC_MspInit+0x220>)
 8002444:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002448:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_ADC_MspInit+0x220>)
 800244c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002450:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_ADC_MspInit+0x220>)
 8002454:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002458:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_ADC_MspInit+0x220>)
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002460:	480f      	ldr	r0, [pc, #60]	; (80024a0 <HAL_ADC_MspInit+0x220>)
 8002462:	f002 ff5b 	bl	800531c <HAL_DMA_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 800246c:	f7ff fed6 	bl	800221c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <HAL_ADC_MspInit+0x220>)
 8002474:	639a      	str	r2, [r3, #56]	; 0x38
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_ADC_MspInit+0x220>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800247c:	bf00      	nop
 800247e:	3738      	adds	r7, #56	; 0x38
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40012000 	.word	0x40012000
 8002488:	40023800 	.word	0x40023800
 800248c:	40020800 	.word	0x40020800
 8002490:	40020000 	.word	0x40020000
 8002494:	20001bb8 	.word	0x20001bb8
 8002498:	40026410 	.word	0x40026410
 800249c:	40012100 	.word	0x40012100
 80024a0:	20001c18 	.word	0x20001c18
 80024a4:	40026440 	.word	0x40026440

080024a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a43      	ldr	r2, [pc, #268]	; (80025d4 <HAL_SPI_MspInit+0x12c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d17f      	bne.n	80025ca <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <HAL_SPI_MspInit+0x130>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	4a41      	ldr	r2, [pc, #260]	; (80025d8 <HAL_SPI_MspInit+0x130>)
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
 80024da:	4b3f      	ldr	r3, [pc, #252]	; (80025d8 <HAL_SPI_MspInit+0x130>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_SPI_MspInit+0x130>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a3a      	ldr	r2, [pc, #232]	; (80025d8 <HAL_SPI_MspInit+0x130>)
 80024f0:	f043 0304 	orr.w	r3, r3, #4
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_SPI_MspInit+0x130>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	4b34      	ldr	r3, [pc, #208]	; (80025d8 <HAL_SPI_MspInit+0x130>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a33      	ldr	r2, [pc, #204]	; (80025d8 <HAL_SPI_MspInit+0x130>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <HAL_SPI_MspInit+0x130>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 800251e:	230c      	movs	r3, #12
 8002520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252a:	2303      	movs	r3, #3
 800252c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800252e:	2305      	movs	r3, #5
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	4828      	ldr	r0, [pc, #160]	; (80025dc <HAL_SPI_MspInit+0x134>)
 800253a:	f003 faf1 	bl	8005b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 800253e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002550:	2305      	movs	r3, #5
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4619      	mov	r1, r3
 800255a:	4821      	ldr	r0, [pc, #132]	; (80025e0 <HAL_SPI_MspInit+0x138>)
 800255c:	f003 fae0 	bl	8005b20 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002560:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_SPI_MspInit+0x13c>)
 8002562:	4a21      	ldr	r2, [pc, #132]	; (80025e8 <HAL_SPI_MspInit+0x140>)
 8002564:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_SPI_MspInit+0x13c>)
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_SPI_MspInit+0x13c>)
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <HAL_SPI_MspInit+0x13c>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_SPI_MspInit+0x13c>)
 800257a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800257e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <HAL_SPI_MspInit+0x13c>)
 8002582:	2200      	movs	r2, #0
 8002584:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002586:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <HAL_SPI_MspInit+0x13c>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_SPI_MspInit+0x13c>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <HAL_SPI_MspInit+0x13c>)
 8002594:	2200      	movs	r2, #0
 8002596:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_SPI_MspInit+0x13c>)
 800259a:	2200      	movs	r2, #0
 800259c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800259e:	4811      	ldr	r0, [pc, #68]	; (80025e4 <HAL_SPI_MspInit+0x13c>)
 80025a0:	f002 febc 	bl	800531c <HAL_DMA_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80025aa:	f7ff fe37 	bl	800221c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <HAL_SPI_MspInit+0x13c>)
 80025b2:	649a      	str	r2, [r3, #72]	; 0x48
 80025b4:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <HAL_SPI_MspInit+0x13c>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2024      	movs	r0, #36	; 0x24
 80025c0:	f002 fe75 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80025c4:	2024      	movs	r0, #36	; 0x24
 80025c6:	f002 fe8e 	bl	80052e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	; 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40003800 	.word	0x40003800
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020800 	.word	0x40020800
 80025e0:	40020400 	.word	0x40020400
 80025e4:	20001cd0 	.word	0x20001cd0
 80025e8:	40026070 	.word	0x40026070

080025ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fc:	d115      	bne.n	800262a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_TIM_Base_MspInit+0x48>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <HAL_TIM_Base_MspInit+0x48>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_TIM_Base_MspInit+0x48>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	201c      	movs	r0, #28
 8002620:	f002 fe45 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002624:	201c      	movs	r0, #28
 8002626:	f002 fe5e 	bl	80052e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800

08002638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <HAL_UART_MspInit+0x94>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d133      	bne.n	80026c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <HAL_UART_MspInit+0x98>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_UART_MspInit+0x98>)
 8002664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_UART_MspInit+0x98>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <HAL_UART_MspInit+0x98>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <HAL_UART_MspInit+0x98>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_UART_MspInit+0x98>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002692:	230c      	movs	r3, #12
 8002694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026a2:	2307      	movs	r3, #7
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4619      	mov	r1, r3
 80026ac:	4809      	ldr	r0, [pc, #36]	; (80026d4 <HAL_UART_MspInit+0x9c>)
 80026ae:	f003 fa37 	bl	8005b20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	2026      	movs	r0, #38	; 0x26
 80026b8:	f002 fdf9 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026bc:	2026      	movs	r0, #38	; 0x26
 80026be:	f002 fe12 	bl	80052e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	; 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40004400 	.word	0x40004400
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020000 	.word	0x40020000

080026d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <NMI_Handler+0x4>

080026de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e2:	e7fe      	b.n	80026e2 <HardFault_Handler+0x4>

080026e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <MemManage_Handler+0x4>

080026ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ee:	e7fe      	b.n	80026ee <BusFault_Handler+0x4>

080026f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <UsageFault_Handler+0x4>

080026f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002724:	f002 f8a0 	bl	8004868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}

0800272c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <DMA1_Stream4_IRQHandler+0x10>)
 8002732:	f002 ff8b 	bl	800564c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20001cd0 	.word	0x20001cd0

08002740 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002744:	4804      	ldr	r0, [pc, #16]	; (8002758 <TIM2_IRQHandler+0x18>)
 8002746:	f004 ffc1 	bl	80076cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 800274a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800274e:	4803      	ldr	r0, [pc, #12]	; (800275c <TIM2_IRQHandler+0x1c>)
 8002750:	f003 fbab 	bl	8005eaa <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20001d30 	.word	0x20001d30
 800275c:	40020000 	.word	0x40020000

08002760 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <SPI2_IRQHandler+0x10>)
 8002766:	f004 fc93 	bl	8007090 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20001c78 	.word	0x20001c78

08002774 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <USART2_IRQHandler+0x10>)
 800277a:	f005 fc83 	bl	8008084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20001d78 	.word	0x20001d78

08002788 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800278c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002790:	f003 fba6 	bl	8005ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}

08002798 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <DMA2_Stream0_IRQHandler+0x10>)
 800279e:	f002 ff55 	bl	800564c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20001bb8 	.word	0x20001bb8

080027ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <DMA2_Stream2_IRQHandler+0x10>)
 80027b2:	f002 ff4b 	bl	800564c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20001c18 	.word	0x20001c18

080027c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	e00a      	b.n	80027e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027d2:	f3af 8000 	nop.w
 80027d6:	4601      	mov	r1, r0
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	60ba      	str	r2, [r7, #8]
 80027de:	b2ca      	uxtb	r2, r1
 80027e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	3301      	adds	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	dbf0      	blt.n	80027d2 <_read+0x12>
  }

  return len;
 80027f0:	687b      	ldr	r3, [r7, #4]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	e009      	b.n	8002820 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	60ba      	str	r2, [r7, #8]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe ff81 	bl	800171c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3301      	adds	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	dbf1      	blt.n	800280c <_write+0x12>
  }
  return len;
 8002828:	687b      	ldr	r3, [r7, #4]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <_close>:

int _close(int file)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800283a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800285a:	605a      	str	r2, [r3, #4]
  return 0;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <_isatty>:

int _isatty(int file)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <_sbrk+0x5c>)
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <_sbrk+0x60>)
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <_sbrk+0x64>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <_sbrk+0x68>)
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028cc:	f006 fc7a 	bl	80091c4 <__errno>
 80028d0:	4603      	mov	r3, r0
 80028d2:	220c      	movs	r2, #12
 80028d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028da:	e009      	b.n	80028f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <_sbrk+0x64>)
 80028ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20020000 	.word	0x20020000
 80028fc:	00000400 	.word	0x00000400
 8002900:	2000526c 	.word	0x2000526c
 8002904:	20005bd0 	.word	0x20005bd0

08002908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <SystemInit+0x20>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <SystemInit+0x20>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	480f      	ldr	r0, [pc, #60]	; (8002970 <Displ_Select+0x44>)
 8002934:	f003 fa88 	bl	8005e48 <HAL_GPIO_ReadPin>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d015      	beq.n	800296a <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 800293e:	2201      	movs	r2, #1
 8002940:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002944:	480b      	ldr	r0, [pc, #44]	; (8002974 <Displ_Select+0x48>)
 8002946:	f003 fa97 	bl	8005e78 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 800294a:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <Displ_Select+0x4c>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	490a      	ldr	r1, [pc, #40]	; (8002978 <Displ_Select+0x4c>)
 8002950:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8002954:	4013      	ands	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	4b07      	ldr	r3, [pc, #28]	; (8002978 <Displ_Select+0x4c>)
 800295a:	4a07      	ldr	r2, [pc, #28]	; (8002978 <Displ_Select+0x4c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8002960:	2200      	movs	r2, #0
 8002962:	2180      	movs	r1, #128	; 0x80
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <Displ_Select+0x44>)
 8002966:	f003 fa87 	bl	8005e78 <HAL_GPIO_WritePin>
		}
	}
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40020800 	.word	0x40020800
 8002974:	40020000 	.word	0x40020000
 8002978:	40003800 	.word	0x40003800

0800297c <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6039      	str	r1, [r7, #0]
 8002984:	4611      	mov	r1, r2
 8002986:	461a      	mov	r2, r3
 8002988:	4603      	mov	r3, r0
 800298a:	71fb      	strb	r3, [r7, #7]
 800298c:	460b      	mov	r3, r1
 800298e:	80bb      	strh	r3, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8002994:	bf00      	nop
 8002996:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <Displ_Transmit+0x100>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0fa      	beq.n	8002996 <Displ_Transmit+0x1a>

	Displ_Select();
 80029a0:	f7ff ffc4 	bl	800292c <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	461a      	mov	r2, r3
 80029a8:	2180      	movs	r1, #128	; 0x80
 80029aa:	4835      	ldr	r0, [pc, #212]	; (8002a80 <Displ_Transmit+0x104>)
 80029ac:	f003 fa64 	bl	8005e78 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 80029b0:	79bb      	ldrb	r3, [r7, #6]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d043      	beq.n	8002a3e <Displ_Transmit+0xc2>
			*data32=__REV16(*data32);
		}
#else
//if display color format is RGB666: convert RGB565 received by TouchGFX and swap bytes

		uint8_t *buf8Pos=dispBuffer1; 							//using a local pointer
 80029b6:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <Displ_Transmit+0x108>)
 80029b8:	617b      	str	r3, [r7, #20]

		uint16_t *limit=(uint16_t*)(data+dataSize);
 80029ba:	88bb      	ldrh	r3, [r7, #4]
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
		for (uint16_t *data16=(uint16_t*)data; (data16<limit) & ((buf8Pos-dispBuffer1)<(SIZEBUF-3)); data16++) {
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	e020      	b.n	8002a0a <Displ_Transmit+0x8e>

			*(buf8Pos++)=((*data16 & 0xF800)>>8);  // R color
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	121b      	asrs	r3, r3, #8
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	1c59      	adds	r1, r3, #1
 80029d4:	6179      	str	r1, [r7, #20]
 80029d6:	f022 0207 	bic.w	r2, r2, #7
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]
			*(buf8Pos++)=((*data16 & 0x07E0)>>3);  // G color
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	10db      	asrs	r3, r3, #3
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	1c59      	adds	r1, r3, #1
 80029ea:	6179      	str	r1, [r7, #20]
 80029ec:	f022 0203 	bic.w	r2, r2, #3
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]
			*(buf8Pos++)=((*data16 & 0x001F)<<3);  // B color
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	00d9      	lsls	r1, r3, #3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	617a      	str	r2, [r7, #20]
 8002a00:	b2ca      	uxtb	r2, r1
 8002a02:	701a      	strb	r2, [r3, #0]
		for (uint16_t *data16=(uint16_t*)data; (data16<limit) & ((buf8Pos-dispBuffer1)<(SIZEBUF-3)); data16++) {
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	3302      	adds	r3, #2
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	bf34      	ite	cc
 8002a12:	2301      	movcc	r3, #1
 8002a14:	2300      	movcs	r3, #0
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	491a      	ldr	r1, [pc, #104]	; (8002a84 <Displ_Transmit+0x108>)
 8002a1c:	1a5b      	subs	r3, r3, r1
 8002a1e:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8002a22:	bfd4      	ite	le
 8002a24:	2301      	movle	r3, #1
 8002a26:	2300      	movgt	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1ca      	bne.n	80029c8 <Displ_Transmit+0x4c>
		}

		data=dispBuffer1; 				//data (pointer to data to transfer via SPI) has to point to converted buffer
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <Displ_Transmit+0x108>)
 8002a34:	603b      	str	r3, [r7, #0]
		dataSize=(buf8Pos-dispBuffer1);	//and dataSize has to contain the converted buffer size
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <Displ_Transmit+0x108>)
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	80bb      	strh	r3, [r7, #4]
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8002a3e:	88bb      	ldrh	r3, [r7, #4]
 8002a40:	2b13      	cmp	r3, #19
 8002a42:	d80d      	bhi.n	8002a60 <Displ_Transmit+0xe4>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8002a44:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <Displ_Transmit+0x100>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8002a4a:	88ba      	ldrh	r2, [r7, #4]
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	480d      	ldr	r0, [pc, #52]	; (8002a88 <Displ_Transmit+0x10c>)
 8002a54:	f004 f929 	bl	8006caa <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <Displ_Transmit+0x100>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8002a5e:	e008      	b.n	8002a72 <Displ_Transmit+0xf6>
			Displ_SpiAvailable=0;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <Displ_Transmit+0x100>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8002a66:	88bb      	ldrh	r3, [r7, #4]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6839      	ldr	r1, [r7, #0]
 8002a6c:	4806      	ldr	r0, [pc, #24]	; (8002a88 <Displ_Transmit+0x10c>)
 8002a6e:	f004 fa59 	bl	8006f24 <HAL_SPI_Transmit_DMA>
	}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000018 	.word	0x20000018
 8002a80:	40020000 	.word	0x40020000
 8002a84:	20005278 	.word	0x20005278
 8002a88:	20001c78 	.word	0x20001c78

08002a8c <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8002a96:	1df9      	adds	r1, r7, #7
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7ff ff6d 	bl	800297c <Displ_Transmit>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	68f9      	ldr	r1, [r7, #12]
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f7ff ff58 	bl	800297c <Displ_Transmit>
 8002acc:	e000      	b.n	8002ad0 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8002ace:	bf00      	nop
}
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	Displ_Select();
 8002adc:	f7ff ff26 	bl	800292c <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2140      	movs	r1, #64	; 0x40
 8002ae4:	4819      	ldr	r0, [pc, #100]	; (8002b4c <ILI9XXX_Init+0x74>)
 8002ae6:	f003 f9c7 	bl	8005e78 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002aea:	2001      	movs	r0, #1
 8002aec:	f001 fedc 	bl	80048a8 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8002af0:	2201      	movs	r2, #1
 8002af2:	2140      	movs	r1, #64	; 0x40
 8002af4:	4815      	ldr	r0, [pc, #84]	; (8002b4c <ILI9XXX_Init+0x74>)
 8002af6:	f003 f9bf 	bl	8005e78 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 8002afa:	20a5      	movs	r0, #165	; 0xa5
 8002afc:	f001 fed4 	bl	80048a8 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8002b00:	203a      	movs	r0, #58	; 0x3a
 8002b02:	f7ff ffc3 	bl	8002a8c <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
 8002b06:	2200      	movs	r2, #0
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4811      	ldr	r0, [pc, #68]	; (8002b50 <ILI9XXX_Init+0x78>)
 8002b0c:	f7ff ffcd 	bl	8002aaa <Displ_WriteData>
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002b10:	20b0      	movs	r0, #176	; 0xb0
 8002b12:	f7ff ffbb 	bl	8002a8c <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8002b16:	2200      	movs	r2, #0
 8002b18:	2101      	movs	r1, #1
 8002b1a:	480e      	ldr	r0, [pc, #56]	; (8002b54 <ILI9XXX_Init+0x7c>)
 8002b1c:	f7ff ffc5 	bl	8002aaa <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002b20:	20b0      	movs	r0, #176	; 0xb0
 8002b22:	f7ff ffb3 	bl	8002a8c <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8002b26:	2200      	movs	r2, #0
 8002b28:	2101      	movs	r1, #1
 8002b2a:	480a      	ldr	r0, [pc, #40]	; (8002b54 <ILI9XXX_Init+0x7c>)
 8002b2c:	f7ff ffbd 	bl	8002aaa <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8002b30:	2011      	movs	r0, #17
 8002b32:	f7ff ffab 	bl	8002a8c <Displ_WriteCommand>
	HAL_Delay(120);
 8002b36:	2078      	movs	r0, #120	; 0x78
 8002b38:	f001 feb6 	bl	80048a8 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8002b3c:	2029      	movs	r0, #41	; 0x29
 8002b3e:	f7ff ffa5 	bl	8002a8c <Displ_WriteCommand>
	HAL_Delay(5);
 8002b42:	2005      	movs	r0, #5
 8002b44:	f001 feb0 	bl	80048a8 <HAL_Delay>

}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	0800a4f0 	.word	0x0800a4f0
 8002b54:	0800a4f4 	.word	0x0800a4f4

08002b58 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4604      	mov	r4, r0
 8002b60:	4608      	mov	r0, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	4623      	mov	r3, r4
 8002b68:	80fb      	strh	r3, [r7, #6]
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80bb      	strh	r3, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	807b      	strh	r3, [r7, #2]
 8002b72:	4613      	mov	r3, r2
 8002b74:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	061a      	lsls	r2, r3, #24
 8002b7a:	887b      	ldrh	r3, [r7, #2]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b82:	431a      	orrs	r2, r3
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	88fa      	ldrh	r2, [r7, #6]
 8002b8e:	0a12      	lsrs	r2, r2, #8
 8002b90:	b292      	uxth	r2, r2
 8002b92:	431a      	orrs	r2, r3
 8002b94:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <Displ_SetAddressWindow+0x90>)
 8002b96:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8002b98:	202a      	movs	r0, #42	; 0x2a
 8002b9a:	f7ff ff77 	bl	8002a8c <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2104      	movs	r1, #4
 8002ba2:	4811      	ldr	r0, [pc, #68]	; (8002be8 <Displ_SetAddressWindow+0x90>)
 8002ba4:	f7ff ff81 	bl	8002aaa <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8002ba8:	883b      	ldrh	r3, [r7, #0]
 8002baa:	061a      	lsls	r2, r3, #24
 8002bac:	883b      	ldrh	r3, [r7, #0]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	88bb      	ldrh	r3, [r7, #4]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	88ba      	ldrh	r2, [r7, #4]
 8002bc0:	0a12      	lsrs	r2, r2, #8
 8002bc2:	b292      	uxth	r2, r2
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <Displ_SetAddressWindow+0x90>)
 8002bc8:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8002bca:	202b      	movs	r0, #43	; 0x2b
 8002bcc:	f7ff ff5e 	bl	8002a8c <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2104      	movs	r1, #4
 8002bd4:	4804      	ldr	r0, [pc, #16]	; (8002be8 <Displ_SetAddressWindow+0x90>)
 8002bd6:	f7ff ff68 	bl	8002aaa <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8002bda:	202c      	movs	r0, #44	; 0x2c
 8002bdc:	f7ff ff56 	bl	8002a8c <Displ_WriteCommand>
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	20005a78 	.word	0x20005a78

08002bec <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	4809      	ldr	r0, [pc, #36]	; (8002c20 <Displ_Init+0x34>)
 8002bfc:	f003 f93c 	bl	8005e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8002c00:	2201      	movs	r2, #1
 8002c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c06:	4807      	ldr	r0, [pc, #28]	; (8002c24 <Displ_Init+0x38>)
 8002c08:	f003 f936 	bl	8005e78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8002c0c:	f7ff ff64 	bl	8002ad8 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f808 	bl	8002c28 <Displ_Orientation>
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40020800 	.word	0x40020800
 8002c24:	40020000 	.word	0x40020000

08002c28 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d83b      	bhi.n	8002cb0 <Displ_Orientation+0x88>
 8002c38:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <Displ_Orientation+0x18>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c69 	.word	0x08002c69
 8002c48:	08002c81 	.word	0x08002c81
 8002c4c:	08002c99 	.word	0x08002c99
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8002c50:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <Displ_Orientation+0xa8>)
 8002c52:	2288      	movs	r2, #136	; 0x88
 8002c54:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <Displ_Orientation+0xac>)
 8002c58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002c5c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <Displ_Orientation+0xb0>)
 8002c60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c64:	801a      	strh	r2, [r3, #0]
			break;
 8002c66:	e023      	b.n	8002cb0 <Displ_Orientation+0x88>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <Displ_Orientation+0xa8>)
 8002c6a:	22e8      	movs	r2, #232	; 0xe8
 8002c6c:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8002c6e:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <Displ_Orientation+0xac>)
 8002c70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c74:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <Displ_Orientation+0xb0>)
 8002c78:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002c7c:	801a      	strh	r2, [r3, #0]
			break;
 8002c7e:	e017      	b.n	8002cb0 <Displ_Orientation+0x88>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8002c80:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <Displ_Orientation+0xa8>)
 8002c82:	2248      	movs	r2, #72	; 0x48
 8002c84:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <Displ_Orientation+0xac>)
 8002c88:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002c8c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <Displ_Orientation+0xb0>)
 8002c90:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c94:	801a      	strh	r2, [r3, #0]
			break;
 8002c96:	e00b      	b.n	8002cb0 <Displ_Orientation+0x88>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8002c98:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <Displ_Orientation+0xa8>)
 8002c9a:	2228      	movs	r2, #40	; 0x28
 8002c9c:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <Displ_Orientation+0xac>)
 8002ca0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ca4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <Displ_Orientation+0xb0>)
 8002ca8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002cac:	801a      	strh	r2, [r3, #0]
			break;
 8002cae:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8002cb0:	2036      	movs	r0, #54	; 0x36
 8002cb2:	f7ff feeb 	bl	8002a8c <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <Displ_Orientation+0xa8>)
 8002cbc:	f7ff fef5 	bl	8002aaa <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8002cc0:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <Displ_Orientation+0xb4>)
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	7013      	strb	r3, [r2, #0]
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20005a7c 	.word	0x20005a7c
 8002cd4:	20005274 	.word	0x20005274
 8002cd8:	20005272 	.word	0x20005272
 8002cdc:	20005270 	.word	0x20005270

08002ce0 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <HAL_SPI_ErrorCallback+0x24>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d102      	bne.n	8002cf8 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_SPI_ErrorCallback+0x28>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	701a      	strb	r2, [r3, #0]
	}
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	40003800 	.word	0x40003800
 8002d08:	20000018 	.word	0x20000018

08002d0c <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <HAL_SPI_TxCpltCallback+0x24>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d102      	bne.n	8002d24 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 8002d1e:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_SPI_TxCpltCallback+0x28>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	40003800 	.word	0x40003800
 8002d34:	20000018 	.word	0x20000018

08002d38 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b08b      	sub	sp, #44	; 0x2c
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4604      	mov	r4, r0
 8002d40:	4608      	mov	r0, r1
 8002d42:	4611      	mov	r1, r2
 8002d44:	461a      	mov	r2, r3
 8002d46:	4623      	mov	r3, r4
 8002d48:	80fb      	strh	r3, [r7, #6]
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	80bb      	strh	r3, [r7, #4]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	807b      	strh	r3, [r7, #2]
 8002d52:	4613      	mov	r3, r2
 8002d54:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	4a59      	ldr	r2, [pc, #356]	; (8002ec0 <Displ_FillArea+0x188>)
 8002d5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	f280 80aa 	bge.w	8002eb8 <Displ_FillArea+0x180>
 8002d64:	88bb      	ldrh	r3, [r7, #4]
 8002d66:	4a57      	ldr	r2, [pc, #348]	; (8002ec4 <Displ_FillArea+0x18c>)
 8002d68:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	f280 80a3 	bge.w	8002eb8 <Displ_FillArea+0x180>
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 809f 	beq.w	8002eb8 <Displ_FillArea+0x180>
 8002d7a:	883b      	ldrh	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 809b 	beq.w	8002eb8 <Displ_FillArea+0x180>

	x1=x + w - 1;
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	887b      	ldrh	r3, [r7, #2]
 8002d86:	4413      	add	r3, r2
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8002d8c:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <Displ_FillArea+0x188>)
 8002d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d92:	461a      	mov	r2, r3
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d903      	bls.n	8002da2 <Displ_FillArea+0x6a>
		x1=_width;
 8002d9a:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <Displ_FillArea+0x188>)
 8002d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da0:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 8002da2:	88ba      	ldrh	r2, [r7, #4]
 8002da4:	883b      	ldrh	r3, [r7, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	3b01      	subs	r3, #1
 8002daa:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8002dac:	4b45      	ldr	r3, [pc, #276]	; (8002ec4 <Displ_FillArea+0x18c>)
 8002dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db2:	461a      	mov	r2, r3
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d903      	bls.n	8002dc2 <Displ_FillArea+0x8a>
		y1=_height;
 8002dba:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <Displ_FillArea+0x18c>)
 8002dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc0:	61fb      	str	r3, [r7, #28]

#endif
#ifdef Z_RGB666 // setting up dispBuffer in RGB666 format
	uint32_t datasize;

	uint8_t Rbyte=(color & 0xF800)>>8;
 8002dc2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002dc4:	121b      	asrs	r3, r3, #8
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f023 0307 	bic.w	r3, r3, #7
 8002dcc:	75fb      	strb	r3, [r7, #23]
	uint8_t Gbyte=(color & 0x07E0)>>3;
 8002dce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002dd0:	10db      	asrs	r3, r3, #3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f023 0303 	bic.w	r3, r3, #3
 8002dd8:	75bb      	strb	r3, [r7, #22]
	uint8_t Bbyte=(color & 0x001F)<<3;
 8002dda:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	757b      	strb	r3, [r7, #21]

	area=(((y1-y+1)*(x1-x+1))*3); 		// area to fill in bytes (3 bytes per pixel)
 8002de0:	88bb      	ldrh	r3, [r7, #4]
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	88fa      	ldrh	r2, [r7, #6]
 8002dea:	6a39      	ldr	r1, [r7, #32]
 8002dec:	1a8a      	subs	r2, r1, r2
 8002dee:	3201      	adds	r2, #1
 8002df0:	fb03 f202 	mul.w	r2, r3, r2
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
	uint8_t *buf8Pos=dispBuffer; 		//using a local pointer: changing values next
 8002dfc:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <Displ_FillArea+0x190>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61bb      	str	r3, [r7, #24]

	datasize = (area<(SIZEBUF-3) ? area : (SIZEBUF-3));  //as buf8Pos receives 3 bytes each cycle we must be sure that SIZEBUF will be not overridden in the next loop
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	bf28      	it	cs
 8002e0c:	4613      	movcs	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]

	k=0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
	while ((buf8Pos-dispBuffer)<=datasize){
 8002e14:	e00e      	b.n	8002e34 <Displ_FillArea+0xfc>
		*(buf8Pos++)=Rbyte;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	61ba      	str	r2, [r7, #24]
 8002e1c:	7dfa      	ldrb	r2, [r7, #23]
 8002e1e:	701a      	strb	r2, [r3, #0]
		*(buf8Pos++)=Gbyte;
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	61ba      	str	r2, [r7, #24]
 8002e26:	7dba      	ldrb	r2, [r7, #22]
 8002e28:	701a      	strb	r2, [r3, #0]
		*(buf8Pos++)=Bbyte;
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	61ba      	str	r2, [r7, #24]
 8002e30:	7d7a      	ldrb	r2, [r7, #21]
 8002e32:	701a      	strb	r2, [r3, #0]
	while ((buf8Pos-dispBuffer)<=datasize){
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <Displ_FillArea+0x190>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d2e8      	bcs.n	8002e16 <Displ_FillArea+0xde>
	}
	datasize=(buf8Pos-dispBuffer);
 8002e44:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <Displ_FillArea+0x190>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	60fb      	str	r3, [r7, #12]
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	88b9      	ldrh	r1, [r7, #4]
 8002e58:	88f8      	ldrh	r0, [r7, #6]
 8002e5a:	f7ff fe7d 	bl	8002b58 <Displ_SetAddressWindow>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
#endif
#ifdef Z_RGB666 // transferring RGB666 format dispBuffer
	times=(area/datasize);  					//how many times buffer must be sent via SPI.
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e66:	60bb      	str	r3, [r7, #8]
	for  (k=0;k<times;k++) {
 8002e68:	2300      	movs	r3, #0
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6c:	e009      	b.n	8002e82 <Displ_FillArea+0x14a>
		Displ_WriteData(dispBuffer,datasize,0);
 8002e6e:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <Displ_FillArea+0x190>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2200      	movs	r2, #0
 8002e74:	68f9      	ldr	r1, [r7, #12]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fe17 	bl	8002aaa <Displ_WriteData>
	for  (k=0;k<times;k++) {
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	3301      	adds	r3, #1
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
 8002e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d3f1      	bcc.n	8002e6e <Displ_FillArea+0x136>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <Displ_FillArea+0x190>)
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7ff fe04 	bl	8002aaa <Displ_WriteData>
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <Displ_FillArea+0x190>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <Displ_FillArea+0x194>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d101      	bne.n	8002eb0 <Displ_FillArea+0x178>
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <Displ_FillArea+0x198>)
 8002eae:	e000      	b.n	8002eb2 <Displ_FillArea+0x17a>
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <Displ_FillArea+0x194>)
 8002eb2:	4a05      	ldr	r2, [pc, #20]	; (8002ec8 <Displ_FillArea+0x190>)
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e000      	b.n	8002eba <Displ_FillArea+0x182>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8002eb8:	bf00      	nop

}
 8002eba:	372c      	adds	r7, #44	; 0x2c
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd90      	pop	{r4, r7, pc}
 8002ec0:	20005272 	.word	0x20005272
 8002ec4:	20005274 	.word	0x20005274
 8002ec8:	2000001c 	.word	0x2000001c
 8002ecc:	20005278 	.word	0x20005278
 8002ed0:	20005678 	.word	0x20005678

08002ed4 <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	4603      	mov	r3, r0
 8002edc:	80fb      	strh	r3, [r7, #6]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	80bb      	strh	r3, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <Displ_Pixel+0x44>)
 8002eea:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	da0e      	bge.n	8002f10 <Displ_Pixel+0x3c>
 8002ef2:	88bb      	ldrh	r3, [r7, #4]
 8002ef4:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <Displ_Pixel+0x48>)
 8002ef6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002efa:	4293      	cmp	r3, r2
 8002efc:	da08      	bge.n	8002f10 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8002efe:	88b9      	ldrh	r1, [r7, #4]
 8002f00:	88f8      	ldrh	r0, [r7, #6]
 8002f02:	887b      	ldrh	r3, [r7, #2]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2301      	movs	r3, #1
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f7ff ff15 	bl	8002d38 <Displ_FillArea>
 8002f0e:	e000      	b.n	8002f12 <Displ_Pixel+0x3e>
        return;
 8002f10:	bf00      	nop

}
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20005272 	.word	0x20005272
 8002f1c:	20005274 	.word	0x20005274

08002f20 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4604      	mov	r4, r0
 8002f28:	4608      	mov	r0, r1
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	80fb      	strh	r3, [r7, #6]
 8002f32:	4603      	mov	r3, r0
 8002f34:	80bb      	strh	r3, [r7, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	807b      	strh	r3, [r7, #2]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8002f3e:	887b      	ldrh	r3, [r7, #2]
 8002f40:	f1c3 0301 	rsb	r3, r3, #1
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8002f4c:	887b      	ldrh	r3, [r7, #2]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	03d2      	lsls	r2, r2, #15
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8002f5e:	887b      	ldrh	r3, [r7, #2]
 8002f60:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8002f62:	88f8      	ldrh	r0, [r7, #6]
 8002f64:	88ba      	ldrh	r2, [r7, #4]
 8002f66:	887b      	ldrh	r3, [r7, #2]
 8002f68:	4413      	add	r3, r2
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	883a      	ldrh	r2, [r7, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7ff ffb0 	bl	8002ed4 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8002f74:	88f8      	ldrh	r0, [r7, #6]
 8002f76:	88ba      	ldrh	r2, [r7, #4]
 8002f78:	887b      	ldrh	r3, [r7, #2]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	883a      	ldrh	r2, [r7, #0]
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7ff ffa7 	bl	8002ed4 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8002f86:	88fa      	ldrh	r2, [r7, #6]
 8002f88:	887b      	ldrh	r3, [r7, #2]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	88b9      	ldrh	r1, [r7, #4]
 8002f90:	883a      	ldrh	r2, [r7, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff9e 	bl	8002ed4 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8002f98:	88fa      	ldrh	r2, [r7, #6]
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	88b9      	ldrh	r1, [r7, #4]
 8002fa2:	883a      	ldrh	r2, [r7, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff95 	bl	8002ed4 <Displ_Pixel>

    while (x<y) {
 8002faa:	e081      	b.n	80030b0 <Displ_drawCircle+0x190>
        if (f >= 0) {
 8002fac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	db0e      	blt.n	8002fd2 <Displ_drawCircle+0xb2>
            y--;
 8002fb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8002fc0:	8a7b      	ldrh	r3, [r7, #18]
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8002fc8:	8afa      	ldrh	r2, [r7, #22]
 8002fca:	8a7b      	ldrh	r3, [r7, #18]
 8002fcc:	4413      	add	r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8002fd2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8002fde:	8abb      	ldrh	r3, [r7, #20]
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8002fe6:	8afa      	ldrh	r2, [r7, #22]
 8002fe8:	8abb      	ldrh	r3, [r7, #20]
 8002fea:	4413      	add	r3, r2
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8002ff0:	88fa      	ldrh	r2, [r7, #6]
 8002ff2:	8a3b      	ldrh	r3, [r7, #16]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	b298      	uxth	r0, r3
 8002ff8:	88ba      	ldrh	r2, [r7, #4]
 8002ffa:	89fb      	ldrh	r3, [r7, #14]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	883a      	ldrh	r2, [r7, #0]
 8003002:	4619      	mov	r1, r3
 8003004:	f7ff ff66 	bl	8002ed4 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8003008:	88fa      	ldrh	r2, [r7, #6]
 800300a:	8a3b      	ldrh	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	b298      	uxth	r0, r3
 8003010:	88ba      	ldrh	r2, [r7, #4]
 8003012:	89fb      	ldrh	r3, [r7, #14]
 8003014:	4413      	add	r3, r2
 8003016:	b29b      	uxth	r3, r3
 8003018:	883a      	ldrh	r2, [r7, #0]
 800301a:	4619      	mov	r1, r3
 800301c:	f7ff ff5a 	bl	8002ed4 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	8a3b      	ldrh	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	b298      	uxth	r0, r3
 8003028:	88ba      	ldrh	r2, [r7, #4]
 800302a:	89fb      	ldrh	r3, [r7, #14]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	b29b      	uxth	r3, r3
 8003030:	883a      	ldrh	r2, [r7, #0]
 8003032:	4619      	mov	r1, r3
 8003034:	f7ff ff4e 	bl	8002ed4 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8003038:	88fa      	ldrh	r2, [r7, #6]
 800303a:	8a3b      	ldrh	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	b298      	uxth	r0, r3
 8003040:	88ba      	ldrh	r2, [r7, #4]
 8003042:	89fb      	ldrh	r3, [r7, #14]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	b29b      	uxth	r3, r3
 8003048:	883a      	ldrh	r2, [r7, #0]
 800304a:	4619      	mov	r1, r3
 800304c:	f7ff ff42 	bl	8002ed4 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8003050:	88fa      	ldrh	r2, [r7, #6]
 8003052:	89fb      	ldrh	r3, [r7, #14]
 8003054:	4413      	add	r3, r2
 8003056:	b298      	uxth	r0, r3
 8003058:	88ba      	ldrh	r2, [r7, #4]
 800305a:	8a3b      	ldrh	r3, [r7, #16]
 800305c:	4413      	add	r3, r2
 800305e:	b29b      	uxth	r3, r3
 8003060:	883a      	ldrh	r2, [r7, #0]
 8003062:	4619      	mov	r1, r3
 8003064:	f7ff ff36 	bl	8002ed4 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8003068:	88fa      	ldrh	r2, [r7, #6]
 800306a:	89fb      	ldrh	r3, [r7, #14]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	b298      	uxth	r0, r3
 8003070:	88ba      	ldrh	r2, [r7, #4]
 8003072:	8a3b      	ldrh	r3, [r7, #16]
 8003074:	4413      	add	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	883a      	ldrh	r2, [r7, #0]
 800307a:	4619      	mov	r1, r3
 800307c:	f7ff ff2a 	bl	8002ed4 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8003080:	88fa      	ldrh	r2, [r7, #6]
 8003082:	89fb      	ldrh	r3, [r7, #14]
 8003084:	4413      	add	r3, r2
 8003086:	b298      	uxth	r0, r3
 8003088:	88ba      	ldrh	r2, [r7, #4]
 800308a:	8a3b      	ldrh	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	b29b      	uxth	r3, r3
 8003090:	883a      	ldrh	r2, [r7, #0]
 8003092:	4619      	mov	r1, r3
 8003094:	f7ff ff1e 	bl	8002ed4 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8003098:	88fa      	ldrh	r2, [r7, #6]
 800309a:	89fb      	ldrh	r3, [r7, #14]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	b298      	uxth	r0, r3
 80030a0:	88ba      	ldrh	r2, [r7, #4]
 80030a2:	8a3b      	ldrh	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	883a      	ldrh	r2, [r7, #0]
 80030aa:	4619      	mov	r1, r3
 80030ac:	f7ff ff12 	bl	8002ed4 <Displ_Pixel>
    while (x<y) {
 80030b0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80030b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	f6ff af77 	blt.w	8002fac <Displ_drawCircle+0x8c>
    }
}
 80030be:	bf00      	nop
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd90      	pop	{r4, r7, pc}

080030c8 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	4603      	mov	r3, r0
 80030d0:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <Displ_CLS+0x30>)
 80030d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d8:	b29a      	uxth	r2, r3
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <Displ_CLS+0x34>)
 80030dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e0:	b299      	uxth	r1, r3
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	460b      	mov	r3, r1
 80030e8:	2100      	movs	r1, #0
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7ff fe24 	bl	8002d38 <Displ_FillArea>
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20005272 	.word	0x20005272
 80030fc:	20005274 	.word	0x20005274

08003100 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	4604      	mov	r4, r0
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	461a      	mov	r2, r3
 800310e:	4623      	mov	r3, r4
 8003110:	80fb      	strh	r3, [r7, #6]
 8003112:	4603      	mov	r3, r0
 8003114:	80bb      	strh	r3, [r7, #4]
 8003116:	460b      	mov	r3, r1
 8003118:	807b      	strh	r3, [r7, #2]
 800311a:	4613      	mov	r3, r2
 800311c:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 800311e:	887b      	ldrh	r3, [r7, #2]
 8003120:	f1c3 0301 	rsb	r3, r3, #1
 8003124:	b29b      	uxth	r3, r3
 8003126:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003128:	2301      	movs	r3, #1
 800312a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800312c:	887b      	ldrh	r3, [r7, #2]
 800312e:	461a      	mov	r2, r3
 8003130:	03d2      	lsls	r2, r2, #15
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	b29b      	uxth	r3, r3
 8003138:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800313e:	887b      	ldrh	r3, [r7, #2]
 8003140:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8003142:	e095      	b.n	8003270 <drawCircleHelper+0x170>
        if (f >= 0) {
 8003144:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003148:	2b00      	cmp	r3, #0
 800314a:	db0e      	blt.n	800316a <drawCircleHelper+0x6a>
            y--;
 800314c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29b      	uxth	r3, r3
 8003156:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003158:	8a7b      	ldrh	r3, [r7, #18]
 800315a:	3302      	adds	r3, #2
 800315c:	b29b      	uxth	r3, r3
 800315e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8003160:	8afa      	ldrh	r2, [r7, #22]
 8003162:	8a7b      	ldrh	r3, [r7, #18]
 8003164:	4413      	add	r3, r2
 8003166:	b29b      	uxth	r3, r3
 8003168:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800316a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800316e:	b29b      	uxth	r3, r3
 8003170:	3301      	adds	r3, #1
 8003172:	b29b      	uxth	r3, r3
 8003174:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8003176:	8abb      	ldrh	r3, [r7, #20]
 8003178:	3302      	adds	r3, #2
 800317a:	b29b      	uxth	r3, r3
 800317c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800317e:	8afa      	ldrh	r2, [r7, #22]
 8003180:	8abb      	ldrh	r3, [r7, #20]
 8003182:	4413      	add	r3, r2
 8003184:	b29b      	uxth	r3, r3
 8003186:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8003188:	787b      	ldrb	r3, [r7, #1]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d017      	beq.n	80031c2 <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	8a3b      	ldrh	r3, [r7, #16]
 8003196:	4413      	add	r3, r2
 8003198:	b298      	uxth	r0, r3
 800319a:	88ba      	ldrh	r2, [r7, #4]
 800319c:	89fb      	ldrh	r3, [r7, #14]
 800319e:	4413      	add	r3, r2
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031a4:	4619      	mov	r1, r3
 80031a6:	f7ff fe95 	bl	8002ed4 <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 80031aa:	88fa      	ldrh	r2, [r7, #6]
 80031ac:	89fb      	ldrh	r3, [r7, #14]
 80031ae:	4413      	add	r3, r2
 80031b0:	b298      	uxth	r0, r3
 80031b2:	88ba      	ldrh	r2, [r7, #4]
 80031b4:	8a3b      	ldrh	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031bc:	4619      	mov	r1, r3
 80031be:	f7ff fe89 	bl	8002ed4 <Displ_Pixel>
        }
        if (cornername & 0x2) {
 80031c2:	787b      	ldrb	r3, [r7, #1]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d017      	beq.n	80031fc <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	8a3b      	ldrh	r3, [r7, #16]
 80031d0:	4413      	add	r3, r2
 80031d2:	b298      	uxth	r0, r3
 80031d4:	88ba      	ldrh	r2, [r7, #4]
 80031d6:	89fb      	ldrh	r3, [r7, #14]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	b29b      	uxth	r3, r3
 80031dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031de:	4619      	mov	r1, r3
 80031e0:	f7ff fe78 	bl	8002ed4 <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 80031e4:	88fa      	ldrh	r2, [r7, #6]
 80031e6:	89fb      	ldrh	r3, [r7, #14]
 80031e8:	4413      	add	r3, r2
 80031ea:	b298      	uxth	r0, r3
 80031ec:	88ba      	ldrh	r2, [r7, #4]
 80031ee:	8a3b      	ldrh	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031f6:	4619      	mov	r1, r3
 80031f8:	f7ff fe6c 	bl	8002ed4 <Displ_Pixel>
        }
        if (cornername & 0x8) {
 80031fc:	787b      	ldrb	r3, [r7, #1]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d017      	beq.n	8003236 <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 8003206:	88fa      	ldrh	r2, [r7, #6]
 8003208:	89fb      	ldrh	r3, [r7, #14]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	b298      	uxth	r0, r3
 800320e:	88ba      	ldrh	r2, [r7, #4]
 8003210:	8a3b      	ldrh	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	b29b      	uxth	r3, r3
 8003216:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003218:	4619      	mov	r1, r3
 800321a:	f7ff fe5b 	bl	8002ed4 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	8a3b      	ldrh	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	b298      	uxth	r0, r3
 8003226:	88ba      	ldrh	r2, [r7, #4]
 8003228:	89fb      	ldrh	r3, [r7, #14]
 800322a:	4413      	add	r3, r2
 800322c:	b29b      	uxth	r3, r3
 800322e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003230:	4619      	mov	r1, r3
 8003232:	f7ff fe4f 	bl	8002ed4 <Displ_Pixel>
        }
        if (cornername & 0x1) {
 8003236:	787b      	ldrb	r3, [r7, #1]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d017      	beq.n	8003270 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8003240:	88fa      	ldrh	r2, [r7, #6]
 8003242:	89fb      	ldrh	r3, [r7, #14]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	b298      	uxth	r0, r3
 8003248:	88ba      	ldrh	r2, [r7, #4]
 800324a:	8a3b      	ldrh	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	b29b      	uxth	r3, r3
 8003250:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003252:	4619      	mov	r1, r3
 8003254:	f7ff fe3e 	bl	8002ed4 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 8003258:	88fa      	ldrh	r2, [r7, #6]
 800325a:	8a3b      	ldrh	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	b298      	uxth	r0, r3
 8003260:	88ba      	ldrh	r2, [r7, #4]
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	b29b      	uxth	r3, r3
 8003268:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800326a:	4619      	mov	r1, r3
 800326c:	f7ff fe32 	bl	8002ed4 <Displ_Pixel>
    while (x<y) {
 8003270:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003274:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003278:	429a      	cmp	r2, r3
 800327a:	f6ff af63 	blt.w	8003144 <drawCircleHelper+0x44>
        }
    }
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd90      	pop	{r4, r7, pc}

08003288 <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b089      	sub	sp, #36	; 0x24
 800328c:	af02      	add	r7, sp, #8
 800328e:	4604      	mov	r4, r0
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	461a      	mov	r2, r3
 8003296:	4623      	mov	r3, r4
 8003298:	80fb      	strh	r3, [r7, #6]
 800329a:	4603      	mov	r3, r0
 800329c:	80bb      	strh	r3, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	807b      	strh	r3, [r7, #2]
 80032a2:	4613      	mov	r3, r2
 80032a4:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	f1c3 0301 	rsb	r3, r3, #1
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80032b0:	2301      	movs	r3, #1
 80032b2:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80032b4:	887b      	ldrh	r3, [r7, #2]
 80032b6:	461a      	mov	r2, r3
 80032b8:	03d2      	lsls	r2, r2, #15
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	b29b      	uxth	r3, r3
 80032c0:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80032c6:	887b      	ldrh	r3, [r7, #2]
 80032c8:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 80032ca:	e0a7      	b.n	800341c <fillCircleHelper+0x194>
    if (f >= 0) {
 80032cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	db0e      	blt.n	80032f2 <fillCircleHelper+0x6a>
      y--;
 80032d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29b      	uxth	r3, r3
 80032de:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 80032e0:	8a7b      	ldrh	r3, [r7, #18]
 80032e2:	3302      	adds	r3, #2
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 80032e8:	8afa      	ldrh	r2, [r7, #22]
 80032ea:	8a7b      	ldrh	r3, [r7, #18]
 80032ec:	4413      	add	r3, r2
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 80032f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3301      	adds	r3, #1
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 80032fe:	8abb      	ldrh	r3, [r7, #20]
 8003300:	3302      	adds	r3, #2
 8003302:	b29b      	uxth	r3, r3
 8003304:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8003306:	8afa      	ldrh	r2, [r7, #22]
 8003308:	8abb      	ldrh	r3, [r7, #20]
 800330a:	4413      	add	r3, r2
 800330c:	b29b      	uxth	r3, r3
 800330e:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8003310:	787b      	ldrb	r3, [r7, #1]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d03d      	beq.n	8003396 <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 800331a:	88fa      	ldrh	r2, [r7, #6]
 800331c:	8a3b      	ldrh	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	b29b      	uxth	r3, r3
 8003322:	b218      	sxth	r0, r3
 8003324:	88ba      	ldrh	r2, [r7, #4]
 8003326:	89fb      	ldrh	r3, [r7, #14]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	b29b      	uxth	r3, r3
 800332c:	b219      	sxth	r1, r3
 800332e:	88fa      	ldrh	r2, [r7, #6]
 8003330:	8a3b      	ldrh	r3, [r7, #16]
 8003332:	4413      	add	r3, r2
 8003334:	b29b      	uxth	r3, r3
 8003336:	b21c      	sxth	r4, r3
 8003338:	88ba      	ldrh	r2, [r7, #4]
 800333a:	89fb      	ldrh	r3, [r7, #14]
 800333c:	4413      	add	r3, r2
 800333e:	b29a      	uxth	r2, r3
 8003340:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003342:	4413      	add	r3, r2
 8003344:	b29b      	uxth	r3, r3
 8003346:	3301      	adds	r3, #1
 8003348:	b29b      	uxth	r3, r3
 800334a:	b21a      	sxth	r2, r3
 800334c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	4622      	mov	r2, r4
 8003354:	f000 f8a1 	bl	800349a <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 8003358:	88fa      	ldrh	r2, [r7, #6]
 800335a:	89fb      	ldrh	r3, [r7, #14]
 800335c:	4413      	add	r3, r2
 800335e:	b29b      	uxth	r3, r3
 8003360:	b218      	sxth	r0, r3
 8003362:	88ba      	ldrh	r2, [r7, #4]
 8003364:	8a3b      	ldrh	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	b29b      	uxth	r3, r3
 800336a:	b219      	sxth	r1, r3
 800336c:	88fa      	ldrh	r2, [r7, #6]
 800336e:	89fb      	ldrh	r3, [r7, #14]
 8003370:	4413      	add	r3, r2
 8003372:	b29b      	uxth	r3, r3
 8003374:	b21c      	sxth	r4, r3
 8003376:	88ba      	ldrh	r2, [r7, #4]
 8003378:	8a3b      	ldrh	r3, [r7, #16]
 800337a:	4413      	add	r3, r2
 800337c:	b29a      	uxth	r2, r3
 800337e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003380:	4413      	add	r3, r2
 8003382:	b29b      	uxth	r3, r3
 8003384:	3301      	adds	r3, #1
 8003386:	b29b      	uxth	r3, r3
 8003388:	b21a      	sxth	r2, r3
 800338a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	4622      	mov	r2, r4
 8003392:	f000 f882 	bl	800349a <Displ_Line>
    }
    if (cornername & 0x2) {
 8003396:	787b      	ldrb	r3, [r7, #1]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d03d      	beq.n	800341c <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 80033a0:	88fa      	ldrh	r2, [r7, #6]
 80033a2:	8a3b      	ldrh	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	b218      	sxth	r0, r3
 80033aa:	88ba      	ldrh	r2, [r7, #4]
 80033ac:	89fb      	ldrh	r3, [r7, #14]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	b219      	sxth	r1, r3
 80033b4:	88fa      	ldrh	r2, [r7, #6]
 80033b6:	8a3b      	ldrh	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	b21c      	sxth	r4, r3
 80033be:	88ba      	ldrh	r2, [r7, #4]
 80033c0:	89fb      	ldrh	r3, [r7, #14]
 80033c2:	4413      	add	r3, r2
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033c8:	4413      	add	r3, r2
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	b21a      	sxth	r2, r3
 80033d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	4622      	mov	r2, r4
 80033da:	f000 f85e 	bl	800349a <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	89fb      	ldrh	r3, [r7, #14]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	b218      	sxth	r0, r3
 80033e8:	88ba      	ldrh	r2, [r7, #4]
 80033ea:	8a3b      	ldrh	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	b219      	sxth	r1, r3
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	89fb      	ldrh	r3, [r7, #14]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	b21c      	sxth	r4, r3
 80033fc:	88ba      	ldrh	r2, [r7, #4]
 80033fe:	8a3b      	ldrh	r3, [r7, #16]
 8003400:	4413      	add	r3, r2
 8003402:	b29a      	uxth	r2, r3
 8003404:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003406:	4413      	add	r3, r2
 8003408:	b29b      	uxth	r3, r3
 800340a:	3301      	adds	r3, #1
 800340c:	b29b      	uxth	r3, r3
 800340e:	b21a      	sxth	r2, r3
 8003410:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	4613      	mov	r3, r2
 8003416:	4622      	mov	r2, r4
 8003418:	f000 f83f 	bl	800349a <Displ_Line>
  while (x<y) {
 800341c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003420:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003424:	429a      	cmp	r2, r3
 8003426:	f6ff af51 	blt.w	80032cc <fillCircleHelper+0x44>
    }
  }
}
 800342a:	bf00      	nop
 800342c:	bf00      	nop
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	bd90      	pop	{r4, r7, pc}

08003434 <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8003434:	b590      	push	{r4, r7, lr}
 8003436:	b085      	sub	sp, #20
 8003438:	af02      	add	r7, sp, #8
 800343a:	4604      	mov	r4, r0
 800343c:	4608      	mov	r0, r1
 800343e:	4611      	mov	r1, r2
 8003440:	461a      	mov	r2, r3
 8003442:	4623      	mov	r3, r4
 8003444:	80fb      	strh	r3, [r7, #6]
 8003446:	4603      	mov	r3, r0
 8003448:	80bb      	strh	r3, [r7, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	807b      	strh	r3, [r7, #2]
 800344e:	4613      	mov	r3, r2
 8003450:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 8003452:	88ba      	ldrh	r2, [r7, #4]
 8003454:	887b      	ldrh	r3, [r7, #2]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	b29b      	uxth	r3, r3
 800345a:	b219      	sxth	r1, r3
 800345c:	88ba      	ldrh	r2, [r7, #4]
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	4413      	add	r3, r2
 8003462:	b29b      	uxth	r3, r3
 8003464:	b21c      	sxth	r4, r3
 8003466:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800346a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800346e:	883b      	ldrh	r3, [r7, #0]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	4623      	mov	r3, r4
 8003474:	f000 f811 	bl	800349a <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8003478:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800347c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003480:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003484:	883b      	ldrh	r3, [r7, #0]
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	2300      	movs	r3, #0
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	2303      	movs	r3, #3
 800348e:	f7ff fefb 	bl	8003288 <fillCircleHelper>
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bd90      	pop	{r4, r7, pc}

0800349a <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800349a:	b590      	push	{r4, r7, lr}
 800349c:	b08b      	sub	sp, #44	; 0x2c
 800349e:	af02      	add	r7, sp, #8
 80034a0:	4604      	mov	r4, r0
 80034a2:	4608      	mov	r0, r1
 80034a4:	4611      	mov	r1, r2
 80034a6:	461a      	mov	r2, r3
 80034a8:	4623      	mov	r3, r4
 80034aa:	80fb      	strh	r3, [r7, #6]
 80034ac:	4603      	mov	r3, r0
 80034ae:	80bb      	strh	r3, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
 80034b4:	4613      	mov	r3, r2
 80034b6:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 80034b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d123      	bne.n	800350c <Displ_Line+0x72>
    	if (y1>y0){
 80034c4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80034c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	dd0e      	ble.n	80034ee <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 80034d0:	88f8      	ldrh	r0, [r7, #6]
 80034d2:	88b9      	ldrh	r1, [r7, #4]
 80034d4:	883a      	ldrh	r2, [r7, #0]
 80034d6:	88bb      	ldrh	r3, [r7, #4]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	2201      	movs	r2, #1
 80034e8:	f7ff fc26 	bl	8002d38 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 80034ec:	e103      	b.n	80036f6 <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 80034ee:	88f8      	ldrh	r0, [r7, #6]
 80034f0:	8839      	ldrh	r1, [r7, #0]
 80034f2:	88ba      	ldrh	r2, [r7, #4]
 80034f4:	883b      	ldrh	r3, [r7, #0]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	2201      	movs	r2, #1
 8003506:	f7ff fc17 	bl	8002d38 <Displ_FillArea>
    	return;
 800350a:	e0f4      	b.n	80036f6 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 800350c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003510:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003514:	429a      	cmp	r2, r3
 8003516:	d121      	bne.n	800355c <Displ_Line+0xc2>
    	if (x1>x0)
 8003518:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800351c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003520:	429a      	cmp	r2, r3
 8003522:	dd0d      	ble.n	8003540 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8003524:	88f8      	ldrh	r0, [r7, #6]
 8003526:	88b9      	ldrh	r1, [r7, #4]
 8003528:	887a      	ldrh	r2, [r7, #2]
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	b29b      	uxth	r3, r3
 8003530:	3301      	adds	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	2301      	movs	r3, #1
 800353a:	f7ff fbfd 	bl	8002d38 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 800353e:	e0da      	b.n	80036f6 <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8003540:	8878      	ldrh	r0, [r7, #2]
 8003542:	8839      	ldrh	r1, [r7, #0]
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	887b      	ldrh	r3, [r7, #2]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	b29b      	uxth	r3, r3
 800354c:	3301      	adds	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	2301      	movs	r3, #1
 8003556:	f7ff fbef 	bl	8002d38 <Displ_FillArea>
    	return;
 800355a:	e0cc      	b.n	80036f6 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 800355c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003560:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	dd05      	ble.n	8003574 <Displ_Line+0xda>
 8003568:	f9b7 2000 	ldrsh.w	r2, [r7]
 800356c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003570:	1ad2      	subs	r2, r2, r3
 8003572:	e004      	b.n	800357e <Displ_Line+0xe4>
 8003574:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003578:	f9b7 3000 	ldrsh.w	r3, [r7]
 800357c:	1ad2      	subs	r2, r2, r3
 800357e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003586:	4299      	cmp	r1, r3
 8003588:	dd05      	ble.n	8003596 <Displ_Line+0xfc>
 800358a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800358e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003592:	1acb      	subs	r3, r1, r3
 8003594:	e004      	b.n	80035a0 <Displ_Line+0x106>
 8003596:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800359a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800359e:	1acb      	subs	r3, r1, r3
 80035a0:	429a      	cmp	r2, r3
 80035a2:	bfcc      	ite	gt
 80035a4:	2301      	movgt	r3, #1
 80035a6:	2300      	movle	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 80035ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	827b      	strh	r3, [r7, #18]
 80035b8:	88bb      	ldrh	r3, [r7, #4]
 80035ba:	80fb      	strh	r3, [r7, #6]
 80035bc:	8a7b      	ldrh	r3, [r7, #18]
 80035be:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80035c0:	887b      	ldrh	r3, [r7, #2]
 80035c2:	823b      	strh	r3, [r7, #16]
 80035c4:	883b      	ldrh	r3, [r7, #0]
 80035c6:	807b      	strh	r3, [r7, #2]
 80035c8:	8a3b      	ldrh	r3, [r7, #16]
 80035ca:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80035cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80035d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	dd0b      	ble.n	80035f0 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	81fb      	strh	r3, [r7, #14]
 80035dc:	887b      	ldrh	r3, [r7, #2]
 80035de:	80fb      	strh	r3, [r7, #6]
 80035e0:	89fb      	ldrh	r3, [r7, #14]
 80035e2:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80035e4:	88bb      	ldrh	r3, [r7, #4]
 80035e6:	81bb      	strh	r3, [r7, #12]
 80035e8:	883b      	ldrh	r3, [r7, #0]
 80035ea:	80bb      	strh	r3, [r7, #4]
 80035ec:	89bb      	ldrh	r3, [r7, #12]
 80035ee:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 80035f0:	887a      	ldrh	r2, [r7, #2]
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 80035fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035fe:	105b      	asrs	r3, r3, #1
 8003600:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8003602:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003606:	f9b7 3000 	ldrsh.w	r3, [r7]
 800360a:	429a      	cmp	r2, r3
 800360c:	da07      	bge.n	800361e <Displ_Line+0x184>
        dy = y1-y0;
 800360e:	883a      	ldrh	r2, [r7, #0]
 8003610:	88bb      	ldrh	r3, [r7, #4]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	b29b      	uxth	r3, r3
 8003616:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8003618:	2301      	movs	r3, #1
 800361a:	837b      	strh	r3, [r7, #26]
 800361c:	e007      	b.n	800362e <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 800361e:	88ba      	ldrh	r2, [r7, #4]
 8003620:	883b      	ldrh	r3, [r7, #0]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	b29b      	uxth	r3, r3
 8003626:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8003628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800362c:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 800362e:	2300      	movs	r3, #0
 8003630:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	83bb      	strh	r3, [r7, #28]
 8003636:	e03a      	b.n	80036ae <Displ_Line+0x214>
    	l++;
 8003638:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800363c:	b29b      	uxth	r3, r3
 800363e:	3301      	adds	r3, #1
 8003640:	b29b      	uxth	r3, r3
 8003642:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8003644:	8b3a      	ldrh	r2, [r7, #24]
 8003646:	8afb      	ldrh	r3, [r7, #22]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	b29b      	uxth	r3, r3
 800364c:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 800364e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	da25      	bge.n	80036a2 <Displ_Line+0x208>
        	if (steep) {
 8003656:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 800365e:	88b8      	ldrh	r0, [r7, #4]
 8003660:	88f9      	ldrh	r1, [r7, #6]
 8003662:	8bfa      	ldrh	r2, [r7, #30]
 8003664:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	2201      	movs	r2, #1
 800366c:	f7ff fb64 	bl	8002d38 <Displ_FillArea>
 8003670:	e007      	b.n	8003682 <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 8003672:	88f8      	ldrh	r0, [r7, #6]
 8003674:	88b9      	ldrh	r1, [r7, #4]
 8003676:	8bfa      	ldrh	r2, [r7, #30]
 8003678:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	2301      	movs	r3, #1
 800367e:	f7ff fb5b 	bl	8002d38 <Displ_FillArea>
            }
            y0 += ystep;
 8003682:	88ba      	ldrh	r2, [r7, #4]
 8003684:	8b7b      	ldrh	r3, [r7, #26]
 8003686:	4413      	add	r3, r2
 8003688:	b29b      	uxth	r3, r3
 800368a:	80bb      	strh	r3, [r7, #4]
            l=0;
 800368c:	2300      	movs	r3, #0
 800368e:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8003690:	8bbb      	ldrh	r3, [r7, #28]
 8003692:	3301      	adds	r3, #1
 8003694:	b29b      	uxth	r3, r3
 8003696:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8003698:	8b3a      	ldrh	r2, [r7, #24]
 800369a:	897b      	ldrh	r3, [r7, #10]
 800369c:	4413      	add	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 80036a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	83bb      	strh	r3, [r7, #28]
 80036ae:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80036b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	ddbe      	ble.n	8003638 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 80036ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d019      	beq.n	80036f6 <Displ_Line+0x25c>
    	if (steep) {
 80036c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 80036ca:	88b8      	ldrh	r0, [r7, #4]
 80036cc:	88f9      	ldrh	r1, [r7, #6]
 80036ce:	8bfb      	ldrh	r3, [r7, #30]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	2201      	movs	r2, #1
 80036dc:	f7ff fb2c 	bl	8002d38 <Displ_FillArea>
 80036e0:	e009      	b.n	80036f6 <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 80036e2:	88f8      	ldrh	r0, [r7, #6]
 80036e4:	88b9      	ldrh	r1, [r7, #4]
 80036e6:	8bfb      	ldrh	r3, [r7, #30]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2301      	movs	r3, #1
 80036f2:	f7ff fb21 	bl	8002d38 <Displ_FillArea>
    	}
    }
}
 80036f6:	3724      	adds	r7, #36	; 0x24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd90      	pop	{r4, r7, pc}

080036fc <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 80036fc:	b590      	push	{r4, r7, lr}
 80036fe:	b085      	sub	sp, #20
 8003700:	af02      	add	r7, sp, #8
 8003702:	4604      	mov	r4, r0
 8003704:	4608      	mov	r0, r1
 8003706:	4611      	mov	r1, r2
 8003708:	461a      	mov	r2, r3
 800370a:	4623      	mov	r3, r4
 800370c:	80fb      	strh	r3, [r7, #6]
 800370e:	4603      	mov	r3, r0
 8003710:	80bb      	strh	r3, [r7, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	807b      	strh	r3, [r7, #2]
 8003716:	4613      	mov	r3, r2
 8003718:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 800371a:	88f8      	ldrh	r0, [r7, #6]
 800371c:	88b9      	ldrh	r1, [r7, #4]
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	8b3c      	ldrh	r4, [r7, #24]
 8003722:	8bbb      	ldrh	r3, [r7, #28]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	4623      	mov	r3, r4
 8003728:	f7ff fb06 	bl	8002d38 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 800372c:	88f8      	ldrh	r0, [r7, #6]
 800372e:	88ba      	ldrh	r2, [r7, #4]
 8003730:	883b      	ldrh	r3, [r7, #0]
 8003732:	4413      	add	r3, r2
 8003734:	b29a      	uxth	r2, r3
 8003736:	8b3b      	ldrh	r3, [r7, #24]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	b299      	uxth	r1, r3
 800373c:	887a      	ldrh	r2, [r7, #2]
 800373e:	8b3c      	ldrh	r4, [r7, #24]
 8003740:	8bbb      	ldrh	r3, [r7, #28]
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	4623      	mov	r3, r4
 8003746:	f7ff faf7 	bl	8002d38 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 800374a:	88f8      	ldrh	r0, [r7, #6]
 800374c:	88b9      	ldrh	r1, [r7, #4]
 800374e:	8b3a      	ldrh	r2, [r7, #24]
 8003750:	883c      	ldrh	r4, [r7, #0]
 8003752:	8bbb      	ldrh	r3, [r7, #28]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	4623      	mov	r3, r4
 8003758:	f7ff faee 	bl	8002d38 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 800375c:	88fa      	ldrh	r2, [r7, #6]
 800375e:	887b      	ldrh	r3, [r7, #2]
 8003760:	4413      	add	r3, r2
 8003762:	b29a      	uxth	r2, r3
 8003764:	8b3b      	ldrh	r3, [r7, #24]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	b298      	uxth	r0, r3
 800376a:	88b9      	ldrh	r1, [r7, #4]
 800376c:	8b3a      	ldrh	r2, [r7, #24]
 800376e:	883c      	ldrh	r4, [r7, #0]
 8003770:	8bbb      	ldrh	r3, [r7, #28]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	4623      	mov	r3, r4
 8003776:	f7ff fadf 	bl	8002d38 <Displ_FillArea>
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bd90      	pop	{r4, r7, pc}

08003782 <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8003782:	b590      	push	{r4, r7, lr}
 8003784:	b085      	sub	sp, #20
 8003786:	af02      	add	r7, sp, #8
 8003788:	4604      	mov	r4, r0
 800378a:	4608      	mov	r0, r1
 800378c:	4611      	mov	r1, r2
 800378e:	461a      	mov	r2, r3
 8003790:	4623      	mov	r3, r4
 8003792:	80fb      	strh	r3, [r7, #6]
 8003794:	4603      	mov	r3, r0
 8003796:	80bb      	strh	r3, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	807b      	strh	r3, [r7, #2]
 800379c:	4613      	mov	r3, r2
 800379e:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 80037a0:	f9b7 4000 	ldrsh.w	r4, [r7]
 80037a4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80037a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80037ac:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80037b0:	8c3b      	ldrh	r3, [r7, #32]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	4623      	mov	r3, r4
 80037b6:	f7ff fe70 	bl	800349a <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 80037ba:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80037be:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80037c2:	f9b7 1000 	ldrsh.w	r1, [r7]
 80037c6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80037ca:	8c3b      	ldrh	r3, [r7, #32]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	4623      	mov	r3, r4
 80037d0:	f7ff fe63 	bl	800349a <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 80037d4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80037d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037dc:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80037e0:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80037e4:	8c3b      	ldrh	r3, [r7, #32]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	4623      	mov	r3, r4
 80037ea:	f7ff fe56 	bl	800349a <Displ_Line>
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd90      	pop	{r4, r7, pc}

080037f6 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80037f6:	b590      	push	{r4, r7, lr}
 80037f8:	b091      	sub	sp, #68	; 0x44
 80037fa:	af02      	add	r7, sp, #8
 80037fc:	4604      	mov	r4, r0
 80037fe:	4608      	mov	r0, r1
 8003800:	4611      	mov	r1, r2
 8003802:	461a      	mov	r2, r3
 8003804:	4623      	mov	r3, r4
 8003806:	80fb      	strh	r3, [r7, #6]
 8003808:	4603      	mov	r3, r0
 800380a:	80bb      	strh	r3, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	807b      	strh	r3, [r7, #2]
 8003810:	4613      	mov	r3, r2
 8003812:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8003814:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003818:	f9b7 3000 	ldrsh.w	r3, [r7]
 800381c:	429a      	cmp	r2, r3
 800381e:	dd0b      	ble.n	8003838 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8003820:	88bb      	ldrh	r3, [r7, #4]
 8003822:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003824:	883b      	ldrh	r3, [r7, #0]
 8003826:	80bb      	strh	r3, [r7, #4]
 8003828:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800382a:	803b      	strh	r3, [r7, #0]
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003830:	887b      	ldrh	r3, [r7, #2]
 8003832:	80fb      	strh	r3, [r7, #6]
 8003834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003836:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8003838:	f9b7 2000 	ldrsh.w	r2, [r7]
 800383c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003840:	429a      	cmp	r2, r3
 8003842:	dd0f      	ble.n	8003864 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8003844:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003848:	847b      	strh	r3, [r7, #34]	; 0x22
 800384a:	883b      	ldrh	r3, [r7, #0]
 800384c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003850:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003852:	803b      	strh	r3, [r7, #0]
 8003854:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003858:	843b      	strh	r3, [r7, #32]
 800385a:	887b      	ldrh	r3, [r7, #2]
 800385c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003860:	8c3b      	ldrh	r3, [r7, #32]
 8003862:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8003864:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003868:	f9b7 3000 	ldrsh.w	r3, [r7]
 800386c:	429a      	cmp	r2, r3
 800386e:	dd0b      	ble.n	8003888 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8003870:	88bb      	ldrh	r3, [r7, #4]
 8003872:	83fb      	strh	r3, [r7, #30]
 8003874:	883b      	ldrh	r3, [r7, #0]
 8003876:	80bb      	strh	r3, [r7, #4]
 8003878:	8bfb      	ldrh	r3, [r7, #30]
 800387a:	803b      	strh	r3, [r7, #0]
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	83bb      	strh	r3, [r7, #28]
 8003880:	887b      	ldrh	r3, [r7, #2]
 8003882:	80fb      	strh	r3, [r7, #6]
 8003884:	8bbb      	ldrh	r3, [r7, #28]
 8003886:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8003888:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800388c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003890:	429a      	cmp	r2, r3
 8003892:	d136      	bne.n	8003902 <Displ_fillTriangle+0x10c>
        a = b = x0;
 8003894:	88fb      	ldrh	r3, [r7, #6]
 8003896:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003898:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800389a:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 800389c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80038a0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80038a4:	429a      	cmp	r2, r3
 80038a6:	da02      	bge.n	80038ae <Displ_fillTriangle+0xb8>
 80038a8:	887b      	ldrh	r3, [r7, #2]
 80038aa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80038ac:	e007      	b.n	80038be <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 80038ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80038b2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80038b6:	429a      	cmp	r2, r3
 80038b8:	dd01      	ble.n	80038be <Displ_fillTriangle+0xc8>
 80038ba:	887b      	ldrh	r3, [r7, #2]
 80038bc:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 80038be:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80038c2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80038c6:	429a      	cmp	r2, r3
 80038c8:	da03      	bge.n	80038d2 <Displ_fillTriangle+0xdc>
 80038ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038ce:	86fb      	strh	r3, [r7, #54]	; 0x36
 80038d0:	e008      	b.n	80038e4 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 80038d2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80038d6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80038da:	429a      	cmp	r2, r3
 80038dc:	dd02      	ble.n	80038e4 <Displ_fillTriangle+0xee>
 80038de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038e2:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 80038e4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80038e8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80038ec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80038f0:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80038f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	4623      	mov	r3, r4
 80038fc:	f7ff fdcd 	bl	800349a <Displ_Line>
        return;
 8003900:	e0d2      	b.n	8003aa8 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8003902:	887a      	ldrh	r2, [r7, #2]
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	b29b      	uxth	r3, r3
 800390a:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 800390c:	883a      	ldrh	r2, [r7, #0]
 800390e:	88bb      	ldrh	r3, [r7, #4]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	b29b      	uxth	r3, r3
 8003914:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8003916:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	b29b      	uxth	r3, r3
 8003920:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8003922:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003926:	88bb      	ldrh	r3, [r7, #4]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	b29b      	uxth	r3, r3
 800392c:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 800392e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003932:	887b      	ldrh	r3, [r7, #2]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	b29b      	uxth	r3, r3
 8003938:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 800393a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800393e:	883b      	ldrh	r3, [r7, #0]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	b29b      	uxth	r3, r3
 8003944:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8003946:	2300      	movs	r3, #0
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 800394e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003952:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003956:	429a      	cmp	r2, r3
 8003958:	d102      	bne.n	8003960 <Displ_fillTriangle+0x16a>
 800395a:	883b      	ldrh	r3, [r7, #0]
 800395c:	863b      	strh	r3, [r7, #48]	; 0x30
 800395e:	e003      	b.n	8003968 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8003960:	883b      	ldrh	r3, [r7, #0]
 8003962:	3b01      	subs	r3, #1
 8003964:	b29b      	uxth	r3, r3
 8003966:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8003968:	88bb      	ldrh	r3, [r7, #4]
 800396a:	867b      	strh	r3, [r7, #50]	; 0x32
 800396c:	e03d      	b.n	80039ea <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 800396e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003974:	fb92 f3f3 	sdiv	r3, r2, r3
 8003978:	b29a      	uxth	r2, r3
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	4413      	add	r3, r2
 800397e:	b29b      	uxth	r3, r3
 8003980:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8003982:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003988:	fb92 f3f3 	sdiv	r3, r2, r3
 800398c:	b29a      	uxth	r2, r3
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	4413      	add	r3, r2
 8003992:	b29b      	uxth	r3, r3
 8003994:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8003996:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800399a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800399c:	4413      	add	r3, r2
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80039a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80039a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039a6:	4413      	add	r3, r2
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80039aa:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80039ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80039b2:	429a      	cmp	r2, r3
 80039b4:	dd05      	ble.n	80039c2 <Displ_fillTriangle+0x1cc>
 80039b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039b8:	81bb      	strh	r3, [r7, #12]
 80039ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80039bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80039be:	89bb      	ldrh	r3, [r7, #12]
 80039c0:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 80039c2:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 80039c6:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80039ca:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80039ce:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80039d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	4623      	mov	r3, r4
 80039da:	f7ff fd5e 	bl	800349a <Displ_Line>
    for(y=y0; y<=last; y++) {
 80039de:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3301      	adds	r3, #1
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	867b      	strh	r3, [r7, #50]	; 0x32
 80039ea:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80039ee:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80039f2:	429a      	cmp	r2, r3
 80039f4:	ddbb      	ble.n	800396e <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 80039f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80039fa:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80039fe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003a02:	1a8a      	subs	r2, r1, r2
 8003a04:	fb02 f303 	mul.w	r3, r2, r3
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8003a0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a0e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8003a12:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003a16:	1a8a      	subs	r2, r1, r2
 8003a18:	fb02 f303 	mul.w	r3, r2, r3
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8003a1e:	e03d      	b.n	8003a9c <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8003a20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a26:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	887b      	ldrh	r3, [r7, #2]
 8003a2e:	4413      	add	r3, r2
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8003a34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	4413      	add	r3, r2
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8003a48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4e:	4413      	add	r3, r2
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003a52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a58:	4413      	add	r3, r2
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003a5c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8003a60:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003a64:	429a      	cmp	r2, r3
 8003a66:	dd05      	ble.n	8003a74 <Displ_fillTriangle+0x27e>
 8003a68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a6a:	81fb      	strh	r3, [r7, #14]
 8003a6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a6e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003a70:	89fb      	ldrh	r3, [r7, #14]
 8003a72:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8003a74:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8003a78:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8003a7c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8003a80:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8003a84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	f7ff fd05 	bl	800349a <Displ_Line>
    for(; y<=y2; y++) {
 8003a90:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3301      	adds	r3, #1
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	867b      	strh	r3, [r7, #50]	; 0x32
 8003a9c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003aa0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	ddbb      	ble.n	8003a20 <Displ_fillTriangle+0x22a>
    }
}
 8003aa8:	373c      	adds	r7, #60	; 0x3c
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd90      	pop	{r4, r7, pc}

08003aae <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8003aae:	b590      	push	{r4, r7, lr}
 8003ab0:	b087      	sub	sp, #28
 8003ab2:	af02      	add	r7, sp, #8
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	4608      	mov	r0, r1
 8003ab8:	4611      	mov	r1, r2
 8003aba:	461a      	mov	r2, r3
 8003abc:	4623      	mov	r3, r4
 8003abe:	80fb      	strh	r3, [r7, #6]
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	80bb      	strh	r3, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8003acc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003ad0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	bfa8      	it	ge
 8003ad8:	4613      	movge	r3, r2
 8003ada:	b21b      	sxth	r3, r3
 8003adc:	0fda      	lsrs	r2, r3, #31
 8003ade:	4413      	add	r3, r2
 8003ae0:	105b      	asrs	r3, r3, #1
 8003ae2:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8003ae4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003ae8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	dd01      	ble.n	8003af4 <Displ_drawRoundRect+0x46>
 8003af0:	89fb      	ldrh	r3, [r7, #14]
 8003af2:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 8003af4:	88fa      	ldrh	r2, [r7, #6]
 8003af6:	8c3b      	ldrh	r3, [r7, #32]
 8003af8:	4413      	add	r3, r2
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	b218      	sxth	r0, r3
 8003afe:	88fa      	ldrh	r2, [r7, #6]
 8003b00:	887b      	ldrh	r3, [r7, #2]
 8003b02:	4413      	add	r3, r2
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	8c3b      	ldrh	r3, [r7, #32]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	b21a      	sxth	r2, r3
 8003b12:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003b16:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003b1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	4623      	mov	r3, r4
 8003b20:	f7ff fcbb 	bl	800349a <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 8003b24:	88fa      	ldrh	r2, [r7, #6]
 8003b26:	8c3b      	ldrh	r3, [r7, #32]
 8003b28:	4413      	add	r3, r2
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	b218      	sxth	r0, r3
 8003b2e:	88ba      	ldrh	r2, [r7, #4]
 8003b30:	883b      	ldrh	r3, [r7, #0]
 8003b32:	4413      	add	r3, r2
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	b219      	sxth	r1, r3
 8003b3c:	88fa      	ldrh	r2, [r7, #6]
 8003b3e:	887b      	ldrh	r3, [r7, #2]
 8003b40:	4413      	add	r3, r2
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	8c3b      	ldrh	r3, [r7, #32]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	b21c      	sxth	r4, r3
 8003b50:	88ba      	ldrh	r2, [r7, #4]
 8003b52:	883b      	ldrh	r3, [r7, #0]
 8003b54:	4413      	add	r3, r2
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	b21a      	sxth	r2, r3
 8003b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	4613      	mov	r3, r2
 8003b64:	4622      	mov	r2, r4
 8003b66:	f7ff fc98 	bl	800349a <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 8003b6a:	88ba      	ldrh	r2, [r7, #4]
 8003b6c:	8c3b      	ldrh	r3, [r7, #32]
 8003b6e:	4413      	add	r3, r2
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	b219      	sxth	r1, r3
 8003b74:	88ba      	ldrh	r2, [r7, #4]
 8003b76:	883b      	ldrh	r3, [r7, #0]
 8003b78:	4413      	add	r3, r2
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	8c3b      	ldrh	r3, [r7, #32]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	b21c      	sxth	r4, r3
 8003b88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b8c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003b90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	4623      	mov	r3, r4
 8003b96:	f7ff fc80 	bl	800349a <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	887b      	ldrh	r3, [r7, #2]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	b218      	sxth	r0, r3
 8003ba8:	88ba      	ldrh	r2, [r7, #4]
 8003baa:	8c3b      	ldrh	r3, [r7, #32]
 8003bac:	4413      	add	r3, r2
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	b219      	sxth	r1, r3
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	887b      	ldrh	r3, [r7, #2]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	b21c      	sxth	r4, r3
 8003bc0:	88ba      	ldrh	r2, [r7, #4]
 8003bc2:	883b      	ldrh	r3, [r7, #0]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	8c3b      	ldrh	r3, [r7, #32]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	b21a      	sxth	r2, r3
 8003bd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	4622      	mov	r2, r4
 8003bdc:	f7ff fc5d 	bl	800349a <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8003be0:	88fa      	ldrh	r2, [r7, #6]
 8003be2:	8c3b      	ldrh	r3, [r7, #32]
 8003be4:	4413      	add	r3, r2
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	b218      	sxth	r0, r3
 8003bea:	88ba      	ldrh	r2, [r7, #4]
 8003bec:	8c3b      	ldrh	r3, [r7, #32]
 8003bee:	4413      	add	r3, r2
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	b219      	sxth	r1, r3
 8003bf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003bf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f7ff fa7f 	bl	8003100 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8003c02:	88fa      	ldrh	r2, [r7, #6]
 8003c04:	887b      	ldrh	r3, [r7, #2]
 8003c06:	4413      	add	r3, r2
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	8c3b      	ldrh	r3, [r7, #32]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	b218      	sxth	r0, r3
 8003c16:	88ba      	ldrh	r2, [r7, #4]
 8003c18:	8c3b      	ldrh	r3, [r7, #32]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	b219      	sxth	r1, r3
 8003c20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003c24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	2302      	movs	r3, #2
 8003c2a:	f7ff fa69 	bl	8003100 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8003c2e:	88fa      	ldrh	r2, [r7, #6]
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	4413      	add	r3, r2
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	8c3b      	ldrh	r3, [r7, #32]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	b218      	sxth	r0, r3
 8003c42:	88ba      	ldrh	r2, [r7, #4]
 8003c44:	883b      	ldrh	r3, [r7, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	8c3b      	ldrh	r3, [r7, #32]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	b219      	sxth	r1, r3
 8003c56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	2304      	movs	r3, #4
 8003c60:	f7ff fa4e 	bl	8003100 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8003c64:	88fa      	ldrh	r2, [r7, #6]
 8003c66:	8c3b      	ldrh	r3, [r7, #32]
 8003c68:	4413      	add	r3, r2
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	b218      	sxth	r0, r3
 8003c6e:	88ba      	ldrh	r2, [r7, #4]
 8003c70:	883b      	ldrh	r3, [r7, #0]
 8003c72:	4413      	add	r3, r2
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	8c3b      	ldrh	r3, [r7, #32]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	b219      	sxth	r1, r3
 8003c82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003c86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	f7ff fa38 	bl	8003100 <drawCircleHelper>
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd90      	pop	{r4, r7, pc}

08003c98 <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	80fb      	strh	r3, [r7, #6]
 8003caa:	4603      	mov	r3, r0
 8003cac:	80bb      	strh	r3, [r7, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	807b      	strh	r3, [r7, #2]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8003cb6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003cba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	bfa8      	it	ge
 8003cc2:	4613      	movge	r3, r2
 8003cc4:	b21b      	sxth	r3, r3
 8003cc6:	0fda      	lsrs	r2, r3, #31
 8003cc8:	4413      	add	r3, r2
 8003cca:	105b      	asrs	r3, r3, #1
 8003ccc:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8003cce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003cd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	dd01      	ble.n	8003cde <Displ_fillRoundRect+0x46>
 8003cda:	89fb      	ldrh	r3, [r7, #14]
 8003cdc:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 8003cde:	88fa      	ldrh	r2, [r7, #6]
 8003ce0:	8c3b      	ldrh	r3, [r7, #32]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	b298      	uxth	r0, r3
 8003ce6:	88b9      	ldrh	r1, [r7, #4]
 8003ce8:	887a      	ldrh	r2, [r7, #2]
 8003cea:	8c3b      	ldrh	r3, [r7, #32]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	883c      	ldrh	r4, [r7, #0]
 8003cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	f7ff f81c 	bl	8002d38 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8003d00:	88fa      	ldrh	r2, [r7, #6]
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	4413      	add	r3, r2
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	8c3b      	ldrh	r3, [r7, #32]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	b218      	sxth	r0, r3
 8003d14:	88ba      	ldrh	r2, [r7, #4]
 8003d16:	8c3b      	ldrh	r3, [r7, #32]
 8003d18:	4413      	add	r3, r2
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	b219      	sxth	r1, r3
 8003d1e:	883a      	ldrh	r2, [r7, #0]
 8003d20:	8c3b      	ldrh	r3, [r7, #32]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	b21b      	sxth	r3, r3
 8003d30:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8003d34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d36:	9201      	str	r2, [sp, #4]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	f7ff faa3 	bl	8003288 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8003d42:	88fa      	ldrh	r2, [r7, #6]
 8003d44:	8c3b      	ldrh	r3, [r7, #32]
 8003d46:	4413      	add	r3, r2
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	b218      	sxth	r0, r3
 8003d4c:	88ba      	ldrh	r2, [r7, #4]
 8003d4e:	8c3b      	ldrh	r3, [r7, #32]
 8003d50:	4413      	add	r3, r2
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	b219      	sxth	r1, r3
 8003d56:	883a      	ldrh	r2, [r7, #0]
 8003d58:	8c3b      	ldrh	r3, [r7, #32]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8003d6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d6e:	9201      	str	r2, [sp, #4]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	2302      	movs	r3, #2
 8003d74:	4622      	mov	r2, r4
 8003d76:	f7ff fa87 	bl	8003288 <fillCircleHelper>
}
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd90      	pop	{r4, r7, pc}
	...

08003d84 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	2b51      	cmp	r3, #81	; 0x51
 8003d92:	d00a      	beq.n	8003daa <Displ_BackLight+0x26>
 8003d94:	2b51      	cmp	r3, #81	; 0x51
 8003d96:	dc16      	bgt.n	8003dc6 <Displ_BackLight+0x42>
 8003d98:	2b46      	cmp	r3, #70	; 0x46
 8003d9a:	d008      	beq.n	8003dae <Displ_BackLight+0x2a>
 8003d9c:	2b46      	cmp	r3, #70	; 0x46
 8003d9e:	dc12      	bgt.n	8003dc6 <Displ_BackLight+0x42>
 8003da0:	2b30      	cmp	r3, #48	; 0x30
 8003da2:	d00a      	beq.n	8003dba <Displ_BackLight+0x36>
 8003da4:	2b31      	cmp	r3, #49	; 0x31
 8003da6:	d002      	beq.n	8003dae <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8003da8:	e00d      	b.n	8003dc6 <Displ_BackLight+0x42>
		__NOP();
 8003daa:	bf00      	nop
		break;
 8003dac:	e00c      	b.n	8003dc8 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8003dae:	2201      	movs	r2, #1
 8003db0:	2140      	movs	r1, #64	; 0x40
 8003db2:	480a      	ldr	r0, [pc, #40]	; (8003ddc <Displ_BackLight+0x58>)
 8003db4:	f002 f860 	bl	8005e78 <HAL_GPIO_WritePin>
		break;
 8003db8:	e006      	b.n	8003dc8 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2140      	movs	r1, #64	; 0x40
 8003dbe:	4807      	ldr	r0, [pc, #28]	; (8003ddc <Displ_BackLight+0x58>)
 8003dc0:	f002 f85a 	bl	8005e78 <HAL_GPIO_WritePin>
		break;
 8003dc4:	e000      	b.n	8003dc8 <Displ_BackLight+0x44>
		break;
 8003dc6:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8003dc8:	2140      	movs	r1, #64	; 0x40
 8003dca:	4804      	ldr	r0, [pc, #16]	; (8003ddc <Displ_BackLight+0x58>)
 8003dcc:	f002 f83c 	bl	8005e48 <HAL_GPIO_ReadPin>
 8003dd0:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40020000 	.word	0x40020000

08003de0 <testLines>:




void testLines(uint16_t color)
{
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b08b      	sub	sp, #44	; 0x2c
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	4603      	mov	r3, r0
 8003de8:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8003dea:	4b7c      	ldr	r3, [pc, #496]	; (8003fdc <testLines+0x1fc>)
 8003dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003df0:	617b      	str	r3, [r7, #20]
                  h = _height;
 8003df2:	4b7b      	ldr	r3, [pc, #492]	; (8003fe0 <testLines+0x200>)
 8003df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003df8:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f7ff f964 	bl	80030c8 <Displ_CLS>

    x1 = y1 = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	e00f      	b.n	8003e34 <testLines+0x54>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	b218      	sxth	r0, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	b219      	sxth	r1, r3
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	b21a      	sxth	r2, r3
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	b21c      	sxth	r4, r3
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	4623      	mov	r3, r4
 8003e2a:	f7ff fb36 	bl	800349a <Displ_Line>
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3306      	adds	r3, #6
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	dbeb      	blt.n	8003e14 <testLines+0x34>
    x2    = w - 1;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8003e42:	2300      	movs	r3, #0
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	e00f      	b.n	8003e68 <testLines+0x88>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	b218      	sxth	r0, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	b219      	sxth	r1, r3
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	b21c      	sxth	r4, r3
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	4623      	mov	r3, r4
 8003e5e:	f7ff fb1c 	bl	800349a <Displ_Line>
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	3306      	adds	r3, #6
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	dbeb      	blt.n	8003e48 <testLines+0x68>

    Displ_CLS(BLACK);
 8003e70:	2000      	movs	r0, #0
 8003e72:	f7ff f929 	bl	80030c8 <Displ_CLS>

    x1    = w - 1;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	e00f      	b.n	8003eac <testLines+0xcc>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	b218      	sxth	r0, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	b219      	sxth	r1, r3
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	b21a      	sxth	r2, r3
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	b21c      	sxth	r4, r3
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	4623      	mov	r3, r4
 8003ea2:	f7ff fafa 	bl	800349a <Displ_Line>
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3306      	adds	r3, #6
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	dbeb      	blt.n	8003e8c <testLines+0xac>
    x2    = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	e00f      	b.n	8003ede <testLines+0xfe>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	b218      	sxth	r0, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	b219      	sxth	r1, r3
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	b21a      	sxth	r2, r3
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	b21c      	sxth	r4, r3
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	f7ff fae1 	bl	800349a <Displ_Line>
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	3306      	adds	r3, #6
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	dbeb      	blt.n	8003ebe <testLines+0xde>

    Displ_CLS(BLACK);
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	f7ff f8ee 	bl	80030c8 <Displ_CLS>

    x1    = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	e00f      	b.n	8003f20 <testLines+0x140>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	b218      	sxth	r0, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	b219      	sxth	r1, r3
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	b21a      	sxth	r2, r3
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	b21c      	sxth	r4, r3
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	4623      	mov	r3, r4
 8003f16:	f7ff fac0 	bl	800349a <Displ_Line>
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3306      	adds	r3, #6
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	dbeb      	blt.n	8003f00 <testLines+0x120>
    x2    = w - 1;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	e00f      	b.n	8003f54 <testLines+0x174>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	b218      	sxth	r0, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	b219      	sxth	r1, r3
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	b21a      	sxth	r2, r3
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	b21c      	sxth	r4, r3
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	4623      	mov	r3, r4
 8003f4a:	f7ff faa6 	bl	800349a <Displ_Line>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	3306      	adds	r3, #6
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	dbeb      	blt.n	8003f34 <testLines+0x154>

    Displ_CLS(BLACK);
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	f7ff f8b3 	bl	80030c8 <Displ_CLS>

    x1    = w - 1;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e00f      	b.n	8003f98 <testLines+0x1b8>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	b218      	sxth	r0, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	b219      	sxth	r1, r3
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	b21a      	sxth	r2, r3
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	b21c      	sxth	r4, r3
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	4623      	mov	r3, r4
 8003f8e:	f7ff fa84 	bl	800349a <Displ_Line>
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3306      	adds	r3, #6
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	dbeb      	blt.n	8003f78 <testLines+0x198>
    x2    = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61bb      	str	r3, [r7, #24]
 8003fa8:	e00f      	b.n	8003fca <testLines+0x1ea>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	b218      	sxth	r0, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	b219      	sxth	r1, r3
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	b21a      	sxth	r2, r3
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	b21c      	sxth	r4, r3
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	4623      	mov	r3, r4
 8003fc0:	f7ff fa6b 	bl	800349a <Displ_Line>
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	3306      	adds	r3, #6
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	dbeb      	blt.n	8003faa <testLines+0x1ca>

}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	3724      	adds	r7, #36	; 0x24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd90      	pop	{r4, r7, pc}
 8003fdc:	20005272 	.word	0x20005272
 8003fe0:	20005274 	.word	0x20005274

08003fe4 <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	4603      	mov	r3, r0
 8003fec:	460a      	mov	r2, r1
 8003fee:	80fb      	strh	r3, [r7, #6]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <testFastLines+0x94>)
 8003ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	; (800407c <testFastLines+0x98>)
 8003ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004002:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8004004:	2000      	movs	r0, #0
 8004006:	f7ff f85f 	bl	80030c8 <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	e011      	b.n	8004034 <testFastLines+0x50>
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	b219      	sxth	r1, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29b      	uxth	r3, r3
 800401c:	b21a      	sxth	r2, r3
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	b218      	sxth	r0, r3
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	4603      	mov	r3, r0
 8004028:	2000      	movs	r0, #0
 800402a:	f7ff fa36 	bl	800349a <Displ_Line>
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	3305      	adds	r3, #5
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	429a      	cmp	r2, r3
 800403a:	dbe9      	blt.n	8004010 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e011      	b.n	8004066 <testFastLines+0x82>
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	b218      	sxth	r0, r3
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	b21a      	sxth	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29b      	uxth	r3, r3
 8004052:	b219      	sxth	r1, r3
 8004054:	88bb      	ldrh	r3, [r7, #4]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	460b      	mov	r3, r1
 800405a:	2100      	movs	r1, #0
 800405c:	f7ff fa1d 	bl	800349a <Displ_Line>
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	3305      	adds	r3, #5
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	429a      	cmp	r2, r3
 800406c:	dbe9      	blt.n	8004042 <testFastLines+0x5e>
}
 800406e:	bf00      	nop
 8004070:	bf00      	nop
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20005272 	.word	0x20005272
 800407c:	20005274 	.word	0x20005274

08004080 <testRects>:




void testRects(uint16_t color)
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b08b      	sub	sp, #44	; 0x2c
 8004084:	af02      	add	r7, sp, #8
 8004086:	4603      	mov	r3, r0
 8004088:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 800408a:	4b25      	ldr	r3, [pc, #148]	; (8004120 <testRects+0xa0>)
 800408c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004090:	0fda      	lsrs	r2, r3, #31
 8004092:	4413      	add	r3, r2
 8004094:	105b      	asrs	r3, r3, #1
 8004096:	b21b      	sxth	r3, r3
 8004098:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 800409a:	4b22      	ldr	r3, [pc, #136]	; (8004124 <testRects+0xa4>)
 800409c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040a0:	0fda      	lsrs	r2, r3, #31
 80040a2:	4413      	add	r3, r2
 80040a4:	105b      	asrs	r3, r3, #1
 80040a6:	b21b      	sxth	r3, r3
 80040a8:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 80040aa:	2000      	movs	r0, #0
 80040ac:	f7ff f80c 	bl	80030c8 <Displ_CLS>
	n     = min(_width, _height);
 80040b0:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <testRects+0xa4>)
 80040b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80040b6:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <testRects+0xa0>)
 80040b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040bc:	4293      	cmp	r3, r2
 80040be:	bfa8      	it	ge
 80040c0:	4613      	movge	r3, r2
 80040c2:	b21b      	sxth	r3, r3
 80040c4:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 80040c6:	2302      	movs	r3, #2
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	e020      	b.n	800410e <testRects+0x8e>
		i2 = i / 2;
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	0fda      	lsrs	r2, r3, #31
 80040d0:	4413      	add	r3, r2
 80040d2:	105b      	asrs	r3, r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	b218      	sxth	r0, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	b219      	sxth	r1, r3
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	b21a      	sxth	r2, r3
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	b21c      	sxth	r4, r3
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	2301      	movs	r3, #1
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	4623      	mov	r3, r4
 8004104:	f7ff fafa 	bl	80036fc <Displ_Border>
	for (i = 2; i < n; i += 6) {
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	3306      	adds	r3, #6
 800410c:	61fb      	str	r3, [r7, #28]
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	429a      	cmp	r2, r3
 8004114:	dbda      	blt.n	80040cc <testRects+0x4c>
	}
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	3724      	adds	r7, #36	; 0x24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd90      	pop	{r4, r7, pc}
 8004120:	20005272 	.word	0x20005272
 8004124:	20005274 	.word	0x20005274

08004128 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8004128:	b590      	push	{r4, r7, lr}
 800412a:	b08b      	sub	sp, #44	; 0x2c
 800412c:	af02      	add	r7, sp, #8
 800412e:	4603      	mov	r3, r0
 8004130:	460a      	mov	r2, r1
 8004132:	80fb      	strh	r3, [r7, #6]
 8004134:	4613      	mov	r3, r2
 8004136:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8004138:	4b30      	ldr	r3, [pc, #192]	; (80041fc <testFilledRects+0xd4>)
 800413a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800413e:	0fda      	lsrs	r2, r3, #31
 8004140:	4413      	add	r3, r2
 8004142:	105b      	asrs	r3, r3, #1
 8004144:	b21b      	sxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 800414a:	4b2d      	ldr	r3, [pc, #180]	; (8004200 <testFilledRects+0xd8>)
 800414c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004150:	0fda      	lsrs	r2, r3, #31
 8004152:	4413      	add	r3, r2
 8004154:	105b      	asrs	r3, r3, #1
 8004156:	b21b      	sxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 800415c:	2000      	movs	r0, #0
 800415e:	f7fe ffb3 	bl	80030c8 <Displ_CLS>
	n = min(_width, _height);
 8004162:	4b27      	ldr	r3, [pc, #156]	; (8004200 <testFilledRects+0xd8>)
 8004164:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004168:	4b24      	ldr	r3, [pc, #144]	; (80041fc <testFilledRects+0xd4>)
 800416a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800416e:	4293      	cmp	r3, r2
 8004170:	bfa8      	it	ge
 8004172:	4613      	movge	r3, r2
 8004174:	b21b      	sxth	r3, r3
 8004176:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	e035      	b.n	80041ea <testFilledRects+0xc2>
		i2    = i / 2;
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	0fda      	lsrs	r2, r3, #31
 8004182:	4413      	add	r3, r2
 8004184:	105b      	asrs	r3, r3, #1
 8004186:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	b29b      	uxth	r3, r3
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	b298      	uxth	r0, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	b29b      	uxth	r3, r3
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	b299      	uxth	r1, r3
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	b29c      	uxth	r4, r3
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4623      	mov	r3, r4
 80041ae:	f7fe fdc3 	bl	8002d38 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	b29b      	uxth	r3, r3
 80041be:	b218      	sxth	r0, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	b219      	sxth	r1, r3
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	b21a      	sxth	r2, r3
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	b21c      	sxth	r4, r3
 80041d6:	88bb      	ldrh	r3, [r7, #4]
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	2301      	movs	r3, #1
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	4623      	mov	r3, r4
 80041e0:	f7ff fa8c 	bl	80036fc <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	3b06      	subs	r3, #6
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	dcc6      	bgt.n	800417e <testFilledRects+0x56>
	}
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	3724      	adds	r7, #36	; 0x24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd90      	pop	{r4, r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20005272 	.word	0x20005272
 8004200:	20005274 	.word	0x20005274

08004204 <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	460a      	mov	r2, r1
 800420e:	71fb      	strb	r3, [r7, #7]
 8004210:	4613      	mov	r3, r2
 8004212:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8004214:	4b18      	ldr	r3, [pc, #96]	; (8004278 <testFilledCircles+0x74>)
 8004216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <testFilledCircles+0x78>)
 800421e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 800422a:	2000      	movs	r0, #0
 800422c:	f7fe ff4c 	bl	80030c8 <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	e017      	b.n	8004266 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e00c      	b.n	8004256 <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	b218      	sxth	r0, r3
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	b219      	sxth	r1, r3
 8004244:	79fb      	ldrb	r3, [r7, #7]
 8004246:	b21a      	sxth	r2, r3
 8004248:	88bb      	ldrh	r3, [r7, #4]
 800424a:	f7ff f8f3 	bl	8003434 <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	429a      	cmp	r2, r3
 800425c:	dbee      	blt.n	800423c <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	429a      	cmp	r2, r3
 800426c:	dbe3      	blt.n	8004236 <testFilledCircles+0x32>
        }
    }
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	3720      	adds	r7, #32
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20005272 	.word	0x20005272
 800427c:	20005274 	.word	0x20005274

08004280 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	460a      	mov	r2, r1
 800428a:	71fb      	strb	r3, [r7, #7]
 800428c:	4613      	mov	r3, r2
 800428e:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8004296:	4b19      	ldr	r3, [pc, #100]	; (80042fc <testCircles+0x7c>)
 8004298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800429c:	461a      	mov	r2, r3
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	4413      	add	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 80042a4:	4b16      	ldr	r3, [pc, #88]	; (8004300 <testCircles+0x80>)
 80042a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042aa:	461a      	mov	r2, r3
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	4413      	add	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 80042b2:	2300      	movs	r3, #0
 80042b4:	61fb      	str	r3, [r7, #28]
 80042b6:	e017      	b.n	80042e8 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 80042b8:	2300      	movs	r3, #0
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	e00c      	b.n	80042d8 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	b218      	sxth	r0, r3
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	b219      	sxth	r1, r3
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	b21a      	sxth	r2, r3
 80042ca:	88bb      	ldrh	r3, [r7, #4]
 80042cc:	f7fe fe28 	bl	8002f20 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	4413      	add	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	429a      	cmp	r2, r3
 80042de:	dbee      	blt.n	80042be <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	4413      	add	r3, r2
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	dbe3      	blt.n	80042b8 <testCircles+0x38>
        }
    }
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20005272 	.word	0x20005272
 8004300:	20005274 	.word	0x20005274

08004304 <testTriangles>:




void testTriangles()
{
 8004304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004306:	b089      	sub	sp, #36	; 0x24
 8004308:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 800430a:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <testTriangles+0xc0>)
 800430c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004310:	0fda      	lsrs	r2, r3, #31
 8004312:	4413      	add	r3, r2
 8004314:	105b      	asrs	r3, r3, #1
 8004316:	b21b      	sxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 800431c:	4b2a      	ldr	r3, [pc, #168]	; (80043c8 <testTriangles+0xc4>)
 800431e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004322:	0fda      	lsrs	r2, r3, #31
 8004324:	4413      	add	r3, r2
 8004326:	105b      	asrs	r3, r3, #1
 8004328:	b21b      	sxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 800432e:	2000      	movs	r0, #0
 8004330:	f7fe feca 	bl	80030c8 <Displ_CLS>
    n     = min(cx, cy);
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	4293      	cmp	r3, r2
 800433a:	bfa8      	it	ge
 800433c:	4613      	movge	r3, r2
 800433e:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e035      	b.n	80043b2 <testTriangles+0xae>
    	Displ_drawTriangle(
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	b29b      	uxth	r3, r3
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8004356:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	b29b      	uxth	r3, r3
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8004364:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	b29b      	uxth	r3, r3
 800436e:	4413      	add	r3, r2
 8004370:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8004372:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	b29b      	uxth	r3, r3
 800437c:	4413      	add	r3, r2
 800437e:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8004380:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	b291      	uxth	r1, r2
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	b292      	uxth	r2, r2
 800438a:	440a      	add	r2, r1
 800438c:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 800438e:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8004390:	68f9      	ldr	r1, [r7, #12]
 8004392:	10c9      	asrs	r1, r1, #3
 8004394:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 8004396:	f001 011f 	and.w	r1, r1, #31
 800439a:	b289      	uxth	r1, r1
 800439c:	9102      	str	r1, [sp, #8]
 800439e:	9201      	str	r2, [sp, #4]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	4633      	mov	r3, r6
 80043a4:	462a      	mov	r2, r5
 80043a6:	4621      	mov	r1, r4
 80043a8:	f7ff f9eb 	bl	8003782 <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3305      	adds	r3, #5
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	dbc5      	blt.n	8004346 <testTriangles+0x42>
    }
}
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c4:	20005272 	.word	0x20005272
 80043c8:	20005274 	.word	0x20005274

080043cc <testFilledTriangles>:





void testFilledTriangles() {
 80043cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ce:	b089      	sub	sp, #36	; 0x24
 80043d0:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 80043d2:	4b53      	ldr	r3, [pc, #332]	; (8004520 <testFilledTriangles+0x154>)
 80043d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043d8:	0fda      	lsrs	r2, r3, #31
 80043da:	4413      	add	r3, r2
 80043dc:	105b      	asrs	r3, r3, #1
 80043de:	b21b      	sxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 80043e4:	4b4f      	ldr	r3, [pc, #316]	; (8004524 <testFilledTriangles+0x158>)
 80043e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ea:	0fda      	lsrs	r2, r3, #31
 80043ec:	4413      	add	r3, r2
 80043ee:	105b      	asrs	r3, r3, #1
 80043f0:	b21b      	sxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 80043f6:	2000      	movs	r0, #0
 80043f8:	f7fe fe66 	bl	80030c8 <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4293      	cmp	r3, r2
 8004402:	bfa8      	it	ge
 8004404:	4613      	movge	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	e080      	b.n	800450c <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	b21c      	sxth	r4, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	b29b      	uxth	r3, r3
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	b29b      	uxth	r3, r3
 800441a:	b21d      	sxth	r5, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	b29b      	uxth	r3, r3
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	b29b      	uxth	r3, r3
 8004428:	b21e      	sxth	r6, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	b29b      	uxth	r3, r3
 8004432:	4413      	add	r3, r2
 8004434:	b29b      	uxth	r3, r3
 8004436:	fa0f fc83 	sxth.w	ip, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	b29b      	uxth	r3, r3
 8004442:	4413      	add	r3, r2
 8004444:	b29b      	uxth	r3, r3
 8004446:	b21b      	sxth	r3, r3
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	b291      	uxth	r1, r2
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	b292      	uxth	r2, r2
 8004450:	440a      	add	r2, r1
 8004452:	b292      	uxth	r2, r2
 8004454:	b212      	sxth	r2, r2
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	00c9      	lsls	r1, r1, #3
 800445a:	b209      	sxth	r1, r1
 800445c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8004460:	b208      	sxth	r0, r1
 8004462:	68f9      	ldr	r1, [r7, #12]
 8004464:	10c9      	asrs	r1, r1, #3
 8004466:	b209      	sxth	r1, r1
 8004468:	f001 011f 	and.w	r1, r1, #31
 800446c:	b209      	sxth	r1, r1
 800446e:	4301      	orrs	r1, r0
 8004470:	b209      	sxth	r1, r1
 8004472:	b289      	uxth	r1, r1
 8004474:	9102      	str	r1, [sp, #8]
 8004476:	9201      	str	r2, [sp, #4]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	4663      	mov	r3, ip
 800447c:	4632      	mov	r2, r6
 800447e:	4629      	mov	r1, r5
 8004480:	4620      	mov	r0, r4
 8004482:	f7ff f9b8 	bl	80037f6 <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	b21c      	sxth	r4, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	b29b      	uxth	r3, r3
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	b29b      	uxth	r3, r3
 8004496:	b21d      	sxth	r5, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	b21e      	sxth	r6, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	fa0f fc83 	sxth.w	ip, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	4413      	add	r3, r2
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	b21a      	sxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	b299      	uxth	r1, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	440b      	add	r3, r1
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	b219      	sxth	r1, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	021b      	lsls	r3, r3, #8
 80044d6:	b21b      	sxth	r3, r3
 80044d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044dc:	f023 0307 	bic.w	r3, r3, #7
 80044e0:	b218      	sxth	r0, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	b21b      	sxth	r3, r3
 80044e8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80044ec:	b21b      	sxth	r3, r3
 80044ee:	4303      	orrs	r3, r0
 80044f0:	b21b      	sxth	r3, r3
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	9302      	str	r3, [sp, #8]
 80044f6:	9101      	str	r1, [sp, #4]
 80044f8:	9200      	str	r2, [sp, #0]
 80044fa:	4663      	mov	r3, ip
 80044fc:	4632      	mov	r2, r6
 80044fe:	4629      	mov	r1, r5
 8004500:	4620      	mov	r0, r4
 8004502:	f7ff f93e 	bl	8003782 <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3b05      	subs	r3, #5
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b0a      	cmp	r3, #10
 8004510:	f73f af7b 	bgt.w	800440a <testFilledTriangles+0x3e>
    }
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800451e:	bf00      	nop
 8004520:	20005272 	.word	0x20005272
 8004524:	20005274 	.word	0x20005274

08004528 <testRoundRects>:





void testRoundRects() {
 8004528:	b5b0      	push	{r4, r5, r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 800452e:	4b33      	ldr	r3, [pc, #204]	; (80045fc <testRoundRects+0xd4>)
 8004530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004534:	0fda      	lsrs	r2, r3, #31
 8004536:	4413      	add	r3, r2
 8004538:	105b      	asrs	r3, r3, #1
 800453a:	b21b      	sxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8004540:	4b2f      	ldr	r3, [pc, #188]	; (8004600 <testRoundRects+0xd8>)
 8004542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004546:	0fda      	lsrs	r2, r3, #31
 8004548:	4413      	add	r3, r2
 800454a:	105b      	asrs	r3, r3, #1
 800454c:	b21b      	sxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8004552:	2000      	movs	r0, #0
 8004554:	f7fe fdb8 	bl	80030c8 <Displ_CLS>
    w     = min(_width, _height);
 8004558:	4b29      	ldr	r3, [pc, #164]	; (8004600 <testRoundRects+0xd8>)
 800455a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800455e:	4b27      	ldr	r3, [pc, #156]	; (80045fc <testRoundRects+0xd4>)
 8004560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004564:	4293      	cmp	r3, r2
 8004566:	bfa8      	it	ge
 8004568:	4613      	movge	r3, r2
 800456a:	b21b      	sxth	r3, r3
 800456c:	60fb      	str	r3, [r7, #12]
    red = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8004572:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	fb92 f3f3 	sdiv	r3, r2, r3
 800457c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	e031      	b.n	80045e8 <testRoundRects+0xc0>
        i2 = i / 2;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	0fda      	lsrs	r2, r3, #31
 8004588:	4413      	add	r3, r2
 800458a:	105b      	asrs	r3, r3, #1
 800458c:	607b      	str	r3, [r7, #4]
        red += step;
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4413      	add	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	b29a      	uxth	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	b29b      	uxth	r3, r3
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	b218      	sxth	r0, r3
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	b219      	sxth	r1, r3
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	b21c      	sxth	r4, r3
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	b21d      	sxth	r5, r3
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	da00      	bge.n	80045c2 <testRoundRects+0x9a>
 80045c0:	3307      	adds	r3, #7
 80045c2:	10db      	asrs	r3, r3, #3
 80045c4:	b21a      	sxth	r2, r3
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045d0:	f023 0307 	bic.w	r3, r3, #7
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	9200      	str	r2, [sp, #0]
 80045da:	462b      	mov	r3, r5
 80045dc:	4622      	mov	r2, r4
 80045de:	f7ff fa66 	bl	8003aae <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3306      	adds	r3, #6
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	dbc9      	blt.n	8004584 <testRoundRects+0x5c>
    }
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bdb0      	pop	{r4, r5, r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20005272 	.word	0x20005272
 8004600:	20005274 	.word	0x20005274

08004604 <testFilledRoundRects>:





void testFilledRoundRects() {
 8004604:	b5b0      	push	{r4, r5, r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 800460a:	4b36      	ldr	r3, [pc, #216]	; (80046e4 <testFilledRoundRects+0xe0>)
 800460c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004610:	0fda      	lsrs	r2, r3, #31
 8004612:	4413      	add	r3, r2
 8004614:	105b      	asrs	r3, r3, #1
 8004616:	b21b      	sxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 800461c:	4b32      	ldr	r3, [pc, #200]	; (80046e8 <testFilledRoundRects+0xe4>)
 800461e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004622:	0fda      	lsrs	r2, r3, #31
 8004624:	4413      	add	r3, r2
 8004626:	105b      	asrs	r3, r3, #1
 8004628:	b21b      	sxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 800462e:	2000      	movs	r0, #0
 8004630:	f7fe fd4a 	bl	80030c8 <Displ_CLS>
    green = 256;
 8004634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004638:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 800463a:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <testFilledRoundRects+0xe4>)
 800463c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <testFilledRoundRects+0xe0>)
 8004642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004646:	4293      	cmp	r3, r2
 8004648:	bfa8      	it	ge
 800464a:	4613      	movge	r3, r2
 800464c:	b21b      	sxth	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004654:	fb93 f3f2 	sdiv	r3, r3, r2
 8004658:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 800465a:	4b23      	ldr	r3, [pc, #140]	; (80046e8 <testFilledRoundRects+0xe4>)
 800465c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004660:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <testFilledRoundRects+0xe0>)
 8004662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004666:	4293      	cmp	r3, r2
 8004668:	bfa8      	it	ge
 800466a:	4613      	movge	r3, r2
 800466c:	b21b      	sxth	r3, r3
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	e02f      	b.n	80046d2 <testFilledRoundRects+0xce>
        i2 = i / 2;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	0fda      	lsrs	r2, r3, #31
 8004676:	4413      	add	r3, r2
 8004678:	105b      	asrs	r3, r3, #1
 800467a:	603b      	str	r3, [r7, #0]
        green -= step;
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	b29a      	uxth	r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	b29b      	uxth	r3, r3
 8004690:	b218      	sxth	r0, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	b29a      	uxth	r2, r3
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	b29b      	uxth	r3, r3
 800469e:	b219      	sxth	r1, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	b21c      	sxth	r4, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	b21d      	sxth	r5, r3
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	da00      	bge.n	80046b0 <testFilledRoundRects+0xac>
 80046ae:	3307      	adds	r3, #7
 80046b0:	10db      	asrs	r3, r3, #3
 80046b2:	b21b      	sxth	r3, r3
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	00d2      	lsls	r2, r2, #3
 80046b8:	b292      	uxth	r2, r2
 80046ba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80046be:	b292      	uxth	r2, r2
 80046c0:	9201      	str	r2, [sp, #4]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	462b      	mov	r3, r5
 80046c6:	4622      	mov	r2, r4
 80046c8:	f7ff fae6 	bl	8003c98 <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	3b06      	subs	r3, #6
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b14      	cmp	r3, #20
 80046d6:	dccc      	bgt.n	8004672 <testFilledRoundRects+0x6e>
    }
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bdb0      	pop	{r4, r5, r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20005272 	.word	0x20005272
 80046e8:	20005274 	.word	0x20005274

080046ec <testFillScreen>:




void testFillScreen()
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 80046f0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80046f4:	f7fe fce8 	bl	80030c8 <Displ_CLS>
	Displ_CLS(GREEN);
 80046f8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80046fc:	f7fe fce4 	bl	80030c8 <Displ_CLS>
	Displ_CLS(BLUE);
 8004700:	201f      	movs	r0, #31
 8004702:	f7fe fce1 	bl	80030c8 <Displ_CLS>
	Displ_CLS(YELLOW);
 8004706:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800470a:	f7fe fcdd 	bl	80030c8 <Displ_CLS>
	Displ_CLS(BLACK);
 800470e:	2000      	movs	r0, #0
 8004710:	f7fe fcda 	bl	80030c8 <Displ_CLS>
}
 8004714:	bf00      	nop
 8004716:	bd80      	pop	{r7, pc}

08004718 <Displ_TestAll>:





void Displ_TestAll (){
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
	testFillScreen();
 800471c:	f7ff ffe6 	bl	80046ec <testFillScreen>
	testLines(CYAN);
 8004720:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8004724:	f7ff fb5c 	bl	8003de0 <testLines>
	testFastLines(RED, BLUE);
 8004728:	211f      	movs	r1, #31
 800472a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800472e:	f7ff fc59 	bl	8003fe4 <testFastLines>
	testRects(GREEN);
 8004732:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8004736:	f7ff fca3 	bl	8004080 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 800473a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 800473e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8004742:	f7ff fcf1 	bl	8004128 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8004746:	f64f 011f 	movw	r1, #63519	; 0xf81f
 800474a:	200a      	movs	r0, #10
 800474c:	f7ff fd5a 	bl	8004204 <testFilledCircles>
	testCircles(10, WHITE);
 8004750:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004754:	200a      	movs	r0, #10
 8004756:	f7ff fd93 	bl	8004280 <testCircles>
	testTriangles();
 800475a:	f7ff fdd3 	bl	8004304 <testTriangles>
	testFilledTriangles();
 800475e:	f7ff fe35 	bl	80043cc <testFilledTriangles>
	testRoundRects();
 8004762:	f7ff fee1 	bl	8004528 <testRoundRects>
	testFilledRoundRects();
 8004766:	f7ff ff4d 	bl	8004604 <testFilledRoundRects>
}
 800476a:	bf00      	nop
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004774:	480d      	ldr	r0, [pc, #52]	; (80047ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004776:	490e      	ldr	r1, [pc, #56]	; (80047b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004778:	4a0e      	ldr	r2, [pc, #56]	; (80047b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800477a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800477c:	e002      	b.n	8004784 <LoopCopyDataInit>

0800477e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800477e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004782:	3304      	adds	r3, #4

08004784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004788:	d3f9      	bcc.n	800477e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800478a:	4a0b      	ldr	r2, [pc, #44]	; (80047b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800478c:	4c0b      	ldr	r4, [pc, #44]	; (80047bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800478e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004790:	e001      	b.n	8004796 <LoopFillZerobss>

08004792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004794:	3204      	adds	r2, #4

08004796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004798:	d3fb      	bcc.n	8004792 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800479a:	f7fe f8b5 	bl	8002908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800479e:	f004 fd17 	bl	80091d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047a2:	f7fc ffcd 	bl	8001740 <main>
  bx  lr    
 80047a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80047a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047b0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80047b4:	0800a55c 	.word	0x0800a55c
  ldr r2, =_sbss
 80047b8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80047bc:	20005bd0 	.word	0x20005bd0

080047c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047c0:	e7fe      	b.n	80047c0 <ADC_IRQHandler>
	...

080047c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047c8:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <HAL_Init+0x40>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a0d      	ldr	r2, [pc, #52]	; (8004804 <HAL_Init+0x40>)
 80047ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_Init+0x40>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <HAL_Init+0x40>)
 80047da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047e0:	4b08      	ldr	r3, [pc, #32]	; (8004804 <HAL_Init+0x40>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a07      	ldr	r2, [pc, #28]	; (8004804 <HAL_Init+0x40>)
 80047e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047ec:	2003      	movs	r0, #3
 80047ee:	f000 fd53 	bl	8005298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047f2:	2000      	movs	r0, #0
 80047f4:	f000 f808 	bl	8004808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047f8:	f7fd fd1a 	bl	8002230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40023c00 	.word	0x40023c00

08004808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004810:	4b12      	ldr	r3, [pc, #72]	; (800485c <HAL_InitTick+0x54>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4b12      	ldr	r3, [pc, #72]	; (8004860 <HAL_InitTick+0x58>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	4619      	mov	r1, r3
 800481a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800481e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004822:	fbb2 f3f3 	udiv	r3, r2, r3
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fd6b 	bl	8005302 <HAL_SYSTICK_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e00e      	b.n	8004854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b0f      	cmp	r3, #15
 800483a:	d80a      	bhi.n	8004852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800483c:	2200      	movs	r2, #0
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004844:	f000 fd33 	bl	80052ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004848:	4a06      	ldr	r2, [pc, #24]	; (8004864 <HAL_InitTick+0x5c>)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	e000      	b.n	8004854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20000014 	.word	0x20000014
 8004860:	20000024 	.word	0x20000024
 8004864:	20000020 	.word	0x20000020

08004868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800486c:	4b06      	ldr	r3, [pc, #24]	; (8004888 <HAL_IncTick+0x20>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_IncTick+0x24>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4413      	add	r3, r2
 8004878:	4a04      	ldr	r2, [pc, #16]	; (800488c <HAL_IncTick+0x24>)
 800487a:	6013      	str	r3, [r2, #0]
}
 800487c:	bf00      	nop
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000024 	.word	0x20000024
 800488c:	20005a80 	.word	0x20005a80

08004890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return uwTick;
 8004894:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <HAL_GetTick+0x14>)
 8004896:	681b      	ldr	r3, [r3, #0]
}
 8004898:	4618      	mov	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20005a80 	.word	0x20005a80

080048a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048b0:	f7ff ffee 	bl	8004890 <HAL_GetTick>
 80048b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048c0:	d005      	beq.n	80048ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048c2:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <HAL_Delay+0x44>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048ce:	bf00      	nop
 80048d0:	f7ff ffde 	bl	8004890 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d8f7      	bhi.n	80048d0 <HAL_Delay+0x28>
  {
  }
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000024 	.word	0x20000024

080048f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e033      	b.n	800496e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fd fcb6 	bl	8002280 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b00      	cmp	r3, #0
 800492c:	d118      	bne.n	8004960 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004936:	f023 0302 	bic.w	r3, r3, #2
 800493a:	f043 0202 	orr.w	r2, r3, #2
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa5a 	bl	8004dfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	f043 0201 	orr.w	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	641a      	str	r2, [r3, #64]	; 0x40
 800495e:	e001      	b.n	8004964 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800496c:	7bfb      	ldrb	r3, [r7, #15]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_ADC_Start_DMA+0x1e>
 8004992:	2302      	movs	r3, #2
 8004994:	e0e9      	b.n	8004b6a <HAL_ADC_Start_DMA+0x1f2>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d018      	beq.n	80049de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80049bc:	4b6d      	ldr	r3, [pc, #436]	; (8004b74 <HAL_ADC_Start_DMA+0x1fc>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a6d      	ldr	r2, [pc, #436]	; (8004b78 <HAL_ADC_Start_DMA+0x200>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	0c9a      	lsrs	r2, r3, #18
 80049c8:	4613      	mov	r3, r2
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	4413      	add	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80049d0:	e002      	b.n	80049d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f9      	bne.n	80049d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ec:	d107      	bne.n	80049fe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	f040 80a1 	bne.w	8004b50 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d007      	beq.n	8004a40 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4c:	d106      	bne.n	8004a5c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a52:	f023 0206 	bic.w	r2, r3, #6
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	645a      	str	r2, [r3, #68]	; 0x44
 8004a5a:	e002      	b.n	8004a62 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a6a:	4b44      	ldr	r3, [pc, #272]	; (8004b7c <HAL_ADC_Start_DMA+0x204>)
 8004a6c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	4a43      	ldr	r2, [pc, #268]	; (8004b80 <HAL_ADC_Start_DMA+0x208>)
 8004a74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	4a42      	ldr	r2, [pc, #264]	; (8004b84 <HAL_ADC_Start_DMA+0x20c>)
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	4a41      	ldr	r2, [pc, #260]	; (8004b88 <HAL_ADC_Start_DMA+0x210>)
 8004a84:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004a8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004a9e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	334c      	adds	r3, #76	; 0x4c
 8004aba:	4619      	mov	r1, r3
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f000 fcda 	bl	8005478 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d12a      	bne.n	8004b26 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a2d      	ldr	r2, [pc, #180]	; (8004b8c <HAL_ADC_Start_DMA+0x214>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d015      	beq.n	8004b06 <HAL_ADC_Start_DMA+0x18e>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a2c      	ldr	r2, [pc, #176]	; (8004b90 <HAL_ADC_Start_DMA+0x218>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d105      	bne.n	8004af0 <HAL_ADC_Start_DMA+0x178>
 8004ae4:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <HAL_ADC_Start_DMA+0x204>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a27      	ldr	r2, [pc, #156]	; (8004b94 <HAL_ADC_Start_DMA+0x21c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d136      	bne.n	8004b68 <HAL_ADC_Start_DMA+0x1f0>
 8004afa:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <HAL_ADC_Start_DMA+0x204>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d130      	bne.n	8004b68 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d129      	bne.n	8004b68 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	e020      	b.n	8004b68 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a18      	ldr	r2, [pc, #96]	; (8004b8c <HAL_ADC_Start_DMA+0x214>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d11b      	bne.n	8004b68 <HAL_ADC_Start_DMA+0x1f0>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d114      	bne.n	8004b68 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b4c:	609a      	str	r2, [r3, #8]
 8004b4e:	e00b      	b.n	8004b68 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	f043 0210 	orr.w	r2, r3, #16
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b60:	f043 0201 	orr.w	r2, r3, #1
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000014 	.word	0x20000014
 8004b78:	431bde83 	.word	0x431bde83
 8004b7c:	40012300 	.word	0x40012300
 8004b80:	08004ff5 	.word	0x08004ff5
 8004b84:	080050af 	.word	0x080050af
 8004b88:	080050cb 	.word	0x080050cb
 8004b8c:	40012000 	.word	0x40012000
 8004b90:	40012100 	.word	0x40012100
 8004b94:	40012200 	.word	0x40012200

08004b98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x1c>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e113      	b.n	8004ddc <HAL_ADC_ConfigChannel+0x244>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b09      	cmp	r3, #9
 8004bc2:	d925      	bls.n	8004c10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68d9      	ldr	r1, [r3, #12]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3b1e      	subs	r3, #30
 8004bda:	2207      	movs	r2, #7
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43da      	mvns	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	400a      	ands	r2, r1
 8004be8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68d9      	ldr	r1, [r3, #12]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	4403      	add	r3, r0
 8004c02:	3b1e      	subs	r3, #30
 8004c04:	409a      	lsls	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	60da      	str	r2, [r3, #12]
 8004c0e:	e022      	b.n	8004c56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6919      	ldr	r1, [r3, #16]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4613      	mov	r3, r2
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	4413      	add	r3, r2
 8004c24:	2207      	movs	r2, #7
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	43da      	mvns	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	400a      	ands	r2, r1
 8004c32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6919      	ldr	r1, [r3, #16]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	4618      	mov	r0, r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	4403      	add	r3, r0
 8004c4c:	409a      	lsls	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b06      	cmp	r3, #6
 8004c5c:	d824      	bhi.n	8004ca8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	3b05      	subs	r3, #5
 8004c70:	221f      	movs	r2, #31
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43da      	mvns	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	3b05      	subs	r3, #5
 8004c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ca6:	e04c      	b.n	8004d42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b0c      	cmp	r3, #12
 8004cae:	d824      	bhi.n	8004cfa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3b23      	subs	r3, #35	; 0x23
 8004cc2:	221f      	movs	r2, #31
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43da      	mvns	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	400a      	ands	r2, r1
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	4618      	mov	r0, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	3b23      	subs	r3, #35	; 0x23
 8004cec:	fa00 f203 	lsl.w	r2, r0, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8004cf8:	e023      	b.n	8004d42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	3b41      	subs	r3, #65	; 0x41
 8004d0c:	221f      	movs	r2, #31
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43da      	mvns	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	400a      	ands	r2, r1
 8004d1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	4618      	mov	r0, r3
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	3b41      	subs	r3, #65	; 0x41
 8004d36:	fa00 f203 	lsl.w	r2, r0, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d42:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <HAL_ADC_ConfigChannel+0x250>)
 8004d44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a28      	ldr	r2, [pc, #160]	; (8004dec <HAL_ADC_ConfigChannel+0x254>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d10f      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x1d8>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b12      	cmp	r3, #18
 8004d56:	d10b      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <HAL_ADC_ConfigChannel+0x254>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d12b      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x23a>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1c      	ldr	r2, [pc, #112]	; (8004df0 <HAL_ADC_ConfigChannel+0x258>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <HAL_ADC_ConfigChannel+0x1f4>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b11      	cmp	r3, #17
 8004d8a:	d122      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a11      	ldr	r2, [pc, #68]	; (8004df0 <HAL_ADC_ConfigChannel+0x258>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d111      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004dae:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <HAL_ADC_ConfigChannel+0x25c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a11      	ldr	r2, [pc, #68]	; (8004df8 <HAL_ADC_ConfigChannel+0x260>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	0c9a      	lsrs	r2, r3, #18
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004dc4:	e002      	b.n	8004dcc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f9      	bne.n	8004dc6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	40012300 	.word	0x40012300
 8004dec:	40012000 	.word	0x40012000
 8004df0:	10000012 	.word	0x10000012
 8004df4:	20000014 	.word	0x20000014
 8004df8:	431bde83 	.word	0x431bde83

08004dfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e04:	4b79      	ldr	r3, [pc, #484]	; (8004fec <ADC_Init+0x1f0>)
 8004e06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6859      	ldr	r1, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	021a      	lsls	r2, r3, #8
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004e54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6859      	ldr	r1, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6899      	ldr	r1, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	4a58      	ldr	r2, [pc, #352]	; (8004ff0 <ADC_Init+0x1f4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d022      	beq.n	8004eda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ea2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6899      	ldr	r1, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ec4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6899      	ldr	r1, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	609a      	str	r2, [r3, #8]
 8004ed8:	e00f      	b.n	8004efa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ee8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ef8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0202 	bic.w	r2, r2, #2
 8004f08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6899      	ldr	r1, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	7e1b      	ldrb	r3, [r3, #24]
 8004f14:	005a      	lsls	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01b      	beq.n	8004f60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004f46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6859      	ldr	r1, [r3, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	3b01      	subs	r3, #1
 8004f54:	035a      	lsls	r2, r3, #13
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	e007      	b.n	8004f70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	051a      	lsls	r2, r3, #20
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6899      	ldr	r1, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fb2:	025a      	lsls	r2, r3, #9
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6899      	ldr	r1, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	029a      	lsls	r2, r3, #10
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	609a      	str	r2, [r3, #8]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40012300 	.word	0x40012300
 8004ff0:	0f000001 	.word	0x0f000001

08004ff4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800500a:	2b00      	cmp	r3, #0
 800500c:	d13c      	bne.n	8005088 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d12b      	bne.n	8005080 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800502c:	2b00      	cmp	r3, #0
 800502e:	d127      	bne.n	8005080 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800503a:	2b00      	cmp	r3, #0
 800503c:	d006      	beq.n	800504c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005048:	2b00      	cmp	r3, #0
 800504a:	d119      	bne.n	8005080 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0220 	bic.w	r2, r2, #32
 800505a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d105      	bne.n	8005080 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	f043 0201 	orr.w	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7fc ffef 	bl	8002064 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005086:	e00e      	b.n	80050a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f7fd f825 	bl	80020e4 <HAL_ADC_ErrorCallback>
}
 800509a:	e004      	b.n	80050a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7fc fff1 	bl	80020a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2240      	movs	r2, #64	; 0x40
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e2:	f043 0204 	orr.w	r2, r3, #4
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7fc fffa 	bl	80020e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <__NVIC_SetPriorityGrouping+0x44>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005114:	4013      	ands	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800512a:	4a04      	ldr	r2, [pc, #16]	; (800513c <__NVIC_SetPriorityGrouping+0x44>)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	60d3      	str	r3, [r2, #12]
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	e000ed00 	.word	0xe000ed00

08005140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <__NVIC_GetPriorityGrouping+0x18>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	0a1b      	lsrs	r3, r3, #8
 800514a:	f003 0307 	and.w	r3, r3, #7
}
 800514e:	4618      	mov	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516a:	2b00      	cmp	r3, #0
 800516c:	db0b      	blt.n	8005186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	f003 021f 	and.w	r2, r3, #31
 8005174:	4907      	ldr	r1, [pc, #28]	; (8005194 <__NVIC_EnableIRQ+0x38>)
 8005176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2001      	movs	r0, #1
 800517e:	fa00 f202 	lsl.w	r2, r0, r2
 8005182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	e000e100 	.word	0xe000e100

08005198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	6039      	str	r1, [r7, #0]
 80051a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	db0a      	blt.n	80051c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	490c      	ldr	r1, [pc, #48]	; (80051e4 <__NVIC_SetPriority+0x4c>)
 80051b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b6:	0112      	lsls	r2, r2, #4
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	440b      	add	r3, r1
 80051bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051c0:	e00a      	b.n	80051d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	4908      	ldr	r1, [pc, #32]	; (80051e8 <__NVIC_SetPriority+0x50>)
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	3b04      	subs	r3, #4
 80051d0:	0112      	lsls	r2, r2, #4
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	440b      	add	r3, r1
 80051d6:	761a      	strb	r2, [r3, #24]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	e000e100 	.word	0xe000e100
 80051e8:	e000ed00 	.word	0xe000ed00

080051ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b089      	sub	sp, #36	; 0x24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f1c3 0307 	rsb	r3, r3, #7
 8005206:	2b04      	cmp	r3, #4
 8005208:	bf28      	it	cs
 800520a:	2304      	movcs	r3, #4
 800520c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3304      	adds	r3, #4
 8005212:	2b06      	cmp	r3, #6
 8005214:	d902      	bls.n	800521c <NVIC_EncodePriority+0x30>
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3b03      	subs	r3, #3
 800521a:	e000      	b.n	800521e <NVIC_EncodePriority+0x32>
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	43da      	mvns	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	401a      	ands	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005234:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	fa01 f303 	lsl.w	r3, r1, r3
 800523e:	43d9      	mvns	r1, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005244:	4313      	orrs	r3, r2
         );
}
 8005246:	4618      	mov	r0, r3
 8005248:	3724      	adds	r7, #36	; 0x24
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3b01      	subs	r3, #1
 8005260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005264:	d301      	bcc.n	800526a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005266:	2301      	movs	r3, #1
 8005268:	e00f      	b.n	800528a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800526a:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <SysTick_Config+0x40>)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3b01      	subs	r3, #1
 8005270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005272:	210f      	movs	r1, #15
 8005274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005278:	f7ff ff8e 	bl	8005198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <SysTick_Config+0x40>)
 800527e:	2200      	movs	r2, #0
 8005280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005282:	4b04      	ldr	r3, [pc, #16]	; (8005294 <SysTick_Config+0x40>)
 8005284:	2207      	movs	r2, #7
 8005286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	e000e010 	.word	0xe000e010

08005298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff ff29 	bl	80050f8 <__NVIC_SetPriorityGrouping>
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	4603      	mov	r3, r0
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052c0:	f7ff ff3e 	bl	8005140 <__NVIC_GetPriorityGrouping>
 80052c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	6978      	ldr	r0, [r7, #20]
 80052cc:	f7ff ff8e 	bl	80051ec <NVIC_EncodePriority>
 80052d0:	4602      	mov	r2, r0
 80052d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d6:	4611      	mov	r1, r2
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff ff5d 	bl	8005198 <__NVIC_SetPriority>
}
 80052de:	bf00      	nop
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	4603      	mov	r3, r0
 80052ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff ff31 	bl	800515c <__NVIC_EnableIRQ>
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff ffa2 	bl	8005254 <SysTick_Config>
 8005310:	4603      	mov	r3, r0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005328:	f7ff fab2 	bl	8004890 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e099      	b.n	800546c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0201 	bic.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005358:	e00f      	b.n	800537a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800535a:	f7ff fa99 	bl	8004890 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b05      	cmp	r3, #5
 8005366:	d908      	bls.n	800537a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2203      	movs	r2, #3
 8005372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e078      	b.n	800546c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e8      	bne.n	800535a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4b38      	ldr	r3, [pc, #224]	; (8005474 <HAL_DMA_Init+0x158>)
 8005394:	4013      	ands	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d107      	bne.n	80053e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	4313      	orrs	r3, r2
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f023 0307 	bic.w	r3, r3, #7
 80053fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	2b04      	cmp	r3, #4
 800540c:	d117      	bne.n	800543e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00e      	beq.n	800543e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fb01 	bl	8005a28 <DMA_CheckFifoParam>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2240      	movs	r2, #64	; 0x40
 8005430:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800543a:	2301      	movs	r3, #1
 800543c:	e016      	b.n	800546c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fab8 	bl	80059bc <DMA_CalcBaseAndBitshift>
 800544c:	4603      	mov	r3, r0
 800544e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005454:	223f      	movs	r2, #63	; 0x3f
 8005456:	409a      	lsls	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	f010803f 	.word	0xf010803f

08005478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_DMA_Start_IT+0x26>
 800549a:	2302      	movs	r3, #2
 800549c:	e040      	b.n	8005520 <HAL_DMA_Start_IT+0xa8>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d12f      	bne.n	8005512 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2202      	movs	r2, #2
 80054b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fa4a 	bl	8005960 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d0:	223f      	movs	r2, #63	; 0x3f
 80054d2:	409a      	lsls	r2, r3
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0216 	orr.w	r2, r2, #22
 80054e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0208 	orr.w	r2, r2, #8
 80054fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	e005      	b.n	800551e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800551a:	2302      	movs	r3, #2
 800551c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800551e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005534:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005536:	f7ff f9ab 	bl	8004890 <HAL_GetTick>
 800553a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d008      	beq.n	800555a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2280      	movs	r2, #128	; 0x80
 800554c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e052      	b.n	8005600 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0216 	bic.w	r2, r2, #22
 8005568:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005578:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <HAL_DMA_Abort+0x62>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005586:	2b00      	cmp	r3, #0
 8005588:	d007      	beq.n	800559a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0208 	bic.w	r2, r2, #8
 8005598:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055aa:	e013      	b.n	80055d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055ac:	f7ff f970 	bl	8004890 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b05      	cmp	r3, #5
 80055b8:	d90c      	bls.n	80055d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2203      	movs	r2, #3
 80055c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e015      	b.n	8005600 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e4      	bne.n	80055ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e6:	223f      	movs	r2, #63	; 0x3f
 80055e8:	409a      	lsls	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d004      	beq.n	8005626 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2280      	movs	r2, #128	; 0x80
 8005620:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e00c      	b.n	8005640 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2205      	movs	r2, #5
 800562a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005658:	4b8e      	ldr	r3, [pc, #568]	; (8005894 <HAL_DMA_IRQHandler+0x248>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a8e      	ldr	r2, [pc, #568]	; (8005898 <HAL_DMA_IRQHandler+0x24c>)
 800565e:	fba2 2303 	umull	r2, r3, r2, r3
 8005662:	0a9b      	lsrs	r3, r3, #10
 8005664:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005676:	2208      	movs	r2, #8
 8005678:	409a      	lsls	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4013      	ands	r3, r2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d01a      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d013      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0204 	bic.w	r2, r2, #4
 800569e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a4:	2208      	movs	r2, #8
 80056a6:	409a      	lsls	r2, r3
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b0:	f043 0201 	orr.w	r2, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056bc:	2201      	movs	r2, #1
 80056be:	409a      	lsls	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4013      	ands	r3, r2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d012      	beq.n	80056ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056da:	2201      	movs	r2, #1
 80056dc:	409a      	lsls	r2, r3
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e6:	f043 0202 	orr.w	r2, r3, #2
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f2:	2204      	movs	r2, #4
 80056f4:	409a      	lsls	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d012      	beq.n	8005724 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00b      	beq.n	8005724 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005710:	2204      	movs	r2, #4
 8005712:	409a      	lsls	r2, r3
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571c:	f043 0204 	orr.w	r2, r3, #4
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005728:	2210      	movs	r2, #16
 800572a:	409a      	lsls	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d043      	beq.n	80057bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d03c      	beq.n	80057bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005746:	2210      	movs	r2, #16
 8005748:	409a      	lsls	r2, r3
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d018      	beq.n	800578e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d108      	bne.n	800577c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d024      	beq.n	80057bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	4798      	blx	r3
 800577a:	e01f      	b.n	80057bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01b      	beq.n	80057bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
 800578c:	e016      	b.n	80057bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	d107      	bne.n	80057ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0208 	bic.w	r2, r2, #8
 80057aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c0:	2220      	movs	r2, #32
 80057c2:	409a      	lsls	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4013      	ands	r3, r2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 808f 	beq.w	80058ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0310 	and.w	r3, r3, #16
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8087 	beq.w	80058ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e2:	2220      	movs	r2, #32
 80057e4:	409a      	lsls	r2, r3
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b05      	cmp	r3, #5
 80057f4:	d136      	bne.n	8005864 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0216 	bic.w	r2, r2, #22
 8005804:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695a      	ldr	r2, [r3, #20]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005814:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d103      	bne.n	8005826 <HAL_DMA_IRQHandler+0x1da>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0208 	bic.w	r2, r2, #8
 8005834:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583a:	223f      	movs	r2, #63	; 0x3f
 800583c:	409a      	lsls	r2, r3
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005856:	2b00      	cmp	r3, #0
 8005858:	d07e      	beq.n	8005958 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	4798      	blx	r3
        }
        return;
 8005862:	e079      	b.n	8005958 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01d      	beq.n	80058ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10d      	bne.n	800589c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005884:	2b00      	cmp	r3, #0
 8005886:	d031      	beq.n	80058ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	4798      	blx	r3
 8005890:	e02c      	b.n	80058ec <HAL_DMA_IRQHandler+0x2a0>
 8005892:	bf00      	nop
 8005894:	20000014 	.word	0x20000014
 8005898:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d023      	beq.n	80058ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	4798      	blx	r3
 80058ac:	e01e      	b.n	80058ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10f      	bne.n	80058dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0210 	bic.w	r2, r2, #16
 80058ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d032      	beq.n	800595a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d022      	beq.n	8005946 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2205      	movs	r2, #5
 8005904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	3301      	adds	r3, #1
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	429a      	cmp	r2, r3
 8005922:	d307      	bcc.n	8005934 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1f2      	bne.n	8005918 <HAL_DMA_IRQHandler+0x2cc>
 8005932:	e000      	b.n	8005936 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005934:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d005      	beq.n	800595a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
 8005956:	e000      	b.n	800595a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005958:	bf00      	nop
    }
  }
}
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800597c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d108      	bne.n	80059a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800599e:	e007      	b.n	80059b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	60da      	str	r2, [r3, #12]
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	3b10      	subs	r3, #16
 80059cc:	4a14      	ldr	r2, [pc, #80]	; (8005a20 <DMA_CalcBaseAndBitshift+0x64>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	091b      	lsrs	r3, r3, #4
 80059d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059d6:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <DMA_CalcBaseAndBitshift+0x68>)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d909      	bls.n	80059fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059f2:	f023 0303 	bic.w	r3, r3, #3
 80059f6:	1d1a      	adds	r2, r3, #4
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	659a      	str	r2, [r3, #88]	; 0x58
 80059fc:	e007      	b.n	8005a0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a06:	f023 0303 	bic.w	r3, r3, #3
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	aaaaaaab 	.word	0xaaaaaaab
 8005a24:	0800a510 	.word	0x0800a510

08005a28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d11f      	bne.n	8005a82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d856      	bhi.n	8005af6 <DMA_CheckFifoParam+0xce>
 8005a48:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <DMA_CheckFifoParam+0x28>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005a61 	.word	0x08005a61
 8005a54:	08005a73 	.word	0x08005a73
 8005a58:	08005a61 	.word	0x08005a61
 8005a5c:	08005af7 	.word	0x08005af7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d046      	beq.n	8005afa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a70:	e043      	b.n	8005afa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a7a:	d140      	bne.n	8005afe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a80:	e03d      	b.n	8005afe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a8a:	d121      	bne.n	8005ad0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d837      	bhi.n	8005b02 <DMA_CheckFifoParam+0xda>
 8005a92:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <DMA_CheckFifoParam+0x70>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005aa9 	.word	0x08005aa9
 8005a9c:	08005aaf 	.word	0x08005aaf
 8005aa0:	08005aa9 	.word	0x08005aa9
 8005aa4:	08005ac1 	.word	0x08005ac1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8005aac:	e030      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d025      	beq.n	8005b06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005abe:	e022      	b.n	8005b06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ac8:	d11f      	bne.n	8005b0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ace:	e01c      	b.n	8005b0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d903      	bls.n	8005ade <DMA_CheckFifoParam+0xb6>
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d003      	beq.n	8005ae4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005adc:	e018      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae2:	e015      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00e      	beq.n	8005b0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]
      break;
 8005af4:	e00b      	b.n	8005b0e <DMA_CheckFifoParam+0xe6>
      break;
 8005af6:	bf00      	nop
 8005af8:	e00a      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      break;
 8005afa:	bf00      	nop
 8005afc:	e008      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      break;
 8005afe:	bf00      	nop
 8005b00:	e006      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      break;
 8005b02:	bf00      	nop
 8005b04:	e004      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      break;
 8005b06:	bf00      	nop
 8005b08:	e002      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b0a:	bf00      	nop
 8005b0c:	e000      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
      break;
 8005b0e:	bf00      	nop
    }
  } 
  
  return status; 
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop

08005b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b089      	sub	sp, #36	; 0x24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	e165      	b.n	8005e08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	fa02 f303 	lsl.w	r3, r2, r3
 8005b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	f040 8154 	bne.w	8005e02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d005      	beq.n	8005b72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d130      	bne.n	8005bd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	2203      	movs	r2, #3
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	43db      	mvns	r3, r3
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	4013      	ands	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	fa02 f303 	lsl.w	r3, r2, r3
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ba8:	2201      	movs	r2, #1
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	f003 0201 	and.w	r2, r3, #1
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d017      	beq.n	8005c10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	2203      	movs	r2, #3
 8005bec:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	fa02 f303 	lsl.w	r3, r2, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f003 0303 	and.w	r3, r3, #3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d123      	bne.n	8005c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	08da      	lsrs	r2, r3, #3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3208      	adds	r2, #8
 8005c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	220f      	movs	r2, #15
 8005c34:	fa02 f303 	lsl.w	r3, r2, r3
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	08da      	lsrs	r2, r3, #3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3208      	adds	r2, #8
 8005c5e:	69b9      	ldr	r1, [r7, #24]
 8005c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	2203      	movs	r2, #3
 8005c70:	fa02 f303 	lsl.w	r3, r2, r3
 8005c74:	43db      	mvns	r3, r3
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f003 0203 	and.w	r2, r3, #3
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80ae 	beq.w	8005e02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	4b5d      	ldr	r3, [pc, #372]	; (8005e20 <HAL_GPIO_Init+0x300>)
 8005cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cae:	4a5c      	ldr	r2, [pc, #368]	; (8005e20 <HAL_GPIO_Init+0x300>)
 8005cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8005cb6:	4b5a      	ldr	r3, [pc, #360]	; (8005e20 <HAL_GPIO_Init+0x300>)
 8005cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cc2:	4a58      	ldr	r2, [pc, #352]	; (8005e24 <HAL_GPIO_Init+0x304>)
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	089b      	lsrs	r3, r3, #2
 8005cc8:	3302      	adds	r3, #2
 8005cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	220f      	movs	r2, #15
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a4f      	ldr	r2, [pc, #316]	; (8005e28 <HAL_GPIO_Init+0x308>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d025      	beq.n	8005d3a <HAL_GPIO_Init+0x21a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a4e      	ldr	r2, [pc, #312]	; (8005e2c <HAL_GPIO_Init+0x30c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01f      	beq.n	8005d36 <HAL_GPIO_Init+0x216>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a4d      	ldr	r2, [pc, #308]	; (8005e30 <HAL_GPIO_Init+0x310>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d019      	beq.n	8005d32 <HAL_GPIO_Init+0x212>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a4c      	ldr	r2, [pc, #304]	; (8005e34 <HAL_GPIO_Init+0x314>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <HAL_GPIO_Init+0x20e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a4b      	ldr	r2, [pc, #300]	; (8005e38 <HAL_GPIO_Init+0x318>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00d      	beq.n	8005d2a <HAL_GPIO_Init+0x20a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a4a      	ldr	r2, [pc, #296]	; (8005e3c <HAL_GPIO_Init+0x31c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d007      	beq.n	8005d26 <HAL_GPIO_Init+0x206>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a49      	ldr	r2, [pc, #292]	; (8005e40 <HAL_GPIO_Init+0x320>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d101      	bne.n	8005d22 <HAL_GPIO_Init+0x202>
 8005d1e:	2306      	movs	r3, #6
 8005d20:	e00c      	b.n	8005d3c <HAL_GPIO_Init+0x21c>
 8005d22:	2307      	movs	r3, #7
 8005d24:	e00a      	b.n	8005d3c <HAL_GPIO_Init+0x21c>
 8005d26:	2305      	movs	r3, #5
 8005d28:	e008      	b.n	8005d3c <HAL_GPIO_Init+0x21c>
 8005d2a:	2304      	movs	r3, #4
 8005d2c:	e006      	b.n	8005d3c <HAL_GPIO_Init+0x21c>
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e004      	b.n	8005d3c <HAL_GPIO_Init+0x21c>
 8005d32:	2302      	movs	r3, #2
 8005d34:	e002      	b.n	8005d3c <HAL_GPIO_Init+0x21c>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <HAL_GPIO_Init+0x21c>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	69fa      	ldr	r2, [r7, #28]
 8005d3e:	f002 0203 	and.w	r2, r2, #3
 8005d42:	0092      	lsls	r2, r2, #2
 8005d44:	4093      	lsls	r3, r2
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d4c:	4935      	ldr	r1, [pc, #212]	; (8005e24 <HAL_GPIO_Init+0x304>)
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	089b      	lsrs	r3, r3, #2
 8005d52:	3302      	adds	r3, #2
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d5a:	4b3a      	ldr	r3, [pc, #232]	; (8005e44 <HAL_GPIO_Init+0x324>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	43db      	mvns	r3, r3
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	4013      	ands	r3, r2
 8005d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d7e:	4a31      	ldr	r2, [pc, #196]	; (8005e44 <HAL_GPIO_Init+0x324>)
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d84:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <HAL_GPIO_Init+0x324>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4013      	ands	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005da8:	4a26      	ldr	r2, [pc, #152]	; (8005e44 <HAL_GPIO_Init+0x324>)
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005dae:	4b25      	ldr	r3, [pc, #148]	; (8005e44 <HAL_GPIO_Init+0x324>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	43db      	mvns	r3, r3
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005dd2:	4a1c      	ldr	r2, [pc, #112]	; (8005e44 <HAL_GPIO_Init+0x324>)
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005dd8:	4b1a      	ldr	r3, [pc, #104]	; (8005e44 <HAL_GPIO_Init+0x324>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	43db      	mvns	r3, r3
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	4013      	ands	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005dfc:	4a11      	ldr	r2, [pc, #68]	; (8005e44 <HAL_GPIO_Init+0x324>)
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	3301      	adds	r3, #1
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2b0f      	cmp	r3, #15
 8005e0c:	f67f ae96 	bls.w	8005b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e10:	bf00      	nop
 8005e12:	bf00      	nop
 8005e14:	3724      	adds	r7, #36	; 0x24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40023800 	.word	0x40023800
 8005e24:	40013800 	.word	0x40013800
 8005e28:	40020000 	.word	0x40020000
 8005e2c:	40020400 	.word	0x40020400
 8005e30:	40020800 	.word	0x40020800
 8005e34:	40020c00 	.word	0x40020c00
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	40021400 	.word	0x40021400
 8005e40:	40021800 	.word	0x40021800
 8005e44:	40013c00 	.word	0x40013c00

08005e48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	887b      	ldrh	r3, [r7, #2]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e60:	2301      	movs	r3, #1
 8005e62:	73fb      	strb	r3, [r7, #15]
 8005e64:	e001      	b.n	8005e6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	807b      	strh	r3, [r7, #2]
 8005e84:	4613      	mov	r3, r2
 8005e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e88:	787b      	ldrb	r3, [r7, #1]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e8e:	887a      	ldrh	r2, [r7, #2]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e94:	e003      	b.n	8005e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e96:	887b      	ldrh	r3, [r7, #2]
 8005e98:	041a      	lsls	r2, r3, #16
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	619a      	str	r2, [r3, #24]
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ebc:	887a      	ldrh	r2, [r7, #2]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	041a      	lsls	r2, r3, #16
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	43d9      	mvns	r1, r3
 8005ec8:	887b      	ldrh	r3, [r7, #2]
 8005eca:	400b      	ands	r3, r1
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	619a      	str	r2, [r3, #24]
}
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
	...

08005ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005eea:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005eec:	695a      	ldr	r2, [r3, #20]
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d006      	beq.n	8005f04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ef6:	4a05      	ldr	r2, [pc, #20]	; (8005f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ef8:	88fb      	ldrh	r3, [r7, #6]
 8005efa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005efc:	88fb      	ldrh	r3, [r7, #6]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 f806 	bl	8005f10 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40013c00 	.word	0x40013c00

08005f10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	4603      	mov	r3, r0
 8005f18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	603b      	str	r3, [r7, #0]
 8005f36:	4b20      	ldr	r3, [pc, #128]	; (8005fb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	4a1f      	ldr	r2, [pc, #124]	; (8005fb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f40:	6413      	str	r3, [r2, #64]	; 0x40
 8005f42:	4b1d      	ldr	r3, [pc, #116]	; (8005fb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f4e:	4b1b      	ldr	r3, [pc, #108]	; (8005fbc <HAL_PWREx_EnableOverDrive+0x94>)
 8005f50:	2201      	movs	r2, #1
 8005f52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f54:	f7fe fc9c 	bl	8004890 <HAL_GetTick>
 8005f58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f5a:	e009      	b.n	8005f70 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f5c:	f7fe fc98 	bl	8004890 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f6a:	d901      	bls.n	8005f70 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e01f      	b.n	8005fb0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f70:	4b13      	ldr	r3, [pc, #76]	; (8005fc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f7c:	d1ee      	bne.n	8005f5c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005f7e:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f84:	f7fe fc84 	bl	8004890 <HAL_GetTick>
 8005f88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f8a:	e009      	b.n	8005fa0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f8c:	f7fe fc80 	bl	8004890 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f9a:	d901      	bls.n	8005fa0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e007      	b.n	8005fb0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fac:	d1ee      	bne.n	8005f8c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	420e0040 	.word	0x420e0040
 8005fc0:	40007000 	.word	0x40007000
 8005fc4:	420e0044 	.word	0x420e0044

08005fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0cc      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fdc:	4b68      	ldr	r3, [pc, #416]	; (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d90c      	bls.n	8006004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fea:	4b65      	ldr	r3, [pc, #404]	; (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff2:	4b63      	ldr	r3, [pc, #396]	; (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d001      	beq.n	8006004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e0b8      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d020      	beq.n	8006052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800601c:	4b59      	ldr	r3, [pc, #356]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	4a58      	ldr	r2, [pc, #352]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006034:	4b53      	ldr	r3, [pc, #332]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	4a52      	ldr	r2, [pc, #328]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800603a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800603e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006040:	4b50      	ldr	r3, [pc, #320]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	494d      	ldr	r1, [pc, #308]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	4313      	orrs	r3, r2
 8006050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d044      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d107      	bne.n	8006076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006066:	4b47      	ldr	r3, [pc, #284]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d119      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e07f      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b02      	cmp	r3, #2
 800607c:	d003      	beq.n	8006086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006082:	2b03      	cmp	r3, #3
 8006084:	d107      	bne.n	8006096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006086:	4b3f      	ldr	r3, [pc, #252]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e06f      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006096:	4b3b      	ldr	r3, [pc, #236]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e067      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060a6:	4b37      	ldr	r3, [pc, #220]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f023 0203 	bic.w	r2, r3, #3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	4934      	ldr	r1, [pc, #208]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060b8:	f7fe fbea 	bl	8004890 <HAL_GetTick>
 80060bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060be:	e00a      	b.n	80060d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060c0:	f7fe fbe6 	bl	8004890 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e04f      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d6:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 020c 	and.w	r2, r3, #12
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d1eb      	bne.n	80060c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060e8:	4b25      	ldr	r3, [pc, #148]	; (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d20c      	bcs.n	8006110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f6:	4b22      	ldr	r3, [pc, #136]	; (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fe:	4b20      	ldr	r3, [pc, #128]	; (8006180 <HAL_RCC_ClockConfig+0x1b8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d001      	beq.n	8006110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e032      	b.n	8006176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d008      	beq.n	800612e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800611c:	4b19      	ldr	r3, [pc, #100]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	4916      	ldr	r1, [pc, #88]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	4313      	orrs	r3, r2
 800612c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d009      	beq.n	800614e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800613a:	4b12      	ldr	r3, [pc, #72]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	490e      	ldr	r1, [pc, #56]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	4313      	orrs	r3, r2
 800614c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800614e:	f000 f855 	bl	80061fc <HAL_RCC_GetSysClockFreq>
 8006152:	4602      	mov	r2, r0
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <HAL_RCC_ClockConfig+0x1bc>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	490a      	ldr	r1, [pc, #40]	; (8006188 <HAL_RCC_ClockConfig+0x1c0>)
 8006160:	5ccb      	ldrb	r3, [r1, r3]
 8006162:	fa22 f303 	lsr.w	r3, r2, r3
 8006166:	4a09      	ldr	r2, [pc, #36]	; (800618c <HAL_RCC_ClockConfig+0x1c4>)
 8006168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800616a:	4b09      	ldr	r3, [pc, #36]	; (8006190 <HAL_RCC_ClockConfig+0x1c8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe fb4a 	bl	8004808 <HAL_InitTick>

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40023c00 	.word	0x40023c00
 8006184:	40023800 	.word	0x40023800
 8006188:	0800a4f8 	.word	0x0800a4f8
 800618c:	20000014 	.word	0x20000014
 8006190:	20000020 	.word	0x20000020

08006194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006198:	4b03      	ldr	r3, [pc, #12]	; (80061a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800619a:	681b      	ldr	r3, [r3, #0]
}
 800619c:	4618      	mov	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	20000014 	.word	0x20000014

080061ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061b0:	f7ff fff0 	bl	8006194 <HAL_RCC_GetHCLKFreq>
 80061b4:	4602      	mov	r2, r0
 80061b6:	4b05      	ldr	r3, [pc, #20]	; (80061cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	0a9b      	lsrs	r3, r3, #10
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	4903      	ldr	r1, [pc, #12]	; (80061d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061c2:	5ccb      	ldrb	r3, [r1, r3]
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40023800 	.word	0x40023800
 80061d0:	0800a508 	.word	0x0800a508

080061d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061d8:	f7ff ffdc 	bl	8006194 <HAL_RCC_GetHCLKFreq>
 80061dc:	4602      	mov	r2, r0
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	0b5b      	lsrs	r3, r3, #13
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	4903      	ldr	r1, [pc, #12]	; (80061f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ea:	5ccb      	ldrb	r3, [r1, r3]
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40023800 	.word	0x40023800
 80061f8:	0800a508 	.word	0x0800a508

080061fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006200:	b0ae      	sub	sp, #184	; 0xb8
 8006202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006222:	4bcb      	ldr	r3, [pc, #812]	; (8006550 <HAL_RCC_GetSysClockFreq+0x354>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 030c 	and.w	r3, r3, #12
 800622a:	2b0c      	cmp	r3, #12
 800622c:	f200 8206 	bhi.w	800663c <HAL_RCC_GetSysClockFreq+0x440>
 8006230:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006236:	bf00      	nop
 8006238:	0800626d 	.word	0x0800626d
 800623c:	0800663d 	.word	0x0800663d
 8006240:	0800663d 	.word	0x0800663d
 8006244:	0800663d 	.word	0x0800663d
 8006248:	08006275 	.word	0x08006275
 800624c:	0800663d 	.word	0x0800663d
 8006250:	0800663d 	.word	0x0800663d
 8006254:	0800663d 	.word	0x0800663d
 8006258:	0800627d 	.word	0x0800627d
 800625c:	0800663d 	.word	0x0800663d
 8006260:	0800663d 	.word	0x0800663d
 8006264:	0800663d 	.word	0x0800663d
 8006268:	0800646d 	.word	0x0800646d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800626c:	4bb9      	ldr	r3, [pc, #740]	; (8006554 <HAL_RCC_GetSysClockFreq+0x358>)
 800626e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006272:	e1e7      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006274:	4bb8      	ldr	r3, [pc, #736]	; (8006558 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800627a:	e1e3      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800627c:	4bb4      	ldr	r3, [pc, #720]	; (8006550 <HAL_RCC_GetSysClockFreq+0x354>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006288:	4bb1      	ldr	r3, [pc, #708]	; (8006550 <HAL_RCC_GetSysClockFreq+0x354>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d071      	beq.n	8006378 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006294:	4bae      	ldr	r3, [pc, #696]	; (8006550 <HAL_RCC_GetSysClockFreq+0x354>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	099b      	lsrs	r3, r3, #6
 800629a:	2200      	movs	r2, #0
 800629c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062a0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80062a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062b0:	2300      	movs	r3, #0
 80062b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062ba:	4622      	mov	r2, r4
 80062bc:	462b      	mov	r3, r5
 80062be:	f04f 0000 	mov.w	r0, #0
 80062c2:	f04f 0100 	mov.w	r1, #0
 80062c6:	0159      	lsls	r1, r3, #5
 80062c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062cc:	0150      	lsls	r0, r2, #5
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4621      	mov	r1, r4
 80062d4:	1a51      	subs	r1, r2, r1
 80062d6:	6439      	str	r1, [r7, #64]	; 0x40
 80062d8:	4629      	mov	r1, r5
 80062da:	eb63 0301 	sbc.w	r3, r3, r1
 80062de:	647b      	str	r3, [r7, #68]	; 0x44
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80062ec:	4649      	mov	r1, r9
 80062ee:	018b      	lsls	r3, r1, #6
 80062f0:	4641      	mov	r1, r8
 80062f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062f6:	4641      	mov	r1, r8
 80062f8:	018a      	lsls	r2, r1, #6
 80062fa:	4641      	mov	r1, r8
 80062fc:	1a51      	subs	r1, r2, r1
 80062fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006300:	4649      	mov	r1, r9
 8006302:	eb63 0301 	sbc.w	r3, r3, r1
 8006306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	f04f 0300 	mov.w	r3, #0
 8006310:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006314:	4649      	mov	r1, r9
 8006316:	00cb      	lsls	r3, r1, #3
 8006318:	4641      	mov	r1, r8
 800631a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800631e:	4641      	mov	r1, r8
 8006320:	00ca      	lsls	r2, r1, #3
 8006322:	4610      	mov	r0, r2
 8006324:	4619      	mov	r1, r3
 8006326:	4603      	mov	r3, r0
 8006328:	4622      	mov	r2, r4
 800632a:	189b      	adds	r3, r3, r2
 800632c:	633b      	str	r3, [r7, #48]	; 0x30
 800632e:	462b      	mov	r3, r5
 8006330:	460a      	mov	r2, r1
 8006332:	eb42 0303 	adc.w	r3, r2, r3
 8006336:	637b      	str	r3, [r7, #52]	; 0x34
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006344:	4629      	mov	r1, r5
 8006346:	024b      	lsls	r3, r1, #9
 8006348:	4621      	mov	r1, r4
 800634a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800634e:	4621      	mov	r1, r4
 8006350:	024a      	lsls	r2, r1, #9
 8006352:	4610      	mov	r0, r2
 8006354:	4619      	mov	r1, r3
 8006356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800635a:	2200      	movs	r2, #0
 800635c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006364:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006368:	f7fa fc5e 	bl	8000c28 <__aeabi_uldivmod>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4613      	mov	r3, r2
 8006372:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006376:	e067      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006378:	4b75      	ldr	r3, [pc, #468]	; (8006550 <HAL_RCC_GetSysClockFreq+0x354>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	099b      	lsrs	r3, r3, #6
 800637e:	2200      	movs	r2, #0
 8006380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006384:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006388:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800638c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006390:	67bb      	str	r3, [r7, #120]	; 0x78
 8006392:	2300      	movs	r3, #0
 8006394:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006396:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800639a:	4622      	mov	r2, r4
 800639c:	462b      	mov	r3, r5
 800639e:	f04f 0000 	mov.w	r0, #0
 80063a2:	f04f 0100 	mov.w	r1, #0
 80063a6:	0159      	lsls	r1, r3, #5
 80063a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063ac:	0150      	lsls	r0, r2, #5
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4621      	mov	r1, r4
 80063b4:	1a51      	subs	r1, r2, r1
 80063b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80063b8:	4629      	mov	r1, r5
 80063ba:	eb63 0301 	sbc.w	r3, r3, r1
 80063be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80063cc:	4649      	mov	r1, r9
 80063ce:	018b      	lsls	r3, r1, #6
 80063d0:	4641      	mov	r1, r8
 80063d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063d6:	4641      	mov	r1, r8
 80063d8:	018a      	lsls	r2, r1, #6
 80063da:	4641      	mov	r1, r8
 80063dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80063e0:	4649      	mov	r1, r9
 80063e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063fa:	4692      	mov	sl, r2
 80063fc:	469b      	mov	fp, r3
 80063fe:	4623      	mov	r3, r4
 8006400:	eb1a 0303 	adds.w	r3, sl, r3
 8006404:	623b      	str	r3, [r7, #32]
 8006406:	462b      	mov	r3, r5
 8006408:	eb4b 0303 	adc.w	r3, fp, r3
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
 800640e:	f04f 0200 	mov.w	r2, #0
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800641a:	4629      	mov	r1, r5
 800641c:	028b      	lsls	r3, r1, #10
 800641e:	4621      	mov	r1, r4
 8006420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006424:	4621      	mov	r1, r4
 8006426:	028a      	lsls	r2, r1, #10
 8006428:	4610      	mov	r0, r2
 800642a:	4619      	mov	r1, r3
 800642c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006430:	2200      	movs	r2, #0
 8006432:	673b      	str	r3, [r7, #112]	; 0x70
 8006434:	677a      	str	r2, [r7, #116]	; 0x74
 8006436:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800643a:	f7fa fbf5 	bl	8000c28 <__aeabi_uldivmod>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4613      	mov	r3, r2
 8006444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006448:	4b41      	ldr	r3, [pc, #260]	; (8006550 <HAL_RCC_GetSysClockFreq+0x354>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	0c1b      	lsrs	r3, r3, #16
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	3301      	adds	r3, #1
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800645a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800645e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006462:	fbb2 f3f3 	udiv	r3, r2, r3
 8006466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800646a:	e0eb      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800646c:	4b38      	ldr	r3, [pc, #224]	; (8006550 <HAL_RCC_GetSysClockFreq+0x354>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006474:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006478:	4b35      	ldr	r3, [pc, #212]	; (8006550 <HAL_RCC_GetSysClockFreq+0x354>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d06b      	beq.n	800655c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006484:	4b32      	ldr	r3, [pc, #200]	; (8006550 <HAL_RCC_GetSysClockFreq+0x354>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	099b      	lsrs	r3, r3, #6
 800648a:	2200      	movs	r2, #0
 800648c:	66bb      	str	r3, [r7, #104]	; 0x68
 800648e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006496:	663b      	str	r3, [r7, #96]	; 0x60
 8006498:	2300      	movs	r3, #0
 800649a:	667b      	str	r3, [r7, #100]	; 0x64
 800649c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80064a0:	4622      	mov	r2, r4
 80064a2:	462b      	mov	r3, r5
 80064a4:	f04f 0000 	mov.w	r0, #0
 80064a8:	f04f 0100 	mov.w	r1, #0
 80064ac:	0159      	lsls	r1, r3, #5
 80064ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064b2:	0150      	lsls	r0, r2, #5
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4621      	mov	r1, r4
 80064ba:	1a51      	subs	r1, r2, r1
 80064bc:	61b9      	str	r1, [r7, #24]
 80064be:	4629      	mov	r1, r5
 80064c0:	eb63 0301 	sbc.w	r3, r3, r1
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	f04f 0300 	mov.w	r3, #0
 80064ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80064d2:	4659      	mov	r1, fp
 80064d4:	018b      	lsls	r3, r1, #6
 80064d6:	4651      	mov	r1, sl
 80064d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064dc:	4651      	mov	r1, sl
 80064de:	018a      	lsls	r2, r1, #6
 80064e0:	4651      	mov	r1, sl
 80064e2:	ebb2 0801 	subs.w	r8, r2, r1
 80064e6:	4659      	mov	r1, fp
 80064e8:	eb63 0901 	sbc.w	r9, r3, r1
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006500:	4690      	mov	r8, r2
 8006502:	4699      	mov	r9, r3
 8006504:	4623      	mov	r3, r4
 8006506:	eb18 0303 	adds.w	r3, r8, r3
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	462b      	mov	r3, r5
 800650e:	eb49 0303 	adc.w	r3, r9, r3
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006520:	4629      	mov	r1, r5
 8006522:	024b      	lsls	r3, r1, #9
 8006524:	4621      	mov	r1, r4
 8006526:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800652a:	4621      	mov	r1, r4
 800652c:	024a      	lsls	r2, r1, #9
 800652e:	4610      	mov	r0, r2
 8006530:	4619      	mov	r1, r3
 8006532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006536:	2200      	movs	r2, #0
 8006538:	65bb      	str	r3, [r7, #88]	; 0x58
 800653a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800653c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006540:	f7fa fb72 	bl	8000c28 <__aeabi_uldivmod>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4613      	mov	r3, r2
 800654a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800654e:	e065      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x420>
 8006550:	40023800 	.word	0x40023800
 8006554:	00f42400 	.word	0x00f42400
 8006558:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800655c:	4b3d      	ldr	r3, [pc, #244]	; (8006654 <HAL_RCC_GetSysClockFreq+0x458>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	099b      	lsrs	r3, r3, #6
 8006562:	2200      	movs	r2, #0
 8006564:	4618      	mov	r0, r3
 8006566:	4611      	mov	r1, r2
 8006568:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800656c:	653b      	str	r3, [r7, #80]	; 0x50
 800656e:	2300      	movs	r3, #0
 8006570:	657b      	str	r3, [r7, #84]	; 0x54
 8006572:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006576:	4642      	mov	r2, r8
 8006578:	464b      	mov	r3, r9
 800657a:	f04f 0000 	mov.w	r0, #0
 800657e:	f04f 0100 	mov.w	r1, #0
 8006582:	0159      	lsls	r1, r3, #5
 8006584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006588:	0150      	lsls	r0, r2, #5
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4641      	mov	r1, r8
 8006590:	1a51      	subs	r1, r2, r1
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	4649      	mov	r1, r9
 8006596:	eb63 0301 	sbc.w	r3, r3, r1
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80065a8:	4659      	mov	r1, fp
 80065aa:	018b      	lsls	r3, r1, #6
 80065ac:	4651      	mov	r1, sl
 80065ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065b2:	4651      	mov	r1, sl
 80065b4:	018a      	lsls	r2, r1, #6
 80065b6:	4651      	mov	r1, sl
 80065b8:	1a54      	subs	r4, r2, r1
 80065ba:	4659      	mov	r1, fp
 80065bc:	eb63 0501 	sbc.w	r5, r3, r1
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	00eb      	lsls	r3, r5, #3
 80065ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ce:	00e2      	lsls	r2, r4, #3
 80065d0:	4614      	mov	r4, r2
 80065d2:	461d      	mov	r5, r3
 80065d4:	4643      	mov	r3, r8
 80065d6:	18e3      	adds	r3, r4, r3
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	464b      	mov	r3, r9
 80065dc:	eb45 0303 	adc.w	r3, r5, r3
 80065e0:	607b      	str	r3, [r7, #4]
 80065e2:	f04f 0200 	mov.w	r2, #0
 80065e6:	f04f 0300 	mov.w	r3, #0
 80065ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065ee:	4629      	mov	r1, r5
 80065f0:	028b      	lsls	r3, r1, #10
 80065f2:	4621      	mov	r1, r4
 80065f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065f8:	4621      	mov	r1, r4
 80065fa:	028a      	lsls	r2, r1, #10
 80065fc:	4610      	mov	r0, r2
 80065fe:	4619      	mov	r1, r3
 8006600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006604:	2200      	movs	r2, #0
 8006606:	64bb      	str	r3, [r7, #72]	; 0x48
 8006608:	64fa      	str	r2, [r7, #76]	; 0x4c
 800660a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800660e:	f7fa fb0b 	bl	8000c28 <__aeabi_uldivmod>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4613      	mov	r3, r2
 8006618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800661c:	4b0d      	ldr	r3, [pc, #52]	; (8006654 <HAL_RCC_GetSysClockFreq+0x458>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	0f1b      	lsrs	r3, r3, #28
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800662a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800662e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006632:	fbb2 f3f3 	udiv	r3, r2, r3
 8006636:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800663a:	e003      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800663c:	4b06      	ldr	r3, [pc, #24]	; (8006658 <HAL_RCC_GetSysClockFreq+0x45c>)
 800663e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006642:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006644:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006648:	4618      	mov	r0, r3
 800664a:	37b8      	adds	r7, #184	; 0xb8
 800664c:	46bd      	mov	sp, r7
 800664e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006652:	bf00      	nop
 8006654:	40023800 	.word	0x40023800
 8006658:	00f42400 	.word	0x00f42400

0800665c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e28d      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 8083 	beq.w	8006782 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800667c:	4b94      	ldr	r3, [pc, #592]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 030c 	and.w	r3, r3, #12
 8006684:	2b04      	cmp	r3, #4
 8006686:	d019      	beq.n	80066bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006688:	4b91      	ldr	r3, [pc, #580]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006690:	2b08      	cmp	r3, #8
 8006692:	d106      	bne.n	80066a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006694:	4b8e      	ldr	r3, [pc, #568]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800669c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066a0:	d00c      	beq.n	80066bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066a2:	4b8b      	ldr	r3, [pc, #556]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80066aa:	2b0c      	cmp	r3, #12
 80066ac:	d112      	bne.n	80066d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066ae:	4b88      	ldr	r3, [pc, #544]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ba:	d10b      	bne.n	80066d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066bc:	4b84      	ldr	r3, [pc, #528]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d05b      	beq.n	8006780 <HAL_RCC_OscConfig+0x124>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d157      	bne.n	8006780 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e25a      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066dc:	d106      	bne.n	80066ec <HAL_RCC_OscConfig+0x90>
 80066de:	4b7c      	ldr	r3, [pc, #496]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a7b      	ldr	r2, [pc, #492]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80066e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e01d      	b.n	8006728 <HAL_RCC_OscConfig+0xcc>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066f4:	d10c      	bne.n	8006710 <HAL_RCC_OscConfig+0xb4>
 80066f6:	4b76      	ldr	r3, [pc, #472]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a75      	ldr	r2, [pc, #468]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80066fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	4b73      	ldr	r3, [pc, #460]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a72      	ldr	r2, [pc, #456]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 8006708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	e00b      	b.n	8006728 <HAL_RCC_OscConfig+0xcc>
 8006710:	4b6f      	ldr	r3, [pc, #444]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a6e      	ldr	r2, [pc, #440]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 8006716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	4b6c      	ldr	r3, [pc, #432]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a6b      	ldr	r2, [pc, #428]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 8006722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d013      	beq.n	8006758 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fe f8ae 	bl	8004890 <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006738:	f7fe f8aa 	bl	8004890 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b64      	cmp	r3, #100	; 0x64
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e21f      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800674a:	4b61      	ldr	r3, [pc, #388]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0f0      	beq.n	8006738 <HAL_RCC_OscConfig+0xdc>
 8006756:	e014      	b.n	8006782 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006758:	f7fe f89a 	bl	8004890 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006760:	f7fe f896 	bl	8004890 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b64      	cmp	r3, #100	; 0x64
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e20b      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006772:	4b57      	ldr	r3, [pc, #348]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0x104>
 800677e:	e000      	b.n	8006782 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d06f      	beq.n	800686e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800678e:	4b50      	ldr	r3, [pc, #320]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 030c 	and.w	r3, r3, #12
 8006796:	2b00      	cmp	r3, #0
 8006798:	d017      	beq.n	80067ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800679a:	4b4d      	ldr	r3, [pc, #308]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	d105      	bne.n	80067b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80067a6:	4b4a      	ldr	r3, [pc, #296]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067b2:	4b47      	ldr	r3, [pc, #284]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80067ba:	2b0c      	cmp	r3, #12
 80067bc:	d11c      	bne.n	80067f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067be:	4b44      	ldr	r3, [pc, #272]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d116      	bne.n	80067f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ca:	4b41      	ldr	r3, [pc, #260]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <HAL_RCC_OscConfig+0x186>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d001      	beq.n	80067e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e1d3      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e2:	4b3b      	ldr	r3, [pc, #236]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	4937      	ldr	r1, [pc, #220]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067f6:	e03a      	b.n	800686e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d020      	beq.n	8006842 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006800:	4b34      	ldr	r3, [pc, #208]	; (80068d4 <HAL_RCC_OscConfig+0x278>)
 8006802:	2201      	movs	r2, #1
 8006804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006806:	f7fe f843 	bl	8004890 <HAL_GetTick>
 800680a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800680c:	e008      	b.n	8006820 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800680e:	f7fe f83f 	bl	8004890 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	2b02      	cmp	r3, #2
 800681a:	d901      	bls.n	8006820 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e1b4      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006820:	4b2b      	ldr	r3, [pc, #172]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0f0      	beq.n	800680e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800682c:	4b28      	ldr	r3, [pc, #160]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	4925      	ldr	r1, [pc, #148]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 800683c:	4313      	orrs	r3, r2
 800683e:	600b      	str	r3, [r1, #0]
 8006840:	e015      	b.n	800686e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006842:	4b24      	ldr	r3, [pc, #144]	; (80068d4 <HAL_RCC_OscConfig+0x278>)
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006848:	f7fe f822 	bl	8004890 <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006850:	f7fe f81e 	bl	8004890 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e193      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006862:	4b1b      	ldr	r3, [pc, #108]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1f0      	bne.n	8006850 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	2b00      	cmp	r3, #0
 8006878:	d036      	beq.n	80068e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d016      	beq.n	80068b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <HAL_RCC_OscConfig+0x27c>)
 8006884:	2201      	movs	r2, #1
 8006886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006888:	f7fe f802 	bl	8004890 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006890:	f7fd fffe 	bl	8004890 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e173      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068a2:	4b0b      	ldr	r3, [pc, #44]	; (80068d0 <HAL_RCC_OscConfig+0x274>)
 80068a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f0      	beq.n	8006890 <HAL_RCC_OscConfig+0x234>
 80068ae:	e01b      	b.n	80068e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068b0:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <HAL_RCC_OscConfig+0x27c>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b6:	f7fd ffeb 	bl	8004890 <HAL_GetTick>
 80068ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068bc:	e00e      	b.n	80068dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068be:	f7fd ffe7 	bl	8004890 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d907      	bls.n	80068dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e15c      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
 80068d0:	40023800 	.word	0x40023800
 80068d4:	42470000 	.word	0x42470000
 80068d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068dc:	4b8a      	ldr	r3, [pc, #552]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 80068de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1ea      	bne.n	80068be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8097 	beq.w	8006a24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068f6:	2300      	movs	r3, #0
 80068f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068fa:	4b83      	ldr	r3, [pc, #524]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10f      	bne.n	8006926 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006906:	2300      	movs	r3, #0
 8006908:	60bb      	str	r3, [r7, #8]
 800690a:	4b7f      	ldr	r3, [pc, #508]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	4a7e      	ldr	r2, [pc, #504]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006914:	6413      	str	r3, [r2, #64]	; 0x40
 8006916:	4b7c      	ldr	r3, [pc, #496]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800691e:	60bb      	str	r3, [r7, #8]
 8006920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006922:	2301      	movs	r3, #1
 8006924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006926:	4b79      	ldr	r3, [pc, #484]	; (8006b0c <HAL_RCC_OscConfig+0x4b0>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692e:	2b00      	cmp	r3, #0
 8006930:	d118      	bne.n	8006964 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006932:	4b76      	ldr	r3, [pc, #472]	; (8006b0c <HAL_RCC_OscConfig+0x4b0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a75      	ldr	r2, [pc, #468]	; (8006b0c <HAL_RCC_OscConfig+0x4b0>)
 8006938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800693c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800693e:	f7fd ffa7 	bl	8004890 <HAL_GetTick>
 8006942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006944:	e008      	b.n	8006958 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006946:	f7fd ffa3 	bl	8004890 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	d901      	bls.n	8006958 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e118      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006958:	4b6c      	ldr	r3, [pc, #432]	; (8006b0c <HAL_RCC_OscConfig+0x4b0>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006960:	2b00      	cmp	r3, #0
 8006962:	d0f0      	beq.n	8006946 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d106      	bne.n	800697a <HAL_RCC_OscConfig+0x31e>
 800696c:	4b66      	ldr	r3, [pc, #408]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 800696e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006970:	4a65      	ldr	r2, [pc, #404]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006972:	f043 0301 	orr.w	r3, r3, #1
 8006976:	6713      	str	r3, [r2, #112]	; 0x70
 8006978:	e01c      	b.n	80069b4 <HAL_RCC_OscConfig+0x358>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	2b05      	cmp	r3, #5
 8006980:	d10c      	bne.n	800699c <HAL_RCC_OscConfig+0x340>
 8006982:	4b61      	ldr	r3, [pc, #388]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006986:	4a60      	ldr	r2, [pc, #384]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006988:	f043 0304 	orr.w	r3, r3, #4
 800698c:	6713      	str	r3, [r2, #112]	; 0x70
 800698e:	4b5e      	ldr	r3, [pc, #376]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006992:	4a5d      	ldr	r2, [pc, #372]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006994:	f043 0301 	orr.w	r3, r3, #1
 8006998:	6713      	str	r3, [r2, #112]	; 0x70
 800699a:	e00b      	b.n	80069b4 <HAL_RCC_OscConfig+0x358>
 800699c:	4b5a      	ldr	r3, [pc, #360]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a0:	4a59      	ldr	r2, [pc, #356]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 80069a2:	f023 0301 	bic.w	r3, r3, #1
 80069a6:	6713      	str	r3, [r2, #112]	; 0x70
 80069a8:	4b57      	ldr	r3, [pc, #348]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ac:	4a56      	ldr	r2, [pc, #344]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 80069ae:	f023 0304 	bic.w	r3, r3, #4
 80069b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d015      	beq.n	80069e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069bc:	f7fd ff68 	bl	8004890 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c2:	e00a      	b.n	80069da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c4:	f7fd ff64 	bl	8004890 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e0d7      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069da:	4b4b      	ldr	r3, [pc, #300]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 80069dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0ee      	beq.n	80069c4 <HAL_RCC_OscConfig+0x368>
 80069e6:	e014      	b.n	8006a12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e8:	f7fd ff52 	bl	8004890 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ee:	e00a      	b.n	8006a06 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069f0:	f7fd ff4e 	bl	8004890 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e0c1      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a06:	4b40      	ldr	r3, [pc, #256]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1ee      	bne.n	80069f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d105      	bne.n	8006a24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a18:	4b3b      	ldr	r3, [pc, #236]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	4a3a      	ldr	r2, [pc, #232]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80ad 	beq.w	8006b88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a2e:	4b36      	ldr	r3, [pc, #216]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 030c 	and.w	r3, r3, #12
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d060      	beq.n	8006afc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d145      	bne.n	8006ace <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a42:	4b33      	ldr	r3, [pc, #204]	; (8006b10 <HAL_RCC_OscConfig+0x4b4>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a48:	f7fd ff22 	bl	8004890 <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a50:	f7fd ff1e 	bl	8004890 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e093      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a62:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f0      	bne.n	8006a50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69da      	ldr	r2, [r3, #28]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	019b      	lsls	r3, r3, #6
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	085b      	lsrs	r3, r3, #1
 8006a86:	3b01      	subs	r3, #1
 8006a88:	041b      	lsls	r3, r3, #16
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	061b      	lsls	r3, r3, #24
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a98:	071b      	lsls	r3, r3, #28
 8006a9a:	491b      	ldr	r1, [pc, #108]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aa0:	4b1b      	ldr	r3, [pc, #108]	; (8006b10 <HAL_RCC_OscConfig+0x4b4>)
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa6:	f7fd fef3 	bl	8004890 <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aae:	f7fd feef 	bl	8004890 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e064      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ac0:	4b11      	ldr	r3, [pc, #68]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0f0      	beq.n	8006aae <HAL_RCC_OscConfig+0x452>
 8006acc:	e05c      	b.n	8006b88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ace:	4b10      	ldr	r3, [pc, #64]	; (8006b10 <HAL_RCC_OscConfig+0x4b4>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad4:	f7fd fedc 	bl	8004890 <HAL_GetTick>
 8006ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006adc:	f7fd fed8 	bl	8004890 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e04d      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aee:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <HAL_RCC_OscConfig+0x4ac>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f0      	bne.n	8006adc <HAL_RCC_OscConfig+0x480>
 8006afa:	e045      	b.n	8006b88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d107      	bne.n	8006b14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e040      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
 8006b08:	40023800 	.word	0x40023800
 8006b0c:	40007000 	.word	0x40007000
 8006b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b14:	4b1f      	ldr	r3, [pc, #124]	; (8006b94 <HAL_RCC_OscConfig+0x538>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d030      	beq.n	8006b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d129      	bne.n	8006b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d122      	bne.n	8006b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b44:	4013      	ands	r3, r2
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d119      	bne.n	8006b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5a:	085b      	lsrs	r3, r3, #1
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d10f      	bne.n	8006b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d107      	bne.n	8006b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d001      	beq.n	8006b88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40023800 	.word	0x40023800

08006b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e07b      	b.n	8006ca2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d108      	bne.n	8006bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bba:	d009      	beq.n	8006bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	61da      	str	r2, [r3, #28]
 8006bc2:	e005      	b.n	8006bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7fb fc5c 	bl	80024a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c54:	ea42 0103 	orr.w	r1, r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	0c1b      	lsrs	r3, r3, #16
 8006c6e:	f003 0104 	and.w	r1, r3, #4
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	f003 0210 	and.w	r2, r3, #16
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b088      	sub	sp, #32
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	603b      	str	r3, [r7, #0]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_SPI_Transmit+0x22>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e126      	b.n	8006f1a <HAL_SPI_Transmit+0x270>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cd4:	f7fd fddc 	bl	8004890 <HAL_GetTick>
 8006cd8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d002      	beq.n	8006cf0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cea:	2302      	movs	r3, #2
 8006cec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cee:	e10b      	b.n	8006f08 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <HAL_SPI_Transmit+0x52>
 8006cf6:	88fb      	ldrh	r3, [r7, #6]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d102      	bne.n	8006d02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d00:	e102      	b.n	8006f08 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2203      	movs	r2, #3
 8006d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	88fa      	ldrh	r2, [r7, #6]
 8006d1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	88fa      	ldrh	r2, [r7, #6]
 8006d20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d48:	d10f      	bne.n	8006d6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d74:	2b40      	cmp	r3, #64	; 0x40
 8006d76:	d007      	beq.n	8006d88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d90:	d14b      	bne.n	8006e2a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <HAL_SPI_Transmit+0xf6>
 8006d9a:	8afb      	ldrh	r3, [r7, #22]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d13e      	bne.n	8006e1e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da4:	881a      	ldrh	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db0:	1c9a      	adds	r2, r3, #2
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006dc4:	e02b      	b.n	8006e1e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d112      	bne.n	8006dfa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd8:	881a      	ldrh	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de4:	1c9a      	adds	r2, r3, #2
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006df8:	e011      	b.n	8006e1e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dfa:	f7fd fd49 	bl	8004890 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d803      	bhi.n	8006e12 <HAL_SPI_Transmit+0x168>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e10:	d102      	bne.n	8006e18 <HAL_SPI_Transmit+0x16e>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e1c:	e074      	b.n	8006f08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1ce      	bne.n	8006dc6 <HAL_SPI_Transmit+0x11c>
 8006e28:	e04c      	b.n	8006ec4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_SPI_Transmit+0x18e>
 8006e32:	8afb      	ldrh	r3, [r7, #22]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d140      	bne.n	8006eba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	7812      	ldrb	r2, [r2, #0]
 8006e44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e5e:	e02c      	b.n	8006eba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d113      	bne.n	8006e96 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	330c      	adds	r3, #12
 8006e78:	7812      	ldrb	r2, [r2, #0]
 8006e7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e94:	e011      	b.n	8006eba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e96:	f7fd fcfb 	bl	8004890 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d803      	bhi.n	8006eae <HAL_SPI_Transmit+0x204>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eac:	d102      	bne.n	8006eb4 <HAL_SPI_Transmit+0x20a>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d102      	bne.n	8006eba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006eb8:	e026      	b.n	8006f08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1cd      	bne.n	8006e60 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fafd 	bl	80074c8 <SPI_EndRxTxTransaction>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	77fb      	strb	r3, [r7, #31]
 8006f04:	e000      	b.n	8006f08 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006f06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3720      	adds	r7, #32
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_SPI_Transmit_DMA+0x20>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e09b      	b.n	800707c <HAL_SPI_Transmit_DMA+0x158>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d002      	beq.n	8006f5e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006f58:	2302      	movs	r3, #2
 8006f5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f5c:	e089      	b.n	8007072 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_SPI_Transmit_DMA+0x46>
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d102      	bne.n	8006f70 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f6e:	e080      	b.n	8007072 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2203      	movs	r2, #3
 8006f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	88fa      	ldrh	r2, [r7, #6]
 8006f88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	88fa      	ldrh	r2, [r7, #6]
 8006f8e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb6:	d10f      	bne.n	8006fd8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fdc:	4a29      	ldr	r2, [pc, #164]	; (8007084 <HAL_SPI_Transmit_DMA+0x160>)
 8006fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe4:	4a28      	ldr	r2, [pc, #160]	; (8007088 <HAL_SPI_Transmit_DMA+0x164>)
 8006fe6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fec:	4a27      	ldr	r2, [pc, #156]	; (800708c <HAL_SPI_Transmit_DMA+0x168>)
 8006fee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007000:	4619      	mov	r1, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	330c      	adds	r3, #12
 8007008:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800700e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007010:	f7fe fa32 	bl	8005478 <HAL_DMA_Start_IT>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00c      	beq.n	8007034 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701e:	f043 0210 	orr.w	r2, r3, #16
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007032:	e01e      	b.n	8007072 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703e:	2b40      	cmp	r3, #64	; 0x40
 8007040:	d007      	beq.n	8007052 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007050:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f042 0220 	orr.w	r2, r2, #32
 8007060:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f042 0202 	orr.w	r2, r2, #2
 8007070:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800707a:	7dfb      	ldrb	r3, [r7, #23]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	08007335 	.word	0x08007335
 8007088:	0800728d 	.word	0x0800728d
 800708c:	08007351 	.word	0x08007351

08007090 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10e      	bne.n	80070d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d009      	beq.n	80070d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d004      	beq.n	80070d0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
    return;
 80070ce:	e0ce      	b.n	800726e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <HAL_SPI_IRQHandler+0x5e>
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d004      	beq.n	80070ee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	4798      	blx	r3
    return;
 80070ec:	e0bf      	b.n	800726e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	f003 0320 	and.w	r3, r3, #32
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <HAL_SPI_IRQHandler+0x7e>
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d105      	bne.n	800710e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 80b0 	beq.w	800726e <HAL_SPI_IRQHandler+0x1de>
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 80aa 	beq.w	800726e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d023      	beq.n	800716c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b03      	cmp	r3, #3
 800712e:	d011      	beq.n	8007154 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007134:	f043 0204 	orr.w	r2, r3, #4
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800713c:	2300      	movs	r3, #0
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	e00b      	b.n	800716c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007154:	2300      	movs	r3, #0
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	693b      	ldr	r3, [r7, #16]
        return;
 800716a:	e080      	b.n	800726e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d014      	beq.n	80071a0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717a:	f043 0201 	orr.w	r2, r3, #1
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00c      	beq.n	80071c4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ae:	f043 0208 	orr.w	r2, r3, #8
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	60bb      	str	r3, [r7, #8]
 80071c2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d04f      	beq.n	800726c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071da:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d104      	bne.n	80071f8 <HAL_SPI_IRQHandler+0x168>
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d034      	beq.n	8007262 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0203 	bic.w	r2, r2, #3
 8007206:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d011      	beq.n	8007234 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007214:	4a17      	ldr	r2, [pc, #92]	; (8007274 <HAL_SPI_IRQHandler+0x1e4>)
 8007216:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe f9f3 	bl	8005608 <HAL_DMA_Abort_IT>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007238:	2b00      	cmp	r3, #0
 800723a:	d016      	beq.n	800726a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007240:	4a0c      	ldr	r2, [pc, #48]	; (8007274 <HAL_SPI_IRQHandler+0x1e4>)
 8007242:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007248:	4618      	mov	r0, r3
 800724a:	f7fe f9dd 	bl	8005608 <HAL_DMA_Abort_IT>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00a      	beq.n	800726a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007258:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007260:	e003      	b.n	800726a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fb fd3c 	bl	8002ce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007268:	e000      	b.n	800726c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800726a:	bf00      	nop
    return;
 800726c:	bf00      	nop
  }
}
 800726e:	3720      	adds	r7, #32
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	08007391 	.word	0x08007391

08007278 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007298:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800729a:	f7fd faf9 	bl	8004890 <HAL_GetTick>
 800729e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ae:	d03b      	beq.n	8007328 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0220 	bic.w	r2, r2, #32
 80072be:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f022 0202 	bic.w	r2, r2, #2
 80072ce:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	2164      	movs	r1, #100	; 0x64
 80072d4:	6978      	ldr	r0, [r7, #20]
 80072d6:	f000 f8f7 	bl	80074c8 <SPI_EndRxTxTransaction>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d005      	beq.n	80072ec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e4:	f043 0220 	orr.w	r2, r3, #32
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2200      	movs	r2, #0
 800730e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007320:	6978      	ldr	r0, [r7, #20]
 8007322:	f7fb fcdd 	bl	8002ce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007326:	e002      	b.n	800732e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007328:	6978      	ldr	r0, [r7, #20]
 800732a:	f7fb fcef 	bl	8002d0c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f7ff ff98 	bl	8007278 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007348:	bf00      	nop
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0203 	bic.w	r2, r2, #3
 800736c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007372:	f043 0210 	orr.w	r2, r3, #16
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f7fb fcac 	bl	8002ce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007388:	bf00      	nop
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f7fb fc98 	bl	8002ce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073b0:	bf00      	nop
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	603b      	str	r3, [r7, #0]
 80073c4:	4613      	mov	r3, r2
 80073c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073c8:	f7fd fa62 	bl	8004890 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	1a9b      	subs	r3, r3, r2
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	4413      	add	r3, r2
 80073d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073d8:	f7fd fa5a 	bl	8004890 <HAL_GetTick>
 80073dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073de:	4b39      	ldr	r3, [pc, #228]	; (80074c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	015b      	lsls	r3, r3, #5
 80073e4:	0d1b      	lsrs	r3, r3, #20
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	fb02 f303 	mul.w	r3, r2, r3
 80073ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073ee:	e054      	b.n	800749a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073f6:	d050      	beq.n	800749a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073f8:	f7fd fa4a 	bl	8004890 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	429a      	cmp	r2, r3
 8007406:	d902      	bls.n	800740e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d13d      	bne.n	800748a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800741c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007426:	d111      	bne.n	800744c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007430:	d004      	beq.n	800743c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743a:	d107      	bne.n	800744c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800744a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007454:	d10f      	bne.n	8007476 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007474:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e017      	b.n	80074ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	3b01      	subs	r3, #1
 8007498:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689a      	ldr	r2, [r3, #8]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4013      	ands	r3, r2
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	bf0c      	ite	eq
 80074aa:	2301      	moveq	r3, #1
 80074ac:	2300      	movne	r3, #0
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	461a      	mov	r2, r3
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d19b      	bne.n	80073f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3720      	adds	r7, #32
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	20000014 	.word	0x20000014

080074c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80074d4:	4b1b      	ldr	r3, [pc, #108]	; (8007544 <SPI_EndRxTxTransaction+0x7c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <SPI_EndRxTxTransaction+0x80>)
 80074da:	fba2 2303 	umull	r2, r3, r2, r3
 80074de:	0d5b      	lsrs	r3, r3, #21
 80074e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80074e4:	fb02 f303 	mul.w	r3, r2, r3
 80074e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074f2:	d112      	bne.n	800751a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2200      	movs	r2, #0
 80074fc:	2180      	movs	r1, #128	; 0x80
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f7ff ff5a 	bl	80073b8 <SPI_WaitFlagStateUntilTimeout>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d016      	beq.n	8007538 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750e:	f043 0220 	orr.w	r2, r3, #32
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e00f      	b.n	800753a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	3b01      	subs	r3, #1
 8007524:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007530:	2b80      	cmp	r3, #128	; 0x80
 8007532:	d0f2      	beq.n	800751a <SPI_EndRxTxTransaction+0x52>
 8007534:	e000      	b.n	8007538 <SPI_EndRxTxTransaction+0x70>
        break;
 8007536:	bf00      	nop
  }

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000014 	.word	0x20000014
 8007548:	165e9f81 	.word	0x165e9f81

0800754c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e041      	b.n	80075e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7fb f83a 	bl	80025ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	3304      	adds	r3, #4
 8007588:	4619      	mov	r1, r3
 800758a:	4610      	mov	r0, r2
 800758c:	f000 faa0 	bl	8007ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d001      	beq.n	8007604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e04e      	b.n	80076a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0201 	orr.w	r2, r2, #1
 800761a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a23      	ldr	r2, [pc, #140]	; (80076b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d022      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762e:	d01d      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a1f      	ldr	r2, [pc, #124]	; (80076b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d018      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1e      	ldr	r2, [pc, #120]	; (80076b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d013      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1c      	ldr	r2, [pc, #112]	; (80076bc <HAL_TIM_Base_Start_IT+0xd0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d00e      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1b      	ldr	r2, [pc, #108]	; (80076c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d009      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a19      	ldr	r2, [pc, #100]	; (80076c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d004      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x80>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a18      	ldr	r2, [pc, #96]	; (80076c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d111      	bne.n	8007690 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b06      	cmp	r3, #6
 800767c:	d010      	beq.n	80076a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f042 0201 	orr.w	r2, r2, #1
 800768c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768e:	e007      	b.n	80076a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0201 	orr.w	r2, r2, #1
 800769e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40010000 	.word	0x40010000
 80076b4:	40000400 	.word	0x40000400
 80076b8:	40000800 	.word	0x40000800
 80076bc:	40000c00 	.word	0x40000c00
 80076c0:	40010400 	.word	0x40010400
 80076c4:	40014000 	.word	0x40014000
 80076c8:	40001800 	.word	0x40001800

080076cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d122      	bne.n	8007728 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d11b      	bne.n	8007728 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f06f 0202 	mvn.w	r2, #2
 80076f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f9bf 	bl	8007a92 <HAL_TIM_IC_CaptureCallback>
 8007714:	e005      	b.n	8007722 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f9b1 	bl	8007a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f9c2 	bl	8007aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f003 0304 	and.w	r3, r3, #4
 8007732:	2b04      	cmp	r3, #4
 8007734:	d122      	bne.n	800777c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f003 0304 	and.w	r3, r3, #4
 8007740:	2b04      	cmp	r3, #4
 8007742:	d11b      	bne.n	800777c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f06f 0204 	mvn.w	r2, #4
 800774c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f995 	bl	8007a92 <HAL_TIM_IC_CaptureCallback>
 8007768:	e005      	b.n	8007776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f987 	bl	8007a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f998 	bl	8007aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b08      	cmp	r3, #8
 8007788:	d122      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b08      	cmp	r3, #8
 8007796:	d11b      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f06f 0208 	mvn.w	r2, #8
 80077a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2204      	movs	r2, #4
 80077a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f96b 	bl	8007a92 <HAL_TIM_IC_CaptureCallback>
 80077bc:	e005      	b.n	80077ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f95d 	bl	8007a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f96e 	bl	8007aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	2b10      	cmp	r3, #16
 80077dc:	d122      	bne.n	8007824 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f003 0310 	and.w	r3, r3, #16
 80077e8:	2b10      	cmp	r3, #16
 80077ea:	d11b      	bne.n	8007824 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0210 	mvn.w	r2, #16
 80077f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2208      	movs	r2, #8
 80077fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f941 	bl	8007a92 <HAL_TIM_IC_CaptureCallback>
 8007810:	e005      	b.n	800781e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f933 	bl	8007a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f944 	bl	8007aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b01      	cmp	r3, #1
 8007830:	d10e      	bne.n	8007850 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b01      	cmp	r3, #1
 800783e:	d107      	bne.n	8007850 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f06f 0201 	mvn.w	r2, #1
 8007848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f90d 	bl	8007a6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785a:	2b80      	cmp	r3, #128	; 0x80
 800785c:	d10e      	bne.n	800787c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007868:	2b80      	cmp	r3, #128	; 0x80
 800786a:	d107      	bne.n	800787c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 faea 	bl	8007e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007886:	2b40      	cmp	r3, #64	; 0x40
 8007888:	d10e      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007894:	2b40      	cmp	r3, #64	; 0x40
 8007896:	d107      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f909 	bl	8007aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	f003 0320 	and.w	r3, r3, #32
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d10e      	bne.n	80078d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b20      	cmp	r3, #32
 80078c2:	d107      	bne.n	80078d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f06f 0220 	mvn.w	r2, #32
 80078cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fab4 	bl	8007e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078d4:	bf00      	nop
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_TIM_ConfigClockSource+0x1c>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e0b4      	b.n	8007a62 <HAL_TIM_ConfigClockSource+0x186>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800791e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007930:	d03e      	beq.n	80079b0 <HAL_TIM_ConfigClockSource+0xd4>
 8007932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007936:	f200 8087 	bhi.w	8007a48 <HAL_TIM_ConfigClockSource+0x16c>
 800793a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800793e:	f000 8086 	beq.w	8007a4e <HAL_TIM_ConfigClockSource+0x172>
 8007942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007946:	d87f      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x16c>
 8007948:	2b70      	cmp	r3, #112	; 0x70
 800794a:	d01a      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0xa6>
 800794c:	2b70      	cmp	r3, #112	; 0x70
 800794e:	d87b      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x16c>
 8007950:	2b60      	cmp	r3, #96	; 0x60
 8007952:	d050      	beq.n	80079f6 <HAL_TIM_ConfigClockSource+0x11a>
 8007954:	2b60      	cmp	r3, #96	; 0x60
 8007956:	d877      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x16c>
 8007958:	2b50      	cmp	r3, #80	; 0x50
 800795a:	d03c      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0xfa>
 800795c:	2b50      	cmp	r3, #80	; 0x50
 800795e:	d873      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x16c>
 8007960:	2b40      	cmp	r3, #64	; 0x40
 8007962:	d058      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0x13a>
 8007964:	2b40      	cmp	r3, #64	; 0x40
 8007966:	d86f      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x16c>
 8007968:	2b30      	cmp	r3, #48	; 0x30
 800796a:	d064      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x15a>
 800796c:	2b30      	cmp	r3, #48	; 0x30
 800796e:	d86b      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x16c>
 8007970:	2b20      	cmp	r3, #32
 8007972:	d060      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x15a>
 8007974:	2b20      	cmp	r3, #32
 8007976:	d867      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x16c>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d05c      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x15a>
 800797c:	2b10      	cmp	r3, #16
 800797e:	d05a      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x15a>
 8007980:	e062      	b.n	8007a48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6818      	ldr	r0, [r3, #0]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	6899      	ldr	r1, [r3, #8]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f000 f9b7 	bl	8007d04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	609a      	str	r2, [r3, #8]
      break;
 80079ae:	e04f      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6818      	ldr	r0, [r3, #0]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	6899      	ldr	r1, [r3, #8]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f000 f9a0 	bl	8007d04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079d2:	609a      	str	r2, [r3, #8]
      break;
 80079d4:	e03c      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	6859      	ldr	r1, [r3, #4]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	461a      	mov	r2, r3
 80079e4:	f000 f914 	bl	8007c10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2150      	movs	r1, #80	; 0x50
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 f96d 	bl	8007cce <TIM_ITRx_SetConfig>
      break;
 80079f4:	e02c      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	6859      	ldr	r1, [r3, #4]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f000 f933 	bl	8007c6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2160      	movs	r1, #96	; 0x60
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 f95d 	bl	8007cce <TIM_ITRx_SetConfig>
      break;
 8007a14:	e01c      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	6859      	ldr	r1, [r3, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f000 f8f4 	bl	8007c10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2140      	movs	r1, #64	; 0x40
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 f94d 	bl	8007cce <TIM_ITRx_SetConfig>
      break;
 8007a34:	e00c      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f000 f944 	bl	8007cce <TIM_ITRx_SetConfig>
      break;
 8007a46:	e003      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a4c:	e000      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b083      	sub	sp, #12
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ac2:	bf00      	nop
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
	...

08007ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a40      	ldr	r2, [pc, #256]	; (8007be4 <TIM_Base_SetConfig+0x114>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d013      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aee:	d00f      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a3d      	ldr	r2, [pc, #244]	; (8007be8 <TIM_Base_SetConfig+0x118>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00b      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a3c      	ldr	r2, [pc, #240]	; (8007bec <TIM_Base_SetConfig+0x11c>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d007      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a3b      	ldr	r2, [pc, #236]	; (8007bf0 <TIM_Base_SetConfig+0x120>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a3a      	ldr	r2, [pc, #232]	; (8007bf4 <TIM_Base_SetConfig+0x124>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d108      	bne.n	8007b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a2f      	ldr	r2, [pc, #188]	; (8007be4 <TIM_Base_SetConfig+0x114>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d02b      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b30:	d027      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a2c      	ldr	r2, [pc, #176]	; (8007be8 <TIM_Base_SetConfig+0x118>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d023      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a2b      	ldr	r2, [pc, #172]	; (8007bec <TIM_Base_SetConfig+0x11c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d01f      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a2a      	ldr	r2, [pc, #168]	; (8007bf0 <TIM_Base_SetConfig+0x120>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d01b      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a29      	ldr	r2, [pc, #164]	; (8007bf4 <TIM_Base_SetConfig+0x124>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d017      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a28      	ldr	r2, [pc, #160]	; (8007bf8 <TIM_Base_SetConfig+0x128>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d013      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a27      	ldr	r2, [pc, #156]	; (8007bfc <TIM_Base_SetConfig+0x12c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d00f      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a26      	ldr	r2, [pc, #152]	; (8007c00 <TIM_Base_SetConfig+0x130>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00b      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a25      	ldr	r2, [pc, #148]	; (8007c04 <TIM_Base_SetConfig+0x134>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d007      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a24      	ldr	r2, [pc, #144]	; (8007c08 <TIM_Base_SetConfig+0x138>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d003      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a23      	ldr	r2, [pc, #140]	; (8007c0c <TIM_Base_SetConfig+0x13c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d108      	bne.n	8007b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a0a      	ldr	r2, [pc, #40]	; (8007be4 <TIM_Base_SetConfig+0x114>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d003      	beq.n	8007bc8 <TIM_Base_SetConfig+0xf8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a0c      	ldr	r2, [pc, #48]	; (8007bf4 <TIM_Base_SetConfig+0x124>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d103      	bne.n	8007bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	691a      	ldr	r2, [r3, #16]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	615a      	str	r2, [r3, #20]
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	40010000 	.word	0x40010000
 8007be8:	40000400 	.word	0x40000400
 8007bec:	40000800 	.word	0x40000800
 8007bf0:	40000c00 	.word	0x40000c00
 8007bf4:	40010400 	.word	0x40010400
 8007bf8:	40014000 	.word	0x40014000
 8007bfc:	40014400 	.word	0x40014400
 8007c00:	40014800 	.word	0x40014800
 8007c04:	40001800 	.word	0x40001800
 8007c08:	40001c00 	.word	0x40001c00
 8007c0c:	40002000 	.word	0x40002000

08007c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	f023 0201 	bic.w	r2, r3, #1
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f023 030a 	bic.w	r3, r3, #10
 8007c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	621a      	str	r2, [r3, #32]
}
 8007c62:	bf00      	nop
 8007c64:	371c      	adds	r7, #28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b087      	sub	sp, #28
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f023 0210 	bic.w	r2, r3, #16
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	031b      	lsls	r3, r3, #12
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007caa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	621a      	str	r2, [r3, #32]
}
 8007cc2:	bf00      	nop
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b085      	sub	sp, #20
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f043 0307 	orr.w	r3, r3, #7
 8007cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	609a      	str	r2, [r3, #8]
}
 8007cf8:	bf00      	nop
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	021a      	lsls	r2, r3, #8
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	431a      	orrs	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	609a      	str	r2, [r3, #8]
}
 8007d38:	bf00      	nop
 8007d3a:	371c      	adds	r7, #28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e05a      	b.n	8007e12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a21      	ldr	r2, [pc, #132]	; (8007e20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d022      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007da8:	d01d      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a1d      	ldr	r2, [pc, #116]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d018      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a1b      	ldr	r2, [pc, #108]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d013      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a1a      	ldr	r2, [pc, #104]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d00e      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a18      	ldr	r2, [pc, #96]	; (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d009      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a17      	ldr	r2, [pc, #92]	; (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d004      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a15      	ldr	r2, [pc, #84]	; (8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d10c      	bne.n	8007e00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	40010000 	.word	0x40010000
 8007e24:	40000400 	.word	0x40000400
 8007e28:	40000800 	.word	0x40000800
 8007e2c:	40000c00 	.word	0x40000c00
 8007e30:	40010400 	.word	0x40010400
 8007e34:	40014000 	.word	0x40014000
 8007e38:	40001800 	.word	0x40001800

08007e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e03f      	b.n	8007ef6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d106      	bne.n	8007e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7fa fbd4 	bl	8002638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2224      	movs	r2, #36	; 0x24
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fddf 	bl	8008a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	691a      	ldr	r2, [r3, #16]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	695a      	ldr	r2, [r3, #20]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b08a      	sub	sp, #40	; 0x28
 8007f02:	af02      	add	r7, sp, #8
 8007f04:	60f8      	str	r0, [r7, #12]
 8007f06:	60b9      	str	r1, [r7, #8]
 8007f08:	603b      	str	r3, [r7, #0]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b20      	cmp	r3, #32
 8007f1c:	d17c      	bne.n	8008018 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <HAL_UART_Transmit+0x2c>
 8007f24:	88fb      	ldrh	r3, [r7, #6]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e075      	b.n	800801a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <HAL_UART_Transmit+0x3e>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e06e      	b.n	800801a <HAL_UART_Transmit+0x11c>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2221      	movs	r2, #33	; 0x21
 8007f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f52:	f7fc fc9d 	bl	8004890 <HAL_GetTick>
 8007f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	88fa      	ldrh	r2, [r7, #6]
 8007f5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	88fa      	ldrh	r2, [r7, #6]
 8007f62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f6c:	d108      	bne.n	8007f80 <HAL_UART_Transmit+0x82>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d104      	bne.n	8007f80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	61bb      	str	r3, [r7, #24]
 8007f7e:	e003      	b.n	8007f88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f84:	2300      	movs	r3, #0
 8007f86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f90:	e02a      	b.n	8007fe8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2180      	movs	r1, #128	; 0x80
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 fb1f 	bl	80085e0 <UART_WaitOnFlagUntilTimeout>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e036      	b.n	800801a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10b      	bne.n	8007fca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	61bb      	str	r3, [r7, #24]
 8007fc8:	e007      	b.n	8007fda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	781a      	ldrb	r2, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1cf      	bne.n	8007f92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2140      	movs	r1, #64	; 0x40
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 faef 	bl	80085e0 <UART_WaitOnFlagUntilTimeout>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e006      	b.n	800801a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2220      	movs	r2, #32
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	e000      	b.n	800801a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008018:	2302      	movs	r3, #2
  }
}
 800801a:	4618      	mov	r0, r3
 800801c:	3720      	adds	r7, #32
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	4613      	mov	r3, r2
 800802e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b20      	cmp	r3, #32
 800803a:	d11d      	bne.n	8008078 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <HAL_UART_Receive_IT+0x26>
 8008042:	88fb      	ldrh	r3, [r7, #6]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e016      	b.n	800807a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <HAL_UART_Receive_IT+0x38>
 8008056:	2302      	movs	r3, #2
 8008058:	e00f      	b.n	800807a <HAL_UART_Receive_IT+0x58>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008068:	88fb      	ldrh	r3, [r7, #6]
 800806a:	461a      	mov	r2, r3
 800806c:	68b9      	ldr	r1, [r7, #8]
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 fb24 	bl	80086bc <UART_Start_Receive_IT>
 8008074:	4603      	mov	r3, r0
 8008076:	e000      	b.n	800807a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008078:	2302      	movs	r3, #2
  }
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b0ba      	sub	sp, #232	; 0xe8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80080b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ba:	f003 030f 	and.w	r3, r3, #15
 80080be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80080c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10f      	bne.n	80080ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d009      	beq.n	80080ea <HAL_UART_IRQHandler+0x66>
 80080d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080da:	f003 0320 	and.w	r3, r3, #32
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fc07 	bl	80088f6 <UART_Receive_IT>
      return;
 80080e8:	e256      	b.n	8008598 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 80de 	beq.w	80082b0 <HAL_UART_IRQHandler+0x22c>
 80080f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d106      	bne.n	800810e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008104:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 80d1 	beq.w	80082b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800810e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00b      	beq.n	8008132 <HAL_UART_IRQHandler+0xae>
 800811a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800811e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008122:	2b00      	cmp	r3, #0
 8008124:	d005      	beq.n	8008132 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812a:	f043 0201 	orr.w	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008136:	f003 0304 	and.w	r3, r3, #4
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <HAL_UART_IRQHandler+0xd2>
 800813e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	f043 0202 	orr.w	r2, r3, #2
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815a:	f003 0302 	and.w	r3, r3, #2
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00b      	beq.n	800817a <HAL_UART_IRQHandler+0xf6>
 8008162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	f043 0204 	orr.w	r2, r3, #4
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800817a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817e:	f003 0308 	and.w	r3, r3, #8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d011      	beq.n	80081aa <HAL_UART_IRQHandler+0x126>
 8008186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b00      	cmp	r3, #0
 8008190:	d105      	bne.n	800819e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d005      	beq.n	80081aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	f043 0208 	orr.w	r2, r3, #8
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 81ed 	beq.w	800858e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d008      	beq.n	80081d2 <HAL_UART_IRQHandler+0x14e>
 80081c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081c4:	f003 0320 	and.w	r3, r3, #32
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fb92 	bl	80088f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081dc:	2b40      	cmp	r3, #64	; 0x40
 80081de:	bf0c      	ite	eq
 80081e0:	2301      	moveq	r3, #1
 80081e2:	2300      	movne	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	f003 0308 	and.w	r3, r3, #8
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d103      	bne.n	80081fe <HAL_UART_IRQHandler+0x17a>
 80081f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d04f      	beq.n	800829e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fa9a 	bl	8008738 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820e:	2b40      	cmp	r3, #64	; 0x40
 8008210:	d141      	bne.n	8008296 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3314      	adds	r3, #20
 8008218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800822c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3314      	adds	r3, #20
 800823a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800823e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800824a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1d9      	bne.n	8008212 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008262:	2b00      	cmp	r3, #0
 8008264:	d013      	beq.n	800828e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	4a7d      	ldr	r2, [pc, #500]	; (8008460 <HAL_UART_IRQHandler+0x3dc>)
 800826c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008272:	4618      	mov	r0, r3
 8008274:	f7fd f9c8 	bl	8005608 <HAL_DMA_Abort_IT>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d016      	beq.n	80082ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008288:	4610      	mov	r0, r2
 800828a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800828c:	e00e      	b.n	80082ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f990 	bl	80085b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008294:	e00a      	b.n	80082ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f98c 	bl	80085b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800829c:	e006      	b.n	80082ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f988 	bl	80085b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80082aa:	e170      	b.n	800858e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ac:	bf00      	nop
    return;
 80082ae:	e16e      	b.n	800858e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	f040 814a 	bne.w	800854e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80082ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082be:	f003 0310 	and.w	r3, r3, #16
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 8143 	beq.w	800854e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80082c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082cc:	f003 0310 	and.w	r3, r3, #16
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 813c 	beq.w	800854e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082d6:	2300      	movs	r3, #0
 80082d8:	60bb      	str	r3, [r7, #8]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60bb      	str	r3, [r7, #8]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	60bb      	str	r3, [r7, #8]
 80082ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f6:	2b40      	cmp	r3, #64	; 0x40
 80082f8:	f040 80b4 	bne.w	8008464 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008308:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 8140 	beq.w	8008592 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800831a:	429a      	cmp	r2, r3
 800831c:	f080 8139 	bcs.w	8008592 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008326:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008332:	f000 8088 	beq.w	8008446 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	330c      	adds	r3, #12
 800833c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800834c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	330c      	adds	r3, #12
 800835e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008362:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800836e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800837a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1d9      	bne.n	8008336 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3314      	adds	r3, #20
 8008388:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008394:	f023 0301 	bic.w	r3, r3, #1
 8008398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3314      	adds	r3, #20
 80083a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e1      	bne.n	8008382 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3314      	adds	r3, #20
 80083c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3314      	adds	r3, #20
 80083de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1e3      	bne.n	80083be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	330c      	adds	r3, #12
 800840a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008416:	f023 0310 	bic.w	r3, r3, #16
 800841a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	330c      	adds	r3, #12
 8008424:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008428:	65ba      	str	r2, [r7, #88]	; 0x58
 800842a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800842e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008430:	e841 2300 	strex	r3, r2, [r1]
 8008434:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1e3      	bne.n	8008404 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008440:	4618      	mov	r0, r3
 8008442:	f7fd f871 	bl	8005528 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800844e:	b29b      	uxth	r3, r3
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	b29b      	uxth	r3, r3
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f8b6 	bl	80085c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800845c:	e099      	b.n	8008592 <HAL_UART_IRQHandler+0x50e>
 800845e:	bf00      	nop
 8008460:	080087ff 	.word	0x080087ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800846c:	b29b      	uxth	r3, r3
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008478:	b29b      	uxth	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 808b 	beq.w	8008596 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8086 	beq.w	8008596 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	330c      	adds	r3, #12
 8008490:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800849a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	330c      	adds	r3, #12
 80084aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80084ae:	647a      	str	r2, [r7, #68]	; 0x44
 80084b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e3      	bne.n	800848a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3314      	adds	r3, #20
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	623b      	str	r3, [r7, #32]
   return(result);
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3314      	adds	r3, #20
 80084e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084e6:	633a      	str	r2, [r7, #48]	; 0x30
 80084e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e3      	bne.n	80084c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2220      	movs	r2, #32
 80084fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	330c      	adds	r3, #12
 800850e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	60fb      	str	r3, [r7, #12]
   return(result);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 0310 	bic.w	r3, r3, #16
 800851e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	330c      	adds	r3, #12
 8008528:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800852c:	61fa      	str	r2, [r7, #28]
 800852e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	69b9      	ldr	r1, [r7, #24]
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	617b      	str	r3, [r7, #20]
   return(result);
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e3      	bne.n	8008508 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f83e 	bl	80085c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800854c:	e023      	b.n	8008596 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800854e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008556:	2b00      	cmp	r3, #0
 8008558:	d009      	beq.n	800856e <HAL_UART_IRQHandler+0x4ea>
 800855a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800855e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f95d 	bl	8008826 <UART_Transmit_IT>
    return;
 800856c:	e014      	b.n	8008598 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800856e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00e      	beq.n	8008598 <HAL_UART_IRQHandler+0x514>
 800857a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800857e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008582:	2b00      	cmp	r3, #0
 8008584:	d008      	beq.n	8008598 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f99d 	bl	80088c6 <UART_EndTransmit_IT>
    return;
 800858c:	e004      	b.n	8008598 <HAL_UART_IRQHandler+0x514>
    return;
 800858e:	bf00      	nop
 8008590:	e002      	b.n	8008598 <HAL_UART_IRQHandler+0x514>
      return;
 8008592:	bf00      	nop
 8008594:	e000      	b.n	8008598 <HAL_UART_IRQHandler+0x514>
      return;
 8008596:	bf00      	nop
  }
}
 8008598:	37e8      	adds	r7, #232	; 0xe8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop

080085a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b090      	sub	sp, #64	; 0x40
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	603b      	str	r3, [r7, #0]
 80085ec:	4613      	mov	r3, r2
 80085ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f0:	e050      	b.n	8008694 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085f8:	d04c      	beq.n	8008694 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d007      	beq.n	8008610 <UART_WaitOnFlagUntilTimeout+0x30>
 8008600:	f7fc f946 	bl	8004890 <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800860c:	429a      	cmp	r2, r3
 800860e:	d241      	bcs.n	8008694 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	330c      	adds	r3, #12
 8008616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	e853 3f00 	ldrex	r3, [r3]
 800861e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	330c      	adds	r3, #12
 800862e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008630:	637a      	str	r2, [r7, #52]	; 0x34
 8008632:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008634:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008638:	e841 2300 	strex	r3, r2, [r1]
 800863c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800863e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e5      	bne.n	8008610 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3314      	adds	r3, #20
 800864a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	613b      	str	r3, [r7, #16]
   return(result);
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f023 0301 	bic.w	r3, r3, #1
 800865a:	63bb      	str	r3, [r7, #56]	; 0x38
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3314      	adds	r3, #20
 8008662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008664:	623a      	str	r2, [r7, #32]
 8008666:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	69f9      	ldr	r1, [r7, #28]
 800866a:	6a3a      	ldr	r2, [r7, #32]
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	61bb      	str	r3, [r7, #24]
   return(result);
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e5      	bne.n	8008644 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2220      	movs	r2, #32
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2220      	movs	r2, #32
 8008684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e00f      	b.n	80086b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	4013      	ands	r3, r2
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	bf0c      	ite	eq
 80086a4:	2301      	moveq	r3, #1
 80086a6:	2300      	movne	r3, #0
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	461a      	mov	r2, r3
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d09f      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3740      	adds	r7, #64	; 0x40
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	88fa      	ldrh	r2, [r7, #6]
 80086d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	88fa      	ldrh	r2, [r7, #6]
 80086da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2222      	movs	r2, #34	; 0x22
 80086e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d007      	beq.n	800870a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68da      	ldr	r2, [r3, #12]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008708:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	695a      	ldr	r2, [r3, #20]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f042 0201 	orr.w	r2, r2, #1
 8008718:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 0220 	orr.w	r2, r2, #32
 8008728:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b095      	sub	sp, #84	; 0x54
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	330c      	adds	r3, #12
 8008746:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	330c      	adds	r3, #12
 800875e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008760:	643a      	str	r2, [r7, #64]	; 0x40
 8008762:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800876e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e5      	bne.n	8008740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3314      	adds	r3, #20
 800877a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	61fb      	str	r3, [r7, #28]
   return(result);
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	f023 0301 	bic.w	r3, r3, #1
 800878a:	64bb      	str	r3, [r7, #72]	; 0x48
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3314      	adds	r3, #20
 8008792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008794:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800879a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e5      	bne.n	8008774 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d119      	bne.n	80087e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	330c      	adds	r3, #12
 80087b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	e853 3f00 	ldrex	r3, [r3]
 80087be:	60bb      	str	r3, [r7, #8]
   return(result);
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f023 0310 	bic.w	r3, r3, #16
 80087c6:	647b      	str	r3, [r7, #68]	; 0x44
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	330c      	adds	r3, #12
 80087ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087d0:	61ba      	str	r2, [r7, #24]
 80087d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d4:	6979      	ldr	r1, [r7, #20]
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	e841 2300 	strex	r3, r2, [r1]
 80087dc:	613b      	str	r3, [r7, #16]
   return(result);
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e5      	bne.n	80087b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2220      	movs	r2, #32
 80087e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80087f2:	bf00      	nop
 80087f4:	3754      	adds	r7, #84	; 0x54
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f7ff fecb 	bl	80085b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800881e:	bf00      	nop
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008826:	b480      	push	{r7}
 8008828:	b085      	sub	sp, #20
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b21      	cmp	r3, #33	; 0x21
 8008838:	d13e      	bne.n	80088b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008842:	d114      	bne.n	800886e <UART_Transmit_IT+0x48>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d110      	bne.n	800886e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008860:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	1c9a      	adds	r2, r3, #2
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	621a      	str	r2, [r3, #32]
 800886c:	e008      	b.n	8008880 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	1c59      	adds	r1, r3, #1
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	6211      	str	r1, [r2, #32]
 8008878:	781a      	ldrb	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008884:	b29b      	uxth	r3, r3
 8008886:	3b01      	subs	r3, #1
 8008888:	b29b      	uxth	r3, r3
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	4619      	mov	r1, r3
 800888e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10f      	bne.n	80088b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68da      	ldr	r2, [r3, #12]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68da      	ldr	r2, [r3, #12]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	e000      	b.n	80088ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088b8:	2302      	movs	r3, #2
  }
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff fe5a 	bl	80085a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b08c      	sub	sp, #48	; 0x30
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b22      	cmp	r3, #34	; 0x22
 8008908:	f040 80ab 	bne.w	8008a62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008914:	d117      	bne.n	8008946 <UART_Receive_IT+0x50>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d113      	bne.n	8008946 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800891e:	2300      	movs	r3, #0
 8008920:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008926:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	b29b      	uxth	r3, r3
 8008930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008934:	b29a      	uxth	r2, r3
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	1c9a      	adds	r2, r3, #2
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	629a      	str	r2, [r3, #40]	; 0x28
 8008944:	e026      	b.n	8008994 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800894c:	2300      	movs	r3, #0
 800894e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008958:	d007      	beq.n	800896a <UART_Receive_IT+0x74>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10a      	bne.n	8008978 <UART_Receive_IT+0x82>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d106      	bne.n	8008978 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	b2da      	uxtb	r2, r3
 8008972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008974:	701a      	strb	r2, [r3, #0]
 8008976:	e008      	b.n	800898a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008984:	b2da      	uxtb	r2, r3
 8008986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008988:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898e:	1c5a      	adds	r2, r3, #1
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008998:	b29b      	uxth	r3, r3
 800899a:	3b01      	subs	r3, #1
 800899c:	b29b      	uxth	r3, r3
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	4619      	mov	r1, r3
 80089a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d15a      	bne.n	8008a5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68da      	ldr	r2, [r3, #12]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0220 	bic.w	r2, r2, #32
 80089b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695a      	ldr	r2, [r3, #20]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0201 	bic.w	r2, r2, #1
 80089d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2220      	movs	r2, #32
 80089dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d135      	bne.n	8008a54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	330c      	adds	r3, #12
 80089f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	613b      	str	r3, [r7, #16]
   return(result);
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f023 0310 	bic.w	r3, r3, #16
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	330c      	adds	r3, #12
 8008a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0e:	623a      	str	r2, [r7, #32]
 8008a10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	69f9      	ldr	r1, [r7, #28]
 8008a14:	6a3a      	ldr	r2, [r7, #32]
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e5      	bne.n	80089ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0310 	and.w	r3, r3, #16
 8008a2c:	2b10      	cmp	r3, #16
 8008a2e:	d10a      	bne.n	8008a46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff fdbb 	bl	80085c8 <HAL_UARTEx_RxEventCallback>
 8008a52:	e002      	b.n	8008a5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7f9 fb9b 	bl	8002190 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e002      	b.n	8008a64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	e000      	b.n	8008a64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a62:	2302      	movs	r3, #2
  }
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3730      	adds	r7, #48	; 0x30
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a70:	b0c0      	sub	sp, #256	; 0x100
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a88:	68d9      	ldr	r1, [r3, #12]
 8008a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	ea40 0301 	orr.w	r3, r0, r1
 8008a94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9a:	689a      	ldr	r2, [r3, #8]
 8008a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	431a      	orrs	r2, r3
 8008aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ac4:	f021 010c 	bic.w	r1, r1, #12
 8008ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae6:	6999      	ldr	r1, [r3, #24]
 8008ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	ea40 0301 	orr.w	r3, r0, r1
 8008af2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	4b8f      	ldr	r3, [pc, #572]	; (8008d38 <UART_SetConfig+0x2cc>)
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d005      	beq.n	8008b0c <UART_SetConfig+0xa0>
 8008b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	4b8d      	ldr	r3, [pc, #564]	; (8008d3c <UART_SetConfig+0x2d0>)
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d104      	bne.n	8008b16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b0c:	f7fd fb62 	bl	80061d4 <HAL_RCC_GetPCLK2Freq>
 8008b10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b14:	e003      	b.n	8008b1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b16:	f7fd fb49 	bl	80061ac <HAL_RCC_GetPCLK1Freq>
 8008b1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b28:	f040 810c 	bne.w	8008d44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b30:	2200      	movs	r2, #0
 8008b32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b3e:	4622      	mov	r2, r4
 8008b40:	462b      	mov	r3, r5
 8008b42:	1891      	adds	r1, r2, r2
 8008b44:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b46:	415b      	adcs	r3, r3
 8008b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b4e:	4621      	mov	r1, r4
 8008b50:	eb12 0801 	adds.w	r8, r2, r1
 8008b54:	4629      	mov	r1, r5
 8008b56:	eb43 0901 	adc.w	r9, r3, r1
 8008b5a:	f04f 0200 	mov.w	r2, #0
 8008b5e:	f04f 0300 	mov.w	r3, #0
 8008b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b6e:	4690      	mov	r8, r2
 8008b70:	4699      	mov	r9, r3
 8008b72:	4623      	mov	r3, r4
 8008b74:	eb18 0303 	adds.w	r3, r8, r3
 8008b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b7c:	462b      	mov	r3, r5
 8008b7e:	eb49 0303 	adc.w	r3, r9, r3
 8008b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008b96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	18db      	adds	r3, r3, r3
 8008b9e:	653b      	str	r3, [r7, #80]	; 0x50
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	eb42 0303 	adc.w	r3, r2, r3
 8008ba6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ba8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008bac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bb0:	f7f8 f83a 	bl	8000c28 <__aeabi_uldivmod>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4b61      	ldr	r3, [pc, #388]	; (8008d40 <UART_SetConfig+0x2d4>)
 8008bba:	fba3 2302 	umull	r2, r3, r3, r2
 8008bbe:	095b      	lsrs	r3, r3, #5
 8008bc0:	011c      	lsls	r4, r3, #4
 8008bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008bd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008bd4:	4642      	mov	r2, r8
 8008bd6:	464b      	mov	r3, r9
 8008bd8:	1891      	adds	r1, r2, r2
 8008bda:	64b9      	str	r1, [r7, #72]	; 0x48
 8008bdc:	415b      	adcs	r3, r3
 8008bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008be0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008be4:	4641      	mov	r1, r8
 8008be6:	eb12 0a01 	adds.w	sl, r2, r1
 8008bea:	4649      	mov	r1, r9
 8008bec:	eb43 0b01 	adc.w	fp, r3, r1
 8008bf0:	f04f 0200 	mov.w	r2, #0
 8008bf4:	f04f 0300 	mov.w	r3, #0
 8008bf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c04:	4692      	mov	sl, r2
 8008c06:	469b      	mov	fp, r3
 8008c08:	4643      	mov	r3, r8
 8008c0a:	eb1a 0303 	adds.w	r3, sl, r3
 8008c0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c12:	464b      	mov	r3, r9
 8008c14:	eb4b 0303 	adc.w	r3, fp, r3
 8008c18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c30:	460b      	mov	r3, r1
 8008c32:	18db      	adds	r3, r3, r3
 8008c34:	643b      	str	r3, [r7, #64]	; 0x40
 8008c36:	4613      	mov	r3, r2
 8008c38:	eb42 0303 	adc.w	r3, r2, r3
 8008c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c46:	f7f7 ffef 	bl	8000c28 <__aeabi_uldivmod>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	4611      	mov	r1, r2
 8008c50:	4b3b      	ldr	r3, [pc, #236]	; (8008d40 <UART_SetConfig+0x2d4>)
 8008c52:	fba3 2301 	umull	r2, r3, r3, r1
 8008c56:	095b      	lsrs	r3, r3, #5
 8008c58:	2264      	movs	r2, #100	; 0x64
 8008c5a:	fb02 f303 	mul.w	r3, r2, r3
 8008c5e:	1acb      	subs	r3, r1, r3
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c66:	4b36      	ldr	r3, [pc, #216]	; (8008d40 <UART_SetConfig+0x2d4>)
 8008c68:	fba3 2302 	umull	r2, r3, r3, r2
 8008c6c:	095b      	lsrs	r3, r3, #5
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c74:	441c      	add	r4, r3
 8008c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008c88:	4642      	mov	r2, r8
 8008c8a:	464b      	mov	r3, r9
 8008c8c:	1891      	adds	r1, r2, r2
 8008c8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c90:	415b      	adcs	r3, r3
 8008c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c98:	4641      	mov	r1, r8
 8008c9a:	1851      	adds	r1, r2, r1
 8008c9c:	6339      	str	r1, [r7, #48]	; 0x30
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	414b      	adcs	r3, r1
 8008ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	f04f 0300 	mov.w	r3, #0
 8008cac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008cb0:	4659      	mov	r1, fp
 8008cb2:	00cb      	lsls	r3, r1, #3
 8008cb4:	4651      	mov	r1, sl
 8008cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cba:	4651      	mov	r1, sl
 8008cbc:	00ca      	lsls	r2, r1, #3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	4642      	mov	r2, r8
 8008cc6:	189b      	adds	r3, r3, r2
 8008cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ccc:	464b      	mov	r3, r9
 8008cce:	460a      	mov	r2, r1
 8008cd0:	eb42 0303 	adc.w	r3, r2, r3
 8008cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ce4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ce8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008cec:	460b      	mov	r3, r1
 8008cee:	18db      	adds	r3, r3, r3
 8008cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	eb42 0303 	adc.w	r3, r2, r3
 8008cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d02:	f7f7 ff91 	bl	8000c28 <__aeabi_uldivmod>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <UART_SetConfig+0x2d4>)
 8008d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d10:	095b      	lsrs	r3, r3, #5
 8008d12:	2164      	movs	r1, #100	; 0x64
 8008d14:	fb01 f303 	mul.w	r3, r1, r3
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	3332      	adds	r3, #50	; 0x32
 8008d1e:	4a08      	ldr	r2, [pc, #32]	; (8008d40 <UART_SetConfig+0x2d4>)
 8008d20:	fba2 2303 	umull	r2, r3, r2, r3
 8008d24:	095b      	lsrs	r3, r3, #5
 8008d26:	f003 0207 	and.w	r2, r3, #7
 8008d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4422      	add	r2, r4
 8008d32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d34:	e106      	b.n	8008f44 <UART_SetConfig+0x4d8>
 8008d36:	bf00      	nop
 8008d38:	40011000 	.word	0x40011000
 8008d3c:	40011400 	.word	0x40011400
 8008d40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d56:	4642      	mov	r2, r8
 8008d58:	464b      	mov	r3, r9
 8008d5a:	1891      	adds	r1, r2, r2
 8008d5c:	6239      	str	r1, [r7, #32]
 8008d5e:	415b      	adcs	r3, r3
 8008d60:	627b      	str	r3, [r7, #36]	; 0x24
 8008d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d66:	4641      	mov	r1, r8
 8008d68:	1854      	adds	r4, r2, r1
 8008d6a:	4649      	mov	r1, r9
 8008d6c:	eb43 0501 	adc.w	r5, r3, r1
 8008d70:	f04f 0200 	mov.w	r2, #0
 8008d74:	f04f 0300 	mov.w	r3, #0
 8008d78:	00eb      	lsls	r3, r5, #3
 8008d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d7e:	00e2      	lsls	r2, r4, #3
 8008d80:	4614      	mov	r4, r2
 8008d82:	461d      	mov	r5, r3
 8008d84:	4643      	mov	r3, r8
 8008d86:	18e3      	adds	r3, r4, r3
 8008d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	eb45 0303 	adc.w	r3, r5, r3
 8008d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008da2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008da6:	f04f 0200 	mov.w	r2, #0
 8008daa:	f04f 0300 	mov.w	r3, #0
 8008dae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008db2:	4629      	mov	r1, r5
 8008db4:	008b      	lsls	r3, r1, #2
 8008db6:	4621      	mov	r1, r4
 8008db8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	008a      	lsls	r2, r1, #2
 8008dc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008dc4:	f7f7 ff30 	bl	8000c28 <__aeabi_uldivmod>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4b60      	ldr	r3, [pc, #384]	; (8008f50 <UART_SetConfig+0x4e4>)
 8008dce:	fba3 2302 	umull	r2, r3, r3, r2
 8008dd2:	095b      	lsrs	r3, r3, #5
 8008dd4:	011c      	lsls	r4, r3, #4
 8008dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008de0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008de4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008de8:	4642      	mov	r2, r8
 8008dea:	464b      	mov	r3, r9
 8008dec:	1891      	adds	r1, r2, r2
 8008dee:	61b9      	str	r1, [r7, #24]
 8008df0:	415b      	adcs	r3, r3
 8008df2:	61fb      	str	r3, [r7, #28]
 8008df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008df8:	4641      	mov	r1, r8
 8008dfa:	1851      	adds	r1, r2, r1
 8008dfc:	6139      	str	r1, [r7, #16]
 8008dfe:	4649      	mov	r1, r9
 8008e00:	414b      	adcs	r3, r1
 8008e02:	617b      	str	r3, [r7, #20]
 8008e04:	f04f 0200 	mov.w	r2, #0
 8008e08:	f04f 0300 	mov.w	r3, #0
 8008e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e10:	4659      	mov	r1, fp
 8008e12:	00cb      	lsls	r3, r1, #3
 8008e14:	4651      	mov	r1, sl
 8008e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e1a:	4651      	mov	r1, sl
 8008e1c:	00ca      	lsls	r2, r1, #3
 8008e1e:	4610      	mov	r0, r2
 8008e20:	4619      	mov	r1, r3
 8008e22:	4603      	mov	r3, r0
 8008e24:	4642      	mov	r2, r8
 8008e26:	189b      	adds	r3, r3, r2
 8008e28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e2c:	464b      	mov	r3, r9
 8008e2e:	460a      	mov	r2, r1
 8008e30:	eb42 0303 	adc.w	r3, r2, r3
 8008e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e44:	f04f 0200 	mov.w	r2, #0
 8008e48:	f04f 0300 	mov.w	r3, #0
 8008e4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e50:	4649      	mov	r1, r9
 8008e52:	008b      	lsls	r3, r1, #2
 8008e54:	4641      	mov	r1, r8
 8008e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e5a:	4641      	mov	r1, r8
 8008e5c:	008a      	lsls	r2, r1, #2
 8008e5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e62:	f7f7 fee1 	bl	8000c28 <__aeabi_uldivmod>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	4b38      	ldr	r3, [pc, #224]	; (8008f50 <UART_SetConfig+0x4e4>)
 8008e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8008e72:	095b      	lsrs	r3, r3, #5
 8008e74:	2264      	movs	r2, #100	; 0x64
 8008e76:	fb02 f303 	mul.w	r3, r2, r3
 8008e7a:	1acb      	subs	r3, r1, r3
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	3332      	adds	r3, #50	; 0x32
 8008e80:	4a33      	ldr	r2, [pc, #204]	; (8008f50 <UART_SetConfig+0x4e4>)
 8008e82:	fba2 2303 	umull	r2, r3, r2, r3
 8008e86:	095b      	lsrs	r3, r3, #5
 8008e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e8c:	441c      	add	r4, r3
 8008e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e92:	2200      	movs	r2, #0
 8008e94:	673b      	str	r3, [r7, #112]	; 0x70
 8008e96:	677a      	str	r2, [r7, #116]	; 0x74
 8008e98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008e9c:	4642      	mov	r2, r8
 8008e9e:	464b      	mov	r3, r9
 8008ea0:	1891      	adds	r1, r2, r2
 8008ea2:	60b9      	str	r1, [r7, #8]
 8008ea4:	415b      	adcs	r3, r3
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eac:	4641      	mov	r1, r8
 8008eae:	1851      	adds	r1, r2, r1
 8008eb0:	6039      	str	r1, [r7, #0]
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	414b      	adcs	r3, r1
 8008eb6:	607b      	str	r3, [r7, #4]
 8008eb8:	f04f 0200 	mov.w	r2, #0
 8008ebc:	f04f 0300 	mov.w	r3, #0
 8008ec0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ec4:	4659      	mov	r1, fp
 8008ec6:	00cb      	lsls	r3, r1, #3
 8008ec8:	4651      	mov	r1, sl
 8008eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ece:	4651      	mov	r1, sl
 8008ed0:	00ca      	lsls	r2, r1, #3
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	4642      	mov	r2, r8
 8008eda:	189b      	adds	r3, r3, r2
 8008edc:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ede:	464b      	mov	r3, r9
 8008ee0:	460a      	mov	r2, r1
 8008ee2:	eb42 0303 	adc.w	r3, r2, r3
 8008ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8008ef2:	667a      	str	r2, [r7, #100]	; 0x64
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f00:	4649      	mov	r1, r9
 8008f02:	008b      	lsls	r3, r1, #2
 8008f04:	4641      	mov	r1, r8
 8008f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f0a:	4641      	mov	r1, r8
 8008f0c:	008a      	lsls	r2, r1, #2
 8008f0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f12:	f7f7 fe89 	bl	8000c28 <__aeabi_uldivmod>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4b0d      	ldr	r3, [pc, #52]	; (8008f50 <UART_SetConfig+0x4e4>)
 8008f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f20:	095b      	lsrs	r3, r3, #5
 8008f22:	2164      	movs	r1, #100	; 0x64
 8008f24:	fb01 f303 	mul.w	r3, r1, r3
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	3332      	adds	r3, #50	; 0x32
 8008f2e:	4a08      	ldr	r2, [pc, #32]	; (8008f50 <UART_SetConfig+0x4e4>)
 8008f30:	fba2 2303 	umull	r2, r3, r2, r3
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	f003 020f 	and.w	r2, r3, #15
 8008f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4422      	add	r2, r4
 8008f42:	609a      	str	r2, [r3, #8]
}
 8008f44:	bf00      	nop
 8008f46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f50:	51eb851f 	.word	0x51eb851f

08008f54 <std>:
 8008f54:	2300      	movs	r3, #0
 8008f56:	b510      	push	{r4, lr}
 8008f58:	4604      	mov	r4, r0
 8008f5a:	e9c0 3300 	strd	r3, r3, [r0]
 8008f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f62:	6083      	str	r3, [r0, #8]
 8008f64:	8181      	strh	r1, [r0, #12]
 8008f66:	6643      	str	r3, [r0, #100]	; 0x64
 8008f68:	81c2      	strh	r2, [r0, #14]
 8008f6a:	6183      	str	r3, [r0, #24]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	2208      	movs	r2, #8
 8008f70:	305c      	adds	r0, #92	; 0x5c
 8008f72:	f000 f91f 	bl	80091b4 <memset>
 8008f76:	4b0d      	ldr	r3, [pc, #52]	; (8008fac <std+0x58>)
 8008f78:	6263      	str	r3, [r4, #36]	; 0x24
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <std+0x5c>)
 8008f7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f7e:	4b0d      	ldr	r3, [pc, #52]	; (8008fb4 <std+0x60>)
 8008f80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f82:	4b0d      	ldr	r3, [pc, #52]	; (8008fb8 <std+0x64>)
 8008f84:	6323      	str	r3, [r4, #48]	; 0x30
 8008f86:	4b0d      	ldr	r3, [pc, #52]	; (8008fbc <std+0x68>)
 8008f88:	6224      	str	r4, [r4, #32]
 8008f8a:	429c      	cmp	r4, r3
 8008f8c:	d006      	beq.n	8008f9c <std+0x48>
 8008f8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008f92:	4294      	cmp	r4, r2
 8008f94:	d002      	beq.n	8008f9c <std+0x48>
 8008f96:	33d0      	adds	r3, #208	; 0xd0
 8008f98:	429c      	cmp	r4, r3
 8008f9a:	d105      	bne.n	8008fa8 <std+0x54>
 8008f9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa4:	f000 b938 	b.w	8009218 <__retarget_lock_init_recursive>
 8008fa8:	bd10      	pop	{r4, pc}
 8008faa:	bf00      	nop
 8008fac:	08009a79 	.word	0x08009a79
 8008fb0:	08009a9b 	.word	0x08009a9b
 8008fb4:	08009ad3 	.word	0x08009ad3
 8008fb8:	08009af7 	.word	0x08009af7
 8008fbc:	20005a84 	.word	0x20005a84

08008fc0 <stdio_exit_handler>:
 8008fc0:	4a02      	ldr	r2, [pc, #8]	; (8008fcc <stdio_exit_handler+0xc>)
 8008fc2:	4903      	ldr	r1, [pc, #12]	; (8008fd0 <stdio_exit_handler+0x10>)
 8008fc4:	4803      	ldr	r0, [pc, #12]	; (8008fd4 <stdio_exit_handler+0x14>)
 8008fc6:	f000 b869 	b.w	800909c <_fwalk_sglue>
 8008fca:	bf00      	nop
 8008fcc:	20000028 	.word	0x20000028
 8008fd0:	08009a11 	.word	0x08009a11
 8008fd4:	20000034 	.word	0x20000034

08008fd8 <cleanup_stdio>:
 8008fd8:	6841      	ldr	r1, [r0, #4]
 8008fda:	4b0c      	ldr	r3, [pc, #48]	; (800900c <cleanup_stdio+0x34>)
 8008fdc:	4299      	cmp	r1, r3
 8008fde:	b510      	push	{r4, lr}
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	d001      	beq.n	8008fe8 <cleanup_stdio+0x10>
 8008fe4:	f000 fd14 	bl	8009a10 <_fflush_r>
 8008fe8:	68a1      	ldr	r1, [r4, #8]
 8008fea:	4b09      	ldr	r3, [pc, #36]	; (8009010 <cleanup_stdio+0x38>)
 8008fec:	4299      	cmp	r1, r3
 8008fee:	d002      	beq.n	8008ff6 <cleanup_stdio+0x1e>
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f000 fd0d 	bl	8009a10 <_fflush_r>
 8008ff6:	68e1      	ldr	r1, [r4, #12]
 8008ff8:	4b06      	ldr	r3, [pc, #24]	; (8009014 <cleanup_stdio+0x3c>)
 8008ffa:	4299      	cmp	r1, r3
 8008ffc:	d004      	beq.n	8009008 <cleanup_stdio+0x30>
 8008ffe:	4620      	mov	r0, r4
 8009000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009004:	f000 bd04 	b.w	8009a10 <_fflush_r>
 8009008:	bd10      	pop	{r4, pc}
 800900a:	bf00      	nop
 800900c:	20005a84 	.word	0x20005a84
 8009010:	20005aec 	.word	0x20005aec
 8009014:	20005b54 	.word	0x20005b54

08009018 <global_stdio_init.part.0>:
 8009018:	b510      	push	{r4, lr}
 800901a:	4b0b      	ldr	r3, [pc, #44]	; (8009048 <global_stdio_init.part.0+0x30>)
 800901c:	4c0b      	ldr	r4, [pc, #44]	; (800904c <global_stdio_init.part.0+0x34>)
 800901e:	4a0c      	ldr	r2, [pc, #48]	; (8009050 <global_stdio_init.part.0+0x38>)
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	4620      	mov	r0, r4
 8009024:	2200      	movs	r2, #0
 8009026:	2104      	movs	r1, #4
 8009028:	f7ff ff94 	bl	8008f54 <std>
 800902c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009030:	2201      	movs	r2, #1
 8009032:	2109      	movs	r1, #9
 8009034:	f7ff ff8e 	bl	8008f54 <std>
 8009038:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800903c:	2202      	movs	r2, #2
 800903e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009042:	2112      	movs	r1, #18
 8009044:	f7ff bf86 	b.w	8008f54 <std>
 8009048:	20005bbc 	.word	0x20005bbc
 800904c:	20005a84 	.word	0x20005a84
 8009050:	08008fc1 	.word	0x08008fc1

08009054 <__sfp_lock_acquire>:
 8009054:	4801      	ldr	r0, [pc, #4]	; (800905c <__sfp_lock_acquire+0x8>)
 8009056:	f000 b8e0 	b.w	800921a <__retarget_lock_acquire_recursive>
 800905a:	bf00      	nop
 800905c:	20005bc1 	.word	0x20005bc1

08009060 <__sfp_lock_release>:
 8009060:	4801      	ldr	r0, [pc, #4]	; (8009068 <__sfp_lock_release+0x8>)
 8009062:	f000 b8db 	b.w	800921c <__retarget_lock_release_recursive>
 8009066:	bf00      	nop
 8009068:	20005bc1 	.word	0x20005bc1

0800906c <__sinit>:
 800906c:	b510      	push	{r4, lr}
 800906e:	4604      	mov	r4, r0
 8009070:	f7ff fff0 	bl	8009054 <__sfp_lock_acquire>
 8009074:	6a23      	ldr	r3, [r4, #32]
 8009076:	b11b      	cbz	r3, 8009080 <__sinit+0x14>
 8009078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800907c:	f7ff bff0 	b.w	8009060 <__sfp_lock_release>
 8009080:	4b04      	ldr	r3, [pc, #16]	; (8009094 <__sinit+0x28>)
 8009082:	6223      	str	r3, [r4, #32]
 8009084:	4b04      	ldr	r3, [pc, #16]	; (8009098 <__sinit+0x2c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1f5      	bne.n	8009078 <__sinit+0xc>
 800908c:	f7ff ffc4 	bl	8009018 <global_stdio_init.part.0>
 8009090:	e7f2      	b.n	8009078 <__sinit+0xc>
 8009092:	bf00      	nop
 8009094:	08008fd9 	.word	0x08008fd9
 8009098:	20005bbc 	.word	0x20005bbc

0800909c <_fwalk_sglue>:
 800909c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a0:	4607      	mov	r7, r0
 80090a2:	4688      	mov	r8, r1
 80090a4:	4614      	mov	r4, r2
 80090a6:	2600      	movs	r6, #0
 80090a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090ac:	f1b9 0901 	subs.w	r9, r9, #1
 80090b0:	d505      	bpl.n	80090be <_fwalk_sglue+0x22>
 80090b2:	6824      	ldr	r4, [r4, #0]
 80090b4:	2c00      	cmp	r4, #0
 80090b6:	d1f7      	bne.n	80090a8 <_fwalk_sglue+0xc>
 80090b8:	4630      	mov	r0, r6
 80090ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090be:	89ab      	ldrh	r3, [r5, #12]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d907      	bls.n	80090d4 <_fwalk_sglue+0x38>
 80090c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090c8:	3301      	adds	r3, #1
 80090ca:	d003      	beq.n	80090d4 <_fwalk_sglue+0x38>
 80090cc:	4629      	mov	r1, r5
 80090ce:	4638      	mov	r0, r7
 80090d0:	47c0      	blx	r8
 80090d2:	4306      	orrs	r6, r0
 80090d4:	3568      	adds	r5, #104	; 0x68
 80090d6:	e7e9      	b.n	80090ac <_fwalk_sglue+0x10>

080090d8 <iprintf>:
 80090d8:	b40f      	push	{r0, r1, r2, r3}
 80090da:	b507      	push	{r0, r1, r2, lr}
 80090dc:	4906      	ldr	r1, [pc, #24]	; (80090f8 <iprintf+0x20>)
 80090de:	ab04      	add	r3, sp, #16
 80090e0:	6808      	ldr	r0, [r1, #0]
 80090e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e6:	6881      	ldr	r1, [r0, #8]
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	f000 f8c1 	bl	8009270 <_vfiprintf_r>
 80090ee:	b003      	add	sp, #12
 80090f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090f4:	b004      	add	sp, #16
 80090f6:	4770      	bx	lr
 80090f8:	20000080 	.word	0x20000080

080090fc <_puts_r>:
 80090fc:	6a03      	ldr	r3, [r0, #32]
 80090fe:	b570      	push	{r4, r5, r6, lr}
 8009100:	6884      	ldr	r4, [r0, #8]
 8009102:	4605      	mov	r5, r0
 8009104:	460e      	mov	r6, r1
 8009106:	b90b      	cbnz	r3, 800910c <_puts_r+0x10>
 8009108:	f7ff ffb0 	bl	800906c <__sinit>
 800910c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800910e:	07db      	lsls	r3, r3, #31
 8009110:	d405      	bmi.n	800911e <_puts_r+0x22>
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	0598      	lsls	r0, r3, #22
 8009116:	d402      	bmi.n	800911e <_puts_r+0x22>
 8009118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800911a:	f000 f87e 	bl	800921a <__retarget_lock_acquire_recursive>
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	0719      	lsls	r1, r3, #28
 8009122:	d513      	bpl.n	800914c <_puts_r+0x50>
 8009124:	6923      	ldr	r3, [r4, #16]
 8009126:	b18b      	cbz	r3, 800914c <_puts_r+0x50>
 8009128:	3e01      	subs	r6, #1
 800912a:	68a3      	ldr	r3, [r4, #8]
 800912c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009130:	3b01      	subs	r3, #1
 8009132:	60a3      	str	r3, [r4, #8]
 8009134:	b9e9      	cbnz	r1, 8009172 <_puts_r+0x76>
 8009136:	2b00      	cmp	r3, #0
 8009138:	da2e      	bge.n	8009198 <_puts_r+0x9c>
 800913a:	4622      	mov	r2, r4
 800913c:	210a      	movs	r1, #10
 800913e:	4628      	mov	r0, r5
 8009140:	f000 fcdd 	bl	8009afe <__swbuf_r>
 8009144:	3001      	adds	r0, #1
 8009146:	d007      	beq.n	8009158 <_puts_r+0x5c>
 8009148:	250a      	movs	r5, #10
 800914a:	e007      	b.n	800915c <_puts_r+0x60>
 800914c:	4621      	mov	r1, r4
 800914e:	4628      	mov	r0, r5
 8009150:	f000 fd12 	bl	8009b78 <__swsetup_r>
 8009154:	2800      	cmp	r0, #0
 8009156:	d0e7      	beq.n	8009128 <_puts_r+0x2c>
 8009158:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800915c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800915e:	07da      	lsls	r2, r3, #31
 8009160:	d405      	bmi.n	800916e <_puts_r+0x72>
 8009162:	89a3      	ldrh	r3, [r4, #12]
 8009164:	059b      	lsls	r3, r3, #22
 8009166:	d402      	bmi.n	800916e <_puts_r+0x72>
 8009168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800916a:	f000 f857 	bl	800921c <__retarget_lock_release_recursive>
 800916e:	4628      	mov	r0, r5
 8009170:	bd70      	pop	{r4, r5, r6, pc}
 8009172:	2b00      	cmp	r3, #0
 8009174:	da04      	bge.n	8009180 <_puts_r+0x84>
 8009176:	69a2      	ldr	r2, [r4, #24]
 8009178:	429a      	cmp	r2, r3
 800917a:	dc06      	bgt.n	800918a <_puts_r+0x8e>
 800917c:	290a      	cmp	r1, #10
 800917e:	d004      	beq.n	800918a <_puts_r+0x8e>
 8009180:	6823      	ldr	r3, [r4, #0]
 8009182:	1c5a      	adds	r2, r3, #1
 8009184:	6022      	str	r2, [r4, #0]
 8009186:	7019      	strb	r1, [r3, #0]
 8009188:	e7cf      	b.n	800912a <_puts_r+0x2e>
 800918a:	4622      	mov	r2, r4
 800918c:	4628      	mov	r0, r5
 800918e:	f000 fcb6 	bl	8009afe <__swbuf_r>
 8009192:	3001      	adds	r0, #1
 8009194:	d1c9      	bne.n	800912a <_puts_r+0x2e>
 8009196:	e7df      	b.n	8009158 <_puts_r+0x5c>
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	250a      	movs	r5, #10
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	6022      	str	r2, [r4, #0]
 80091a0:	701d      	strb	r5, [r3, #0]
 80091a2:	e7db      	b.n	800915c <_puts_r+0x60>

080091a4 <puts>:
 80091a4:	4b02      	ldr	r3, [pc, #8]	; (80091b0 <puts+0xc>)
 80091a6:	4601      	mov	r1, r0
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f7ff bfa7 	b.w	80090fc <_puts_r>
 80091ae:	bf00      	nop
 80091b0:	20000080 	.word	0x20000080

080091b4 <memset>:
 80091b4:	4402      	add	r2, r0
 80091b6:	4603      	mov	r3, r0
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d100      	bne.n	80091be <memset+0xa>
 80091bc:	4770      	bx	lr
 80091be:	f803 1b01 	strb.w	r1, [r3], #1
 80091c2:	e7f9      	b.n	80091b8 <memset+0x4>

080091c4 <__errno>:
 80091c4:	4b01      	ldr	r3, [pc, #4]	; (80091cc <__errno+0x8>)
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	20000080 	.word	0x20000080

080091d0 <__libc_init_array>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	4d0d      	ldr	r5, [pc, #52]	; (8009208 <__libc_init_array+0x38>)
 80091d4:	4c0d      	ldr	r4, [pc, #52]	; (800920c <__libc_init_array+0x3c>)
 80091d6:	1b64      	subs	r4, r4, r5
 80091d8:	10a4      	asrs	r4, r4, #2
 80091da:	2600      	movs	r6, #0
 80091dc:	42a6      	cmp	r6, r4
 80091de:	d109      	bne.n	80091f4 <__libc_init_array+0x24>
 80091e0:	4d0b      	ldr	r5, [pc, #44]	; (8009210 <__libc_init_array+0x40>)
 80091e2:	4c0c      	ldr	r4, [pc, #48]	; (8009214 <__libc_init_array+0x44>)
 80091e4:	f000 ff94 	bl	800a110 <_init>
 80091e8:	1b64      	subs	r4, r4, r5
 80091ea:	10a4      	asrs	r4, r4, #2
 80091ec:	2600      	movs	r6, #0
 80091ee:	42a6      	cmp	r6, r4
 80091f0:	d105      	bne.n	80091fe <__libc_init_array+0x2e>
 80091f2:	bd70      	pop	{r4, r5, r6, pc}
 80091f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f8:	4798      	blx	r3
 80091fa:	3601      	adds	r6, #1
 80091fc:	e7ee      	b.n	80091dc <__libc_init_array+0xc>
 80091fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009202:	4798      	blx	r3
 8009204:	3601      	adds	r6, #1
 8009206:	e7f2      	b.n	80091ee <__libc_init_array+0x1e>
 8009208:	0800a554 	.word	0x0800a554
 800920c:	0800a554 	.word	0x0800a554
 8009210:	0800a554 	.word	0x0800a554
 8009214:	0800a558 	.word	0x0800a558

08009218 <__retarget_lock_init_recursive>:
 8009218:	4770      	bx	lr

0800921a <__retarget_lock_acquire_recursive>:
 800921a:	4770      	bx	lr

0800921c <__retarget_lock_release_recursive>:
 800921c:	4770      	bx	lr

0800921e <__sfputc_r>:
 800921e:	6893      	ldr	r3, [r2, #8]
 8009220:	3b01      	subs	r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	b410      	push	{r4}
 8009226:	6093      	str	r3, [r2, #8]
 8009228:	da08      	bge.n	800923c <__sfputc_r+0x1e>
 800922a:	6994      	ldr	r4, [r2, #24]
 800922c:	42a3      	cmp	r3, r4
 800922e:	db01      	blt.n	8009234 <__sfputc_r+0x16>
 8009230:	290a      	cmp	r1, #10
 8009232:	d103      	bne.n	800923c <__sfputc_r+0x1e>
 8009234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009238:	f000 bc61 	b.w	8009afe <__swbuf_r>
 800923c:	6813      	ldr	r3, [r2, #0]
 800923e:	1c58      	adds	r0, r3, #1
 8009240:	6010      	str	r0, [r2, #0]
 8009242:	7019      	strb	r1, [r3, #0]
 8009244:	4608      	mov	r0, r1
 8009246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800924a:	4770      	bx	lr

0800924c <__sfputs_r>:
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	4606      	mov	r6, r0
 8009250:	460f      	mov	r7, r1
 8009252:	4614      	mov	r4, r2
 8009254:	18d5      	adds	r5, r2, r3
 8009256:	42ac      	cmp	r4, r5
 8009258:	d101      	bne.n	800925e <__sfputs_r+0x12>
 800925a:	2000      	movs	r0, #0
 800925c:	e007      	b.n	800926e <__sfputs_r+0x22>
 800925e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009262:	463a      	mov	r2, r7
 8009264:	4630      	mov	r0, r6
 8009266:	f7ff ffda 	bl	800921e <__sfputc_r>
 800926a:	1c43      	adds	r3, r0, #1
 800926c:	d1f3      	bne.n	8009256 <__sfputs_r+0xa>
 800926e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009270 <_vfiprintf_r>:
 8009270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	460d      	mov	r5, r1
 8009276:	b09d      	sub	sp, #116	; 0x74
 8009278:	4614      	mov	r4, r2
 800927a:	4698      	mov	r8, r3
 800927c:	4606      	mov	r6, r0
 800927e:	b118      	cbz	r0, 8009288 <_vfiprintf_r+0x18>
 8009280:	6a03      	ldr	r3, [r0, #32]
 8009282:	b90b      	cbnz	r3, 8009288 <_vfiprintf_r+0x18>
 8009284:	f7ff fef2 	bl	800906c <__sinit>
 8009288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800928a:	07d9      	lsls	r1, r3, #31
 800928c:	d405      	bmi.n	800929a <_vfiprintf_r+0x2a>
 800928e:	89ab      	ldrh	r3, [r5, #12]
 8009290:	059a      	lsls	r2, r3, #22
 8009292:	d402      	bmi.n	800929a <_vfiprintf_r+0x2a>
 8009294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009296:	f7ff ffc0 	bl	800921a <__retarget_lock_acquire_recursive>
 800929a:	89ab      	ldrh	r3, [r5, #12]
 800929c:	071b      	lsls	r3, r3, #28
 800929e:	d501      	bpl.n	80092a4 <_vfiprintf_r+0x34>
 80092a0:	692b      	ldr	r3, [r5, #16]
 80092a2:	b99b      	cbnz	r3, 80092cc <_vfiprintf_r+0x5c>
 80092a4:	4629      	mov	r1, r5
 80092a6:	4630      	mov	r0, r6
 80092a8:	f000 fc66 	bl	8009b78 <__swsetup_r>
 80092ac:	b170      	cbz	r0, 80092cc <_vfiprintf_r+0x5c>
 80092ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092b0:	07dc      	lsls	r4, r3, #31
 80092b2:	d504      	bpl.n	80092be <_vfiprintf_r+0x4e>
 80092b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092b8:	b01d      	add	sp, #116	; 0x74
 80092ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092be:	89ab      	ldrh	r3, [r5, #12]
 80092c0:	0598      	lsls	r0, r3, #22
 80092c2:	d4f7      	bmi.n	80092b4 <_vfiprintf_r+0x44>
 80092c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092c6:	f7ff ffa9 	bl	800921c <__retarget_lock_release_recursive>
 80092ca:	e7f3      	b.n	80092b4 <_vfiprintf_r+0x44>
 80092cc:	2300      	movs	r3, #0
 80092ce:	9309      	str	r3, [sp, #36]	; 0x24
 80092d0:	2320      	movs	r3, #32
 80092d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80092da:	2330      	movs	r3, #48	; 0x30
 80092dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009490 <_vfiprintf_r+0x220>
 80092e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092e4:	f04f 0901 	mov.w	r9, #1
 80092e8:	4623      	mov	r3, r4
 80092ea:	469a      	mov	sl, r3
 80092ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092f0:	b10a      	cbz	r2, 80092f6 <_vfiprintf_r+0x86>
 80092f2:	2a25      	cmp	r2, #37	; 0x25
 80092f4:	d1f9      	bne.n	80092ea <_vfiprintf_r+0x7a>
 80092f6:	ebba 0b04 	subs.w	fp, sl, r4
 80092fa:	d00b      	beq.n	8009314 <_vfiprintf_r+0xa4>
 80092fc:	465b      	mov	r3, fp
 80092fe:	4622      	mov	r2, r4
 8009300:	4629      	mov	r1, r5
 8009302:	4630      	mov	r0, r6
 8009304:	f7ff ffa2 	bl	800924c <__sfputs_r>
 8009308:	3001      	adds	r0, #1
 800930a:	f000 80a9 	beq.w	8009460 <_vfiprintf_r+0x1f0>
 800930e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009310:	445a      	add	r2, fp
 8009312:	9209      	str	r2, [sp, #36]	; 0x24
 8009314:	f89a 3000 	ldrb.w	r3, [sl]
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 80a1 	beq.w	8009460 <_vfiprintf_r+0x1f0>
 800931e:	2300      	movs	r3, #0
 8009320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009328:	f10a 0a01 	add.w	sl, sl, #1
 800932c:	9304      	str	r3, [sp, #16]
 800932e:	9307      	str	r3, [sp, #28]
 8009330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009334:	931a      	str	r3, [sp, #104]	; 0x68
 8009336:	4654      	mov	r4, sl
 8009338:	2205      	movs	r2, #5
 800933a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800933e:	4854      	ldr	r0, [pc, #336]	; (8009490 <_vfiprintf_r+0x220>)
 8009340:	f7f6 ff6e 	bl	8000220 <memchr>
 8009344:	9a04      	ldr	r2, [sp, #16]
 8009346:	b9d8      	cbnz	r0, 8009380 <_vfiprintf_r+0x110>
 8009348:	06d1      	lsls	r1, r2, #27
 800934a:	bf44      	itt	mi
 800934c:	2320      	movmi	r3, #32
 800934e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009352:	0713      	lsls	r3, r2, #28
 8009354:	bf44      	itt	mi
 8009356:	232b      	movmi	r3, #43	; 0x2b
 8009358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800935c:	f89a 3000 	ldrb.w	r3, [sl]
 8009360:	2b2a      	cmp	r3, #42	; 0x2a
 8009362:	d015      	beq.n	8009390 <_vfiprintf_r+0x120>
 8009364:	9a07      	ldr	r2, [sp, #28]
 8009366:	4654      	mov	r4, sl
 8009368:	2000      	movs	r0, #0
 800936a:	f04f 0c0a 	mov.w	ip, #10
 800936e:	4621      	mov	r1, r4
 8009370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009374:	3b30      	subs	r3, #48	; 0x30
 8009376:	2b09      	cmp	r3, #9
 8009378:	d94d      	bls.n	8009416 <_vfiprintf_r+0x1a6>
 800937a:	b1b0      	cbz	r0, 80093aa <_vfiprintf_r+0x13a>
 800937c:	9207      	str	r2, [sp, #28]
 800937e:	e014      	b.n	80093aa <_vfiprintf_r+0x13a>
 8009380:	eba0 0308 	sub.w	r3, r0, r8
 8009384:	fa09 f303 	lsl.w	r3, r9, r3
 8009388:	4313      	orrs	r3, r2
 800938a:	9304      	str	r3, [sp, #16]
 800938c:	46a2      	mov	sl, r4
 800938e:	e7d2      	b.n	8009336 <_vfiprintf_r+0xc6>
 8009390:	9b03      	ldr	r3, [sp, #12]
 8009392:	1d19      	adds	r1, r3, #4
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	9103      	str	r1, [sp, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	bfbb      	ittet	lt
 800939c:	425b      	neglt	r3, r3
 800939e:	f042 0202 	orrlt.w	r2, r2, #2
 80093a2:	9307      	strge	r3, [sp, #28]
 80093a4:	9307      	strlt	r3, [sp, #28]
 80093a6:	bfb8      	it	lt
 80093a8:	9204      	strlt	r2, [sp, #16]
 80093aa:	7823      	ldrb	r3, [r4, #0]
 80093ac:	2b2e      	cmp	r3, #46	; 0x2e
 80093ae:	d10c      	bne.n	80093ca <_vfiprintf_r+0x15a>
 80093b0:	7863      	ldrb	r3, [r4, #1]
 80093b2:	2b2a      	cmp	r3, #42	; 0x2a
 80093b4:	d134      	bne.n	8009420 <_vfiprintf_r+0x1b0>
 80093b6:	9b03      	ldr	r3, [sp, #12]
 80093b8:	1d1a      	adds	r2, r3, #4
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	9203      	str	r2, [sp, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	bfb8      	it	lt
 80093c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80093c6:	3402      	adds	r4, #2
 80093c8:	9305      	str	r3, [sp, #20]
 80093ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80094a0 <_vfiprintf_r+0x230>
 80093ce:	7821      	ldrb	r1, [r4, #0]
 80093d0:	2203      	movs	r2, #3
 80093d2:	4650      	mov	r0, sl
 80093d4:	f7f6 ff24 	bl	8000220 <memchr>
 80093d8:	b138      	cbz	r0, 80093ea <_vfiprintf_r+0x17a>
 80093da:	9b04      	ldr	r3, [sp, #16]
 80093dc:	eba0 000a 	sub.w	r0, r0, sl
 80093e0:	2240      	movs	r2, #64	; 0x40
 80093e2:	4082      	lsls	r2, r0
 80093e4:	4313      	orrs	r3, r2
 80093e6:	3401      	adds	r4, #1
 80093e8:	9304      	str	r3, [sp, #16]
 80093ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ee:	4829      	ldr	r0, [pc, #164]	; (8009494 <_vfiprintf_r+0x224>)
 80093f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093f4:	2206      	movs	r2, #6
 80093f6:	f7f6 ff13 	bl	8000220 <memchr>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d03f      	beq.n	800947e <_vfiprintf_r+0x20e>
 80093fe:	4b26      	ldr	r3, [pc, #152]	; (8009498 <_vfiprintf_r+0x228>)
 8009400:	bb1b      	cbnz	r3, 800944a <_vfiprintf_r+0x1da>
 8009402:	9b03      	ldr	r3, [sp, #12]
 8009404:	3307      	adds	r3, #7
 8009406:	f023 0307 	bic.w	r3, r3, #7
 800940a:	3308      	adds	r3, #8
 800940c:	9303      	str	r3, [sp, #12]
 800940e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009410:	443b      	add	r3, r7
 8009412:	9309      	str	r3, [sp, #36]	; 0x24
 8009414:	e768      	b.n	80092e8 <_vfiprintf_r+0x78>
 8009416:	fb0c 3202 	mla	r2, ip, r2, r3
 800941a:	460c      	mov	r4, r1
 800941c:	2001      	movs	r0, #1
 800941e:	e7a6      	b.n	800936e <_vfiprintf_r+0xfe>
 8009420:	2300      	movs	r3, #0
 8009422:	3401      	adds	r4, #1
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	4619      	mov	r1, r3
 8009428:	f04f 0c0a 	mov.w	ip, #10
 800942c:	4620      	mov	r0, r4
 800942e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009432:	3a30      	subs	r2, #48	; 0x30
 8009434:	2a09      	cmp	r2, #9
 8009436:	d903      	bls.n	8009440 <_vfiprintf_r+0x1d0>
 8009438:	2b00      	cmp	r3, #0
 800943a:	d0c6      	beq.n	80093ca <_vfiprintf_r+0x15a>
 800943c:	9105      	str	r1, [sp, #20]
 800943e:	e7c4      	b.n	80093ca <_vfiprintf_r+0x15a>
 8009440:	fb0c 2101 	mla	r1, ip, r1, r2
 8009444:	4604      	mov	r4, r0
 8009446:	2301      	movs	r3, #1
 8009448:	e7f0      	b.n	800942c <_vfiprintf_r+0x1bc>
 800944a:	ab03      	add	r3, sp, #12
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	462a      	mov	r2, r5
 8009450:	4b12      	ldr	r3, [pc, #72]	; (800949c <_vfiprintf_r+0x22c>)
 8009452:	a904      	add	r1, sp, #16
 8009454:	4630      	mov	r0, r6
 8009456:	f3af 8000 	nop.w
 800945a:	4607      	mov	r7, r0
 800945c:	1c78      	adds	r0, r7, #1
 800945e:	d1d6      	bne.n	800940e <_vfiprintf_r+0x19e>
 8009460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009462:	07d9      	lsls	r1, r3, #31
 8009464:	d405      	bmi.n	8009472 <_vfiprintf_r+0x202>
 8009466:	89ab      	ldrh	r3, [r5, #12]
 8009468:	059a      	lsls	r2, r3, #22
 800946a:	d402      	bmi.n	8009472 <_vfiprintf_r+0x202>
 800946c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800946e:	f7ff fed5 	bl	800921c <__retarget_lock_release_recursive>
 8009472:	89ab      	ldrh	r3, [r5, #12]
 8009474:	065b      	lsls	r3, r3, #25
 8009476:	f53f af1d 	bmi.w	80092b4 <_vfiprintf_r+0x44>
 800947a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800947c:	e71c      	b.n	80092b8 <_vfiprintf_r+0x48>
 800947e:	ab03      	add	r3, sp, #12
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	462a      	mov	r2, r5
 8009484:	4b05      	ldr	r3, [pc, #20]	; (800949c <_vfiprintf_r+0x22c>)
 8009486:	a904      	add	r1, sp, #16
 8009488:	4630      	mov	r0, r6
 800948a:	f000 f919 	bl	80096c0 <_printf_i>
 800948e:	e7e4      	b.n	800945a <_vfiprintf_r+0x1ea>
 8009490:	0800a518 	.word	0x0800a518
 8009494:	0800a522 	.word	0x0800a522
 8009498:	00000000 	.word	0x00000000
 800949c:	0800924d 	.word	0x0800924d
 80094a0:	0800a51e 	.word	0x0800a51e

080094a4 <sbrk_aligned>:
 80094a4:	b570      	push	{r4, r5, r6, lr}
 80094a6:	4e0e      	ldr	r6, [pc, #56]	; (80094e0 <sbrk_aligned+0x3c>)
 80094a8:	460c      	mov	r4, r1
 80094aa:	6831      	ldr	r1, [r6, #0]
 80094ac:	4605      	mov	r5, r0
 80094ae:	b911      	cbnz	r1, 80094b6 <sbrk_aligned+0x12>
 80094b0:	f000 fc72 	bl	8009d98 <_sbrk_r>
 80094b4:	6030      	str	r0, [r6, #0]
 80094b6:	4621      	mov	r1, r4
 80094b8:	4628      	mov	r0, r5
 80094ba:	f000 fc6d 	bl	8009d98 <_sbrk_r>
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	d00a      	beq.n	80094d8 <sbrk_aligned+0x34>
 80094c2:	1cc4      	adds	r4, r0, #3
 80094c4:	f024 0403 	bic.w	r4, r4, #3
 80094c8:	42a0      	cmp	r0, r4
 80094ca:	d007      	beq.n	80094dc <sbrk_aligned+0x38>
 80094cc:	1a21      	subs	r1, r4, r0
 80094ce:	4628      	mov	r0, r5
 80094d0:	f000 fc62 	bl	8009d98 <_sbrk_r>
 80094d4:	3001      	adds	r0, #1
 80094d6:	d101      	bne.n	80094dc <sbrk_aligned+0x38>
 80094d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80094dc:	4620      	mov	r0, r4
 80094de:	bd70      	pop	{r4, r5, r6, pc}
 80094e0:	20005bc8 	.word	0x20005bc8

080094e4 <_malloc_r>:
 80094e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e8:	1ccd      	adds	r5, r1, #3
 80094ea:	f025 0503 	bic.w	r5, r5, #3
 80094ee:	3508      	adds	r5, #8
 80094f0:	2d0c      	cmp	r5, #12
 80094f2:	bf38      	it	cc
 80094f4:	250c      	movcc	r5, #12
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	4607      	mov	r7, r0
 80094fa:	db01      	blt.n	8009500 <_malloc_r+0x1c>
 80094fc:	42a9      	cmp	r1, r5
 80094fe:	d905      	bls.n	800950c <_malloc_r+0x28>
 8009500:	230c      	movs	r3, #12
 8009502:	603b      	str	r3, [r7, #0]
 8009504:	2600      	movs	r6, #0
 8009506:	4630      	mov	r0, r6
 8009508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800950c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095e0 <_malloc_r+0xfc>
 8009510:	f000 faa6 	bl	8009a60 <__malloc_lock>
 8009514:	f8d8 3000 	ldr.w	r3, [r8]
 8009518:	461c      	mov	r4, r3
 800951a:	bb5c      	cbnz	r4, 8009574 <_malloc_r+0x90>
 800951c:	4629      	mov	r1, r5
 800951e:	4638      	mov	r0, r7
 8009520:	f7ff ffc0 	bl	80094a4 <sbrk_aligned>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	4604      	mov	r4, r0
 8009528:	d155      	bne.n	80095d6 <_malloc_r+0xf2>
 800952a:	f8d8 4000 	ldr.w	r4, [r8]
 800952e:	4626      	mov	r6, r4
 8009530:	2e00      	cmp	r6, #0
 8009532:	d145      	bne.n	80095c0 <_malloc_r+0xdc>
 8009534:	2c00      	cmp	r4, #0
 8009536:	d048      	beq.n	80095ca <_malloc_r+0xe6>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	4631      	mov	r1, r6
 800953c:	4638      	mov	r0, r7
 800953e:	eb04 0903 	add.w	r9, r4, r3
 8009542:	f000 fc29 	bl	8009d98 <_sbrk_r>
 8009546:	4581      	cmp	r9, r0
 8009548:	d13f      	bne.n	80095ca <_malloc_r+0xe6>
 800954a:	6821      	ldr	r1, [r4, #0]
 800954c:	1a6d      	subs	r5, r5, r1
 800954e:	4629      	mov	r1, r5
 8009550:	4638      	mov	r0, r7
 8009552:	f7ff ffa7 	bl	80094a4 <sbrk_aligned>
 8009556:	3001      	adds	r0, #1
 8009558:	d037      	beq.n	80095ca <_malloc_r+0xe6>
 800955a:	6823      	ldr	r3, [r4, #0]
 800955c:	442b      	add	r3, r5
 800955e:	6023      	str	r3, [r4, #0]
 8009560:	f8d8 3000 	ldr.w	r3, [r8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d038      	beq.n	80095da <_malloc_r+0xf6>
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	42a2      	cmp	r2, r4
 800956c:	d12b      	bne.n	80095c6 <_malloc_r+0xe2>
 800956e:	2200      	movs	r2, #0
 8009570:	605a      	str	r2, [r3, #4]
 8009572:	e00f      	b.n	8009594 <_malloc_r+0xb0>
 8009574:	6822      	ldr	r2, [r4, #0]
 8009576:	1b52      	subs	r2, r2, r5
 8009578:	d41f      	bmi.n	80095ba <_malloc_r+0xd6>
 800957a:	2a0b      	cmp	r2, #11
 800957c:	d917      	bls.n	80095ae <_malloc_r+0xca>
 800957e:	1961      	adds	r1, r4, r5
 8009580:	42a3      	cmp	r3, r4
 8009582:	6025      	str	r5, [r4, #0]
 8009584:	bf18      	it	ne
 8009586:	6059      	strne	r1, [r3, #4]
 8009588:	6863      	ldr	r3, [r4, #4]
 800958a:	bf08      	it	eq
 800958c:	f8c8 1000 	streq.w	r1, [r8]
 8009590:	5162      	str	r2, [r4, r5]
 8009592:	604b      	str	r3, [r1, #4]
 8009594:	4638      	mov	r0, r7
 8009596:	f104 060b 	add.w	r6, r4, #11
 800959a:	f000 fa67 	bl	8009a6c <__malloc_unlock>
 800959e:	f026 0607 	bic.w	r6, r6, #7
 80095a2:	1d23      	adds	r3, r4, #4
 80095a4:	1af2      	subs	r2, r6, r3
 80095a6:	d0ae      	beq.n	8009506 <_malloc_r+0x22>
 80095a8:	1b9b      	subs	r3, r3, r6
 80095aa:	50a3      	str	r3, [r4, r2]
 80095ac:	e7ab      	b.n	8009506 <_malloc_r+0x22>
 80095ae:	42a3      	cmp	r3, r4
 80095b0:	6862      	ldr	r2, [r4, #4]
 80095b2:	d1dd      	bne.n	8009570 <_malloc_r+0x8c>
 80095b4:	f8c8 2000 	str.w	r2, [r8]
 80095b8:	e7ec      	b.n	8009594 <_malloc_r+0xb0>
 80095ba:	4623      	mov	r3, r4
 80095bc:	6864      	ldr	r4, [r4, #4]
 80095be:	e7ac      	b.n	800951a <_malloc_r+0x36>
 80095c0:	4634      	mov	r4, r6
 80095c2:	6876      	ldr	r6, [r6, #4]
 80095c4:	e7b4      	b.n	8009530 <_malloc_r+0x4c>
 80095c6:	4613      	mov	r3, r2
 80095c8:	e7cc      	b.n	8009564 <_malloc_r+0x80>
 80095ca:	230c      	movs	r3, #12
 80095cc:	603b      	str	r3, [r7, #0]
 80095ce:	4638      	mov	r0, r7
 80095d0:	f000 fa4c 	bl	8009a6c <__malloc_unlock>
 80095d4:	e797      	b.n	8009506 <_malloc_r+0x22>
 80095d6:	6025      	str	r5, [r4, #0]
 80095d8:	e7dc      	b.n	8009594 <_malloc_r+0xb0>
 80095da:	605b      	str	r3, [r3, #4]
 80095dc:	deff      	udf	#255	; 0xff
 80095de:	bf00      	nop
 80095e0:	20005bc4 	.word	0x20005bc4

080095e4 <_printf_common>:
 80095e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	4616      	mov	r6, r2
 80095ea:	4699      	mov	r9, r3
 80095ec:	688a      	ldr	r2, [r1, #8]
 80095ee:	690b      	ldr	r3, [r1, #16]
 80095f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095f4:	4293      	cmp	r3, r2
 80095f6:	bfb8      	it	lt
 80095f8:	4613      	movlt	r3, r2
 80095fa:	6033      	str	r3, [r6, #0]
 80095fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009600:	4607      	mov	r7, r0
 8009602:	460c      	mov	r4, r1
 8009604:	b10a      	cbz	r2, 800960a <_printf_common+0x26>
 8009606:	3301      	adds	r3, #1
 8009608:	6033      	str	r3, [r6, #0]
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	0699      	lsls	r1, r3, #26
 800960e:	bf42      	ittt	mi
 8009610:	6833      	ldrmi	r3, [r6, #0]
 8009612:	3302      	addmi	r3, #2
 8009614:	6033      	strmi	r3, [r6, #0]
 8009616:	6825      	ldr	r5, [r4, #0]
 8009618:	f015 0506 	ands.w	r5, r5, #6
 800961c:	d106      	bne.n	800962c <_printf_common+0x48>
 800961e:	f104 0a19 	add.w	sl, r4, #25
 8009622:	68e3      	ldr	r3, [r4, #12]
 8009624:	6832      	ldr	r2, [r6, #0]
 8009626:	1a9b      	subs	r3, r3, r2
 8009628:	42ab      	cmp	r3, r5
 800962a:	dc26      	bgt.n	800967a <_printf_common+0x96>
 800962c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009630:	1e13      	subs	r3, r2, #0
 8009632:	6822      	ldr	r2, [r4, #0]
 8009634:	bf18      	it	ne
 8009636:	2301      	movne	r3, #1
 8009638:	0692      	lsls	r2, r2, #26
 800963a:	d42b      	bmi.n	8009694 <_printf_common+0xb0>
 800963c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009640:	4649      	mov	r1, r9
 8009642:	4638      	mov	r0, r7
 8009644:	47c0      	blx	r8
 8009646:	3001      	adds	r0, #1
 8009648:	d01e      	beq.n	8009688 <_printf_common+0xa4>
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	6922      	ldr	r2, [r4, #16]
 800964e:	f003 0306 	and.w	r3, r3, #6
 8009652:	2b04      	cmp	r3, #4
 8009654:	bf02      	ittt	eq
 8009656:	68e5      	ldreq	r5, [r4, #12]
 8009658:	6833      	ldreq	r3, [r6, #0]
 800965a:	1aed      	subeq	r5, r5, r3
 800965c:	68a3      	ldr	r3, [r4, #8]
 800965e:	bf0c      	ite	eq
 8009660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009664:	2500      	movne	r5, #0
 8009666:	4293      	cmp	r3, r2
 8009668:	bfc4      	itt	gt
 800966a:	1a9b      	subgt	r3, r3, r2
 800966c:	18ed      	addgt	r5, r5, r3
 800966e:	2600      	movs	r6, #0
 8009670:	341a      	adds	r4, #26
 8009672:	42b5      	cmp	r5, r6
 8009674:	d11a      	bne.n	80096ac <_printf_common+0xc8>
 8009676:	2000      	movs	r0, #0
 8009678:	e008      	b.n	800968c <_printf_common+0xa8>
 800967a:	2301      	movs	r3, #1
 800967c:	4652      	mov	r2, sl
 800967e:	4649      	mov	r1, r9
 8009680:	4638      	mov	r0, r7
 8009682:	47c0      	blx	r8
 8009684:	3001      	adds	r0, #1
 8009686:	d103      	bne.n	8009690 <_printf_common+0xac>
 8009688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800968c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009690:	3501      	adds	r5, #1
 8009692:	e7c6      	b.n	8009622 <_printf_common+0x3e>
 8009694:	18e1      	adds	r1, r4, r3
 8009696:	1c5a      	adds	r2, r3, #1
 8009698:	2030      	movs	r0, #48	; 0x30
 800969a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800969e:	4422      	add	r2, r4
 80096a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096a8:	3302      	adds	r3, #2
 80096aa:	e7c7      	b.n	800963c <_printf_common+0x58>
 80096ac:	2301      	movs	r3, #1
 80096ae:	4622      	mov	r2, r4
 80096b0:	4649      	mov	r1, r9
 80096b2:	4638      	mov	r0, r7
 80096b4:	47c0      	blx	r8
 80096b6:	3001      	adds	r0, #1
 80096b8:	d0e6      	beq.n	8009688 <_printf_common+0xa4>
 80096ba:	3601      	adds	r6, #1
 80096bc:	e7d9      	b.n	8009672 <_printf_common+0x8e>
	...

080096c0 <_printf_i>:
 80096c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096c4:	7e0f      	ldrb	r7, [r1, #24]
 80096c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096c8:	2f78      	cmp	r7, #120	; 0x78
 80096ca:	4691      	mov	r9, r2
 80096cc:	4680      	mov	r8, r0
 80096ce:	460c      	mov	r4, r1
 80096d0:	469a      	mov	sl, r3
 80096d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096d6:	d807      	bhi.n	80096e8 <_printf_i+0x28>
 80096d8:	2f62      	cmp	r7, #98	; 0x62
 80096da:	d80a      	bhi.n	80096f2 <_printf_i+0x32>
 80096dc:	2f00      	cmp	r7, #0
 80096de:	f000 80d4 	beq.w	800988a <_printf_i+0x1ca>
 80096e2:	2f58      	cmp	r7, #88	; 0x58
 80096e4:	f000 80c0 	beq.w	8009868 <_printf_i+0x1a8>
 80096e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096f0:	e03a      	b.n	8009768 <_printf_i+0xa8>
 80096f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096f6:	2b15      	cmp	r3, #21
 80096f8:	d8f6      	bhi.n	80096e8 <_printf_i+0x28>
 80096fa:	a101      	add	r1, pc, #4	; (adr r1, 8009700 <_printf_i+0x40>)
 80096fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009700:	08009759 	.word	0x08009759
 8009704:	0800976d 	.word	0x0800976d
 8009708:	080096e9 	.word	0x080096e9
 800970c:	080096e9 	.word	0x080096e9
 8009710:	080096e9 	.word	0x080096e9
 8009714:	080096e9 	.word	0x080096e9
 8009718:	0800976d 	.word	0x0800976d
 800971c:	080096e9 	.word	0x080096e9
 8009720:	080096e9 	.word	0x080096e9
 8009724:	080096e9 	.word	0x080096e9
 8009728:	080096e9 	.word	0x080096e9
 800972c:	08009871 	.word	0x08009871
 8009730:	08009799 	.word	0x08009799
 8009734:	0800982b 	.word	0x0800982b
 8009738:	080096e9 	.word	0x080096e9
 800973c:	080096e9 	.word	0x080096e9
 8009740:	08009893 	.word	0x08009893
 8009744:	080096e9 	.word	0x080096e9
 8009748:	08009799 	.word	0x08009799
 800974c:	080096e9 	.word	0x080096e9
 8009750:	080096e9 	.word	0x080096e9
 8009754:	08009833 	.word	0x08009833
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	1d1a      	adds	r2, r3, #4
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	602a      	str	r2, [r5, #0]
 8009760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009768:	2301      	movs	r3, #1
 800976a:	e09f      	b.n	80098ac <_printf_i+0x1ec>
 800976c:	6820      	ldr	r0, [r4, #0]
 800976e:	682b      	ldr	r3, [r5, #0]
 8009770:	0607      	lsls	r7, r0, #24
 8009772:	f103 0104 	add.w	r1, r3, #4
 8009776:	6029      	str	r1, [r5, #0]
 8009778:	d501      	bpl.n	800977e <_printf_i+0xbe>
 800977a:	681e      	ldr	r6, [r3, #0]
 800977c:	e003      	b.n	8009786 <_printf_i+0xc6>
 800977e:	0646      	lsls	r6, r0, #25
 8009780:	d5fb      	bpl.n	800977a <_printf_i+0xba>
 8009782:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009786:	2e00      	cmp	r6, #0
 8009788:	da03      	bge.n	8009792 <_printf_i+0xd2>
 800978a:	232d      	movs	r3, #45	; 0x2d
 800978c:	4276      	negs	r6, r6
 800978e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009792:	485a      	ldr	r0, [pc, #360]	; (80098fc <_printf_i+0x23c>)
 8009794:	230a      	movs	r3, #10
 8009796:	e012      	b.n	80097be <_printf_i+0xfe>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	6820      	ldr	r0, [r4, #0]
 800979c:	1d19      	adds	r1, r3, #4
 800979e:	6029      	str	r1, [r5, #0]
 80097a0:	0605      	lsls	r5, r0, #24
 80097a2:	d501      	bpl.n	80097a8 <_printf_i+0xe8>
 80097a4:	681e      	ldr	r6, [r3, #0]
 80097a6:	e002      	b.n	80097ae <_printf_i+0xee>
 80097a8:	0641      	lsls	r1, r0, #25
 80097aa:	d5fb      	bpl.n	80097a4 <_printf_i+0xe4>
 80097ac:	881e      	ldrh	r6, [r3, #0]
 80097ae:	4853      	ldr	r0, [pc, #332]	; (80098fc <_printf_i+0x23c>)
 80097b0:	2f6f      	cmp	r7, #111	; 0x6f
 80097b2:	bf0c      	ite	eq
 80097b4:	2308      	moveq	r3, #8
 80097b6:	230a      	movne	r3, #10
 80097b8:	2100      	movs	r1, #0
 80097ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097be:	6865      	ldr	r5, [r4, #4]
 80097c0:	60a5      	str	r5, [r4, #8]
 80097c2:	2d00      	cmp	r5, #0
 80097c4:	bfa2      	ittt	ge
 80097c6:	6821      	ldrge	r1, [r4, #0]
 80097c8:	f021 0104 	bicge.w	r1, r1, #4
 80097cc:	6021      	strge	r1, [r4, #0]
 80097ce:	b90e      	cbnz	r6, 80097d4 <_printf_i+0x114>
 80097d0:	2d00      	cmp	r5, #0
 80097d2:	d04b      	beq.n	800986c <_printf_i+0x1ac>
 80097d4:	4615      	mov	r5, r2
 80097d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80097da:	fb03 6711 	mls	r7, r3, r1, r6
 80097de:	5dc7      	ldrb	r7, [r0, r7]
 80097e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097e4:	4637      	mov	r7, r6
 80097e6:	42bb      	cmp	r3, r7
 80097e8:	460e      	mov	r6, r1
 80097ea:	d9f4      	bls.n	80097d6 <_printf_i+0x116>
 80097ec:	2b08      	cmp	r3, #8
 80097ee:	d10b      	bne.n	8009808 <_printf_i+0x148>
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	07de      	lsls	r6, r3, #31
 80097f4:	d508      	bpl.n	8009808 <_printf_i+0x148>
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	6861      	ldr	r1, [r4, #4]
 80097fa:	4299      	cmp	r1, r3
 80097fc:	bfde      	ittt	le
 80097fe:	2330      	movle	r3, #48	; 0x30
 8009800:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009804:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009808:	1b52      	subs	r2, r2, r5
 800980a:	6122      	str	r2, [r4, #16]
 800980c:	f8cd a000 	str.w	sl, [sp]
 8009810:	464b      	mov	r3, r9
 8009812:	aa03      	add	r2, sp, #12
 8009814:	4621      	mov	r1, r4
 8009816:	4640      	mov	r0, r8
 8009818:	f7ff fee4 	bl	80095e4 <_printf_common>
 800981c:	3001      	adds	r0, #1
 800981e:	d14a      	bne.n	80098b6 <_printf_i+0x1f6>
 8009820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009824:	b004      	add	sp, #16
 8009826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	f043 0320 	orr.w	r3, r3, #32
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	4833      	ldr	r0, [pc, #204]	; (8009900 <_printf_i+0x240>)
 8009834:	2778      	movs	r7, #120	; 0x78
 8009836:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	6829      	ldr	r1, [r5, #0]
 800983e:	061f      	lsls	r7, r3, #24
 8009840:	f851 6b04 	ldr.w	r6, [r1], #4
 8009844:	d402      	bmi.n	800984c <_printf_i+0x18c>
 8009846:	065f      	lsls	r7, r3, #25
 8009848:	bf48      	it	mi
 800984a:	b2b6      	uxthmi	r6, r6
 800984c:	07df      	lsls	r7, r3, #31
 800984e:	bf48      	it	mi
 8009850:	f043 0320 	orrmi.w	r3, r3, #32
 8009854:	6029      	str	r1, [r5, #0]
 8009856:	bf48      	it	mi
 8009858:	6023      	strmi	r3, [r4, #0]
 800985a:	b91e      	cbnz	r6, 8009864 <_printf_i+0x1a4>
 800985c:	6823      	ldr	r3, [r4, #0]
 800985e:	f023 0320 	bic.w	r3, r3, #32
 8009862:	6023      	str	r3, [r4, #0]
 8009864:	2310      	movs	r3, #16
 8009866:	e7a7      	b.n	80097b8 <_printf_i+0xf8>
 8009868:	4824      	ldr	r0, [pc, #144]	; (80098fc <_printf_i+0x23c>)
 800986a:	e7e4      	b.n	8009836 <_printf_i+0x176>
 800986c:	4615      	mov	r5, r2
 800986e:	e7bd      	b.n	80097ec <_printf_i+0x12c>
 8009870:	682b      	ldr	r3, [r5, #0]
 8009872:	6826      	ldr	r6, [r4, #0]
 8009874:	6961      	ldr	r1, [r4, #20]
 8009876:	1d18      	adds	r0, r3, #4
 8009878:	6028      	str	r0, [r5, #0]
 800987a:	0635      	lsls	r5, r6, #24
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	d501      	bpl.n	8009884 <_printf_i+0x1c4>
 8009880:	6019      	str	r1, [r3, #0]
 8009882:	e002      	b.n	800988a <_printf_i+0x1ca>
 8009884:	0670      	lsls	r0, r6, #25
 8009886:	d5fb      	bpl.n	8009880 <_printf_i+0x1c0>
 8009888:	8019      	strh	r1, [r3, #0]
 800988a:	2300      	movs	r3, #0
 800988c:	6123      	str	r3, [r4, #16]
 800988e:	4615      	mov	r5, r2
 8009890:	e7bc      	b.n	800980c <_printf_i+0x14c>
 8009892:	682b      	ldr	r3, [r5, #0]
 8009894:	1d1a      	adds	r2, r3, #4
 8009896:	602a      	str	r2, [r5, #0]
 8009898:	681d      	ldr	r5, [r3, #0]
 800989a:	6862      	ldr	r2, [r4, #4]
 800989c:	2100      	movs	r1, #0
 800989e:	4628      	mov	r0, r5
 80098a0:	f7f6 fcbe 	bl	8000220 <memchr>
 80098a4:	b108      	cbz	r0, 80098aa <_printf_i+0x1ea>
 80098a6:	1b40      	subs	r0, r0, r5
 80098a8:	6060      	str	r0, [r4, #4]
 80098aa:	6863      	ldr	r3, [r4, #4]
 80098ac:	6123      	str	r3, [r4, #16]
 80098ae:	2300      	movs	r3, #0
 80098b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098b4:	e7aa      	b.n	800980c <_printf_i+0x14c>
 80098b6:	6923      	ldr	r3, [r4, #16]
 80098b8:	462a      	mov	r2, r5
 80098ba:	4649      	mov	r1, r9
 80098bc:	4640      	mov	r0, r8
 80098be:	47d0      	blx	sl
 80098c0:	3001      	adds	r0, #1
 80098c2:	d0ad      	beq.n	8009820 <_printf_i+0x160>
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	079b      	lsls	r3, r3, #30
 80098c8:	d413      	bmi.n	80098f2 <_printf_i+0x232>
 80098ca:	68e0      	ldr	r0, [r4, #12]
 80098cc:	9b03      	ldr	r3, [sp, #12]
 80098ce:	4298      	cmp	r0, r3
 80098d0:	bfb8      	it	lt
 80098d2:	4618      	movlt	r0, r3
 80098d4:	e7a6      	b.n	8009824 <_printf_i+0x164>
 80098d6:	2301      	movs	r3, #1
 80098d8:	4632      	mov	r2, r6
 80098da:	4649      	mov	r1, r9
 80098dc:	4640      	mov	r0, r8
 80098de:	47d0      	blx	sl
 80098e0:	3001      	adds	r0, #1
 80098e2:	d09d      	beq.n	8009820 <_printf_i+0x160>
 80098e4:	3501      	adds	r5, #1
 80098e6:	68e3      	ldr	r3, [r4, #12]
 80098e8:	9903      	ldr	r1, [sp, #12]
 80098ea:	1a5b      	subs	r3, r3, r1
 80098ec:	42ab      	cmp	r3, r5
 80098ee:	dcf2      	bgt.n	80098d6 <_printf_i+0x216>
 80098f0:	e7eb      	b.n	80098ca <_printf_i+0x20a>
 80098f2:	2500      	movs	r5, #0
 80098f4:	f104 0619 	add.w	r6, r4, #25
 80098f8:	e7f5      	b.n	80098e6 <_printf_i+0x226>
 80098fa:	bf00      	nop
 80098fc:	0800a529 	.word	0x0800a529
 8009900:	0800a53a 	.word	0x0800a53a

08009904 <__sflush_r>:
 8009904:	898a      	ldrh	r2, [r1, #12]
 8009906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990a:	4605      	mov	r5, r0
 800990c:	0710      	lsls	r0, r2, #28
 800990e:	460c      	mov	r4, r1
 8009910:	d458      	bmi.n	80099c4 <__sflush_r+0xc0>
 8009912:	684b      	ldr	r3, [r1, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	dc05      	bgt.n	8009924 <__sflush_r+0x20>
 8009918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	dc02      	bgt.n	8009924 <__sflush_r+0x20>
 800991e:	2000      	movs	r0, #0
 8009920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009926:	2e00      	cmp	r6, #0
 8009928:	d0f9      	beq.n	800991e <__sflush_r+0x1a>
 800992a:	2300      	movs	r3, #0
 800992c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009930:	682f      	ldr	r7, [r5, #0]
 8009932:	6a21      	ldr	r1, [r4, #32]
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	d032      	beq.n	800999e <__sflush_r+0x9a>
 8009938:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	075a      	lsls	r2, r3, #29
 800993e:	d505      	bpl.n	800994c <__sflush_r+0x48>
 8009940:	6863      	ldr	r3, [r4, #4]
 8009942:	1ac0      	subs	r0, r0, r3
 8009944:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009946:	b10b      	cbz	r3, 800994c <__sflush_r+0x48>
 8009948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800994a:	1ac0      	subs	r0, r0, r3
 800994c:	2300      	movs	r3, #0
 800994e:	4602      	mov	r2, r0
 8009950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009952:	6a21      	ldr	r1, [r4, #32]
 8009954:	4628      	mov	r0, r5
 8009956:	47b0      	blx	r6
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	d106      	bne.n	800996c <__sflush_r+0x68>
 800995e:	6829      	ldr	r1, [r5, #0]
 8009960:	291d      	cmp	r1, #29
 8009962:	d82b      	bhi.n	80099bc <__sflush_r+0xb8>
 8009964:	4a29      	ldr	r2, [pc, #164]	; (8009a0c <__sflush_r+0x108>)
 8009966:	410a      	asrs	r2, r1
 8009968:	07d6      	lsls	r6, r2, #31
 800996a:	d427      	bmi.n	80099bc <__sflush_r+0xb8>
 800996c:	2200      	movs	r2, #0
 800996e:	6062      	str	r2, [r4, #4]
 8009970:	04d9      	lsls	r1, r3, #19
 8009972:	6922      	ldr	r2, [r4, #16]
 8009974:	6022      	str	r2, [r4, #0]
 8009976:	d504      	bpl.n	8009982 <__sflush_r+0x7e>
 8009978:	1c42      	adds	r2, r0, #1
 800997a:	d101      	bne.n	8009980 <__sflush_r+0x7c>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	b903      	cbnz	r3, 8009982 <__sflush_r+0x7e>
 8009980:	6560      	str	r0, [r4, #84]	; 0x54
 8009982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009984:	602f      	str	r7, [r5, #0]
 8009986:	2900      	cmp	r1, #0
 8009988:	d0c9      	beq.n	800991e <__sflush_r+0x1a>
 800998a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800998e:	4299      	cmp	r1, r3
 8009990:	d002      	beq.n	8009998 <__sflush_r+0x94>
 8009992:	4628      	mov	r0, r5
 8009994:	f000 fa22 	bl	8009ddc <_free_r>
 8009998:	2000      	movs	r0, #0
 800999a:	6360      	str	r0, [r4, #52]	; 0x34
 800999c:	e7c0      	b.n	8009920 <__sflush_r+0x1c>
 800999e:	2301      	movs	r3, #1
 80099a0:	4628      	mov	r0, r5
 80099a2:	47b0      	blx	r6
 80099a4:	1c41      	adds	r1, r0, #1
 80099a6:	d1c8      	bne.n	800993a <__sflush_r+0x36>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d0c5      	beq.n	800993a <__sflush_r+0x36>
 80099ae:	2b1d      	cmp	r3, #29
 80099b0:	d001      	beq.n	80099b6 <__sflush_r+0xb2>
 80099b2:	2b16      	cmp	r3, #22
 80099b4:	d101      	bne.n	80099ba <__sflush_r+0xb6>
 80099b6:	602f      	str	r7, [r5, #0]
 80099b8:	e7b1      	b.n	800991e <__sflush_r+0x1a>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099c0:	81a3      	strh	r3, [r4, #12]
 80099c2:	e7ad      	b.n	8009920 <__sflush_r+0x1c>
 80099c4:	690f      	ldr	r7, [r1, #16]
 80099c6:	2f00      	cmp	r7, #0
 80099c8:	d0a9      	beq.n	800991e <__sflush_r+0x1a>
 80099ca:	0793      	lsls	r3, r2, #30
 80099cc:	680e      	ldr	r6, [r1, #0]
 80099ce:	bf08      	it	eq
 80099d0:	694b      	ldreq	r3, [r1, #20]
 80099d2:	600f      	str	r7, [r1, #0]
 80099d4:	bf18      	it	ne
 80099d6:	2300      	movne	r3, #0
 80099d8:	eba6 0807 	sub.w	r8, r6, r7
 80099dc:	608b      	str	r3, [r1, #8]
 80099de:	f1b8 0f00 	cmp.w	r8, #0
 80099e2:	dd9c      	ble.n	800991e <__sflush_r+0x1a>
 80099e4:	6a21      	ldr	r1, [r4, #32]
 80099e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099e8:	4643      	mov	r3, r8
 80099ea:	463a      	mov	r2, r7
 80099ec:	4628      	mov	r0, r5
 80099ee:	47b0      	blx	r6
 80099f0:	2800      	cmp	r0, #0
 80099f2:	dc06      	bgt.n	8009a02 <__sflush_r+0xfe>
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099fa:	81a3      	strh	r3, [r4, #12]
 80099fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a00:	e78e      	b.n	8009920 <__sflush_r+0x1c>
 8009a02:	4407      	add	r7, r0
 8009a04:	eba8 0800 	sub.w	r8, r8, r0
 8009a08:	e7e9      	b.n	80099de <__sflush_r+0xda>
 8009a0a:	bf00      	nop
 8009a0c:	dfbffffe 	.word	0xdfbffffe

08009a10 <_fflush_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	690b      	ldr	r3, [r1, #16]
 8009a14:	4605      	mov	r5, r0
 8009a16:	460c      	mov	r4, r1
 8009a18:	b913      	cbnz	r3, 8009a20 <_fflush_r+0x10>
 8009a1a:	2500      	movs	r5, #0
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	b118      	cbz	r0, 8009a2a <_fflush_r+0x1a>
 8009a22:	6a03      	ldr	r3, [r0, #32]
 8009a24:	b90b      	cbnz	r3, 8009a2a <_fflush_r+0x1a>
 8009a26:	f7ff fb21 	bl	800906c <__sinit>
 8009a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0f3      	beq.n	8009a1a <_fflush_r+0xa>
 8009a32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a34:	07d0      	lsls	r0, r2, #31
 8009a36:	d404      	bmi.n	8009a42 <_fflush_r+0x32>
 8009a38:	0599      	lsls	r1, r3, #22
 8009a3a:	d402      	bmi.n	8009a42 <_fflush_r+0x32>
 8009a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a3e:	f7ff fbec 	bl	800921a <__retarget_lock_acquire_recursive>
 8009a42:	4628      	mov	r0, r5
 8009a44:	4621      	mov	r1, r4
 8009a46:	f7ff ff5d 	bl	8009904 <__sflush_r>
 8009a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a4c:	07da      	lsls	r2, r3, #31
 8009a4e:	4605      	mov	r5, r0
 8009a50:	d4e4      	bmi.n	8009a1c <_fflush_r+0xc>
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	059b      	lsls	r3, r3, #22
 8009a56:	d4e1      	bmi.n	8009a1c <_fflush_r+0xc>
 8009a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5a:	f7ff fbdf 	bl	800921c <__retarget_lock_release_recursive>
 8009a5e:	e7dd      	b.n	8009a1c <_fflush_r+0xc>

08009a60 <__malloc_lock>:
 8009a60:	4801      	ldr	r0, [pc, #4]	; (8009a68 <__malloc_lock+0x8>)
 8009a62:	f7ff bbda 	b.w	800921a <__retarget_lock_acquire_recursive>
 8009a66:	bf00      	nop
 8009a68:	20005bc0 	.word	0x20005bc0

08009a6c <__malloc_unlock>:
 8009a6c:	4801      	ldr	r0, [pc, #4]	; (8009a74 <__malloc_unlock+0x8>)
 8009a6e:	f7ff bbd5 	b.w	800921c <__retarget_lock_release_recursive>
 8009a72:	bf00      	nop
 8009a74:	20005bc0 	.word	0x20005bc0

08009a78 <__sread>:
 8009a78:	b510      	push	{r4, lr}
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a80:	f000 f978 	bl	8009d74 <_read_r>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	bfab      	itete	ge
 8009a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8009a8c:	181b      	addge	r3, r3, r0
 8009a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a92:	bfac      	ite	ge
 8009a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a96:	81a3      	strhlt	r3, [r4, #12]
 8009a98:	bd10      	pop	{r4, pc}

08009a9a <__swrite>:
 8009a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9e:	461f      	mov	r7, r3
 8009aa0:	898b      	ldrh	r3, [r1, #12]
 8009aa2:	05db      	lsls	r3, r3, #23
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	4616      	mov	r6, r2
 8009aaa:	d505      	bpl.n	8009ab8 <__swrite+0x1e>
 8009aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f000 f94c 	bl	8009d50 <_lseek_r>
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ac2:	81a3      	strh	r3, [r4, #12]
 8009ac4:	4632      	mov	r2, r6
 8009ac6:	463b      	mov	r3, r7
 8009ac8:	4628      	mov	r0, r5
 8009aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ace:	f000 b973 	b.w	8009db8 <_write_r>

08009ad2 <__sseek>:
 8009ad2:	b510      	push	{r4, lr}
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ada:	f000 f939 	bl	8009d50 <_lseek_r>
 8009ade:	1c43      	adds	r3, r0, #1
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	bf15      	itete	ne
 8009ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009aee:	81a3      	strheq	r3, [r4, #12]
 8009af0:	bf18      	it	ne
 8009af2:	81a3      	strhne	r3, [r4, #12]
 8009af4:	bd10      	pop	{r4, pc}

08009af6 <__sclose>:
 8009af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009afa:	f000 b8f7 	b.w	8009cec <_close_r>

08009afe <__swbuf_r>:
 8009afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b00:	460e      	mov	r6, r1
 8009b02:	4614      	mov	r4, r2
 8009b04:	4605      	mov	r5, r0
 8009b06:	b118      	cbz	r0, 8009b10 <__swbuf_r+0x12>
 8009b08:	6a03      	ldr	r3, [r0, #32]
 8009b0a:	b90b      	cbnz	r3, 8009b10 <__swbuf_r+0x12>
 8009b0c:	f7ff faae 	bl	800906c <__sinit>
 8009b10:	69a3      	ldr	r3, [r4, #24]
 8009b12:	60a3      	str	r3, [r4, #8]
 8009b14:	89a3      	ldrh	r3, [r4, #12]
 8009b16:	071a      	lsls	r2, r3, #28
 8009b18:	d525      	bpl.n	8009b66 <__swbuf_r+0x68>
 8009b1a:	6923      	ldr	r3, [r4, #16]
 8009b1c:	b31b      	cbz	r3, 8009b66 <__swbuf_r+0x68>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	6922      	ldr	r2, [r4, #16]
 8009b22:	1a98      	subs	r0, r3, r2
 8009b24:	6963      	ldr	r3, [r4, #20]
 8009b26:	b2f6      	uxtb	r6, r6
 8009b28:	4283      	cmp	r3, r0
 8009b2a:	4637      	mov	r7, r6
 8009b2c:	dc04      	bgt.n	8009b38 <__swbuf_r+0x3a>
 8009b2e:	4621      	mov	r1, r4
 8009b30:	4628      	mov	r0, r5
 8009b32:	f7ff ff6d 	bl	8009a10 <_fflush_r>
 8009b36:	b9e0      	cbnz	r0, 8009b72 <__swbuf_r+0x74>
 8009b38:	68a3      	ldr	r3, [r4, #8]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	60a3      	str	r3, [r4, #8]
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	6022      	str	r2, [r4, #0]
 8009b44:	701e      	strb	r6, [r3, #0]
 8009b46:	6962      	ldr	r2, [r4, #20]
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d004      	beq.n	8009b58 <__swbuf_r+0x5a>
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	07db      	lsls	r3, r3, #31
 8009b52:	d506      	bpl.n	8009b62 <__swbuf_r+0x64>
 8009b54:	2e0a      	cmp	r6, #10
 8009b56:	d104      	bne.n	8009b62 <__swbuf_r+0x64>
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	f7ff ff58 	bl	8009a10 <_fflush_r>
 8009b60:	b938      	cbnz	r0, 8009b72 <__swbuf_r+0x74>
 8009b62:	4638      	mov	r0, r7
 8009b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b66:	4621      	mov	r1, r4
 8009b68:	4628      	mov	r0, r5
 8009b6a:	f000 f805 	bl	8009b78 <__swsetup_r>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d0d5      	beq.n	8009b1e <__swbuf_r+0x20>
 8009b72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009b76:	e7f4      	b.n	8009b62 <__swbuf_r+0x64>

08009b78 <__swsetup_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4b2a      	ldr	r3, [pc, #168]	; (8009c24 <__swsetup_r+0xac>)
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	460c      	mov	r4, r1
 8009b82:	b118      	cbz	r0, 8009b8c <__swsetup_r+0x14>
 8009b84:	6a03      	ldr	r3, [r0, #32]
 8009b86:	b90b      	cbnz	r3, 8009b8c <__swsetup_r+0x14>
 8009b88:	f7ff fa70 	bl	800906c <__sinit>
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b92:	0718      	lsls	r0, r3, #28
 8009b94:	d422      	bmi.n	8009bdc <__swsetup_r+0x64>
 8009b96:	06d9      	lsls	r1, r3, #27
 8009b98:	d407      	bmi.n	8009baa <__swsetup_r+0x32>
 8009b9a:	2309      	movs	r3, #9
 8009b9c:	602b      	str	r3, [r5, #0]
 8009b9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ba8:	e034      	b.n	8009c14 <__swsetup_r+0x9c>
 8009baa:	0758      	lsls	r0, r3, #29
 8009bac:	d512      	bpl.n	8009bd4 <__swsetup_r+0x5c>
 8009bae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bb0:	b141      	cbz	r1, 8009bc4 <__swsetup_r+0x4c>
 8009bb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bb6:	4299      	cmp	r1, r3
 8009bb8:	d002      	beq.n	8009bc0 <__swsetup_r+0x48>
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f000 f90e 	bl	8009ddc <_free_r>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	6363      	str	r3, [r4, #52]	; 0x34
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	2300      	movs	r3, #0
 8009bce:	6063      	str	r3, [r4, #4]
 8009bd0:	6923      	ldr	r3, [r4, #16]
 8009bd2:	6023      	str	r3, [r4, #0]
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	f043 0308 	orr.w	r3, r3, #8
 8009bda:	81a3      	strh	r3, [r4, #12]
 8009bdc:	6923      	ldr	r3, [r4, #16]
 8009bde:	b94b      	cbnz	r3, 8009bf4 <__swsetup_r+0x7c>
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bea:	d003      	beq.n	8009bf4 <__swsetup_r+0x7c>
 8009bec:	4621      	mov	r1, r4
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f000 f840 	bl	8009c74 <__smakebuf_r>
 8009bf4:	89a0      	ldrh	r0, [r4, #12]
 8009bf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bfa:	f010 0301 	ands.w	r3, r0, #1
 8009bfe:	d00a      	beq.n	8009c16 <__swsetup_r+0x9e>
 8009c00:	2300      	movs	r3, #0
 8009c02:	60a3      	str	r3, [r4, #8]
 8009c04:	6963      	ldr	r3, [r4, #20]
 8009c06:	425b      	negs	r3, r3
 8009c08:	61a3      	str	r3, [r4, #24]
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	b943      	cbnz	r3, 8009c20 <__swsetup_r+0xa8>
 8009c0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c12:	d1c4      	bne.n	8009b9e <__swsetup_r+0x26>
 8009c14:	bd38      	pop	{r3, r4, r5, pc}
 8009c16:	0781      	lsls	r1, r0, #30
 8009c18:	bf58      	it	pl
 8009c1a:	6963      	ldrpl	r3, [r4, #20]
 8009c1c:	60a3      	str	r3, [r4, #8]
 8009c1e:	e7f4      	b.n	8009c0a <__swsetup_r+0x92>
 8009c20:	2000      	movs	r0, #0
 8009c22:	e7f7      	b.n	8009c14 <__swsetup_r+0x9c>
 8009c24:	20000080 	.word	0x20000080

08009c28 <__swhatbuf_r>:
 8009c28:	b570      	push	{r4, r5, r6, lr}
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c30:	2900      	cmp	r1, #0
 8009c32:	b096      	sub	sp, #88	; 0x58
 8009c34:	4615      	mov	r5, r2
 8009c36:	461e      	mov	r6, r3
 8009c38:	da0d      	bge.n	8009c56 <__swhatbuf_r+0x2e>
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009c40:	f04f 0100 	mov.w	r1, #0
 8009c44:	bf0c      	ite	eq
 8009c46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009c4a:	2340      	movne	r3, #64	; 0x40
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	6031      	str	r1, [r6, #0]
 8009c50:	602b      	str	r3, [r5, #0]
 8009c52:	b016      	add	sp, #88	; 0x58
 8009c54:	bd70      	pop	{r4, r5, r6, pc}
 8009c56:	466a      	mov	r2, sp
 8009c58:	f000 f858 	bl	8009d0c <_fstat_r>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	dbec      	blt.n	8009c3a <__swhatbuf_r+0x12>
 8009c60:	9901      	ldr	r1, [sp, #4]
 8009c62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009c66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009c6a:	4259      	negs	r1, r3
 8009c6c:	4159      	adcs	r1, r3
 8009c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c72:	e7eb      	b.n	8009c4c <__swhatbuf_r+0x24>

08009c74 <__smakebuf_r>:
 8009c74:	898b      	ldrh	r3, [r1, #12]
 8009c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c78:	079d      	lsls	r5, r3, #30
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	d507      	bpl.n	8009c90 <__smakebuf_r+0x1c>
 8009c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	6123      	str	r3, [r4, #16]
 8009c88:	2301      	movs	r3, #1
 8009c8a:	6163      	str	r3, [r4, #20]
 8009c8c:	b002      	add	sp, #8
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	ab01      	add	r3, sp, #4
 8009c92:	466a      	mov	r2, sp
 8009c94:	f7ff ffc8 	bl	8009c28 <__swhatbuf_r>
 8009c98:	9900      	ldr	r1, [sp, #0]
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	f7ff fc21 	bl	80094e4 <_malloc_r>
 8009ca2:	b948      	cbnz	r0, 8009cb8 <__smakebuf_r+0x44>
 8009ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca8:	059a      	lsls	r2, r3, #22
 8009caa:	d4ef      	bmi.n	8009c8c <__smakebuf_r+0x18>
 8009cac:	f023 0303 	bic.w	r3, r3, #3
 8009cb0:	f043 0302 	orr.w	r3, r3, #2
 8009cb4:	81a3      	strh	r3, [r4, #12]
 8009cb6:	e7e3      	b.n	8009c80 <__smakebuf_r+0xc>
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	6020      	str	r0, [r4, #0]
 8009cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	9b00      	ldr	r3, [sp, #0]
 8009cc4:	6163      	str	r3, [r4, #20]
 8009cc6:	9b01      	ldr	r3, [sp, #4]
 8009cc8:	6120      	str	r0, [r4, #16]
 8009cca:	b15b      	cbz	r3, 8009ce4 <__smakebuf_r+0x70>
 8009ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f000 f82d 	bl	8009d30 <_isatty_r>
 8009cd6:	b128      	cbz	r0, 8009ce4 <__smakebuf_r+0x70>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f023 0303 	bic.w	r3, r3, #3
 8009cde:	f043 0301 	orr.w	r3, r3, #1
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	431d      	orrs	r5, r3
 8009ce8:	81a5      	strh	r5, [r4, #12]
 8009cea:	e7cf      	b.n	8009c8c <__smakebuf_r+0x18>

08009cec <_close_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	4d06      	ldr	r5, [pc, #24]	; (8009d08 <_close_r+0x1c>)
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	602b      	str	r3, [r5, #0]
 8009cf8:	f7f8 fd9b 	bl	8002832 <_close>
 8009cfc:	1c43      	adds	r3, r0, #1
 8009cfe:	d102      	bne.n	8009d06 <_close_r+0x1a>
 8009d00:	682b      	ldr	r3, [r5, #0]
 8009d02:	b103      	cbz	r3, 8009d06 <_close_r+0x1a>
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	bd38      	pop	{r3, r4, r5, pc}
 8009d08:	20005bcc 	.word	0x20005bcc

08009d0c <_fstat_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d07      	ldr	r5, [pc, #28]	; (8009d2c <_fstat_r+0x20>)
 8009d10:	2300      	movs	r3, #0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	4611      	mov	r1, r2
 8009d18:	602b      	str	r3, [r5, #0]
 8009d1a:	f7f8 fd96 	bl	800284a <_fstat>
 8009d1e:	1c43      	adds	r3, r0, #1
 8009d20:	d102      	bne.n	8009d28 <_fstat_r+0x1c>
 8009d22:	682b      	ldr	r3, [r5, #0]
 8009d24:	b103      	cbz	r3, 8009d28 <_fstat_r+0x1c>
 8009d26:	6023      	str	r3, [r4, #0]
 8009d28:	bd38      	pop	{r3, r4, r5, pc}
 8009d2a:	bf00      	nop
 8009d2c:	20005bcc 	.word	0x20005bcc

08009d30 <_isatty_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4d06      	ldr	r5, [pc, #24]	; (8009d4c <_isatty_r+0x1c>)
 8009d34:	2300      	movs	r3, #0
 8009d36:	4604      	mov	r4, r0
 8009d38:	4608      	mov	r0, r1
 8009d3a:	602b      	str	r3, [r5, #0]
 8009d3c:	f7f8 fd95 	bl	800286a <_isatty>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d102      	bne.n	8009d4a <_isatty_r+0x1a>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	b103      	cbz	r3, 8009d4a <_isatty_r+0x1a>
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	20005bcc 	.word	0x20005bcc

08009d50 <_lseek_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4d07      	ldr	r5, [pc, #28]	; (8009d70 <_lseek_r+0x20>)
 8009d54:	4604      	mov	r4, r0
 8009d56:	4608      	mov	r0, r1
 8009d58:	4611      	mov	r1, r2
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	602a      	str	r2, [r5, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f7f8 fd8e 	bl	8002880 <_lseek>
 8009d64:	1c43      	adds	r3, r0, #1
 8009d66:	d102      	bne.n	8009d6e <_lseek_r+0x1e>
 8009d68:	682b      	ldr	r3, [r5, #0]
 8009d6a:	b103      	cbz	r3, 8009d6e <_lseek_r+0x1e>
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	bd38      	pop	{r3, r4, r5, pc}
 8009d70:	20005bcc 	.word	0x20005bcc

08009d74 <_read_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	4d07      	ldr	r5, [pc, #28]	; (8009d94 <_read_r+0x20>)
 8009d78:	4604      	mov	r4, r0
 8009d7a:	4608      	mov	r0, r1
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	2200      	movs	r2, #0
 8009d80:	602a      	str	r2, [r5, #0]
 8009d82:	461a      	mov	r2, r3
 8009d84:	f7f8 fd1c 	bl	80027c0 <_read>
 8009d88:	1c43      	adds	r3, r0, #1
 8009d8a:	d102      	bne.n	8009d92 <_read_r+0x1e>
 8009d8c:	682b      	ldr	r3, [r5, #0]
 8009d8e:	b103      	cbz	r3, 8009d92 <_read_r+0x1e>
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	bd38      	pop	{r3, r4, r5, pc}
 8009d94:	20005bcc 	.word	0x20005bcc

08009d98 <_sbrk_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	4d06      	ldr	r5, [pc, #24]	; (8009db4 <_sbrk_r+0x1c>)
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	602b      	str	r3, [r5, #0]
 8009da4:	f7f8 fd7a 	bl	800289c <_sbrk>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_sbrk_r+0x1a>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_sbrk_r+0x1a>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	20005bcc 	.word	0x20005bcc

08009db8 <_write_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	4d07      	ldr	r5, [pc, #28]	; (8009dd8 <_write_r+0x20>)
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	4608      	mov	r0, r1
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	602a      	str	r2, [r5, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f7f8 fd17 	bl	80027fa <_write>
 8009dcc:	1c43      	adds	r3, r0, #1
 8009dce:	d102      	bne.n	8009dd6 <_write_r+0x1e>
 8009dd0:	682b      	ldr	r3, [r5, #0]
 8009dd2:	b103      	cbz	r3, 8009dd6 <_write_r+0x1e>
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	bd38      	pop	{r3, r4, r5, pc}
 8009dd8:	20005bcc 	.word	0x20005bcc

08009ddc <_free_r>:
 8009ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dde:	2900      	cmp	r1, #0
 8009de0:	d044      	beq.n	8009e6c <_free_r+0x90>
 8009de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009de6:	9001      	str	r0, [sp, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f1a1 0404 	sub.w	r4, r1, #4
 8009dee:	bfb8      	it	lt
 8009df0:	18e4      	addlt	r4, r4, r3
 8009df2:	f7ff fe35 	bl	8009a60 <__malloc_lock>
 8009df6:	4a1e      	ldr	r2, [pc, #120]	; (8009e70 <_free_r+0x94>)
 8009df8:	9801      	ldr	r0, [sp, #4]
 8009dfa:	6813      	ldr	r3, [r2, #0]
 8009dfc:	b933      	cbnz	r3, 8009e0c <_free_r+0x30>
 8009dfe:	6063      	str	r3, [r4, #4]
 8009e00:	6014      	str	r4, [r2, #0]
 8009e02:	b003      	add	sp, #12
 8009e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e08:	f7ff be30 	b.w	8009a6c <__malloc_unlock>
 8009e0c:	42a3      	cmp	r3, r4
 8009e0e:	d908      	bls.n	8009e22 <_free_r+0x46>
 8009e10:	6825      	ldr	r5, [r4, #0]
 8009e12:	1961      	adds	r1, r4, r5
 8009e14:	428b      	cmp	r3, r1
 8009e16:	bf01      	itttt	eq
 8009e18:	6819      	ldreq	r1, [r3, #0]
 8009e1a:	685b      	ldreq	r3, [r3, #4]
 8009e1c:	1949      	addeq	r1, r1, r5
 8009e1e:	6021      	streq	r1, [r4, #0]
 8009e20:	e7ed      	b.n	8009dfe <_free_r+0x22>
 8009e22:	461a      	mov	r2, r3
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	b10b      	cbz	r3, 8009e2c <_free_r+0x50>
 8009e28:	42a3      	cmp	r3, r4
 8009e2a:	d9fa      	bls.n	8009e22 <_free_r+0x46>
 8009e2c:	6811      	ldr	r1, [r2, #0]
 8009e2e:	1855      	adds	r5, r2, r1
 8009e30:	42a5      	cmp	r5, r4
 8009e32:	d10b      	bne.n	8009e4c <_free_r+0x70>
 8009e34:	6824      	ldr	r4, [r4, #0]
 8009e36:	4421      	add	r1, r4
 8009e38:	1854      	adds	r4, r2, r1
 8009e3a:	42a3      	cmp	r3, r4
 8009e3c:	6011      	str	r1, [r2, #0]
 8009e3e:	d1e0      	bne.n	8009e02 <_free_r+0x26>
 8009e40:	681c      	ldr	r4, [r3, #0]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	6053      	str	r3, [r2, #4]
 8009e46:	440c      	add	r4, r1
 8009e48:	6014      	str	r4, [r2, #0]
 8009e4a:	e7da      	b.n	8009e02 <_free_r+0x26>
 8009e4c:	d902      	bls.n	8009e54 <_free_r+0x78>
 8009e4e:	230c      	movs	r3, #12
 8009e50:	6003      	str	r3, [r0, #0]
 8009e52:	e7d6      	b.n	8009e02 <_free_r+0x26>
 8009e54:	6825      	ldr	r5, [r4, #0]
 8009e56:	1961      	adds	r1, r4, r5
 8009e58:	428b      	cmp	r3, r1
 8009e5a:	bf04      	itt	eq
 8009e5c:	6819      	ldreq	r1, [r3, #0]
 8009e5e:	685b      	ldreq	r3, [r3, #4]
 8009e60:	6063      	str	r3, [r4, #4]
 8009e62:	bf04      	itt	eq
 8009e64:	1949      	addeq	r1, r1, r5
 8009e66:	6021      	streq	r1, [r4, #0]
 8009e68:	6054      	str	r4, [r2, #4]
 8009e6a:	e7ca      	b.n	8009e02 <_free_r+0x26>
 8009e6c:	b003      	add	sp, #12
 8009e6e:	bd30      	pop	{r4, r5, pc}
 8009e70:	20005bc4 	.word	0x20005bc4

08009e74 <sqrt>:
 8009e74:	b538      	push	{r3, r4, r5, lr}
 8009e76:	ed2d 8b02 	vpush	{d8}
 8009e7a:	ec55 4b10 	vmov	r4, r5, d0
 8009e7e:	f000 f825 	bl	8009ecc <__ieee754_sqrt>
 8009e82:	4622      	mov	r2, r4
 8009e84:	462b      	mov	r3, r5
 8009e86:	4620      	mov	r0, r4
 8009e88:	4629      	mov	r1, r5
 8009e8a:	eeb0 8a40 	vmov.f32	s16, s0
 8009e8e:	eef0 8a60 	vmov.f32	s17, s1
 8009e92:	f7f6 fe6b 	bl	8000b6c <__aeabi_dcmpun>
 8009e96:	b990      	cbnz	r0, 8009ebe <sqrt+0x4a>
 8009e98:	2200      	movs	r2, #0
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	f7f6 fe3c 	bl	8000b1c <__aeabi_dcmplt>
 8009ea4:	b158      	cbz	r0, 8009ebe <sqrt+0x4a>
 8009ea6:	f7ff f98d 	bl	80091c4 <__errno>
 8009eaa:	2321      	movs	r3, #33	; 0x21
 8009eac:	6003      	str	r3, [r0, #0]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	f7f6 fce9 	bl	800088c <__aeabi_ddiv>
 8009eba:	ec41 0b18 	vmov	d8, r0, r1
 8009ebe:	eeb0 0a48 	vmov.f32	s0, s16
 8009ec2:	eef0 0a68 	vmov.f32	s1, s17
 8009ec6:	ecbd 8b02 	vpop	{d8}
 8009eca:	bd38      	pop	{r3, r4, r5, pc}

08009ecc <__ieee754_sqrt>:
 8009ecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed0:	ec55 4b10 	vmov	r4, r5, d0
 8009ed4:	4e67      	ldr	r6, [pc, #412]	; (800a074 <__ieee754_sqrt+0x1a8>)
 8009ed6:	43ae      	bics	r6, r5
 8009ed8:	ee10 0a10 	vmov	r0, s0
 8009edc:	ee10 2a10 	vmov	r2, s0
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	462b      	mov	r3, r5
 8009ee4:	d10d      	bne.n	8009f02 <__ieee754_sqrt+0x36>
 8009ee6:	f7f6 fba7 	bl	8000638 <__aeabi_dmul>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4620      	mov	r0, r4
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	f7f6 f9eb 	bl	80002cc <__adddf3>
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	460d      	mov	r5, r1
 8009efa:	ec45 4b10 	vmov	d0, r4, r5
 8009efe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f02:	2d00      	cmp	r5, #0
 8009f04:	dc0b      	bgt.n	8009f1e <__ieee754_sqrt+0x52>
 8009f06:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f0a:	4326      	orrs	r6, r4
 8009f0c:	d0f5      	beq.n	8009efa <__ieee754_sqrt+0x2e>
 8009f0e:	b135      	cbz	r5, 8009f1e <__ieee754_sqrt+0x52>
 8009f10:	f7f6 f9da 	bl	80002c8 <__aeabi_dsub>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	f7f6 fcb8 	bl	800088c <__aeabi_ddiv>
 8009f1c:	e7eb      	b.n	8009ef6 <__ieee754_sqrt+0x2a>
 8009f1e:	1509      	asrs	r1, r1, #20
 8009f20:	f000 808d 	beq.w	800a03e <__ieee754_sqrt+0x172>
 8009f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f28:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009f2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f30:	07c9      	lsls	r1, r1, #31
 8009f32:	bf5c      	itt	pl
 8009f34:	005b      	lslpl	r3, r3, #1
 8009f36:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009f3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f3e:	bf58      	it	pl
 8009f40:	0052      	lslpl	r2, r2, #1
 8009f42:	2500      	movs	r5, #0
 8009f44:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009f48:	1076      	asrs	r6, r6, #1
 8009f4a:	0052      	lsls	r2, r2, #1
 8009f4c:	f04f 0e16 	mov.w	lr, #22
 8009f50:	46ac      	mov	ip, r5
 8009f52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f56:	eb0c 0001 	add.w	r0, ip, r1
 8009f5a:	4298      	cmp	r0, r3
 8009f5c:	bfde      	ittt	le
 8009f5e:	1a1b      	suble	r3, r3, r0
 8009f60:	eb00 0c01 	addle.w	ip, r0, r1
 8009f64:	186d      	addle	r5, r5, r1
 8009f66:	005b      	lsls	r3, r3, #1
 8009f68:	f1be 0e01 	subs.w	lr, lr, #1
 8009f6c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009f70:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009f74:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009f78:	d1ed      	bne.n	8009f56 <__ieee754_sqrt+0x8a>
 8009f7a:	4674      	mov	r4, lr
 8009f7c:	2720      	movs	r7, #32
 8009f7e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009f82:	4563      	cmp	r3, ip
 8009f84:	eb01 000e 	add.w	r0, r1, lr
 8009f88:	dc02      	bgt.n	8009f90 <__ieee754_sqrt+0xc4>
 8009f8a:	d113      	bne.n	8009fb4 <__ieee754_sqrt+0xe8>
 8009f8c:	4290      	cmp	r0, r2
 8009f8e:	d811      	bhi.n	8009fb4 <__ieee754_sqrt+0xe8>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	eb00 0e01 	add.w	lr, r0, r1
 8009f96:	da57      	bge.n	800a048 <__ieee754_sqrt+0x17c>
 8009f98:	f1be 0f00 	cmp.w	lr, #0
 8009f9c:	db54      	blt.n	800a048 <__ieee754_sqrt+0x17c>
 8009f9e:	f10c 0801 	add.w	r8, ip, #1
 8009fa2:	eba3 030c 	sub.w	r3, r3, ip
 8009fa6:	4290      	cmp	r0, r2
 8009fa8:	bf88      	it	hi
 8009faa:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8009fae:	1a12      	subs	r2, r2, r0
 8009fb0:	440c      	add	r4, r1
 8009fb2:	46c4      	mov	ip, r8
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	3f01      	subs	r7, #1
 8009fb8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009fbc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009fc0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009fc4:	d1dd      	bne.n	8009f82 <__ieee754_sqrt+0xb6>
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	d01b      	beq.n	800a002 <__ieee754_sqrt+0x136>
 8009fca:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a078 <__ieee754_sqrt+0x1ac>
 8009fce:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a07c <__ieee754_sqrt+0x1b0>
 8009fd2:	e9da 0100 	ldrd	r0, r1, [sl]
 8009fd6:	e9db 2300 	ldrd	r2, r3, [fp]
 8009fda:	f7f6 f975 	bl	80002c8 <__aeabi_dsub>
 8009fde:	e9da 8900 	ldrd	r8, r9, [sl]
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	4649      	mov	r1, r9
 8009fea:	f7f6 fda1 	bl	8000b30 <__aeabi_dcmple>
 8009fee:	b140      	cbz	r0, 800a002 <__ieee754_sqrt+0x136>
 8009ff0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009ff4:	e9da 0100 	ldrd	r0, r1, [sl]
 8009ff8:	e9db 2300 	ldrd	r2, r3, [fp]
 8009ffc:	d126      	bne.n	800a04c <__ieee754_sqrt+0x180>
 8009ffe:	3501      	adds	r5, #1
 800a000:	463c      	mov	r4, r7
 800a002:	106a      	asrs	r2, r5, #1
 800a004:	0863      	lsrs	r3, r4, #1
 800a006:	07e9      	lsls	r1, r5, #31
 800a008:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a00c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a010:	bf48      	it	mi
 800a012:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a016:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800a01a:	461c      	mov	r4, r3
 800a01c:	e76d      	b.n	8009efa <__ieee754_sqrt+0x2e>
 800a01e:	0ad3      	lsrs	r3, r2, #11
 800a020:	3815      	subs	r0, #21
 800a022:	0552      	lsls	r2, r2, #21
 800a024:	2b00      	cmp	r3, #0
 800a026:	d0fa      	beq.n	800a01e <__ieee754_sqrt+0x152>
 800a028:	02dc      	lsls	r4, r3, #11
 800a02a:	d50a      	bpl.n	800a042 <__ieee754_sqrt+0x176>
 800a02c:	f1c1 0420 	rsb	r4, r1, #32
 800a030:	fa22 f404 	lsr.w	r4, r2, r4
 800a034:	1e4d      	subs	r5, r1, #1
 800a036:	408a      	lsls	r2, r1
 800a038:	4323      	orrs	r3, r4
 800a03a:	1b41      	subs	r1, r0, r5
 800a03c:	e772      	b.n	8009f24 <__ieee754_sqrt+0x58>
 800a03e:	4608      	mov	r0, r1
 800a040:	e7f0      	b.n	800a024 <__ieee754_sqrt+0x158>
 800a042:	005b      	lsls	r3, r3, #1
 800a044:	3101      	adds	r1, #1
 800a046:	e7ef      	b.n	800a028 <__ieee754_sqrt+0x15c>
 800a048:	46e0      	mov	r8, ip
 800a04a:	e7aa      	b.n	8009fa2 <__ieee754_sqrt+0xd6>
 800a04c:	f7f6 f93e 	bl	80002cc <__adddf3>
 800a050:	e9da 8900 	ldrd	r8, r9, [sl]
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4640      	mov	r0, r8
 800a05a:	4649      	mov	r1, r9
 800a05c:	f7f6 fd5e 	bl	8000b1c <__aeabi_dcmplt>
 800a060:	b120      	cbz	r0, 800a06c <__ieee754_sqrt+0x1a0>
 800a062:	1ca0      	adds	r0, r4, #2
 800a064:	bf08      	it	eq
 800a066:	3501      	addeq	r5, #1
 800a068:	3402      	adds	r4, #2
 800a06a:	e7ca      	b.n	800a002 <__ieee754_sqrt+0x136>
 800a06c:	3401      	adds	r4, #1
 800a06e:	f024 0401 	bic.w	r4, r4, #1
 800a072:	e7c6      	b.n	800a002 <__ieee754_sqrt+0x136>
 800a074:	7ff00000 	.word	0x7ff00000
 800a078:	20000088 	.word	0x20000088
 800a07c:	20000090 	.word	0x20000090

0800a080 <round>:
 800a080:	ec53 2b10 	vmov	r2, r3, d0
 800a084:	b570      	push	{r4, r5, r6, lr}
 800a086:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800a08a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800a08e:	2813      	cmp	r0, #19
 800a090:	ee10 5a10 	vmov	r5, s0
 800a094:	4619      	mov	r1, r3
 800a096:	dc18      	bgt.n	800a0ca <round+0x4a>
 800a098:	2800      	cmp	r0, #0
 800a09a:	da09      	bge.n	800a0b0 <round+0x30>
 800a09c:	3001      	adds	r0, #1
 800a09e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800a0a2:	d103      	bne.n	800a0ac <round+0x2c>
 800a0a4:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a0a8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	e02a      	b.n	800a106 <round+0x86>
 800a0b0:	4c16      	ldr	r4, [pc, #88]	; (800a10c <round+0x8c>)
 800a0b2:	4104      	asrs	r4, r0
 800a0b4:	ea03 0604 	and.w	r6, r3, r4
 800a0b8:	4316      	orrs	r6, r2
 800a0ba:	d011      	beq.n	800a0e0 <round+0x60>
 800a0bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a0c0:	4103      	asrs	r3, r0
 800a0c2:	440b      	add	r3, r1
 800a0c4:	ea23 0104 	bic.w	r1, r3, r4
 800a0c8:	e7f0      	b.n	800a0ac <round+0x2c>
 800a0ca:	2833      	cmp	r0, #51	; 0x33
 800a0cc:	dd0b      	ble.n	800a0e6 <round+0x66>
 800a0ce:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a0d2:	d105      	bne.n	800a0e0 <round+0x60>
 800a0d4:	ee10 0a10 	vmov	r0, s0
 800a0d8:	f7f6 f8f8 	bl	80002cc <__adddf3>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	ec43 2b10 	vmov	d0, r2, r3
 800a0e4:	bd70      	pop	{r4, r5, r6, pc}
 800a0e6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a0ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a0ee:	40f4      	lsrs	r4, r6
 800a0f0:	4214      	tst	r4, r2
 800a0f2:	d0f5      	beq.n	800a0e0 <round+0x60>
 800a0f4:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	4083      	lsls	r3, r0
 800a0fc:	195b      	adds	r3, r3, r5
 800a0fe:	bf28      	it	cs
 800a100:	3101      	addcs	r1, #1
 800a102:	ea23 0304 	bic.w	r3, r3, r4
 800a106:	461a      	mov	r2, r3
 800a108:	460b      	mov	r3, r1
 800a10a:	e7e9      	b.n	800a0e0 <round+0x60>
 800a10c:	000fffff 	.word	0x000fffff

0800a110 <_init>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	bf00      	nop
 800a114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a116:	bc08      	pop	{r3}
 800a118:	469e      	mov	lr, r3
 800a11a:	4770      	bx	lr

0800a11c <_fini>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	bf00      	nop
 800a120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a122:	bc08      	pop	{r3}
 800a124:	469e      	mov	lr, r3
 800a126:	4770      	bx	lr
